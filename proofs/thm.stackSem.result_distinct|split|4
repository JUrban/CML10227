Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackSem
% (144485)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 189
% Passive clauses: 3685
% Generated clauses: 22204
% Final active clauses: 165
% Final passive clauses: 3291
% Input formulas: 69
% Initial clauses: 105
% 
% Duplicate literals: 622
% Trivial inequalities: 410
% Fw subsumption resolutions: 1920
% Fw demodulations: 3372
% Bw demodulations: 24
% 
% Simple tautologies: 283
% Equational tautologies: 47
% Forward subsumptions: 11274
% 
% Binary resolution: 733
% Factoring: 2
% Forward superposition: 7782
% Backward superposition: 7300
% Self superposition: 166
% Equality factoring: 72
% Equality resolution: 33
% 
% Split clauses: 274
% Split components: 550
% SAT solver clauses: 796
% SAT solver unit clauses: 10
% SAT solver binary clauses: 175
% 
% Sat splits: 274
% 
% TWLsolver clauses: 796
% TWLsolver calls for satisfiability: 212
% 
% Memory used [KB]: 20212
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stackSem
% (144505)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 148
% Passive clauses: 1195
% Generated clauses: 15011
% Final active clauses: 144
% Final passive clauses: 971
% Input formulas: 69
% Initial clauses: 105
% 
% Duplicate literals: 274
% Trivial inequalities: 471
% Fw subsumption resolutions: 835
% Fw demodulations: 2347
% Bw demodulations: 72
% Condensations: 775
% Global subsumptions: 8
% 
% Simple tautologies: 116
% Equational tautologies: 41
% Forward subsumptions: 6715
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 159
% Factoring: 1
% Forward superposition: 4164
% Backward superposition: 4308
% Self superposition: 143
% Equality factoring: 72
% Equality resolution: 34
% 
% Split clauses: 83
% Split components: 166
% SAT solver clauses: 2354
% SAT solver unit clauses: 154
% SAT solver binary clauses: 56
% SAT solver learnt clauses: 16
% 
% Sat splits: 83
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2322
% TWLsolver calls for satisfiability: 396
% 
% Memory used [KB]: 18549
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stackSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackSem
% SZS output start Proof for thm.stackSem
fof(f59924,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1807,f1801,f4230,f4217,f4233,f5594,f5596,f5585,f5605,f5598,f6329,f6394,f6465,f6467,f6468,f6469,f6518,f6521,f6519,f6865,f6867,f6868,f6878,f6880,f6885,f6890,f6896,f6898,f6901,f6904,f6906,f6928,f6932,f6934,f6936,f6938,f6940,f6942,f6943,f6944,f6945,f6946,f6947,f6948,f6949,f6950,f6952,f6955,f9698,f9700,f9702,f9706,f9708,f9712,f9714,f9751,f9755,f10118,f10120,f10123,f10124,f10128,f10132,f10133,f10134,f10136,f10138,f10140,f10141,f10142,f10143,f10144,f10145,f10146,f10147,f10148,f10150,f10151,f10152,f10153,f10154,f10155,f10156,f10157,f10158,f16693,f16764,f12770,f12768,f1808,f12255,f10972,f9129,f7351,f1816,f2805,f4239,f2818,f1810,f17118,f17120,f17122,f17123,f17126,f17128,f17130,f17132,f17134,f17136,f17137,f17138,f17139,f17140,f17141,f17142,f17143,f17144,f17145,f17146,f17147,f17148,f17149,f17150,f17151,f17152,f17153,f17155,f17157,f17159,f17161,f17164,f17166,f17168,f17170,f17171,f17172,f17173,f17174,f17175,f17178,f17179,f17180,f17181,f17202,f17205,f17207,f17215,f17217,f17219,f17221,f17222,f17223,f17225,f17226,f17230,f17231,f17232,f17233,f17234,f17235,f17236,f17237,f17238,f17239,f17240,f17241,f17242,f17243,f17245,f17247,f17249,f17251,f17253,f17255,f17258,f17261,f17264,f17267,f17270,f17273,f17276,f17278,f17280,f17282,f17285,f17288,f17291,f17293,f17295,f17297,f17298,f17300,f17302,f17304,f17306,f17308,f17310,f17312,f17314,f17316,f17317,f18196,f19006,f18258,f23329,f23330,f23331,f23332,f23392,f23333,f23389,f23393,f23335,f23336,f23396,f23337,f23338,f23397,f23398,f23399,f23388,f23386,f23400,f23391,f23395,f23411,f24306,f24308,f24309,f24318,f24323,f24331,f24334,f24336,f24337,f24338,f24339,f24341,f24342,f24345,f24347,f24350,f24369,f24377,f24379,f24381,f24383,f24385,f24387,f24388,f24389,f24390,f24391,f24392,f24393,f24394,f24395,f24396,f24397,f24398,f24400,f24403,f24417,f24420,f43359,f43341,f43293,f43290,f43281,f43403,f43279,f43218,f44029,f43216,f44041,f44043,f43215,f44046,f43212,f44048,f43211,f44049,f44051,f44052,f44044,f43207,f44054,f43205,f43204,f44057,f43203,f44058,f43202,f44059,f43201,f44060,f43200,f44061,f43175,f43656,f46939,f47029,f53510,f53508,f53457,f53706,f53454,f53452,f53442,f53721,f53440,f53300,f53296,f54478,f54480,f4231,f53295,f54483,f53292,f54485,f53291,f54486,f54488,f54489,f53287,f53286,f54492,f53285,f53284,f54493,f53283,f54494,f53282,f54495,f53281,f54496,f54497,f54468,f54498,f54491,f54499,f54501,f54481,f54502,f53279,f54500,f53249,f6393,f53852,f57852,f57854,f57855,f57857,f57858,f57860,f57861,f57863,f57865,f57864,f57866,f57867,f57868,f57869,f57872,f57873,f57874,f57875,f57877,f57878,f57879,f57880,f57881,f57870,f57882,f57884,f57885,f57886,f57887,f57889,f57890,f57853,f57894,f57895,f57897,f57898,f57899,f57862,f57900,f57903,f57904,f57907,f57908,f57856,f57912,f57914,f57913,f57916,f57917,f57859,f57949,f57951,f57952,f57953,f57954,f57955,f57950,f57967,f57968,f57969,f57986,f58003,f58082,f59321,f59323,f59324,f59333,f59338,f59346,f59349,f59351,f59352,f59353,f59354,f59356,f59357,f59359,f59361,f59367,f59370,f59375,f59378,f59380,f59382,f59384,f59386,f59388,f59390,f59392,f59394,f59396,f59398,f59400,f59402,f59404,f59406,f59408,f59410,f59412,f59414,f59418,f59430,f59456,f59457,f59464,f59465,f59469,f59471,f59473,f59475,f59478,f59480,f59482,f59484,f59488,f59489,f59491,f59492,f59496,f59497,f59504,f59505,f59521,f59547,f59580,f59582,f59606,f59623,f59629,f59631,f59633,f59639,f59653,f59655,f59673,f59675,f59677,f59679,f59681,f59683,f59705,f59722,f59770,f59774,f59796,f59802,f59804,f59806,f59808,f59810,f59812,f59814,f59815,f59816,f59818,f59820,f59822,f59824,f59826,f59828,f59830,f59832,f59833,f59834,f59835,f59836,f59837,f59838,f59839,f59840,f59842,f59846,f59848,f59850,f59852,f59854,f59857,f59861,f59867,f59873,f59922])).
fof(f59922,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847,f59849,f59851,f59853,f59856,f57983,f58080])).
fof(f58080,plain,(
  ( ! [X63] : (p(s(bool,X63))) ) | $spl108),
  inference(superposition,[],[f57853,f320])).
fof(f57983,plain,(
  ( ! [X0] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),X0)) ) | $spl108),
  inference(unit_resulting_resolution,[],[f57853,f330])).
fof(f59856,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59212,f235])).
fof(f59212,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f301])).
fof(f59853,plain,(
  ( ! [X78,X76,X79,X77] : (s('type.num.num',X79) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X76,'type.num.num'),X77),s('type.stackSem.result'(X76),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X76),X78)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59166,f235])).
fof(f59166,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s('type.num.num',X79) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X76,'type.num.num'),X77),s('type.stackSem.result'(X76),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X76),X78)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f33903])).
fof(f59851,plain,(
  ( ! [X78,X76,X79,X77] : (s('type.num.num',X79) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X76,'type.num.num'),X77),s('type.wordSem.word_loc'(X76),X78)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59163,f235])).
fof(f59163,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s('type.num.num',X79) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X76,'type.num.num'),X77),s('type.wordSem.word_loc'(X76),X78)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f33924])).
fof(f59849,plain,(
  ( ! [X74,X72,X75,X73] : (s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X72,'type.num.num'),X73),s('type.wordSem.word_loc'(X72),X74)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59158,f235])).
fof(f59158,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,'T_0')) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X72,'type.num.num'),X73),s('type.wordSem.word_loc'(X72),X74)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f33923])).
fof(f59847,plain,(
  ( ! [X74,X72,X75,X73] : (s('type.num.num',X75) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X72,'type.num.num'),X73),s('type.stackSem.result'(X72),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X72),X74)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59156,f235])).
fof(f59156,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,'T_0')) | s('type.num.num',X75) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X72,'type.num.num'),X73),s('type.stackSem.result'(X72),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X72),X74)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f33902])).
fof(f59845,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59153,f235])).
fof(f59153,plain,(
  ( ! [X14,X12,X15,X16] : (~p(s(bool,'T_0')) | s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f4819])).
fof(f59841,plain,(
  ( ! [X197,X195,X201] : (s(X195,X201) = s(X195,happ(s(fun('type.wordSem.word_loc'(sK0),X195),X197),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59124,f235])).
fof(f59124,plain,(
  ( ! [X197,X195,X201] : (~p(s(bool,'T_0')) | s(X195,X201) = s(X195,happ(s(fun('type.wordSem.word_loc'(sK0),X195),X197),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f57848])).
fof(f59831,plain,(
  ( ! [X786,X784,X790,X788,X793,X787,X785,X791,X789,X792] : (s(fun(X784,X785),X793) = s(fun(X784,X785),happ(s(fun(X786,fun(X784,X785)),'_dst_x00x10x01_3'(s(fun(X787,fun(X788,X785)),X789),s(fun(X786,X787),X790),s(fun(X784,X788),X791))),s(X786,X792)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59101,f235])).
fof(f59101,plain,(
  ( ! [X786,X784,X790,X788,X793,X787,X785,X791,X789,X792] : (~p(s(bool,'T_0')) | s(fun(X784,X785),X793) = s(fun(X784,X785),happ(s(fun(X786,fun(X784,X785)),'_dst_x00x10x01_3'(s(fun(X787,fun(X788,X785)),X789),s(fun(X786,X787),X790),s(fun(X784,X788),X791))),s(X786,X792)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f49427])).
fof(f59829,plain,(
  ( ! [X938,X936,X940,X934,X932,X939,X937,X941,X935,X933] : (s(fun(X932,X933),X941) = s(fun(X932,X933),happ(s(fun(X934,fun(X932,X933)),'_dst_x00x01x11_3'(s(fun(X935,fun(X936,X933)),X937),s(fun(X932,X935),X938),s(fun(X934,fun(X932,X936)),X939))),s(X934,X940)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59098,f235])).
fof(f59098,plain,(
  ( ! [X938,X936,X940,X934,X932,X939,X937,X941,X935,X933] : (~p(s(bool,'T_0')) | s(fun(X932,X933),X941) = s(fun(X932,X933),happ(s(fun(X934,fun(X932,X933)),'_dst_x00x01x11_3'(s(fun(X935,fun(X936,X933)),X937),s(fun(X932,X935),X938),s(fun(X934,fun(X932,X936)),X939))),s(X934,X940)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f51436])).
fof(f59827,plain,(
  ( ! [X825,X831,X829,X823,X826,X824,X830,X828,X832,X827] : (s(fun(X823,X824),X832) = s(fun(X823,X824),'_dst_x0x1x1_3'(s(fun(X825,fun(X826,X824)),X827),s(fun(X823,X825),X828),s(fun(X823,X826),happ(s(fun(X829,fun(X823,X826)),X830),s(X829,X831)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59095,f235])).
fof(f59095,plain,(
  ( ! [X825,X831,X829,X823,X826,X824,X830,X828,X832,X827] : (~p(s(bool,'T_0')) | s(fun(X823,X824),X832) = s(fun(X823,X824),'_dst_x0x1x1_3'(s(fun(X825,fun(X826,X824)),X827),s(fun(X823,X825),X828),s(fun(X823,X826),happ(s(fun(X829,fun(X823,X826)),X830),s(X829,X831)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f51340])).
fof(f59825,plain,(
  ( ! [X738,X745,X741,X743,X737,X739,X744,X746,X740,X742] : (s(fun(X737,X738),X746) = s(fun(X737,X738),'_dst_x0x0x1_3'(s(fun(X739,fun(X740,X738)),X741),s(X739,happ(s(fun(X742,X739),X743),s(X742,X744))),s(fun(X737,X740),X745)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59092,f235])).
fof(f59092,plain,(
  ( ! [X738,X745,X741,X743,X737,X739,X744,X746,X740,X742] : (~p(s(bool,'T_0')) | s(fun(X737,X738),X746) = s(fun(X737,X738),'_dst_x0x0x1_3'(s(fun(X739,fun(X740,X738)),X741),s(X739,happ(s(fun(X742,X739),X743),s(X742,X744))),s(fun(X737,X740),X745)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f49344])).
fof(f59823,plain,(
  ( ! [X922,X926,X924,X930,X928,X923,X927,X925,X931,X929] : (s(fun(X922,X923),X931) = s(fun(X922,X923),happ(s(fun(X924,fun(X922,X923)),'_dst_x00x01x11_3'(s(fun(X925,fun(X926,X923)),X927),s(fun(X922,X925),X928),s(fun(X924,fun(X922,X926)),X929))),s(X924,X930)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59089,f235])).
fof(f59089,plain,(
  ( ! [X922,X926,X924,X930,X928,X923,X927,X925,X931,X929] : (~p(s(bool,'T_0')) | s(fun(X922,X923),X931) = s(fun(X922,X923),happ(s(fun(X924,fun(X922,X923)),'_dst_x00x01x11_3'(s(fun(X925,fun(X926,X923)),X927),s(fun(X922,X925),X928),s(fun(X924,fun(X922,X926)),X929))),s(X924,X930)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f51435])).
fof(f59821,plain,(
  ( ! [X779,X777,X783,X781,X775,X778,X776,X782,X780,X774] : (s(fun(X774,X775),X783) = s(fun(X774,X775),happ(s(fun(X776,fun(X774,X775)),'_dst_x00x10x01_3'(s(fun(X777,fun(X778,X775)),X779),s(fun(X776,X777),X780),s(fun(X774,X778),X781))),s(X776,X782)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59087,f235])).
fof(f59087,plain,(
  ( ! [X779,X777,X783,X781,X775,X778,X776,X782,X780,X774] : (~p(s(bool,'T_0')) | s(fun(X774,X775),X783) = s(fun(X774,X775),happ(s(fun(X776,fun(X774,X775)),'_dst_x00x10x01_3'(s(fun(X777,fun(X778,X775)),X779),s(fun(X776,X777),X780),s(fun(X774,X778),X781))),s(X776,X782)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f49426])).
fof(f59819,plain,(
  ( ! [X819,X817,X821,X814,X818,X816,X822,X820,X815,X813] : (s(fun(X813,X814),X822) = s(fun(X813,X814),'_dst_x0x1x1_3'(s(fun(X815,fun(X816,X814)),X817),s(fun(X813,X815),X818),s(fun(X813,X816),happ(s(fun(X819,fun(X813,X816)),X820),s(X819,X821)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f59085,f235])).
fof(f59085,plain,(
  ( ! [X819,X817,X821,X814,X818,X816,X822,X820,X815,X813] : (~p(s(bool,'T_0')) | s(fun(X813,X814),X822) = s(fun(X813,X814),'_dst_x0x1x1_3'(s(fun(X815,fun(X816,X814)),X817),s(fun(X813,X815),X818),s(fun(X813,X816),happ(s(fun(X819,fun(X813,X816)),X820),s(X819,X821)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f51339])).
fof(f59817,plain,(
  ( ! [X736,X732,X734,X728,X730,X733,X735,X729,X731,X727] : (s(fun(X727,X728),X736) = s(fun(X727,X728),'_dst_x0x0x1_3'(s(fun(X729,fun(X730,X728)),X731),s(X729,happ(s(fun(X732,X729),X733),s(X732,X734))),s(fun(X727,X730),X735)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59083,f235])).
fof(f59083,plain,(
  ( ! [X736,X732,X734,X728,X730,X733,X735,X729,X731,X727] : (~p(s(bool,'T_0')) | s(fun(X727,X728),X736) = s(fun(X727,X728),'_dst_x0x0x1_3'(s(fun(X729,fun(X730,X728)),X731),s(X729,happ(s(fun(X732,X729),X733),s(X732,X734))),s(fun(X727,X730),X735)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f49343])).
fof(f59813,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl108),
  inference(subsumption_resolution,[],[f59271,f235])).
fof(f59271,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | $spl108),
  inference(condensation,[],[f59060])).
fof(f59060,plain,(
  ( ! [X220,X221] : (~p(s(bool,'T_0')) | p(s(bool,X220)) | p(s(bool,X221))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37796])).
fof(f59811,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl108),
  inference(subsumption_resolution,[],[f59052,f235])).
fof(f59052,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f4769])).
fof(f59809,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,X59)) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) ) | $spl108),
  inference(subsumption_resolution,[],[f59048,f235])).
fof(f59048,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X59)) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f6535])).
fof(f59807,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl108),
  inference(subsumption_resolution,[],[f59282,f235])).
fof(f59282,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | $spl108),
  inference(condensation,[],[f59037])).
fof(f59037,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f313])).
fof(f59805,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl108),
  inference(subsumption_resolution,[],[f59286,f235])).
fof(f59286,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl108),
  inference(condensation,[],[f59030])).
fof(f59030,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f316])).
fof(f59801,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl108),
  inference(subsumption_resolution,[],[f59019,f235])).
fof(f59019,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f4731])).
fof(f59795,plain,(
  ( ! [X198,X196,X194,X197,X195] : (s(X194,X195) = s(X194,happ(s(fun(X196,X194),X197),s(X196,X198)))) ) | $spl108),
  inference(subsumption_resolution,[],[f59009,f235])).
fof(f59009,plain,(
  ( ! [X198,X196,X194,X197,X195] : (~p(s(bool,'T_0')) | s(X194,X195) = s(X194,happ(s(fun(X196,X194),X197),s(X196,X198)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f48202])).
fof(f59773,plain,(
  ( ! [X478,X480,X482,X479,X481] : (s(X478,happ(s(fun(X479,X478),X480),s(X479,X481))) = s(X478,happ(s(fun(X479,X478),X482),s(X479,X481)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58981,f235])).
fof(f58981,plain,(
  ( ! [X478,X480,X482,X479,X481] : (~p(s(bool,'T_0')) | s(X478,happ(s(fun(X479,X478),X480),s(X479,X481))) = s(X478,happ(s(fun(X479,X478),X482),s(X479,X481)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f50373])).
fof(f59769,plain,(
  ( ! [X202,X203,X201] : (s(X201,X202) = s(X201,X203)) ) | $spl108),
  inference(subsumption_resolution,[],[f58978,f235])).
fof(f58978,plain,(
  ( ! [X202,X203,X201] : (~p(s(bool,'T_0')) | s(X201,X202) = s(X201,X203)) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37791])).
fof(f59721,plain,(
  ( ! [X527] : (p(s(bool,X527))) ) | $spl108),
  inference(subsumption_resolution,[],[f59720,f235])).
fof(f59720,plain,(
  ( ! [X527] : (~p(s(bool,'T_0')) | p(s(bool,X527))) ) | $spl108),
  inference(forward_demodulation,[],[f59719,f58002])).
fof(f59719,plain,(
  ( ! [X524,X526,X520,X522,X525,X527,X521,X523] : (~p(s(bool,happ(s(fun(X524,bool),'_dst_x0x0x1_3'(s(fun(X521,fun(X520,bool)),X522),s(X521,X523),s(fun(X524,X520),X525))),s(X524,X526)))) | p(s(bool,X527))) ) | $spl108),
  inference(subsumption_resolution,[],[f59718,f235])).
fof(f59718,plain,(
  ( ! [X524,X526,X520,X522,X525,X527,X521,X523] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X524,bool),'_dst_x0x0x1_3'(s(fun(X521,fun(X520,bool)),X522),s(X521,X523),s(fun(X524,X520),X525))),s(X524,X526)))) | p(s(bool,X527))) ) | $spl108),
  inference(forward_demodulation,[],[f58927,f58002])).
fof(f58927,plain,(
  ( ! [X524,X526,X520,X522,X525,X527,X521,X523] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X527)))) | ~p(s(bool,happ(s(fun(X524,bool),'_dst_x0x0x1_3'(s(fun(X521,fun(X520,bool)),X522),s(X521,X523),s(fun(X524,X520),X525))),s(X524,X526)))) | p(s(bool,X527))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47955])).
fof(f59704,plain,(
  ( ! [X503] : (p(s(bool,X503))) ) | $spl108),
  inference(subsumption_resolution,[],[f59703,f235])).
fof(f59703,plain,(
  ( ! [X503] : (~p(s(bool,'T_0')) | p(s(bool,X503))) ) | $spl108),
  inference(forward_demodulation,[],[f59702,f58002])).
fof(f59702,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X503,X497] : (p(s(bool,X503)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X496,bool),'_dst_x0x0x1_3'(s(fun(X497,fun(X498,bool)),X499),s(X497,X500),s(fun(X496,X498),X501))),s(X496,X502))))),s(bool,X503))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58911,f235])).
fof(f58911,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X503,X497] : (~p(s(bool,'T_0')) | p(s(bool,X503)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X496,bool),'_dst_x0x0x1_3'(s(fun(X497,fun(X498,bool)),X499),s(X497,X500),s(fun(X496,X498),X501))),s(X496,X502))))),s(bool,X503))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47757])).
fof(f59682,plain,(
  ( ! [X261,X263,X269,X265,X267,X262,X268,X264,X266] : (s(X261,X269) = s(X261,happ(s(fun(X262,X261),happ(s(fun(X263,fun(X262,X261)),X264),s(X263,X265))),s(X262,happ(s(fun(X266,X262),X267),s(X266,X268)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58900,f235])).
fof(f58900,plain,(
  ( ! [X261,X263,X269,X265,X267,X262,X268,X264,X266] : (~p(s(bool,'T_0')) | s(X261,X269) = s(X261,happ(s(fun(X262,X261),happ(s(fun(X263,fun(X262,X261)),X264),s(X263,X265))),s(X262,happ(s(fun(X266,X262),X267),s(X266,X268)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47923])).
fof(f59680,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(X125,X131) = s(X125,happ(s(fun(X126,X125),happ(s(fun(X127,fun(X126,X125)),X128),s(X127,X129))),s(X126,X130)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58898,f235])).
fof(f58898,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (~p(s(bool,'T_0')) | s(X125,X131) = s(X125,happ(s(fun(X126,X125),happ(s(fun(X127,fun(X126,X125)),X128),s(X127,X129))),s(X126,X130)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37780])).
fof(f59678,plain,(
  ( ! [X255,X253,X257,X249,X251,X254,X252,X250,X256] : (s(X249,X257) = s(X249,happ(s(fun(X250,X249),'_dst_x0x0x1_3'(s(fun(X251,fun(X252,X249)),X253),s(X251,X254),s(fun(X250,X252),X255))),s(X250,X256)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58896,f235])).
fof(f58896,plain,(
  ( ! [X255,X253,X257,X249,X251,X254,X252,X250,X256] : (~p(s(bool,'T_0')) | s(X249,X257) = s(X249,happ(s(fun(X250,X249),'_dst_x0x0x1_3'(s(fun(X251,fun(X252,X249)),X253),s(X251,X254),s(fun(X250,X252),X255))),s(X250,X256)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47728])).
fof(f59676,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(X125,X131) = s(X125,happ(s(fun(X126,X125),'_dst_x1x0_2'(s(fun(X126,fun(X127,X125)),X128),s(X127,X129))),s(X126,X130)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58894,f235])).
fof(f58894,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (~p(s(bool,'T_0')) | s(X125,X131) = s(X125,happ(s(fun(X126,X125),'_dst_x1x0_2'(s(fun(X126,fun(X127,X125)),X128),s(X127,X129))),s(X126,X130)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37629])).
fof(f59674,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(X125,X131) = s(X125,happ(s(fun(X126,X125),X127),s(X126,happ(s(fun(X128,X126),X129),s(X128,X130)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58892,f235])).
fof(f58892,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (~p(s(bool,'T_0')) | s(X125,X131) = s(X125,happ(s(fun(X126,X125),X127),s(X126,happ(s(fun(X128,X126),X129),s(X128,X130)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35552])).
fof(f59672,plain,(
  ( ! [X111,X109,X114,X112,X110,X115,X113] : (s(X109,X115) = s(X109,happ(s(fun(X110,X109),'_dst_x0x1_2'(s(fun(X111,X109),X112),s(fun(X110,X111),X113))),s(X110,X114)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58890,f235])).
fof(f58890,plain,(
  ( ! [X111,X109,X114,X112,X110,X115,X113] : (~p(s(bool,'T_0')) | s(X109,X115) = s(X109,happ(s(fun(X110,X109),'_dst_x0x1_2'(s(fun(X111,X109),X112),s(fun(X110,X111),X113))),s(X110,X114)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35695])).
fof(f59654,plain,(
  ( ! [X255,X253,X257,X259,X260,X254,X252,X256,X258] : (s(X252,X260) = s(X252,happ(s(fun(X253,X252),happ(s(fun(X254,fun(X253,X252)),X255),s(X254,X256))),s(X253,happ(s(fun(X257,X253),X258),s(X257,X259)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58873,f235])).
fof(f58873,plain,(
  ( ! [X255,X253,X257,X259,X260,X254,X252,X256,X258] : (~p(s(bool,'T_0')) | s(X252,X260) = s(X252,happ(s(fun(X253,X252),happ(s(fun(X254,fun(X253,X252)),X255),s(X254,X256))),s(X253,happ(s(fun(X257,X253),X258),s(X257,X259)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47922])).
fof(f59652,plain,(
  ( ! [X243,X241,X246,X244,X242,X240,X248,X247,X245] : (s(X240,X248) = s(X240,happ(s(fun(X241,X240),'_dst_x0x0x1_3'(s(fun(X242,fun(X243,X240)),X244),s(X242,X245),s(fun(X241,X243),X246))),s(X241,X247)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58871,f235])).
fof(f58871,plain,(
  ( ! [X243,X241,X246,X244,X242,X240,X248,X247,X245] : (~p(s(bool,'T_0')) | s(X240,X248) = s(X240,happ(s(fun(X241,X240),'_dst_x0x0x1_3'(s(fun(X242,fun(X243,X240)),X244),s(X242,X245),s(fun(X241,X243),X246))),s(X241,X247)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47727])).
fof(f59638,plain,(
  ( ! [X103,X107,X105,X102,X108,X106,X104] : (s(X102,X108) = s(X102,happ(s(fun(X103,X102),'_dst_x0x1_2'(s(fun(X104,X102),X105),s(fun(X103,X104),X106))),s(X103,X107)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58860,f235])).
fof(f58860,plain,(
  ( ! [X103,X107,X105,X102,X108,X106,X104] : (~p(s(bool,'T_0')) | s(X102,X108) = s(X102,happ(s(fun(X103,X102),'_dst_x0x1_2'(s(fun(X104,X102),X105),s(fun(X103,X104),X106))),s(X103,X107)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35694])).
fof(f59632,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(X118,X124) = s(X118,happ(s(fun(X119,X118),happ(s(fun(X120,fun(X119,X118)),X121),s(X120,X122))),s(X119,X123)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58855,f235])).
fof(f58855,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,'T_0')) | s(X118,X124) = s(X118,happ(s(fun(X119,X118),happ(s(fun(X120,fun(X119,X118)),X121),s(X120,X122))),s(X119,X123)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37779])).
fof(f59630,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(X118,X124) = s(X118,happ(s(fun(X119,X118),'_dst_x1x0_2'(s(fun(X119,fun(X120,X118)),X121),s(X120,X122))),s(X119,X123)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58853,f235])).
fof(f58853,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,'T_0')) | s(X118,X124) = s(X118,happ(s(fun(X119,X118),'_dst_x1x0_2'(s(fun(X119,fun(X120,X118)),X121),s(X120,X122))),s(X119,X123)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37628])).
fof(f59628,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(X118,X124) = s(X118,happ(s(fun(X119,X118),X120),s(X119,happ(s(fun(X121,X119),X122),s(X121,X123)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58851,f235])).
fof(f58851,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,'T_0')) | s(X118,X124) = s(X118,happ(s(fun(X119,X118),X120),s(X119,happ(s(fun(X121,X119),X122),s(X121,X123)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35551])).
fof(f59622,plain,(
  ( ! [X297] : (p(s(bool,X297))) ) | $spl108),
  inference(subsumption_resolution,[],[f59621,f235])).
fof(f59621,plain,(
  ( ! [X297] : (~p(s(bool,'T_0')) | p(s(bool,X297))) ) | $spl108),
  inference(forward_demodulation,[],[f59620,f58002])).
fof(f59620,plain,(
  ( ! [X292,X294,X296,X293,X295,X297] : (~p(s(bool,happ(s(fun(X293,bool),'_dst_x1x0_2'(s(fun(X293,fun(X292,bool)),X294),s(X292,X296))),s(X293,X295)))) | p(s(bool,X297))) ) | $spl108),
  inference(subsumption_resolution,[],[f59619,f235])).
fof(f59619,plain,(
  ( ! [X292,X294,X296,X293,X295,X297] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X293,bool),'_dst_x1x0_2'(s(fun(X293,fun(X292,bool)),X294),s(X292,X296))),s(X293,X295)))) | p(s(bool,X297))) ) | $spl108),
  inference(forward_demodulation,[],[f58841,f58002])).
fof(f58841,plain,(
  ( ! [X292,X294,X296,X293,X295,X297] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X297)))) | ~p(s(bool,happ(s(fun(X293,bool),'_dst_x1x0_2'(s(fun(X293,fun(X292,bool)),X294),s(X292,X296))),s(X293,X295)))) | p(s(bool,X297))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37810])).
fof(f59605,plain,(
  ( ! [X287] : (p(s(bool,X287))) ) | $spl108),
  inference(subsumption_resolution,[],[f59604,f235])).
fof(f59604,plain,(
  ( ! [X287] : (~p(s(bool,'T_0')) | p(s(bool,X287))) ) | $spl108),
  inference(forward_demodulation,[],[f59603,f58002])).
fof(f59603,plain,(
  ( ! [X282,X285,X287,X283,X284,X286] : (p(s(bool,X287)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X282,bool),'_dst_x1x0_2'(s(fun(X282,fun(X283,bool)),X284),s(X283,X285))),s(X282,X286))))),s(bool,X287))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58825,f235])).
fof(f58825,plain,(
  ( ! [X282,X285,X287,X283,X284,X286] : (~p(s(bool,'T_0')) | p(s(bool,X287)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X282,bool),'_dst_x1x0_2'(s(fun(X282,fun(X283,bool)),X284),s(X283,X285))),s(X282,X286))))),s(bool,X287))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37655])).
fof(f59581,plain,(
  ( ! [X194,X190,X188] : (s(X188,X194) = s(X188,happ(s(fun('type.wordSem.word_loc'(sK0),X188),X190),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl108),
  inference(subsumption_resolution,[],[f58812,f235])).
fof(f58812,plain,(
  ( ! [X194,X190,X188] : (~p(s(bool,'T_0')) | s(X188,X194) = s(X188,happ(s(fun('type.wordSem.word_loc'(sK0),X188),X190),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f57846])).
fof(f59579,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | $spl108),
  inference(subsumption_resolution,[],[f58805,f235])).
fof(f58805,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f330])).
fof(f59546,plain,(
  ( ! [X252] : (p(s(bool,X252))) ) | $spl108),
  inference(subsumption_resolution,[],[f59545,f235])).
fof(f59545,plain,(
  ( ! [X252] : (~p(s(bool,'T_0')) | p(s(bool,X252))) ) | $spl108),
  inference(forward_demodulation,[],[f59544,f58002])).
fof(f59544,plain,(
  ( ! [X251,X249,X252,X250,X248,X247] : (p(s(bool,X252)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X247,bool),'_dst_x0x1_2'(s(fun(X248,bool),X249),s(fun(X247,X248),X250))),s(X247,X251))))),s(bool,X252))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58774,f235])).
fof(f58774,plain,(
  ( ! [X251,X249,X252,X250,X248,X247] : (~p(s(bool,'T_0')) | p(s(bool,X252)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X247,bool),'_dst_x0x1_2'(s(fun(X248,bool),X249),s(fun(X247,X248),X250))),s(X247,X251))))),s(bool,X252))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35719])).
fof(f59520,plain,(
  ( ! [X301] : (p(s(bool,X301))) ) | $spl108),
  inference(subsumption_resolution,[],[f59519,f235])).
fof(f59519,plain,(
  ( ! [X301] : (~p(s(bool,'T_0')) | p(s(bool,X301))) ) | $spl108),
  inference(forward_demodulation,[],[f59518,f58002])).
fof(f59518,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (~p(s(bool,happ(s(fun(X298,bool),'_dst_x0x1_2'(s(fun(X296,bool),X297),s(fun(X298,X296),X299))),s(X298,X300)))) | p(s(bool,X301))) ) | $spl108),
  inference(subsumption_resolution,[],[f59517,f235])).
fof(f59517,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X298,bool),'_dst_x0x1_2'(s(fun(X296,bool),X297),s(fun(X298,X296),X299))),s(X298,X300)))) | p(s(bool,X301))) ) | $spl108),
  inference(forward_demodulation,[],[f58755,f58002])).
fof(f58755,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X301)))) | ~p(s(bool,happ(s(fun(X298,bool),'_dst_x0x1_2'(s(fun(X296,bool),X297),s(fun(X298,X296),X299))),s(X298,X300)))) | p(s(bool,X301))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35579])).
fof(f59317,plain,(
  ( ! [X1002,X1006,X1004,X1003,X1001,X1005] : (s(fun(X1001,bool),X1002) = s(fun(X1001,bool),X1003) | s(bool,X1004) = s(bool,'const.bool.DATATYPE_1'(s(X1005,X1006))) | s(bool,X1004) = s(bool,g(s(X1001,sK9(X1002,X1003,bool,X1001))))) ) | $spl108),
  inference(trivial_inequality_removal,[],[f58720])).
fof(f58720,plain,(
  ( ! [X1002,X1006,X1004,X1003,X1001,X1005] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X1001,bool),X1002) = s(fun(X1001,bool),X1003) | s(bool,X1004) = s(bool,'const.bool.DATATYPE_1'(s(X1005,X1006))) | s(bool,X1004) = s(bool,g(s(X1001,sK9(X1002,X1003,bool,X1001))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f53143])).
fof(f59318,plain,(
  ( ! [X516,X518,X517,X519] : (s(fun(X516,bool),X517) = s(fun(X516,bool),X518) | s(bool,X519) = s(bool,'const.bool.DATATYPE_1'(s(bool,X519))) | s(bool,X519) = s(bool,g(s(X516,sK9(X517,X518,bool,X516))))) ) | $spl108),
  inference(trivial_inequality_removal,[],[f58718])).
fof(f58718,plain,(
  ( ! [X516,X518,X517,X519] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X516,bool),X517) = s(fun(X516,bool),X518) | s(bool,X519) = s(bool,'const.bool.DATATYPE_1'(s(bool,X519))) | s(bool,X519) = s(bool,g(s(X516,sK9(X517,X518,bool,X516))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f43101])).
fof(f59483,plain,(
  ( ! [X1816,X1814,X1812,X1810,X1808,X1817,X1815,X1813,X1811,X1809] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1808),'const.wordSem.Loc_2'(s('type.num.num',X1816),s('type.num.num',X1817))),s('type.wordSem.word_loc'(X1808),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1808),happ(s(fun(X1813,'type.fcp.cart'(bool,X1808)),'_dst_x0x0x1_3'(s(fun(X1810,fun(X1809,'type.fcp.cart'(bool,X1808))),X1811),s(X1810,X1812),s(fun(X1813,X1809),X1814))),s(X1813,X1815)))))))) ) | $spl108),
  inference(forward_demodulation,[],[f58609,f58002])).
fof(f58609,plain,(
  ( ! [X1816,X1814,X1812,X1810,X1808,X1817,X1815,X1813,X1811,X1809] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1816,X1817,happ(s(fun(X1809,'type.fcp.cart'(bool,X1808)),happ(s(fun(X1810,fun(X1809,'type.fcp.cart'(bool,X1808))),X1811),s(X1810,X1812))),s(X1809,happ(s(fun(X1813,X1809),X1814),s(X1813,X1815)))),X1808)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1808),'const.wordSem.Loc_2'(s('type.num.num',X1816),s('type.num.num',X1817))),s('type.wordSem.word_loc'(X1808),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1808),happ(s(fun(X1813,'type.fcp.cart'(bool,X1808)),'_dst_x0x0x1_3'(s(fun(X1810,fun(X1809,'type.fcp.cart'(bool,X1808))),X1811),s(X1810,X1812),s(fun(X1813,X1809),X1814))),s(X1813,X1815)))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f48095])).
fof(f59481,plain,(
  ( ! [X1765,X1767,X1769,X1771,X1773,X1764,X1766,X1768,X1770,X1772] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1773),'const.wordSem.Loc_2'(s('type.num.num',X1771),s('type.num.num',happ(s(fun(X1768,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1765,fun(X1764,'type.num.num')),X1766),s(X1765,X1767),s(fun(X1768,X1764),X1769))),s(X1768,X1770))))),s('type.wordSem.word_loc'(X1773),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1773),X1772)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58608,f58002])).
fof(f58608,plain,(
  ( ! [X1765,X1767,X1769,X1771,X1773,X1764,X1766,X1768,X1770,X1772] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1771,happ(s(fun(X1764,'type.num.num'),happ(s(fun(X1765,fun(X1764,'type.num.num')),X1766),s(X1765,X1767))),s(X1764,happ(s(fun(X1768,X1764),X1769),s(X1768,X1770)))),X1772,X1773)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1773),'const.wordSem.Loc_2'(s('type.num.num',X1771),s('type.num.num',happ(s(fun(X1768,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1765,fun(X1764,'type.num.num')),X1766),s(X1765,X1767),s(fun(X1768,X1764),X1769))),s(X1768,X1770))))),s('type.wordSem.word_loc'(X1773),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1773),X1772)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f48091])).
fof(f59479,plain,(
  ( ! [X1754,X1756,X1758,X1761,X1763,X1755,X1757,X1759,X1760,X1762] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1763),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1758,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1755,fun(X1754,'type.num.num')),X1756),s(X1755,X1757),s(fun(X1758,X1754),X1759))),s(X1758,X1760))),s('type.num.num',X1761))),s('type.wordSem.word_loc'(X1763),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1763),X1762)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58607,f58002])).
fof(f58607,plain,(
  ( ! [X1754,X1756,X1758,X1761,X1763,X1755,X1757,X1759,X1760,X1762] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1754,'type.num.num'),happ(s(fun(X1755,fun(X1754,'type.num.num')),X1756),s(X1755,X1757))),s(X1754,happ(s(fun(X1758,X1754),X1759),s(X1758,X1760)))),X1761,X1762,X1763)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1763),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1758,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1755,fun(X1754,'type.num.num')),X1756),s(X1755,X1757),s(fun(X1758,X1754),X1759))),s(X1758,X1760))),s('type.num.num',X1761))),s('type.wordSem.word_loc'(X1763),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1763),X1762)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f48090])).
fof(f59474,plain,(
  ( ! [X1787,X1778,X1780,X1782,X1784,X1786,X1779,X1781,X1783,X1785] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1778),'const.wordSem.Loc_2'(s('type.num.num',X1786),s('type.num.num',X1787))),s('type.wordSem.word_loc'(X1778),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1778),happ(s(fun(X1781,'type.fcp.cart'(bool,X1778)),happ(s(fun(X1780,fun(X1781,'type.fcp.cart'(bool,X1778))),X1782),s(X1780,X1783))),s(X1781,happ(s(fun(X1779,X1781),X1784),s(X1779,X1785)))))))))) ) | $spl108),
  inference(forward_demodulation,[],[f58595,f58002])).
fof(f58595,plain,(
  ( ! [X1787,X1778,X1780,X1782,X1784,X1786,X1779,X1781,X1783,X1785] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1786,X1787,happ(s(fun(X1779,'type.fcp.cart'(bool,X1778)),'_dst_x0x0x1_3'(s(fun(X1780,fun(X1781,'type.fcp.cart'(bool,X1778))),X1782),s(X1780,X1783),s(fun(X1779,X1781),X1784))),s(X1779,X1785)),X1778)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1778),'const.wordSem.Loc_2'(s('type.num.num',X1786),s('type.num.num',X1787))),s('type.wordSem.word_loc'(X1778),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1778),happ(s(fun(X1781,'type.fcp.cart'(bool,X1778)),happ(s(fun(X1780,fun(X1781,'type.fcp.cart'(bool,X1778))),X1782),s(X1780,X1783))),s(X1781,happ(s(fun(X1779,X1781),X1784),s(X1779,X1785)))))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47896])).
fof(f59472,plain,(
  ( ! [X1734,X1736,X1738,X1740,X1742,X1735,X1737,X1739,X1741,X1743] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1743),'const.wordSem.Loc_2'(s('type.num.num',X1741),s('type.num.num',happ(s(fun(X1736,'type.num.num'),happ(s(fun(X1735,fun(X1736,'type.num.num')),X1737),s(X1735,X1738))),s(X1736,happ(s(fun(X1734,X1736),X1739),s(X1734,X1740))))))),s('type.wordSem.word_loc'(X1743),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1743),X1742)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58594,f58002])).
fof(f58594,plain,(
  ( ! [X1734,X1736,X1738,X1740,X1742,X1735,X1737,X1739,X1741,X1743] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1741,happ(s(fun(X1734,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1735,fun(X1736,'type.num.num')),X1737),s(X1735,X1738),s(fun(X1734,X1736),X1739))),s(X1734,X1740)),X1742,X1743)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1743),'const.wordSem.Loc_2'(s('type.num.num',X1741),s('type.num.num',happ(s(fun(X1736,'type.num.num'),happ(s(fun(X1735,fun(X1736,'type.num.num')),X1737),s(X1735,X1738))),s(X1736,happ(s(fun(X1734,X1736),X1739),s(X1734,X1740))))))),s('type.wordSem.word_loc'(X1743),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1743),X1742)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47892])).
fof(f59470,plain,(
  ( ! [X1725,X1727,X1728,X1730,X1732,X1724,X1726,X1729,X1731,X1733] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1733),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1726,'type.num.num'),happ(s(fun(X1725,fun(X1726,'type.num.num')),X1727),s(X1725,X1728))),s(X1726,happ(s(fun(X1724,X1726),X1729),s(X1724,X1730))))),s('type.num.num',X1731))),s('type.wordSem.word_loc'(X1733),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1733),X1732)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58593,f58002])).
fof(f58593,plain,(
  ( ! [X1725,X1727,X1728,X1730,X1732,X1724,X1726,X1729,X1731,X1733] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1724,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1725,fun(X1726,'type.num.num')),X1727),s(X1725,X1728),s(fun(X1724,X1726),X1729))),s(X1724,X1730)),X1731,X1732,X1733)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1733),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1726,'type.num.num'),happ(s(fun(X1725,fun(X1726,'type.num.num')),X1727),s(X1725,X1728))),s(X1726,happ(s(fun(X1724,X1726),X1729),s(X1724,X1730))))),s('type.num.num',X1731))),s('type.wordSem.word_loc'(X1733),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1733),X1732)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47891])).
fof(f59429,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num',X31),s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X28),X30))))))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58467,f58002])).
fof(f58467,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num',X31),s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X28),X30))))))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X28,'type.num.num'),X29),s('type.wordSem.word_loc'(X28),X30)))),X32,X33)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38576])).
fof(f59417,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X28),X30))))),s('type.num.num',X31))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58455,f58002])).
fof(f58455,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X28),X30))))),s('type.num.num',X31))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X28,'type.num.num'),X29),s('type.wordSem.word_loc'(X28),X30)))),X31,X32,X33)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38563])).
fof(f59413,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X34),'const.wordSem.Loc_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.wordSem.word_loc'(X34),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X34),happ(s(fun(X36,'type.fcp.cart'(bool,X34)),happ(s(fun(X35,fun(X36,'type.fcp.cart'(bool,X34))),X37),s(X35,X39))),s(X36,X38)))))))) ) | $spl108),
  inference(forward_demodulation,[],[f58452,f58002])).
fof(f58452,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X40,X41,happ(s(fun(X35,'type.fcp.cart'(bool,X34)),'_dst_x1x0_2'(s(fun(X35,fun(X36,'type.fcp.cart'(bool,X34))),X37),s(X36,X38))),s(X35,X39)),X34)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X34),'const.wordSem.Loc_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.wordSem.word_loc'(X34),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X34),happ(s(fun(X36,'type.fcp.cart'(bool,X34)),happ(s(fun(X35,fun(X36,'type.fcp.cart'(bool,X34))),X37),s(X35,X39))),s(X36,X38)))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38522])).
fof(f59411,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X20),'const.wordSem.Loc_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.wordSem.word_loc'(X20),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X20),happ(s(fun(X22,'type.fcp.cart'(bool,X20)),'_dst_x1x0_2'(s(fun(X22,fun(X21,'type.fcp.cart'(bool,X20))),X23),s(X21,X25))),s(X22,X24)))))))) ) | $spl108),
  inference(forward_demodulation,[],[f58451,f58002])).
fof(f58451,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X26,X27,happ(s(fun(X21,'type.fcp.cart'(bool,X20)),happ(s(fun(X22,fun(X21,'type.fcp.cart'(bool,X20))),X23),s(X22,X24))),s(X21,X25)),X20)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X20),'const.wordSem.Loc_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.wordSem.word_loc'(X20),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X20),happ(s(fun(X22,'type.fcp.cart'(bool,X20)),'_dst_x1x0_2'(s(fun(X22,fun(X21,'type.fcp.cart'(bool,X20))),X23),s(X21,X25))),s(X22,X24)))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38520])).
fof(f59409,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X18,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X12),'const.wordSem.Loc_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.wordSem.word_loc'(X12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X12),happ(s(fun(X14,'type.fcp.cart'(bool,X12)),X15),s(X14,happ(s(fun(X13,X14),X16),s(X13,X17)))))))))) ) | $spl108),
  inference(forward_demodulation,[],[f58450,f58002])).
fof(f58450,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X18,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X18,X19,happ(s(fun(X13,'type.fcp.cart'(bool,X12)),'_dst_x0x1_2'(s(fun(X14,'type.fcp.cart'(bool,X12)),X15),s(fun(X13,X14),X16))),s(X13,X17)),X12)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X12),'const.wordSem.Loc_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.wordSem.word_loc'(X12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X12),happ(s(fun(X14,'type.fcp.cart'(bool,X12)),X15),s(X14,happ(s(fun(X13,X14),X16),s(X13,X17)))))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38519])).
fof(f59407,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X4),'const.wordSem.Loc_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.wordSem.word_loc'(X4),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X4),happ(s(fun(X7,'type.fcp.cart'(bool,X4)),'_dst_x0x1_2'(s(fun(X5,'type.fcp.cart'(bool,X4)),X6),s(fun(X7,X5),X8))),s(X7,X9)))))))) ) | $spl108),
  inference(forward_demodulation,[],[f58449,f58002])).
fof(f58449,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X10,X11,happ(s(fun(X5,'type.fcp.cart'(bool,X4)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),X4)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X4),'const.wordSem.Loc_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.wordSem.word_loc'(X4),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X4),happ(s(fun(X7,'type.fcp.cart'(bool,X4)),'_dst_x0x1_2'(s(fun(X5,'type.fcp.cart'(bool,X4)),X6),s(fun(X7,X5),X8))),s(X7,X9)))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38518])).
fof(f59405,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X87),'const.wordSem.Loc_2'(s('type.num.num',X85),s('type.num.num',happ(s(fun(X81,'type.num.num'),happ(s(fun(X80,fun(X81,'type.num.num')),X82),s(X80,X84))),s(X81,X83))))),s('type.wordSem.word_loc'(X87),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X87),X86)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58448,f58002])).
fof(f58448,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X85,happ(s(fun(X80,'type.num.num'),'_dst_x1x0_2'(s(fun(X80,fun(X81,'type.num.num')),X82),s(X81,X83))),s(X80,X84)),X86,X87)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X87),'const.wordSem.Loc_2'(s('type.num.num',X85),s('type.num.num',happ(s(fun(X81,'type.num.num'),happ(s(fun(X80,fun(X81,'type.num.num')),X82),s(X80,X84))),s(X81,X83))))),s('type.wordSem.word_loc'(X87),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X87),X86)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38509])).
fof(f59403,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X73),'const.wordSem.Loc_2'(s('type.num.num',X71),s('type.num.num',happ(s(fun(X67,'type.num.num'),'_dst_x1x0_2'(s(fun(X67,fun(X66,'type.num.num')),X68),s(X66,X70))),s(X67,X69))))),s('type.wordSem.word_loc'(X73),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X73),X72)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58447,f58002])).
fof(f58447,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X71,happ(s(fun(X66,'type.num.num'),happ(s(fun(X67,fun(X66,'type.num.num')),X68),s(X67,X69))),s(X66,X70)),X72,X73)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X73),'const.wordSem.Loc_2'(s('type.num.num',X71),s('type.num.num',happ(s(fun(X67,'type.num.num'),'_dst_x1x0_2'(s(fun(X67,fun(X66,'type.num.num')),X68),s(X66,X70))),s(X67,X69))))),s('type.wordSem.word_loc'(X73),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X73),X72)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38507])).
fof(f59401,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X65),'const.wordSem.Loc_2'(s('type.num.num',X63),s('type.num.num',happ(s(fun(X59,'type.num.num'),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))))),s('type.wordSem.word_loc'(X65),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X65),X64)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58446,f58002])).
fof(f58446,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X63,happ(s(fun(X58,'type.num.num'),'_dst_x0x1_2'(s(fun(X59,'type.num.num'),X60),s(fun(X58,X59),X61))),s(X58,X62)),X64,X65)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X65),'const.wordSem.Loc_2'(s('type.num.num',X63),s('type.num.num',happ(s(fun(X59,'type.num.num'),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))))),s('type.wordSem.word_loc'(X65),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X65),X64)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38506])).
fof(f59399,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X57),'const.wordSem.Loc_2'(s('type.num.num',X55),s('type.num.num',happ(s(fun(X52,'type.num.num'),'_dst_x0x1_2'(s(fun(X50,'type.num.num'),X51),s(fun(X52,X50),X53))),s(X52,X54))))),s('type.wordSem.word_loc'(X57),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X57),X56)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58445,f58002])).
fof(f58445,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X55,happ(s(fun(X50,'type.num.num'),X51),s(X50,happ(s(fun(X52,X50),X53),s(X52,X54)))),X56,X57)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X57),'const.wordSem.Loc_2'(s('type.num.num',X55),s('type.num.num',happ(s(fun(X52,'type.num.num'),'_dst_x0x1_2'(s(fun(X50,'type.num.num'),X51),s(fun(X52,X50),X53))),s(X52,X54))))),s('type.wordSem.word_loc'(X57),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X57),X56)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38505])).
fof(f59397,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X12,'type.num.num'),X13),s('type.wordSem.word_loc'(X12),X14))))))),s('type.wordSem.word_loc'(X17),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X17),X16)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58444,f58002])).
fof(f58444,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X15,'const.stackSem.result_size_2'(s(fun(X12,'type.num.num'),X13),s('type.stackSem.result'(X12),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X12),X14)))),X16,X17)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X12,'type.num.num'),X13),s('type.wordSem.word_loc'(X12),X14))))))),s('type.wordSem.word_loc'(X17),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X17),X16)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38498])).
fof(f59395,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X7),s('type.wordSem.word_loc'(X6),X8))))))),s('type.wordSem.word_loc'(X11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X11),X10)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58443,f58002])).
fof(f58443,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X9,'const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X7),s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8)))),X10,X11)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X7),s('type.wordSem.word_loc'(X6),X8))))))),s('type.wordSem.word_loc'(X11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X11),X10)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38497])).
fof(f59393,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X5),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))),s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X4)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58442,f58002])).
fof(f58442,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,'const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2)))),X4,X5)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X5),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))),s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X4)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38496])).
fof(f59391,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X87),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X81,'type.num.num'),happ(s(fun(X80,fun(X81,'type.num.num')),X82),s(X80,X84))),s(X81,X83))),s('type.num.num',X85))),s('type.wordSem.word_loc'(X87),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X87),X86)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58441,f58002])).
fof(f58441,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X80,'type.num.num'),'_dst_x1x0_2'(s(fun(X80,fun(X81,'type.num.num')),X82),s(X81,X83))),s(X80,X84)),X85,X86,X87)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X87),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X81,'type.num.num'),happ(s(fun(X80,fun(X81,'type.num.num')),X82),s(X80,X84))),s(X81,X83))),s('type.num.num',X85))),s('type.wordSem.word_loc'(X87),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X87),X86)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38488])).
fof(f59389,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X73),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X67,'type.num.num'),'_dst_x1x0_2'(s(fun(X67,fun(X66,'type.num.num')),X68),s(X66,X70))),s(X67,X69))),s('type.num.num',X71))),s('type.wordSem.word_loc'(X73),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X73),X72)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58440,f58002])).
fof(f58440,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X66,'type.num.num'),happ(s(fun(X67,fun(X66,'type.num.num')),X68),s(X67,X69))),s(X66,X70)),X71,X72,X73)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X73),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X67,'type.num.num'),'_dst_x1x0_2'(s(fun(X67,fun(X66,'type.num.num')),X68),s(X66,X70))),s(X67,X69))),s('type.num.num',X71))),s('type.wordSem.word_loc'(X73),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X73),X72)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38486])).
fof(f59387,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X65),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X59,'type.num.num'),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))),s('type.num.num',X63))),s('type.wordSem.word_loc'(X65),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X65),X64)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58439,f58002])).
fof(f58439,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X58,'type.num.num'),'_dst_x0x1_2'(s(fun(X59,'type.num.num'),X60),s(fun(X58,X59),X61))),s(X58,X62)),X63,X64,X65)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X65),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X59,'type.num.num'),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))),s('type.num.num',X63))),s('type.wordSem.word_loc'(X65),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X65),X64)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38485])).
fof(f59385,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X57),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X52,'type.num.num'),'_dst_x0x1_2'(s(fun(X50,'type.num.num'),X51),s(fun(X52,X50),X53))),s(X52,X54))),s('type.num.num',X55))),s('type.wordSem.word_loc'(X57),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X57),X56)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58438,f58002])).
fof(f58438,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X50,'type.num.num'),X51),s(X50,happ(s(fun(X52,X50),X53),s(X52,X54)))),X55,X56,X57)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X57),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X52,'type.num.num'),'_dst_x0x1_2'(s(fun(X50,'type.num.num'),X51),s(fun(X52,X50),X53))),s(X52,X54))),s('type.num.num',X55))),s('type.wordSem.word_loc'(X57),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X57),X56)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38484])).
fof(f59383,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X12,'type.num.num'),X13),s('type.wordSem.word_loc'(X12),X14))))),s('type.num.num',X15))),s('type.wordSem.word_loc'(X17),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X17),X16)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58437,f58002])).
fof(f58437,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X12,'type.num.num'),X13),s('type.stackSem.result'(X12),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X12),X14)))),X15,X16,X17)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X12,'type.num.num'),X13),s('type.wordSem.word_loc'(X12),X14))))),s('type.num.num',X15))),s('type.wordSem.word_loc'(X17),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X17),X16)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38477])).
fof(f59381,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X7),s('type.wordSem.word_loc'(X6),X8))))),s('type.num.num',X9))),s('type.wordSem.word_loc'(X11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X11),X10)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58436,f58002])).
fof(f58436,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X7),s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8)))),X9,X10,X11)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X7),s('type.wordSem.word_loc'(X6),X8))))),s('type.num.num',X9))),s('type.wordSem.word_loc'(X11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X11),X10)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38476])).
fof(f59379,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X5),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))),s('type.num.num',X3))),s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X4)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58435,f58002])).
fof(f58435,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2)))),X3,X4,X5)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X5),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))),s('type.num.num',X3))),s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X4)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f38475])).
fof(f59348,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl108),
  inference(subsumption_resolution,[],[f59347,f235])).
fof(f59347,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl108),
  inference(forward_demodulation,[],[f58212,f3152])).
fof(f58212,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0')))) | p(s(bool,X0))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f6066])).
fof(f59345,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl108),
  inference(subsumption_resolution,[],[f59344,f235])).
fof(f59344,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl108),
  inference(forward_demodulation,[],[f58210,f2895])).
fof(f58210,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f6008])).
fof(f59337,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl108),
  inference(subsumption_resolution,[],[f59336,f235])).
fof(f59336,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | $spl108),
  inference(condensation,[],[f59335])).
fof(f59335,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | $spl108),
  inference(condensation,[],[f59334])).
fof(f59334,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl108),
  inference(forward_demodulation,[],[f58185,f58002])).
fof(f58185,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))),s(bool,'T_0')))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f4753])).
fof(f59332,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl108),
  inference(subsumption_resolution,[],[f59331,f235])).
fof(f59331,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | $spl108),
  inference(condensation,[],[f59330])).
fof(f59330,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | $spl108),
  inference(condensation,[],[f59329])).
fof(f59329,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl108),
  inference(forward_demodulation,[],[f58180,f58002])).
fof(f58180,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X40)))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f4715])).
fof(f59322,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl108),
  inference(forward_demodulation,[],[f58105,f58002])).
fof(f58105,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f303])).
fof(f59320,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl108),
  inference(subsumption_resolution,[],[f58103,f58002])).
fof(f58103,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f249])).
fof(f58002,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl108),
  inference(unit_resulting_resolution,[],[f320,f57853,f368])).
fof(f58102,plain,(
  ( ! [X907,X903,X901] : (p(s(bool,happ(s(fun(X901,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X903),s('type.wordSem.word_loc'(sK0),sK2))),s(X901,X907))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58100,f235])).
fof(f58100,plain,(
  ( ! [X907,X903,X901] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X901,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X903),s('type.wordSem.word_loc'(sK0),sK2))),s(X901,X907))))) ) | $spl108),
  inference(backward_demodulation,[],[f58004,f57943])).
fof(f58101,plain,(
  ( ! [X918,X916,X914,X915,X919,X917] : (p(s(bool,happ(s(fun(X914,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s('type.wordSem.word_loc'(sK0),sK2))),s(X914,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X915),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s(fun(X914,bool),X918),s(fun(X914,bool),X919)),X914)))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58099,f235])).
fof(f58099,plain,(
  ( ! [X918,X916,X914,X915,X919,X917] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X914,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s('type.wordSem.word_loc'(sK0),sK2))),s(X914,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X915),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s(fun(X914,bool),X918),s(fun(X914,bool),X919)),X914)))))) ) | $spl108),
  inference(backward_demodulation,[],[f58004,f57945])).
fof(f58004,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X2),s('type.wordSem.word_loc'(sK0),sK1)))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f333,f57853,f368])).
fof(f58005,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun('type.wordSem.word_loc'(sK0),bool)),X1),s('type.wordSem.word_loc'(sK0),sK1))),s(X0,X2)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f334,f57853,f368])).
fof(f58006,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun('type.wordSem.word_loc'(sK0),bool),bool),'_dstsel_0_x0_1'(s('type.wordSem.word_loc'(sK0),sK1))),s(fun('type.wordSem.word_loc'(sK0),bool),X0)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f321,f57853,f368])).
fof(f58098,plain,(
  ( ! [X910,X908] : (p(s(bool,happ(s(fun(fun(X908,bool),bool),'!_1'),s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X910),s('type.wordSem.word_loc'(sK0),sK2))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58095,f235])).
fof(f58095,plain,(
  ( ! [X910,X908] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X908,bool),bool),'!_1'),s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X910),s('type.wordSem.word_loc'(sK0),sK2))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58007,f57944])).
fof(f58097,plain,(
  ( ! [X922,X920] : (p(s(bool,happ(s(fun(fun(X920,bool),bool),'?_1'),s(fun(X920,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X922),s('type.wordSem.word_loc'(sK0),sK2))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58094,f235])).
fof(f58094,plain,(
  ( ! [X922,X920] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X920,bool),bool),'?_1'),s(fun(X920,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X922),s('type.wordSem.word_loc'(sK0),sK2))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58007,f57946])).
fof(f58096,plain,(
  ( ! [X936,X934] : (p(s(bool,'|dollar|exists_1'(s(fun(X934,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X936),s('type.wordSem.word_loc'(sK0),sK2))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58093,f235])).
fof(f58093,plain,(
  ( ! [X936,X934] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X934,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X936),s('type.wordSem.word_loc'(sK0),sK2))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58007,f57947])).
fof(f58007,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X0,bool)),X1),s('type.wordSem.word_loc'(sK0),sK1))),s(X0,X2)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f334,f57853,f368])).
fof(f58009,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X2),s(X1,X3))),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X4),s('type.wordSem.word_loc'(sK0),sK1)))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f335,f57853,f368])).
fof(f58011,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(sK0),sK1))),s(fun('type.wordSem.word_loc'(sK0),bool),X0),s(fun('type.wordSem.word_loc'(sK0),bool),X1),s(fun('type.wordSem.word_loc'(sK0),bool),X2),s(bool,X3),s(bool,X4)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f328,f57853,f368])).
fof(f58012,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK1))),s(fun('type.wordSem.word_loc'(sK0),bool),X0),s(fun('type.wordSem.word_loc'(sK0),bool),X1),s(fun('type.wordSem.word_loc'(sK0),bool),X2),s(bool,X3),s(bool,X4)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f329,f57853,f368])).
fof(f58090,plain,(
  ( ! [X639,X636] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X639,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X636),s('type.wordSem.word_loc'(sK0),sK1)))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58085,f350])).
fof(f58085,plain,(
  ( ! [X639,X636] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X639,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X636),s('type.wordSem.word_loc'(sK0),sK1)))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58013,f57663])).
fof(f58089,plain,(
  ( ! [X594,X597] : (s(bool,X597) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X594),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,X597)) ) | $spl108),
  inference(subsumption_resolution,[],[f58084,f350])).
fof(f58084,plain,(
  ( ! [X594,X597] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X597) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X594),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,X597)) ) | $spl108),
  inference(backward_demodulation,[],[f58013,f57656])).
fof(f58088,plain,(
  ( ! [X80,X83] : (s(bool,X83) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X80),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'F_0') = s(bool,X83)) ) | $spl108),
  inference(subsumption_resolution,[],[f58083,f350])).
fof(f58083,plain,(
  ( ! [X80,X83] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X83) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X80),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'F_0') = s(bool,X83)) ) | $spl108),
  inference(backward_demodulation,[],[f58013,f57563])).
fof(f58013,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X0),s(fun('type.wordSem.word_loc'(sK0),bool),X1),s(fun('type.wordSem.word_loc'(sK0),bool),X2),s(bool,X3),s(bool,X4)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f40281,f57853,f368])).
fof(f58014,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X0),s('type.wordSem.word_loc'(sK0),sK1)))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f271,f57853,f368])).
fof(f58015,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X1),s('type.wordSem.word_loc'(sK0),sK1))))),s(X0,X2)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f320,f57853,f368])).
fof(f58016,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X0),s('type.wordSem.word_loc'(sK0),sK1))),s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f284,f57853,f368])).
fof(f58017,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X0),bool),X1),s(fun('type.wordSem.word_loc'(X0),bool),X2),s(fun('type.wordSem.word_loc'(X0),bool),X3),s(bool,X4),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X5),s('type.wordSem.word_loc'(sK0),sK1)))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f325,f57853,f368])).
fof(f58018,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X0),bool),X1),s(fun('type.wordSem.word_loc'(X0),bool),X2),s(fun('type.wordSem.word_loc'(X0),bool),X3),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X4),s('type.wordSem.word_loc'(sK0),sK1))),s(bool,X5)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f326,f57853,f368])).
fof(f58021,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X1),s('type.wordSem.word_loc'(sK0),sK1))))))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f57853,f4218])).
fof(f58022,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X1),s('type.wordSem.word_loc'(sK0),sK1))))))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f57853,f5586])).
fof(f57798,plain,(
  ( ! [X1711,X1712,X1714,X1716,X1718,X1713,X1715,X1717] : (s('type.fcp.cart'(bool,X1711),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1711),happ(s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1711)),X1714),s('type.wordSem.word_loc'(sK0),sK1))) | p(s(bool,sK4(X1717,X1718,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1711)),X1712),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1711)),X1713),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1711)),X1714),s('type.fcp.cart'(bool,X1711),X1715),s('type.fcp.cart'(bool,X1711),X1716)),X1711)))) )),
  inference(superposition,[],[f302,f40281])).
fof(f57964,plain,(
  ( ! [X1694,X1697,X1699,X1701,X1695,X1696,X1698,X1700] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1700,X1701,happ(s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1697),s('type.wordSem.word_loc'(sK0),sK1)),X1694)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1700,X1701,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1695),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1696),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1697),s('type.fcp.cart'(bool,X1694),X1698),s('type.fcp.cart'(bool,X1694),X1699)),X1694)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f57796,f303])).
fof(f57796,plain,(
  ( ! [X1694,X1697,X1699,X1701,X1695,X1696,X1698,X1700] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1694),'const.wordSem.Loc_2'(s('type.num.num',X1700),s('type.num.num',X1701))),s('type.wordSem.word_loc'(X1694),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1694),happ(s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1697),s('type.wordSem.word_loc'(sK0),sK1))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1700,X1701,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1695),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1696),s(fun('type.wordSem.word_loc'(sK0),'type.fcp.cart'(bool,X1694)),X1697),s('type.fcp.cart'(bool,X1694),X1698),s('type.fcp.cart'(bool,X1694),X1699)),X1694)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f40281])).
fof(f57963,plain,(
  ( ! [X1648,X1650,X1652,X1654,X1649,X1651,X1653,X1655] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1653,happ(s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1650),s('type.wordSem.word_loc'(sK0),sK1)),X1654,X1655)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1653,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1648),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1649),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1650),s('type.num.num',X1651),s('type.num.num',X1652)),X1654,X1655)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f57791,f303])).
fof(f57791,plain,(
  ( ! [X1648,X1650,X1652,X1654,X1649,X1651,X1653,X1655] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1655),'const.wordSem.Loc_2'(s('type.num.num',X1653),s('type.num.num',happ(s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1650),s('type.wordSem.word_loc'(sK0),sK1))))),s('type.wordSem.word_loc'(X1655),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1655),X1654))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1653,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1648),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1649),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1650),s('type.num.num',X1651),s('type.num.num',X1652)),X1654,X1655)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f40281])).
fof(f57962,plain,(
  ( ! [X1641,X1643,X1645,X1647,X1640,X1642,X1644,X1646] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1642),s('type.wordSem.word_loc'(sK0),sK1)),X1645,X1646,X1647)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1640),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1641),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1642),s('type.num.num',X1643),s('type.num.num',X1644)),X1645,X1646,X1647)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f57790,f303])).
fof(f57790,plain,(
  ( ! [X1641,X1643,X1645,X1647,X1640,X1642,X1644,X1646] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1647),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1642),s('type.wordSem.word_loc'(sK0),sK1))),s('type.num.num',X1645))),s('type.wordSem.word_loc'(X1647),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1647),X1646))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1640),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1641),s(fun('type.wordSem.word_loc'(sK0),'type.num.num'),X1642),s('type.num.num',X1643),s('type.num.num',X1644)),X1645,X1646,X1647)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f40281])).
fof(f57960,plain,(
  ( ! [X1546,X1548,X1549,X1552] : (s('type.stackSem.result'(X1546),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1546),X1552))) = s('type.stackSem.result'(X1546),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1546),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1546)),X1548),s('type.wordSem.word_loc'(sK0),sK2))))) | s('type.wordSem.word_loc'(X1546),X1552) != s('type.wordSem.word_loc'(X1546),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1546)),X1549),s('type.wordSem.word_loc'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f57779,f329])).
fof(f57779,plain,(
  ( ! [X1546,X1548,X1550,X1547,X1549,X1551,X1552] : (s('type.wordSem.word_loc'(X1546),X1552) != s('type.wordSem.word_loc'(X1546),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1546)),X1549),s('type.wordSem.word_loc'(sK0),sK1))) | s('type.stackSem.result'(X1546),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1546),X1552))) = s('type.stackSem.result'(X1546),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1546),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1546)),X1547),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1546)),X1548),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1546)),X1549),s('type.wordSem.word_loc'(X1546),X1550),s('type.wordSem.word_loc'(X1546),X1551)))))) )),
  inference(superposition,[],[f295,f40281])).
fof(f57777,plain,(
  ( ! [X1538,X1535,X1533,X1536,X1532,X1534,X1537] : (s('type.stackSem.result'(X1532),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1532),X1538))) != s('type.stackSem.result'(X1532),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1532),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1532)),X1535),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(X1532),X1538) = s('type.wordSem.word_loc'(X1532),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1532)),X1533),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1532)),X1534),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1532)),X1535),s('type.wordSem.word_loc'(X1532),X1536),s('type.wordSem.word_loc'(X1532),X1537)))) )),
  inference(superposition,[],[f294,f40281])).
fof(f57958,plain,(
  ( ! [X1521,X1520,X1524,X1518] : (s('type.stackSem.result'(X1518),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1518),X1524))) = s('type.stackSem.result'(X1518),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1518),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1518)),X1520),s('type.wordSem.word_loc'(sK0),sK2))))) | s('type.wordSem.word_loc'(X1518),X1524) != s('type.wordSem.word_loc'(X1518),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1518)),X1521),s('type.wordSem.word_loc'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f57775,f329])).
fof(f57775,plain,(
  ( ! [X1521,X1523,X1519,X1520,X1522,X1524,X1518] : (s('type.wordSem.word_loc'(X1518),X1524) != s('type.wordSem.word_loc'(X1518),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1518)),X1521),s('type.wordSem.word_loc'(sK0),sK1))) | s('type.stackSem.result'(X1518),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1518),X1524))) = s('type.stackSem.result'(X1518),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1518),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1518)),X1519),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1518)),X1520),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1518)),X1521),s('type.wordSem.word_loc'(X1518),X1522),s('type.wordSem.word_loc'(X1518),X1523)))))) )),
  inference(superposition,[],[f293,f40281])).
fof(f57773,plain,(
  ( ! [X1505,X1507,X1509,X1504,X1506,X1508,X1510] : (s('type.stackSem.result'(X1504),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1504),X1510))) != s('type.stackSem.result'(X1504),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1504),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1504)),X1507),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(X1504),X1510) = s('type.wordSem.word_loc'(X1504),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1504)),X1505),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1504)),X1506),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1504)),X1507),s('type.wordSem.word_loc'(X1504),X1508),s('type.wordSem.word_loc'(X1504),X1509)))) )),
  inference(superposition,[],[f292,f40281])).
fof(f57956,plain,(
  ( ! [X1490,X1492,X1493,X1496] : (s('type.stackSem.result'(X1490),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1490),X1496))) = s('type.stackSem.result'(X1490),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1490),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1490)),X1492),s('type.wordSem.word_loc'(sK0),sK2))))) | s('type.wordSem.word_loc'(X1490),X1496) != s('type.wordSem.word_loc'(X1490),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1490)),X1493),s('type.wordSem.word_loc'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f57771,f329])).
fof(f57771,plain,(
  ( ! [X1490,X1492,X1494,X1491,X1493,X1495,X1496] : (s('type.wordSem.word_loc'(X1490),X1496) != s('type.wordSem.word_loc'(X1490),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1490)),X1493),s('type.wordSem.word_loc'(sK0),sK1))) | s('type.stackSem.result'(X1490),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1490),X1496))) = s('type.stackSem.result'(X1490),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1490),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1490)),X1491),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1490)),X1492),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1490)),X1493),s('type.wordSem.word_loc'(X1490),X1494),s('type.wordSem.word_loc'(X1490),X1495)))))) )),
  inference(superposition,[],[f291,f40281])).
fof(f57769,plain,(
  ( ! [X1480,X1482,X1476,X1478,X1481,X1477,X1479] : (s('type.stackSem.result'(X1476),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1476),X1482))) != s('type.stackSem.result'(X1476),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1476),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1476)),X1479),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(X1476),X1482) = s('type.wordSem.word_loc'(X1476),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1476)),X1477),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1476)),X1478),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X1476)),X1479),s('type.wordSem.word_loc'(X1476),X1480),s('type.wordSem.word_loc'(X1476),X1481)))) )),
  inference(superposition,[],[f290,f40281])).
fof(f57760,plain,(
  ( ! [X1424,X1420,X1422,X1421,X1423] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1422),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1420),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1421),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1422),s('type.wordSem.word_loc'(sK0),X1423),s('type.wordSem.word_loc'(sK0),X1424)))) )),
  inference(superposition,[],[f2643,f40281])).
fof(f57756,plain,(
  ( ! [X1397,X1399,X1400,X1396,X1398,X1401] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1398),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1396),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1397),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1398),s('type.wordSem.word_loc'(sK0),X1399),s('type.wordSem.word_loc'(sK0),X1400)),X1401,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1401)))) )),
  inference(superposition,[],[f2654,f40281])).
fof(f57753,plain,(
  ( ! [X1369,X1371,X1373,X1375,X1367,X1376,X1368,X1370,X1372,X1374] : (s(X1368,happ(s(fun('type.ind_type.recspace'(X1367),X1368),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1369),s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1370),s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1371),s(fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368)))),X1372),s(fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368)))),X1373)),X1367,X1368)),s('type.ind_type.recspace'(X1367),'const.ind_type.CONSTR_3'(s('type.num.num',X1374),s(X1367,X1375),s(fun('type.num.num','type.ind_type.recspace'(X1367)),X1376))))) = s(X1368,happ(s(fun(fun('type.num.num',X1368),X1368),happ(s(fun(X1367,fun(fun('type.num.num',X1368),X1368)),'_dst_x1x0_2'(s(fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))),happ(s(fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368)))),happ(s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1371),s('type.wordSem.word_loc'(sK0),sK1))),s('type.num.num',X1374))),s(fun('type.num.num','type.ind_type.recspace'(X1367)),X1376))),s(X1367,X1375))),s(fun('type.num.num',X1368),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1367),X1368),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1369),s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1370),s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368))))),X1371),s(fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368)))),X1372),s(fun('type.num.num',fun(X1367,fun(fun('type.num.num','type.ind_type.recspace'(X1367)),fun(fun('type.num.num',X1368),X1368)))),X1373)),X1367,X1368)),s(fun('type.num.num','type.ind_type.recspace'(X1367)),X1376)))))) )),
  inference(superposition,[],[f346,f40281])).
fof(f57948,plain,(
  ( ! [X947,X944,X943,X941] : (s(bool,'F_0') = s(bool,happ(s(fun(X941,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X941,bool)),X943),s('type.wordSem.word_loc'(sK0),sK2))),s(X941,X947))) | p(s(bool,'|dollar|exists_1'(s(fun(X941,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X941,bool)),X944),s('type.wordSem.word_loc'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f57714,f329])).
fof(f57714,plain,(
  ( ! [X947,X945,X942,X946,X944,X943,X941] : (p(s(bool,'|dollar|exists_1'(s(fun(X941,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X941,bool)),X944),s('type.wordSem.word_loc'(sK0),sK1)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X941,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X941,bool)),X942),s(fun('type.wordSem.word_loc'(sK0),fun(X941,bool)),X943),s(fun('type.wordSem.word_loc'(sK0),fun(X941,bool)),X944),s(fun(X941,bool),X945),s(fun(X941,bool),X946))),s(X941,X947)))) )),
  inference(superposition,[],[f2822,f40281])).
fof(f57947,plain,(
  ( ! [X936,X940,X934,X937] : (p(s(bool,'|dollar|exists_1'(s(fun(X934,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X936),s('type.wordSem.word_loc'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun(X934,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X937),s('type.wordSem.word_loc'(sK0),sK1))),s(X934,X940))))) )),
  inference(forward_demodulation,[],[f57713,f329])).
fof(f57713,plain,(
  ( ! [X938,X936,X940,X934,X939,X937,X935] : (~p(s(bool,happ(s(fun(X934,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X937),s('type.wordSem.word_loc'(sK0),sK1))),s(X934,X940)))) | p(s(bool,'|dollar|exists_1'(s(fun(X934,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X935),s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X936),s(fun('type.wordSem.word_loc'(sK0),fun(X934,bool)),X937),s(fun(X934,bool),X938),s(fun(X934,bool),X939))))))) )),
  inference(superposition,[],[f2633,f40281])).
fof(f57712,plain,(
  ( ! [X930,X928,X932,X927,X931,X929,X933] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X927,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X927,bool)),X930),s('type.wordSem.word_loc'(sK0),sK1))))) | s(X927,X933) = s(X927,sK3(X933,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X927,bool)),X928),s(fun('type.wordSem.word_loc'(sK0),fun(X927,bool)),X929),s(fun('type.wordSem.word_loc'(sK0),fun(X927,bool)),X930),s(fun(X927,bool),X931),s(fun(X927,bool),X932)),X927))) )),
  inference(superposition,[],[f565,f40281])).
fof(f57946,plain,(
  ( ! [X922,X920,X926,X923] : (p(s(bool,happ(s(fun(fun(X920,bool),bool),'?_1'),s(fun(X920,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X922),s('type.wordSem.word_loc'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun(X920,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X923),s('type.wordSem.word_loc'(sK0),sK1))),s(X920,X926))))) )),
  inference(forward_demodulation,[],[f57711,f329])).
fof(f57711,plain,(
  ( ! [X922,X920,X926,X924,X923,X921,X925] : (~p(s(bool,happ(s(fun(X920,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X923),s('type.wordSem.word_loc'(sK0),sK1))),s(X920,X926)))) | p(s(bool,happ(s(fun(fun(X920,bool),bool),'?_1'),s(fun(X920,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X921),s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X922),s(fun('type.wordSem.word_loc'(sK0),fun(X920,bool)),X923),s(fun(X920,bool),X924),s(fun(X920,bool),X925))))))) )),
  inference(superposition,[],[f312,f40281])).
fof(f57945,plain,(
  ( ! [X918,X916,X914,X915,X919,X917] : (p(s(bool,happ(s(fun(X914,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s('type.wordSem.word_loc'(sK0),sK2))),s(X914,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X915),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s(fun(X914,bool),X918),s(fun(X914,bool),X919)),X914))))) | ~p(s(bool,happ(s(fun(fun(X914,bool),bool),'?_1'),s(fun(X914,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s('type.wordSem.word_loc'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f57710,f329])).
fof(f57710,plain,(
  ( ! [X918,X916,X914,X915,X919,X917] : (~p(s(bool,happ(s(fun(fun(X914,bool),bool),'?_1'),s(fun(X914,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s('type.wordSem.word_loc'(sK0),sK1)))))) | p(s(bool,happ(s(fun(X914,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X915),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s(fun(X914,bool),X918),s(fun(X914,bool),X919))),s(X914,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X915),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X916),s(fun('type.wordSem.word_loc'(sK0),fun(X914,bool)),X917),s(fun(X914,bool),X918),s(fun(X914,bool),X919)),X914)))))) )),
  inference(superposition,[],[f311,f40281])).
fof(f57944,plain,(
  ( ! [X912,X911,X909,X913,X910,X908] : (p(s(bool,happ(s(fun(fun(X908,bool),bool),'!_1'),s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X910),s('type.wordSem.word_loc'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X911),s('type.wordSem.word_loc'(sK0),sK1))),s(X908,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X909),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X910),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X911),s(fun(X908,bool),X912),s(fun(X908,bool),X913)),X908)))))) )),
  inference(forward_demodulation,[],[f57709,f329])).
fof(f57709,plain,(
  ( ! [X912,X911,X909,X913,X910,X908] : (~p(s(bool,happ(s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X911),s('type.wordSem.word_loc'(sK0),sK1))),s(X908,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X909),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X910),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X911),s(fun(X908,bool),X912),s(fun(X908,bool),X913)),X908))))) | p(s(bool,happ(s(fun(fun(X908,bool),bool),'!_1'),s(fun(X908,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X909),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X910),s(fun('type.wordSem.word_loc'(sK0),fun(X908,bool)),X911),s(fun(X908,bool),X912),s(fun(X908,bool),X913))))))) )),
  inference(superposition,[],[f310,f40281])).
fof(f57943,plain,(
  ( ! [X907,X903,X901,X904] : (p(s(bool,happ(s(fun(X901,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X903),s('type.wordSem.word_loc'(sK0),sK2))),s(X901,X907)))) | ~p(s(bool,happ(s(fun(fun(X901,bool),bool),'!_1'),s(fun(X901,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X904),s('type.wordSem.word_loc'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f57708,f329])).
fof(f57708,plain,(
  ( ! [X907,X905,X903,X901,X906,X904,X902] : (~p(s(bool,happ(s(fun(fun(X901,bool),bool),'!_1'),s(fun(X901,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X904),s('type.wordSem.word_loc'(sK0),sK1)))))) | p(s(bool,happ(s(fun(X901,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X902),s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X903),s(fun('type.wordSem.word_loc'(sK0),fun(X901,bool)),X904),s(fun(X901,bool),X905),s(fun(X901,bool),X906))),s(X901,X907))))) )),
  inference(superposition,[],[f309,f40281])).
fof(f57707,plain,(
  ( ! [X895,X899,X897,X894,X898,X896,X900] : (p(s(bool,'|dollar|exists_1'(s(fun(X894,bool),happ(s(fun('type.wordSem.word_loc'(sK0),fun(X894,bool)),X897),s('type.wordSem.word_loc'(sK0),sK1)))))) | s(X894,X900) = s(X894,sK3(X900,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),fun(X894,bool)),X895),s(fun('type.wordSem.word_loc'(sK0),fun(X894,bool)),X896),s(fun('type.wordSem.word_loc'(sK0),fun(X894,bool)),X897),s(fun(X894,bool),X898),s(fun(X894,bool),X899)),X894))) )),
  inference(superposition,[],[f288,f40281])).
fof(f57695,plain,(
  ( ! [X819,X817,X821,X818,X822,X820] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X819),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X822) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X817),s(fun('type.wordSem.word_loc'(sK0),bool),X818),s(fun('type.wordSem.word_loc'(sK0),bool),X819),s(bool,X820),s(bool,X821))) | s(bool,'T_0') = s(bool,X822)) )),
  inference(superposition,[],[f43737,f40281])).
fof(f57663,plain,(
  ( ! [X639,X635,X636,X638,X634,X637] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X639,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X636),s('type.wordSem.word_loc'(sK0),sK1))))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X634),s(fun('type.wordSem.word_loc'(sK0),bool),X635),s(fun('type.wordSem.word_loc'(sK0),bool),X636),s(bool,X637),s(bool,X638)))) )),
  inference(superposition,[],[f2213,f40281])).
fof(f57658,plain,(
  ( ! [X606,X609,X605,X607,X608,X604] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X606),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X609) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X604),s(fun('type.wordSem.word_loc'(sK0),bool),X605),s(fun('type.wordSem.word_loc'(sK0),bool),X606),s(bool,X607),s(bool,X608))) | s(bool,'F_0') = s(bool,X609)) )),
  inference(superposition,[],[f1400,f40281])).
fof(f57657,plain,(
  ( ! [X600,X602,X598,X601,X603,X599] : (s(bool,X603) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X600),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X598),s(fun('type.wordSem.word_loc'(sK0),bool),X599),s(fun('type.wordSem.word_loc'(sK0),bool),X600),s(bool,X601),s(bool,X602))) | s(bool,'F_0') = s(bool,X603)) )),
  inference(superposition,[],[f1197,f40281])).
fof(f57656,plain,(
  ( ! [X596,X592,X594,X597,X593,X595] : (s(bool,X597) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X594),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,X597) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X592),s(fun('type.wordSem.word_loc'(sK0),bool),X593),s(fun('type.wordSem.word_loc'(sK0),bool),X594),s(bool,X595),s(bool,X596)))) )),
  inference(superposition,[],[f1197,f40281])).
fof(f57891,plain,(
  ( ! [X528,X524,X526,X525,X527] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X526),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X524),s(fun('type.wordSem.word_loc'(sK0),bool),X525),s(fun('type.wordSem.word_loc'(sK0),bool),X526),s(bool,X527),s(bool,X528)))) )),
  inference(forward_demodulation,[],[f57645,f270])).
fof(f57645,plain,(
  ( ! [X528,X530,X524,X526,X529,X525,X527] : (s(bool,'const.bool.DATATYPE_1'(s(X529,X530))) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X526),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X524),s(fun('type.wordSem.word_loc'(sK0),bool),X525),s(fun('type.wordSem.word_loc'(sK0),bool),X526),s(bool,X527),s(bool,X528)))) )),
  inference(superposition,[],[f557,f40281])).
fof(f57851,plain,(
  ( ! [X212,X215,X211,X209] : (s(X209,X215) != s(X209,happ(s(fun('type.wordSem.word_loc'(sK0),X209),X211),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X209,fun(X209,bool)),'=_0'),s(X209,X215),s(fun('type.wordSem.word_loc'(sK0),X209),X212))),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57850,f329])).
fof(f57850,plain,(
  ( ! [X212,X210,X215,X213,X211,X209,X214] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X209,fun(X209,bool)),'=_0'),s(X209,X215),s(fun('type.wordSem.word_loc'(sK0),X209),X212))),s('type.wordSem.word_loc'(sK0),sK1)))) | s(X209,X215) != s(X209,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X209),X210),s(fun('type.wordSem.word_loc'(sK0),X209),X211),s(fun('type.wordSem.word_loc'(sK0),X209),X212),s(X209,X213),s(X209,X214)))) )),
  inference(forward_demodulation,[],[f57602,f335])).
fof(f57602,plain,(
  ( ! [X212,X210,X215,X213,X211,X209,X214] : (p(s(bool,happ(s(fun(X209,bool),happ(s(fun(X209,fun(X209,bool)),'=_0'),s(X209,X215))),s(X209,happ(s(fun('type.wordSem.word_loc'(sK0),X209),X212),s('type.wordSem.word_loc'(sK0),sK1)))))) | s(X209,X215) != s(X209,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X209),X210),s(fun('type.wordSem.word_loc'(sK0),X209),X211),s(fun('type.wordSem.word_loc'(sK0),X209),X212),s(X209,X213),s(X209,X214)))) )),
  inference(superposition,[],[f331,f40281])).
fof(f57849,plain,(
  ( ! [X208,X204,X202,X205] : (s(X202,X208) != s(X202,happ(s(fun('type.wordSem.word_loc'(sK0),X202),X204),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun(X202,bool),happ(s(fun(X202,fun(X202,bool)),'=_0'),s(X202,happ(s(fun('type.wordSem.word_loc'(sK0),X202),X205),s('type.wordSem.word_loc'(sK0),sK1))))),s(X202,X208))))) )),
  inference(forward_demodulation,[],[f57601,f329])).
fof(f57601,plain,(
  ( ! [X208,X206,X204,X202,X207,X205,X203] : (p(s(bool,happ(s(fun(X202,bool),happ(s(fun(X202,fun(X202,bool)),'=_0'),s(X202,happ(s(fun('type.wordSem.word_loc'(sK0),X202),X205),s('type.wordSem.word_loc'(sK0),sK1))))),s(X202,X208)))) | s(X202,X208) != s(X202,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X202),X203),s(fun('type.wordSem.word_loc'(sK0),X202),X204),s(fun('type.wordSem.word_loc'(sK0),X202),X205),s(X202,X206),s(X202,X207)))) )),
  inference(superposition,[],[f331,f40281])).
fof(f57848,plain,(
  ( ! [X198,X197,X195,X201] : (s(X195,X201) = s(X195,happ(s(fun('type.wordSem.word_loc'(sK0),X195),X197),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X195,fun(X195,bool)),'=_0'),s(X195,X201),s(fun('type.wordSem.word_loc'(sK0),X195),X198))),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57847,f329])).
fof(f57847,plain,(
  ( ! [X198,X196,X200,X199,X197,X195,X201] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X195,fun(X195,bool)),'=_0'),s(X195,X201),s(fun('type.wordSem.word_loc'(sK0),X195),X198))),s('type.wordSem.word_loc'(sK0),sK1)))) | s(X195,X201) = s(X195,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X195),X196),s(fun('type.wordSem.word_loc'(sK0),X195),X197),s(fun('type.wordSem.word_loc'(sK0),X195),X198),s(X195,X199),s(X195,X200)))) )),
  inference(forward_demodulation,[],[f57600,f335])).
fof(f57600,plain,(
  ( ! [X198,X196,X200,X199,X197,X195,X201] : (~p(s(bool,happ(s(fun(X195,bool),happ(s(fun(X195,fun(X195,bool)),'=_0'),s(X195,X201))),s(X195,happ(s(fun('type.wordSem.word_loc'(sK0),X195),X198),s('type.wordSem.word_loc'(sK0),sK1)))))) | s(X195,X201) = s(X195,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X195),X196),s(fun('type.wordSem.word_loc'(sK0),X195),X197),s(fun('type.wordSem.word_loc'(sK0),X195),X198),s(X195,X199),s(X195,X200)))) )),
  inference(superposition,[],[f330,f40281])).
fof(f57846,plain,(
  ( ! [X191,X194,X190,X188] : (s(X188,X194) = s(X188,happ(s(fun('type.wordSem.word_loc'(sK0),X188),X190),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,happ(s(fun(X188,bool),happ(s(fun(X188,fun(X188,bool)),'=_0'),s(X188,happ(s(fun('type.wordSem.word_loc'(sK0),X188),X191),s('type.wordSem.word_loc'(sK0),sK1))))),s(X188,X194))))) )),
  inference(forward_demodulation,[],[f57599,f329])).
fof(f57599,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X193] : (~p(s(bool,happ(s(fun(X188,bool),happ(s(fun(X188,fun(X188,bool)),'=_0'),s(X188,happ(s(fun('type.wordSem.word_loc'(sK0),X188),X191),s('type.wordSem.word_loc'(sK0),sK1))))),s(X188,X194)))) | s(X188,X194) = s(X188,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X188),X189),s(fun('type.wordSem.word_loc'(sK0),X188),X190),s(fun('type.wordSem.word_loc'(sK0),X188),X191),s(X188,X192),s(X188,X193)))) )),
  inference(superposition,[],[f330,f40281])).
fof(f57577,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X170,X168] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X166),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X169) = s(bool,'const.bool.DATATYPE_1'(s(X170,X171))) | s(bool,X169) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X164),s(fun('type.wordSem.word_loc'(sK0),bool),X165),s(fun('type.wordSem.word_loc'(sK0),bool),X166),s(bool,X167),s(bool,X168)))) )),
  inference(superposition,[],[f40281,f43498])).
fof(f57576,plain,(
  ( ! [X158,X156,X163,X161,X159,X157,X162,X160] : (s(bool,X161) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X158),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X161) = s(bool,'const.bool.DATATYPE_1'(s(X162,X163))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X156),s(fun('type.wordSem.word_loc'(sK0),bool),X157),s(fun('type.wordSem.word_loc'(sK0),bool),X158),s(bool,X159),s(bool,X160)))) )),
  inference(superposition,[],[f40281,f43498])).
fof(f57563,plain,(
  ( ! [X80,X78,X83,X81,X79,X82] : (s(bool,X83) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X80),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'F_0') = s(bool,X83) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X78),s(fun('type.wordSem.word_loc'(sK0),bool),X79),s(fun('type.wordSem.word_loc'(sK0),bool),X80),s(bool,X81),s(bool,X82)))) )),
  inference(superposition,[],[f40281,f1108])).
fof(f57561,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X68),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X71) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X66),s(fun('type.wordSem.word_loc'(sK0),bool),X67),s(fun('type.wordSem.word_loc'(sK0),bool),X68),s(bool,X69),s(bool,X70))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f40281,f1108])).
fof(f57833,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X61),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X59),s(fun('type.wordSem.word_loc'(sK0),bool),X60),s(fun('type.wordSem.word_loc'(sK0),bool),X61),s(bool,X62),s(bool,X63)))) )),
  inference(forward_demodulation,[],[f57560,f270])).
fof(f57560,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (s(bool,'const.bool.DATATYPE_1'(s(X64,X65))) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X61),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X59),s(fun('type.wordSem.word_loc'(sK0),bool),X60),s(fun('type.wordSem.word_loc'(sK0),bool),X61),s(bool,X62),s(bool,X63)))) )),
  inference(superposition,[],[f40281,f1071])).
fof(f57559,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X55),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X58) = s(bool,'const.bool.DATATYPE_1'(s(bool,X58))) | s(bool,X58) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X53),s(fun('type.wordSem.word_loc'(sK0),bool),X54),s(fun('type.wordSem.word_loc'(sK0),bool),X55),s(bool,X56),s(bool,X57)))) )),
  inference(superposition,[],[f40281,f742])).
fof(f57558,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,X52) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X49),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X52) = s(bool,'const.bool.DATATYPE_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X47),s(fun('type.wordSem.word_loc'(sK0),bool),X48),s(fun('type.wordSem.word_loc'(sK0),bool),X49),s(bool,X50),s(bool,X51)))) )),
  inference(superposition,[],[f40281,f742])).
fof(f57554,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,X28) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X25),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X23),s(fun('type.wordSem.word_loc'(sK0),bool),X24),s(fun('type.wordSem.word_loc'(sK0),bool),X25),s(bool,X26),s(bool,X27)))) )),
  inference(superposition,[],[f40281,f365])).
fof(f57553,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X19),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,X22) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X17),s(fun('type.wordSem.word_loc'(sK0),bool),X18),s(fun('type.wordSem.word_loc'(sK0),bool),X19),s(bool,X20),s(bool,X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f40281,f365])).
fof(f57552,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X14),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X12),s(fun('type.wordSem.word_loc'(sK0),bool),X13),s(fun('type.wordSem.word_loc'(sK0),bool),X14),s(bool,X15),s(bool,X16)))) )),
  inference(superposition,[],[f40281,f242])).
fof(f57551,plain,(
  ( ! [X6,X8,X9] : (s(X6,happ(s(fun('type.wordSem.word_loc'(sK0),X6),X8),s('type.wordSem.word_loc'(sK0),sK2))) = s(X6,happ(s(fun('type.wordSem.word_loc'(sK0),X6),X9),s('type.wordSem.word_loc'(sK0),sK1)))) )),
  inference(superposition,[],[f40281,f329])).
fof(f57831,plain,(
  ( ! [X0,X3,X1] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X1),s('type.wordSem.word_loc'(sK0),sK1))),s(fun('type.wordSem.word_loc'(sK0),X0),X3))),s('type.wordSem.word_loc'(sK0),sK2))))) )),
  inference(forward_demodulation,[],[f57830,f335])).
fof(f57830,plain,(
  ( ! [X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X1),s('type.wordSem.word_loc'(sK0),sK1))))),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X3),s('type.wordSem.word_loc'(sK0),sK2))))))) )),
  inference(forward_demodulation,[],[f57208,f329])).
fof(f57208,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X1),s('type.wordSem.word_loc'(sK0),sK1))))),s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X0),X2),s(fun('type.wordSem.word_loc'(sK0),X0),X3),s(fun('type.wordSem.word_loc'(sK0),X0),X1),s(X0,X4),s(X0,X5))))))) )),
  inference(unit_resulting_resolution,[],[f40281,f331])).
fof(f57826,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X2),s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X0),X3))),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57825,f329])).
fof(f57825,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X0),X1),s(fun('type.wordSem.word_loc'(sK0),X0),X2),s(fun('type.wordSem.word_loc'(sK0),X0),X3),s(X0,X4),s(X0,X5))),s(fun('type.wordSem.word_loc'(sK0),X0),X3))),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57824,f47680])).
fof(f57824,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X3),s('type.wordSem.word_loc'(sK0),sK1))))),s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X0),X1),s(fun('type.wordSem.word_loc'(sK0),X0),X2),s(fun('type.wordSem.word_loc'(sK0),X0),X3),s(X0,X4),s(X0,X5))))))) )),
  inference(forward_demodulation,[],[f57212,f334])).
fof(f57212,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X0),X1),s(fun('type.wordSem.word_loc'(sK0),X0),X2),s(fun('type.wordSem.word_loc'(sK0),X0),X3),s(X0,X4),s(X0,X5))))),s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X3),s('type.wordSem.word_loc'(sK0),sK1))))))) )),
  inference(unit_resulting_resolution,[],[f40281,f331])).
fof(f57823,plain,(
  ( ! [X0,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(sK0),sK1))))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X3),s('type.wordSem.word_loc'(sK0),sK2)))))) )),
  inference(forward_demodulation,[],[f57213,f329])).
fof(f57213,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(sK0),sK1))))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X2),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X3),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(X0),X4),s('type.wordSem.word_loc'(X0),X5)))))) )),
  inference(unit_resulting_resolution,[],[f40281,f295])).
fof(f57822,plain,(
  ( ! [X0,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(sK0),sK1))))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X3),s('type.wordSem.word_loc'(sK0),sK2)))))) )),
  inference(forward_demodulation,[],[f57214,f329])).
fof(f57214,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(sK0),sK1))))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X2),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X3),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(X0),X4),s('type.wordSem.word_loc'(X0),X5)))))) )),
  inference(unit_resulting_resolution,[],[f40281,f293])).
fof(f57821,plain,(
  ( ! [X0,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(sK0),sK1))))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X3),s('type.wordSem.word_loc'(sK0),sK2)))))) )),
  inference(forward_demodulation,[],[f57215,f329])).
fof(f57215,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(sK0),sK1))))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X2),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X3),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(X0)),X1),s('type.wordSem.word_loc'(X0),X4),s('type.wordSem.word_loc'(X0),X5)))))) )),
  inference(unit_resulting_resolution,[],[f40281,f291])).
fof(f56042,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X18),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.wordSem.word_loc'(X18),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X18),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'type.ind_type.recspace'('type.wordSem.word_loc'(X18)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X18),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.wordSem.word_loc'(X18),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X18),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'type.ind_type.recspace'('type.wordSem.word_loc'(X18)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X18),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.wordSem.word_loc'(X18),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X18),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'type.ind_type.recspace'('type.wordSem.word_loc'(X18)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X18),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X18),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),sK5(X18)))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f55989,f342])).
fof(f55989,plain,(
  ( ! [X19,X18] : (p(s(bool,'F_0')) | s(bool,X19) = s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X18),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.wordSem.word_loc'(X18),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X18),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'type.ind_type.recspace'('type.wordSem.word_loc'(X18)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X18),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.wordSem.word_loc'(X18),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X18),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'type.ind_type.recspace'('type.wordSem.word_loc'(X18)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X18),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.wordSem.word_loc'(X18),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X18),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'type.ind_type.recspace'('type.wordSem.word_loc'(X18)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X18),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X18),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X18)),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X18),'type.ind_type.recspace'('type.wordSem.word_loc'(X18))),sK5(X18)))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f345,f1108])).
fof(f55976,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),sK5(X0))))) )),
  inference(unit_resulting_resolution,[],[f350,f345,f1037])).
fof(f55977,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X1),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X1),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),sK5(X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f345,f1802])).
fof(f55978,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X1),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X1),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),sK5(X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f345,f4218])).
fof(f55979,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X1),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.wordSem.word_loc'(X1),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X1),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'type.ind_type.recspace'('type.wordSem.word_loc'(X1)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X1),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X1),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X1)),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X1),'type.ind_type.recspace'('type.wordSem.word_loc'(X1))),sK5(X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f345,f5586])).
fof(f55665,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(X2,X3))) | s(bool,X4) = s(bool,'const.bool.DATATYPE_1'(s(X5,X6))) | s(bool,X0) = s(bool,X4)) )),
  inference(superposition,[],[f54507,f43498])).
fof(f55340,plain,(
  ( ! [X1730,X1732,X1734,X1736,X1729,X1731,X1733,X1735] : (s('type.fcp.cart'(bool,X1729),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1729),happ(s(fun('type.ind_type.recspace'(X1730),'type.fcp.cart'(bool,X1729)),sK8(X1731,X1730,'type.fcp.cart'(bool,X1729))),s('type.ind_type.recspace'(X1730),'const.ind_type.CONSTR_3'(s('type.num.num',X1732),s(X1730,X1734),s(fun('type.num.num','type.ind_type.recspace'(X1730)),X1733))))) | p(s(bool,sK4(X1735,X1736,happ(s(fun(fun('type.num.num','type.fcp.cart'(bool,X1729)),'type.fcp.cart'(bool,X1729)),happ(s(fun(X1730,fun(fun('type.num.num','type.fcp.cart'(bool,X1729)),'type.fcp.cart'(bool,X1729))),'_dst_x1x0_2'(s(fun(X1730,fun(fun('type.num.num','type.ind_type.recspace'(X1730)),fun(fun('type.num.num','type.fcp.cart'(bool,X1729)),'type.fcp.cart'(bool,X1729)))),happ(s(fun('type.num.num',fun(X1730,fun(fun('type.num.num','type.ind_type.recspace'(X1730)),fun(fun('type.num.num','type.fcp.cart'(bool,X1729)),'type.fcp.cart'(bool,X1729))))),X1731),s('type.num.num',X1732))),s(fun('type.num.num','type.ind_type.recspace'(X1730)),X1733))),s(X1730,X1734))),s(fun('type.num.num','type.fcp.cart'(bool,X1729)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1730),'type.fcp.cart'(bool,X1729)),sK8(X1731,X1730,'type.fcp.cart'(bool,X1729))),s(fun('type.num.num','type.ind_type.recspace'(X1730)),X1733)))),X1729)))) )),
  inference(superposition,[],[f302,f346])).
fof(f55452,plain,(
  ( ! [X1712,X1714,X1716,X1718,X1713,X1715,X1717,X1719] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1718,X1719,happ(s(fun('type.ind_type.recspace'(X1713),'type.fcp.cart'(bool,X1712)),sK8(X1714,X1713,'type.fcp.cart'(bool,X1712))),s('type.ind_type.recspace'(X1713),'const.ind_type.CONSTR_3'(s('type.num.num',X1715),s(X1713,X1717),s(fun('type.num.num','type.ind_type.recspace'(X1713)),X1716)))),X1712)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1718,X1719,happ(s(fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712)),happ(s(fun(X1713,fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712))),'_dst_x1x0_2'(s(fun(X1713,fun(fun('type.num.num','type.ind_type.recspace'(X1713)),fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712)))),happ(s(fun('type.num.num',fun(X1713,fun(fun('type.num.num','type.ind_type.recspace'(X1713)),fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712))))),X1714),s('type.num.num',X1715))),s(fun('type.num.num','type.ind_type.recspace'(X1713)),X1716))),s(X1713,X1717))),s(fun('type.num.num','type.fcp.cart'(bool,X1712)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1713),'type.fcp.cart'(bool,X1712)),sK8(X1714,X1713,'type.fcp.cart'(bool,X1712))),s(fun('type.num.num','type.ind_type.recspace'(X1713)),X1716)))),X1712)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f55338,f303])).
fof(f55338,plain,(
  ( ! [X1712,X1714,X1716,X1718,X1713,X1715,X1717,X1719] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1712),'const.wordSem.Loc_2'(s('type.num.num',X1718),s('type.num.num',X1719))),s('type.wordSem.word_loc'(X1712),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1712),happ(s(fun('type.ind_type.recspace'(X1713),'type.fcp.cart'(bool,X1712)),sK8(X1714,X1713,'type.fcp.cart'(bool,X1712))),s('type.ind_type.recspace'(X1713),'const.ind_type.CONSTR_3'(s('type.num.num',X1715),s(X1713,X1717),s(fun('type.num.num','type.ind_type.recspace'(X1713)),X1716))))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1718,X1719,happ(s(fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712)),happ(s(fun(X1713,fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712))),'_dst_x1x0_2'(s(fun(X1713,fun(fun('type.num.num','type.ind_type.recspace'(X1713)),fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712)))),happ(s(fun('type.num.num',fun(X1713,fun(fun('type.num.num','type.ind_type.recspace'(X1713)),fun(fun('type.num.num','type.fcp.cart'(bool,X1712)),'type.fcp.cart'(bool,X1712))))),X1714),s('type.num.num',X1715))),s(fun('type.num.num','type.ind_type.recspace'(X1713)),X1716))),s(X1713,X1717))),s(fun('type.num.num','type.fcp.cart'(bool,X1712)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1713),'type.fcp.cart'(bool,X1712)),sK8(X1714,X1713,'type.fcp.cart'(bool,X1712))),s(fun('type.num.num','type.ind_type.recspace'(X1713)),X1716)))),X1712)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f346])).
fof(f55451,plain,(
  ( ! [X1676,X1681,X1678,X1683,X1677,X1679,X1680,X1682] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1681,happ(s(fun('type.ind_type.recspace'(X1676),'type.num.num'),sK8(X1677,X1676,'type.num.num')),s('type.ind_type.recspace'(X1676),'const.ind_type.CONSTR_3'(s('type.num.num',X1678),s(X1676,X1680),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679)))),X1682,X1683)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1681,happ(s(fun(fun('type.num.num','type.num.num'),'type.num.num'),happ(s(fun(X1676,fun(fun('type.num.num','type.num.num'),'type.num.num')),'_dst_x1x0_2'(s(fun(X1676,fun(fun('type.num.num','type.ind_type.recspace'(X1676)),fun(fun('type.num.num','type.num.num'),'type.num.num'))),happ(s(fun('type.num.num',fun(X1676,fun(fun('type.num.num','type.ind_type.recspace'(X1676)),fun(fun('type.num.num','type.num.num'),'type.num.num')))),X1677),s('type.num.num',X1678))),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679))),s(X1676,X1680))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1676),'type.num.num'),sK8(X1677,X1676,'type.num.num')),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679)))),X1682,X1683)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f55334,f303])).
fof(f55334,plain,(
  ( ! [X1676,X1681,X1683,X1678,X1677,X1679,X1680,X1682] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1683),'const.wordSem.Loc_2'(s('type.num.num',X1681),s('type.num.num',happ(s(fun('type.ind_type.recspace'(X1676),'type.num.num'),sK8(X1677,X1676,'type.num.num')),s('type.ind_type.recspace'(X1676),'const.ind_type.CONSTR_3'(s('type.num.num',X1678),s(X1676,X1680),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679))))))),s('type.wordSem.word_loc'(X1683),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1683),X1682))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1681,happ(s(fun(fun('type.num.num','type.num.num'),'type.num.num'),happ(s(fun(X1676,fun(fun('type.num.num','type.num.num'),'type.num.num')),'_dst_x1x0_2'(s(fun(X1676,fun(fun('type.num.num','type.ind_type.recspace'(X1676)),fun(fun('type.num.num','type.num.num'),'type.num.num'))),happ(s(fun('type.num.num',fun(X1676,fun(fun('type.num.num','type.ind_type.recspace'(X1676)),fun(fun('type.num.num','type.num.num'),'type.num.num')))),X1677),s('type.num.num',X1678))),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679))),s(X1676,X1680))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1676),'type.num.num'),sK8(X1677,X1676,'type.num.num')),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679)))),X1682,X1683)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f346])).
fof(f55450,plain,(
  ( ! [X1668,X1670,X1672,X1674,X1669,X1671,X1673,X1675] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.ind_type.recspace'(X1668),'type.num.num'),sK8(X1669,X1668,'type.num.num')),s('type.ind_type.recspace'(X1668),'const.ind_type.CONSTR_3'(s('type.num.num',X1670),s(X1668,X1672),s(fun('type.num.num','type.ind_type.recspace'(X1668)),X1671)))),X1673,X1674,X1675)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(fun('type.num.num','type.num.num'),'type.num.num'),happ(s(fun(X1668,fun(fun('type.num.num','type.num.num'),'type.num.num')),'_dst_x1x0_2'(s(fun(X1668,fun(fun('type.num.num','type.ind_type.recspace'(X1668)),fun(fun('type.num.num','type.num.num'),'type.num.num'))),happ(s(fun('type.num.num',fun(X1668,fun(fun('type.num.num','type.ind_type.recspace'(X1668)),fun(fun('type.num.num','type.num.num'),'type.num.num')))),X1669),s('type.num.num',X1670))),s(fun('type.num.num','type.ind_type.recspace'(X1668)),X1671))),s(X1668,X1672))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1668),'type.num.num'),sK8(X1669,X1668,'type.num.num')),s(fun('type.num.num','type.ind_type.recspace'(X1668)),X1671)))),X1673,X1674,X1675)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f55333,f303])).
fof(f55333,plain,(
  ( ! [X1668,X1670,X1672,X1674,X1669,X1671,X1673,X1675] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1675),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.ind_type.recspace'(X1668),'type.num.num'),sK8(X1669,X1668,'type.num.num')),s('type.ind_type.recspace'(X1668),'const.ind_type.CONSTR_3'(s('type.num.num',X1670),s(X1668,X1672),s(fun('type.num.num','type.ind_type.recspace'(X1668)),X1671))))),s('type.num.num',X1673))),s('type.wordSem.word_loc'(X1675),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1675),X1674))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(fun('type.num.num','type.num.num'),'type.num.num'),happ(s(fun(X1668,fun(fun('type.num.num','type.num.num'),'type.num.num')),'_dst_x1x0_2'(s(fun(X1668,fun(fun('type.num.num','type.ind_type.recspace'(X1668)),fun(fun('type.num.num','type.num.num'),'type.num.num'))),happ(s(fun('type.num.num',fun(X1668,fun(fun('type.num.num','type.ind_type.recspace'(X1668)),fun(fun('type.num.num','type.num.num'),'type.num.num')))),X1669),s('type.num.num',X1670))),s(fun('type.num.num','type.ind_type.recspace'(X1668)),X1671))),s(X1668,X1672))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1668),'type.num.num'),sK8(X1669,X1668,'type.num.num')),s(fun('type.num.num','type.ind_type.recspace'(X1668)),X1671)))),X1673,X1674,X1675)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f346])).
fof(f55320,plain,(
  ( ! [X1560,X1562,X1564,X1566,X1561,X1563,X1565] : (s('type.stackSem.result'(X1560),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1560),X1566))) != s('type.stackSem.result'(X1560),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1560),happ(s(fun('type.ind_type.recspace'(X1561),'type.wordSem.word_loc'(X1560)),sK8(X1562,X1561,'type.wordSem.word_loc'(X1560))),s('type.ind_type.recspace'(X1561),'const.ind_type.CONSTR_3'(s('type.num.num',X1563),s(X1561,X1565),s(fun('type.num.num','type.ind_type.recspace'(X1561)),X1564))))))) | s('type.wordSem.word_loc'(X1560),X1566) = s('type.wordSem.word_loc'(X1560),happ(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1560)),'type.wordSem.word_loc'(X1560)),happ(s(fun(X1561,fun(fun('type.num.num','type.wordSem.word_loc'(X1560)),'type.wordSem.word_loc'(X1560))),'_dst_x1x0_2'(s(fun(X1561,fun(fun('type.num.num','type.ind_type.recspace'(X1561)),fun(fun('type.num.num','type.wordSem.word_loc'(X1560)),'type.wordSem.word_loc'(X1560)))),happ(s(fun('type.num.num',fun(X1561,fun(fun('type.num.num','type.ind_type.recspace'(X1561)),fun(fun('type.num.num','type.wordSem.word_loc'(X1560)),'type.wordSem.word_loc'(X1560))))),X1562),s('type.num.num',X1563))),s(fun('type.num.num','type.ind_type.recspace'(X1561)),X1564))),s(X1561,X1565))),s(fun('type.num.num','type.wordSem.word_loc'(X1560)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1561),'type.wordSem.word_loc'(X1560)),sK8(X1562,X1561,'type.wordSem.word_loc'(X1560))),s(fun('type.num.num','type.ind_type.recspace'(X1561)),X1564)))))) )),
  inference(superposition,[],[f294,f346])).
fof(f55316,plain,(
  ( ! [X1538,X1533,X1535,X1536,X1532,X1534,X1537] : (s('type.stackSem.result'(X1532),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1532),X1538))) != s('type.stackSem.result'(X1532),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1532),happ(s(fun('type.ind_type.recspace'(X1533),'type.wordSem.word_loc'(X1532)),sK8(X1534,X1533,'type.wordSem.word_loc'(X1532))),s('type.ind_type.recspace'(X1533),'const.ind_type.CONSTR_3'(s('type.num.num',X1535),s(X1533,X1537),s(fun('type.num.num','type.ind_type.recspace'(X1533)),X1536))))))) | s('type.wordSem.word_loc'(X1532),X1538) = s('type.wordSem.word_loc'(X1532),happ(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1532)),'type.wordSem.word_loc'(X1532)),happ(s(fun(X1533,fun(fun('type.num.num','type.wordSem.word_loc'(X1532)),'type.wordSem.word_loc'(X1532))),'_dst_x1x0_2'(s(fun(X1533,fun(fun('type.num.num','type.ind_type.recspace'(X1533)),fun(fun('type.num.num','type.wordSem.word_loc'(X1532)),'type.wordSem.word_loc'(X1532)))),happ(s(fun('type.num.num',fun(X1533,fun(fun('type.num.num','type.ind_type.recspace'(X1533)),fun(fun('type.num.num','type.wordSem.word_loc'(X1532)),'type.wordSem.word_loc'(X1532))))),X1534),s('type.num.num',X1535))),s(fun('type.num.num','type.ind_type.recspace'(X1533)),X1536))),s(X1533,X1537))),s(fun('type.num.num','type.wordSem.word_loc'(X1532)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1533),'type.wordSem.word_loc'(X1532)),sK8(X1534,X1533,'type.wordSem.word_loc'(X1532))),s(fun('type.num.num','type.ind_type.recspace'(X1533)),X1536)))))) )),
  inference(superposition,[],[f292,f346])).
fof(f55312,plain,(
  ( ! [X1505,X1507,X1509,X1504,X1506,X1508,X1510] : (s('type.stackSem.result'(X1504),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1504),X1510))) != s('type.stackSem.result'(X1504),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1504),happ(s(fun('type.ind_type.recspace'(X1505),'type.wordSem.word_loc'(X1504)),sK8(X1506,X1505,'type.wordSem.word_loc'(X1504))),s('type.ind_type.recspace'(X1505),'const.ind_type.CONSTR_3'(s('type.num.num',X1507),s(X1505,X1509),s(fun('type.num.num','type.ind_type.recspace'(X1505)),X1508))))))) | s('type.wordSem.word_loc'(X1504),X1510) = s('type.wordSem.word_loc'(X1504),happ(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1504)),'type.wordSem.word_loc'(X1504)),happ(s(fun(X1505,fun(fun('type.num.num','type.wordSem.word_loc'(X1504)),'type.wordSem.word_loc'(X1504))),'_dst_x1x0_2'(s(fun(X1505,fun(fun('type.num.num','type.ind_type.recspace'(X1505)),fun(fun('type.num.num','type.wordSem.word_loc'(X1504)),'type.wordSem.word_loc'(X1504)))),happ(s(fun('type.num.num',fun(X1505,fun(fun('type.num.num','type.ind_type.recspace'(X1505)),fun(fun('type.num.num','type.wordSem.word_loc'(X1504)),'type.wordSem.word_loc'(X1504))))),X1506),s('type.num.num',X1507))),s(fun('type.num.num','type.ind_type.recspace'(X1505)),X1508))),s(X1505,X1509))),s(fun('type.num.num','type.wordSem.word_loc'(X1504)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1505),'type.wordSem.word_loc'(X1504)),sK8(X1506,X1505,'type.wordSem.word_loc'(X1504))),s(fun('type.num.num','type.ind_type.recspace'(X1505)),X1508)))))) )),
  inference(superposition,[],[f290,f346])).
fof(f55303,plain,(
  ( ! [X1449,X1451,X1448,X1450,X1452] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.ind_type.recspace'(X1448),'type.wordSem.word_loc'(sK0)),sK8(X1449,X1448,'type.wordSem.word_loc'(sK0))),s('type.ind_type.recspace'(X1448),'const.ind_type.CONSTR_3'(s('type.num.num',X1450),s(X1448,X1452),s(fun('type.num.num','type.ind_type.recspace'(X1448)),X1451))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0)),happ(s(fun(X1448,fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0))),'_dst_x1x0_2'(s(fun(X1448,fun(fun('type.num.num','type.ind_type.recspace'(X1448)),fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0)))),happ(s(fun('type.num.num',fun(X1448,fun(fun('type.num.num','type.ind_type.recspace'(X1448)),fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0))))),X1449),s('type.num.num',X1450))),s(fun('type.num.num','type.ind_type.recspace'(X1448)),X1451))),s(X1448,X1452))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1448),'type.wordSem.word_loc'(sK0)),sK8(X1449,X1448,'type.wordSem.word_loc'(sK0))),s(fun('type.num.num','type.ind_type.recspace'(X1448)),X1451)))))) )),
  inference(superposition,[],[f2643,f346])).
fof(f55299,plain,(
  ( ! [X1428,X1424,X1426,X1427,X1429,X1425] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.ind_type.recspace'(X1424),'type.wordSem.word_loc'(sK0)),sK8(X1425,X1424,'type.wordSem.word_loc'(sK0))),s('type.ind_type.recspace'(X1424),'const.ind_type.CONSTR_3'(s('type.num.num',X1426),s(X1424,X1428),s(fun('type.num.num','type.ind_type.recspace'(X1424)),X1427))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0)),happ(s(fun(X1424,fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0))),'_dst_x1x0_2'(s(fun(X1424,fun(fun('type.num.num','type.ind_type.recspace'(X1424)),fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0)))),happ(s(fun('type.num.num',fun(X1424,fun(fun('type.num.num','type.ind_type.recspace'(X1424)),fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0))))),X1425),s('type.num.num',X1426))),s(fun('type.num.num','type.ind_type.recspace'(X1424)),X1427))),s(X1424,X1428))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1424),'type.wordSem.word_loc'(sK0)),sK8(X1425,X1424,'type.wordSem.word_loc'(sK0))),s(fun('type.num.num','type.ind_type.recspace'(X1424)),X1427)))),X1429,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1429)))) )),
  inference(superposition,[],[f2654,f346])).
fof(f55257,plain,(
  ( ! [X978,X976,X980,X975,X979,X977,X981] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X975,bool),happ(s(fun('type.ind_type.recspace'(X976),fun(X975,bool)),sK8(X977,X976,fun(X975,bool))),s('type.ind_type.recspace'(X976),'const.ind_type.CONSTR_3'(s('type.num.num',X978),s(X976,X980),s(fun('type.num.num','type.ind_type.recspace'(X976)),X979))))))) | s(X975,X981) = s(X975,sK3(X981,happ(s(fun(fun('type.num.num',fun(X975,bool)),fun(X975,bool)),happ(s(fun(X976,fun(fun('type.num.num',fun(X975,bool)),fun(X975,bool))),'_dst_x1x0_2'(s(fun(X976,fun(fun('type.num.num','type.ind_type.recspace'(X976)),fun(fun('type.num.num',fun(X975,bool)),fun(X975,bool)))),happ(s(fun('type.num.num',fun(X976,fun(fun('type.num.num','type.ind_type.recspace'(X976)),fun(fun('type.num.num',fun(X975,bool)),fun(X975,bool))))),X977),s('type.num.num',X978))),s(fun('type.num.num','type.ind_type.recspace'(X976)),X979))),s(X976,X980))),s(fun('type.num.num',fun(X975,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X976),fun(X975,bool)),sK8(X977,X976,fun(X975,bool))),s(fun('type.num.num','type.ind_type.recspace'(X976)),X979)))),X975))) )),
  inference(superposition,[],[f565,f346])).
fof(f55437,plain,(
  ( ! [X963,X967,X965,X962,X966,X964] : (p(s(bool,happ(s(fun(X962,bool),happ(s(fun('type.ind_type.recspace'(X963),fun(X962,bool)),sK8(X964,X963,fun(X962,bool))),s('type.ind_type.recspace'(X963),'const.ind_type.CONSTR_3'(s('type.num.num',X965),s(X963,X967),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966))))),s(X962,sK7(happ(s(fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool)),happ(s(fun(X963,fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool))),'_dst_x1x0_2'(s(fun(X963,fun(fun('type.num.num','type.ind_type.recspace'(X963)),fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool)))),happ(s(fun('type.num.num',fun(X963,fun(fun('type.num.num','type.ind_type.recspace'(X963)),fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool))))),X964),s('type.num.num',X965))),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966))),s(X963,X967))),s(fun('type.num.num',fun(X962,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X963),fun(X962,bool)),sK8(X964,X963,fun(X962,bool))),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966)))),X962))))) | ~p(s(bool,happ(s(fun(fun(X962,bool),bool),'?_1'),s(fun(X962,bool),happ(s(fun('type.ind_type.recspace'(X963),fun(X962,bool)),sK8(X964,X963,fun(X962,bool))),s('type.ind_type.recspace'(X963),'const.ind_type.CONSTR_3'(s('type.num.num',X965),s(X963,X967),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966))))))))) )),
  inference(forward_demodulation,[],[f55255,f346])).
fof(f55255,plain,(
  ( ! [X963,X967,X965,X962,X966,X964] : (~p(s(bool,happ(s(fun(fun(X962,bool),bool),'?_1'),s(fun(X962,bool),happ(s(fun('type.ind_type.recspace'(X963),fun(X962,bool)),sK8(X964,X963,fun(X962,bool))),s('type.ind_type.recspace'(X963),'const.ind_type.CONSTR_3'(s('type.num.num',X965),s(X963,X967),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966)))))))) | p(s(bool,happ(s(fun(X962,bool),happ(s(fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool)),happ(s(fun(X963,fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool))),'_dst_x1x0_2'(s(fun(X963,fun(fun('type.num.num','type.ind_type.recspace'(X963)),fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool)))),happ(s(fun('type.num.num',fun(X963,fun(fun('type.num.num','type.ind_type.recspace'(X963)),fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool))))),X964),s('type.num.num',X965))),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966))),s(X963,X967))),s(fun('type.num.num',fun(X962,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X963),fun(X962,bool)),sK8(X964,X963,fun(X962,bool))),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966))))),s(X962,sK7(happ(s(fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool)),happ(s(fun(X963,fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool))),'_dst_x1x0_2'(s(fun(X963,fun(fun('type.num.num','type.ind_type.recspace'(X963)),fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool)))),happ(s(fun('type.num.num',fun(X963,fun(fun('type.num.num','type.ind_type.recspace'(X963)),fun(fun('type.num.num',fun(X962,bool)),fun(X962,bool))))),X964),s('type.num.num',X965))),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966))),s(X963,X967))),s(fun('type.num.num',fun(X962,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X963),fun(X962,bool)),sK8(X964,X963,fun(X962,bool))),s(fun('type.num.num','type.ind_type.recspace'(X963)),X966)))),X962)))))) )),
  inference(superposition,[],[f311,f346])).
fof(f55436,plain,(
  ( ! [X957,X961,X958,X956,X960,X959] : (p(s(bool,happ(s(fun(fun(X956,bool),bool),'!_1'),s(fun(X956,bool),happ(s(fun('type.ind_type.recspace'(X957),fun(X956,bool)),sK8(X958,X957,fun(X956,bool))),s('type.ind_type.recspace'(X957),'const.ind_type.CONSTR_3'(s('type.num.num',X959),s(X957,X961),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960)))))))) | ~p(s(bool,happ(s(fun(X956,bool),happ(s(fun('type.ind_type.recspace'(X957),fun(X956,bool)),sK8(X958,X957,fun(X956,bool))),s('type.ind_type.recspace'(X957),'const.ind_type.CONSTR_3'(s('type.num.num',X959),s(X957,X961),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960))))),s(X956,sK6(happ(s(fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool)),happ(s(fun(X957,fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool))),'_dst_x1x0_2'(s(fun(X957,fun(fun('type.num.num','type.ind_type.recspace'(X957)),fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool)))),happ(s(fun('type.num.num',fun(X957,fun(fun('type.num.num','type.ind_type.recspace'(X957)),fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool))))),X958),s('type.num.num',X959))),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960))),s(X957,X961))),s(fun('type.num.num',fun(X956,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X957),fun(X956,bool)),sK8(X958,X957,fun(X956,bool))),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960)))),X956)))))) )),
  inference(forward_demodulation,[],[f55254,f346])).
fof(f55254,plain,(
  ( ! [X957,X961,X958,X956,X960,X959] : (~p(s(bool,happ(s(fun(X956,bool),happ(s(fun('type.ind_type.recspace'(X957),fun(X956,bool)),sK8(X958,X957,fun(X956,bool))),s('type.ind_type.recspace'(X957),'const.ind_type.CONSTR_3'(s('type.num.num',X959),s(X957,X961),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960))))),s(X956,sK6(happ(s(fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool)),happ(s(fun(X957,fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool))),'_dst_x1x0_2'(s(fun(X957,fun(fun('type.num.num','type.ind_type.recspace'(X957)),fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool)))),happ(s(fun('type.num.num',fun(X957,fun(fun('type.num.num','type.ind_type.recspace'(X957)),fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool))))),X958),s('type.num.num',X959))),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960))),s(X957,X961))),s(fun('type.num.num',fun(X956,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X957),fun(X956,bool)),sK8(X958,X957,fun(X956,bool))),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960)))),X956))))) | p(s(bool,happ(s(fun(fun(X956,bool),bool),'!_1'),s(fun(X956,bool),happ(s(fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool)),happ(s(fun(X957,fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool))),'_dst_x1x0_2'(s(fun(X957,fun(fun('type.num.num','type.ind_type.recspace'(X957)),fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool)))),happ(s(fun('type.num.num',fun(X957,fun(fun('type.num.num','type.ind_type.recspace'(X957)),fun(fun('type.num.num',fun(X956,bool)),fun(X956,bool))))),X958),s('type.num.num',X959))),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960))),s(X957,X961))),s(fun('type.num.num',fun(X956,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X957),fun(X956,bool)),sK8(X958,X957,fun(X956,bool))),s(fun('type.num.num','type.ind_type.recspace'(X957)),X960))))))))) )),
  inference(superposition,[],[f310,f346])).
fof(f55252,plain,(
  ( ! [X947,X945,X942,X946,X944,X948,X943] : (p(s(bool,'|dollar|exists_1'(s(fun(X942,bool),happ(s(fun('type.ind_type.recspace'(X943),fun(X942,bool)),sK8(X944,X943,fun(X942,bool))),s('type.ind_type.recspace'(X943),'const.ind_type.CONSTR_3'(s('type.num.num',X945),s(X943,X947),s(fun('type.num.num','type.ind_type.recspace'(X943)),X946)))))))) | s(X942,X948) = s(X942,sK3(X948,happ(s(fun(fun('type.num.num',fun(X942,bool)),fun(X942,bool)),happ(s(fun(X943,fun(fun('type.num.num',fun(X942,bool)),fun(X942,bool))),'_dst_x1x0_2'(s(fun(X943,fun(fun('type.num.num','type.ind_type.recspace'(X943)),fun(fun('type.num.num',fun(X942,bool)),fun(X942,bool)))),happ(s(fun('type.num.num',fun(X943,fun(fun('type.num.num','type.ind_type.recspace'(X943)),fun(fun('type.num.num',fun(X942,bool)),fun(X942,bool))))),X944),s('type.num.num',X945))),s(fun('type.num.num','type.ind_type.recspace'(X943)),X946))),s(X943,X947))),s(fun('type.num.num',fun(X942,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X943),fun(X942,bool)),sK8(X944,X943,fun(X942,bool))),s(fun('type.num.num','type.ind_type.recspace'(X943)),X946)))),X942))) )),
  inference(superposition,[],[f288,f346])).
fof(f55246,plain,(
  ( ! [X895,X893,X899,X897,X894,X892,X898,X896,X891,X900] : (s(X892,happ(s(fun(X891,X892),happ(s(fun('type.ind_type.recspace'(X893),fun(X891,X892)),sK8(X894,X893,fun(X891,X892))),s('type.ind_type.recspace'(X893),'const.ind_type.CONSTR_3'(s('type.num.num',X895),s(X893,X897),s(fun('type.num.num','type.ind_type.recspace'(X893)),X896))))),s(X891,happ(s(fun(X898,X891),X899),s(X898,X900))))) = s(X892,happ(s(fun(X898,X892),'_dst_x0x0x1_3'(s(fun(fun('type.num.num',fun(X891,X892)),fun(X891,X892)),happ(s(fun(X893,fun(fun('type.num.num',fun(X891,X892)),fun(X891,X892))),'_dst_x1x0_2'(s(fun(X893,fun(fun('type.num.num','type.ind_type.recspace'(X893)),fun(fun('type.num.num',fun(X891,X892)),fun(X891,X892)))),happ(s(fun('type.num.num',fun(X893,fun(fun('type.num.num','type.ind_type.recspace'(X893)),fun(fun('type.num.num',fun(X891,X892)),fun(X891,X892))))),X894),s('type.num.num',X895))),s(fun('type.num.num','type.ind_type.recspace'(X893)),X896))),s(X893,X897))),s(fun('type.num.num',fun(X891,X892)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X893),fun(X891,X892)),sK8(X894,X893,fun(X891,X892))),s(fun('type.num.num','type.ind_type.recspace'(X893)),X896))),s(fun(X898,X891),X899))),s(X898,X900)))) )),
  inference(superposition,[],[f335,f346])).
fof(f55242,plain,(
  ( ! [X860,X859,X857,X861,X858,X862] : (s(bool,'F_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X857),bool),sK8(X858,X857,bool)),s('type.ind_type.recspace'(X857),'const.ind_type.CONSTR_3'(s('type.num.num',X859),s(X857,X861),s(fun('type.num.num','type.ind_type.recspace'(X857)),X860))))) | s(bool,X862) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X857,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X857,fun(fun('type.num.num','type.ind_type.recspace'(X857)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X857,fun(fun('type.num.num','type.ind_type.recspace'(X857)),fun(fun('type.num.num',bool),bool)))),X858),s('type.num.num',X859))),s(fun('type.num.num','type.ind_type.recspace'(X857)),X860))),s(X857,X861))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X857),bool),sK8(X858,X857,bool)),s(fun('type.num.num','type.ind_type.recspace'(X857)),X860))))) | s(bool,'T_0') = s(bool,X862)) )),
  inference(superposition,[],[f43737,f346])).
fof(f55210,plain,(
  ( ! [X677,X679,X675,X676,X678,X674] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X679,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X674),bool),sK8(X675,X674,bool)),s('type.ind_type.recspace'(X674),'const.ind_type.CONSTR_3'(s('type.num.num',X676),s(X674,X678),s(fun('type.num.num','type.ind_type.recspace'(X674)),X677))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X674,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X674,fun(fun('type.num.num','type.ind_type.recspace'(X674)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X674,fun(fun('type.num.num','type.ind_type.recspace'(X674)),fun(fun('type.num.num',bool),bool)))),X675),s('type.num.num',X676))),s(fun('type.num.num','type.ind_type.recspace'(X674)),X677))),s(X674,X678))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X674),bool),sK8(X675,X674,bool)),s(fun('type.num.num','type.ind_type.recspace'(X674)),X677)))))) )),
  inference(superposition,[],[f2213,f346])).
fof(f55205,plain,(
  ( ! [X648,X644,X646,X649,X645,X647] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X644),bool),sK8(X645,X644,bool)),s('type.ind_type.recspace'(X644),'const.ind_type.CONSTR_3'(s('type.num.num',X646),s(X644,X648),s(fun('type.num.num','type.ind_type.recspace'(X644)),X647))))) | s(bool,X649) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X644,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X644,fun(fun('type.num.num','type.ind_type.recspace'(X644)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X644,fun(fun('type.num.num','type.ind_type.recspace'(X644)),fun(fun('type.num.num',bool),bool)))),X645),s('type.num.num',X646))),s(fun('type.num.num','type.ind_type.recspace'(X644)),X647))),s(X644,X648))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X644),bool),sK8(X645,X644,bool)),s(fun('type.num.num','type.ind_type.recspace'(X644)),X647))))) | s(bool,'F_0') = s(bool,X649)) )),
  inference(superposition,[],[f1400,f346])).
fof(f55204,plain,(
  ( ! [X639,X640,X642,X638,X641,X643] : (s(bool,X643) != s(bool,happ(s(fun('type.ind_type.recspace'(X638),bool),sK8(X639,X638,bool)),s('type.ind_type.recspace'(X638),'const.ind_type.CONSTR_3'(s('type.num.num',X640),s(X638,X642),s(fun('type.num.num','type.ind_type.recspace'(X638)),X641))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X638,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X638,fun(fun('type.num.num','type.ind_type.recspace'(X638)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X638,fun(fun('type.num.num','type.ind_type.recspace'(X638)),fun(fun('type.num.num',bool),bool)))),X639),s('type.num.num',X640))),s(fun('type.num.num','type.ind_type.recspace'(X638)),X641))),s(X638,X642))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X638),bool),sK8(X639,X638,bool)),s(fun('type.num.num','type.ind_type.recspace'(X638)),X641))))) | s(bool,'F_0') = s(bool,X643)) )),
  inference(superposition,[],[f1197,f346])).
fof(f55203,plain,(
  ( ! [X633,X635,X636,X632,X634,X637] : (s(bool,X637) != s(bool,happ(s(fun('type.ind_type.recspace'(X632),bool),sK8(X633,X632,bool)),s('type.ind_type.recspace'(X632),'const.ind_type.CONSTR_3'(s('type.num.num',X634),s(X632,X636),s(fun('type.num.num','type.ind_type.recspace'(X632)),X635))))) | s(bool,'T_0') = s(bool,X637) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X632,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X632,fun(fun('type.num.num','type.ind_type.recspace'(X632)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X632,fun(fun('type.num.num','type.ind_type.recspace'(X632)),fun(fun('type.num.num',bool),bool)))),X633),s('type.num.num',X634))),s(fun('type.num.num','type.ind_type.recspace'(X632)),X635))),s(X632,X636))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X632),bool),sK8(X633,X632,bool)),s(fun('type.num.num','type.ind_type.recspace'(X632)),X635)))))) )),
  inference(superposition,[],[f1197,f346])).
fof(f55395,plain,(
  ( ! [X565,X567,X568,X564,X566] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X564),bool),sK8(X565,X564,bool)),s('type.ind_type.recspace'(X564),'const.ind_type.CONSTR_3'(s('type.num.num',X566),s(X564,X568),s(fun('type.num.num','type.ind_type.recspace'(X564)),X567))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X564,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X564,fun(fun('type.num.num','type.ind_type.recspace'(X564)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X564,fun(fun('type.num.num','type.ind_type.recspace'(X564)),fun(fun('type.num.num',bool),bool)))),X565),s('type.num.num',X566))),s(fun('type.num.num','type.ind_type.recspace'(X564)),X567))),s(X564,X568))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X564),bool),sK8(X565,X564,bool)),s(fun('type.num.num','type.ind_type.recspace'(X564)),X567)))))) )),
  inference(forward_demodulation,[],[f55192,f270])).
fof(f55192,plain,(
  ( ! [X569,X565,X567,X568,X570,X564,X566] : (s(bool,'const.bool.DATATYPE_1'(s(X569,X570))) != s(bool,happ(s(fun('type.ind_type.recspace'(X564),bool),sK8(X565,X564,bool)),s('type.ind_type.recspace'(X564),'const.ind_type.CONSTR_3'(s('type.num.num',X566),s(X564,X568),s(fun('type.num.num','type.ind_type.recspace'(X564)),X567))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X564,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X564,fun(fun('type.num.num','type.ind_type.recspace'(X564)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X564,fun(fun('type.num.num','type.ind_type.recspace'(X564)),fun(fun('type.num.num',bool),bool)))),X565),s('type.num.num',X566))),s(fun('type.num.num','type.ind_type.recspace'(X564)),X567))),s(X564,X568))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X564),bool),sK8(X565,X564,bool)),s(fun('type.num.num','type.ind_type.recspace'(X564)),X567)))))) )),
  inference(superposition,[],[f557,f346])).
fof(f55168,plain,(
  ( ! [X428,X430,X429,X431,X427] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X427),bool),sK8(X428,X427,bool)),s('type.ind_type.recspace'(X427),'const.ind_type.CONSTR_3'(s('type.num.num',X429),s(X427,X431),s(fun('type.num.num','type.ind_type.recspace'(X427)),X430)))))) | p(s(bool,'|dollar|exists_1'(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X427,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X427,fun(fun('type.num.num','type.ind_type.recspace'(X427)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X427,fun(fun('type.num.num','type.ind_type.recspace'(X427)),fun(fun('type.num.num',bool),bool)))),X428),s('type.num.num',X429))),s(fun('type.num.num','type.ind_type.recspace'(X427)),X430))),s(X427,X431))))))) )),
  inference(superposition,[],[f2633,f346])).
fof(f55167,plain,(
  ( ! [X422,X424,X426,X423,X425] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X422),bool),sK8(X423,X422,bool)),s('type.ind_type.recspace'(X422),'const.ind_type.CONSTR_3'(s('type.num.num',X424),s(X422,X426),s(fun('type.num.num','type.ind_type.recspace'(X422)),X425)))))) | p(s(bool,happ(s(fun(fun(fun('type.num.num',bool),bool),bool),'?_1'),s(fun(fun('type.num.num',bool),bool),happ(s(fun(X422,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X422,fun(fun('type.num.num','type.ind_type.recspace'(X422)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X422,fun(fun('type.num.num','type.ind_type.recspace'(X422)),fun(fun('type.num.num',bool),bool)))),X423),s('type.num.num',X424))),s(fun('type.num.num','type.ind_type.recspace'(X422)),X425))),s(X422,X426))))))) )),
  inference(superposition,[],[f312,f346])).
fof(f55125,plain,(
  ( ! [X39,X37,X35,X33,X31,X38,X36,X34,X32,X40] : (s(X37,happ(s(fun(X31,X37),happ(s(fun(X38,fun(X31,X37)),X39),s(X38,X40))),s(X31,happ(s(fun('type.ind_type.recspace'(X32),X31),sK8(X33,X32,X31)),s('type.ind_type.recspace'(X32),'const.ind_type.CONSTR_3'(s('type.num.num',X34),s(X32,X36),s(fun('type.num.num','type.ind_type.recspace'(X32)),X35))))))) = s(X37,happ(s(fun(fun('type.num.num',X31),X37),'_dst_x0x0x1_3'(s(fun(X38,fun(X31,X37)),X39),s(X38,X40),s(fun(fun('type.num.num',X31),X31),happ(s(fun(X32,fun(fun('type.num.num',X31),X31)),'_dst_x1x0_2'(s(fun(X32,fun(fun('type.num.num','type.ind_type.recspace'(X32)),fun(fun('type.num.num',X31),X31))),happ(s(fun('type.num.num',fun(X32,fun(fun('type.num.num','type.ind_type.recspace'(X32)),fun(fun('type.num.num',X31),X31)))),X33),s('type.num.num',X34))),s(fun('type.num.num','type.ind_type.recspace'(X32)),X35))),s(X32,X36))))),s(fun('type.num.num',X31),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X32),X31),sK8(X33,X32,X31)),s(fun('type.num.num','type.ind_type.recspace'(X32)),X35)))))) )),
  inference(superposition,[],[f335,f346])).
fof(f55124,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s(X16,happ(s(fun(X17,X16),happ(s(fun(X10,fun(X17,X16)),X18),s(X10,happ(s(fun('type.ind_type.recspace'(X11),X10),sK8(X12,X11,X10)),s('type.ind_type.recspace'(X11),'const.ind_type.CONSTR_3'(s('type.num.num',X13),s(X11,X15),s(fun('type.num.num','type.ind_type.recspace'(X11)),X14))))))),s(X17,happ(s(fun(fun('type.num.num',X10),X17),X19),s(fun('type.num.num',X10),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X11),X10),sK8(X12,X11,X10)),s(fun('type.num.num','type.ind_type.recspace'(X11)),X14))))))) = s(X16,happ(s(fun(fun('type.num.num',X10),X16),'_dst_x0x1x1_3'(s(fun(X10,fun(X17,X16)),X18),s(fun(fun('type.num.num',X10),X10),happ(s(fun(X11,fun(fun('type.num.num',X10),X10)),'_dst_x1x0_2'(s(fun(X11,fun(fun('type.num.num','type.ind_type.recspace'(X11)),fun(fun('type.num.num',X10),X10))),happ(s(fun('type.num.num',fun(X11,fun(fun('type.num.num','type.ind_type.recspace'(X11)),fun(fun('type.num.num',X10),X10)))),X12),s('type.num.num',X13))),s(fun('type.num.num','type.ind_type.recspace'(X11)),X14))),s(X11,X15))),s(fun(fun('type.num.num',X10),X17),X19))),s(fun('type.num.num',X10),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X11),X10),sK8(X12,X11,X10)),s(fun('type.num.num','type.ind_type.recspace'(X11)),X14)))))) )),
  inference(superposition,[],[f336,f346])).
fof(f55123,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(X6,happ(s(fun(X0,X6),happ(s(fun(X7,fun(X0,X6)),X8),s(X7,happ(s(fun(fun('type.num.num',X0),X7),X9),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X4))))))),s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X3),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X4))))))) = s(X6,happ(s(fun(fun('type.num.num',X0),X6),'_dst_x0x1x1_3'(s(fun(X7,fun(X0,X6)),X8),s(fun(fun('type.num.num',X0),X7),X9),s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X3))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X4))),s(X1,X5))))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X4)))))) )),
  inference(superposition,[],[f336,f346])).
fof(f55122,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X170,X168] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X164),bool),sK8(X165,X164,bool)),s('type.ind_type.recspace'(X164),'const.ind_type.CONSTR_3'(s('type.num.num',X166),s(X164,X168),s(fun('type.num.num','type.ind_type.recspace'(X164)),X167))))) | s(bool,X169) = s(bool,'const.bool.DATATYPE_1'(s(X170,X171))) | s(bool,X169) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X164,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',bool),bool)))),X165),s('type.num.num',X166))),s(fun('type.num.num','type.ind_type.recspace'(X164)),X167))),s(X164,X168))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X164),bool),sK8(X165,X164,bool)),s(fun('type.num.num','type.ind_type.recspace'(X164)),X167)))))) )),
  inference(superposition,[],[f346,f43498])).
fof(f55121,plain,(
  ( ! [X158,X156,X163,X161,X159,X157,X162,X160] : (s(bool,X161) = s(bool,happ(s(fun('type.ind_type.recspace'(X156),bool),sK8(X157,X156,bool)),s('type.ind_type.recspace'(X156),'const.ind_type.CONSTR_3'(s('type.num.num',X158),s(X156,X160),s(fun('type.num.num','type.ind_type.recspace'(X156)),X159))))) | s(bool,X161) = s(bool,'const.bool.DATATYPE_1'(s(X162,X163))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X156,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',bool),bool)))),X157),s('type.num.num',X158))),s(fun('type.num.num','type.ind_type.recspace'(X156)),X159))),s(X156,X160))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X156),bool),sK8(X157,X156,bool)),s(fun('type.num.num','type.ind_type.recspace'(X156)),X159)))))) )),
  inference(superposition,[],[f346,f43498])).
fof(f55108,plain,(
  ( ! [X80,X78,X83,X81,X79,X82] : (s(bool,X83) = s(bool,happ(s(fun('type.ind_type.recspace'(X78),bool),sK8(X79,X78,bool)),s('type.ind_type.recspace'(X78),'const.ind_type.CONSTR_3'(s('type.num.num',X80),s(X78,X82),s(fun('type.num.num','type.ind_type.recspace'(X78)),X81))))) | s(bool,'F_0') = s(bool,X83) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X78,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X78,fun(fun('type.num.num','type.ind_type.recspace'(X78)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X78,fun(fun('type.num.num','type.ind_type.recspace'(X78)),fun(fun('type.num.num',bool),bool)))),X79),s('type.num.num',X80))),s(fun('type.num.num','type.ind_type.recspace'(X78)),X81))),s(X78,X82))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X78),bool),sK8(X79,X78,bool)),s(fun('type.num.num','type.ind_type.recspace'(X78)),X81)))))) )),
  inference(superposition,[],[f346,f1108])).
fof(f55106,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X66),bool),sK8(X67,X66,bool)),s('type.ind_type.recspace'(X66),'const.ind_type.CONSTR_3'(s('type.num.num',X68),s(X66,X70),s(fun('type.num.num','type.ind_type.recspace'(X66)),X69))))) | s(bool,X71) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X66,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',bool),bool)))),X67),s('type.num.num',X68))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X69))),s(X66,X70))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X66),bool),sK8(X67,X66,bool)),s(fun('type.num.num','type.ind_type.recspace'(X66)),X69))))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f346,f1108])).
fof(f55358,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X59),bool),sK8(X60,X59,bool)),s('type.ind_type.recspace'(X59),'const.ind_type.CONSTR_3'(s('type.num.num',X61),s(X59,X63),s(fun('type.num.num','type.ind_type.recspace'(X59)),X62))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X59,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',bool),bool)))),X60),s('type.num.num',X61))),s(fun('type.num.num','type.ind_type.recspace'(X59)),X62))),s(X59,X63))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X59),bool),sK8(X60,X59,bool)),s(fun('type.num.num','type.ind_type.recspace'(X59)),X62)))))) )),
  inference(forward_demodulation,[],[f55105,f270])).
fof(f55105,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (s(bool,'const.bool.DATATYPE_1'(s(X64,X65))) = s(bool,happ(s(fun('type.ind_type.recspace'(X59),bool),sK8(X60,X59,bool)),s('type.ind_type.recspace'(X59),'const.ind_type.CONSTR_3'(s('type.num.num',X61),s(X59,X63),s(fun('type.num.num','type.ind_type.recspace'(X59)),X62))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X59,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',bool),bool)))),X60),s('type.num.num',X61))),s(fun('type.num.num','type.ind_type.recspace'(X59)),X62))),s(X59,X63))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X59),bool),sK8(X60,X59,bool)),s(fun('type.num.num','type.ind_type.recspace'(X59)),X62)))))) )),
  inference(superposition,[],[f346,f1071])).
fof(f55104,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X53),bool),sK8(X54,X53,bool)),s('type.ind_type.recspace'(X53),'const.ind_type.CONSTR_3'(s('type.num.num',X55),s(X53,X57),s(fun('type.num.num','type.ind_type.recspace'(X53)),X56))))) | s(bool,X58) = s(bool,'const.bool.DATATYPE_1'(s(bool,X58))) | s(bool,X58) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X53,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X53,fun(fun('type.num.num','type.ind_type.recspace'(X53)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X53,fun(fun('type.num.num','type.ind_type.recspace'(X53)),fun(fun('type.num.num',bool),bool)))),X54),s('type.num.num',X55))),s(fun('type.num.num','type.ind_type.recspace'(X53)),X56))),s(X53,X57))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X53),bool),sK8(X54,X53,bool)),s(fun('type.num.num','type.ind_type.recspace'(X53)),X56)))))) )),
  inference(superposition,[],[f346,f742])).
fof(f55103,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,X52) = s(bool,happ(s(fun('type.ind_type.recspace'(X47),bool),sK8(X48,X47,bool)),s('type.ind_type.recspace'(X47),'const.ind_type.CONSTR_3'(s('type.num.num',X49),s(X47,X51),s(fun('type.num.num','type.ind_type.recspace'(X47)),X50))))) | s(bool,X52) = s(bool,'const.bool.DATATYPE_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X47,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X47,fun(fun('type.num.num','type.ind_type.recspace'(X47)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X47,fun(fun('type.num.num','type.ind_type.recspace'(X47)),fun(fun('type.num.num',bool),bool)))),X48),s('type.num.num',X49))),s(fun('type.num.num','type.ind_type.recspace'(X47)),X50))),s(X47,X51))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X47),bool),sK8(X48,X47,bool)),s(fun('type.num.num','type.ind_type.recspace'(X47)),X50)))))) )),
  inference(superposition,[],[f346,f742])).
fof(f55099,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,X28) = s(bool,happ(s(fun('type.ind_type.recspace'(X23),bool),sK8(X24,X23,bool)),s('type.ind_type.recspace'(X23),'const.ind_type.CONSTR_3'(s('type.num.num',X25),s(X23,X27),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X23,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X23,fun(fun('type.num.num','type.ind_type.recspace'(X23)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X23,fun(fun('type.num.num','type.ind_type.recspace'(X23)),fun(fun('type.num.num',bool),bool)))),X24),s('type.num.num',X25))),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))),s(X23,X27))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X23),bool),sK8(X24,X23,bool)),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26)))))) )),
  inference(superposition,[],[f346,f365])).
fof(f55098,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X17),bool),sK8(X18,X17,bool)),s('type.ind_type.recspace'(X17),'const.ind_type.CONSTR_3'(s('type.num.num',X19),s(X17,X21),s(fun('type.num.num','type.ind_type.recspace'(X17)),X20))))) | s(bool,X22) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X17,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X17,fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X17,fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool)))),X18),s('type.num.num',X19))),s(fun('type.num.num','type.ind_type.recspace'(X17)),X20))),s(X17,X21))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X17),bool),sK8(X18,X17,bool)),s(fun('type.num.num','type.ind_type.recspace'(X17)),X20))))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f346,f365])).
fof(f55097,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X12),bool),sK8(X13,X12,bool)),s('type.ind_type.recspace'(X12),'const.ind_type.CONSTR_3'(s('type.num.num',X14),s(X12,X16),s(fun('type.num.num','type.ind_type.recspace'(X12)),X15))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X12,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',bool),bool)))),X13),s('type.num.num',X14))),s(fun('type.num.num','type.ind_type.recspace'(X12)),X15))),s(X12,X16))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X12),bool),sK8(X13,X12,bool)),s(fun('type.num.num','type.ind_type.recspace'(X12)),X15)))))) )),
  inference(superposition,[],[f346,f242])).
fof(f55096,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,happ(s(fun('type.ind_type.recspace'(X7),X6),sK8(X8,X7,X6)),s('type.ind_type.recspace'(X7),'const.ind_type.CONSTR_3'(s('type.num.num',X9),s(X7,X11),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))))) = s(X6,happ(s(fun(X7,X6),'_dst_x1x0_2'(s(fun(X7,fun(fun('type.num.num',X6),X6)),'_dst_x1x0_2'(s(fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6))),happ(s(fun('type.num.num',fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6)))),X8),s('type.num.num',X9))),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))),s(fun('type.num.num',X6),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X7),X6),sK8(X8,X7,X6)),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))))),s(X7,X11)))) )),
  inference(superposition,[],[f346,f334])).
fof(f55069,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,happ(s(fun('type.ind_type.recspace'(X7),X6),sK8(X8,X7,X6)),s('type.ind_type.recspace'(X7),'const.ind_type.CONSTR_3'(s('type.num.num',X9),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))))) = s(X6,happ(s(fun(fun('type.num.num',X6),X6),happ(s(fun(X11,fun(fun('type.num.num',X6),X6)),'_dst_x0x1_2'(s(fun(X7,fun(fun('type.num.num',X6),X6)),'_dst_x1x0_2'(s(fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6))),happ(s(fun('type.num.num',fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6)))),X8),s('type.num.num',X9))),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))),s(fun(X11,X7),X12))),s(X11,X13))),s(fun('type.num.num',X6),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X7),X6),sK8(X8,X7,X6)),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10)))))) )),
  inference(superposition,[],[f346,f333])).
fof(f54945,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X75,X82] : (s(X76,happ(s(fun('type.ind_type.recspace'(X75),X76),sK8('_dst_x1x0_2'(s(fun('type.num.num',fun(X77,fun(X75,fun(fun('type.num.num','type.ind_type.recspace'(X75)),fun(fun('type.num.num',X76),X76))))),X78),s(X77,X79)),X75,X76)),s('type.ind_type.recspace'(X75),'const.ind_type.CONSTR_3'(s('type.num.num',X80),s(X75,X81),s(fun('type.num.num','type.ind_type.recspace'(X75)),X82))))) = s(X76,happ(s(fun(fun('type.num.num',X76),X76),happ(s(fun(X75,fun(fun('type.num.num',X76),X76)),'_dst_x1x0_2'(s(fun(X75,fun(fun('type.num.num','type.ind_type.recspace'(X75)),fun(fun('type.num.num',X76),X76))),happ(s(fun(X77,fun(X75,fun(fun('type.num.num','type.ind_type.recspace'(X75)),fun(fun('type.num.num',X76),X76)))),happ(s(fun('type.num.num',fun(X77,fun(X75,fun(fun('type.num.num','type.ind_type.recspace'(X75)),fun(fun('type.num.num',X76),X76))))),X78),s('type.num.num',X80))),s(X77,X79))),s(fun('type.num.num','type.ind_type.recspace'(X75)),X82))),s(X75,X81))),s(fun('type.num.num',X76),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X75),X76),sK8('_dst_x1x0_2'(s(fun('type.num.num',fun(X77,fun(X75,fun(fun('type.num.num','type.ind_type.recspace'(X75)),fun(fun('type.num.num',X76),X76))))),X78),s(X77,X79)),X75,X76)),s(fun('type.num.num','type.ind_type.recspace'(X75)),X82)))))) )),
  inference(superposition,[],[f346,f334])).
fof(f54944,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (s(X70,happ(s(fun('type.ind_type.recspace'(X69),X70),sK8('_dst_x0_1'(s(fun(X69,fun(fun('type.num.num','type.ind_type.recspace'(X69)),fun(fun('type.num.num',X70),X70))),X71)),X69,X70)),s('type.ind_type.recspace'(X69),'const.ind_type.CONSTR_3'(s('type.num.num',X72),s(X69,X73),s(fun('type.num.num','type.ind_type.recspace'(X69)),X74))))) = s(X70,happ(s(fun(fun('type.num.num',X70),X70),happ(s(fun(X69,fun(fun('type.num.num',X70),X70)),'_dst_x1x0_2'(s(fun(X69,fun(fun('type.num.num','type.ind_type.recspace'(X69)),fun(fun('type.num.num',X70),X70))),X71),s(fun('type.num.num','type.ind_type.recspace'(X69)),X74))),s(X69,X73))),s(fun('type.num.num',X70),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X69),X70),sK8('_dst_x0_1'(s(fun(X69,fun(fun('type.num.num','type.ind_type.recspace'(X69)),fun(fun('type.num.num',X70),X70))),X71)),X69,X70)),s(fun('type.num.num','type.ind_type.recspace'(X69)),X74)))))) )),
  inference(superposition,[],[f346,f320])).
fof(f54943,plain,(
  ( ! [X61,X59,X68,X66,X64,X62,X60,X67,X65,X63] : (s(X60,happ(s(fun('type.ind_type.recspace'(X59),X60),sK8(happ(s(fun(X61,fun('type.num.num',fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',X60),X60))))),X62),s(X61,happ(s(fun(X63,X61),X64),s(X63,X65)))),X59,X60)),s('type.ind_type.recspace'(X59),'const.ind_type.CONSTR_3'(s('type.num.num',happ(s(fun(X63,'type.num.num'),X66),s(X63,X65))),s(X59,X67),s(fun('type.num.num','type.ind_type.recspace'(X59)),X68))))) = s(X60,happ(s(fun(fun('type.num.num',X60),X60),happ(s(fun(X59,fun(fun('type.num.num',X60),X60)),'_dst_x1x0_2'(s(fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',X60),X60))),happ(s(fun(X63,fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',X60),X60)))),'_dst_x0x1x1_3'(s(fun(X61,fun('type.num.num',fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',X60),X60))))),X62),s(fun(X63,X61),X64),s(fun(X63,'type.num.num'),X66))),s(X63,X65))),s(fun('type.num.num','type.ind_type.recspace'(X59)),X68))),s(X59,X67))),s(fun('type.num.num',X60),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X59),X60),sK8(happ(s(fun(X61,fun('type.num.num',fun(X59,fun(fun('type.num.num','type.ind_type.recspace'(X59)),fun(fun('type.num.num',X60),X60))))),X62),s(X61,happ(s(fun(X63,X61),X64),s(X63,X65)))),X59,X60)),s(fun('type.num.num','type.ind_type.recspace'(X59)),X68)))))) )),
  inference(superposition,[],[f346,f336])).
fof(f54942,plain,(
  ( ! [X57,X54,X52,X50,X58,X56,X55,X53,X51,X49] : (s(X50,happ(s(fun('type.ind_type.recspace'(X49),X50),sK8(happ(s(fun(X51,fun('type.num.num',fun(X49,fun(fun('type.num.num','type.ind_type.recspace'(X49)),fun(fun('type.num.num',X50),X50))))),X52),s(X51,X53)),X49,X50)),s('type.ind_type.recspace'(X49),'const.ind_type.CONSTR_3'(s('type.num.num',happ(s(fun(X54,'type.num.num'),X55),s(X54,X56))),s(X49,X57),s(fun('type.num.num','type.ind_type.recspace'(X49)),X58))))) = s(X50,happ(s(fun(fun('type.num.num',X50),X50),happ(s(fun(X49,fun(fun('type.num.num',X50),X50)),'_dst_x1x0_2'(s(fun(X49,fun(fun('type.num.num','type.ind_type.recspace'(X49)),fun(fun('type.num.num',X50),X50))),happ(s(fun(X54,fun(X49,fun(fun('type.num.num','type.ind_type.recspace'(X49)),fun(fun('type.num.num',X50),X50)))),'_dst_x0x0x1_3'(s(fun(X51,fun('type.num.num',fun(X49,fun(fun('type.num.num','type.ind_type.recspace'(X49)),fun(fun('type.num.num',X50),X50))))),X52),s(X51,X53),s(fun(X54,'type.num.num'),X55))),s(X54,X56))),s(fun('type.num.num','type.ind_type.recspace'(X49)),X58))),s(X49,X57))),s(fun('type.num.num',X50),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X49),X50),sK8(happ(s(fun(X51,fun('type.num.num',fun(X49,fun(fun('type.num.num','type.ind_type.recspace'(X49)),fun(fun('type.num.num',X50),X50))))),X52),s(X51,X53)),X49,X50)),s(fun('type.num.num','type.ind_type.recspace'(X49)),X58)))))) )),
  inference(superposition,[],[f346,f335])).
fof(f54941,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42] : (s(X42,happ(s(fun('type.ind_type.recspace'(X41),X42),sK8(happ(s(fun(X43,fun('type.num.num',fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',X42),X42))))),X44),s(X43,X45)),X41,X42)),s('type.ind_type.recspace'(X41),'const.ind_type.CONSTR_3'(s('type.num.num',X46),s(X41,X47),s(fun('type.num.num','type.ind_type.recspace'(X41)),X48))))) = s(X42,happ(s(fun(fun('type.num.num',X42),X42),happ(s(fun(X41,fun(fun('type.num.num',X42),X42)),'_dst_x1x0_2'(s(fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',X42),X42))),happ(s(fun(X43,fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',X42),X42)))),'_dst_x1x0_2'(s(fun(X43,fun('type.num.num',fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',X42),X42))))),X44),s('type.num.num',X46))),s(X43,X45))),s(fun('type.num.num','type.ind_type.recspace'(X41)),X48))),s(X41,X47))),s(fun('type.num.num',X42),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X41),X42),sK8(happ(s(fun(X43,fun('type.num.num',fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',X42),X42))))),X44),s(X43,X45)),X41,X42)),s(fun('type.num.num','type.ind_type.recspace'(X41)),X48)))))) )),
  inference(superposition,[],[f346,f334])).
fof(f54940,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s(X34,happ(s(fun('type.ind_type.recspace'(X33),X34),sK8('_dst_x0x1_2'(s(fun(X35,fun(X33,fun(fun('type.num.num','type.ind_type.recspace'(X33)),fun(fun('type.num.num',X34),X34)))),X36),s(fun('type.num.num',X35),X37)),X33,X34)),s('type.ind_type.recspace'(X33),'const.ind_type.CONSTR_3'(s('type.num.num',X38),s(X33,X39),s(fun('type.num.num','type.ind_type.recspace'(X33)),X40))))) = s(X34,happ(s(fun(fun('type.num.num',X34),X34),happ(s(fun(X33,fun(fun('type.num.num',X34),X34)),'_dst_x1x0_2'(s(fun(X33,fun(fun('type.num.num','type.ind_type.recspace'(X33)),fun(fun('type.num.num',X34),X34))),happ(s(fun(X35,fun(X33,fun(fun('type.num.num','type.ind_type.recspace'(X33)),fun(fun('type.num.num',X34),X34)))),X36),s(X35,happ(s(fun('type.num.num',X35),X37),s('type.num.num',X38))))),s(fun('type.num.num','type.ind_type.recspace'(X33)),X40))),s(X33,X39))),s(fun('type.num.num',X34),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X33),X34),sK8('_dst_x0x1_2'(s(fun(X35,fun(X33,fun(fun('type.num.num','type.ind_type.recspace'(X33)),fun(fun('type.num.num',X34),X34)))),X36),s(fun('type.num.num',X35),X37)),X33,X34)),s(fun('type.num.num','type.ind_type.recspace'(X33)),X40)))))) )),
  inference(superposition,[],[f346,f333])).
fof(f54939,plain,(
  ( ! [X26,X24,X23,X21,X25,X22,X20] : (s(X21,happ(s(fun('type.ind_type.recspace'(X20),X21),sK8(happ(s(fun(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))))),'_dst_x1x0_2'(s(fun(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),fun(fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))),fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))),X22))),s(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),X23)),X20,X21)),s('type.ind_type.recspace'(X20),'const.ind_type.CONSTR_3'(s('type.num.num',X24),s(X20,X25),s(fun('type.num.num','type.ind_type.recspace'(X20)),X26))))) = s(X21,happ(s(fun(fun('type.num.num',X21),X21),happ(s(fun(X20,fun(fun('type.num.num',X21),X21)),'_dst_x1x0_2'(s(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),'const.ind_type.FCONS_3'(s(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),X23),s(fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))),X22),s('type.num.num',X24))),s(fun('type.num.num','type.ind_type.recspace'(X20)),X26))),s(X20,X25))),s(fun('type.num.num',X21),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X20),X21),sK8(happ(s(fun(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))))),'_dst_x1x0_2'(s(fun(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),fun(fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))),fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21)))),X22))),s(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),X23)),X20,X21)),s(fun('type.num.num','type.ind_type.recspace'(X20)),X26)))))) )),
  inference(superposition,[],[f346,f347])).
fof(f54938,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s(X11,happ(s(fun('type.ind_type.recspace'(X10),X11),sK8('_dst_x00x01x11_3'(s(fun(X12,fun(X13,fun(fun('type.num.num','type.ind_type.recspace'(X10)),fun(fun('type.num.num',X11),X11)))),X14),s(fun(X10,X12),X15),s(fun('type.num.num',fun(X10,X13)),X16)),X10,X11)),s('type.ind_type.recspace'(X10),'const.ind_type.CONSTR_3'(s('type.num.num',X17),s(X10,X18),s(fun('type.num.num','type.ind_type.recspace'(X10)),X19))))) = s(X11,happ(s(fun(fun('type.num.num',X11),X11),happ(s(fun(X10,fun(fun('type.num.num',X11),X11)),'_dst_x1x0_2'(s(fun(X10,fun(fun('type.num.num','type.ind_type.recspace'(X10)),fun(fun('type.num.num',X11),X11))),'_dst_x0x1x1_3'(s(fun(X12,fun(X13,fun(fun('type.num.num','type.ind_type.recspace'(X10)),fun(fun('type.num.num',X11),X11)))),X14),s(fun(X10,X12),X15),s(fun(X10,X13),happ(s(fun('type.num.num',fun(X10,X13)),X16),s('type.num.num',X17))))),s(fun('type.num.num','type.ind_type.recspace'(X10)),X19))),s(X10,X18))),s(fun('type.num.num',X11),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X10),X11),sK8('_dst_x00x01x11_3'(s(fun(X12,fun(X13,fun(fun('type.num.num','type.ind_type.recspace'(X10)),fun(fun('type.num.num',X11),X11)))),X14),s(fun(X10,X12),X15),s(fun('type.num.num',fun(X10,X13)),X16)),X10,X11)),s(fun('type.num.num','type.ind_type.recspace'(X10)),X19)))))) )),
  inference(superposition,[],[f346,f338])).
fof(f54937,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(X1,happ(s(fun('type.ind_type.recspace'(X0),X1),sK8('_dst_x00x10x01_3'(s(fun(X2,fun(X3,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),X4),s(fun('type.num.num',X2),X5),s(fun(X0,X3),X6)),X0,X1)),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X7),s(X0,X8),s(fun('type.num.num','type.ind_type.recspace'(X0)),X9))))) = s(X1,happ(s(fun(fun('type.num.num',X1),X1),happ(s(fun(X0,fun(fun('type.num.num',X1),X1)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),X4),s(X2,happ(s(fun('type.num.num',X2),X5),s('type.num.num',X7))),s(fun(X0,X3),X6))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X9))),s(X0,X8))),s(fun('type.num.num',X1),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),X1),sK8('_dst_x00x10x01_3'(s(fun(X2,fun(X3,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),X4),s(fun('type.num.num',X2),X5),s(fun(X0,X3),X6)),X0,X1)),s(fun('type.num.num','type.ind_type.recspace'(X0)),X9)))))) )),
  inference(superposition,[],[f346,f337])).
fof(f54906,plain,(
  ( ! [X261,X257,X259,X260,X262,X256,X258] : (s(X257,happ(s(fun('type.ind_type.recspace'(X256),X257),sK8(sK3(X258,X259,fun('type.num.num',fun(X256,fun(fun('type.num.num','type.ind_type.recspace'(X256)),fun(fun('type.num.num',X257),X257))))),X256,X257)),s('type.ind_type.recspace'(X256),'const.ind_type.CONSTR_3'(s('type.num.num',X260),s(X256,X261),s(fun('type.num.num','type.ind_type.recspace'(X256)),X262))))) = s(X257,happ(s(fun(fun('type.num.num',X257),X257),happ(s(fun(X256,fun(fun('type.num.num',X257),X257)),'_dst_x1x0_2'(s(fun(X256,fun(fun('type.num.num','type.ind_type.recspace'(X256)),fun(fun('type.num.num',X257),X257))),happ(s(fun('type.num.num',fun(X256,fun(fun('type.num.num','type.ind_type.recspace'(X256)),fun(fun('type.num.num',X257),X257)))),X258),s('type.num.num',X260))),s(fun('type.num.num','type.ind_type.recspace'(X256)),X262))),s(X256,X261))),s(fun('type.num.num',X257),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X256),X257),sK8(sK3(X258,X259,fun('type.num.num',fun(X256,fun(fun('type.num.num','type.ind_type.recspace'(X256)),fun(fun('type.num.num',X257),X257))))),X256,X257)),s(fun('type.num.num','type.ind_type.recspace'(X256)),X262))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun('type.num.num',fun(X256,fun(fun('type.num.num','type.ind_type.recspace'(X256)),fun(fun('type.num.num',X257),X257)))),bool),X259)))) )),
  inference(superposition,[],[f346,f565])).
fof(f54905,plain,(
  ( ! [X255,X253,X251,X249,X246,X254,X252,X250,X248,X247] : (s(X247,happ(s(fun('type.ind_type.recspace'(X246),X247),sK8('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X248),'const.wordSem.Loc_2'(s('type.num.num',X249),s('type.num.num',X250))),s(fun('type.fcp.cart'(bool,X248),fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247))))),X251),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247)))))),X252)),X246,X247)),s('type.ind_type.recspace'(X246),'const.ind_type.CONSTR_3'(s('type.num.num',X253),s(X246,X254),s(fun('type.num.num','type.ind_type.recspace'(X246)),X255))))) = s(X247,happ(s(fun(fun('type.num.num',X247),X247),happ(s(fun(X246,fun(fun('type.num.num',X247),X247)),'_dst_x1x0_2'(s(fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247))),happ(s(fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247)))),happ(s(fun('type.num.num',fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247)))))),X252),s('type.num.num',X249))),s('type.num.num',X250))),s('type.num.num',X253))),s(fun('type.num.num','type.ind_type.recspace'(X246)),X255))),s(X246,X254))),s(fun('type.num.num',X247),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X246),X247),sK8('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X248),'const.wordSem.Loc_2'(s('type.num.num',X249),s('type.num.num',X250))),s(fun('type.fcp.cart'(bool,X248),fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247))))),X251),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',fun(X246,fun(fun('type.num.num','type.ind_type.recspace'(X246)),fun(fun('type.num.num',X247),X247)))))),X252)),X246,X247)),s(fun('type.num.num','type.ind_type.recspace'(X246)),X255)))))) )),
  inference(superposition,[],[f346,f324])).
fof(f54904,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X245] : (s(X238,happ(s(fun('type.ind_type.recspace'(X237),X238),sK8('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X239),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X239),X240))),s(fun('type.fcp.cart'(bool,X239),fun('type.num.num',fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238))))),X241),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238)))))),X242)),X237,X238)),s('type.ind_type.recspace'(X237),'const.ind_type.CONSTR_3'(s('type.num.num',X243),s(X237,X244),s(fun('type.num.num','type.ind_type.recspace'(X237)),X245))))) = s(X238,happ(s(fun(fun('type.num.num',X238),X238),happ(s(fun(X237,fun(fun('type.num.num',X238),X238)),'_dst_x1x0_2'(s(fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238))),happ(s(fun('type.num.num',fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238)))),happ(s(fun('type.fcp.cart'(bool,X239),fun('type.num.num',fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238))))),X241),s('type.fcp.cart'(bool,X239),X240))),s('type.num.num',X243))),s(fun('type.num.num','type.ind_type.recspace'(X237)),X245))),s(X237,X244))),s(fun('type.num.num',X238),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X237),X238),sK8('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X239),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X239),X240))),s(fun('type.fcp.cart'(bool,X239),fun('type.num.num',fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238))))),X241),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',fun(X237,fun(fun('type.num.num','type.ind_type.recspace'(X237)),fun(fun('type.num.num',X238),X238)))))),X242)),X237,X238)),s(fun('type.num.num','type.ind_type.recspace'(X237)),X245)))))) )),
  inference(superposition,[],[f346,f323])).
fof(f54903,plain,(
  ( ! [X231,X229,X227,X225,X235,X233,X230,X228,X226,X236,X234,X232] : (s(X226,happ(s(fun('type.ind_type.recspace'(X225),X226),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X227),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X227),X228))),s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X229),s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X230),s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X231),s(fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226)))),X232),s(fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226)))),X233)),X225,X226)),s('type.ind_type.recspace'(X225),'const.ind_type.CONSTR_3'(s('type.num.num',X234),s(X225,X235),s(fun('type.num.num','type.ind_type.recspace'(X225)),X236))))) = s(X226,happ(s(fun(fun('type.num.num',X226),X226),happ(s(fun(X225,fun(fun('type.num.num',X226),X226)),'_dst_x1x0_2'(s(fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))),happ(s(fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226)))),happ(s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X230),s('type.wordSem.word_loc'(X227),X228))),s('type.num.num',X234))),s(fun('type.num.num','type.ind_type.recspace'(X225)),X236))),s(X225,X235))),s(fun('type.num.num',X226),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X225),X226),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X227),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X227),X228))),s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X229),s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X230),s(fun('type.wordSem.word_loc'(X227),fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226))))),X231),s(fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226)))),X232),s(fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',X226),X226)))),X233)),X225,X226)),s(fun('type.num.num','type.ind_type.recspace'(X225)),X236)))))) )),
  inference(superposition,[],[f346,f329])).
fof(f54902,plain,(
  ( ! [X218,X216,X222,X220,X215,X213,X219,X217,X223,X221,X224,X214] : (s(X214,happ(s(fun('type.ind_type.recspace'(X213),X214),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X215),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X215),X216))),s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X217),s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X218),s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X219),s(fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214)))),X220),s(fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214)))),X221)),X213,X214)),s('type.ind_type.recspace'(X213),'const.ind_type.CONSTR_3'(s('type.num.num',X222),s(X213,X223),s(fun('type.num.num','type.ind_type.recspace'(X213)),X224))))) = s(X214,happ(s(fun(fun('type.num.num',X214),X214),happ(s(fun(X213,fun(fun('type.num.num',X214),X214)),'_dst_x1x0_2'(s(fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))),happ(s(fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214)))),happ(s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X217),s('type.wordSem.word_loc'(X215),X216))),s('type.num.num',X222))),s(fun('type.num.num','type.ind_type.recspace'(X213)),X224))),s(X213,X223))),s(fun('type.num.num',X214),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X213),X214),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X215),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X215),X216))),s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X217),s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X218),s(fun('type.wordSem.word_loc'(X215),fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214))))),X219),s(fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214)))),X220),s(fun('type.num.num',fun(X213,fun(fun('type.num.num','type.ind_type.recspace'(X213)),fun(fun('type.num.num',X214),X214)))),X221)),X213,X214)),s(fun('type.num.num','type.ind_type.recspace'(X213)),X224)))))) )),
  inference(superposition,[],[f346,f328])).
fof(f54901,plain,(
  ( ! [X212,X210,X208,X206,X204,X202,X211,X209,X207,X205,X203,X201] : (s(X202,happ(s(fun('type.ind_type.recspace'(X201),X202),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X203),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X203),X204))),s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X205),s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X206),s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X207),s(fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202)))),X208),s(fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202)))),X209)),X201,X202)),s('type.ind_type.recspace'(X201),'const.ind_type.CONSTR_3'(s('type.num.num',X210),s(X201,X211),s(fun('type.num.num','type.ind_type.recspace'(X201)),X212))))) = s(X202,happ(s(fun(fun('type.num.num',X202),X202),happ(s(fun(X201,fun(fun('type.num.num',X202),X202)),'_dst_x1x0_2'(s(fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))),happ(s(fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202)))),happ(s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X207),s('type.wordSem.word_loc'(X203),X204))),s('type.num.num',X210))),s(fun('type.num.num','type.ind_type.recspace'(X201)),X212))),s(X201,X211))),s(fun('type.num.num',X202),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X201),X202),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X203),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X203),X204))),s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X205),s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X206),s(fun('type.wordSem.word_loc'(X203),fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202))))),X207),s(fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202)))),X208),s(fun('type.num.num',fun(X201,fun(fun('type.num.num','type.ind_type.recspace'(X201)),fun(fun('type.num.num',X202),X202)))),X209)),X201,X202)),s(fun('type.num.num','type.ind_type.recspace'(X201)),X212)))))) )),
  inference(superposition,[],[f346,f327])).
fof(f54900,plain,(
  ( ! [X191,X198,X196,X194,X192,X200,X190,X199,X197,X195,X193] : (s(X191,happ(s(fun('type.ind_type.recspace'(X190),X191),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X192),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X192),fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))))),X193),s(fun('type.wordSem.word_loc'(X192),fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))))),X194),s(fun('type.wordSem.word_loc'(X192),fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))))),X195),s(fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191)))),X196),s(fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191)))),X197)),X190,X191)),s('type.ind_type.recspace'(X190),'const.ind_type.CONSTR_3'(s('type.num.num',X198),s(X190,X199),s(fun('type.num.num','type.ind_type.recspace'(X190)),X200))))) = s(X191,happ(s(fun(fun('type.num.num',X191),X191),happ(s(fun(X190,fun(fun('type.num.num',X191),X191)),'_dst_x1x0_2'(s(fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))),happ(s(fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191)))),X196),s('type.num.num',X198))),s(fun('type.num.num','type.ind_type.recspace'(X190)),X200))),s(X190,X199))),s(fun('type.num.num',X191),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X190),X191),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X192),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X192),fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))))),X193),s(fun('type.wordSem.word_loc'(X192),fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))))),X194),s(fun('type.wordSem.word_loc'(X192),fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191))))),X195),s(fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191)))),X196),s(fun('type.num.num',fun(X190,fun(fun('type.num.num','type.ind_type.recspace'(X190)),fun(fun('type.num.num',X191),X191)))),X197)),X190,X191)),s(fun('type.num.num','type.ind_type.recspace'(X190)),X200)))))) )),
  inference(superposition,[],[f346,f326])).
fof(f54899,plain,(
  ( ! [X189,X187,X185,X182,X180,X188,X186,X184,X183,X181,X179] : (s(X180,happ(s(fun('type.ind_type.recspace'(X179),X180),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X181),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X181),fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))))),X182),s(fun('type.wordSem.word_loc'(X181),fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))))),X183),s(fun('type.wordSem.word_loc'(X181),fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))))),X184),s(fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180)))),X185),s(fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180)))),X186)),X179,X180)),s('type.ind_type.recspace'(X179),'const.ind_type.CONSTR_3'(s('type.num.num',X187),s(X179,X188),s(fun('type.num.num','type.ind_type.recspace'(X179)),X189))))) = s(X180,happ(s(fun(fun('type.num.num',X180),X180),happ(s(fun(X179,fun(fun('type.num.num',X180),X180)),'_dst_x1x0_2'(s(fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))),happ(s(fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180)))),X186),s('type.num.num',X187))),s(fun('type.num.num','type.ind_type.recspace'(X179)),X189))),s(X179,X188))),s(fun('type.num.num',X180),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X179),X180),sK8('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X181),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X181),fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))))),X182),s(fun('type.wordSem.word_loc'(X181),fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))))),X183),s(fun('type.wordSem.word_loc'(X181),fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180))))),X184),s(fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180)))),X185),s(fun('type.num.num',fun(X179,fun(fun('type.num.num','type.ind_type.recspace'(X179)),fun(fun('type.num.num',X180),X180)))),X186)),X179,X180)),s(fun('type.num.num','type.ind_type.recspace'(X179)),X189)))))) )),
  inference(superposition,[],[f346,f325])).
fof(f54898,plain,(
  ( ! [X177,X175,X173,X171,X178,X176,X174,X172] : (s(X172,happ(s(fun('type.ind_type.recspace'(X171),X172),sK8('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172)))),X173),s(fun('type.num.num',fun('type.num.num',fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172))))),X174),s('type.num.num','const.num.SUC_1'(s('type.num.num',X175)))),X171,X172)),s('type.ind_type.recspace'(X171),'const.ind_type.CONSTR_3'(s('type.num.num',X176),s(X171,X177),s(fun('type.num.num','type.ind_type.recspace'(X171)),X178))))) = s(X172,happ(s(fun(fun('type.num.num',X172),X172),happ(s(fun(X171,fun(fun('type.num.num',X172),X172)),'_dst_x1x0_2'(s(fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172))),happ(s(fun('type.num.num',fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172)))),happ(s(fun('type.num.num',fun('type.num.num',fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172))))),X174),s('type.num.num',X175))),s('type.num.num',X176))),s(fun('type.num.num','type.ind_type.recspace'(X171)),X178))),s(X171,X177))),s(fun('type.num.num',X172),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X171),X172),sK8('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172)))),X173),s(fun('type.num.num',fun('type.num.num',fun(X171,fun(fun('type.num.num','type.ind_type.recspace'(X171)),fun(fun('type.num.num',X172),X172))))),X174),s('type.num.num','const.num.SUC_1'(s('type.num.num',X175)))),X171,X172)),s(fun('type.num.num','type.ind_type.recspace'(X171)),X178)))))) )),
  inference(superposition,[],[f346,f298])).
fof(f54897,plain,(
  ( ! [X167,X165,X169,X166,X164,X170,X168] : (s(X165,happ(s(fun('type.ind_type.recspace'(X164),X165),sK8('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',X165),X165)))),X166),s(fun('type.num.num',fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',X165),X165))))),X167),s('type.num.num','const.num.|48|_0')),X164,X165)),s('type.ind_type.recspace'(X164),'const.ind_type.CONSTR_3'(s('type.num.num',X168),s(X164,X169),s(fun('type.num.num','type.ind_type.recspace'(X164)),X170))))) = s(X165,happ(s(fun(fun('type.num.num',X165),X165),happ(s(fun(X164,fun(fun('type.num.num',X165),X165)),'_dst_x1x0_2'(s(fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',X165),X165))),happ(s(fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',X165),X165)))),X166),s('type.num.num',X168))),s(fun('type.num.num','type.ind_type.recspace'(X164)),X170))),s(X164,X169))),s(fun('type.num.num',X165),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X164),X165),sK8('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',X165),X165)))),X166),s(fun('type.num.num',fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',X165),X165))))),X167),s('type.num.num','const.num.|48|_0')),X164,X165)),s(fun('type.num.num','type.ind_type.recspace'(X164)),X170)))))) )),
  inference(superposition,[],[f346,f284])).
fof(f54896,plain,(
  ( ! [X158,X156,X163,X161,X159,X157,X162,X160] : (s(X157,happ(s(fun('type.ind_type.recspace'(X156),X157),sK8(happ(s(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),happ(s(fun(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))))),'_dst_x1x0_2'(s(fun(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),fun(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),X158))),s(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),X159))),s('type.num.num',X160)),X156,X157)),s('type.ind_type.recspace'(X156),'const.ind_type.CONSTR_3'(s('type.num.num',X161),s(X156,X162),s(fun('type.num.num','type.ind_type.recspace'(X156)),X163))))) = s(X157,happ(s(fun(fun('type.num.num',X157),X157),happ(s(fun(X156,fun(fun('type.num.num',X157),X157)),'_dst_x1x0_2'(s(fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))),happ(s(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),'const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),X159),s(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),X158),s('type.num.num',X160))),s('type.num.num',X161))),s(fun('type.num.num','type.ind_type.recspace'(X156)),X163))),s(X156,X162))),s(fun('type.num.num',X157),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X156),X157),sK8(happ(s(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),happ(s(fun(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))))),'_dst_x1x0_2'(s(fun(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),fun(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157))))),X158))),s(fun('type.num.num',fun(X156,fun(fun('type.num.num','type.ind_type.recspace'(X156)),fun(fun('type.num.num',X157),X157)))),X159))),s('type.num.num',X160)),X156,X157)),s(fun('type.num.num','type.ind_type.recspace'(X156)),X163)))))) )),
  inference(superposition,[],[f346,f347])).
fof(f54895,plain,(
  ( ! [X146,X154,X152,X151,X149,X147,X155,X153,X150,X148] : (s(X147,happ(s(fun('type.ind_type.recspace'(X146),X147),sK8(happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),happ(s(fun(X148,fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))),'_dst_x1x0_2'(s(fun(X148,fun(fun('type.num.num','type.ind_type.recspace'(X148)),fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))))),happ(s(fun('type.num.num',fun(X148,fun(fun('type.num.num','type.ind_type.recspace'(X148)),fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))))),X149),s('type.num.num',X150))),s(fun('type.num.num','type.ind_type.recspace'(X148)),X151))),s(X148,X152))),s(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X148),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),sK8(X149,X148,fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))),s(fun('type.num.num','type.ind_type.recspace'(X148)),X151)))),X146,X147)),s('type.ind_type.recspace'(X146),'const.ind_type.CONSTR_3'(s('type.num.num',X153),s(X146,X154),s(fun('type.num.num','type.ind_type.recspace'(X146)),X155))))) = s(X147,happ(s(fun(fun('type.num.num',X147),X147),happ(s(fun(X146,fun(fun('type.num.num',X147),X147)),'_dst_x1x0_2'(s(fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))),happ(s(fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))),happ(s(fun('type.ind_type.recspace'(X148),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),sK8(X149,X148,fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))),s('type.ind_type.recspace'(X148),'const.ind_type.CONSTR_3'(s('type.num.num',X150),s(X148,X152),s(fun('type.num.num','type.ind_type.recspace'(X148)),X151))))),s('type.num.num',X153))),s(fun('type.num.num','type.ind_type.recspace'(X146)),X155))),s(X146,X154))),s(fun('type.num.num',X147),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X146),X147),sK8(happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),happ(s(fun(X148,fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))),'_dst_x1x0_2'(s(fun(X148,fun(fun('type.num.num','type.ind_type.recspace'(X148)),fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))))),happ(s(fun('type.num.num',fun(X148,fun(fun('type.num.num','type.ind_type.recspace'(X148)),fun(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))))),X149),s('type.num.num',X150))),s(fun('type.num.num','type.ind_type.recspace'(X148)),X151))),s(X148,X152))),s(fun('type.num.num',fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X148),fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),sK8(X149,X148,fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))))),s(fun('type.num.num','type.ind_type.recspace'(X148)),X151)))),X146,X147)),s(fun('type.num.num','type.ind_type.recspace'(X146)),X155)))))) )),
  inference(superposition,[],[f346,f346])).
fof(f54894,plain,(
  ( ! [X144,X142,X140,X138,X145,X143,X141,X139] : (s(X139,happ(s(fun('type.ind_type.recspace'(X138),X139),sK8(happ(s(fun(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),'_dstsel_0_x0_1'(s(X140,X141))),s(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),X142)),X138,X139)),s('type.ind_type.recspace'(X138),'const.ind_type.CONSTR_3'(s('type.num.num',X143),s(X138,X144),s(fun('type.num.num','type.ind_type.recspace'(X138)),X145))))) = s(X139,happ(s(fun(fun('type.num.num',X139),X139),happ(s(fun(X138,fun(fun('type.num.num',X139),X139)),'_dst_x1x0_2'(s(fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))),happ(s(fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139)))),happ(s(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),X142),s(X140,X141))),s('type.num.num',X143))),s(fun('type.num.num','type.ind_type.recspace'(X138)),X145))),s(X138,X144))),s(fun('type.num.num',X139),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X138),X139),sK8(happ(s(fun(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),'_dstsel_0_x0_1'(s(X140,X141))),s(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),X142)),X138,X139)),s(fun('type.num.num','type.ind_type.recspace'(X138)),X145)))))) )),
  inference(superposition,[],[f346,f321])).
fof(f54893,plain,(
  ( ! [X127,X134,X132,X130,X128,X136,X126,X135,X133,X131,X129,X137] : (s(X127,happ(s(fun('type.ind_type.recspace'(X126),X127),sK8(happ(s(fun(X128,fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127))))),'_dst_x0x0x1_3'(s(fun(X129,fun(X130,fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127)))))),X131),s(X129,X132),s(fun(X128,X130),X133))),s(X128,X134)),X126,X127)),s('type.ind_type.recspace'(X126),'const.ind_type.CONSTR_3'(s('type.num.num',X135),s(X126,X136),s(fun('type.num.num','type.ind_type.recspace'(X126)),X137))))) = s(X127,happ(s(fun(fun('type.num.num',X127),X127),happ(s(fun(X126,fun(fun('type.num.num',X127),X127)),'_dst_x1x0_2'(s(fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127))),happ(s(fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127)))),happ(s(fun(X130,fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127))))),happ(s(fun(X129,fun(X130,fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127)))))),X131),s(X129,X132))),s(X130,happ(s(fun(X128,X130),X133),s(X128,X134))))),s('type.num.num',X135))),s(fun('type.num.num','type.ind_type.recspace'(X126)),X137))),s(X126,X136))),s(fun('type.num.num',X127),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X126),X127),sK8(happ(s(fun(X128,fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127))))),'_dst_x0x0x1_3'(s(fun(X129,fun(X130,fun('type.num.num',fun(X126,fun(fun('type.num.num','type.ind_type.recspace'(X126)),fun(fun('type.num.num',X127),X127)))))),X131),s(X129,X132),s(fun(X128,X130),X133))),s(X128,X134)),X126,X127)),s(fun('type.num.num','type.ind_type.recspace'(X126)),X137)))))) )),
  inference(superposition,[],[f346,f335])).
fof(f54892,plain,(
  ( ! [X125,X123,X121,X118,X116,X124,X122,X120,X119,X117] : (s(X117,happ(s(fun('type.ind_type.recspace'(X116),X117),sK8(happ(s(fun(X118,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),'_dst_x1x0_2'(s(fun(X118,fun(X119,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117)))))),X120),s(X119,X121))),s(X118,X122)),X116,X117)),s('type.ind_type.recspace'(X116),'const.ind_type.CONSTR_3'(s('type.num.num',X123),s(X116,X124),s(fun('type.num.num','type.ind_type.recspace'(X116)),X125))))) = s(X117,happ(s(fun(fun('type.num.num',X117),X117),happ(s(fun(X116,fun(fun('type.num.num',X117),X117)),'_dst_x1x0_2'(s(fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))),happ(s(fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117)))),happ(s(fun(X119,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),happ(s(fun(X118,fun(X119,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117)))))),X120),s(X118,X122))),s(X119,X121))),s('type.num.num',X123))),s(fun('type.num.num','type.ind_type.recspace'(X116)),X125))),s(X116,X124))),s(fun('type.num.num',X117),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X116),X117),sK8(happ(s(fun(X118,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),'_dst_x1x0_2'(s(fun(X118,fun(X119,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117)))))),X120),s(X119,X121))),s(X118,X122)),X116,X117)),s(fun('type.num.num','type.ind_type.recspace'(X116)),X125)))))) )),
  inference(superposition,[],[f346,f334])).
fof(f54891,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X115,X113] : (s(X109,happ(s(fun('type.ind_type.recspace'(X108),X109),sK8(happ(s(fun(X110,fun('type.num.num',fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X109),X109))))),'_dst_x0_1'(s(fun('type.num.num',fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X109),X109)))),X111))),s(X110,X112)),X108,X109)),s('type.ind_type.recspace'(X108),'const.ind_type.CONSTR_3'(s('type.num.num',X113),s(X108,X114),s(fun('type.num.num','type.ind_type.recspace'(X108)),X115))))) = s(X109,happ(s(fun(fun('type.num.num',X109),X109),happ(s(fun(X108,fun(fun('type.num.num',X109),X109)),'_dst_x1x0_2'(s(fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X109),X109))),happ(s(fun('type.num.num',fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X109),X109)))),X111),s('type.num.num',X113))),s(fun('type.num.num','type.ind_type.recspace'(X108)),X115))),s(X108,X114))),s(fun('type.num.num',X109),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X108),X109),sK8(happ(s(fun(X110,fun('type.num.num',fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X109),X109))))),'_dst_x0_1'(s(fun('type.num.num',fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X109),X109)))),X111))),s(X110,X112)),X108,X109)),s(fun('type.num.num','type.ind_type.recspace'(X108)),X115)))))) )),
  inference(superposition,[],[f346,f320])).
fof(f54890,plain,(
  ( ! [X103,X101,X99,X97,X107,X105,X102,X100,X98,X96,X106,X104] : (s(X97,happ(s(fun('type.ind_type.recspace'(X96),X97),sK8(happ(s(fun(X98,fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))))),happ(s(fun(X99,fun(X98,fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))))),X100),s(X99,happ(s(fun(X101,X99),X102),s(X101,X103))))),s(X98,happ(s(fun(X101,X98),X104),s(X101,X103)))),X96,X97)),s('type.ind_type.recspace'(X96),'const.ind_type.CONSTR_3'(s('type.num.num',X105),s(X96,X106),s(fun('type.num.num','type.ind_type.recspace'(X96)),X107))))) = s(X97,happ(s(fun(fun('type.num.num',X97),X97),happ(s(fun(X96,fun(fun('type.num.num',X97),X97)),'_dst_x1x0_2'(s(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),happ(s(fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))),happ(s(fun(X101,fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))))),'_dst_x0x1x1_3'(s(fun(X99,fun(X98,fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))))),X100),s(fun(X101,X99),X102),s(fun(X101,X98),X104))),s(X101,X103))),s('type.num.num',X105))),s(fun('type.num.num','type.ind_type.recspace'(X96)),X107))),s(X96,X106))),s(fun('type.num.num',X97),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X96),X97),sK8(happ(s(fun(X98,fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))))),happ(s(fun(X99,fun(X98,fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))))),X100),s(X99,happ(s(fun(X101,X99),X102),s(X101,X103))))),s(X98,happ(s(fun(X101,X98),X104),s(X101,X103)))),X96,X97)),s(fun('type.num.num','type.ind_type.recspace'(X96)),X107)))))) )),
  inference(superposition,[],[f346,f336])).
fof(f54889,plain,(
  ( ! [X94,X92,X90,X88,X87,X85,X95,X93,X91,X89,X86,X84] : (s(X85,happ(s(fun('type.ind_type.recspace'(X84),X85),sK8(happ(s(fun(X86,fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85))))),happ(s(fun(X87,fun(X86,fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85)))))),X88),s(X87,X89))),s(X86,happ(s(fun(X90,X86),X91),s(X90,X92)))),X84,X85)),s('type.ind_type.recspace'(X84),'const.ind_type.CONSTR_3'(s('type.num.num',X93),s(X84,X94),s(fun('type.num.num','type.ind_type.recspace'(X84)),X95))))) = s(X85,happ(s(fun(fun('type.num.num',X85),X85),happ(s(fun(X84,fun(fun('type.num.num',X85),X85)),'_dst_x1x0_2'(s(fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85))),happ(s(fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85)))),happ(s(fun(X90,fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85))))),'_dst_x0x0x1_3'(s(fun(X87,fun(X86,fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85)))))),X88),s(X87,X89),s(fun(X90,X86),X91))),s(X90,X92))),s('type.num.num',X93))),s(fun('type.num.num','type.ind_type.recspace'(X84)),X95))),s(X84,X94))),s(fun('type.num.num',X85),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X84),X85),sK8(happ(s(fun(X86,fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85))))),happ(s(fun(X87,fun(X86,fun('type.num.num',fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X84)),fun(fun('type.num.num',X85),X85)))))),X88),s(X87,X89))),s(X86,happ(s(fun(X90,X86),X91),s(X90,X92)))),X84,X85)),s(fun('type.num.num','type.ind_type.recspace'(X84)),X95)))))) )),
  inference(superposition,[],[f346,f335])).
fof(f54888,plain,(
  ( ! [X80,X78,X76,X74,X83,X81,X79,X77,X75,X82] : (s(X75,happ(s(fun('type.ind_type.recspace'(X74),X75),sK8(happ(s(fun(X76,fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),happ(s(fun(X77,fun(X76,fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))))),X78),s(X77,X79))),s(X76,X80)),X74,X75)),s('type.ind_type.recspace'(X74),'const.ind_type.CONSTR_3'(s('type.num.num',X81),s(X74,X82),s(fun('type.num.num','type.ind_type.recspace'(X74)),X83))))) = s(X75,happ(s(fun(fun('type.num.num',X75),X75),happ(s(fun(X74,fun(fun('type.num.num',X75),X75)),'_dst_x1x0_2'(s(fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))),happ(s(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),happ(s(fun(X77,fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),'_dst_x1x0_2'(s(fun(X77,fun(X76,fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))))),X78),s(X76,X80))),s(X77,X79))),s('type.num.num',X81))),s(fun('type.num.num','type.ind_type.recspace'(X74)),X83))),s(X74,X82))),s(fun('type.num.num',X75),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X74),X75),sK8(happ(s(fun(X76,fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),happ(s(fun(X77,fun(X76,fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))))),X78),s(X77,X79))),s(X76,X80)),X74,X75)),s(fun('type.num.num','type.ind_type.recspace'(X74)),X83)))))) )),
  inference(superposition,[],[f346,f334])).
fof(f54887,plain,(
  ( ! [X70,X68,X66,X64,X72,X71,X69,X67,X65,X73] : (s(X65,happ(s(fun('type.ind_type.recspace'(X64),X65),sK8(happ(s(fun(X66,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),'_dst_x0x1_2'(s(fun(X67,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),X68),s(fun(X66,X67),X69))),s(X66,X70)),X64,X65)),s('type.ind_type.recspace'(X64),'const.ind_type.CONSTR_3'(s('type.num.num',X71),s(X64,X72),s(fun('type.num.num','type.ind_type.recspace'(X64)),X73))))) = s(X65,happ(s(fun(fun('type.num.num',X65),X65),happ(s(fun(X64,fun(fun('type.num.num',X65),X65)),'_dst_x1x0_2'(s(fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))),happ(s(fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))),happ(s(fun(X67,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),X68),s(X67,happ(s(fun(X66,X67),X69),s(X66,X70))))),s('type.num.num',X71))),s(fun('type.num.num','type.ind_type.recspace'(X64)),X73))),s(X64,X72))),s(fun('type.num.num',X65),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X64),X65),sK8(happ(s(fun(X66,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),'_dst_x0x1_2'(s(fun(X67,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),X68),s(fun(X66,X67),X69))),s(X66,X70)),X64,X65)),s(fun('type.num.num','type.ind_type.recspace'(X64)),X73)))))) )),
  inference(superposition,[],[f346,f333])).
fof(f54886,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55,X63] : (s(X55,happ(s(fun('type.ind_type.recspace'(X54),X55),sK8(happ(s(fun(X56,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),X57),s(X56,happ(s(fun(X58,X56),X59),s(X58,X60)))),X54,X55)),s('type.ind_type.recspace'(X54),'const.ind_type.CONSTR_3'(s('type.num.num',X61),s(X54,X62),s(fun('type.num.num','type.ind_type.recspace'(X54)),X63))))) = s(X55,happ(s(fun(fun('type.num.num',X55),X55),happ(s(fun(X54,fun(fun('type.num.num',X55),X55)),'_dst_x1x0_2'(s(fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))),happ(s(fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55)))),happ(s(fun(X58,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),'_dst_x0x1_2'(s(fun(X56,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),X57),s(fun(X58,X56),X59))),s(X58,X60))),s('type.num.num',X61))),s(fun('type.num.num','type.ind_type.recspace'(X54)),X63))),s(X54,X62))),s(fun('type.num.num',X55),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X54),X55),sK8(happ(s(fun(X56,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),X57),s(X56,happ(s(fun(X58,X56),X59),s(X58,X60)))),X54,X55)),s(fun('type.num.num','type.ind_type.recspace'(X54)),X63)))))) )),
  inference(superposition,[],[f346,f333])).
fof(f54885,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s(X49,happ(s(fun('type.ind_type.recspace'(X48),X49),sK8(happ(s(fun(fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))))),'_i_0_0'),s(fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),X50)),X48,X49)),s('type.ind_type.recspace'(X48),'const.ind_type.CONSTR_3'(s('type.num.num',X51),s(X48,X52),s(fun('type.num.num','type.ind_type.recspace'(X48)),X53))))) = s(X49,happ(s(fun(fun('type.num.num',X49),X49),happ(s(fun(X48,fun(fun('type.num.num',X49),X49)),'_dst_x1x0_2'(s(fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))),happ(s(fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),X50),s('type.num.num',X51))),s(fun('type.num.num','type.ind_type.recspace'(X48)),X53))),s(X48,X52))),s(fun('type.num.num',X49),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X48),X49),sK8(happ(s(fun(fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))))),'_i_0_0'),s(fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),X50)),X48,X49)),s(fun('type.num.num','type.ind_type.recspace'(X48)),X53)))))) )),
  inference(superposition,[],[f346,f271])).
fof(f54884,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(X37,happ(s(fun('type.ind_type.recspace'(X36),X37),sK8('_dst_x0x1x1_3'(s(fun(X38,fun(X39,fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))))),X40),s(fun('type.num.num',X38),X41),s(fun('type.num.num',X39),happ(s(fun(X42,fun('type.num.num',X39)),X43),s(X42,X44)))),X36,X37)),s('type.ind_type.recspace'(X36),'const.ind_type.CONSTR_3'(s('type.num.num',X45),s(X36,X46),s(fun('type.num.num','type.ind_type.recspace'(X36)),X47))))) = s(X37,happ(s(fun(fun('type.num.num',X37),X37),happ(s(fun(X36,fun(fun('type.num.num',X37),X37)),'_dst_x1x0_2'(s(fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))),happ(s(fun('type.num.num',fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37)))),happ(s(fun(X42,fun('type.num.num',fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))))),'_dst_x00x01x11_3'(s(fun(X38,fun(X39,fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))))),X40),s(fun('type.num.num',X38),X41),s(fun(X42,fun('type.num.num',X39)),X43))),s(X42,X44))),s('type.num.num',X45))),s(fun('type.num.num','type.ind_type.recspace'(X36)),X47))),s(X36,X46))),s(fun('type.num.num',X37),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X36),X37),sK8('_dst_x0x1x1_3'(s(fun(X38,fun(X39,fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))))),X40),s(fun('type.num.num',X38),X41),s(fun('type.num.num',X39),happ(s(fun(X42,fun('type.num.num',X39)),X43),s(X42,X44)))),X36,X37)),s(fun('type.num.num','type.ind_type.recspace'(X36)),X47)))))) )),
  inference(superposition,[],[f346,f338])).
fof(f54883,plain,(
  ( ! [X30,X28,X26,X24,X35,X33,X31,X29,X27,X25,X34,X32] : (s(X25,happ(s(fun('type.ind_type.recspace'(X24),X25),sK8('_dst_x0x0x1_3'(s(fun(X26,fun(X27,fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))))),X28),s(X26,happ(s(fun(X29,X26),X30),s(X29,X31))),s(fun('type.num.num',X27),X32)),X24,X25)),s('type.ind_type.recspace'(X24),'const.ind_type.CONSTR_3'(s('type.num.num',X33),s(X24,X34),s(fun('type.num.num','type.ind_type.recspace'(X24)),X35))))) = s(X25,happ(s(fun(fun('type.num.num',X25),X25),happ(s(fun(X24,fun(fun('type.num.num',X25),X25)),'_dst_x1x0_2'(s(fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))),happ(s(fun('type.num.num',fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25)))),happ(s(fun(X29,fun('type.num.num',fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))))),'_dst_x00x10x01_3'(s(fun(X26,fun(X27,fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))))),X28),s(fun(X29,X26),X30),s(fun('type.num.num',X27),X32))),s(X29,X31))),s('type.num.num',X33))),s(fun('type.num.num','type.ind_type.recspace'(X24)),X35))),s(X24,X34))),s(fun('type.num.num',X25),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X24),X25),sK8('_dst_x0x0x1_3'(s(fun(X26,fun(X27,fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))))),X28),s(X26,happ(s(fun(X29,X26),X30),s(X29,X31))),s(fun('type.num.num',X27),X32)),X24,X25)),s(fun('type.num.num','type.ind_type.recspace'(X24)),X35)))))) )),
  inference(superposition,[],[f346,f337])).
fof(f54882,plain,(
  ( ! [X14,X12,X23,X21,X19,X17,X15,X13,X22,X20,X18,X16] : (s(X13,happ(s(fun('type.ind_type.recspace'(X12),X13),sK8(happ(s(fun(X14,fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),'_dst_x00x01x11_3'(s(fun(X15,fun(X16,fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),X17),s(fun('type.num.num',X15),X18),s(fun(X14,fun('type.num.num',X16)),X19))),s(X14,X20)),X12,X13)),s('type.ind_type.recspace'(X12),'const.ind_type.CONSTR_3'(s('type.num.num',X21),s(X12,X22),s(fun('type.num.num','type.ind_type.recspace'(X12)),X23))))) = s(X13,happ(s(fun(fun('type.num.num',X13),X13),happ(s(fun(X12,fun(fun('type.num.num',X13),X13)),'_dst_x1x0_2'(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))),happ(s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13)))),'_dst_x0x1x1_3'(s(fun(X15,fun(X16,fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),X17),s(fun('type.num.num',X15),X18),s(fun('type.num.num',X16),happ(s(fun(X14,fun('type.num.num',X16)),X19),s(X14,X20))))),s('type.num.num',X21))),s(fun('type.num.num','type.ind_type.recspace'(X12)),X23))),s(X12,X22))),s(fun('type.num.num',X13),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X12),X13),sK8(happ(s(fun(X14,fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),'_dst_x00x01x11_3'(s(fun(X15,fun(X16,fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),X17),s(fun('type.num.num',X15),X18),s(fun(X14,fun('type.num.num',X16)),X19))),s(X14,X20)),X12,X13)),s(fun('type.num.num','type.ind_type.recspace'(X12)),X23)))))) )),
  inference(superposition,[],[f346,f338])).
fof(f54881,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(X1,happ(s(fun('type.ind_type.recspace'(X0),X1),sK8(happ(s(fun(X2,fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),'_dst_x00x10x01_3'(s(fun(X3,fun(X4,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),X5),s(fun(X2,X3),X6),s(fun('type.num.num',X4),X7))),s(X2,X8)),X0,X1)),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X9),s(X0,X10),s(fun('type.num.num','type.ind_type.recspace'(X0)),X11))))) = s(X1,happ(s(fun(fun('type.num.num',X1),X1),happ(s(fun(X0,fun(fun('type.num.num',X1),X1)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),happ(s(fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),X5),s(X3,happ(s(fun(X2,X3),X6),s(X2,X8))),s(fun('type.num.num',X4),X7))),s('type.num.num',X9))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X11))),s(X0,X10))),s(fun('type.num.num',X1),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),X1),sK8(happ(s(fun(X2,fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),'_dst_x00x10x01_3'(s(fun(X3,fun(X4,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),X5),s(fun(X2,X3),X6),s(fun('type.num.num',X4),X7))),s(X2,X8)),X0,X1)),s(fun('type.num.num','type.ind_type.recspace'(X0)),X11)))))) )),
  inference(superposition,[],[f346,f337])).
fof(f55356,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(fun('type.num.num',X0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X3),s(X1,X4),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))),s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X3))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))),s(X1,X4))))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))))) )),
  inference(forward_demodulation,[],[f54873,f335])).
fof(f54873,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X3),s(X1,X4),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))))),s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X3))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))),s(X1,X4))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))))))) )),
  inference(unit_resulting_resolution,[],[f346,f331])).
fof(f53169,plain,(
  ( ! [X1220,X1219,X1217,X1221,X1218,X1222] : (s(X1219,f(s(bool,'T_0'))) != s(X1219,g(s(bool,'T_0'))) | s(fun(bool,X1219),X1217) = s(fun(bool,X1219),X1218) | s(bool,X1220) = s(bool,'const.bool.DATATYPE_1'(s(X1221,X1222))) | s(bool,X1220) = s(bool,sK9(X1217,X1218,X1219,bool))) )),
  inference(superposition,[],[f322,f43498])).
fof(f53148,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1046,X1051,X1049,X1053,X1047,X1045] : (s(X1048,happ(s(fun(bool,X1048),happ(s(fun(X1049,fun(bool,X1048)),X1050),s(X1049,X1051))),s(bool,'T_0'))) = s(X1048,happ(s(fun(X1045,X1048),'_dst_x0x0x1_3'(s(fun(X1049,fun(bool,X1048)),X1050),s(X1049,X1051),s(fun(X1045,bool),X1046))),s(X1045,X1047))) | s(bool,X1052) = s(bool,'const.bool.DATATYPE_1'(s(X1053,X1054))) | s(bool,X1052) = s(bool,happ(s(fun(X1045,bool),X1046),s(X1045,X1047)))) )),
  inference(superposition,[],[f335,f43498])).
fof(f53147,plain,(
  ( ! [X1035,X1033,X1027,X1031,X1029,X1034,X1032,X1036,X1030,X1028] : (s(X1030,happ(s(fun(X1027,X1030),'_dst_x0x1x1_3'(s(fun(bool,fun(X1031,X1030)),X1032),s(fun(X1027,bool),X1028),s(fun(X1027,X1031),X1033))),s(X1027,X1029))) = s(X1030,happ(s(fun(X1031,X1030),happ(s(fun(bool,fun(X1031,X1030)),X1032),s(bool,'T_0'))),s(X1031,happ(s(fun(X1027,X1031),X1033),s(X1027,X1029))))) | s(bool,X1034) = s(bool,'const.bool.DATATYPE_1'(s(X1035,X1036))) | s(bool,X1034) = s(bool,happ(s(fun(X1027,bool),X1028),s(X1027,X1029)))) )),
  inference(superposition,[],[f336,f43498])).
fof(f53146,plain,(
  ( ! [X1019,X1017,X1023,X1021,X1025,X1018,X1022,X1020,X1026,X1024] : (s(X1020,happ(s(fun(X1017,X1020),'_dst_x0x1x1_3'(s(fun(X1021,fun(bool,X1020)),X1022),s(fun(X1017,X1021),X1023),s(fun(X1017,bool),X1018))),s(X1017,X1019))) = s(X1020,happ(s(fun(bool,X1020),happ(s(fun(X1021,fun(bool,X1020)),X1022),s(X1021,happ(s(fun(X1017,X1021),X1023),s(X1017,X1019))))),s(bool,'T_0'))) | s(bool,X1024) = s(bool,'const.bool.DATATYPE_1'(s(X1025,X1026))) | s(bool,X1024) = s(bool,happ(s(fun(X1017,bool),X1018),s(X1017,X1019)))) )),
  inference(superposition,[],[f336,f43498])).
fof(f53143,plain,(
  ( ! [X1002,X1006,X1004,X1003,X1001,X1005] : (s(bool,'T_0') != s(bool,f(s(X1001,sK9(X1002,X1003,bool,X1001)))) | s(fun(X1001,bool),X1002) = s(fun(X1001,bool),X1003) | s(bool,X1004) = s(bool,'const.bool.DATATYPE_1'(s(X1005,X1006))) | s(bool,X1004) = s(bool,g(s(X1001,sK9(X1002,X1003,bool,X1001))))) )),
  inference(superposition,[],[f322,f43498])).
fof(f54708,plain,(
  ( ! [X681,X677,X679,X680,X682,X676,X678] : (s('type.fcp.cart'(bool,X679),X678) = s('type.fcp.cart'(bool,X679),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X680) = s(bool,'const.bool.DATATYPE_1'(s(X681,X682))) | s(bool,X680) = s(bool,sK4(X676,X677,X678,X679))) )),
  inference(subsumption_resolution,[],[f53094,f235])).
fof(f53094,plain,(
  ( ! [X681,X677,X679,X680,X682,X676,X678] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X679),X678) = s('type.fcp.cart'(bool,X679),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X680) = s(bool,'const.bool.DATATYPE_1'(s(X681,X682))) | s(bool,X680) = s(bool,sK4(X676,X677,X678,X679))) )),
  inference(superposition,[],[f301,f43498])).
fof(f54697,plain,(
  ( ! [X476,X478,X474,X475,X477,X479] : (s(X474,X475) = s(X474,X476) | s(bool,X477) = s(bool,'const.bool.DATATYPE_1'(s(X478,X479))) | s(bool,X477) = s(bool,happ(s(fun(X474,bool),happ(s(fun(X474,fun(X474,bool)),'=_0'),s(X474,X475))),s(X474,X476)))) )),
  inference(subsumption_resolution,[],[f53057,f235])).
fof(f53057,plain,(
  ( ! [X476,X478,X474,X475,X477,X479] : (~p(s(bool,'T_0')) | s(X474,X475) = s(X474,X476) | s(bool,X477) = s(bool,'const.bool.DATATYPE_1'(s(X478,X479))) | s(bool,X477) = s(bool,happ(s(fun(X474,bool),happ(s(fun(X474,fun(X474,bool)),'=_0'),s(X474,X475))),s(X474,X476)))) )),
  inference(superposition,[],[f330,f43498])).
fof(f54662,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) != s(bool,X88) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,'const.bool.DATATYPE_1'(s(X90,X91))) | s(bool,X87) = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f52971,f235])).
fof(f52971,plain,(
  ( ! [X90,X88,X87,X91,X89] : (~p(s(bool,'T_0')) | s(bool,X87) != s(bool,X88) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,'const.bool.DATATYPE_1'(s(X90,X91))) | s(bool,X87) = s(bool,X89)) )),
  inference(superposition,[],[f368,f43498])).
fof(f52951,plain,(
  ( ! [X575,X576,X578,X577] : (s(bool,X575) = s(bool,happ(s(fun(bool,bool),sK7('!_1',fun(bool,bool))),s(bool,X575))) | s(bool,X576) = s(bool,'const.bool.DATATYPE_1'(s(X577,X578))) | s(bool,X575) = s(bool,X576)) )),
  inference(superposition,[],[f33563,f43498])).
fof(f52950,plain,(
  ( ! [X573,X571,X572,X574] : (s(bool,X571) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X571))))) | s(bool,X572) = s(bool,'const.bool.DATATYPE_1'(s(X573,X574))) | s(bool,X571) = s(bool,X572)) )),
  inference(superposition,[],[f13113,f43498])).
fof(f52906,plain,(
  ( ! [X243,X241,X242,X240] : (s(bool,X240) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X240))))) | s(bool,X241) = s(bool,'const.bool.DATATYPE_1'(s(X242,X243))) | s(bool,X240) = s(bool,X241)) )),
  inference(superposition,[],[f3728,f43498])).
fof(f52871,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X75) != s(bool,X76) | s(bool,X76) = s(bool,'const.bool.DATATYPE_1'(s(bool,X76))) | s(bool,X77) = s(bool,'const.bool.DATATYPE_1'(s(X78,X79))) | s(bool,X75) = s(bool,X77)) )),
  inference(superposition,[],[f44066,f43498])).
fof(f52870,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(bool,X70) = s(bool,happ(s(fun(fun(X71,bool),bool),'!_1'),s(fun(X71,bool),'_dst_x0_1'(s(bool,X70))))) | s(bool,X72) = s(bool,'const.bool.DATATYPE_1'(s(X73,X74))) | s(bool,X70) = s(bool,X72)) )),
  inference(superposition,[],[f32095,f43498])).
fof(f52868,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,X60) = s(bool,happ(s(fun(fun(X61,bool),bool),'?_1'),s(fun(X61,bool),'_dst_x0_1'(s(bool,X60))))) | s(bool,X62) = s(bool,'const.bool.DATATYPE_1'(s(X63,X64))) | s(bool,X60) = s(bool,X62)) )),
  inference(superposition,[],[f21706,f43498])).
fof(f52866,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X46) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X46))))) | s(bool,X47) = s(bool,'const.bool.DATATYPE_1'(s(X48,X49))) | s(bool,X46) = s(bool,X47)) )),
  inference(superposition,[],[f3001,f43498])).
fof(f52865,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun(X42,bool),'_dst_x0_1'(s(bool,X40))))) | s(bool,'T_0') = s(bool,X41) | s(bool,X43) = s(bool,'const.bool.DATATYPE_1'(s(X44,X45))) | s(bool,X40) = s(bool,X43)) )),
  inference(superposition,[],[f2082,f43498])).
fof(f52864,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,X35) = s(bool,'|dollar|exists_1'(s(fun(X36,bool),'_dst_x0_1'(s(bool,X34))))) | s(bool,'F_0') = s(bool,X35) | s(bool,X37) = s(bool,'const.bool.DATATYPE_1'(s(X38,X39))) | s(bool,X34) = s(bool,X37)) )),
  inference(superposition,[],[f1997,f43498])).
fof(f52863,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X29) = s(bool,'|dollar|exists_1'(s(fun(X30,bool),'_dst_x0_1'(s(bool,X29))))) | s(bool,X31) = s(bool,'const.bool.DATATYPE_1'(s(X32,X33))) | s(bool,X29) = s(bool,X31)) )),
  inference(superposition,[],[f1960,f43498])).
fof(f52862,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X24) = s(bool,X25) | s(bool,'F_0') = s(bool,X25) | s(bool,X26) = s(bool,'const.bool.DATATYPE_1'(s(X27,X28))) | s(bool,X23) = s(bool,X26)) )),
  inference(superposition,[],[f1400,f43498])).
fof(f52857,plain,(
  ( ! [X1341,X1343,X1344,X1346,X1342,X1345] : (s(X1343,f(s(bool,X1344))) != s(X1343,g(s(bool,X1344))) | s(fun(bool,X1343),X1341) = s(fun(bool,X1343),X1342) | s(bool,X1344) = s(bool,'const.bool.DATATYPE_1'(s(X1345,X1346))) | s(bool,'T_0') = s(bool,sK9(X1341,X1342,X1343,bool))) )),
  inference(superposition,[],[f322,f43498])).
fof(f52836,plain,(
  ( ! [X1170,X1168,X1174,X1172,X1177,X1171,X1169,X1175,X1173,X1176] : (s(X1172,happ(s(fun(bool,X1172),happ(s(fun(X1173,fun(bool,X1172)),X1174),s(X1173,X1175))),s(bool,X1171))) = s(X1172,happ(s(fun(X1168,X1172),'_dst_x0x0x1_3'(s(fun(X1173,fun(bool,X1172)),X1174),s(X1173,X1175),s(fun(X1168,bool),X1169))),s(X1168,X1170))) | s(bool,X1171) = s(bool,'const.bool.DATATYPE_1'(s(X1176,X1177))) | s(bool,'T_0') = s(bool,happ(s(fun(X1168,bool),X1169),s(X1168,X1170)))) )),
  inference(superposition,[],[f335,f43498])).
fof(f52835,plain,(
  ( ! [X1151,X1149,X1155,X1153,X1157,X1150,X1154,X1152,X1158,X1156] : (s(X1153,happ(s(fun(X1149,X1153),'_dst_x0x1x1_3'(s(fun(bool,fun(X1154,X1153)),X1155),s(fun(X1149,bool),X1150),s(fun(X1149,X1154),X1156))),s(X1149,X1151))) = s(X1153,happ(s(fun(X1154,X1153),happ(s(fun(bool,fun(X1154,X1153)),X1155),s(bool,X1152))),s(X1154,happ(s(fun(X1149,X1154),X1156),s(X1149,X1151))))) | s(bool,X1152) = s(bool,'const.bool.DATATYPE_1'(s(X1157,X1158))) | s(bool,'T_0') = s(bool,happ(s(fun(X1149,bool),X1150),s(X1149,X1151)))) )),
  inference(superposition,[],[f336,f43498])).
fof(f52834,plain,(
  ( ! [X1139,X1143,X1141,X1146,X1144,X1148,X1142,X1140,X1147,X1145] : (s(X1143,happ(s(fun(X1139,X1143),'_dst_x0x1x1_3'(s(fun(X1144,fun(bool,X1143)),X1145),s(fun(X1139,X1144),X1146),s(fun(X1139,bool),X1140))),s(X1139,X1141))) = s(X1143,happ(s(fun(bool,X1143),happ(s(fun(X1144,fun(bool,X1143)),X1145),s(X1144,happ(s(fun(X1139,X1144),X1146),s(X1139,X1141))))),s(bool,X1142))) | s(bool,X1142) = s(bool,'const.bool.DATATYPE_1'(s(X1147,X1148))) | s(bool,'T_0') = s(bool,happ(s(fun(X1139,bool),X1140),s(X1139,X1141)))) )),
  inference(superposition,[],[f336,f43498])).
fof(f52831,plain,(
  ( ! [X1128,X1126,X1124,X1123,X1127,X1125] : (s(bool,X1126) != s(bool,f(s(X1123,sK9(X1124,X1125,bool,X1123)))) | s(fun(X1123,bool),X1124) = s(fun(X1123,bool),X1125) | s(bool,X1126) = s(bool,'const.bool.DATATYPE_1'(s(X1127,X1128))) | s(bool,'T_0') = s(bool,g(s(X1123,sK9(X1124,X1125,bool,X1123))))) )),
  inference(superposition,[],[f322,f43498])).
fof(f54512,plain,(
  ( ! [X472,X469,X471,X473,X470] : (s(bool,X469) != s(bool,X470) | s(bool,X470) = s(bool,X471) | s(bool,'T_0') = s(bool,X471) | s(bool,X469) = s(bool,'const.bool.DATATYPE_1'(s(X472,X473)))) )),
  inference(subsumption_resolution,[],[f52707,f350])).
fof(f52707,plain,(
  ( ! [X472,X469,X471,X473,X470] : (s(bool,X469) != s(bool,X470) | s(bool,X470) = s(bool,X471) | s(bool,'T_0') = s(bool,X471) | s(bool,X469) = s(bool,'const.bool.DATATYPE_1'(s(X472,X473))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f43737,f43498])).
fof(f54507,plain,(
  ( ! [X432,X434,X433] : (s(bool,'T_0') != s(bool,X432) | s(bool,X432) = s(bool,'const.bool.DATATYPE_1'(s(X433,X434)))) )),
  inference(subsumption_resolution,[],[f52697,f350])).
fof(f52697,plain,(
  ( ! [X432,X434,X433] : (s(bool,'T_0') != s(bool,X432) | s(bool,X432) = s(bool,'const.bool.DATATYPE_1'(s(X433,X434))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f350,f43498])).
fof(f52010,plain,(
  ( ! [X405,X401,X403,X404,X402] : (s(bool,'T_0') = s(bool,X401) | s(bool,X403) = s(bool,'const.bool.DATATYPE_1'(s(X404,X405))) | s(bool,X403) = s(bool,sK3(X401,X402,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X402)))) )),
  inference(superposition,[],[f43498,f565])).
fof(f52009,plain,(
  ( ! [X397,X399,X393,X395,X396,X398,X394,X400] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X397),s('type.num.num',X394))),s('type.num.num',X395))) | s(bool,X398) = s(bool,'const.bool.DATATYPE_1'(s(X399,X400))) | s(bool,X398) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X393),'const.wordSem.Loc_2'(s('type.num.num',X394),s('type.num.num',X395))),s(fun('type.fcp.cart'(bool,X393),bool),X396),s(fun('type.num.num',fun('type.num.num',bool)),X397)))) )),
  inference(superposition,[],[f43498,f324])).
fof(f52008,plain,(
  ( ! [X389,X391,X387,X388,X390,X386,X392] : (s(bool,'T_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,X386),bool),X388),s('type.fcp.cart'(bool,X386),X387))) | s(bool,X390) = s(bool,'const.bool.DATATYPE_1'(s(X391,X392))) | s(bool,X390) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X386),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X386),X387))),s(fun('type.fcp.cart'(bool,X386),bool),X388),s(fun('type.num.num',fun('type.num.num',bool)),X389)))) )),
  inference(superposition,[],[f43498,f323])).
fof(f52007,plain,(
  ( ! [X383,X377,X379,X385,X380,X382,X376,X378,X384,X381] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X376),bool),X379),s('type.wordSem.word_loc'(X376),X377))) | s(bool,X383) = s(bool,'const.bool.DATATYPE_1'(s(X384,X385))) | s(bool,X383) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X376),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X376),X377))),s(fun('type.wordSem.word_loc'(X376),bool),X378),s(fun('type.wordSem.word_loc'(X376),bool),X379),s(fun('type.wordSem.word_loc'(X376),bool),X380),s(bool,X381),s(bool,X382)))) )),
  inference(superposition,[],[f43498,f329])).
fof(f52006,plain,(
  ( ! [X366,X372,X374,X368,X370,X367,X373,X375,X369,X371] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X366),bool),X368),s('type.wordSem.word_loc'(X366),X367))) | s(bool,X373) = s(bool,'const.bool.DATATYPE_1'(s(X374,X375))) | s(bool,X373) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X366),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X366),X367))),s(fun('type.wordSem.word_loc'(X366),bool),X368),s(fun('type.wordSem.word_loc'(X366),bool),X369),s(fun('type.wordSem.word_loc'(X366),bool),X370),s(bool,X371),s(bool,X372)))) )),
  inference(superposition,[],[f43498,f328])).
fof(f52005,plain,(
  ( ! [X356,X358,X364,X360,X362,X357,X359,X365,X361,X363] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X356),bool),X360),s('type.wordSem.word_loc'(X356),X357))) | s(bool,X363) = s(bool,'const.bool.DATATYPE_1'(s(X364,X365))) | s(bool,X363) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X356),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X356),X357))),s(fun('type.wordSem.word_loc'(X356),bool),X358),s(fun('type.wordSem.word_loc'(X356),bool),X359),s(fun('type.wordSem.word_loc'(X356),bool),X360),s(bool,X361),s(bool,X362)))) )),
  inference(superposition,[],[f43498,f327])).
fof(f52004,plain,(
  ( ! [X350,X352,X354,X349,X351,X347,X353,X355,X348] : (s(bool,'T_0') = s(bool,X351) | s(bool,X353) = s(bool,'const.bool.DATATYPE_1'(s(X354,X355))) | s(bool,X353) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X347),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X347),bool),X348),s(fun('type.wordSem.word_loc'(X347),bool),X349),s(fun('type.wordSem.word_loc'(X347),bool),X350),s(bool,X351),s(bool,X352)))) )),
  inference(superposition,[],[f43498,f326])).
fof(f52003,plain,(
  ( ! [X344,X346,X341,X343,X339,X345,X340,X342,X338] : (s(bool,'T_0') = s(bool,X343) | s(bool,X344) = s(bool,'const.bool.DATATYPE_1'(s(X345,X346))) | s(bool,X344) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X338),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X338),bool),X339),s(fun('type.wordSem.word_loc'(X338),bool),X340),s(fun('type.wordSem.word_loc'(X338),bool),X341),s(bool,X342),s(bool,X343)))) )),
  inference(superposition,[],[f43498,f325])).
fof(f52002,plain,(
  ( ! [X333,X335,X337,X332,X334,X336] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X333),s('type.num.num',X334))) | s(bool,X335) = s(bool,'const.bool.DATATYPE_1'(s(X336,X337))) | s(bool,X335) = s(bool,'const.ind_type.FCONS_3'(s(bool,X332),s(fun('type.num.num',bool),X333),s('type.num.num','const.num.SUC_1'(s('type.num.num',X334)))))) )),
  inference(superposition,[],[f43498,f298])).
fof(f52001,plain,(
  ( ! [X327,X329,X331,X328,X330] : (s(bool,'T_0') = s(bool,X327) | s(bool,X329) = s(bool,'const.bool.DATATYPE_1'(s(X330,X331))) | s(bool,X329) = s(bool,'const.ind_type.FCONS_3'(s(bool,X327),s(fun('type.num.num',bool),X328),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f43498,f284])).
fof(f52000,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X322),s(fun('type.num.num',bool),X321),s('type.num.num',X323))) | s(bool,X324) = s(bool,'const.bool.DATATYPE_1'(s(X325,X326))) | s(bool,X324) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X321))),s(bool,X322))),s('type.num.num',X323)))) )),
  inference(superposition,[],[f43498,f347])).
fof(f51999,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (s(bool,'T_0') = s(bool,happ(s(fun(X315,bool),X317),s(X315,X316))) | s(bool,X318) = s(bool,'const.bool.DATATYPE_1'(s(X319,X320))) | s(bool,X318) = s(bool,happ(s(fun(fun(X315,bool),bool),'_dstsel_0_x0_1'(s(X315,X316))),s(fun(X315,bool),X317)))) )),
  inference(superposition,[],[f43498,f321])).
fof(f51996,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (s(bool,'T_0') = s(bool,X292) | s(bool,X294) = s(bool,'const.bool.DATATYPE_1'(s(X295,X296))) | s(bool,X294) = s(bool,happ(s(fun(X291,bool),'_dst_x0_1'(s(bool,X292))),s(X291,X293)))) )),
  inference(superposition,[],[f43498,f320])).
fof(f51995,plain,(
  ( ! [X282,X288,X290,X285,X287,X281,X283,X289,X284,X286] : (s(bool,'T_0') = s(bool,happ(s(fun(X284,bool),'_dst_x0x1x1_3'(s(fun(X282,fun(X281,bool)),X283),s(fun(X284,X282),X285),s(fun(X284,X281),X287))),s(X284,X286))) | s(bool,X288) = s(bool,'const.bool.DATATYPE_1'(s(X289,X290))) | s(bool,X288) = s(bool,happ(s(fun(X281,bool),happ(s(fun(X282,fun(X281,bool)),X283),s(X282,happ(s(fun(X284,X282),X285),s(X284,X286))))),s(X281,happ(s(fun(X284,X281),X287),s(X284,X286)))))) )),
  inference(superposition,[],[f43498,f336])).
fof(f53443,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.DATATYPE_1'(s(X19,X20))) | s(bool,X16) = s(bool,X18) | s(bool,X16) = s(bool,'const.bool.DATATYPE_1'(s(bool,X16)))) )),
  inference(duplicate_literal_removal,[],[f51950])).
fof(f51950,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.DATATYPE_1'(s(X19,X20))) | s(bool,X16) = s(bool,X18) | s(bool,X16) = s(bool,'const.bool.DATATYPE_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f43498,f742])).
fof(f51933,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.DATATYPE_1'(s(X17,X18))) | s(bool,X15) = s(bool,X16) | s(bool,X14) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f43498,f365])).
fof(f51931,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.DATATYPE_1'(s(X3,X4))) | s(bool,X1) = s(bool,X2) | s(bool,X5) = s(bool,'const.bool.DATATYPE_1'(s(X6,X7))) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f43498,f43498])).
fof(f51930,plain,(
  ( ! [X536,X538,X534,X537,X535] : (s(bool,X534) = s(bool,X536) | s(bool,X536) = s(bool,'const.bool.DATATYPE_1'(s(X537,X538))) | s(bool,'T_0') = s(bool,sK3(X534,X535,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X535)))) )),
  inference(superposition,[],[f43498,f565])).
fof(f51929,plain,(
  ( ! [X532,X528,X530,X526,X533,X529,X531,X527] : (s(bool,X531) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X530),s('type.num.num',X527))),s('type.num.num',X528))) | s(bool,X531) = s(bool,'const.bool.DATATYPE_1'(s(X532,X533))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X526),'const.wordSem.Loc_2'(s('type.num.num',X527),s('type.num.num',X528))),s(fun('type.fcp.cart'(bool,X526),bool),X529),s(fun('type.num.num',fun('type.num.num',bool)),X530)))) )),
  inference(superposition,[],[f43498,f324])).
fof(f51928,plain,(
  ( ! [X524,X520,X522,X525,X521,X523,X519] : (s(bool,X523) = s(bool,happ(s(fun('type.fcp.cart'(bool,X519),bool),X521),s('type.fcp.cart'(bool,X519),X520))) | s(bool,X523) = s(bool,'const.bool.DATATYPE_1'(s(X524,X525))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X519),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X519),X520))),s(fun('type.fcp.cart'(bool,X519),bool),X521),s(fun('type.num.num',fun('type.num.num',bool)),X522)))) )),
  inference(superposition,[],[f43498,f323])).
fof(f51927,plain,(
  ( ! [X509,X511,X516,X518,X512,X514,X510,X517,X513,X515] : (s(bool,X516) = s(bool,happ(s(fun('type.wordSem.word_loc'(X509),bool),X512),s('type.wordSem.word_loc'(X509),X510))) | s(bool,X516) = s(bool,'const.bool.DATATYPE_1'(s(X517,X518))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X509),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X509),X510))),s(fun('type.wordSem.word_loc'(X509),bool),X511),s(fun('type.wordSem.word_loc'(X509),bool),X512),s(fun('type.wordSem.word_loc'(X509),bool),X513),s(bool,X514),s(bool,X515)))) )),
  inference(superposition,[],[f43498,f329])).
fof(f51926,plain,(
  ( ! [X499,X505,X507,X500,X502,X508,X504,X506,X501,X503] : (s(bool,X506) = s(bool,happ(s(fun('type.wordSem.word_loc'(X499),bool),X501),s('type.wordSem.word_loc'(X499),X500))) | s(bool,X506) = s(bool,'const.bool.DATATYPE_1'(s(X507,X508))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X499),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X499),X500))),s(fun('type.wordSem.word_loc'(X499),bool),X501),s(fun('type.wordSem.word_loc'(X499),bool),X502),s(fun('type.wordSem.word_loc'(X499),bool),X503),s(bool,X504),s(bool,X505)))) )),
  inference(superposition,[],[f43498,f328])).
fof(f51925,plain,(
  ( ! [X492,X494,X490,X496,X498,X493,X495,X489,X491,X497] : (s(bool,X496) = s(bool,happ(s(fun('type.wordSem.word_loc'(X489),bool),X493),s('type.wordSem.word_loc'(X489),X490))) | s(bool,X496) = s(bool,'const.bool.DATATYPE_1'(s(X497,X498))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X489),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X489),X490))),s(fun('type.wordSem.word_loc'(X489),bool),X491),s(fun('type.wordSem.word_loc'(X489),bool),X492),s(fun('type.wordSem.word_loc'(X489),bool),X493),s(bool,X494),s(bool,X495)))) )),
  inference(superposition,[],[f43498,f327])).
fof(f51924,plain,(
  ( ! [X484,X486,X480,X482,X488,X485,X487,X481,X483] : (s(bool,X484) = s(bool,X486) | s(bool,X486) = s(bool,'const.bool.DATATYPE_1'(s(X487,X488))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X480),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X480),bool),X481),s(fun('type.wordSem.word_loc'(X480),bool),X482),s(fun('type.wordSem.word_loc'(X480),bool),X483),s(bool,X484),s(bool,X485)))) )),
  inference(superposition,[],[f43498,f326])).
fof(f51923,plain,(
  ( ! [X476,X478,X472,X474,X471,X475,X477,X479,X473] : (s(bool,X476) = s(bool,X477) | s(bool,X477) = s(bool,'const.bool.DATATYPE_1'(s(X478,X479))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X471),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X471),bool),X472),s(fun('type.wordSem.word_loc'(X471),bool),X473),s(fun('type.wordSem.word_loc'(X471),bool),X474),s(bool,X475),s(bool,X476)))) )),
  inference(superposition,[],[f43498,f325])).
fof(f51922,plain,(
  ( ! [X466,X469,X465,X467,X468,X470] : (s(bool,X468) = s(bool,happ(s(fun('type.num.num',bool),X466),s('type.num.num',X467))) | s(bool,X468) = s(bool,'const.bool.DATATYPE_1'(s(X469,X470))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X465),s(fun('type.num.num',bool),X466),s('type.num.num','const.num.SUC_1'(s('type.num.num',X467)))))) )),
  inference(superposition,[],[f43498,f298])).
fof(f51921,plain,(
  ( ! [X461,X463,X460,X462,X464] : (s(bool,X460) = s(bool,X462) | s(bool,X462) = s(bool,'const.bool.DATATYPE_1'(s(X463,X464))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X460),s(fun('type.num.num',bool),X461),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f43498,f284])).
fof(f51920,plain,(
  ( ! [X455,X457,X459,X454,X456,X458] : (s(bool,X457) = s(bool,'const.ind_type.FCONS_3'(s(bool,X455),s(fun('type.num.num',bool),X454),s('type.num.num',X456))) | s(bool,X457) = s(bool,'const.bool.DATATYPE_1'(s(X458,X459))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X454))),s(bool,X455))),s('type.num.num',X456)))) )),
  inference(superposition,[],[f43498,f347])).
fof(f51919,plain,(
  ( ! [X453,X449,X451,X452,X448,X450] : (s(bool,X451) = s(bool,happ(s(fun(X448,bool),X450),s(X448,X449))) | s(bool,X451) = s(bool,'const.bool.DATATYPE_1'(s(X452,X453))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X448,bool),bool),'_dstsel_0_x0_1'(s(X448,X449))),s(fun(X448,bool),X450)))) )),
  inference(superposition,[],[f43498,f321])).
fof(f51918,plain,(
  ( ! [X445,X447,X441,X443,X438,X444,X446,X440,X442,X439] : (s(bool,X445) = s(bool,happ(s(fun(X440,bool),happ(s(fun(X439,fun(X440,bool)),X441),s(X439,X442))),s(X440,happ(s(fun(X438,X440),X443),s(X438,X444))))) | s(bool,X445) = s(bool,'const.bool.DATATYPE_1'(s(X446,X447))) | s(bool,'T_0') = s(bool,happ(s(fun(X438,bool),'_dst_x0x0x1_3'(s(fun(X439,fun(X440,bool)),X441),s(X439,X442),s(fun(X438,X440),X443))),s(X438,X444)))) )),
  inference(superposition,[],[f43498,f335])).
fof(f51917,plain,(
  ( ! [X430,X436,X432,X434,X431,X437,X433,X435] : (s(bool,X435) = s(bool,happ(s(fun(X431,bool),happ(s(fun(X430,fun(X431,bool)),X432),s(X430,X434))),s(X431,X433))) | s(bool,X435) = s(bool,'const.bool.DATATYPE_1'(s(X436,X437))) | s(bool,'T_0') = s(bool,happ(s(fun(X430,bool),'_dst_x1x0_2'(s(fun(X430,fun(X431,bool)),X432),s(X431,X433))),s(X430,X434)))) )),
  inference(superposition,[],[f43498,f334])).
fof(f51916,plain,(
  ( ! [X428,X424,X426,X429,X425,X427] : (s(bool,X425) = s(bool,X427) | s(bool,X427) = s(bool,'const.bool.DATATYPE_1'(s(X428,X429))) | s(bool,'T_0') = s(bool,happ(s(fun(X424,bool),'_dst_x0_1'(s(bool,X425))),s(X424,X426)))) )),
  inference(superposition,[],[f43498,f320])).
fof(f51915,plain,(
  ( ! [X414,X420,X422,X416,X418,X415,X421,X423,X417,X419] : (s(bool,X421) = s(bool,happ(s(fun(X417,bool),'_dst_x0x1x1_3'(s(fun(X415,fun(X414,bool)),X416),s(fun(X417,X415),X418),s(fun(X417,X414),X420))),s(X417,X419))) | s(bool,X421) = s(bool,'const.bool.DATATYPE_1'(s(X422,X423))) | s(bool,'T_0') = s(bool,happ(s(fun(X414,bool),happ(s(fun(X415,fun(X414,bool)),X416),s(X415,happ(s(fun(X417,X415),X418),s(X417,X419))))),s(X414,happ(s(fun(X417,X414),X420),s(X417,X419)))))) )),
  inference(superposition,[],[f43498,f336])).
fof(f51914,plain,(
  ( ! [X412,X408,X410,X405,X407,X413,X409,X411,X404,X406] : (s(bool,X411) = s(bool,happ(s(fun(X408,bool),'_dst_x0x0x1_3'(s(fun(X405,fun(X404,bool)),X406),s(X405,X407),s(fun(X408,X404),X409))),s(X408,X410))) | s(bool,X411) = s(bool,'const.bool.DATATYPE_1'(s(X412,X413))) | s(bool,'T_0') = s(bool,happ(s(fun(X404,bool),happ(s(fun(X405,fun(X404,bool)),X406),s(X405,X407))),s(X404,happ(s(fun(X408,X404),X409),s(X408,X410)))))) )),
  inference(superposition,[],[f43498,f335])).
fof(f51913,plain,(
  ( ! [X397,X399,X401,X403,X396,X398,X400,X402] : (s(bool,X401) = s(bool,happ(s(fun(X397,bool),'_dst_x1x0_2'(s(fun(X397,fun(X396,bool)),X398),s(X396,X400))),s(X397,X399))) | s(bool,X401) = s(bool,'const.bool.DATATYPE_1'(s(X402,X403))) | s(bool,'T_0') = s(bool,happ(s(fun(X396,bool),happ(s(fun(X397,fun(X396,bool)),X398),s(X397,X399))),s(X396,X400)))) )),
  inference(superposition,[],[f43498,f334])).
fof(f51912,plain,(
  ( ! [X389,X391,X393,X395,X388,X390,X392,X394] : (s(bool,X393) = s(bool,happ(s(fun(X389,bool),X390),s(X389,happ(s(fun(X388,X389),X391),s(X388,X392))))) | s(bool,X393) = s(bool,'const.bool.DATATYPE_1'(s(X394,X395))) | s(bool,'T_0') = s(bool,happ(s(fun(X388,bool),'_dst_x0x1_2'(s(fun(X389,bool),X390),s(fun(X388,X389),X391))),s(X388,X392)))) )),
  inference(superposition,[],[f43498,f333])).
fof(f51911,plain,(
  ( ! [X383,X385,X387,X380,X382,X384,X386,X381] : (s(bool,X385) = s(bool,happ(s(fun(X382,bool),'_dst_x0x1_2'(s(fun(X380,bool),X381),s(fun(X382,X380),X383))),s(X382,X384))) | s(bool,X385) = s(bool,'const.bool.DATATYPE_1'(s(X386,X387))) | s(bool,'T_0') = s(bool,happ(s(fun(X380,bool),X381),s(X380,happ(s(fun(X382,X380),X383),s(X382,X384)))))) )),
  inference(superposition,[],[f43498,f333])).
fof(f51910,plain,(
  ( ! [X377,X379,X376,X378] : (s(bool,X376) = s(bool,X377) | s(bool,X377) = s(bool,'const.bool.DATATYPE_1'(s(X378,X379))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X376)))) )),
  inference(superposition,[],[f43498,f271])).
fof(f53855,plain,(
  ( ! [X158,X156,X154,X157,X155] : (s(bool,X154) = s(bool,X155) | s(bool,X155) = s(bool,'const.bool.DATATYPE_1'(s(X156,X157))) | s(bool,X154) = s(bool,X158) | s(bool,'F_0') = s(bool,X158)) )),
  inference(subsumption_resolution,[],[f51856,f350])).
fof(f51856,plain,(
  ( ! [X158,X156,X154,X157,X155] : (s(bool,X154) = s(bool,X155) | s(bool,X155) = s(bool,'const.bool.DATATYPE_1'(s(X156,X157))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X154) = s(bool,X158) | s(bool,'F_0') = s(bool,X158)) )),
  inference(superposition,[],[f43498,f1108])).
fof(f51562,plain,(
  ( ! [X524,X522,X525,X521,X523] : (s(bool,X521) = s(bool,'const.bool.DATATYPE_1'(s(X523,X524))) | s(bool,X525) = s(bool,sK3(X521,X522,bool)) | s(bool,'T_0') = s(bool,X525) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X522)))) )),
  inference(superposition,[],[f43498,f565])).
fof(f51556,plain,(
  ( ! [X472,X474,X469,X471,X475,X467,X473,X468,X470] : (s(bool,X471) = s(bool,'const.bool.DATATYPE_1'(s(X473,X474))) | s(bool,X475) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X467),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X467),bool),X468),s(fun('type.wordSem.word_loc'(X467),bool),X469),s(fun('type.wordSem.word_loc'(X467),bool),X470),s(bool,X471),s(bool,X472))) | s(bool,'T_0') = s(bool,X475)) )),
  inference(superposition,[],[f43498,f326])).
fof(f51555,plain,(
  ( ! [X466,X461,X463,X459,X465,X460,X462,X458,X464] : (s(bool,X463) = s(bool,'const.bool.DATATYPE_1'(s(X464,X465))) | s(bool,X466) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X458),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X458),bool),X459),s(fun('type.wordSem.word_loc'(X458),bool),X460),s(fun('type.wordSem.word_loc'(X458),bool),X461),s(bool,X462),s(bool,X463))) | s(bool,'T_0') = s(bool,X466)) )),
  inference(superposition,[],[f43498,f325])).
fof(f51553,plain,(
  ( ! [X447,X449,X451,X448,X450] : (s(bool,X447) = s(bool,'const.bool.DATATYPE_1'(s(X449,X450))) | s(bool,X451) = s(bool,'const.ind_type.FCONS_3'(s(bool,X447),s(fun('type.num.num',bool),X448),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X451)) )),
  inference(superposition,[],[f43498,f284])).
fof(f51548,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s(bool,X412) = s(bool,'const.bool.DATATYPE_1'(s(X414,X415))) | s(bool,X416) = s(bool,happ(s(fun(X411,bool),'_dst_x0_1'(s(bool,X412))),s(X411,X413))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(superposition,[],[f43498,f320])).
fof(f51542,plain,(
  ( ! [X364,X366,X365,X363] : (s(bool,X363) = s(bool,'const.bool.DATATYPE_1'(s(X364,X365))) | s(bool,X366) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X363))) | s(bool,'T_0') = s(bool,X366)) )),
  inference(superposition,[],[f43498,f271])).
fof(f51438,plain,(
  ( ! [X957,X961,X952,X958,X956,X954,X960,X955,X953,X959] : (p(s(bool,happ(s(fun(fun(X952,X953),bool),happ(s(fun(fun(X952,X953),fun(fun(X952,X953),bool)),'=_0'),s(fun(X952,X953),X961))),s(fun(X952,X953),'_dst_x0x1x1_3'(s(fun(X955,fun(X956,X953)),X957),s(fun(X952,X955),X958),s(fun(X952,X956),happ(s(fun(X954,fun(X952,X956)),X959),s(X954,X960)))))))) | s(fun(X952,X953),X961) != s(fun(X952,X953),happ(s(fun(X954,fun(X952,X953)),'_dst_x00x01x11_3'(s(fun(X955,fun(X956,X953)),X957),s(fun(X952,X955),X958),s(fun(X954,fun(X952,X956)),X959))),s(X954,X960)))) )),
  inference(superposition,[],[f331,f338])).
fof(f51437,plain,(
  ( ! [X947,X945,X951,X949,X942,X946,X944,X950,X948,X943] : (p(s(bool,happ(s(fun(fun(X942,X943),bool),happ(s(fun(fun(X942,X943),fun(fun(X942,X943),bool)),'=_0'),s(fun(X942,X943),'_dst_x0x1x1_3'(s(fun(X945,fun(X946,X943)),X947),s(fun(X942,X945),X948),s(fun(X942,X946),happ(s(fun(X944,fun(X942,X946)),X949),s(X944,X950))))))),s(fun(X942,X943),X951)))) | s(fun(X942,X943),X951) != s(fun(X942,X943),happ(s(fun(X944,fun(X942,X943)),'_dst_x00x01x11_3'(s(fun(X945,fun(X946,X943)),X947),s(fun(X942,X945),X948),s(fun(X944,fun(X942,X946)),X949))),s(X944,X950)))) )),
  inference(superposition,[],[f331,f338])).
fof(f51436,plain,(
  ( ! [X938,X936,X940,X934,X932,X939,X937,X941,X935,X933] : (~p(s(bool,happ(s(fun(fun(X932,X933),bool),happ(s(fun(fun(X932,X933),fun(fun(X932,X933),bool)),'=_0'),s(fun(X932,X933),X941))),s(fun(X932,X933),'_dst_x0x1x1_3'(s(fun(X935,fun(X936,X933)),X937),s(fun(X932,X935),X938),s(fun(X932,X936),happ(s(fun(X934,fun(X932,X936)),X939),s(X934,X940)))))))) | s(fun(X932,X933),X941) = s(fun(X932,X933),happ(s(fun(X934,fun(X932,X933)),'_dst_x00x01x11_3'(s(fun(X935,fun(X936,X933)),X937),s(fun(X932,X935),X938),s(fun(X934,fun(X932,X936)),X939))),s(X934,X940)))) )),
  inference(superposition,[],[f330,f338])).
fof(f51435,plain,(
  ( ! [X922,X926,X924,X930,X928,X923,X927,X925,X931,X929] : (~p(s(bool,happ(s(fun(fun(X922,X923),bool),happ(s(fun(fun(X922,X923),fun(fun(X922,X923),bool)),'=_0'),s(fun(X922,X923),'_dst_x0x1x1_3'(s(fun(X925,fun(X926,X923)),X927),s(fun(X922,X925),X928),s(fun(X922,X926),happ(s(fun(X924,fun(X922,X926)),X929),s(X924,X930))))))),s(fun(X922,X923),X931)))) | s(fun(X922,X923),X931) = s(fun(X922,X923),happ(s(fun(X924,fun(X922,X923)),'_dst_x00x01x11_3'(s(fun(X925,fun(X926,X923)),X927),s(fun(X922,X925),X928),s(fun(X924,fun(X922,X926)),X929))),s(X924,X930)))) )),
  inference(superposition,[],[f330,f338])).
fof(f51414,plain,(
  ( ! [X666,X668,X670,X662,X664,X667,X661,X671,X665,X663,X669] : (s(X670,happ(s(fun(fun(X661,X662),X670),X671),s(fun(X661,X662),'_dst_x0x1x1_3'(s(fun(X664,fun(X665,X662)),X666),s(fun(X661,X664),X667),s(fun(X661,X665),happ(s(fun(X663,fun(X661,X665)),X668),s(X663,X669))))))) = s(X670,happ(s(fun(X663,X670),'_dst_x0x1_2'(s(fun(fun(X661,X662),X670),X671),s(fun(X663,fun(X661,X662)),'_dst_x00x01x11_3'(s(fun(X664,fun(X665,X662)),X666),s(fun(X661,X664),X667),s(fun(X663,fun(X661,X665)),X668))))),s(X663,X669)))) )),
  inference(superposition,[],[f333,f338])).
fof(f51413,plain,(
  ( ! [X660,X656,X658,X652,X654,X648,X650,X657,X659,X653,X655,X649,X651] : (s(X657,happ(s(fun(X650,X657),'_dst_x0x0x1_3'(s(fun(X658,fun(fun(X648,X649),X657)),X659),s(X658,X660),s(fun(X650,fun(X648,X649)),'_dst_x00x01x11_3'(s(fun(X651,fun(X652,X649)),X653),s(fun(X648,X651),X654),s(fun(X650,fun(X648,X652)),X655))))),s(X650,X656))) = s(X657,happ(s(fun(fun(X648,X649),X657),happ(s(fun(X658,fun(fun(X648,X649),X657)),X659),s(X658,X660))),s(fun(X648,X649),'_dst_x0x1x1_3'(s(fun(X651,fun(X652,X649)),X653),s(fun(X648,X651),X654),s(fun(X648,X652),happ(s(fun(X650,fun(X648,X652)),X655),s(X650,X656)))))))) )),
  inference(superposition,[],[f335,f338])).
fof(f51412,plain,(
  ( ! [X639,X635,X644,X646,X640,X642,X636,X638,X634,X645,X647,X641,X643,X637] : (s(fun(X643,X644),'_dst_x0x0x1_3'(s(fun(fun(X634,X635),fun(X645,X644)),X646),s(fun(X634,X635),'_dst_x0x1x1_3'(s(fun(X637,fun(X638,X635)),X639),s(fun(X634,X637),X640),s(fun(X634,X638),happ(s(fun(X636,fun(X634,X638)),X641),s(X636,X642))))),s(fun(X643,X645),X647))) = s(fun(X643,X644),happ(s(fun(X636,fun(X643,X644)),'_dst_x00x10x01_3'(s(fun(fun(X634,X635),fun(X645,X644)),X646),s(fun(X636,fun(X634,X635)),'_dst_x00x01x11_3'(s(fun(X637,fun(X638,X635)),X639),s(fun(X634,X637),X640),s(fun(X636,fun(X634,X638)),X641))),s(fun(X643,X645),X647))),s(X636,X642)))) )),
  inference(superposition,[],[f337,f338])).
fof(f51411,plain,(
  ( ! [X633,X629,X631,X625,X627,X621,X623,X632,X628,X630,X624,X626,X622] : (s(X630,happ(s(fun(X623,X630),'_dst_x0x1x1_3'(s(fun(fun(X621,X622),fun(X631,X630)),X632),s(fun(X623,fun(X621,X622)),'_dst_x00x01x11_3'(s(fun(X624,fun(X625,X622)),X626),s(fun(X621,X624),X627),s(fun(X623,fun(X621,X625)),X628))),s(fun(X623,X631),X633))),s(X623,X629))) = s(X630,happ(s(fun(X631,X630),happ(s(fun(fun(X621,X622),fun(X631,X630)),X632),s(fun(X621,X622),'_dst_x0x1x1_3'(s(fun(X624,fun(X625,X622)),X626),s(fun(X621,X624),X627),s(fun(X621,X625),happ(s(fun(X623,fun(X621,X625)),X628),s(X623,X629))))))),s(X631,happ(s(fun(X623,X631),X633),s(X623,X629)))))) )),
  inference(superposition,[],[f336,f338])).
fof(f51410,plain,(
  ( ! [X617,X619,X613,X615,X609,X611,X620,X616,X618,X612,X614,X608,X610] : (s(X617,happ(s(fun(X610,X617),'_dst_x0x1x1_3'(s(fun(X618,fun(fun(X608,X609),X617)),X619),s(fun(X610,X618),X620),s(fun(X610,fun(X608,X609)),'_dst_x00x01x11_3'(s(fun(X611,fun(X612,X609)),X613),s(fun(X608,X611),X614),s(fun(X610,fun(X608,X612)),X615))))),s(X610,X616))) = s(X617,happ(s(fun(fun(X608,X609),X617),happ(s(fun(X618,fun(fun(X608,X609),X617)),X619),s(X618,happ(s(fun(X610,X618),X620),s(X610,X616))))),s(fun(X608,X609),'_dst_x0x1x1_3'(s(fun(X611,fun(X612,X609)),X613),s(fun(X608,X611),X614),s(fun(X608,X612),happ(s(fun(X610,fun(X608,X612)),X615),s(X610,X616)))))))) )),
  inference(superposition,[],[f336,f338])).
fof(f51373,plain,(
  ( ! [X146,X144,X142,X140,X138,X145,X143,X141,X139] : (p(s(bool,'|dollar|exists_1'(s(fun(X138,bool),'_dst_x0x1x1_3'(s(fun(X140,fun(X141,bool)),X142),s(fun(X138,X140),X143),s(fun(X138,X141),happ(s(fun(X139,fun(X138,X141)),X144),s(X139,X145)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X138,bool),happ(s(fun(X139,fun(X138,bool)),'_dst_x00x01x11_3'(s(fun(X140,fun(X141,bool)),X142),s(fun(X138,X140),X143),s(fun(X139,fun(X138,X141)),X144))),s(X139,X145))),s(X138,X146)))) )),
  inference(superposition,[],[f2822,f338])).
fof(f51372,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131,X129,X137] : (~p(s(bool,happ(s(fun(X129,bool),'_dst_x0x1x1_3'(s(fun(X131,fun(X132,bool)),X133),s(fun(X129,X131),X134),s(fun(X129,X132),happ(s(fun(X130,fun(X129,X132)),X135),s(X130,X136))))),s(X129,X137)))) | p(s(bool,'|dollar|exists_1'(s(fun(X129,bool),happ(s(fun(X130,fun(X129,bool)),'_dst_x00x01x11_3'(s(fun(X131,fun(X132,bool)),X133),s(fun(X129,X131),X134),s(fun(X130,fun(X129,X132)),X135))),s(X130,X136))))))) )),
  inference(superposition,[],[f2633,f338])).
fof(f51371,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X120] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X120,bool),'_dst_x0x1x1_3'(s(fun(X122,fun(X123,bool)),X124),s(fun(X120,X122),X125),s(fun(X120,X123),happ(s(fun(X121,fun(X120,X123)),X126),s(X121,X127))))))) | s(X120,X128) = s(X120,sK3(X128,happ(s(fun(X121,fun(X120,bool)),'_dst_x00x01x11_3'(s(fun(X122,fun(X123,bool)),X124),s(fun(X120,X122),X125),s(fun(X121,fun(X120,X123)),X126))),s(X121,X127)),X120))) )),
  inference(superposition,[],[f565,f338])).
fof(f51370,plain,(
  ( ! [X111,X118,X116,X114,X112,X119,X117,X115,X113] : (~p(s(bool,happ(s(fun(X111,bool),'_dst_x0x1x1_3'(s(fun(X113,fun(X114,bool)),X115),s(fun(X111,X113),X116),s(fun(X111,X114),happ(s(fun(X112,fun(X111,X114)),X117),s(X112,X118))))),s(X111,X119)))) | p(s(bool,happ(s(fun(fun(X111,bool),bool),'?_1'),s(fun(X111,bool),happ(s(fun(X112,fun(X111,bool)),'_dst_x00x01x11_3'(s(fun(X113,fun(X114,bool)),X115),s(fun(X111,X113),X116),s(fun(X112,fun(X111,X114)),X117))),s(X112,X118))))))) )),
  inference(superposition,[],[f312,f338])).
fof(f51369,plain,(
  ( ! [X103,X109,X107,X105,X110,X108,X106,X104] : (~p(s(bool,happ(s(fun(fun(X103,bool),bool),'?_1'),s(fun(X103,bool),'_dst_x0x1x1_3'(s(fun(X105,fun(X106,bool)),X107),s(fun(X103,X105),X108),s(fun(X103,X106),happ(s(fun(X104,fun(X103,X106)),X109),s(X104,X110)))))))) | p(s(bool,happ(s(fun(X103,bool),happ(s(fun(X104,fun(X103,bool)),'_dst_x00x01x11_3'(s(fun(X105,fun(X106,bool)),X107),s(fun(X103,X105),X108),s(fun(X104,fun(X103,X106)),X109))),s(X104,X110))),s(X103,sK7(happ(s(fun(X104,fun(X103,bool)),'_dst_x00x01x11_3'(s(fun(X105,fun(X106,bool)),X107),s(fun(X103,X105),X108),s(fun(X104,fun(X103,X106)),X109))),s(X104,X110)),X103)))))) )),
  inference(superposition,[],[f311,f338])).
fof(f51368,plain,(
  ( ! [X101,X99,X97,X95,X102,X100,X98,X96] : (~p(s(bool,happ(s(fun(X95,bool),'_dst_x0x1x1_3'(s(fun(X97,fun(X98,bool)),X99),s(fun(X95,X97),X100),s(fun(X95,X98),happ(s(fun(X96,fun(X95,X98)),X101),s(X96,X102))))),s(X95,sK6(happ(s(fun(X96,fun(X95,bool)),'_dst_x00x01x11_3'(s(fun(X97,fun(X98,bool)),X99),s(fun(X95,X97),X100),s(fun(X96,fun(X95,X98)),X101))),s(X96,X102)),X95))))) | p(s(bool,happ(s(fun(fun(X95,bool),bool),'!_1'),s(fun(X95,bool),happ(s(fun(X96,fun(X95,bool)),'_dst_x00x01x11_3'(s(fun(X97,fun(X98,bool)),X99),s(fun(X95,X97),X100),s(fun(X96,fun(X95,X98)),X101))),s(X96,X102))))))) )),
  inference(superposition,[],[f310,f338])).
fof(f51367,plain,(
  ( ! [X94,X92,X90,X88,X87,X93,X91,X89,X86] : (~p(s(bool,happ(s(fun(fun(X86,bool),bool),'!_1'),s(fun(X86,bool),'_dst_x0x1x1_3'(s(fun(X88,fun(X89,bool)),X90),s(fun(X86,X88),X91),s(fun(X86,X89),happ(s(fun(X87,fun(X86,X89)),X92),s(X87,X93)))))))) | p(s(bool,happ(s(fun(X86,bool),happ(s(fun(X87,fun(X86,bool)),'_dst_x00x01x11_3'(s(fun(X88,fun(X89,bool)),X90),s(fun(X86,X88),X91),s(fun(X87,fun(X86,X89)),X92))),s(X87,X93))),s(X86,X94))))) )),
  inference(superposition,[],[f309,f338])).
fof(f51366,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X77,X84,X82] : (p(s(bool,'|dollar|exists_1'(s(fun(X77,bool),'_dst_x0x1x1_3'(s(fun(X79,fun(X80,bool)),X81),s(fun(X77,X79),X82),s(fun(X77,X80),happ(s(fun(X78,fun(X77,X80)),X83),s(X78,X84)))))))) | s(X77,X85) = s(X77,sK3(X85,happ(s(fun(X78,fun(X77,bool)),'_dst_x00x01x11_3'(s(fun(X79,fun(X80,bool)),X81),s(fun(X77,X79),X82),s(fun(X78,fun(X77,X80)),X83))),s(X78,X84)),X77))) )),
  inference(superposition,[],[f288,f338])).
fof(f51360,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X32,X22] : (s(X23,happ(s(fun(X30,X23),'_dst_x0x1x1_3'(s(fun(X24,fun(X22,X23)),'_dst_x00x01x11_3'(s(fun(X25,fun(X26,X23)),X27),s(fun(X22,X25),X28),s(fun(X24,fun(X22,X26)),X29))),s(fun(X30,X24),X31),s(fun(X30,X22),X33))),s(X30,X32))) = s(X23,happ(s(fun(X22,X23),'_dst_x0x1x1_3'(s(fun(X25,fun(X26,X23)),X27),s(fun(X22,X25),X28),s(fun(X22,X26),happ(s(fun(X24,fun(X22,X26)),X29),s(X24,happ(s(fun(X30,X24),X31),s(X30,X32))))))),s(X22,happ(s(fun(X30,X22),X33),s(X30,X32)))))) )),
  inference(superposition,[],[f336,f338])).
fof(f51359,plain,(
  ( ! [X14,X12,X21,X19,X17,X15,X13,X20,X18,X16] : (s(X13,happ(s(fun(X12,X13),'_dst_x0x1x1_3'(s(fun(X15,fun(X16,X13)),X17),s(fun(X12,X15),X18),s(fun(X12,X16),happ(s(fun(X14,fun(X12,X16)),X19),s(X14,X20))))),s(X12,X21))) = s(X13,happ(s(fun(X14,X13),'_dst_x1x0_2'(s(fun(X14,fun(X12,X13)),'_dst_x00x01x11_3'(s(fun(X15,fun(X16,X13)),X17),s(fun(X12,X15),X18),s(fun(X14,fun(X12,X16)),X19))),s(X12,X21))),s(X14,X20)))) )),
  inference(superposition,[],[f334,f338])).
fof(f51358,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(X1,happ(s(fun(X9,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X0,X1)),'_dst_x00x01x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),X6),s(fun(X2,fun(X0,X4)),X7))),s(X2,X8),s(fun(X9,X0),X10))),s(X9,X11))) = s(X1,happ(s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),X6),s(fun(X0,X4),happ(s(fun(X2,fun(X0,X4)),X7),s(X2,X8))))),s(X0,happ(s(fun(X9,X0),X10),s(X9,X11)))))) )),
  inference(superposition,[],[f335,f338])).
fof(f51342,plain,(
  ( ! [X850,X848,X852,X843,X847,X845,X851,X849,X846,X844] : (p(s(bool,happ(s(fun(fun(X843,X844),bool),happ(s(fun(fun(X843,X844),fun(fun(X843,X844),bool)),'=_0'),s(fun(X843,X844),X852))),s(fun(X843,X844),happ(s(fun(X849,fun(X843,X844)),'_dst_x00x01x11_3'(s(fun(X845,fun(X846,X844)),X847),s(fun(X843,X845),X848),s(fun(X849,fun(X843,X846)),X850))),s(X849,X851)))))) | s(fun(X843,X844),X852) != s(fun(X843,X844),'_dst_x0x1x1_3'(s(fun(X845,fun(X846,X844)),X847),s(fun(X843,X845),X848),s(fun(X843,X846),happ(s(fun(X849,fun(X843,X846)),X850),s(X849,X851)))))) )),
  inference(superposition,[],[f331,f338])).
fof(f51341,plain,(
  ( ! [X841,X835,X833,X839,X837,X842,X840,X834,X838,X836] : (p(s(bool,happ(s(fun(fun(X833,X834),bool),happ(s(fun(fun(X833,X834),fun(fun(X833,X834),bool)),'=_0'),s(fun(X833,X834),happ(s(fun(X839,fun(X833,X834)),'_dst_x00x01x11_3'(s(fun(X835,fun(X836,X834)),X837),s(fun(X833,X835),X838),s(fun(X839,fun(X833,X836)),X840))),s(X839,X841))))),s(fun(X833,X834),X842)))) | s(fun(X833,X834),X842) != s(fun(X833,X834),'_dst_x0x1x1_3'(s(fun(X835,fun(X836,X834)),X837),s(fun(X833,X835),X838),s(fun(X833,X836),happ(s(fun(X839,fun(X833,X836)),X840),s(X839,X841)))))) )),
  inference(superposition,[],[f331,f338])).
fof(f51340,plain,(
  ( ! [X825,X831,X829,X823,X826,X824,X830,X828,X832,X827] : (~p(s(bool,happ(s(fun(fun(X823,X824),bool),happ(s(fun(fun(X823,X824),fun(fun(X823,X824),bool)),'=_0'),s(fun(X823,X824),X832))),s(fun(X823,X824),happ(s(fun(X829,fun(X823,X824)),'_dst_x00x01x11_3'(s(fun(X825,fun(X826,X824)),X827),s(fun(X823,X825),X828),s(fun(X829,fun(X823,X826)),X830))),s(X829,X831)))))) | s(fun(X823,X824),X832) = s(fun(X823,X824),'_dst_x0x1x1_3'(s(fun(X825,fun(X826,X824)),X827),s(fun(X823,X825),X828),s(fun(X823,X826),happ(s(fun(X829,fun(X823,X826)),X830),s(X829,X831)))))) )),
  inference(superposition,[],[f330,f338])).
fof(f51339,plain,(
  ( ! [X819,X817,X821,X814,X818,X816,X822,X820,X815,X813] : (~p(s(bool,happ(s(fun(fun(X813,X814),bool),happ(s(fun(fun(X813,X814),fun(fun(X813,X814),bool)),'=_0'),s(fun(X813,X814),happ(s(fun(X819,fun(X813,X814)),'_dst_x00x01x11_3'(s(fun(X815,fun(X816,X814)),X817),s(fun(X813,X815),X818),s(fun(X819,fun(X813,X816)),X820))),s(X819,X821))))),s(fun(X813,X814),X822)))) | s(fun(X813,X814),X822) = s(fun(X813,X814),'_dst_x0x1x1_3'(s(fun(X815,fun(X816,X814)),X817),s(fun(X813,X815),X818),s(fun(X813,X816),happ(s(fun(X819,fun(X813,X816)),X820),s(X819,X821)))))) )),
  inference(superposition,[],[f330,f338])).
fof(f51283,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X104] : (p(s(bool,'|dollar|exists_1'(s(fun(X104,bool),happ(s(fun(X109,fun(X104,bool)),'_dst_x00x01x11_3'(s(fun(X105,fun(X106,bool)),X107),s(fun(X104,X105),X108),s(fun(X109,fun(X104,X106)),X110))),s(X109,X111)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X104,bool),'_dst_x0x1x1_3'(s(fun(X105,fun(X106,bool)),X107),s(fun(X104,X105),X108),s(fun(X104,X106),happ(s(fun(X109,fun(X104,X106)),X110),s(X109,X111))))),s(X104,X112)))) )),
  inference(superposition,[],[f2822,f338])).
fof(f51282,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (~p(s(bool,happ(s(fun(X95,bool),happ(s(fun(X100,fun(X95,bool)),'_dst_x00x01x11_3'(s(fun(X96,fun(X97,bool)),X98),s(fun(X95,X96),X99),s(fun(X100,fun(X95,X97)),X101))),s(X100,X102))),s(X95,X103)))) | p(s(bool,'|dollar|exists_1'(s(fun(X95,bool),'_dst_x0x1x1_3'(s(fun(X96,fun(X97,bool)),X98),s(fun(X95,X96),X99),s(fun(X95,X97),happ(s(fun(X100,fun(X95,X97)),X101),s(X100,X102))))))))) )),
  inference(superposition,[],[f2633,f338])).
fof(f51281,plain,(
  ( ! [X94,X92,X90,X88,X87,X93,X91,X89,X86] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X86,bool),happ(s(fun(X91,fun(X86,bool)),'_dst_x00x01x11_3'(s(fun(X87,fun(X88,bool)),X89),s(fun(X86,X87),X90),s(fun(X91,fun(X86,X88)),X92))),s(X91,X93))))) | s(X86,X94) = s(X86,sK3(X94,'_dst_x0x1x1_3'(s(fun(X87,fun(X88,bool)),X89),s(fun(X86,X87),X90),s(fun(X86,X88),happ(s(fun(X91,fun(X86,X88)),X92),s(X91,X93)))),X86))) )),
  inference(superposition,[],[f565,f338])).
fof(f51280,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X77,X84,X82] : (~p(s(bool,happ(s(fun(X77,bool),happ(s(fun(X82,fun(X77,bool)),'_dst_x00x01x11_3'(s(fun(X78,fun(X79,bool)),X80),s(fun(X77,X78),X81),s(fun(X82,fun(X77,X79)),X83))),s(X82,X84))),s(X77,X85)))) | p(s(bool,happ(s(fun(fun(X77,bool),bool),'?_1'),s(fun(X77,bool),'_dst_x0x1x1_3'(s(fun(X78,fun(X79,bool)),X80),s(fun(X77,X78),X81),s(fun(X77,X79),happ(s(fun(X82,fun(X77,X79)),X83),s(X82,X84))))))))) )),
  inference(superposition,[],[f312,f338])).
fof(f51279,plain,(
  ( ! [X70,X76,X74,X72,X71,X69,X75,X73] : (~p(s(bool,happ(s(fun(fun(X69,bool),bool),'?_1'),s(fun(X69,bool),happ(s(fun(X74,fun(X69,bool)),'_dst_x00x01x11_3'(s(fun(X70,fun(X71,bool)),X72),s(fun(X69,X70),X73),s(fun(X74,fun(X69,X71)),X75))),s(X74,X76)))))) | p(s(bool,happ(s(fun(X69,bool),'_dst_x0x1x1_3'(s(fun(X70,fun(X71,bool)),X72),s(fun(X69,X70),X73),s(fun(X69,X71),happ(s(fun(X74,fun(X69,X71)),X75),s(X74,X76))))),s(X69,sK7('_dst_x0x1x1_3'(s(fun(X70,fun(X71,bool)),X72),s(fun(X69,X70),X73),s(fun(X69,X71),happ(s(fun(X74,fun(X69,X71)),X75),s(X74,X76)))),X69)))))) )),
  inference(superposition,[],[f311,f338])).
fof(f51278,plain,(
  ( ! [X61,X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,happ(s(fun(X61,bool),happ(s(fun(X66,fun(X61,bool)),'_dst_x00x01x11_3'(s(fun(X62,fun(X63,bool)),X64),s(fun(X61,X62),X65),s(fun(X66,fun(X61,X63)),X67))),s(X66,X68))),s(X61,sK6('_dst_x0x1x1_3'(s(fun(X62,fun(X63,bool)),X64),s(fun(X61,X62),X65),s(fun(X61,X63),happ(s(fun(X66,fun(X61,X63)),X67),s(X66,X68)))),X61))))) | p(s(bool,happ(s(fun(fun(X61,bool),bool),'!_1'),s(fun(X61,bool),'_dst_x0x1x1_3'(s(fun(X62,fun(X63,bool)),X64),s(fun(X61,X62),X65),s(fun(X61,X63),happ(s(fun(X66,fun(X61,X63)),X67),s(X66,X68))))))))) )),
  inference(superposition,[],[f310,f338])).
fof(f51277,plain,(
  ( ! [X59,X57,X54,X52,X60,X58,X56,X55,X53] : (~p(s(bool,happ(s(fun(fun(X52,bool),bool),'!_1'),s(fun(X52,bool),happ(s(fun(X57,fun(X52,bool)),'_dst_x00x01x11_3'(s(fun(X53,fun(X54,bool)),X55),s(fun(X52,X53),X56),s(fun(X57,fun(X52,X54)),X58))),s(X57,X59)))))) | p(s(bool,happ(s(fun(X52,bool),'_dst_x0x1x1_3'(s(fun(X53,fun(X54,bool)),X55),s(fun(X52,X53),X56),s(fun(X52,X54),happ(s(fun(X57,fun(X52,X54)),X58),s(X57,X59))))),s(X52,X60))))) )),
  inference(superposition,[],[f309,f338])).
fof(f51276,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X51,X49] : (p(s(bool,'|dollar|exists_1'(s(fun(X43,bool),happ(s(fun(X48,fun(X43,bool)),'_dst_x00x01x11_3'(s(fun(X44,fun(X45,bool)),X46),s(fun(X43,X44),X47),s(fun(X48,fun(X43,X45)),X49))),s(X48,X50)))))) | s(X43,X51) = s(X43,sK3(X51,'_dst_x0x1x1_3'(s(fun(X44,fun(X45,bool)),X46),s(fun(X43,X44),X47),s(fun(X43,X45),happ(s(fun(X48,fun(X43,X45)),X49),s(X48,X50)))),X43))) )),
  inference(superposition,[],[f288,f338])).
fof(f51270,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X10),'_dst_x0x1x1_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X9,X12),X15),s(fun(X9,X13),happ(s(fun(X11,fun(X9,X13)),X16),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19))))))) = s(fun(X9,X10),happ(s(fun(X17,fun(X9,X10)),'_dst_x0x1_2'(s(fun(X11,fun(X9,X10)),'_dst_x00x01x11_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X9,X12),X15),s(fun(X11,fun(X9,X13)),X16))),s(fun(X17,X11),X18))),s(X17,X19)))) )),
  inference(superposition,[],[f338,f333])).
fof(f51072,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X143,X150,X148] : (s(fun(X143,X148),'_dst_x0x1x1_3'(s(fun(X149,fun(X144,X148)),X150),s(fun(X143,X149),X151),s(fun(X143,X144),'const.ind_type.FCONS_3'(s(fun(X143,X144),X146),s(fun('type.num.num',fun(X143,X144)),X145),s('type.num.num',X147))))) = s(fun(X143,X148),happ(s(fun('type.num.num',fun(X143,X148)),'_dst_x00x01x11_3'(s(fun(X149,fun(X144,X148)),X150),s(fun(X143,X149),X151),s(fun('type.num.num',fun(X143,X144)),happ(s(fun(fun(X143,X144),fun('type.num.num',fun(X143,X144))),'_dst_x1x0_2'(s(fun(fun(X143,X144),fun(fun('type.num.num',fun(X143,X144)),fun('type.num.num',fun(X143,X144)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X143,X144)),X145))),s(fun(X143,X144),X146))))),s('type.num.num',X147)))) )),
  inference(superposition,[],[f338,f347])).
fof(f51071,plain,(
  ( ! [X127,X125,X123,X121,X132,X130,X128,X126,X124,X122,X133,X131,X129] : (s(fun(X121,X130),happ(s(fun(X123,fun(X121,X130)),'_dst_x00x01x11_3'(s(fun(X131,fun(X122,X130)),X132),s(fun(X121,X131),X133),s(fun(X123,fun(X121,X122)),'_dst_x0x0x1_3'(s(fun(X124,fun(X125,fun(X121,X122))),X126),s(X124,X127),s(fun(X123,X125),X128))))),s(X123,X129))) = s(fun(X121,X130),'_dst_x0x1x1_3'(s(fun(X131,fun(X122,X130)),X132),s(fun(X121,X131),X133),s(fun(X121,X122),happ(s(fun(X125,fun(X121,X122)),happ(s(fun(X124,fun(X125,fun(X121,X122))),X126),s(X124,X127))),s(X125,happ(s(fun(X123,X125),X128),s(X123,X129)))))))) )),
  inference(superposition,[],[f338,f335])).
fof(f51070,plain,(
  ( ! [X111,X118,X116,X114,X112,X120,X110,X119,X117,X115,X113] : (s(fun(X110,X117),'_dst_x0x1x1_3'(s(fun(X118,fun(X111,X117)),X119),s(fun(X110,X118),X120),s(fun(X110,X111),happ(s(fun(X113,fun(X110,X111)),happ(s(fun(X112,fun(X113,fun(X110,X111))),X114),s(X112,X116))),s(X113,X115))))) = s(fun(X110,X117),happ(s(fun(X112,fun(X110,X117)),'_dst_x00x01x11_3'(s(fun(X118,fun(X111,X117)),X119),s(fun(X110,X118),X120),s(fun(X112,fun(X110,X111)),'_dst_x1x0_2'(s(fun(X112,fun(X113,fun(X110,X111))),X114),s(X113,X115))))),s(X112,X116)))) )),
  inference(superposition,[],[f338,f334])).
fof(f51069,plain,(
  ( ! [X103,X101,X109,X107,X105,X102,X108,X106,X104] : (s(fun(X101,X106),'_dst_x0x1x1_3'(s(fun(X107,fun(X102,X106)),X108),s(fun(X101,X107),X109),s(fun(X101,X102),X104))) = s(fun(X101,X106),happ(s(fun(X103,fun(X101,X106)),'_dst_x00x01x11_3'(s(fun(X107,fun(X102,X106)),X108),s(fun(X101,X107),X109),s(fun(X103,fun(X101,X102)),'_dst_x0_1'(s(fun(X101,X102),X104))))),s(X103,X105)))) )),
  inference(superposition,[],[f338,f320])).
fof(f51068,plain,(
  ( ! [X94,X92,X90,X88,X99,X97,X95,X93,X91,X89,X100,X98,X96] : (s(fun(X88,X97),'_dst_x0x1x1_3'(s(fun(X98,fun(X89,X97)),X99),s(fun(X88,X98),X100),s(fun(X88,X89),happ(s(fun(X93,fun(X88,X89)),'_dst_x0x1x1_3'(s(fun(X91,fun(X90,fun(X88,X89))),X92),s(fun(X93,X91),X94),s(fun(X93,X90),X96))),s(X93,X95))))) = s(fun(X88,X97),happ(s(fun(X90,fun(X88,X97)),'_dst_x00x01x11_3'(s(fun(X98,fun(X89,X97)),X99),s(fun(X88,X98),X100),s(fun(X90,fun(X88,X89)),happ(s(fun(X91,fun(X90,fun(X88,X89))),X92),s(X91,happ(s(fun(X93,X91),X94),s(X93,X95))))))),s(X90,happ(s(fun(X93,X90),X96),s(X93,X95)))))) )),
  inference(superposition,[],[f338,f336])).
fof(f51067,plain,(
  ( ! [X80,X78,X76,X87,X85,X83,X81,X79,X77,X75,X86,X84,X82] : (s(fun(X75,X84),'_dst_x0x1x1_3'(s(fun(X85,fun(X76,X84)),X86),s(fun(X75,X85),X87),s(fun(X75,X76),happ(s(fun(X81,fun(X75,X76)),'_dst_x0x0x1_3'(s(fun(X78,fun(X77,fun(X75,X76))),X79),s(X78,X80),s(fun(X81,X77),X82))),s(X81,X83))))) = s(fun(X75,X84),happ(s(fun(X77,fun(X75,X84)),'_dst_x00x01x11_3'(s(fun(X85,fun(X76,X84)),X86),s(fun(X75,X85),X87),s(fun(X77,fun(X75,X76)),happ(s(fun(X78,fun(X77,fun(X75,X76))),X79),s(X78,X80))))),s(X77,happ(s(fun(X81,X77),X82),s(X81,X83)))))) )),
  inference(superposition,[],[f338,f335])).
fof(f51066,plain,(
  ( ! [X70,X68,X66,X64,X74,X72,X71,X69,X67,X65,X73] : (s(fun(X64,X71),'_dst_x0x1x1_3'(s(fun(X72,fun(X65,X71)),X73),s(fun(X64,X72),X74),s(fun(X64,X65),happ(s(fun(X67,fun(X64,X65)),'_dst_x1x0_2'(s(fun(X67,fun(X66,fun(X64,X65))),X68),s(X66,X70))),s(X67,X69))))) = s(fun(X64,X71),happ(s(fun(X66,fun(X64,X71)),'_dst_x00x01x11_3'(s(fun(X72,fun(X65,X71)),X73),s(fun(X64,X72),X74),s(fun(X66,fun(X64,X65)),happ(s(fun(X67,fun(X66,fun(X64,X65))),X68),s(X67,X69))))),s(X66,X70)))) )),
  inference(superposition,[],[f338,f334])).
fof(f51065,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55,X53,X63] : (s(fun(X53,X60),'_dst_x0x1x1_3'(s(fun(X61,fun(X54,X60)),X62),s(fun(X53,X61),X63),s(fun(X53,X54),happ(s(fun(X56,fun(X53,X54)),X57),s(X56,happ(s(fun(X55,X56),X58),s(X55,X59))))))) = s(fun(X53,X60),happ(s(fun(X55,fun(X53,X60)),'_dst_x00x01x11_3'(s(fun(X61,fun(X54,X60)),X62),s(fun(X53,X61),X63),s(fun(X55,fun(X53,X54)),'_dst_x0x1_2'(s(fun(X56,fun(X53,X54)),X57),s(fun(X55,X56),X58))))),s(X55,X59)))) )),
  inference(superposition,[],[f338,f333])).
fof(f51064,plain,(
  ( ! [X47,X45,X43,X52,X50,X48,X46,X44,X42,X51,X49] : (s(fun(X42,X49),happ(s(fun(X44,fun(X42,X49)),'_dst_x00x01x11_3'(s(fun(X50,fun(X43,X49)),X51),s(fun(X42,X50),X52),s(fun(X44,fun(X42,X43)),X45))),s(X44,happ(s(fun(X46,X44),X47),s(X46,X48))))) = s(fun(X42,X49),'_dst_x0x1x1_3'(s(fun(X50,fun(X43,X49)),X51),s(fun(X42,X50),X52),s(fun(X42,X43),happ(s(fun(X46,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X44,fun(X42,X43)),X45),s(fun(X46,X44),X47))),s(X46,X48)))))) )),
  inference(superposition,[],[f338,f333])).
fof(f51063,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X34,X32,X22] : (s(fun(X22,X31),'_dst_x0x1x1_3'(s(fun(X32,fun(X23,X31)),X33),s(fun(X22,X32),X34),s(fun(X22,X23),'_dst_x0x1x1_3'(s(fun(X25,fun(X26,X23)),X27),s(fun(X22,X25),X28),s(fun(X22,X26),happ(s(fun(X24,fun(X22,X26)),X29),s(X24,X30))))))) = s(fun(X22,X31),happ(s(fun(X24,fun(X22,X31)),'_dst_x00x01x11_3'(s(fun(X32,fun(X23,X31)),X33),s(fun(X22,X32),X34),s(fun(X24,fun(X22,X23)),'_dst_x00x01x11_3'(s(fun(X25,fun(X26,X23)),X27),s(fun(X22,X25),X28),s(fun(X24,fun(X22,X26)),X29))))),s(X24,X30)))) )),
  inference(superposition,[],[f338,f338])).
fof(f51062,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X9,X20,X18,X16] : (s(fun(X9,X18),'_dst_x0x1x1_3'(s(fun(X19,fun(X10,X18)),X20),s(fun(X9,X19),X21),s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,happ(s(fun(X11,X12),X15),s(X11,X17))),s(fun(X9,X13),X16))))) = s(fun(X9,X18),happ(s(fun(X11,fun(X9,X18)),'_dst_x00x01x11_3'(s(fun(X19,fun(X10,X18)),X20),s(fun(X9,X19),X21),s(fun(X11,fun(X9,X10)),'_dst_x00x10x01_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,X12),X15),s(fun(X9,X13),X16))))),s(X11,X17)))) )),
  inference(superposition,[],[f338,f337])).
fof(f51061,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(fun(X0,X1),X5),'_dst_x0x1x1_3'(s(fun(X6,fun(X1,X5)),X7),s(fun(fun(X0,X1),X6),X8),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s(fun(fun(X0,X1),X5),happ(s(fun(X2,fun(fun(X0,X1),X5)),'_dst_x00x01x11_3'(s(fun(X6,fun(X1,X5)),X7),s(fun(fun(X0,X1),X6),X8),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))))),s(X2,X4)))) )),
  inference(superposition,[],[f338,f332])).
fof(f51059,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),X5),s(fun(X0,X3),happ(s(fun(X6,fun(X0,X3)),X7),s(X6,X8))))))),s(fun(X0,X1),happ(s(fun(X6,fun(X0,X1)),'_dst_x00x01x11_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),X5),s(fun(X6,fun(X0,X3)),X7))),s(X6,X8))))))) )),
  inference(unit_resulting_resolution,[],[f338,f331])).
fof(f51060,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x01x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),X6),s(fun(X2,fun(X0,X4)),X7))),s(X2,X8))))),s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),X6),s(fun(X0,X4),happ(s(fun(X2,fun(X0,X4)),X7),s(X2,X8))))))))) )),
  inference(unit_resulting_resolution,[],[f338,f331])).
fof(f51050,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,'F_0') = s(bool,happ(s(fun(X82,bool),X83),s(X82,X84))) | s(bool,X85) = s(bool,'|dollar|exists_1'(s(fun(X82,bool),X83))) | s(bool,'F_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f51015,f342])).
fof(f51015,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,happ(s(fun(X82,bool),X83),s(X82,X84))) | s(bool,X85) = s(bool,'|dollar|exists_1'(s(fun(X82,bool),X83))) | s(bool,'F_0') = s(bool,X85)) )),
  inference(superposition,[],[f2822,f1108])).
fof(f51044,plain,(
  ( ! [X47,X48,X46] : (s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X46,bool),X47)))) )),
  inference(subsumption_resolution,[],[f51006,f342])).
fof(f51006,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X46,bool),X47)))) )),
  inference(superposition,[],[f2822,f242])).
fof(f50984,plain,(
  ( ! [X163,X161,X164,X162] : (p(s(bool,'|dollar|exists_1'(s(fun(X161,bool),X162)))) | s(bool,'F_0') = s(bool,happ(s(fun(X161,bool),sK3(X162,X163,fun(X161,bool))),s(X161,X164))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X161,bool),bool),X163)))) )),
  inference(superposition,[],[f2822,f565])).
fof(f50972,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X77,X84,X82] : (p(s(bool,'|dollar|exists_1'(s(fun(X77,bool),happ(s(fun(X80,fun(X77,bool)),happ(s(fun(X79,fun(X80,fun(X77,bool))),X81),s(X79,X82))),s(X80,happ(s(fun(X78,X80),X83),s(X78,X84)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X77,bool),happ(s(fun(X78,fun(X77,bool)),'_dst_x0x0x1_3'(s(fun(X79,fun(X80,fun(X77,bool))),X81),s(X79,X82),s(fun(X78,X80),X83))),s(X78,X84))),s(X77,X85)))) )),
  inference(superposition,[],[f2822,f335])).
fof(f50971,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (p(s(bool,'|dollar|exists_1'(s(fun(X70,bool),happ(s(fun(X72,fun(X70,bool)),happ(s(fun(X71,fun(X72,fun(X70,bool))),X73),s(X71,X75))),s(X72,X74)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X70,bool),happ(s(fun(X71,fun(X70,bool)),'_dst_x1x0_2'(s(fun(X71,fun(X72,fun(X70,bool))),X73),s(X72,X74))),s(X71,X75))),s(X70,X76)))) )),
  inference(superposition,[],[f2822,f334])).
fof(f50968,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (p(s(bool,'|dollar|exists_1'(s(fun(X47,bool),happ(s(fun(X52,fun(X47,bool)),'_dst_x0x0x1_3'(s(fun(X49,fun(X48,fun(X47,bool))),X50),s(X49,X51),s(fun(X52,X48),X53))),s(X52,X54)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X47,bool),happ(s(fun(X48,fun(X47,bool)),happ(s(fun(X49,fun(X48,fun(X47,bool))),X50),s(X49,X51))),s(X48,happ(s(fun(X52,X48),X53),s(X52,X54))))),s(X47,X55)))) )),
  inference(superposition,[],[f2822,f335])).
fof(f50967,plain,(
  ( ! [X45,X43,X41,X46,X44,X42,X40] : (p(s(bool,'|dollar|exists_1'(s(fun(X40,bool),happ(s(fun(X42,fun(X40,bool)),'_dst_x1x0_2'(s(fun(X42,fun(X41,fun(X40,bool))),X43),s(X41,X45))),s(X42,X44)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X40,bool),happ(s(fun(X41,fun(X40,bool)),happ(s(fun(X42,fun(X41,fun(X40,bool))),X43),s(X42,X44))),s(X41,X45))),s(X40,X46)))) )),
  inference(superposition,[],[f2822,f334])).
fof(f50966,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34] : (p(s(bool,'|dollar|exists_1'(s(fun(X33,bool),happ(s(fun(X35,fun(X33,bool)),X36),s(X35,happ(s(fun(X34,X35),X37),s(X34,X38)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X33,bool),happ(s(fun(X34,fun(X33,bool)),'_dst_x0x1_2'(s(fun(X35,fun(X33,bool)),X36),s(fun(X34,X35),X37))),s(X34,X38))),s(X33,X39)))) )),
  inference(superposition,[],[f2822,f333])).
fof(f50965,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X32] : (p(s(bool,'|dollar|exists_1'(s(fun(X26,bool),happ(s(fun(X29,fun(X26,bool)),'_dst_x0x1_2'(s(fun(X27,fun(X26,bool)),X28),s(fun(X29,X27),X30))),s(X29,X31)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X28),s(X27,happ(s(fun(X29,X27),X30),s(X29,X31))))),s(X26,X32)))) )),
  inference(superposition,[],[f2822,f333])).
fof(f50963,plain,(
  ( ! [X14,X21,X19,X17,X15,X22,X20,X18,X16] : (p(s(bool,'|dollar|exists_1'(s(fun(X14,bool),happ(s(fun(X18,fun(X14,bool)),'_dst_x00x10x01_3'(s(fun(X15,fun(X16,bool)),X17),s(fun(X18,X15),X19),s(fun(X14,X16),X21))),s(X18,X20)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X14,bool),'_dst_x0x0x1_3'(s(fun(X15,fun(X16,bool)),X17),s(X15,happ(s(fun(X18,X15),X19),s(X18,X20))),s(fun(X14,X16),X21))),s(X14,X22)))) )),
  inference(superposition,[],[f2822,f337])).
fof(f50962,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X13,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X5,bool),'_dst_x0x0x1_3'(s(fun(X7,fun(X8,bool)),X9),s(X7,happ(s(fun(X6,X7),X10),s(X6,X12))),s(fun(X5,X8),X11)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),'_dst_x00x10x01_3'(s(fun(X7,fun(X8,bool)),X9),s(fun(X6,X7),X10),s(fun(X5,X8),X11))),s(X6,X12))),s(X5,X13)))) )),
  inference(superposition,[],[f2822,f337])).
fof(f50542,plain,(
  ( ! [X2027,X2025,X2023,X2021,X2019,X2028,X2026,X2024,X2022,X2020] : (s('type.fcp.cart'(bool,X2019),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X2019),happ(s(fun(X2023,'type.fcp.cart'(bool,X2019)),'_dst_x0x1x1_3'(s(fun(X2021,fun(X2020,'type.fcp.cart'(bool,X2019))),X2022),s(fun(X2023,X2021),X2024),s(fun(X2023,X2020),X2026))),s(X2023,X2025))) | p(s(bool,sK4(X2027,X2028,happ(s(fun(X2020,'type.fcp.cart'(bool,X2019)),happ(s(fun(X2021,fun(X2020,'type.fcp.cart'(bool,X2019))),X2022),s(X2021,happ(s(fun(X2023,X2021),X2024),s(X2023,X2025))))),s(X2020,happ(s(fun(X2023,X2020),X2026),s(X2023,X2025)))),X2019)))) )),
  inference(superposition,[],[f302,f336])).
fof(f50687,plain,(
  ( ! [X2006,X2004,X2002,X2000,X1998,X2007,X2005,X2003,X2001,X1999] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X2006,X2007,happ(s(fun(X2002,'type.fcp.cart'(bool,X1998)),'_dst_x0x1x1_3'(s(fun(X2000,fun(X1999,'type.fcp.cart'(bool,X1998))),X2001),s(fun(X2002,X2000),X2003),s(fun(X2002,X1999),X2005))),s(X2002,X2004)),X1998)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X2006,X2007,happ(s(fun(X1999,'type.fcp.cart'(bool,X1998)),happ(s(fun(X2000,fun(X1999,'type.fcp.cart'(bool,X1998))),X2001),s(X2000,happ(s(fun(X2002,X2000),X2003),s(X2002,X2004))))),s(X1999,happ(s(fun(X2002,X1999),X2005),s(X2002,X2004)))),X1998)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f50540,f303])).
fof(f50540,plain,(
  ( ! [X2006,X2004,X2002,X2000,X1998,X2007,X2005,X2003,X2001,X1999] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1998),'const.wordSem.Loc_2'(s('type.num.num',X2006),s('type.num.num',X2007))),s('type.wordSem.word_loc'(X1998),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1998),happ(s(fun(X2002,'type.fcp.cart'(bool,X1998)),'_dst_x0x1x1_3'(s(fun(X2000,fun(X1999,'type.fcp.cart'(bool,X1998))),X2001),s(fun(X2002,X2000),X2003),s(fun(X2002,X1999),X2005))),s(X2002,X2004))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X2006,X2007,happ(s(fun(X1999,'type.fcp.cart'(bool,X1998)),happ(s(fun(X2000,fun(X1999,'type.fcp.cart'(bool,X1998))),X2001),s(X2000,happ(s(fun(X2002,X2000),X2003),s(X2002,X2004))))),s(X1999,happ(s(fun(X2002,X1999),X2005),s(X2002,X2004)))),X1998)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f336])).
fof(f50686,plain,(
  ( ! [X1963,X1961,X1959,X1957,X1955,X1962,X1960,X1958,X1956,X1954] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1961,happ(s(fun(X1957,'type.num.num'),'_dst_x0x1x1_3'(s(fun(X1955,fun(X1954,'type.num.num')),X1956),s(fun(X1957,X1955),X1958),s(fun(X1957,X1954),X1960))),s(X1957,X1959)),X1962,X1963)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1961,happ(s(fun(X1954,'type.num.num'),happ(s(fun(X1955,fun(X1954,'type.num.num')),X1956),s(X1955,happ(s(fun(X1957,X1955),X1958),s(X1957,X1959))))),s(X1954,happ(s(fun(X1957,X1954),X1960),s(X1957,X1959)))),X1962,X1963)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f50536,f303])).
fof(f50536,plain,(
  ( ! [X1963,X1961,X1959,X1957,X1955,X1962,X1960,X1958,X1956,X1954] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1963),'const.wordSem.Loc_2'(s('type.num.num',X1961),s('type.num.num',happ(s(fun(X1957,'type.num.num'),'_dst_x0x1x1_3'(s(fun(X1955,fun(X1954,'type.num.num')),X1956),s(fun(X1957,X1955),X1958),s(fun(X1957,X1954),X1960))),s(X1957,X1959))))),s('type.wordSem.word_loc'(X1963),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1963),X1962))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1961,happ(s(fun(X1954,'type.num.num'),happ(s(fun(X1955,fun(X1954,'type.num.num')),X1956),s(X1955,happ(s(fun(X1957,X1955),X1958),s(X1957,X1959))))),s(X1954,happ(s(fun(X1957,X1954),X1960),s(X1957,X1959)))),X1962,X1963)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f336])).
fof(f50685,plain,(
  ( ! [X1948,X1946,X1944,X1953,X1951,X1949,X1947,X1945,X1952,X1950] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1947,'type.num.num'),'_dst_x0x1x1_3'(s(fun(X1945,fun(X1944,'type.num.num')),X1946),s(fun(X1947,X1945),X1948),s(fun(X1947,X1944),X1950))),s(X1947,X1949)),X1951,X1952,X1953)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1944,'type.num.num'),happ(s(fun(X1945,fun(X1944,'type.num.num')),X1946),s(X1945,happ(s(fun(X1947,X1945),X1948),s(X1947,X1949))))),s(X1944,happ(s(fun(X1947,X1944),X1950),s(X1947,X1949)))),X1951,X1952,X1953)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f50535,f303])).
fof(f50535,plain,(
  ( ! [X1948,X1946,X1944,X1953,X1951,X1949,X1947,X1945,X1952,X1950] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1953),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1947,'type.num.num'),'_dst_x0x1x1_3'(s(fun(X1945,fun(X1944,'type.num.num')),X1946),s(fun(X1947,X1945),X1948),s(fun(X1947,X1944),X1950))),s(X1947,X1949))),s('type.num.num',X1951))),s('type.wordSem.word_loc'(X1953),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1953),X1952))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1944,'type.num.num'),happ(s(fun(X1945,fun(X1944,'type.num.num')),X1946),s(X1945,happ(s(fun(X1947,X1945),X1948),s(X1947,X1949))))),s(X1944,happ(s(fun(X1947,X1944),X1950),s(X1947,X1949)))),X1951,X1952,X1953)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f336])).
fof(f50521,plain,(
  ( ! [X1812,X1810,X1808,X1806,X1804,X1811,X1809,X1807,X1805] : (s('type.stackSem.result'(X1804),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1804),X1812))) != s('type.stackSem.result'(X1804),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1804),happ(s(fun(X1808,'type.wordSem.word_loc'(X1804)),'_dst_x0x1x1_3'(s(fun(X1806,fun(X1805,'type.wordSem.word_loc'(X1804))),X1807),s(fun(X1808,X1806),X1809),s(fun(X1808,X1805),X1811))),s(X1808,X1810))))) | s('type.wordSem.word_loc'(X1804),X1812) = s('type.wordSem.word_loc'(X1804),happ(s(fun(X1805,'type.wordSem.word_loc'(X1804)),happ(s(fun(X1806,fun(X1805,'type.wordSem.word_loc'(X1804))),X1807),s(X1806,happ(s(fun(X1808,X1806),X1809),s(X1808,X1810))))),s(X1805,happ(s(fun(X1808,X1805),X1811),s(X1808,X1810)))))) )),
  inference(superposition,[],[f294,f336])).
fof(f50517,plain,(
  ( ! [X1769,X1771,X1773,X1775,X1776,X1768,X1770,X1772,X1774] : (s('type.stackSem.result'(X1768),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1768),X1776))) != s('type.stackSem.result'(X1768),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1768),happ(s(fun(X1772,'type.wordSem.word_loc'(X1768)),'_dst_x0x1x1_3'(s(fun(X1770,fun(X1769,'type.wordSem.word_loc'(X1768))),X1771),s(fun(X1772,X1770),X1773),s(fun(X1772,X1769),X1775))),s(X1772,X1774))))) | s('type.wordSem.word_loc'(X1768),X1776) = s('type.wordSem.word_loc'(X1768),happ(s(fun(X1769,'type.wordSem.word_loc'(X1768)),happ(s(fun(X1770,fun(X1769,'type.wordSem.word_loc'(X1768))),X1771),s(X1770,happ(s(fun(X1772,X1770),X1773),s(X1772,X1774))))),s(X1769,happ(s(fun(X1772,X1769),X1775),s(X1772,X1774)))))) )),
  inference(superposition,[],[f292,f336])).
fof(f50513,plain,(
  ( ! [X1732,X1734,X1736,X1738,X1740,X1733,X1735,X1737,X1739] : (s('type.stackSem.result'(X1732),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1732),X1740))) != s('type.stackSem.result'(X1732),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1732),happ(s(fun(X1736,'type.wordSem.word_loc'(X1732)),'_dst_x0x1x1_3'(s(fun(X1734,fun(X1733,'type.wordSem.word_loc'(X1732))),X1735),s(fun(X1736,X1734),X1737),s(fun(X1736,X1733),X1739))),s(X1736,X1738))))) | s('type.wordSem.word_loc'(X1732),X1740) = s('type.wordSem.word_loc'(X1732),happ(s(fun(X1733,'type.wordSem.word_loc'(X1732)),happ(s(fun(X1734,fun(X1733,'type.wordSem.word_loc'(X1732))),X1735),s(X1734,happ(s(fun(X1736,X1734),X1737),s(X1736,X1738))))),s(X1733,happ(s(fun(X1736,X1733),X1739),s(X1736,X1738)))))) )),
  inference(superposition,[],[f290,f336])).
fof(f50504,plain,(
  ( ! [X1663,X1664,X1658,X1660,X1662,X1659,X1661] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1661,'type.wordSem.word_loc'(sK0)),'_dst_x0x1x1_3'(s(fun(X1659,fun(X1658,'type.wordSem.word_loc'(sK0))),X1660),s(fun(X1661,X1659),X1662),s(fun(X1661,X1658),X1664))),s(X1661,X1663))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1658,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1659,fun(X1658,'type.wordSem.word_loc'(sK0))),X1660),s(X1659,happ(s(fun(X1661,X1659),X1662),s(X1661,X1663))))),s(X1658,happ(s(fun(X1661,X1658),X1664),s(X1661,X1663)))))) )),
  inference(superposition,[],[f2643,f336])).
fof(f50500,plain,(
  ( ! [X1630,X1633,X1627,X1629,X1631,X1632,X1626,X1628] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1629,'type.wordSem.word_loc'(sK0)),'_dst_x0x1x1_3'(s(fun(X1627,fun(X1626,'type.wordSem.word_loc'(sK0))),X1628),s(fun(X1629,X1627),X1630),s(fun(X1629,X1626),X1632))),s(X1629,X1631))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X1626,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1627,fun(X1626,'type.wordSem.word_loc'(sK0))),X1628),s(X1627,happ(s(fun(X1629,X1627),X1630),s(X1629,X1631))))),s(X1626,happ(s(fun(X1629,X1626),X1632),s(X1629,X1631)))),X1633,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1633)))) )),
  inference(superposition,[],[f2654,f336])).
fof(f50465,plain,(
  ( ! [X1194,X1192,X1196,X1190,X1195,X1193,X1197,X1191,X1189] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1189,bool),happ(s(fun(X1193,fun(X1189,bool)),'_dst_x0x1x1_3'(s(fun(X1191,fun(X1190,fun(X1189,bool))),X1192),s(fun(X1193,X1191),X1194),s(fun(X1193,X1190),X1196))),s(X1193,X1195))))) | s(X1189,X1197) = s(X1189,sK3(X1197,happ(s(fun(X1190,fun(X1189,bool)),happ(s(fun(X1191,fun(X1190,fun(X1189,bool))),X1192),s(X1191,happ(s(fun(X1193,X1191),X1194),s(X1193,X1195))))),s(X1190,happ(s(fun(X1193,X1190),X1196),s(X1193,X1195)))),X1189))) )),
  inference(superposition,[],[f565,f336])).
fof(f50673,plain,(
  ( ! [X1174,X1172,X1179,X1177,X1175,X1173,X1178,X1176] : (p(s(bool,happ(s(fun(X1172,bool),happ(s(fun(X1176,fun(X1172,bool)),'_dst_x0x1x1_3'(s(fun(X1174,fun(X1173,fun(X1172,bool))),X1175),s(fun(X1176,X1174),X1177),s(fun(X1176,X1173),X1179))),s(X1176,X1178))),s(X1172,sK7(happ(s(fun(X1173,fun(X1172,bool)),happ(s(fun(X1174,fun(X1173,fun(X1172,bool))),X1175),s(X1174,happ(s(fun(X1176,X1174),X1177),s(X1176,X1178))))),s(X1173,happ(s(fun(X1176,X1173),X1179),s(X1176,X1178)))),X1172))))) | ~p(s(bool,happ(s(fun(fun(X1172,bool),bool),'?_1'),s(fun(X1172,bool),happ(s(fun(X1176,fun(X1172,bool)),'_dst_x0x1x1_3'(s(fun(X1174,fun(X1173,fun(X1172,bool))),X1175),s(fun(X1176,X1174),X1177),s(fun(X1176,X1173),X1179))),s(X1176,X1178))))))) )),
  inference(forward_demodulation,[],[f50463,f336])).
fof(f50463,plain,(
  ( ! [X1174,X1172,X1179,X1177,X1175,X1173,X1178,X1176] : (~p(s(bool,happ(s(fun(fun(X1172,bool),bool),'?_1'),s(fun(X1172,bool),happ(s(fun(X1176,fun(X1172,bool)),'_dst_x0x1x1_3'(s(fun(X1174,fun(X1173,fun(X1172,bool))),X1175),s(fun(X1176,X1174),X1177),s(fun(X1176,X1173),X1179))),s(X1176,X1178)))))) | p(s(bool,happ(s(fun(X1172,bool),happ(s(fun(X1173,fun(X1172,bool)),happ(s(fun(X1174,fun(X1173,fun(X1172,bool))),X1175),s(X1174,happ(s(fun(X1176,X1174),X1177),s(X1176,X1178))))),s(X1173,happ(s(fun(X1176,X1173),X1179),s(X1176,X1178))))),s(X1172,sK7(happ(s(fun(X1173,fun(X1172,bool)),happ(s(fun(X1174,fun(X1173,fun(X1172,bool))),X1175),s(X1174,happ(s(fun(X1176,X1174),X1177),s(X1176,X1178))))),s(X1173,happ(s(fun(X1176,X1173),X1179),s(X1176,X1178)))),X1172)))))) )),
  inference(superposition,[],[f311,f336])).
fof(f50672,plain,(
  ( ! [X1170,X1168,X1167,X1165,X1171,X1169,X1166,X1164] : (p(s(bool,happ(s(fun(fun(X1164,bool),bool),'!_1'),s(fun(X1164,bool),happ(s(fun(X1168,fun(X1164,bool)),'_dst_x0x1x1_3'(s(fun(X1166,fun(X1165,fun(X1164,bool))),X1167),s(fun(X1168,X1166),X1169),s(fun(X1168,X1165),X1171))),s(X1168,X1170)))))) | ~p(s(bool,happ(s(fun(X1164,bool),happ(s(fun(X1168,fun(X1164,bool)),'_dst_x0x1x1_3'(s(fun(X1166,fun(X1165,fun(X1164,bool))),X1167),s(fun(X1168,X1166),X1169),s(fun(X1168,X1165),X1171))),s(X1168,X1170))),s(X1164,sK6(happ(s(fun(X1165,fun(X1164,bool)),happ(s(fun(X1166,fun(X1165,fun(X1164,bool))),X1167),s(X1166,happ(s(fun(X1168,X1166),X1169),s(X1168,X1170))))),s(X1165,happ(s(fun(X1168,X1165),X1171),s(X1168,X1170)))),X1164)))))) )),
  inference(forward_demodulation,[],[f50462,f336])).
fof(f50462,plain,(
  ( ! [X1170,X1168,X1167,X1165,X1171,X1169,X1166,X1164] : (~p(s(bool,happ(s(fun(X1164,bool),happ(s(fun(X1168,fun(X1164,bool)),'_dst_x0x1x1_3'(s(fun(X1166,fun(X1165,fun(X1164,bool))),X1167),s(fun(X1168,X1166),X1169),s(fun(X1168,X1165),X1171))),s(X1168,X1170))),s(X1164,sK6(happ(s(fun(X1165,fun(X1164,bool)),happ(s(fun(X1166,fun(X1165,fun(X1164,bool))),X1167),s(X1166,happ(s(fun(X1168,X1166),X1169),s(X1168,X1170))))),s(X1165,happ(s(fun(X1168,X1165),X1171),s(X1168,X1170)))),X1164))))) | p(s(bool,happ(s(fun(fun(X1164,bool),bool),'!_1'),s(fun(X1164,bool),happ(s(fun(X1165,fun(X1164,bool)),happ(s(fun(X1166,fun(X1165,fun(X1164,bool))),X1167),s(X1166,happ(s(fun(X1168,X1166),X1169),s(X1168,X1170))))),s(X1165,happ(s(fun(X1168,X1165),X1171),s(X1168,X1170))))))))) )),
  inference(superposition,[],[f310,f336])).
fof(f50460,plain,(
  ( ! [X1151,X1149,X1153,X1146,X1150,X1148,X1154,X1152,X1147] : (p(s(bool,'|dollar|exists_1'(s(fun(X1146,bool),happ(s(fun(X1150,fun(X1146,bool)),'_dst_x0x1x1_3'(s(fun(X1148,fun(X1147,fun(X1146,bool))),X1149),s(fun(X1150,X1148),X1151),s(fun(X1150,X1147),X1153))),s(X1150,X1152)))))) | s(X1146,X1154) = s(X1146,sK3(X1154,happ(s(fun(X1147,fun(X1146,bool)),happ(s(fun(X1148,fun(X1147,fun(X1146,bool))),X1149),s(X1148,happ(s(fun(X1150,X1148),X1151),s(X1150,X1152))))),s(X1147,happ(s(fun(X1150,X1147),X1153),s(X1150,X1152)))),X1146))) )),
  inference(superposition,[],[f288,f336])).
fof(f50454,plain,(
  ( ! [X1099,X1097,X1101,X1095,X1093,X1098,X1096,X1102,X1100,X1094] : (s(X1094,happ(s(fun(X1093,X1094),happ(s(fun(X1098,fun(X1093,X1094)),'_dst_x0x1x1_3'(s(fun(X1096,fun(X1095,fun(X1093,X1094))),X1097),s(fun(X1098,X1096),X1099),s(fun(X1098,X1095),X1101))),s(X1098,X1100))),s(X1093,X1102))) = s(X1094,happ(s(fun(X1095,X1094),'_dst_x1x0_2'(s(fun(X1095,fun(X1093,X1094)),happ(s(fun(X1096,fun(X1095,fun(X1093,X1094))),X1097),s(X1096,happ(s(fun(X1098,X1096),X1099),s(X1098,X1100))))),s(X1093,X1102))),s(X1095,happ(s(fun(X1098,X1095),X1101),s(X1098,X1100)))))) )),
  inference(superposition,[],[f334,f336])).
fof(f50453,plain,(
  ( ! [X1081,X1087,X1085,X1091,X1089,X1082,X1086,X1084,X1090,X1088,X1092,X1083] : (s(X1082,happ(s(fun(X1081,X1082),happ(s(fun(X1086,fun(X1081,X1082)),'_dst_x0x1x1_3'(s(fun(X1084,fun(X1083,fun(X1081,X1082))),X1085),s(fun(X1086,X1084),X1087),s(fun(X1086,X1083),X1089))),s(X1086,X1088))),s(X1081,happ(s(fun(X1090,X1081),X1091),s(X1090,X1092))))) = s(X1082,happ(s(fun(X1090,X1082),'_dst_x0x0x1_3'(s(fun(X1083,fun(X1081,X1082)),happ(s(fun(X1084,fun(X1083,fun(X1081,X1082))),X1085),s(X1084,happ(s(fun(X1086,X1084),X1087),s(X1086,X1088))))),s(X1083,happ(s(fun(X1086,X1083),X1089),s(X1086,X1088))),s(fun(X1090,X1081),X1091))),s(X1090,X1092)))) )),
  inference(superposition,[],[f335,f336])).
fof(f50447,plain,(
  ( ! [X1042,X1040,X1039,X1037,X1043,X1041,X1038,X1036] : (s(bool,'F_0') != s(bool,happ(s(fun(X1039,bool),'_dst_x0x1x1_3'(s(fun(X1037,fun(X1036,bool)),X1038),s(fun(X1039,X1037),X1040),s(fun(X1039,X1036),X1042))),s(X1039,X1041))) | s(bool,X1043) = s(bool,happ(s(fun(X1036,bool),happ(s(fun(X1037,fun(X1036,bool)),X1038),s(X1037,happ(s(fun(X1039,X1037),X1040),s(X1039,X1041))))),s(X1036,happ(s(fun(X1039,X1036),X1042),s(X1039,X1041))))) | s(bool,'T_0') = s(bool,X1043)) )),
  inference(superposition,[],[f43737,f336])).
fof(f50419,plain,(
  ( ! [X831,X829,X835,X833,X830,X834,X832,X836] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X836,bool),'_dst_x0_1'(s(bool,happ(s(fun(X832,bool),'_dst_x0x1x1_3'(s(fun(X830,fun(X829,bool)),X831),s(fun(X832,X830),X833),s(fun(X832,X829),X835))),s(X832,X834))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X829,bool),happ(s(fun(X830,fun(X829,bool)),X831),s(X830,happ(s(fun(X832,X830),X833),s(X832,X834))))),s(X829,happ(s(fun(X832,X829),X835),s(X832,X834)))))) )),
  inference(superposition,[],[f2213,f336])).
fof(f50414,plain,(
  ( ! [X796,X790,X795,X793,X791,X789,X794,X792] : (s(bool,'T_0') != s(bool,happ(s(fun(X792,bool),'_dst_x0x1x1_3'(s(fun(X790,fun(X789,bool)),X791),s(fun(X792,X790),X793),s(fun(X792,X789),X795))),s(X792,X794))) | s(bool,X796) = s(bool,happ(s(fun(X789,bool),happ(s(fun(X790,fun(X789,bool)),X791),s(X790,happ(s(fun(X792,X790),X793),s(X792,X794))))),s(X789,happ(s(fun(X792,X789),X795),s(X792,X794))))) | s(bool,'F_0') = s(bool,X796)) )),
  inference(superposition,[],[f1400,f336])).
fof(f50413,plain,(
  ( ! [X786,X784,X788,X783,X781,X787,X785,X782] : (s(bool,X788) != s(bool,happ(s(fun(X784,bool),'_dst_x0x1x1_3'(s(fun(X782,fun(X781,bool)),X783),s(fun(X784,X782),X785),s(fun(X784,X781),X787))),s(X784,X786))) | s(bool,'T_0') = s(bool,happ(s(fun(X781,bool),happ(s(fun(X782,fun(X781,bool)),X783),s(X782,happ(s(fun(X784,X782),X785),s(X784,X786))))),s(X781,happ(s(fun(X784,X781),X787),s(X784,X786))))) | s(bool,'F_0') = s(bool,X788)) )),
  inference(superposition,[],[f1197,f336])).
fof(f50412,plain,(
  ( ! [X779,X777,X775,X773,X778,X776,X780,X774] : (s(bool,X780) != s(bool,happ(s(fun(X776,bool),'_dst_x0x1x1_3'(s(fun(X774,fun(X773,bool)),X775),s(fun(X776,X774),X777),s(fun(X776,X773),X779))),s(X776,X778))) | s(bool,'T_0') = s(bool,X780) | s(bool,'F_0') = s(bool,happ(s(fun(X773,bool),happ(s(fun(X774,fun(X773,bool)),X775),s(X774,happ(s(fun(X776,X774),X777),s(X776,X778))))),s(X773,happ(s(fun(X776,X773),X779),s(X776,X778)))))) )),
  inference(superposition,[],[f1197,f336])).
fof(f50631,plain,(
  ( ! [X689,X685,X687,X683,X688,X684,X686] : (s(bool,'T_0') != s(bool,happ(s(fun(X686,bool),'_dst_x0x1x1_3'(s(fun(X684,fun(X683,bool)),X685),s(fun(X686,X684),X687),s(fun(X686,X683),X689))),s(X686,X688))) | s(bool,'T_0') = s(bool,happ(s(fun(X683,bool),happ(s(fun(X684,fun(X683,bool)),X685),s(X684,happ(s(fun(X686,X684),X687),s(X686,X688))))),s(X683,happ(s(fun(X686,X683),X689),s(X686,X688)))))) )),
  inference(forward_demodulation,[],[f50401,f270])).
fof(f50401,plain,(
  ( ! [X689,X691,X685,X687,X683,X688,X690,X684,X686] : (s(bool,'const.bool.DATATYPE_1'(s(X690,X691))) != s(bool,happ(s(fun(X686,bool),'_dst_x0x1x1_3'(s(fun(X684,fun(X683,bool)),X685),s(fun(X686,X684),X687),s(fun(X686,X683),X689))),s(X686,X688))) | s(bool,'T_0') = s(bool,happ(s(fun(X683,bool),happ(s(fun(X684,fun(X683,bool)),X685),s(X684,happ(s(fun(X686,X684),X687),s(X686,X688))))),s(X683,happ(s(fun(X686,X683),X689),s(X686,X688)))))) )),
  inference(superposition,[],[f557,f336])).
fof(f50377,plain,(
  ( ! [X502,X504,X501,X503] : (~p(s(bool,happ(s(fun(X501,bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun(X501,bool),X502),s(fun(X501,bool),X504))),s(X501,X503)))) | p(s(bool,happ(s(fun(X501,bool),X502),s(X501,X503)))) | p(s(bool,happ(s(fun(X501,bool),X504),s(X501,X503))))) )),
  inference(superposition,[],[f313,f336])).
fof(f50376,plain,(
  ( ! [X499,X500,X498,X497] : (p(s(bool,happ(s(fun(X497,bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(X497,bool),X498),s(fun(X497,bool),X500))),s(X497,X499)))) | p(s(bool,happ(s(fun(X497,bool),X498),s(X497,X499))))) )),
  inference(superposition,[],[f317,f336])).
fof(f50375,plain,(
  ( ! [X492,X494,X490,X496,X493,X495,X491] : (~p(s(bool,happ(s(fun(X493,bool),'_dst_x0x1x1_3'(s(fun(X491,fun(X490,bool)),X492),s(fun(X493,X491),X494),s(fun(X493,X490),X496))),s(X493,X495)))) | p(s(bool,'|dollar|exists_1'(s(fun(X490,bool),happ(s(fun(X491,fun(X490,bool)),X492),s(X491,happ(s(fun(X493,X491),X494),s(X493,X495))))))))) )),
  inference(superposition,[],[f2633,f336])).
fof(f50374,plain,(
  ( ! [X484,X486,X488,X485,X487,X483,X489] : (~p(s(bool,happ(s(fun(X486,bool),'_dst_x0x1x1_3'(s(fun(X484,fun(X483,bool)),X485),s(fun(X486,X484),X487),s(fun(X486,X483),X489))),s(X486,X488)))) | p(s(bool,happ(s(fun(fun(X483,bool),bool),'?_1'),s(fun(X483,bool),happ(s(fun(X484,fun(X483,bool)),X485),s(X484,happ(s(fun(X486,X484),X487),s(X486,X488))))))))) )),
  inference(superposition,[],[f312,f336])).
fof(f50373,plain,(
  ( ! [X478,X480,X482,X479,X481] : (~p(s(bool,happ(s(fun(X479,bool),'_dst_x0x1x1_3'(s(fun(X478,fun(X478,bool)),'=_0'),s(fun(X479,X478),X480),s(fun(X479,X478),X482))),s(X479,X481)))) | s(X478,happ(s(fun(X479,X478),X480),s(X479,X481))) = s(X478,happ(s(fun(X479,X478),X482),s(X479,X481)))) )),
  inference(superposition,[],[f330,f336])).
fof(f50372,plain,(
  ( ! [X476,X474,X475,X477,X473] : (p(s(bool,happ(s(fun(X474,bool),'_dst_x0x1x1_3'(s(fun(X473,fun(X473,bool)),'=_0'),s(fun(X474,X473),X475),s(fun(X474,X473),X477))),s(X474,X476)))) | s(X473,happ(s(fun(X474,X473),X475),s(X474,X476))) != s(X473,happ(s(fun(X474,X473),X477),s(X474,X476)))) )),
  inference(superposition,[],[f331,f336])).
fof(f50332,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X49] : (s(X49,happ(s(fun(X41,X49),X50),s(X41,happ(s(fun(X45,X41),'_dst_x0x1x1_3'(s(fun(X43,fun(X42,X41)),X44),s(fun(X45,X43),X46),s(fun(X45,X42),X48))),s(X45,X47))))) = s(X49,happ(s(fun(X42,X49),'_dst_x0x1_2'(s(fun(X41,X49),X50),s(fun(X42,X41),happ(s(fun(X43,fun(X42,X41)),X44),s(X43,happ(s(fun(X45,X43),X46),s(X45,X47))))))),s(X42,happ(s(fun(X45,X42),X48),s(X45,X47)))))) )),
  inference(superposition,[],[f333,f336])).
fof(f50331,plain,(
  ( ! [X30,X39,X37,X35,X33,X31,X29,X38,X36,X34,X32,X40] : (s(X37,happ(s(fun(X29,X37),happ(s(fun(X38,fun(X29,X37)),X39),s(X38,X40))),s(X29,happ(s(fun(X33,X29),'_dst_x0x1x1_3'(s(fun(X31,fun(X30,X29)),X32),s(fun(X33,X31),X34),s(fun(X33,X30),X36))),s(X33,X35))))) = s(X37,happ(s(fun(X30,X37),'_dst_x0x0x1_3'(s(fun(X38,fun(X29,X37)),X39),s(X38,X40),s(fun(X30,X29),happ(s(fun(X31,fun(X30,X29)),X32),s(X31,happ(s(fun(X33,X31),X34),s(X33,X35))))))),s(X30,happ(s(fun(X33,X30),X36),s(X33,X35)))))) )),
  inference(superposition,[],[f335,f336])).
fof(f50330,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X17,X27,X25,X22,X20,X18,X16] : (s(fun(X24,X25),'_dst_x0x0x1_3'(s(fun(X16,fun(X26,X25)),X27),s(X16,happ(s(fun(X20,X16),'_dst_x0x1x1_3'(s(fun(X18,fun(X17,X16)),X19),s(fun(X20,X18),X21),s(fun(X20,X17),X23))),s(X20,X22))),s(fun(X24,X26),X28))) = s(fun(X24,X25),happ(s(fun(X17,fun(X24,X25)),'_dst_x00x10x01_3'(s(fun(X16,fun(X26,X25)),X27),s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,happ(s(fun(X20,X18),X21),s(X20,X22))))),s(fun(X24,X26),X28))),s(X17,happ(s(fun(X20,X17),X23),s(X20,X22)))))) )),
  inference(superposition,[],[f337,f336])).
fof(f50327,plain,(
  ( ! [X218,X222,X220,X219,X217,X221] : (s('type.ind_type.recspace'(X217),'const.ind_type.CONSTR_3'(s('type.num.num',X218),s(X217,happ(s(fun(X219,X217),X220),s(X219,X221))),s(fun('type.num.num','type.ind_type.recspace'(X217)),happ(s(fun(X219,fun('type.num.num','type.ind_type.recspace'(X217))),X222),s(X219,X221))))) = s('type.ind_type.recspace'(X217),happ(s(fun(X219,'type.ind_type.recspace'(X217)),'_dst_x0x1x1_3'(s(fun(X217,fun(fun('type.num.num','type.ind_type.recspace'(X217)),'type.ind_type.recspace'(X217))),'const.ind_type.CONSTR_1'(s('type.num.num',X218))),s(fun(X219,X217),X220),s(fun(X219,fun('type.num.num','type.ind_type.recspace'(X217))),X222))),s(X219,X221)))) )),
  inference(superposition,[],[f336,f299])).
fof(f50315,plain,(
  ( ! [X127,X132,X130,X128,X126,X133,X131,X129] : (s(bool,X133) = s(bool,happ(s(fun(X129,bool),'_dst_x0x1x1_3'(s(fun(X127,fun(X126,bool)),X128),s(fun(X129,X127),X130),s(fun(X129,X126),X132))),s(X129,X131))) | s(bool,'F_0') = s(bool,X133) | s(bool,'F_0') = s(bool,happ(s(fun(X126,bool),happ(s(fun(X127,fun(X126,bool)),X128),s(X127,happ(s(fun(X129,X127),X130),s(X129,X131))))),s(X126,happ(s(fun(X129,X126),X132),s(X129,X131)))))) )),
  inference(superposition,[],[f336,f1108])).
fof(f50313,plain,(
  ( ! [X111,X116,X114,X112,X110,X117,X115,X113] : (s(bool,'F_0') = s(bool,happ(s(fun(X113,bool),'_dst_x0x1x1_3'(s(fun(X111,fun(X110,bool)),X112),s(fun(X113,X111),X114),s(fun(X113,X110),X116))),s(X113,X115))) | s(bool,X117) = s(bool,happ(s(fun(X110,bool),happ(s(fun(X111,fun(X110,bool)),X112),s(X111,happ(s(fun(X113,X111),X114),s(X113,X115))))),s(X110,happ(s(fun(X113,X110),X116),s(X113,X115))))) | s(bool,'F_0') = s(bool,X117)) )),
  inference(superposition,[],[f336,f1108])).
fof(f50599,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s(bool,'T_0') = s(bool,happ(s(fun(X104,bool),'_dst_x0x1x1_3'(s(fun(X102,fun(X101,bool)),X103),s(fun(X104,X102),X105),s(fun(X104,X101),X107))),s(X104,X106))) | s(bool,'F_0') = s(bool,happ(s(fun(X101,bool),happ(s(fun(X102,fun(X101,bool)),X103),s(X102,happ(s(fun(X104,X102),X105),s(X104,X106))))),s(X101,happ(s(fun(X104,X101),X107),s(X104,X106)))))) )),
  inference(forward_demodulation,[],[f50312,f270])).
fof(f50312,plain,(
  ( ! [X103,X101,X109,X107,X105,X102,X108,X106,X104] : (s(bool,'const.bool.DATATYPE_1'(s(X108,X109))) = s(bool,happ(s(fun(X104,bool),'_dst_x0x1x1_3'(s(fun(X102,fun(X101,bool)),X103),s(fun(X104,X102),X105),s(fun(X104,X101),X107))),s(X104,X106))) | s(bool,'F_0') = s(bool,happ(s(fun(X101,bool),happ(s(fun(X102,fun(X101,bool)),X103),s(X102,happ(s(fun(X104,X102),X105),s(X104,X106))))),s(X101,happ(s(fun(X104,X101),X107),s(X104,X106)))))) )),
  inference(superposition,[],[f336,f1071])).
fof(f50311,plain,(
  ( ! [X94,X99,X97,X95,X93,X100,X98,X96] : (s(bool,'T_0') = s(bool,happ(s(fun(X96,bool),'_dst_x0x1x1_3'(s(fun(X94,fun(X93,bool)),X95),s(fun(X96,X94),X97),s(fun(X96,X93),X99))),s(X96,X98))) | s(bool,X100) = s(bool,'const.bool.DATATYPE_1'(s(bool,X100))) | s(bool,X100) = s(bool,happ(s(fun(X93,bool),happ(s(fun(X94,fun(X93,bool)),X95),s(X94,happ(s(fun(X96,X94),X97),s(X96,X98))))),s(X93,happ(s(fun(X96,X93),X99),s(X96,X98)))))) )),
  inference(superposition,[],[f336,f742])).
fof(f50310,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s(bool,X92) = s(bool,happ(s(fun(X88,bool),'_dst_x0x1x1_3'(s(fun(X86,fun(X85,bool)),X87),s(fun(X88,X86),X89),s(fun(X88,X85),X91))),s(X88,X90))) | s(bool,X92) = s(bool,'const.bool.DATATYPE_1'(s(bool,X92))) | s(bool,'T_0') = s(bool,happ(s(fun(X85,bool),happ(s(fun(X86,fun(X85,bool)),X87),s(X86,happ(s(fun(X88,X86),X89),s(X88,X90))))),s(X85,happ(s(fun(X88,X85),X91),s(X88,X90)))))) )),
  inference(superposition,[],[f336,f742])).
fof(f50306,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55,X53] : (s(bool,X60) = s(bool,happ(s(fun(X56,bool),'_dst_x0x1x1_3'(s(fun(X54,fun(X53,bool)),X55),s(fun(X56,X54),X57),s(fun(X56,X53),X59))),s(X56,X58))) | s(bool,'T_0') = s(bool,X60) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),happ(s(fun(X54,fun(X53,bool)),X55),s(X54,happ(s(fun(X56,X54),X57),s(X56,X58))))),s(X53,happ(s(fun(X56,X53),X59),s(X56,X58)))))) )),
  inference(superposition,[],[f336,f365])).
fof(f50305,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X51,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(X48,bool),'_dst_x0x1x1_3'(s(fun(X46,fun(X45,bool)),X47),s(fun(X48,X46),X49),s(fun(X48,X45),X51))),s(X48,X50))) | s(bool,X52) = s(bool,happ(s(fun(X45,bool),happ(s(fun(X46,fun(X45,bool)),X47),s(X46,happ(s(fun(X48,X46),X49),s(X48,X50))))),s(X45,happ(s(fun(X48,X45),X51),s(X48,X50))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f336,f365])).
fof(f50304,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),'_dst_x0x1x1_3'(s(fun(X39,fun(X38,bool)),X40),s(fun(X41,X39),X42),s(fun(X41,X38),X44))),s(X41,X43))) | s(bool,'T_0') = s(bool,happ(s(fun(X38,bool),happ(s(fun(X39,fun(X38,bool)),X40),s(X39,happ(s(fun(X41,X39),X42),s(X41,X43))))),s(X38,happ(s(fun(X41,X38),X44),s(X41,X43)))))) )),
  inference(superposition,[],[f336,f242])).
fof(f50303,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s(X32,'const.ind_type.FCONS_3'(s(X32,happ(s(fun(X34,X32),X35),s(X34,X36))),s(fun('type.num.num',X32),X33),s('type.num.num',happ(s(fun(X34,'type.num.num'),X37),s(X34,X36))))) = s(X32,happ(s(fun(X34,X32),'_dst_x0x1x1_3'(s(fun(X32,fun('type.num.num',X32)),'_dst_x1x0_2'(s(fun(X32,fun(fun('type.num.num',X32),fun('type.num.num',X32))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X32),X33))),s(fun(X34,X32),X35),s(fun(X34,'type.num.num'),X37))),s(X34,X36)))) )),
  inference(superposition,[],[f336,f347])).
fof(f50302,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (s(X24,happ(s(fun(X28,X24),'_dst_x0x1x1_3'(s(fun(X26,fun(X25,X24)),X27),s(fun(X28,X26),X29),s(fun(X28,X25),X31))),s(X28,X30))) = s(X24,happ(s(fun(X28,X24),'_dst_x0x1_2'(s(fun(X25,X24),happ(s(fun(X26,fun(X25,X24)),X27),s(X26,happ(s(fun(X28,X26),X29),s(X28,X30))))),s(fun(X28,X25),X31))),s(X28,X30)))) )),
  inference(superposition,[],[f336,f333])).
fof(f50301,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(X16,happ(s(fun(X20,X16),'_dst_x0x1x1_3'(s(fun(X18,fun(X17,X16)),X19),s(fun(X20,X18),X21),s(fun(X20,X17),X23))),s(X20,X22))) = s(X16,happ(s(fun(X18,X16),'_dst_x1x0_2'(s(fun(X18,fun(X17,X16)),X19),s(X17,happ(s(fun(X20,X17),X23),s(X20,X22))))),s(X18,happ(s(fun(X20,X18),X21),s(X20,X22)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50597,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun('type.num.num',X0),X2),s(fun('type.num.num',X0),X2))),s('type.num.num',X3))))) )),
  inference(backward_demodulation,[],[f50300,f5101])).
fof(f50300,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(X8,happ(s(fun(X12,X8),'_dst_x0x1x1_3'(s(fun(X10,fun(X9,X8)),X11),s(fun(X12,X10),X13),s(fun(X12,X9),X15))),s(X12,X14))) = s(X8,happ(s(fun(X12,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X9,X8)),X11),s(X10,happ(s(fun(X12,X10),X13),s(X12,X14))),s(fun(X12,X9),X15))),s(X12,X14)))) )),
  inference(superposition,[],[f336,f335])).
fof(f50299,plain,(
  ( ! [X414,X420,X416,X418,X415,X421,X417,X419] : (s(X418,happ(s(fun('type.ind_type.recspace'(X414),X418),happ(s(fun(X419,fun('type.ind_type.recspace'(X414),X418)),X420),s(X419,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),X419),X421),s(fun('type.num.num','type.ind_type.recspace'(X414)),X417))))),s('type.ind_type.recspace'(X414),'const.ind_type.CONSTR_3'(s('type.num.num',X415),s(X414,X416),s(fun('type.num.num','type.ind_type.recspace'(X414)),X417))))) = s(X418,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),X418),'_dst_x0x1x1_3'(s(fun(X419,fun('type.ind_type.recspace'(X414),X418)),X420),s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),X419),X421),s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),'type.ind_type.recspace'(X414)),happ(s(fun(X414,fun(fun('type.num.num','type.ind_type.recspace'(X414)),'type.ind_type.recspace'(X414))),'const.ind_type.CONSTR_1'(s('type.num.num',X415))),s(X414,X416))))),s(fun('type.num.num','type.ind_type.recspace'(X414)),X417)))) )),
  inference(superposition,[],[f336,f299])).
fof(f50298,plain,(
  ( ! [X412,X408,X410,X413,X409,X411] : (s(X410,happ(s(fun('type.wordSem.word_loc'(X408),X410),'_dst_x0x1x1_3'(s(fun(X411,fun('type.stackSem.result'(X408),X410)),X412),s(fun('type.wordSem.word_loc'(X408),X411),X413),s(fun('type.wordSem.word_loc'(X408),'type.stackSem.result'(X408)),'const.stackSem.Result_0'))),s('type.wordSem.word_loc'(X408),X409))) = s(X410,happ(s(fun('type.stackSem.result'(X408),X410),happ(s(fun(X411,fun('type.stackSem.result'(X408),X410)),X412),s(X411,happ(s(fun('type.wordSem.word_loc'(X408),X411),X413),s('type.wordSem.word_loc'(X408),X409))))),s('type.stackSem.result'(X408),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X408),X409)))))) )),
  inference(superposition,[],[f336,f276])).
fof(f50297,plain,(
  ( ! [X405,X407,X403,X404,X406,X402] : (s(X404,happ(s(fun('type.wordSem.word_loc'(X402),X404),'_dst_x0x1x1_3'(s(fun(X405,fun('type.stackSem.result'(X402),X404)),X406),s(fun('type.wordSem.word_loc'(X402),X405),X407),s(fun('type.wordSem.word_loc'(X402),'type.stackSem.result'(X402)),'const.stackSem.Exception_0'))),s('type.wordSem.word_loc'(X402),X403))) = s(X404,happ(s(fun('type.stackSem.result'(X402),X404),happ(s(fun(X405,fun('type.stackSem.result'(X402),X404)),X406),s(X405,happ(s(fun('type.wordSem.word_loc'(X402),X405),X407),s('type.wordSem.word_loc'(X402),X403))))),s('type.stackSem.result'(X402),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X402),X403)))))) )),
  inference(superposition,[],[f336,f275])).
fof(f50296,plain,(
  ( ! [X397,X399,X401,X396,X398,X400] : (s(X398,happ(s(fun('type.wordSem.word_loc'(X396),X398),'_dst_x0x1x1_3'(s(fun(X399,fun('type.stackSem.result'(X396),X398)),X400),s(fun('type.wordSem.word_loc'(X396),X399),X401),s(fun('type.wordSem.word_loc'(X396),'type.stackSem.result'(X396)),'const.stackSem.Halt_0'))),s('type.wordSem.word_loc'(X396),X397))) = s(X398,happ(s(fun('type.stackSem.result'(X396),X398),happ(s(fun(X399,fun('type.stackSem.result'(X396),X398)),X400),s(X399,happ(s(fun('type.wordSem.word_loc'(X396),X399),X401),s('type.wordSem.word_loc'(X396),X397))))),s('type.stackSem.result'(X396),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X396),X397)))))) )),
  inference(superposition,[],[f336,f274])).
fof(f50295,plain,(
  ( ! [X383,X389,X391,X385,X387,X393,X395,X388,X390,X384,X386,X392,X394] : (s(X392,happ(s(fun(X385,X392),'_dst_x0x1x1_3'(s(fun(X393,fun(fun(X383,X384),X392)),X394),s(fun(X385,X393),X395),s(fun(X385,fun(X383,X384)),'_dst_x00x10x01_3'(s(fun(X386,fun(X387,X384)),X388),s(fun(X385,X386),X389),s(fun(X383,X387),X390))))),s(X385,X391))) = s(X392,happ(s(fun(fun(X383,X384),X392),happ(s(fun(X393,fun(fun(X383,X384),X392)),X394),s(X393,happ(s(fun(X385,X393),X395),s(X385,X391))))),s(fun(X383,X384),'_dst_x0x0x1_3'(s(fun(X386,fun(X387,X384)),X388),s(X386,happ(s(fun(X385,X386),X389),s(X385,X391))),s(fun(X383,X387),X390)))))) )),
  inference(superposition,[],[f336,f337])).
fof(f50294,plain,(
  ( ! [X377,X379,X374,X380,X382,X376,X378,X375,X381] : (s(X379,happ(s(fun(X376,X379),'_dst_x0x1x1_3'(s(fun(X380,fun(fun(fun(X374,X375),X375),X379)),X381),s(fun(X376,X380),X382),s(fun(X376,fun(fun(X374,X375),X375)),'_dstsel_1_x10_1'(s(fun(X376,X374),X377))))),s(X376,X378))) = s(X379,happ(s(fun(fun(fun(X374,X375),X375),X379),happ(s(fun(X380,fun(fun(fun(X374,X375),X375),X379)),X381),s(X380,happ(s(fun(X376,X380),X382),s(X376,X378))))),s(fun(fun(X374,X375),X375),'_dstsel_0_x0_1'(s(X374,happ(s(fun(X376,X374),X377),s(X376,X378)))))))) )),
  inference(superposition,[],[f336,f332])).
fof(f50282,plain,(
  ( ! [X288,X290,X285,X287,X283,X289,X284,X286] : (s(X287,happ(s(fun(X283,X287),'_dst_x0x1x1_3'(s(fun(X288,fun(bool,X287)),X289),s(fun(X283,X288),X290),s(fun(X283,bool),X284))),s(X283,X285))) = s(X287,happ(s(fun(bool,X287),happ(s(fun(X288,fun(bool,X287)),X289),s(X288,happ(s(fun(X283,X288),X290),s(X283,X285))))),s(bool,X286))) | s(bool,'F_0') = s(bool,X286) | s(bool,'F_0') = s(bool,happ(s(fun(X283,bool),X284),s(X283,X285)))) )),
  inference(superposition,[],[f336,f1108])).
fof(f50280,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X272,X274] : (s(X270,happ(s(fun(X267,X270),'_dst_x0x1x1_3'(s(fun(X271,fun(bool,X270)),X272),s(fun(X267,X271),X273),s(fun(X267,bool),X268))),s(X267,X269))) = s(X270,happ(s(fun(bool,X270),happ(s(fun(X271,fun(bool,X270)),X272),s(X271,happ(s(fun(X267,X271),X273),s(X267,X269))))),s(bool,'F_0'))) | s(bool,X274) = s(bool,happ(s(fun(X267,bool),X268),s(X267,X269))) | s(bool,'F_0') = s(bool,X274)) )),
  inference(superposition,[],[f336,f1108])).
fof(f50586,plain,(
  ( ! [X263,X259,X265,X260,X258,X264,X266] : (s(X263,happ(s(fun(X258,X263),'_dst_x0x1x1_3'(s(fun(X264,fun(bool,X263)),X265),s(fun(X258,X264),X266),s(fun(X258,bool),X259))),s(X258,X260))) = s(X263,happ(s(fun(bool,X263),happ(s(fun(X264,fun(bool,X263)),X265),s(X264,happ(s(fun(X258,X264),X266),s(X258,X260))))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X258,bool),X259),s(X258,X260)))) )),
  inference(forward_demodulation,[],[f50279,f270])).
fof(f50279,plain,(
  ( ! [X261,X263,X259,X265,X260,X262,X258,X264,X266] : (s(X263,happ(s(fun(X258,X263),'_dst_x0x1x1_3'(s(fun(X264,fun(bool,X263)),X265),s(fun(X258,X264),X266),s(fun(X258,bool),X259))),s(X258,X260))) = s(X263,happ(s(fun(bool,X263),happ(s(fun(X264,fun(bool,X263)),X265),s(X264,happ(s(fun(X258,X264),X266),s(X258,X260))))),s(bool,'const.bool.DATATYPE_1'(s(X261,X262))))) | s(bool,'F_0') = s(bool,happ(s(fun(X258,bool),X259),s(X258,X260)))) )),
  inference(superposition,[],[f336,f1071])).
fof(f50278,plain,(
  ( ! [X255,X253,X251,X257,X254,X256,X250,X252] : (s(X253,happ(s(fun(X250,X253),'_dst_x0x1x1_3'(s(fun(X254,fun(bool,X253)),X255),s(fun(X250,X254),X256),s(fun(X250,bool),X251))),s(X250,X252))) = s(X253,happ(s(fun(bool,X253),happ(s(fun(X254,fun(bool,X253)),X255),s(X254,happ(s(fun(X250,X254),X256),s(X250,X252))))),s(bool,'T_0'))) | s(bool,X257) = s(bool,'const.bool.DATATYPE_1'(s(bool,X257))) | s(bool,X257) = s(bool,happ(s(fun(X250,bool),X251),s(X250,X252)))) )),
  inference(superposition,[],[f336,f742])).
fof(f50273,plain,(
  ( ! [X212,X210,X216,X215,X213,X211,X217,X214] : (s(X214,happ(s(fun(X210,X214),'_dst_x0x1x1_3'(s(fun(X215,fun(bool,X214)),X216),s(fun(X210,X215),X217),s(fun(X210,bool),X211))),s(X210,X212))) = s(X214,happ(s(fun(bool,X214),happ(s(fun(X215,fun(bool,X214)),X216),s(X215,happ(s(fun(X210,X215),X217),s(X210,X212))))),s(bool,X213))) | s(bool,'T_0') = s(bool,X213) | s(bool,'T_0') = s(bool,happ(s(fun(X210,bool),X211),s(X210,X212)))) )),
  inference(superposition,[],[f336,f365])).
fof(f50272,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203] : (s(X205,happ(s(fun(X202,X205),'_dst_x0x1x1_3'(s(fun(X206,fun(bool,X205)),X207),s(fun(X202,X206),X208),s(fun(X202,bool),X203))),s(X202,X204))) = s(X205,happ(s(fun(bool,X205),happ(s(fun(X206,fun(bool,X205)),X207),s(X206,happ(s(fun(X202,X206),X208),s(X202,X204))))),s(bool,'T_0'))) | s(bool,X209) = s(bool,happ(s(fun(X202,bool),X203),s(X202,X204))) | s(bool,'T_0') = s(bool,X209)) )),
  inference(superposition,[],[f336,f365])).
fof(f50271,plain,(
  ( ! [X198,X196,X200,X199,X197,X195,X201] : (s(X198,happ(s(fun(X195,X198),'_dst_x0x1x1_3'(s(fun(X199,fun(bool,X198)),X200),s(fun(X195,X199),X201),s(fun(X195,bool),X196))),s(X195,X197))) = s(X198,happ(s(fun(bool,X198),happ(s(fun(X199,fun(bool,X198)),X200),s(X199,happ(s(fun(X195,X199),X201),s(X195,X197))))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun(X195,bool),X196),s(X195,X197)))) )),
  inference(superposition,[],[f336,f242])).
fof(f50270,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (s(X191,happ(s(fun(bool,X191),happ(s(fun(X192,fun(bool,X191)),X193),s(X192,happ(s(fun(X189,X192),X194),s(X189,X190))))),s(bool,'T_0'))) = s(X191,happ(s(fun(X189,X191),'_dst_x0x1x1_3'(s(fun(X192,fun(bool,X191)),X193),s(fun(X189,X192),X194),s(fun(X189,bool),sK7('!_1',fun(X189,bool))))),s(X189,X190)))) )),
  inference(superposition,[],[f336,f33563])).
fof(f50268,plain,(
  ( ! [X182,X180,X183,X181,X179] : (s(X180,happ(s(fun(bool,X180),'_dst_x0x1x1_3'(s(fun(X181,fun(bool,X180)),X182),s(fun(bool,X181),X183),s(fun(bool,bool),'_i_0_0'))),s(bool,X179))) = s(X180,happ(s(fun(bool,X180),happ(s(fun(X181,fun(bool,X180)),X182),s(X181,happ(s(fun(bool,X181),X183),s(bool,X179))))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X179)) )),
  inference(superposition,[],[f336,f398])).
fof(f50262,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(X153,happ(s(fun(bool,X153),happ(s(fun(X154,fun(bool,X153)),X155),s(X154,happ(s(fun(fun(X152,bool),X154),X156),s(fun(X152,bool),sK7('!_1',fun(X152,bool))))))),s(bool,'T_0'))) = s(X153,happ(s(fun(fun(X152,bool),X153),'_dst_x0x1x1_3'(s(fun(X154,fun(bool,X153)),X155),s(fun(fun(X152,bool),X154),X156),s(fun(fun(X152,bool),bool),'!_1'))),s(fun(X152,bool),sK7('!_1',fun(X152,bool)))))) )),
  inference(superposition,[],[f336,f33016])).
fof(f50261,plain,(
  ( ! [X151,X149,X147,X150,X148] : (s(X148,happ(s(fun(bool,X148),happ(s(fun(X149,fun(bool,X148)),X150),s(X149,happ(s(fun(fun(X147,bool),X149),X151),s(fun(X147,bool),sK7('!_1',fun(X147,bool))))))),s(bool,'T_0'))) = s(X148,happ(s(fun(fun(X147,bool),X148),'_dst_x0x1x1_3'(s(fun(X149,fun(bool,X148)),X150),s(fun(fun(X147,bool),X149),X151),s(fun(fun(X147,bool),bool),'?_1'))),s(fun(X147,bool),sK7('!_1',fun(X147,bool)))))) )),
  inference(superposition,[],[f336,f34447])).
fof(f50260,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(X143,happ(s(fun(bool,X143),happ(s(fun(X144,fun(bool,X143)),X145),s(X144,happ(s(fun(fun(X142,bool),X144),X146),s(fun(X142,bool),sK7('?_1',fun(X142,bool))))))),s(bool,'T_0'))) = s(X143,happ(s(fun(fun(X142,bool),X143),'_dst_x0x1x1_3'(s(fun(X144,fun(bool,X143)),X145),s(fun(fun(X142,bool),X144),X146),s(fun(fun(X142,bool),bool),'?_1'))),s(fun(X142,bool),sK7('?_1',fun(X142,bool)))))) )),
  inference(superposition,[],[f336,f22155])).
fof(f50259,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(X138,happ(s(fun(bool,X138),happ(s(fun(X139,fun(bool,X138)),X140),s(X139,happ(s(fun(fun(fun(X137,bool),bool),X139),X141),s(fun(fun(X137,bool),bool),'!_1'))))),s(bool,'T_0'))) = s(X138,happ(s(fun(fun(fun(X137,bool),bool),X138),'_dst_x0x1x1_3'(s(fun(X139,fun(bool,X138)),X140),s(fun(fun(fun(X137,bool),bool),X139),X141),s(fun(fun(fun(X137,bool),bool),bool),'?_1'))),s(fun(fun(X137,bool),bool),'!_1')))) )),
  inference(superposition,[],[f336,f32930])).
fof(f50258,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(X133,happ(s(fun(bool,X133),happ(s(fun(X134,fun(bool,X133)),X135),s(X134,happ(s(fun(fun(fun(X132,bool),bool),X134),X136),s(fun(fun(X132,bool),bool),'?_1'))))),s(bool,'T_0'))) = s(X133,happ(s(fun(fun(fun(X132,bool),bool),X133),'_dst_x0x1x1_3'(s(fun(X134,fun(bool,X133)),X135),s(fun(fun(fun(X132,bool),bool),X134),X136),s(fun(fun(fun(X132,bool),bool),bool),'?_1'))),s(fun(fun(X132,bool),bool),'?_1')))) )),
  inference(superposition,[],[f336,f22085])).
fof(f50256,plain,(
  ( ! [X127,X125,X123,X126,X124] : (s(X124,happ(s(fun(bool,X124),happ(s(fun(X125,fun(bool,X124)),X126),s(X125,happ(s(fun(fun(X123,bool),X125),X127),s(fun(X123,bool),'_dst_x0_1'(s(bool,'T_0'))))))),s(bool,'T_0'))) = s(X124,happ(s(fun(fun(X123,bool),X124),'_dst_x0x1x1_3'(s(fun(X125,fun(bool,X124)),X126),s(fun(fun(X123,bool),X125),X127),s(fun(fun(X123,bool),bool),'!_1'))),s(fun(X123,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f336,f32095])).
fof(f50255,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(X119,happ(s(fun(bool,X119),happ(s(fun(X120,fun(bool,X119)),X121),s(X120,happ(s(fun(fun(X118,bool),X120),X122),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0'))))))),s(bool,'T_0'))) = s(X119,happ(s(fun(fun(X118,bool),X119),'_dst_x0x1x1_3'(s(fun(X120,fun(bool,X119)),X121),s(fun(fun(X118,bool),X120),X122),s(fun(fun(X118,bool),bool),'?_1'))),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f336,f21706])).
fof(f50251,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(X102,happ(s(fun(X98,X102),happ(s(fun(X103,fun(X98,X102)),X104),s(X103,happ(s(fun('type.num.num',X103),X105),s('type.num.num',X101))))),s(X98,'const.ind_type.FCONS_3'(s(X98,X100),s(fun('type.num.num',X98),X99),s('type.num.num',X101))))) = s(X102,happ(s(fun('type.num.num',X102),'_dst_x0x1x1_3'(s(fun(X103,fun(X98,X102)),X104),s(fun('type.num.num',X103),X105),s(fun('type.num.num',X98),happ(s(fun(X98,fun('type.num.num',X98)),'_dst_x1x0_2'(s(fun(X98,fun(fun('type.num.num',X98),fun('type.num.num',X98))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X98),X99))),s(X98,X100))))),s('type.num.num',X101)))) )),
  inference(superposition,[],[f336,f347])).
fof(f50250,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s(X94,happ(s(fun(fun(X91,X90),X94),'_dst_x0x1x1_3'(s(fun(X95,fun(X90,X94)),X96),s(fun(fun(X91,X90),X95),X97),s(fun(fun(X91,X90),X90),'_dstsel_0_x0_1'(s(X91,X92))))),s(fun(X91,X90),X93))) = s(X94,happ(s(fun(X90,X94),happ(s(fun(X95,fun(X90,X94)),X96),s(X95,happ(s(fun(fun(X91,X90),X95),X97),s(fun(X91,X90),X93))))),s(X90,happ(s(fun(X91,X90),X93),s(X91,X92)))))) )),
  inference(superposition,[],[f336,f321])).
fof(f50249,plain,(
  ( ! [X80,X88,X78,X87,X85,X83,X81,X89,X79,X86,X84,X82] : (s(X86,happ(s(fun(X79,X86),'_dst_x0x1x1_3'(s(fun(X87,fun(X78,X86)),X88),s(fun(X79,X87),X89),s(fun(X79,X78),'_dst_x0x0x1_3'(s(fun(X80,fun(X81,X78)),X82),s(X80,X83),s(fun(X79,X81),X84))))),s(X79,X85))) = s(X86,happ(s(fun(X78,X86),happ(s(fun(X87,fun(X78,X86)),X88),s(X87,happ(s(fun(X79,X87),X89),s(X79,X85))))),s(X78,happ(s(fun(X81,X78),happ(s(fun(X80,fun(X81,X78)),X82),s(X80,X83))),s(X81,happ(s(fun(X79,X81),X84),s(X79,X85)))))))) )),
  inference(superposition,[],[f336,f335])).
fof(f50248,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s(X74,happ(s(fun(X69,X74),'_dst_x0x1x1_3'(s(fun(X75,fun(X68,X74)),X76),s(fun(X69,X75),X77),s(fun(X69,X68),'_dst_x1x0_2'(s(fun(X69,fun(X70,X68)),X71),s(X70,X72))))),s(X69,X73))) = s(X74,happ(s(fun(X68,X74),happ(s(fun(X75,fun(X68,X74)),X76),s(X75,happ(s(fun(X69,X75),X77),s(X69,X73))))),s(X68,happ(s(fun(X70,X68),happ(s(fun(X69,fun(X70,X68)),X71),s(X69,X73))),s(X70,X72)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50247,plain,(
  ( ! [X61,X66,X64,X62,X60,X67,X65,X63] : (s(X64,happ(s(fun(X60,X64),happ(s(fun(X65,fun(X60,X64)),X66),s(X65,happ(s(fun(X61,X65),X67),s(X61,X63))))),s(X60,X62))) = s(X64,happ(s(fun(X61,X64),'_dst_x0x1x1_3'(s(fun(X65,fun(X60,X64)),X66),s(fun(X61,X65),X67),s(fun(X61,X60),'_dst_x0_1'(s(X60,X62))))),s(X61,X63)))) )),
  inference(superposition,[],[f336,f320])).
fof(f50246,plain,(
  ( ! [X59,X57,X54,X52,X50,X48,X58,X56,X55,X53,X51,X49] : (s(X56,happ(s(fun(X49,X56),'_dst_x0x1x1_3'(s(fun(X57,fun(X48,X56)),X58),s(fun(X49,X57),X59),s(fun(X49,X48),happ(s(fun(X50,fun(X49,X48)),X51),s(X50,happ(s(fun(X52,X50),X53),s(X52,X54))))))),s(X49,happ(s(fun(X52,X49),X55),s(X52,X54))))) = s(X56,happ(s(fun(X48,X56),happ(s(fun(X57,fun(X48,X56)),X58),s(X57,happ(s(fun(X49,X57),X59),s(X49,happ(s(fun(X52,X49),X55),s(X52,X54))))))),s(X48,happ(s(fun(X52,X48),'_dst_x0x1x1_3'(s(fun(X50,fun(X49,X48)),X51),s(fun(X52,X50),X53),s(fun(X52,X49),X55))),s(X52,X54)))))) )),
  inference(superposition,[],[f336,f336])).
fof(f50245,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(X44,happ(s(fun(X37,X44),'_dst_x0x1x1_3'(s(fun(X45,fun(X36,X44)),X46),s(fun(X37,X45),X47),s(fun(X37,X36),happ(s(fun(X38,fun(X37,X36)),X39),s(X38,X40))))),s(X37,happ(s(fun(X41,X37),X42),s(X41,X43))))) = s(X44,happ(s(fun(X36,X44),happ(s(fun(X45,fun(X36,X44)),X46),s(X45,happ(s(fun(X37,X45),X47),s(X37,happ(s(fun(X41,X37),X42),s(X41,X43))))))),s(X36,happ(s(fun(X41,X36),'_dst_x0x0x1_3'(s(fun(X38,fun(X37,X36)),X39),s(X38,X40),s(fun(X41,X37),X42))),s(X41,X43)))))) )),
  inference(superposition,[],[f336,f335])).
fof(f50244,plain,(
  ( ! [X30,X28,X26,X35,X33,X31,X29,X27,X34,X32] : (s(X32,happ(s(fun(X27,X32),'_dst_x0x1x1_3'(s(fun(X33,fun(X26,X32)),X34),s(fun(X27,X33),X35),s(fun(X27,X26),happ(s(fun(X28,fun(X27,X26)),X29),s(X28,X30))))),s(X27,X31))) = s(X32,happ(s(fun(X26,X32),happ(s(fun(X33,fun(X26,X32)),X34),s(X33,happ(s(fun(X27,X33),X35),s(X27,X31))))),s(X26,happ(s(fun(X28,X26),'_dst_x1x0_2'(s(fun(X28,fun(X27,X26)),X29),s(X27,X31))),s(X28,X30)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50243,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (s(X22,happ(s(fun(X17,X22),'_dst_x0x1x1_3'(s(fun(X23,fun(X16,X22)),X24),s(fun(X17,X23),X25),s(fun(X17,X16),'_dst_x0x1_2'(s(fun(X18,X16),X19),s(fun(X17,X18),X20))))),s(X17,X21))) = s(X22,happ(s(fun(X16,X22),happ(s(fun(X23,fun(X16,X22)),X24),s(X23,happ(s(fun(X17,X23),X25),s(X17,X21))))),s(X16,happ(s(fun(X18,X16),X19),s(X18,happ(s(fun(X17,X18),X20),s(X17,X21)))))))) )),
  inference(superposition,[],[f336,f333])).
fof(f50242,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(X12,happ(s(fun(X7,X12),'_dst_x0x1x1_3'(s(fun(X13,fun(X6,X12)),X14),s(fun(X7,X13),X15),s(fun(X7,X6),X8))),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))) = s(X12,happ(s(fun(X6,X12),happ(s(fun(X13,fun(X6,X12)),X14),s(X13,happ(s(fun(X7,X13),X15),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))))),s(X6,happ(s(fun(X9,X6),'_dst_x0x1_2'(s(fun(X7,X6),X8),s(fun(X9,X7),X10))),s(X9,X11)))))) )),
  inference(superposition,[],[f336,f333])).
fof(f50241,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X2,happ(s(fun(X0,X2),'_dst_x0x1x1_3'(s(fun(X3,fun(X0,X2)),X4),s(fun(X0,X3),X5),s(fun(X0,X0),'_i_0_0'))),s(X0,X1))) = s(X2,happ(s(fun(X0,X2),happ(s(fun(X3,fun(X0,X2)),X4),s(X3,happ(s(fun(X0,X3),X5),s(X0,X1))))),s(X0,X1)))) )),
  inference(superposition,[],[f336,f271])).
fof(f50099,plain,(
  ( ! [X118,X116,X114,X112,X119,X117,X115,X113] : (s(X113,happ(s(fun(X112,X113),'const.ind_type.FCONS_3'(s(fun(X112,X113),X115),s(fun('type.num.num',fun(X112,X113)),X114),s('type.num.num',happ(s(fun(X116,'type.num.num'),X117),s(X116,X118))))),s(X112,happ(s(fun(X116,X112),X119),s(X116,X118))))) = s(X113,happ(s(fun(X116,X113),'_dst_x0x1x1_3'(s(fun('type.num.num',fun(X112,X113)),happ(s(fun(fun(X112,X113),fun('type.num.num',fun(X112,X113))),'_dst_x1x0_2'(s(fun(fun(X112,X113),fun(fun('type.num.num',fun(X112,X113)),fun('type.num.num',fun(X112,X113)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X112,X113)),X114))),s(fun(X112,X113),X115))),s(fun(X116,'type.num.num'),X117),s(fun(X116,X112),X119))),s(X116,X118)))) )),
  inference(superposition,[],[f336,f347])).
fof(f50098,plain,(
  ( ! [X111,X109,X107,X105,X110,X108,X106,X104] : (s(X105,happ(s(fun(X108,X105),'_dst_x0x1x1_3'(s(fun(fun(X106,fun(X104,X105)),fun(X104,X105)),'_dstsel_0_x0_1'(s(X106,X107))),s(fun(X108,fun(X106,fun(X104,X105))),X109),s(fun(X108,X104),X111))),s(X108,X110))) = s(X105,happ(s(fun(X104,X105),happ(s(fun(X106,fun(X104,X105)),happ(s(fun(X108,fun(X106,fun(X104,X105))),X109),s(X108,X110))),s(X106,X107))),s(X104,happ(s(fun(X108,X104),X111),s(X108,X110)))))) )),
  inference(superposition,[],[f336,f321])).
fof(f50097,plain,(
  ( ! [X94,X92,X103,X101,X99,X97,X95,X93,X102,X100,X98,X96] : (s(X93,happ(s(fun(X100,X93),'_dst_x0x1x1_3'(s(fun(X94,fun(X92,X93)),'_dst_x0x0x1_3'(s(fun(X95,fun(X96,fun(X92,X93))),X97),s(X95,X98),s(fun(X94,X96),X99))),s(fun(X100,X94),X101),s(fun(X100,X92),X103))),s(X100,X102))) = s(X93,happ(s(fun(X92,X93),happ(s(fun(X96,fun(X92,X93)),happ(s(fun(X95,fun(X96,fun(X92,X93))),X97),s(X95,X98))),s(X96,happ(s(fun(X94,X96),X99),s(X94,happ(s(fun(X100,X94),X101),s(X100,X102))))))),s(X92,happ(s(fun(X100,X92),X103),s(X100,X102)))))) )),
  inference(superposition,[],[f336,f335])).
fof(f50096,plain,(
  ( ! [X90,X88,X87,X85,X83,X91,X89,X86,X84,X82] : (s(X83,happ(s(fun(X88,X83),'_dst_x0x1x1_3'(s(fun(X84,fun(X82,X83)),'_dst_x1x0_2'(s(fun(X84,fun(X85,fun(X82,X83))),X86),s(X85,X87))),s(fun(X88,X84),X89),s(fun(X88,X82),X91))),s(X88,X90))) = s(X83,happ(s(fun(X82,X83),happ(s(fun(X85,fun(X82,X83)),happ(s(fun(X84,fun(X85,fun(X82,X83))),X86),s(X84,happ(s(fun(X88,X84),X89),s(X88,X90))))),s(X85,X87))),s(X82,happ(s(fun(X88,X82),X91),s(X88,X90)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50095,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (s(X75,happ(s(fun(X74,X75),X77),s(X74,happ(s(fun(X78,X74),X81),s(X78,X80))))) = s(X75,happ(s(fun(X78,X75),'_dst_x0x1x1_3'(s(fun(X76,fun(X74,X75)),'_dst_x0_1'(s(fun(X74,X75),X77))),s(fun(X78,X76),X79),s(fun(X78,X74),X81))),s(X78,X80)))) )),
  inference(superposition,[],[f336,f320])).
fof(f50094,plain,(
  ( ! [X70,X68,X66,X64,X72,X71,X69,X67,X65,X73] : (s(X65,happ(s(fun(X64,X65),happ(s(fun(X69,fun(X64,X65)),'_dst_x0x1x1_3'(s(fun(X67,fun(X66,fun(X64,X65))),X68),s(fun(X69,X67),X70),s(fun(X69,X66),X72))),s(X69,X71))),s(X64,happ(s(fun(X69,X64),X73),s(X69,X71))))) = s(X65,happ(s(fun(X69,X65),'_dst_x0x1x1_3'(s(fun(X66,fun(X64,X65)),happ(s(fun(X67,fun(X66,fun(X64,X65))),X68),s(X67,happ(s(fun(X69,X67),X70),s(X69,X71))))),s(fun(X69,X66),X72),s(fun(X69,X64),X73))),s(X69,X71)))) )),
  inference(superposition,[],[f336,f336])).
fof(f50093,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55,X63] : (s(X55,happ(s(fun(X60,X55),'_dst_x0x1x1_3'(s(fun(X56,fun(X54,X55)),happ(s(fun(X57,fun(X56,fun(X54,X55))),X58),s(X57,X59))),s(fun(X60,X56),X61),s(fun(X60,X54),X63))),s(X60,X62))) = s(X55,happ(s(fun(X54,X55),happ(s(fun(X57,fun(X54,X55)),'_dst_x1x0_2'(s(fun(X57,fun(X56,fun(X54,X55))),X58),s(X56,happ(s(fun(X60,X56),X61),s(X60,X62))))),s(X57,X59))),s(X54,happ(s(fun(X60,X54),X63),s(X60,X62)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50092,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X44,X53,X51,X49] : (s(X45,happ(s(fun(X50,X45),'_dst_x0x1x1_3'(s(fun(X46,fun(X44,X45)),happ(s(fun(X47,fun(X46,fun(X44,X45))),X48),s(X47,X49))),s(fun(X50,X46),X51),s(fun(X50,X44),X53))),s(X50,X52))) = s(X45,happ(s(fun(X44,X45),happ(s(fun(X50,fun(X44,X45)),'_dst_x0x0x1_3'(s(fun(X47,fun(X46,fun(X44,X45))),X48),s(X47,X49),s(fun(X50,X46),X51))),s(X50,X52))),s(X44,happ(s(fun(X50,X44),X53),s(X50,X52)))))) )),
  inference(superposition,[],[f336,f335])).
fof(f50582,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X5,bool),'_dst_x0x1x1_3'(s(fun(X1,fun(X0,bool)),'_dst_x0x1_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))))),s(fun(X5,X1),X6),s(fun(X5,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X1,X0)),X3),s(X2,X4),s(fun(X5,X1),X6))))),s(X5,X7))))) )),
  inference(backward_demodulation,[],[f50091,f47323])).
fof(f50581,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X3,bool),'_dst_x0x1x1_3'(s(fun(X1,fun(X0,bool)),'_dst_x0x1_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun(X1,X0),X2))),s(fun(X3,X1),X4),s(fun(X3,X0),'_dst_x0x1_2'(s(fun(X1,X0),X2),s(fun(X3,X1),X4))))),s(X3,X5))))) )),
  inference(backward_demodulation,[],[f50091,f35377])).
fof(f50091,plain,(
  ( ! [X39,X37,X35,X43,X41,X38,X36,X34,X42,X40] : (s(X35,happ(s(fun(X40,X35),'_dst_x0x1x1_3'(s(fun(X36,fun(X34,X35)),'_dst_x0x1_2'(s(fun(X37,fun(X34,X35)),X38),s(fun(X36,X37),X39))),s(fun(X40,X36),X41),s(fun(X40,X34),X43))),s(X40,X42))) = s(X35,happ(s(fun(X34,X35),happ(s(fun(X37,fun(X34,X35)),X38),s(X37,happ(s(fun(X36,X37),X39),s(X36,happ(s(fun(X40,X36),X41),s(X40,X42))))))),s(X34,happ(s(fun(X40,X34),X43),s(X40,X42)))))) )),
  inference(superposition,[],[f336,f333])).
fof(f50090,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X27,happ(s(fun(X30,X27),'_dst_x0x1x1_3'(s(fun(X28,fun(X26,X27)),X29),s(fun(X30,X28),X31),s(fun(X30,X26),X33))),s(X30,X32))) = s(X27,happ(s(fun(X26,X27),happ(s(fun(X30,fun(X26,X27)),'_dst_x0x1_2'(s(fun(X28,fun(X26,X27)),X29),s(fun(X30,X28),X31))),s(X30,X32))),s(X26,happ(s(fun(X30,X26),X33),s(X30,X32)))))) )),
  inference(superposition,[],[f336,f333])).
fof(f50089,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X21,happ(s(fun(X20,X21),happ(s(fun(X22,fun(X20,X21)),X23),s(X22,X24))),s(X20,happ(s(fun(X22,X20),X25),s(X22,X24))))) = s(X21,happ(s(fun(X22,X21),'_dst_x0x1x1_3'(s(fun(fun(X20,X21),fun(X20,X21)),'_i_0_0'),s(fun(X22,fun(X20,X21)),X23),s(fun(X22,X20),X25))),s(X22,X24)))) )),
  inference(superposition,[],[f336,f271])).
fof(f50088,plain,(
  ( ! [X14,X12,X10,X8,X19,X17,X15,X13,X11,X9,X18,X16] : (s(X9,happ(s(fun(X16,X9),'_dst_x0x1x1_3'(s(fun(X10,fun(X8,X9)),'_dst_x00x10x01_3'(s(fun(X11,fun(X12,X9)),X13),s(fun(X10,X11),X14),s(fun(X8,X12),X15))),s(fun(X16,X10),X17),s(fun(X16,X8),X19))),s(X16,X18))) = s(X9,happ(s(fun(X8,X9),'_dst_x0x0x1_3'(s(fun(X11,fun(X12,X9)),X13),s(X11,happ(s(fun(X10,X11),X14),s(X10,happ(s(fun(X16,X10),X17),s(X16,X18))))),s(fun(X8,X12),X15))),s(X8,happ(s(fun(X16,X8),X19),s(X16,X18)))))) )),
  inference(superposition,[],[f336,f337])).
fof(f50087,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun(X4,X1),'_dst_x0x1x1_3'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X4,X2),X5),s(fun(X4,fun(X0,X1)),X7))),s(X4,X6))) = s(X1,happ(s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6))))))),s(fun(X0,X1),happ(s(fun(X4,fun(X0,X1)),X7),s(X4,X6)))))) )),
  inference(superposition,[],[f336,f332])).
fof(f50086,plain,(
  ( ! [X414,X420,X416,X418,X415,X421,X417,X419] : (s(X418,happ(s(fun(X419,X418),happ(s(fun('type.ind_type.recspace'(X414),fun(X419,X418)),X420),s('type.ind_type.recspace'(X414),'const.ind_type.CONSTR_3'(s('type.num.num',X415),s(X414,X416),s(fun('type.num.num','type.ind_type.recspace'(X414)),X417))))),s(X419,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),X419),X421),s(fun('type.num.num','type.ind_type.recspace'(X414)),X417))))) = s(X418,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),X418),'_dst_x0x1x1_3'(s(fun('type.ind_type.recspace'(X414),fun(X419,X418)),X420),s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),'type.ind_type.recspace'(X414)),happ(s(fun(X414,fun(fun('type.num.num','type.ind_type.recspace'(X414)),'type.ind_type.recspace'(X414))),'const.ind_type.CONSTR_1'(s('type.num.num',X415))),s(X414,X416))),s(fun(fun('type.num.num','type.ind_type.recspace'(X414)),X419),X421))),s(fun('type.num.num','type.ind_type.recspace'(X414)),X417)))) )),
  inference(superposition,[],[f336,f299])).
fof(f50085,plain,(
  ( ! [X412,X408,X410,X413,X409,X411] : (s(X410,happ(s(fun('type.wordSem.word_loc'(X408),X410),'_dst_x0x1x1_3'(s(fun('type.stackSem.result'(X408),fun(X411,X410)),X412),s(fun('type.wordSem.word_loc'(X408),'type.stackSem.result'(X408)),'const.stackSem.Result_0'),s(fun('type.wordSem.word_loc'(X408),X411),X413))),s('type.wordSem.word_loc'(X408),X409))) = s(X410,happ(s(fun(X411,X410),happ(s(fun('type.stackSem.result'(X408),fun(X411,X410)),X412),s('type.stackSem.result'(X408),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X408),X409))))),s(X411,happ(s(fun('type.wordSem.word_loc'(X408),X411),X413),s('type.wordSem.word_loc'(X408),X409)))))) )),
  inference(superposition,[],[f336,f276])).
fof(f50084,plain,(
  ( ! [X405,X407,X403,X404,X406,X402] : (s(X404,happ(s(fun('type.wordSem.word_loc'(X402),X404),'_dst_x0x1x1_3'(s(fun('type.stackSem.result'(X402),fun(X405,X404)),X406),s(fun('type.wordSem.word_loc'(X402),'type.stackSem.result'(X402)),'const.stackSem.Exception_0'),s(fun('type.wordSem.word_loc'(X402),X405),X407))),s('type.wordSem.word_loc'(X402),X403))) = s(X404,happ(s(fun(X405,X404),happ(s(fun('type.stackSem.result'(X402),fun(X405,X404)),X406),s('type.stackSem.result'(X402),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X402),X403))))),s(X405,happ(s(fun('type.wordSem.word_loc'(X402),X405),X407),s('type.wordSem.word_loc'(X402),X403)))))) )),
  inference(superposition,[],[f336,f275])).
fof(f50083,plain,(
  ( ! [X397,X399,X401,X396,X398,X400] : (s(X398,happ(s(fun('type.wordSem.word_loc'(X396),X398),'_dst_x0x1x1_3'(s(fun('type.stackSem.result'(X396),fun(X399,X398)),X400),s(fun('type.wordSem.word_loc'(X396),'type.stackSem.result'(X396)),'const.stackSem.Halt_0'),s(fun('type.wordSem.word_loc'(X396),X399),X401))),s('type.wordSem.word_loc'(X396),X397))) = s(X398,happ(s(fun(X399,X398),happ(s(fun('type.stackSem.result'(X396),fun(X399,X398)),X400),s('type.stackSem.result'(X396),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X396),X397))))),s(X399,happ(s(fun('type.wordSem.word_loc'(X396),X399),X401),s('type.wordSem.word_loc'(X396),X397)))))) )),
  inference(superposition,[],[f336,f274])).
fof(f50082,plain,(
  ( ! [X383,X389,X391,X385,X387,X393,X395,X388,X390,X384,X386,X392,X394] : (s(X392,happ(s(fun(X385,X392),'_dst_x0x1x1_3'(s(fun(fun(X383,X384),fun(X393,X392)),X394),s(fun(X385,fun(X383,X384)),'_dst_x00x10x01_3'(s(fun(X386,fun(X387,X384)),X388),s(fun(X385,X386),X389),s(fun(X383,X387),X390))),s(fun(X385,X393),X395))),s(X385,X391))) = s(X392,happ(s(fun(X393,X392),happ(s(fun(fun(X383,X384),fun(X393,X392)),X394),s(fun(X383,X384),'_dst_x0x0x1_3'(s(fun(X386,fun(X387,X384)),X388),s(X386,happ(s(fun(X385,X386),X389),s(X385,X391))),s(fun(X383,X387),X390))))),s(X393,happ(s(fun(X385,X393),X395),s(X385,X391)))))) )),
  inference(superposition,[],[f336,f337])).
fof(f50081,plain,(
  ( ! [X377,X379,X374,X380,X382,X376,X378,X375,X381] : (s(X379,happ(s(fun(X376,X379),'_dst_x0x1x1_3'(s(fun(fun(fun(X374,X375),X375),fun(X380,X379)),X381),s(fun(X376,fun(fun(X374,X375),X375)),'_dstsel_1_x10_1'(s(fun(X376,X374),X377))),s(fun(X376,X380),X382))),s(X376,X378))) = s(X379,happ(s(fun(X380,X379),happ(s(fun(fun(fun(X374,X375),X375),fun(X380,X379)),X381),s(fun(fun(X374,X375),X375),'_dstsel_0_x0_1'(s(X374,happ(s(fun(X376,X374),X377),s(X376,X378))))))),s(X380,happ(s(fun(X376,X380),X382),s(X376,X378)))))) )),
  inference(superposition,[],[f336,f332])).
fof(f50069,plain,(
  ( ! [X288,X290,X285,X287,X283,X289,X284,X286] : (s(X287,happ(s(fun(X283,X287),'_dst_x0x1x1_3'(s(fun(bool,fun(X288,X287)),X289),s(fun(X283,bool),X284),s(fun(X283,X288),X290))),s(X283,X285))) = s(X287,happ(s(fun(X288,X287),happ(s(fun(bool,fun(X288,X287)),X289),s(bool,X286))),s(X288,happ(s(fun(X283,X288),X290),s(X283,X285))))) | s(bool,'F_0') = s(bool,X286) | s(bool,'F_0') = s(bool,happ(s(fun(X283,bool),X284),s(X283,X285)))) )),
  inference(superposition,[],[f336,f1108])).
fof(f50067,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X272,X274] : (s(X270,happ(s(fun(X267,X270),'_dst_x0x1x1_3'(s(fun(bool,fun(X271,X270)),X272),s(fun(X267,bool),X268),s(fun(X267,X271),X273))),s(X267,X269))) = s(X270,happ(s(fun(X271,X270),happ(s(fun(bool,fun(X271,X270)),X272),s(bool,'F_0'))),s(X271,happ(s(fun(X267,X271),X273),s(X267,X269))))) | s(bool,X274) = s(bool,happ(s(fun(X267,bool),X268),s(X267,X269))) | s(bool,'F_0') = s(bool,X274)) )),
  inference(superposition,[],[f336,f1108])).
fof(f50570,plain,(
  ( ! [X263,X259,X265,X260,X258,X264,X266] : (s(X263,happ(s(fun(X258,X263),'_dst_x0x1x1_3'(s(fun(bool,fun(X264,X263)),X265),s(fun(X258,bool),X259),s(fun(X258,X264),X266))),s(X258,X260))) = s(X263,happ(s(fun(X264,X263),happ(s(fun(bool,fun(X264,X263)),X265),s(bool,'T_0'))),s(X264,happ(s(fun(X258,X264),X266),s(X258,X260))))) | s(bool,'F_0') = s(bool,happ(s(fun(X258,bool),X259),s(X258,X260)))) )),
  inference(forward_demodulation,[],[f50066,f270])).
fof(f50066,plain,(
  ( ! [X261,X263,X259,X265,X260,X262,X258,X264,X266] : (s(X263,happ(s(fun(X258,X263),'_dst_x0x1x1_3'(s(fun(bool,fun(X264,X263)),X265),s(fun(X258,bool),X259),s(fun(X258,X264),X266))),s(X258,X260))) = s(X263,happ(s(fun(X264,X263),happ(s(fun(bool,fun(X264,X263)),X265),s(bool,'const.bool.DATATYPE_1'(s(X261,X262))))),s(X264,happ(s(fun(X258,X264),X266),s(X258,X260))))) | s(bool,'F_0') = s(bool,happ(s(fun(X258,bool),X259),s(X258,X260)))) )),
  inference(superposition,[],[f336,f1071])).
fof(f50065,plain,(
  ( ! [X255,X253,X251,X257,X254,X256,X250,X252] : (s(X253,happ(s(fun(X250,X253),'_dst_x0x1x1_3'(s(fun(bool,fun(X254,X253)),X255),s(fun(X250,bool),X251),s(fun(X250,X254),X256))),s(X250,X252))) = s(X253,happ(s(fun(X254,X253),happ(s(fun(bool,fun(X254,X253)),X255),s(bool,'T_0'))),s(X254,happ(s(fun(X250,X254),X256),s(X250,X252))))) | s(bool,X257) = s(bool,'const.bool.DATATYPE_1'(s(bool,X257))) | s(bool,X257) = s(bool,happ(s(fun(X250,bool),X251),s(X250,X252)))) )),
  inference(superposition,[],[f336,f742])).
fof(f50060,plain,(
  ( ! [X212,X210,X216,X215,X213,X211,X217,X214] : (s(X214,happ(s(fun(X210,X214),'_dst_x0x1x1_3'(s(fun(bool,fun(X215,X214)),X216),s(fun(X210,bool),X211),s(fun(X210,X215),X217))),s(X210,X212))) = s(X214,happ(s(fun(X215,X214),happ(s(fun(bool,fun(X215,X214)),X216),s(bool,X213))),s(X215,happ(s(fun(X210,X215),X217),s(X210,X212))))) | s(bool,'T_0') = s(bool,X213) | s(bool,'T_0') = s(bool,happ(s(fun(X210,bool),X211),s(X210,X212)))) )),
  inference(superposition,[],[f336,f365])).
fof(f50059,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203] : (s(X205,happ(s(fun(X202,X205),'_dst_x0x1x1_3'(s(fun(bool,fun(X206,X205)),X207),s(fun(X202,bool),X203),s(fun(X202,X206),X208))),s(X202,X204))) = s(X205,happ(s(fun(X206,X205),happ(s(fun(bool,fun(X206,X205)),X207),s(bool,'T_0'))),s(X206,happ(s(fun(X202,X206),X208),s(X202,X204))))) | s(bool,X209) = s(bool,happ(s(fun(X202,bool),X203),s(X202,X204))) | s(bool,'T_0') = s(bool,X209)) )),
  inference(superposition,[],[f336,f365])).
fof(f50058,plain,(
  ( ! [X198,X196,X200,X199,X197,X195,X201] : (s(X198,happ(s(fun(X195,X198),'_dst_x0x1x1_3'(s(fun(bool,fun(X199,X198)),X200),s(fun(X195,bool),X196),s(fun(X195,X199),X201))),s(X195,X197))) = s(X198,happ(s(fun(X199,X198),happ(s(fun(bool,fun(X199,X198)),X200),s(bool,'F_0'))),s(X199,happ(s(fun(X195,X199),X201),s(X195,X197))))) | s(bool,'T_0') = s(bool,happ(s(fun(X195,bool),X196),s(X195,X197)))) )),
  inference(superposition,[],[f336,f242])).
fof(f50057,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (s(X191,happ(s(fun(X192,X191),happ(s(fun(bool,fun(X192,X191)),X193),s(bool,'T_0'))),s(X192,happ(s(fun(X189,X192),X194),s(X189,X190))))) = s(X191,happ(s(fun(X189,X191),'_dst_x0x1x1_3'(s(fun(bool,fun(X192,X191)),X193),s(fun(X189,bool),sK7('!_1',fun(X189,bool))),s(fun(X189,X192),X194))),s(X189,X190)))) )),
  inference(superposition,[],[f336,f33563])).
fof(f50567,plain,(
  ( ! [X182,X180,X183,X181,X179] : (s(X180,happ(s(fun(bool,X180),'_dst_x0x0x1_3'(s(fun(bool,fun(X181,X180)),X182),s(bool,'T_0'),s(fun(bool,X181),X183))),s(bool,X179))) = s(X180,happ(s(fun(bool,X180),'_dst_x0x1x1_3'(s(fun(bool,fun(X181,X180)),X182),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X181),X183))),s(bool,X179))) | s(bool,'F_0') = s(bool,X179)) )),
  inference(forward_demodulation,[],[f50055,f335])).
fof(f50055,plain,(
  ( ! [X182,X180,X183,X181,X179] : (s(X180,happ(s(fun(bool,X180),'_dst_x0x1x1_3'(s(fun(bool,fun(X181,X180)),X182),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X181),X183))),s(bool,X179))) = s(X180,happ(s(fun(X181,X180),happ(s(fun(bool,fun(X181,X180)),X182),s(bool,'T_0'))),s(X181,happ(s(fun(bool,X181),X183),s(bool,X179))))) | s(bool,'F_0') = s(bool,X179)) )),
  inference(superposition,[],[f336,f398])).
fof(f50049,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(X153,happ(s(fun(X154,X153),happ(s(fun(bool,fun(X154,X153)),X155),s(bool,'T_0'))),s(X154,happ(s(fun(fun(X152,bool),X154),X156),s(fun(X152,bool),sK7('!_1',fun(X152,bool))))))) = s(X153,happ(s(fun(fun(X152,bool),X153),'_dst_x0x1x1_3'(s(fun(bool,fun(X154,X153)),X155),s(fun(fun(X152,bool),bool),'!_1'),s(fun(fun(X152,bool),X154),X156))),s(fun(X152,bool),sK7('!_1',fun(X152,bool)))))) )),
  inference(superposition,[],[f336,f33016])).
fof(f50048,plain,(
  ( ! [X151,X149,X147,X150,X148] : (s(X148,happ(s(fun(X149,X148),happ(s(fun(bool,fun(X149,X148)),X150),s(bool,'T_0'))),s(X149,happ(s(fun(fun(X147,bool),X149),X151),s(fun(X147,bool),sK7('!_1',fun(X147,bool))))))) = s(X148,happ(s(fun(fun(X147,bool),X148),'_dst_x0x1x1_3'(s(fun(bool,fun(X149,X148)),X150),s(fun(fun(X147,bool),bool),'?_1'),s(fun(fun(X147,bool),X149),X151))),s(fun(X147,bool),sK7('!_1',fun(X147,bool)))))) )),
  inference(superposition,[],[f336,f34447])).
fof(f50047,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(X143,happ(s(fun(X144,X143),happ(s(fun(bool,fun(X144,X143)),X145),s(bool,'T_0'))),s(X144,happ(s(fun(fun(X142,bool),X144),X146),s(fun(X142,bool),sK7('?_1',fun(X142,bool))))))) = s(X143,happ(s(fun(fun(X142,bool),X143),'_dst_x0x1x1_3'(s(fun(bool,fun(X144,X143)),X145),s(fun(fun(X142,bool),bool),'?_1'),s(fun(fun(X142,bool),X144),X146))),s(fun(X142,bool),sK7('?_1',fun(X142,bool)))))) )),
  inference(superposition,[],[f336,f22155])).
fof(f50046,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(X138,happ(s(fun(X139,X138),happ(s(fun(bool,fun(X139,X138)),X140),s(bool,'T_0'))),s(X139,happ(s(fun(fun(fun(X137,bool),bool),X139),X141),s(fun(fun(X137,bool),bool),'!_1'))))) = s(X138,happ(s(fun(fun(fun(X137,bool),bool),X138),'_dst_x0x1x1_3'(s(fun(bool,fun(X139,X138)),X140),s(fun(fun(fun(X137,bool),bool),bool),'?_1'),s(fun(fun(fun(X137,bool),bool),X139),X141))),s(fun(fun(X137,bool),bool),'!_1')))) )),
  inference(superposition,[],[f336,f32930])).
fof(f50045,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(X133,happ(s(fun(X134,X133),happ(s(fun(bool,fun(X134,X133)),X135),s(bool,'T_0'))),s(X134,happ(s(fun(fun(fun(X132,bool),bool),X134),X136),s(fun(fun(X132,bool),bool),'?_1'))))) = s(X133,happ(s(fun(fun(fun(X132,bool),bool),X133),'_dst_x0x1x1_3'(s(fun(bool,fun(X134,X133)),X135),s(fun(fun(fun(X132,bool),bool),bool),'?_1'),s(fun(fun(fun(X132,bool),bool),X134),X136))),s(fun(fun(X132,bool),bool),'?_1')))) )),
  inference(superposition,[],[f336,f22085])).
fof(f50043,plain,(
  ( ! [X127,X125,X123,X126,X124] : (s(X124,happ(s(fun(X125,X124),happ(s(fun(bool,fun(X125,X124)),X126),s(bool,'T_0'))),s(X125,happ(s(fun(fun(X123,bool),X125),X127),s(fun(X123,bool),'_dst_x0_1'(s(bool,'T_0'))))))) = s(X124,happ(s(fun(fun(X123,bool),X124),'_dst_x0x1x1_3'(s(fun(bool,fun(X125,X124)),X126),s(fun(fun(X123,bool),bool),'!_1'),s(fun(fun(X123,bool),X125),X127))),s(fun(X123,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f336,f32095])).
fof(f50042,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(X119,happ(s(fun(X120,X119),happ(s(fun(bool,fun(X120,X119)),X121),s(bool,'T_0'))),s(X120,happ(s(fun(fun(X118,bool),X120),X122),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0'))))))) = s(X119,happ(s(fun(fun(X118,bool),X119),'_dst_x0x1x1_3'(s(fun(bool,fun(X120,X119)),X121),s(fun(fun(X118,bool),bool),'?_1'),s(fun(fun(X118,bool),X120),X122))),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f336,f21706])).
fof(f50038,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(X102,happ(s(fun(X103,X102),happ(s(fun(X98,fun(X103,X102)),X104),s(X98,'const.ind_type.FCONS_3'(s(X98,X100),s(fun('type.num.num',X98),X99),s('type.num.num',X101))))),s(X103,happ(s(fun('type.num.num',X103),X105),s('type.num.num',X101))))) = s(X102,happ(s(fun('type.num.num',X102),'_dst_x0x1x1_3'(s(fun(X98,fun(X103,X102)),X104),s(fun('type.num.num',X98),happ(s(fun(X98,fun('type.num.num',X98)),'_dst_x1x0_2'(s(fun(X98,fun(fun('type.num.num',X98),fun('type.num.num',X98))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X98),X99))),s(X98,X100))),s(fun('type.num.num',X103),X105))),s('type.num.num',X101)))) )),
  inference(superposition,[],[f336,f347])).
fof(f50037,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s(X94,happ(s(fun(fun(X91,X90),X94),'_dst_x0x1x1_3'(s(fun(X90,fun(X95,X94)),X96),s(fun(fun(X91,X90),X90),'_dstsel_0_x0_1'(s(X91,X92))),s(fun(fun(X91,X90),X95),X97))),s(fun(X91,X90),X93))) = s(X94,happ(s(fun(X95,X94),happ(s(fun(X90,fun(X95,X94)),X96),s(X90,happ(s(fun(X91,X90),X93),s(X91,X92))))),s(X95,happ(s(fun(fun(X91,X90),X95),X97),s(fun(X91,X90),X93)))))) )),
  inference(superposition,[],[f336,f321])).
fof(f50036,plain,(
  ( ! [X80,X88,X78,X87,X85,X83,X81,X89,X79,X86,X84,X82] : (s(X86,happ(s(fun(X79,X86),'_dst_x0x1x1_3'(s(fun(X78,fun(X87,X86)),X88),s(fun(X79,X78),'_dst_x0x0x1_3'(s(fun(X80,fun(X81,X78)),X82),s(X80,X83),s(fun(X79,X81),X84))),s(fun(X79,X87),X89))),s(X79,X85))) = s(X86,happ(s(fun(X87,X86),happ(s(fun(X78,fun(X87,X86)),X88),s(X78,happ(s(fun(X81,X78),happ(s(fun(X80,fun(X81,X78)),X82),s(X80,X83))),s(X81,happ(s(fun(X79,X81),X84),s(X79,X85))))))),s(X87,happ(s(fun(X79,X87),X89),s(X79,X85)))))) )),
  inference(superposition,[],[f336,f335])).
fof(f50035,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s(X74,happ(s(fun(X69,X74),'_dst_x0x1x1_3'(s(fun(X68,fun(X75,X74)),X76),s(fun(X69,X68),'_dst_x1x0_2'(s(fun(X69,fun(X70,X68)),X71),s(X70,X72))),s(fun(X69,X75),X77))),s(X69,X73))) = s(X74,happ(s(fun(X75,X74),happ(s(fun(X68,fun(X75,X74)),X76),s(X68,happ(s(fun(X70,X68),happ(s(fun(X69,fun(X70,X68)),X71),s(X69,X73))),s(X70,X72))))),s(X75,happ(s(fun(X69,X75),X77),s(X69,X73)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50034,plain,(
  ( ! [X61,X66,X64,X62,X60,X67,X65,X63] : (s(X64,happ(s(fun(X65,X64),happ(s(fun(X60,fun(X65,X64)),X66),s(X60,X62))),s(X65,happ(s(fun(X61,X65),X67),s(X61,X63))))) = s(X64,happ(s(fun(X61,X64),'_dst_x0x1x1_3'(s(fun(X60,fun(X65,X64)),X66),s(fun(X61,X60),'_dst_x0_1'(s(X60,X62))),s(fun(X61,X65),X67))),s(X61,X63)))) )),
  inference(superposition,[],[f336,f320])).
fof(f50033,plain,(
  ( ! [X59,X57,X54,X52,X50,X48,X58,X56,X55,X53,X51,X49] : (s(X56,happ(s(fun(X49,X56),'_dst_x0x1x1_3'(s(fun(X48,fun(X57,X56)),X58),s(fun(X49,X48),happ(s(fun(X50,fun(X49,X48)),X51),s(X50,happ(s(fun(X52,X50),X53),s(X52,X54))))),s(fun(X49,X57),X59))),s(X49,happ(s(fun(X52,X49),X55),s(X52,X54))))) = s(X56,happ(s(fun(X57,X56),happ(s(fun(X48,fun(X57,X56)),X58),s(X48,happ(s(fun(X52,X48),'_dst_x0x1x1_3'(s(fun(X50,fun(X49,X48)),X51),s(fun(X52,X50),X53),s(fun(X52,X49),X55))),s(X52,X54))))),s(X57,happ(s(fun(X49,X57),X59),s(X49,happ(s(fun(X52,X49),X55),s(X52,X54)))))))) )),
  inference(superposition,[],[f336,f336])).
fof(f50032,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(X44,happ(s(fun(X37,X44),'_dst_x0x1x1_3'(s(fun(X36,fun(X45,X44)),X46),s(fun(X37,X36),happ(s(fun(X38,fun(X37,X36)),X39),s(X38,X40))),s(fun(X37,X45),X47))),s(X37,happ(s(fun(X41,X37),X42),s(X41,X43))))) = s(X44,happ(s(fun(X45,X44),happ(s(fun(X36,fun(X45,X44)),X46),s(X36,happ(s(fun(X41,X36),'_dst_x0x0x1_3'(s(fun(X38,fun(X37,X36)),X39),s(X38,X40),s(fun(X41,X37),X42))),s(X41,X43))))),s(X45,happ(s(fun(X37,X45),X47),s(X37,happ(s(fun(X41,X37),X42),s(X41,X43)))))))) )),
  inference(superposition,[],[f336,f335])).
fof(f50031,plain,(
  ( ! [X30,X28,X26,X35,X33,X31,X29,X27,X34,X32] : (s(X32,happ(s(fun(X27,X32),'_dst_x0x1x1_3'(s(fun(X26,fun(X33,X32)),X34),s(fun(X27,X26),happ(s(fun(X28,fun(X27,X26)),X29),s(X28,X30))),s(fun(X27,X33),X35))),s(X27,X31))) = s(X32,happ(s(fun(X33,X32),happ(s(fun(X26,fun(X33,X32)),X34),s(X26,happ(s(fun(X28,X26),'_dst_x1x0_2'(s(fun(X28,fun(X27,X26)),X29),s(X27,X31))),s(X28,X30))))),s(X33,happ(s(fun(X27,X33),X35),s(X27,X31)))))) )),
  inference(superposition,[],[f336,f334])).
fof(f50030,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (s(X22,happ(s(fun(X17,X22),'_dst_x0x1x1_3'(s(fun(X16,fun(X23,X22)),X24),s(fun(X17,X16),'_dst_x0x1_2'(s(fun(X18,X16),X19),s(fun(X17,X18),X20))),s(fun(X17,X23),X25))),s(X17,X21))) = s(X22,happ(s(fun(X23,X22),happ(s(fun(X16,fun(X23,X22)),X24),s(X16,happ(s(fun(X18,X16),X19),s(X18,happ(s(fun(X17,X18),X20),s(X17,X21))))))),s(X23,happ(s(fun(X17,X23),X25),s(X17,X21)))))) )),
  inference(superposition,[],[f336,f333])).
fof(f50558,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X2,bool),'_dst_x0x1x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun(X2,X0),X3),s(fun(X2,X0),X3))),s(X2,happ(s(fun(X1,X2),X4),s(X1,X5))))))) )),
  inference(backward_demodulation,[],[f50029,f35381])).
fof(f50029,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(X12,happ(s(fun(X7,X12),'_dst_x0x1x1_3'(s(fun(X6,fun(X13,X12)),X14),s(fun(X7,X6),X8),s(fun(X7,X13),X15))),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))) = s(X12,happ(s(fun(X13,X12),happ(s(fun(X6,fun(X13,X12)),X14),s(X6,happ(s(fun(X9,X6),'_dst_x0x1_2'(s(fun(X7,X6),X8),s(fun(X9,X7),X10))),s(X9,X11))))),s(X13,happ(s(fun(X7,X13),X15),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11)))))))) )),
  inference(superposition,[],[f336,f333])).
fof(f50028,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X2,happ(s(fun(X0,X2),'_dst_x0x1x1_3'(s(fun(X0,fun(X3,X2)),X4),s(fun(X0,X0),'_i_0_0'),s(fun(X0,X3),X5))),s(X0,X1))) = s(X2,happ(s(fun(X3,X2),happ(s(fun(X0,fun(X3,X2)),X4),s(X0,X1))),s(X3,happ(s(fun(X0,X3),X5),s(X0,X1)))))) )),
  inference(superposition,[],[f336,f271])).
fof(f49611,plain,(
  ( ! [X288,X287,X286] : (s(bool,'F_0') != s(bool,X286) | s(bool,X288) = s(bool,sK3(X286,X287,bool)) | s(bool,'T_0') = s(bool,X288) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X287)))) )),
  inference(superposition,[],[f43737,f565])).
fof(f49610,plain,(
  ( ! [X280,X282,X285,X281,X283,X284] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X284),s('type.num.num',X281))),s('type.num.num',X282))) | s(bool,X285) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X280),'const.wordSem.Loc_2'(s('type.num.num',X281),s('type.num.num',X282))),s(fun('type.fcp.cart'(bool,X280),bool),X283),s(fun('type.num.num',fun('type.num.num',bool)),X284))) | s(bool,'T_0') = s(bool,X285)) )),
  inference(superposition,[],[f43737,f324])).
fof(f49609,plain,(
  ( ! [X277,X279,X275,X276,X278] : (s(bool,'F_0') != s(bool,happ(s(fun('type.fcp.cart'(bool,X275),bool),X277),s('type.fcp.cart'(bool,X275),X276))) | s(bool,X279) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X275),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X275),X276))),s(fun('type.fcp.cart'(bool,X275),bool),X277),s(fun('type.num.num',fun('type.num.num',bool)),X278))) | s(bool,'T_0') = s(bool,X279)) )),
  inference(superposition,[],[f43737,f323])).
fof(f49608,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X272,X274] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X267),bool),X270),s('type.wordSem.word_loc'(X267),X268))) | s(bool,X274) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X267),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X267),X268))),s(fun('type.wordSem.word_loc'(X267),bool),X269),s(fun('type.wordSem.word_loc'(X267),bool),X270),s(fun('type.wordSem.word_loc'(X267),bool),X271),s(bool,X272),s(bool,X273))) | s(bool,'T_0') = s(bool,X274)) )),
  inference(superposition,[],[f43737,f329])).
fof(f49607,plain,(
  ( ! [X261,X263,X259,X265,X260,X262,X264,X266] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X259),bool),X261),s('type.wordSem.word_loc'(X259),X260))) | s(bool,X266) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X259),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X259),X260))),s(fun('type.wordSem.word_loc'(X259),bool),X261),s(fun('type.wordSem.word_loc'(X259),bool),X262),s(fun('type.wordSem.word_loc'(X259),bool),X263),s(bool,X264),s(bool,X265))) | s(bool,'T_0') = s(bool,X266)) )),
  inference(superposition,[],[f43737,f328])).
fof(f49606,plain,(
  ( ! [X255,X253,X251,X257,X254,X252,X258,X256] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X251),bool),X255),s('type.wordSem.word_loc'(X251),X252))) | s(bool,X258) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X251),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X251),X252))),s(fun('type.wordSem.word_loc'(X251),bool),X253),s(fun('type.wordSem.word_loc'(X251),bool),X254),s(fun('type.wordSem.word_loc'(X251),bool),X255),s(bool,X256),s(bool,X257))) | s(bool,'T_0') = s(bool,X258)) )),
  inference(superposition,[],[f43737,f327])).
fof(f49605,plain,(
  ( ! [X249,X246,X244,X250,X248,X247,X245] : (s(bool,'F_0') != s(bool,X248) | s(bool,X250) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X244),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X244),bool),X245),s(fun('type.wordSem.word_loc'(X244),bool),X246),s(fun('type.wordSem.word_loc'(X244),bool),X247),s(bool,X248),s(bool,X249))) | s(bool,'T_0') = s(bool,X250)) )),
  inference(superposition,[],[f43737,f326])).
fof(f49604,plain,(
  ( ! [X243,X241,X239,X237,X242,X240,X238] : (s(bool,'F_0') != s(bool,X242) | s(bool,X243) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X237),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X237),bool),X238),s(fun('type.wordSem.word_loc'(X237),bool),X239),s(fun('type.wordSem.word_loc'(X237),bool),X240),s(bool,X241),s(bool,X242))) | s(bool,'T_0') = s(bool,X243)) )),
  inference(superposition,[],[f43737,f325])).
fof(f49603,plain,(
  ( ! [X235,X233,X236,X234] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),X234),s('type.num.num',X235))) | s(bool,X236) = s(bool,'const.ind_type.FCONS_3'(s(bool,X233),s(fun('type.num.num',bool),X234),s('type.num.num','const.num.SUC_1'(s('type.num.num',X235))))) | s(bool,'T_0') = s(bool,X236)) )),
  inference(superposition,[],[f43737,f298])).
fof(f49602,plain,(
  ( ! [X231,X230,X232] : (s(bool,'F_0') != s(bool,X230) | s(bool,X232) = s(bool,'const.ind_type.FCONS_3'(s(bool,X230),s(fun('type.num.num',bool),X231),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X232)) )),
  inference(superposition,[],[f43737,f284])).
fof(f49601,plain,(
  ( ! [X229,X227,X228,X226] : (s(bool,'F_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X227),s(fun('type.num.num',bool),X226),s('type.num.num',X228))) | s(bool,X229) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X226))),s(bool,X227))),s('type.num.num',X228))) | s(bool,'T_0') = s(bool,X229)) )),
  inference(superposition,[],[f43737,f347])).
fof(f49600,plain,(
  ( ! [X222,X225,X223,X224] : (s(bool,'F_0') != s(bool,happ(s(fun(X222,bool),X224),s(X222,X223))) | s(bool,X225) = s(bool,happ(s(fun(fun(X222,bool),bool),'_dstsel_0_x0_1'(s(X222,X223))),s(fun(X222,bool),X224))) | s(bool,'T_0') = s(bool,X225)) )),
  inference(superposition,[],[f43737,f321])).
fof(f49599,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221,X214] : (s(bool,'F_0') != s(bool,happ(s(fun(X216,bool),happ(s(fun(X215,fun(X216,bool)),X217),s(X215,X218))),s(X216,happ(s(fun(X214,X216),X219),s(X214,X220))))) | s(bool,X221) = s(bool,happ(s(fun(X214,bool),'_dst_x0x0x1_3'(s(fun(X215,fun(X216,bool)),X217),s(X215,X218),s(fun(X214,X216),X219))),s(X214,X220))) | s(bool,'T_0') = s(bool,X221)) )),
  inference(superposition,[],[f43737,f335])).
fof(f49598,plain,(
  ( ! [X212,X210,X208,X213,X211,X209] : (s(bool,'F_0') != s(bool,happ(s(fun(X209,bool),happ(s(fun(X208,fun(X209,bool)),X210),s(X208,X212))),s(X209,X211))) | s(bool,X213) = s(bool,happ(s(fun(X208,bool),'_dst_x1x0_2'(s(fun(X208,fun(X209,bool)),X210),s(X209,X211))),s(X208,X212))) | s(bool,'T_0') = s(bool,X213)) )),
  inference(superposition,[],[f43737,f334])).
fof(f49597,plain,(
  ( ! [X206,X204,X207,X205] : (s(bool,'F_0') != s(bool,X205) | s(bool,X207) = s(bool,happ(s(fun(X204,bool),'_dst_x0_1'(s(bool,X205))),s(X204,X206))) | s(bool,'T_0') = s(bool,X207)) )),
  inference(superposition,[],[f43737,f320])).
fof(f49596,plain,(
  ( ! [X198,X196,X202,X200,X199,X197,X203,X201] : (s(bool,'F_0') != s(bool,happ(s(fun(X200,bool),'_dst_x0x0x1_3'(s(fun(X197,fun(X196,bool)),X198),s(X197,X199),s(fun(X200,X196),X201))),s(X200,X202))) | s(bool,X203) = s(bool,happ(s(fun(X196,bool),happ(s(fun(X197,fun(X196,bool)),X198),s(X197,X199))),s(X196,happ(s(fun(X200,X196),X201),s(X200,X202))))) | s(bool,'T_0') = s(bool,X203)) )),
  inference(superposition,[],[f43737,f335])).
fof(f49595,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (s(bool,'F_0') != s(bool,happ(s(fun(X191,bool),'_dst_x1x0_2'(s(fun(X191,fun(X190,bool)),X192),s(X190,X194))),s(X191,X193))) | s(bool,X195) = s(bool,happ(s(fun(X190,bool),happ(s(fun(X191,fun(X190,bool)),X192),s(X191,X193))),s(X190,X194))) | s(bool,'T_0') = s(bool,X195)) )),
  inference(superposition,[],[f43737,f334])).
fof(f49594,plain,(
  ( ! [X189,X187,X185,X188,X186,X184] : (s(bool,'F_0') != s(bool,happ(s(fun(X185,bool),X186),s(X185,happ(s(fun(X184,X185),X187),s(X184,X188))))) | s(bool,X189) = s(bool,happ(s(fun(X184,bool),'_dst_x0x1_2'(s(fun(X185,bool),X186),s(fun(X184,X185),X187))),s(X184,X188))) | s(bool,'T_0') = s(bool,X189)) )),
  inference(superposition,[],[f43737,f333])).
fof(f49593,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (s(bool,'F_0') != s(bool,happ(s(fun(X180,bool),'_dst_x0x1_2'(s(fun(X178,bool),X179),s(fun(X180,X178),X181))),s(X180,X182))) | s(bool,X183) = s(bool,happ(s(fun(X178,bool),X179),s(X178,happ(s(fun(X180,X178),X181),s(X180,X182))))) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f43737,f333])).
fof(f49592,plain,(
  ( ! [X177,X176] : (s(bool,'F_0') != s(bool,X176) | s(bool,X177) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X176))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f43737,f271])).
fof(f49429,plain,(
  ( ! [X810,X808,X812,X806,X804,X811,X809,X813,X807,X805] : (p(s(bool,happ(s(fun(fun(X804,X805),bool),happ(s(fun(fun(X804,X805),fun(fun(X804,X805),bool)),'=_0'),s(fun(X804,X805),X813))),s(fun(X804,X805),'_dst_x0x0x1_3'(s(fun(X807,fun(X808,X805)),X809),s(X807,happ(s(fun(X806,X807),X810),s(X806,X812))),s(fun(X804,X808),X811)))))) | s(fun(X804,X805),X813) != s(fun(X804,X805),happ(s(fun(X806,fun(X804,X805)),'_dst_x00x10x01_3'(s(fun(X807,fun(X808,X805)),X809),s(fun(X806,X807),X810),s(fun(X804,X808),X811))),s(X806,X812)))) )),
  inference(superposition,[],[f331,f337])).
fof(f49428,plain,(
  ( ! [X798,X796,X802,X800,X795,X799,X797,X803,X801,X794] : (p(s(bool,happ(s(fun(fun(X794,X795),bool),happ(s(fun(fun(X794,X795),fun(fun(X794,X795),bool)),'=_0'),s(fun(X794,X795),'_dst_x0x0x1_3'(s(fun(X797,fun(X798,X795)),X799),s(X797,happ(s(fun(X796,X797),X800),s(X796,X802))),s(fun(X794,X798),X801))))),s(fun(X794,X795),X803)))) | s(fun(X794,X795),X803) != s(fun(X794,X795),happ(s(fun(X796,fun(X794,X795)),'_dst_x00x10x01_3'(s(fun(X797,fun(X798,X795)),X799),s(fun(X796,X797),X800),s(fun(X794,X798),X801))),s(X796,X802)))) )),
  inference(superposition,[],[f331,f337])).
fof(f49427,plain,(
  ( ! [X786,X784,X790,X788,X793,X787,X785,X791,X789,X792] : (~p(s(bool,happ(s(fun(fun(X784,X785),bool),happ(s(fun(fun(X784,X785),fun(fun(X784,X785),bool)),'=_0'),s(fun(X784,X785),X793))),s(fun(X784,X785),'_dst_x0x0x1_3'(s(fun(X787,fun(X788,X785)),X789),s(X787,happ(s(fun(X786,X787),X790),s(X786,X792))),s(fun(X784,X788),X791)))))) | s(fun(X784,X785),X793) = s(fun(X784,X785),happ(s(fun(X786,fun(X784,X785)),'_dst_x00x10x01_3'(s(fun(X787,fun(X788,X785)),X789),s(fun(X786,X787),X790),s(fun(X784,X788),X791))),s(X786,X792)))) )),
  inference(superposition,[],[f330,f337])).
fof(f49426,plain,(
  ( ! [X779,X777,X783,X781,X775,X778,X776,X782,X780,X774] : (~p(s(bool,happ(s(fun(fun(X774,X775),bool),happ(s(fun(fun(X774,X775),fun(fun(X774,X775),bool)),'=_0'),s(fun(X774,X775),'_dst_x0x0x1_3'(s(fun(X777,fun(X778,X775)),X779),s(X777,happ(s(fun(X776,X777),X780),s(X776,X782))),s(fun(X774,X778),X781))))),s(fun(X774,X775),X783)))) | s(fun(X774,X775),X783) = s(fun(X774,X775),happ(s(fun(X776,fun(X774,X775)),'_dst_x00x10x01_3'(s(fun(X777,fun(X778,X775)),X779),s(fun(X776,X777),X780),s(fun(X774,X778),X781))),s(X776,X782)))) )),
  inference(superposition,[],[f330,f337])).
fof(f49405,plain,(
  ( ! [X520,X522,X516,X518,X514,X521,X523,X517,X519,X513,X515] : (s(X522,happ(s(fun(fun(X513,X514),X522),X523),s(fun(X513,X514),'_dst_x0x0x1_3'(s(fun(X516,fun(X517,X514)),X518),s(X516,happ(s(fun(X515,X516),X519),s(X515,X521))),s(fun(X513,X517),X520))))) = s(X522,happ(s(fun(X515,X522),'_dst_x0x1_2'(s(fun(fun(X513,X514),X522),X523),s(fun(X515,fun(X513,X514)),'_dst_x00x10x01_3'(s(fun(X516,fun(X517,X514)),X518),s(fun(X515,X516),X519),s(fun(X513,X517),X520))))),s(X515,X521)))) )),
  inference(superposition,[],[f333,f337])).
fof(f49404,plain,(
  ( ! [X509,X511,X505,X507,X500,X502,X512,X508,X510,X504,X506,X501,X503] : (s(X509,happ(s(fun(X502,X509),'_dst_x0x0x1_3'(s(fun(X510,fun(fun(X500,X501),X509)),X511),s(X510,X512),s(fun(X502,fun(X500,X501)),'_dst_x00x10x01_3'(s(fun(X503,fun(X504,X501)),X505),s(fun(X502,X503),X506),s(fun(X500,X504),X507))))),s(X502,X508))) = s(X509,happ(s(fun(fun(X500,X501),X509),happ(s(fun(X510,fun(fun(X500,X501),X509)),X511),s(X510,X512))),s(fun(X500,X501),'_dst_x0x0x1_3'(s(fun(X503,fun(X504,X501)),X505),s(X503,happ(s(fun(X502,X503),X506),s(X502,X508))),s(fun(X500,X504),X507)))))) )),
  inference(superposition,[],[f335,f337])).
fof(f49373,plain,(
  ( ! [X125,X123,X121,X118,X124,X122,X120,X119,X117] : (~p(s(bool,happ(s(fun(X117,bool),'_dst_x0x0x1_3'(s(fun(X119,fun(X120,bool)),X121),s(X119,happ(s(fun(X118,X119),X122),s(X118,X124))),s(fun(X117,X120),X123))),s(X117,X125)))) | p(s(bool,'|dollar|exists_1'(s(fun(X117,bool),happ(s(fun(X118,fun(X117,bool)),'_dst_x00x10x01_3'(s(fun(X119,fun(X120,bool)),X121),s(fun(X118,X119),X122),s(fun(X117,X120),X123))),s(X118,X124))))))) )),
  inference(superposition,[],[f2633,f337])).
fof(f49372,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X108,X115,X113] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X108,bool),'_dst_x0x0x1_3'(s(fun(X110,fun(X111,bool)),X112),s(X110,happ(s(fun(X109,X110),X113),s(X109,X115))),s(fun(X108,X111),X114))))) | s(X108,X116) = s(X108,sK3(X116,happ(s(fun(X109,fun(X108,bool)),'_dst_x00x10x01_3'(s(fun(X110,fun(X111,bool)),X112),s(fun(X109,X110),X113),s(fun(X108,X111),X114))),s(X109,X115)),X108))) )),
  inference(superposition,[],[f565,f337])).
fof(f49371,plain,(
  ( ! [X103,X101,X99,X107,X105,X102,X100,X106,X104] : (~p(s(bool,happ(s(fun(X99,bool),'_dst_x0x0x1_3'(s(fun(X101,fun(X102,bool)),X103),s(X101,happ(s(fun(X100,X101),X104),s(X100,X106))),s(fun(X99,X102),X105))),s(X99,X107)))) | p(s(bool,happ(s(fun(fun(X99,bool),bool),'?_1'),s(fun(X99,bool),happ(s(fun(X100,fun(X99,bool)),'_dst_x00x10x01_3'(s(fun(X101,fun(X102,bool)),X103),s(fun(X100,X101),X104),s(fun(X99,X102),X105))),s(X100,X106))))))) )),
  inference(superposition,[],[f312,f337])).
fof(f49370,plain,(
  ( ! [X94,X92,X97,X95,X93,X91,X98,X96] : (~p(s(bool,happ(s(fun(fun(X91,bool),bool),'?_1'),s(fun(X91,bool),'_dst_x0x0x1_3'(s(fun(X93,fun(X94,bool)),X95),s(X93,happ(s(fun(X92,X93),X96),s(X92,X98))),s(fun(X91,X94),X97)))))) | p(s(bool,happ(s(fun(X91,bool),happ(s(fun(X92,fun(X91,bool)),'_dst_x00x10x01_3'(s(fun(X93,fun(X94,bool)),X95),s(fun(X92,X93),X96),s(fun(X91,X94),X97))),s(X92,X98))),s(X91,sK7(happ(s(fun(X92,fun(X91,bool)),'_dst_x00x10x01_3'(s(fun(X93,fun(X94,bool)),X95),s(fun(X92,X93),X96),s(fun(X91,X94),X97))),s(X92,X98)),X91)))))) )),
  inference(superposition,[],[f311,f337])).
fof(f49369,plain,(
  ( ! [X90,X88,X87,X85,X83,X89,X86,X84] : (~p(s(bool,happ(s(fun(X83,bool),'_dst_x0x0x1_3'(s(fun(X85,fun(X86,bool)),X87),s(X85,happ(s(fun(X84,X85),X88),s(X84,X90))),s(fun(X83,X86),X89))),s(X83,sK6(happ(s(fun(X84,fun(X83,bool)),'_dst_x00x10x01_3'(s(fun(X85,fun(X86,bool)),X87),s(fun(X84,X85),X88),s(fun(X83,X86),X89))),s(X84,X90)),X83))))) | p(s(bool,happ(s(fun(fun(X83,bool),bool),'!_1'),s(fun(X83,bool),happ(s(fun(X84,fun(X83,bool)),'_dst_x00x10x01_3'(s(fun(X85,fun(X86,bool)),X87),s(fun(X84,X85),X88),s(fun(X83,X86),X89))),s(X84,X90))))))) )),
  inference(superposition,[],[f310,f337])).
fof(f49368,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75,X82] : (~p(s(bool,happ(s(fun(fun(X74,bool),bool),'!_1'),s(fun(X74,bool),'_dst_x0x0x1_3'(s(fun(X76,fun(X77,bool)),X78),s(X76,happ(s(fun(X75,X76),X79),s(X75,X81))),s(fun(X74,X77),X80)))))) | p(s(bool,happ(s(fun(X74,bool),happ(s(fun(X75,fun(X74,bool)),'_dst_x00x10x01_3'(s(fun(X76,fun(X77,bool)),X78),s(fun(X75,X76),X79),s(fun(X74,X77),X80))),s(X75,X81))),s(X74,X82))))) )),
  inference(superposition,[],[f309,f337])).
fof(f49367,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X65,X73] : (p(s(bool,'|dollar|exists_1'(s(fun(X65,bool),'_dst_x0x0x1_3'(s(fun(X67,fun(X68,bool)),X69),s(X67,happ(s(fun(X66,X67),X70),s(X66,X72))),s(fun(X65,X68),X71)))))) | s(X65,X73) = s(X65,sK3(X73,happ(s(fun(X66,fun(X65,bool)),'_dst_x00x10x01_3'(s(fun(X67,fun(X68,bool)),X69),s(fun(X66,X67),X70),s(fun(X65,X68),X71))),s(X66,X72)),X65))) )),
  inference(superposition,[],[f288,f337])).
fof(f49361,plain,(
  ( ! [X14,X12,X21,X19,X17,X15,X13,X20,X18,X16] : (s(X13,happ(s(fun(X12,X13),'_dst_x0x0x1_3'(s(fun(X15,fun(X16,X13)),X17),s(X15,happ(s(fun(X14,X15),X18),s(X14,X20))),s(fun(X12,X16),X19))),s(X12,X21))) = s(X13,happ(s(fun(X14,X13),'_dst_x1x0_2'(s(fun(X14,fun(X12,X13)),'_dst_x00x10x01_3'(s(fun(X15,fun(X16,X13)),X17),s(fun(X14,X15),X18),s(fun(X12,X16),X19))),s(X12,X21))),s(X14,X20)))) )),
  inference(superposition,[],[f334,f337])).
fof(f49360,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(X1,happ(s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,X1)),X5),s(X3,happ(s(fun(X2,X3),X6),s(X2,X8))),s(fun(X0,X4),X7))),s(X0,happ(s(fun(X9,X0),X10),s(X9,X11))))) = s(X1,happ(s(fun(X9,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,X3),X6),s(fun(X0,X4),X7))),s(X2,X8),s(fun(X9,X0),X10))),s(X9,X11)))) )),
  inference(superposition,[],[f335,f337])).
fof(f49346,plain,(
  ( ! [X765,X761,X763,X757,X759,X764,X766,X760,X762,X758] : (p(s(bool,happ(s(fun(fun(X757,X758),bool),happ(s(fun(fun(X757,X758),fun(fun(X757,X758),bool)),'=_0'),s(fun(X757,X758),X766))),s(fun(X757,X758),happ(s(fun(X762,fun(X757,X758)),'_dst_x00x10x01_3'(s(fun(X759,fun(X760,X758)),X761),s(fun(X762,X759),X763),s(fun(X757,X760),X765))),s(X762,X764)))))) | s(fun(X757,X758),X766) != s(fun(X757,X758),'_dst_x0x0x1_3'(s(fun(X759,fun(X760,X758)),X761),s(X759,happ(s(fun(X762,X759),X763),s(X762,X764))),s(fun(X757,X760),X765)))) )),
  inference(superposition,[],[f331,f337])).
fof(f49345,plain,(
  ( ! [X753,X755,X749,X751,X747,X756,X752,X754,X748,X750] : (p(s(bool,happ(s(fun(fun(X747,X748),bool),happ(s(fun(fun(X747,X748),fun(fun(X747,X748),bool)),'=_0'),s(fun(X747,X748),happ(s(fun(X752,fun(X747,X748)),'_dst_x00x10x01_3'(s(fun(X749,fun(X750,X748)),X751),s(fun(X752,X749),X753),s(fun(X747,X750),X755))),s(X752,X754))))),s(fun(X747,X748),X756)))) | s(fun(X747,X748),X756) != s(fun(X747,X748),'_dst_x0x0x1_3'(s(fun(X749,fun(X750,X748)),X751),s(X749,happ(s(fun(X752,X749),X753),s(X752,X754))),s(fun(X747,X750),X755)))) )),
  inference(superposition,[],[f331,f337])).
fof(f49344,plain,(
  ( ! [X738,X745,X741,X743,X737,X739,X744,X746,X740,X742] : (~p(s(bool,happ(s(fun(fun(X737,X738),bool),happ(s(fun(fun(X737,X738),fun(fun(X737,X738),bool)),'=_0'),s(fun(X737,X738),X746))),s(fun(X737,X738),happ(s(fun(X742,fun(X737,X738)),'_dst_x00x10x01_3'(s(fun(X739,fun(X740,X738)),X741),s(fun(X742,X739),X743),s(fun(X737,X740),X745))),s(X742,X744)))))) | s(fun(X737,X738),X746) = s(fun(X737,X738),'_dst_x0x0x1_3'(s(fun(X739,fun(X740,X738)),X741),s(X739,happ(s(fun(X742,X739),X743),s(X742,X744))),s(fun(X737,X740),X745)))) )),
  inference(superposition,[],[f330,f337])).
fof(f49343,plain,(
  ( ! [X736,X732,X734,X728,X730,X733,X735,X729,X731,X727] : (~p(s(bool,happ(s(fun(fun(X727,X728),bool),happ(s(fun(fun(X727,X728),fun(fun(X727,X728),bool)),'=_0'),s(fun(X727,X728),happ(s(fun(X732,fun(X727,X728)),'_dst_x00x10x01_3'(s(fun(X729,fun(X730,X728)),X731),s(fun(X732,X729),X733),s(fun(X727,X730),X735))),s(X732,X734))))),s(fun(X727,X728),X736)))) | s(fun(X727,X728),X736) = s(fun(X727,X728),'_dst_x0x0x1_3'(s(fun(X729,fun(X730,X728)),X731),s(X729,happ(s(fun(X732,X729),X733),s(X732,X734))),s(fun(X727,X730),X735)))) )),
  inference(superposition,[],[f330,f337])).
fof(f49293,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X113] : (~p(s(bool,happ(s(fun(X105,bool),happ(s(fun(X109,fun(X105,bool)),'_dst_x00x10x01_3'(s(fun(X106,fun(X107,bool)),X108),s(fun(X109,X106),X110),s(fun(X105,X107),X112))),s(X109,X111))),s(X105,X113)))) | p(s(bool,'|dollar|exists_1'(s(fun(X105,bool),'_dst_x0x0x1_3'(s(fun(X106,fun(X107,bool)),X108),s(X106,happ(s(fun(X109,X106),X110),s(X109,X111))),s(fun(X105,X107),X112))))))) )),
  inference(superposition,[],[f2633,f337])).
fof(f49292,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X96,X104] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X96,bool),happ(s(fun(X100,fun(X96,bool)),'_dst_x00x10x01_3'(s(fun(X97,fun(X98,bool)),X99),s(fun(X100,X97),X101),s(fun(X96,X98),X103))),s(X100,X102))))) | s(X96,X104) = s(X96,sK3(X104,'_dst_x0x0x1_3'(s(fun(X97,fun(X98,bool)),X99),s(X97,happ(s(fun(X100,X97),X101),s(X100,X102))),s(fun(X96,X98),X103)),X96))) )),
  inference(superposition,[],[f565,f337])).
fof(f49291,plain,(
  ( ! [X94,X92,X90,X88,X87,X95,X93,X91,X89] : (~p(s(bool,happ(s(fun(X87,bool),happ(s(fun(X91,fun(X87,bool)),'_dst_x00x10x01_3'(s(fun(X88,fun(X89,bool)),X90),s(fun(X91,X88),X92),s(fun(X87,X89),X94))),s(X91,X93))),s(X87,X95)))) | p(s(bool,happ(s(fun(fun(X87,bool),bool),'?_1'),s(fun(X87,bool),'_dst_x0x0x1_3'(s(fun(X88,fun(X89,bool)),X90),s(X88,happ(s(fun(X91,X88),X92),s(X91,X93))),s(fun(X87,X89),X94))))))) )),
  inference(superposition,[],[f312,f337])).
fof(f49290,plain,(
  ( ! [X80,X85,X83,X81,X79,X86,X84,X82] : (~p(s(bool,happ(s(fun(fun(X79,bool),bool),'?_1'),s(fun(X79,bool),happ(s(fun(X83,fun(X79,bool)),'_dst_x00x10x01_3'(s(fun(X80,fun(X81,bool)),X82),s(fun(X83,X80),X84),s(fun(X79,X81),X86))),s(X83,X85)))))) | p(s(bool,happ(s(fun(X79,bool),'_dst_x0x0x1_3'(s(fun(X80,fun(X81,bool)),X82),s(X80,happ(s(fun(X83,X80),X84),s(X83,X85))),s(fun(X79,X81),X86))),s(X79,sK7('_dst_x0x0x1_3'(s(fun(X80,fun(X81,bool)),X82),s(X80,happ(s(fun(X83,X80),X84),s(X83,X85))),s(fun(X79,X81),X86)),X79)))))) )),
  inference(superposition,[],[f311,f337])).
fof(f49289,plain,(
  ( ! [X78,X76,X74,X72,X71,X77,X75,X73] : (~p(s(bool,happ(s(fun(X71,bool),happ(s(fun(X75,fun(X71,bool)),'_dst_x00x10x01_3'(s(fun(X72,fun(X73,bool)),X74),s(fun(X75,X72),X76),s(fun(X71,X73),X78))),s(X75,X77))),s(X71,sK6('_dst_x0x0x1_3'(s(fun(X72,fun(X73,bool)),X74),s(X72,happ(s(fun(X75,X72),X76),s(X75,X77))),s(fun(X71,X73),X78)),X71))))) | p(s(bool,happ(s(fun(fun(X71,bool),bool),'!_1'),s(fun(X71,bool),'_dst_x0x0x1_3'(s(fun(X72,fun(X73,bool)),X74),s(X72,happ(s(fun(X75,X72),X76),s(X75,X77))),s(fun(X71,X73),X78))))))) )),
  inference(superposition,[],[f310,f337])).
fof(f49288,plain,(
  ( ! [X70,X68,X66,X64,X62,X69,X67,X65,X63] : (~p(s(bool,happ(s(fun(fun(X62,bool),bool),'!_1'),s(fun(X62,bool),happ(s(fun(X66,fun(X62,bool)),'_dst_x00x10x01_3'(s(fun(X63,fun(X64,bool)),X65),s(fun(X66,X63),X67),s(fun(X62,X64),X69))),s(X66,X68)))))) | p(s(bool,happ(s(fun(X62,bool),'_dst_x0x0x1_3'(s(fun(X63,fun(X64,bool)),X65),s(X63,happ(s(fun(X66,X63),X67),s(X66,X68))),s(fun(X62,X64),X69))),s(X62,X70))))) )),
  inference(superposition,[],[f309,f337])).
fof(f49287,plain,(
  ( ! [X61,X59,X57,X54,X60,X58,X56,X55,X53] : (p(s(bool,'|dollar|exists_1'(s(fun(X53,bool),happ(s(fun(X57,fun(X53,bool)),'_dst_x00x10x01_3'(s(fun(X54,fun(X55,bool)),X56),s(fun(X57,X54),X58),s(fun(X53,X55),X60))),s(X57,X59)))))) | s(X53,X61) = s(X53,sK3(X61,'_dst_x0x0x1_3'(s(fun(X54,fun(X55,bool)),X56),s(X54,happ(s(fun(X57,X54),X58),s(X57,X59))),s(fun(X53,X55),X60)),X53))) )),
  inference(superposition,[],[f288,f337])).
fof(f49281,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(X1,happ(s(fun(X3,X1),happ(s(fun(X2,fun(X3,X1)),X4),s(X2,happ(s(fun(X5,X2),X6),s(X5,X7))))),s(X3,happ(s(fun(X0,X3),X8),s(X0,X9))))) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X5,X2),X6),s(fun(X0,X3),X8))),s(X5,X7))),s(X0,X9)))) )),
  inference(superposition,[],[f335,f337])).
fof(f49280,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,happ(s(fun(X11,X12),X15),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19))))),s(fun(X9,X13),X16))) = s(fun(X9,X10),happ(s(fun(X17,fun(X9,X10)),'_dst_x0x1_2'(s(fun(X11,fun(X9,X10)),'_dst_x00x10x01_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,X12),X15),s(fun(X9,X13),X16))),s(fun(X17,X11),X18))),s(X17,X19)))) )),
  inference(superposition,[],[f337,f333])).
fof(f49094,plain,(
  ( ! [X420,X422,X428,X430,X424,X426,X432,X421,X423,X419,X429,X431,X425,X427] : (s(fun(X428,X429),'_dst_x0x0x1_3'(s(fun(fun(X419,X420),fun(X430,X429)),X431),s(fun(X419,X420),'_dst_x0x0x1_3'(s(fun(X422,fun(X423,X420)),X424),s(X422,happ(s(fun(X421,X422),X425),s(X421,X427))),s(fun(X419,X423),X426))),s(fun(X428,X430),X432))) = s(fun(X428,X429),happ(s(fun(X421,fun(X428,X429)),'_dst_x00x10x01_3'(s(fun(fun(X419,X420),fun(X430,X429)),X431),s(fun(X421,fun(X419,X420)),'_dst_x00x10x01_3'(s(fun(X422,fun(X423,X420)),X424),s(fun(X421,X422),X425),s(fun(X419,X423),X426))),s(fun(X428,X430),X432))),s(X421,X427)))) )),
  inference(superposition,[],[f337,f337])).
fof(f49093,plain,(
  ( ! [X412,X414,X410,X416,X418,X413,X415,X409,X411,X417] : (s(fun(X414,X415),'_dst_x0x0x1_3'(s(fun(fun(fun(X409,X410),X410),fun(X416,X415)),X417),s(fun(fun(X409,X410),X410),'_dstsel_0_x0_1'(s(X409,happ(s(fun(X411,X409),X412),s(X411,X413))))),s(fun(X414,X416),X418))) = s(fun(X414,X415),happ(s(fun(X411,fun(X414,X415)),'_dst_x00x10x01_3'(s(fun(fun(fun(X409,X410),X410),fun(X416,X415)),X417),s(fun(X411,fun(fun(X409,X410),X410)),'_dstsel_1_x10_1'(s(fun(X411,X409),X412))),s(fun(X414,X416),X418))),s(X411,X413)))) )),
  inference(superposition,[],[f337,f332])).
fof(f49092,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s(fun(X99,X100),'_dst_x0x0x1_3'(s(fun(X95,fun(X101,X100)),X102),s(X95,'const.ind_type.FCONS_3'(s(X95,X97),s(fun('type.num.num',X95),X96),s('type.num.num',X98))),s(fun(X99,X101),X103))) = s(fun(X99,X100),happ(s(fun('type.num.num',fun(X99,X100)),'_dst_x00x10x01_3'(s(fun(X95,fun(X101,X100)),X102),s(fun('type.num.num',X95),happ(s(fun(X95,fun('type.num.num',X95)),'_dst_x1x0_2'(s(fun(X95,fun(fun('type.num.num',X95),fun('type.num.num',X95))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X95),X96))),s(X95,X97))),s(fun(X99,X101),X103))),s('type.num.num',X98)))) )),
  inference(superposition,[],[f337,f347])).
fof(f49091,plain,(
  ( ! [X80,X78,X76,X74,X85,X83,X81,X79,X77,X75,X73,X84,X82] : (s(fun(X81,X82),'_dst_x0x0x1_3'(s(fun(X73,fun(X83,X82)),X84),s(X73,happ(s(fun(X76,X73),happ(s(fun(X75,fun(X76,X73)),X77),s(X75,X78))),s(X76,happ(s(fun(X74,X76),X79),s(X74,X80))))),s(fun(X81,X83),X85))) = s(fun(X81,X82),happ(s(fun(X74,fun(X81,X82)),'_dst_x00x10x01_3'(s(fun(X73,fun(X83,X82)),X84),s(fun(X74,X73),'_dst_x0x0x1_3'(s(fun(X75,fun(X76,X73)),X77),s(X75,X78),s(fun(X74,X76),X79))),s(fun(X81,X83),X85))),s(X74,X80)))) )),
  inference(superposition,[],[f337,f335])).
fof(f49090,plain,(
  ( ! [X70,X68,X66,X64,X72,X62,X71,X69,X67,X65,X63] : (s(fun(X68,X69),'_dst_x0x0x1_3'(s(fun(X62,fun(X70,X69)),X71),s(X62,happ(s(fun(X64,X62),happ(s(fun(X63,fun(X64,X62)),X65),s(X63,X67))),s(X64,X66))),s(fun(X68,X70),X72))) = s(fun(X68,X69),happ(s(fun(X63,fun(X68,X69)),'_dst_x00x10x01_3'(s(fun(X62,fun(X70,X69)),X71),s(fun(X63,X62),'_dst_x1x0_2'(s(fun(X63,fun(X64,X62)),X65),s(X64,X66))),s(fun(X68,X70),X72))),s(X63,X67)))) )),
  inference(superposition,[],[f337,f334])).
fof(f49089,plain,(
  ( ! [X61,X59,X57,X54,X60,X58,X56,X55,X53] : (s(fun(X57,X58),'_dst_x0x0x1_3'(s(fun(X53,fun(X59,X58)),X60),s(X53,X55),s(fun(X57,X59),X61))) = s(fun(X57,X58),happ(s(fun(X54,fun(X57,X58)),'_dst_x00x10x01_3'(s(fun(X53,fun(X59,X58)),X60),s(fun(X54,X53),'_dst_x0_1'(s(X53,X55))),s(fun(X57,X59),X61))),s(X54,X56)))) )),
  inference(superposition,[],[f337,f320])).
fof(f49088,plain,(
  ( ! [X47,X45,X43,X41,X52,X50,X48,X46,X44,X42,X40,X51,X49] : (s(fun(X48,X49),'_dst_x0x0x1_3'(s(fun(X40,fun(X50,X49)),X51),s(X40,happ(s(fun(X45,X40),'_dst_x0x0x1_3'(s(fun(X42,fun(X41,X40)),X43),s(X42,X44),s(fun(X45,X41),X46))),s(X45,X47))),s(fun(X48,X50),X52))) = s(fun(X48,X49),happ(s(fun(X41,fun(X48,X49)),'_dst_x00x10x01_3'(s(fun(X40,fun(X50,X49)),X51),s(fun(X41,X40),happ(s(fun(X42,fun(X41,X40)),X43),s(X42,X44))),s(fun(X48,X50),X52))),s(X41,happ(s(fun(X45,X41),X46),s(X45,X47)))))) )),
  inference(superposition,[],[f337,f335])).
fof(f49087,plain,(
  ( ! [X30,X39,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s(fun(X35,X36),'_dst_x0x0x1_3'(s(fun(X29,fun(X37,X36)),X38),s(X29,happ(s(fun(X31,X29),'_dst_x1x0_2'(s(fun(X31,fun(X30,X29)),X32),s(X30,X34))),s(X31,X33))),s(fun(X35,X37),X39))) = s(fun(X35,X36),happ(s(fun(X30,fun(X35,X36)),'_dst_x00x10x01_3'(s(fun(X29,fun(X37,X36)),X38),s(fun(X30,X29),happ(s(fun(X31,fun(X30,X29)),X32),s(X31,X33))),s(fun(X35,X37),X39))),s(X30,X34)))) )),
  inference(superposition,[],[f337,f334])).
fof(f49086,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X27,X25,X22,X20,X18] : (s(fun(X24,X25),'_dst_x0x0x1_3'(s(fun(X18,fun(X26,X25)),X27),s(X18,happ(s(fun(X20,X18),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))),s(fun(X24,X26),X28))) = s(fun(X24,X25),happ(s(fun(X19,fun(X24,X25)),'_dst_x00x10x01_3'(s(fun(X18,fun(X26,X25)),X27),s(fun(X19,X18),'_dst_x0x1_2'(s(fun(X20,X18),X21),s(fun(X19,X20),X22))),s(fun(X24,X26),X28))),s(X19,X23)))) )),
  inference(superposition,[],[f337,f333])).
fof(f49085,plain,(
  ( ! [X14,X12,X10,X8,X17,X7,X15,X13,X11,X9,X16] : (s(fun(X13,X14),'_dst_x0x0x1_3'(s(fun(X7,fun(X15,X14)),X16),s(X7,happ(s(fun(X10,X7),'_dst_x0x1_2'(s(fun(X8,X7),X9),s(fun(X10,X8),X11))),s(X10,X12))),s(fun(X13,X15),X17))) = s(fun(X13,X14),happ(s(fun(X8,fun(X13,X14)),'_dst_x00x10x01_3'(s(fun(X7,fun(X15,X14)),X16),s(fun(X8,X7),X9),s(fun(X13,X15),X17))),s(X8,happ(s(fun(X10,X8),X11),s(X10,X12)))))) )),
  inference(superposition,[],[f337,f333])).
fof(f49083,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,happ(s(fun(X5,X2),X6),s(X5,X7))),s(fun(X0,X3),X8))))),s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X5,X2),X6),s(fun(X0,X3),X8))),s(X5,X7))))))) )),
  inference(unit_resulting_resolution,[],[f337,f331])).
fof(f49084,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,X3),X6),s(fun(X0,X4),X7))),s(X2,X8))))),s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,X1)),X5),s(X3,happ(s(fun(X2,X3),X6),s(X2,X8))),s(fun(X0,X4),X7))))))) )),
  inference(unit_resulting_resolution,[],[f337,f331])).
fof(f48097,plain,(
  ( ! [X1837,X1835,X1833,X1831,X1829,X1838,X1836,X1834,X1832,X1830] : (s('type.fcp.cart'(bool,X1829),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1829),happ(s(fun(X1834,'type.fcp.cart'(bool,X1829)),'_dst_x0x0x1_3'(s(fun(X1831,fun(X1830,'type.fcp.cart'(bool,X1829))),X1832),s(X1831,X1833),s(fun(X1834,X1830),X1835))),s(X1834,X1836))) | p(s(bool,sK4(X1837,X1838,happ(s(fun(X1830,'type.fcp.cart'(bool,X1829)),happ(s(fun(X1831,fun(X1830,'type.fcp.cart'(bool,X1829))),X1832),s(X1831,X1833))),s(X1830,happ(s(fun(X1834,X1830),X1835),s(X1834,X1836)))),X1829)))) )),
  inference(superposition,[],[f302,f335])).
fof(f48095,plain,(
  ( ! [X1816,X1814,X1812,X1810,X1808,X1817,X1815,X1813,X1811,X1809] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1816,X1817,happ(s(fun(X1809,'type.fcp.cart'(bool,X1808)),happ(s(fun(X1810,fun(X1809,'type.fcp.cart'(bool,X1808))),X1811),s(X1810,X1812))),s(X1809,happ(s(fun(X1813,X1809),X1814),s(X1813,X1815)))),X1808)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1808),'const.wordSem.Loc_2'(s('type.num.num',X1816),s('type.num.num',X1817))),s('type.wordSem.word_loc'(X1808),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1808),happ(s(fun(X1813,'type.fcp.cart'(bool,X1808)),'_dst_x0x0x1_3'(s(fun(X1810,fun(X1809,'type.fcp.cart'(bool,X1808))),X1811),s(X1810,X1812),s(fun(X1813,X1809),X1814))),s(X1813,X1815)))))))) )),
  inference(superposition,[],[f303,f335])).
fof(f48091,plain,(
  ( ! [X1765,X1767,X1769,X1771,X1773,X1764,X1766,X1768,X1770,X1772] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1771,happ(s(fun(X1764,'type.num.num'),happ(s(fun(X1765,fun(X1764,'type.num.num')),X1766),s(X1765,X1767))),s(X1764,happ(s(fun(X1768,X1764),X1769),s(X1768,X1770)))),X1772,X1773)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1773),'const.wordSem.Loc_2'(s('type.num.num',X1771),s('type.num.num',happ(s(fun(X1768,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1765,fun(X1764,'type.num.num')),X1766),s(X1765,X1767),s(fun(X1768,X1764),X1769))),s(X1768,X1770))))),s('type.wordSem.word_loc'(X1773),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1773),X1772)))))) )),
  inference(superposition,[],[f303,f335])).
fof(f48090,plain,(
  ( ! [X1754,X1756,X1758,X1761,X1763,X1755,X1757,X1759,X1760,X1762] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1754,'type.num.num'),happ(s(fun(X1755,fun(X1754,'type.num.num')),X1756),s(X1755,X1757))),s(X1754,happ(s(fun(X1758,X1754),X1759),s(X1758,X1760)))),X1761,X1762,X1763)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1763),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1758,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1755,fun(X1754,'type.num.num')),X1756),s(X1755,X1757),s(fun(X1758,X1754),X1759))),s(X1758,X1760))),s('type.num.num',X1761))),s('type.wordSem.word_loc'(X1763),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1763),X1762)))))) )),
  inference(superposition,[],[f303,f335])).
fof(f48078,plain,(
  ( ! [X1633,X1635,X1637,X1639,X1632,X1634,X1636,X1638,X1640] : (s('type.wordSem.word_loc'(X1632),X1640) != s('type.wordSem.word_loc'(X1632),happ(s(fun(X1637,'type.wordSem.word_loc'(X1632)),'_dst_x0x0x1_3'(s(fun(X1634,fun(X1633,'type.wordSem.word_loc'(X1632))),X1635),s(X1634,X1636),s(fun(X1637,X1633),X1638))),s(X1637,X1639))) | s('type.stackSem.result'(X1632),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1632),X1640))) = s('type.stackSem.result'(X1632),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1632),happ(s(fun(X1633,'type.wordSem.word_loc'(X1632)),happ(s(fun(X1634,fun(X1633,'type.wordSem.word_loc'(X1632))),X1635),s(X1634,X1636))),s(X1633,happ(s(fun(X1637,X1633),X1638),s(X1637,X1639)))))))) )),
  inference(superposition,[],[f295,f335])).
fof(f48076,plain,(
  ( ! [X1614,X1619,X1617,X1621,X1615,X1616,X1618,X1620,X1622] : (s('type.stackSem.result'(X1614),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1614),X1622))) != s('type.stackSem.result'(X1614),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1614),happ(s(fun(X1619,'type.wordSem.word_loc'(X1614)),'_dst_x0x0x1_3'(s(fun(X1616,fun(X1615,'type.wordSem.word_loc'(X1614))),X1617),s(X1616,X1618),s(fun(X1619,X1615),X1620))),s(X1619,X1621))))) | s('type.wordSem.word_loc'(X1614),X1622) = s('type.wordSem.word_loc'(X1614),happ(s(fun(X1615,'type.wordSem.word_loc'(X1614)),happ(s(fun(X1616,fun(X1615,'type.wordSem.word_loc'(X1614))),X1617),s(X1616,X1618))),s(X1615,happ(s(fun(X1619,X1615),X1620),s(X1619,X1621)))))) )),
  inference(superposition,[],[f294,f335])).
fof(f48074,plain,(
  ( ! [X1600,X1602,X1604,X1596,X1598,X1601,X1603,X1597,X1599] : (s('type.wordSem.word_loc'(X1596),X1604) != s('type.wordSem.word_loc'(X1596),happ(s(fun(X1601,'type.wordSem.word_loc'(X1596)),'_dst_x0x0x1_3'(s(fun(X1598,fun(X1597,'type.wordSem.word_loc'(X1596))),X1599),s(X1598,X1600),s(fun(X1601,X1597),X1602))),s(X1601,X1603))) | s('type.stackSem.result'(X1596),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1596),X1604))) = s('type.stackSem.result'(X1596),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1596),happ(s(fun(X1597,'type.wordSem.word_loc'(X1596)),happ(s(fun(X1598,fun(X1597,'type.wordSem.word_loc'(X1596))),X1599),s(X1598,X1600))),s(X1597,happ(s(fun(X1601,X1597),X1602),s(X1601,X1603)))))))) )),
  inference(superposition,[],[f293,f335])).
fof(f48072,plain,(
  ( ! [X1579,X1581,X1583,X1584,X1586,X1578,X1580,X1582,X1585] : (s('type.stackSem.result'(X1578),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1578),X1586))) != s('type.stackSem.result'(X1578),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1578),happ(s(fun(X1583,'type.wordSem.word_loc'(X1578)),'_dst_x0x0x1_3'(s(fun(X1580,fun(X1579,'type.wordSem.word_loc'(X1578))),X1581),s(X1580,X1582),s(fun(X1583,X1579),X1584))),s(X1583,X1585))))) | s('type.wordSem.word_loc'(X1578),X1586) = s('type.wordSem.word_loc'(X1578),happ(s(fun(X1579,'type.wordSem.word_loc'(X1578)),happ(s(fun(X1580,fun(X1579,'type.wordSem.word_loc'(X1578))),X1581),s(X1580,X1582))),s(X1579,happ(s(fun(X1583,X1579),X1584),s(X1583,X1585)))))) )),
  inference(superposition,[],[f292,f335])).
fof(f48070,plain,(
  ( ! [X1560,X1562,X1564,X1566,X1561,X1568,X1565,X1563,X1567] : (s('type.wordSem.word_loc'(X1560),X1568) != s('type.wordSem.word_loc'(X1560),happ(s(fun(X1565,'type.wordSem.word_loc'(X1560)),'_dst_x0x0x1_3'(s(fun(X1562,fun(X1561,'type.wordSem.word_loc'(X1560))),X1563),s(X1562,X1564),s(fun(X1565,X1561),X1566))),s(X1565,X1567))) | s('type.stackSem.result'(X1560),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1560),X1568))) = s('type.stackSem.result'(X1560),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1560),happ(s(fun(X1561,'type.wordSem.word_loc'(X1560)),happ(s(fun(X1562,fun(X1561,'type.wordSem.word_loc'(X1560))),X1563),s(X1562,X1564))),s(X1561,happ(s(fun(X1565,X1561),X1566),s(X1565,X1567)))))))) )),
  inference(superposition,[],[f291,f335])).
fof(f48068,plain,(
  ( ! [X1542,X1544,X1546,X1548,X1550,X1543,X1545,X1547,X1549] : (s('type.stackSem.result'(X1542),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1542),X1550))) != s('type.stackSem.result'(X1542),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1542),happ(s(fun(X1547,'type.wordSem.word_loc'(X1542)),'_dst_x0x0x1_3'(s(fun(X1544,fun(X1543,'type.wordSem.word_loc'(X1542))),X1545),s(X1544,X1546),s(fun(X1547,X1543),X1548))),s(X1547,X1549))))) | s('type.wordSem.word_loc'(X1542),X1550) = s('type.wordSem.word_loc'(X1542),happ(s(fun(X1543,'type.wordSem.word_loc'(X1542)),happ(s(fun(X1544,fun(X1543,'type.wordSem.word_loc'(X1542))),X1545),s(X1544,X1546))),s(X1543,happ(s(fun(X1547,X1543),X1548),s(X1547,X1549)))))) )),
  inference(superposition,[],[f290,f335])).
fof(f48059,plain,(
  ( ! [X1472,X1474,X1468,X1470,X1473,X1469,X1471] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1472,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1469,fun(X1468,'type.wordSem.word_loc'(sK0))),X1470),s(X1469,X1471),s(fun(X1472,X1468),X1473))),s(X1472,X1474))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1468,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1469,fun(X1468,'type.wordSem.word_loc'(sK0))),X1470),s(X1469,X1471))),s(X1468,happ(s(fun(X1472,X1468),X1473),s(X1472,X1474)))))) )),
  inference(superposition,[],[f2643,f335])).
fof(f48058,plain,(
  ( ! [X1461,X1463,X1464,X1466,X1462,X1465,X1467] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1465,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1462,fun(X1461,'type.wordSem.word_loc'(sK0))),X1463),s(X1462,X1464),s(fun(X1465,X1461),X1466))),s(X1465,X1467))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun(X1461,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1462,fun(X1461,'type.wordSem.word_loc'(sK0))),X1463),s(X1462,X1464))),s(X1461,happ(s(fun(X1465,X1461),X1466),s(X1465,X1467)))))))) )),
  inference(superposition,[],[f2651,f335])).
fof(f48057,plain,(
  ( ! [X1457,X1459,X1453,X1455,X1456,X1458,X1460,X1452,X1454] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1456,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1453,fun(X1452,'type.wordSem.word_loc'(sK0))),X1454),s(X1453,X1455),s(fun(X1456,X1452),X1457))),s(X1456,X1458))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1459,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1452,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1453,fun(X1452,'type.wordSem.word_loc'(sK0))),X1454),s(X1453,X1455))),s(X1452,happ(s(fun(X1456,X1452),X1457),s(X1456,X1458))))))),s(X1459,X1460)))) )),
  inference(superposition,[],[f2652,f335])).
fof(f48056,plain,(
  ( ! [X1449,X1451,X1445,X1447,X1448,X1450,X1444,X1446] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1448,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1445,fun(X1444,'type.wordSem.word_loc'(sK0))),X1446),s(X1445,X1447),s(fun(X1448,X1444),X1449))),s(X1448,X1450))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1444,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1445,fun(X1444,'type.wordSem.word_loc'(sK0))),X1446),s(X1445,X1447))),s(X1444,happ(s(fun(X1448,X1444),X1449),s(X1448,X1450))))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X1451),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f335])).
fof(f48055,plain,(
  ( ! [X1436,X1438,X1441,X1443,X1437,X1439,X1440,X1442] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1440,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1437,fun(X1436,'type.wordSem.word_loc'(sK0))),X1438),s(X1437,X1439),s(fun(X1440,X1436),X1441))),s(X1440,X1442))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X1436,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1437,fun(X1436,'type.wordSem.word_loc'(sK0))),X1438),s(X1437,X1439))),s(X1436,happ(s(fun(X1440,X1436),X1441),s(X1440,X1442)))),X1443,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1443)))) )),
  inference(superposition,[],[f2654,f335])).
fof(f48026,plain,(
  ( ! [X1081,X1087,X1085,X1089,X1082,X1086,X1084,X1088,X1083] : (~p(s(bool,happ(s(fun(X1081,bool),happ(s(fun(X1086,fun(X1081,bool)),'_dst_x0x0x1_3'(s(fun(X1083,fun(X1082,fun(X1081,bool))),X1084),s(X1083,X1085),s(fun(X1086,X1082),X1087))),s(X1086,X1088))),s(X1081,X1089)))) | p(s(bool,'|dollar|exists_1'(s(fun(X1081,bool),happ(s(fun(X1082,fun(X1081,bool)),happ(s(fun(X1083,fun(X1082,fun(X1081,bool))),X1084),s(X1083,X1085))),s(X1082,happ(s(fun(X1086,X1082),X1087),s(X1086,X1088))))))))) )),
  inference(superposition,[],[f2633,f335])).
fof(f48025,plain,(
  ( ! [X1075,X1073,X1079,X1077,X1080,X1074,X1072,X1078,X1076] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1072,bool),happ(s(fun(X1077,fun(X1072,bool)),'_dst_x0x0x1_3'(s(fun(X1074,fun(X1073,fun(X1072,bool))),X1075),s(X1074,X1076),s(fun(X1077,X1073),X1078))),s(X1077,X1079))))) | s(X1072,X1080) = s(X1072,sK3(X1080,happ(s(fun(X1073,fun(X1072,bool)),happ(s(fun(X1074,fun(X1073,fun(X1072,bool))),X1075),s(X1074,X1076))),s(X1073,happ(s(fun(X1077,X1073),X1078),s(X1077,X1079)))),X1072))) )),
  inference(superposition,[],[f565,f335])).
fof(f48024,plain,(
  ( ! [X1066,X1064,X1070,X1068,X1067,X1065,X1071,X1069,X1063] : (~p(s(bool,happ(s(fun(X1063,bool),happ(s(fun(X1068,fun(X1063,bool)),'_dst_x0x0x1_3'(s(fun(X1065,fun(X1064,fun(X1063,bool))),X1066),s(X1065,X1067),s(fun(X1068,X1064),X1069))),s(X1068,X1070))),s(X1063,X1071)))) | p(s(bool,happ(s(fun(fun(X1063,bool),bool),'?_1'),s(fun(X1063,bool),happ(s(fun(X1064,fun(X1063,bool)),happ(s(fun(X1065,fun(X1064,fun(X1063,bool))),X1066),s(X1065,X1067))),s(X1064,happ(s(fun(X1068,X1064),X1069),s(X1068,X1070))))))))) )),
  inference(superposition,[],[f312,f335])).
fof(f48023,plain,(
  ( ! [X1058,X1056,X1062,X1060,X1055,X1059,X1057,X1061] : (~p(s(bool,happ(s(fun(fun(X1055,bool),bool),'?_1'),s(fun(X1055,bool),happ(s(fun(X1060,fun(X1055,bool)),'_dst_x0x0x1_3'(s(fun(X1057,fun(X1056,fun(X1055,bool))),X1058),s(X1057,X1059),s(fun(X1060,X1056),X1061))),s(X1060,X1062)))))) | p(s(bool,happ(s(fun(X1055,bool),happ(s(fun(X1056,fun(X1055,bool)),happ(s(fun(X1057,fun(X1056,fun(X1055,bool))),X1058),s(X1057,X1059))),s(X1056,happ(s(fun(X1060,X1056),X1061),s(X1060,X1062))))),s(X1055,sK7(happ(s(fun(X1056,fun(X1055,bool)),happ(s(fun(X1057,fun(X1056,fun(X1055,bool))),X1058),s(X1057,X1059))),s(X1056,happ(s(fun(X1060,X1056),X1061),s(X1060,X1062)))),X1055)))))) )),
  inference(superposition,[],[f311,f335])).
fof(f48022,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1051,X1049,X1053,X1047] : (~p(s(bool,happ(s(fun(X1047,bool),happ(s(fun(X1052,fun(X1047,bool)),'_dst_x0x0x1_3'(s(fun(X1049,fun(X1048,fun(X1047,bool))),X1050),s(X1049,X1051),s(fun(X1052,X1048),X1053))),s(X1052,X1054))),s(X1047,sK6(happ(s(fun(X1048,fun(X1047,bool)),happ(s(fun(X1049,fun(X1048,fun(X1047,bool))),X1050),s(X1049,X1051))),s(X1048,happ(s(fun(X1052,X1048),X1053),s(X1052,X1054)))),X1047))))) | p(s(bool,happ(s(fun(fun(X1047,bool),bool),'!_1'),s(fun(X1047,bool),happ(s(fun(X1048,fun(X1047,bool)),happ(s(fun(X1049,fun(X1048,fun(X1047,bool))),X1050),s(X1049,X1051))),s(X1048,happ(s(fun(X1052,X1048),X1053),s(X1052,X1054))))))))) )),
  inference(superposition,[],[f310,f335])).
fof(f48021,plain,(
  ( ! [X1042,X1040,X1046,X1044,X1039,X1043,X1041,X1045,X1038] : (~p(s(bool,happ(s(fun(fun(X1038,bool),bool),'!_1'),s(fun(X1038,bool),happ(s(fun(X1043,fun(X1038,bool)),'_dst_x0x0x1_3'(s(fun(X1040,fun(X1039,fun(X1038,bool))),X1041),s(X1040,X1042),s(fun(X1043,X1039),X1044))),s(X1043,X1045)))))) | p(s(bool,happ(s(fun(X1038,bool),happ(s(fun(X1039,fun(X1038,bool)),happ(s(fun(X1040,fun(X1039,fun(X1038,bool))),X1041),s(X1040,X1042))),s(X1039,happ(s(fun(X1043,X1039),X1044),s(X1043,X1045))))),s(X1038,X1046))))) )),
  inference(superposition,[],[f309,f335])).
fof(f48020,plain,(
  ( ! [X1035,X1033,X1037,X1031,X1029,X1034,X1032,X1036,X1030] : (p(s(bool,'|dollar|exists_1'(s(fun(X1029,bool),happ(s(fun(X1034,fun(X1029,bool)),'_dst_x0x0x1_3'(s(fun(X1031,fun(X1030,fun(X1029,bool))),X1032),s(X1031,X1033),s(fun(X1034,X1030),X1035))),s(X1034,X1036)))))) | s(X1029,X1037) = s(X1029,sK3(X1037,happ(s(fun(X1030,fun(X1029,bool)),happ(s(fun(X1031,fun(X1030,fun(X1029,bool))),X1032),s(X1031,X1033))),s(X1030,happ(s(fun(X1034,X1030),X1035),s(X1034,X1036)))),X1029))) )),
  inference(superposition,[],[f288,f335])).
fof(f48014,plain,(
  ( ! [X984,X978,X976,X982,X980,X985,X979,X977,X983,X981] : (s(X977,happ(s(fun(X976,X977),happ(s(fun(X982,fun(X976,X977)),'_dst_x0x0x1_3'(s(fun(X979,fun(X978,fun(X976,X977))),X980),s(X979,X981),s(fun(X982,X978),X983))),s(X982,X984))),s(X976,X985))) = s(X977,happ(s(fun(X978,X977),'_dst_x1x0_2'(s(fun(X978,fun(X976,X977)),happ(s(fun(X979,fun(X978,fun(X976,X977))),X980),s(X979,X981))),s(X976,X985))),s(X978,happ(s(fun(X982,X978),X983),s(X982,X984)))))) )),
  inference(superposition,[],[f334,f335])).
fof(f47990,plain,(
  ( ! [X798,X802,X800,X804,X799,X797,X803,X801] : (~p(s(bool,happ(s(fun(X801,bool),'_dst_x0x0x1_3'(s(fun(X798,fun(X797,bool)),X799),s(X798,X800),s(fun(X801,X797),X802))),s(X801,X803)))) | p(s(bool,happ(s(fun(fun(X804,bool),bool),'!_1'),s(fun(X804,bool),'_dst_x0_1'(s(bool,happ(s(fun(X797,bool),happ(s(fun(X798,fun(X797,bool)),X799),s(X798,X800))),s(X797,happ(s(fun(X801,X797),X802),s(X801,X803))))))))))) )),
  inference(superposition,[],[f5586,f335])).
fof(f47987,plain,(
  ( ! [X779,X777,X781,X775,X778,X776,X782,X780] : (~p(s(bool,happ(s(fun(X779,bool),'_dst_x0x0x1_3'(s(fun(X776,fun(X775,bool)),X777),s(X776,X778),s(fun(X779,X775),X780))),s(X779,X781)))) | p(s(bool,happ(s(fun(fun(X782,bool),bool),'?_1'),s(fun(X782,bool),'_dst_x0_1'(s(bool,happ(s(fun(X775,bool),happ(s(fun(X776,fun(X775,bool)),X777),s(X776,X778))),s(X775,happ(s(fun(X779,X775),X780),s(X779,X781))))))))))) )),
  inference(superposition,[],[f4218,f335])).
fof(f47984,plain,(
  ( ! [X757,X759,X753,X755,X760,X756,X758,X754] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X760,bool),'_dst_x0_1'(s(bool,happ(s(fun(X757,bool),'_dst_x0x0x1_3'(s(fun(X754,fun(X753,bool)),X755),s(X754,X756),s(fun(X757,X753),X758))),s(X757,X759))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X753,bool),happ(s(fun(X754,fun(X753,bool)),X755),s(X754,X756))),s(X753,happ(s(fun(X757,X753),X758),s(X757,X759)))))) )),
  inference(superposition,[],[f2213,f335])).
fof(f47981,plain,(
  ( ! [X736,X732,X734,X730,X733,X735,X729,X731] : (p(s(bool,'|dollar|exists_1'(s(fun(X736,bool),'_dst_x0_1'(s(bool,happ(s(fun(X733,bool),'_dst_x0x0x1_3'(s(fun(X730,fun(X729,bool)),X731),s(X730,X732),s(fun(X733,X729),X734))),s(X733,X735)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X729,bool),happ(s(fun(X730,fun(X729,bool)),X731),s(X730,X732))),s(X729,happ(s(fun(X733,X729),X734),s(X733,X735)))))) )),
  inference(superposition,[],[f1936,f335])).
fof(f47980,plain,(
  ( ! [X728,X724,X726,X722,X725,X727,X721,X723] : (~p(s(bool,happ(s(fun(X725,bool),'_dst_x0x0x1_3'(s(fun(X722,fun(X721,bool)),X723),s(X722,X724),s(fun(X725,X721),X726))),s(X725,X727)))) | p(s(bool,'|dollar|exists_1'(s(fun(X728,bool),'_dst_x0_1'(s(bool,happ(s(fun(X721,bool),happ(s(fun(X722,fun(X721,bool)),X723),s(X722,X724))),s(X721,happ(s(fun(X725,X721),X726),s(X725,X727))))))))))) )),
  inference(superposition,[],[f1802,f335])).
fof(f47979,plain,(
  ( ! [X720,X716,X718,X714,X717,X719,X713,X715] : (s(bool,'T_0') != s(bool,happ(s(fun(X717,bool),'_dst_x0x0x1_3'(s(fun(X714,fun(X713,bool)),X715),s(X714,X716),s(fun(X717,X713),X718))),s(X717,X719))) | s(bool,X720) = s(bool,happ(s(fun(X713,bool),happ(s(fun(X714,fun(X713,bool)),X715),s(X714,X716))),s(X713,happ(s(fun(X717,X713),X718),s(X717,X719))))) | s(bool,'F_0') = s(bool,X720)) )),
  inference(superposition,[],[f1400,f335])).
fof(f47978,plain,(
  ( ! [X707,X712,X708,X710,X706,X709,X711,X705] : (s(bool,X712) != s(bool,happ(s(fun(X709,bool),'_dst_x0x0x1_3'(s(fun(X706,fun(X705,bool)),X707),s(X706,X708),s(fun(X709,X705),X710))),s(X709,X711))) | s(bool,'T_0') = s(bool,happ(s(fun(X705,bool),happ(s(fun(X706,fun(X705,bool)),X707),s(X706,X708))),s(X705,happ(s(fun(X709,X705),X710),s(X709,X711))))) | s(bool,'F_0') = s(bool,X712)) )),
  inference(superposition,[],[f1197,f335])).
fof(f47977,plain,(
  ( ! [X697,X699,X700,X704,X702,X698,X701,X703] : (s(bool,X704) != s(bool,happ(s(fun(X701,bool),'_dst_x0x0x1_3'(s(fun(X698,fun(X697,bool)),X699),s(X698,X700),s(fun(X701,X697),X702))),s(X701,X703))) | s(bool,'T_0') = s(bool,X704) | s(bool,'F_0') = s(bool,happ(s(fun(X697,bool),happ(s(fun(X698,fun(X697,bool)),X699),s(X698,X700))),s(X697,happ(s(fun(X701,X697),X702),s(X701,X703)))))) )),
  inference(superposition,[],[f1197,f335])).
fof(f47971,plain,(
  ( ! [X652,X654,X648,X650,X653,X655,X649,X651] : (~p(s(bool,happ(s(fun(X652,bool),'_dst_x0x0x1_3'(s(fun(X649,fun(X648,bool)),X650),s(X649,X651),s(fun(X652,X648),X653))),s(X652,X654)))) | s(bool,X655) = s(bool,happ(s(fun(X648,bool),happ(s(fun(X649,fun(X648,bool)),X650),s(X649,X651))),s(X648,happ(s(fun(X652,X648),X653),s(X652,X654))))) | s(bool,'F_0') = s(bool,X655)) )),
  inference(superposition,[],[f1037,f335])).
fof(f48242,plain,(
  ( ! [X613,X609,X611,X607,X612,X608,X610] : (s(bool,'T_0') != s(bool,happ(s(fun(X611,bool),'_dst_x0x0x1_3'(s(fun(X608,fun(X607,bool)),X609),s(X608,X610),s(fun(X611,X607),X612))),s(X611,X613))) | s(bool,'T_0') = s(bool,happ(s(fun(X607,bool),happ(s(fun(X608,fun(X607,bool)),X609),s(X608,X610))),s(X607,happ(s(fun(X611,X607),X612),s(X611,X613)))))) )),
  inference(forward_demodulation,[],[f47966,f270])).
fof(f47966,plain,(
  ( ! [X613,X615,X609,X611,X607,X612,X614,X608,X610] : (s(bool,'const.bool.DATATYPE_1'(s(X614,X615))) != s(bool,happ(s(fun(X611,bool),'_dst_x0x0x1_3'(s(fun(X608,fun(X607,bool)),X609),s(X608,X610),s(fun(X611,X607),X612))),s(X611,X613))) | s(bool,'T_0') = s(bool,happ(s(fun(X607,bool),happ(s(fun(X608,fun(X607,bool)),X609),s(X608,X610))),s(X607,happ(s(fun(X611,X607),X612),s(X611,X613)))))) )),
  inference(superposition,[],[f557,f335])).
fof(f47965,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X599,X604] : (p(s(bool,happ(s(fun(X603,bool),'_dst_x0x0x1_3'(s(fun(X600,fun(X599,bool)),X601),s(X600,X602),s(fun(X603,X599),X604))),s(X603,X605)))) | s(bool,X606) = s(bool,happ(s(fun(X599,bool),happ(s(fun(X600,fun(X599,bool)),X601),s(X600,X602))),s(X599,happ(s(fun(X603,X599),X604),s(X603,X605))))) | s(bool,'T_0') = s(bool,X606)) )),
  inference(superposition,[],[f425,f335])).
fof(f47964,plain,(
  ( ! [X596,X598,X592,X594,X597,X593,X595] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X596,bool),'_dst_x0x0x1_3'(s(fun(X593,fun(X592,bool)),X594),s(X593,X595),s(fun(X596,X592),X597))),s(X596,X598))))) | s(bool,'F_0') = s(bool,happ(s(fun(X592,bool),happ(s(fun(X593,fun(X592,bool)),X594),s(X593,X595))),s(X592,happ(s(fun(X596,X592),X597),s(X596,X598)))))) )),
  inference(superposition,[],[f398,f335])).
fof(f47963,plain,(
  ( ! [X588,X590,X584,X586,X589,X591,X585,X587] : (~p(s(bool,happ(s(fun(X588,bool),'_dst_x0x0x1_3'(s(fun(X585,fun(X584,bool)),X586),s(X585,X587),s(fun(X588,X584),X589))),s(X588,X590)))) | s(bool,X591) != s(bool,happ(s(fun(X584,bool),happ(s(fun(X585,fun(X584,bool)),X586),s(X585,X587))),s(X584,happ(s(fun(X588,X584),X589),s(X588,X590))))) | s(bool,'T_0') = s(bool,X591)) )),
  inference(superposition,[],[f368,f335])).
fof(f47958,plain,(
  ( ! [X546,X549,X551,X545,X547,X548,X550,X544] : (~p(s(bool,happ(s(fun(X548,bool),'_dst_x0x0x1_3'(s(fun(X545,fun(X544,bool)),X546),s(X545,X547),s(fun(X548,X544),X549))),s(X548,X550)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X551))),s(bool,happ(s(fun(X544,bool),happ(s(fun(X545,fun(X544,bool)),X546),s(X545,X547))),s(X544,happ(s(fun(X548,X544),X549),s(X548,X550))))))))) )),
  inference(superposition,[],[f318,f335])).
fof(f47956,plain,(
  ( ! [X532,X534,X528,X530,X533,X535,X529,X531] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X532,bool),'_dst_x0x0x1_3'(s(fun(X529,fun(X528,bool)),X530),s(X529,X531),s(fun(X532,X528),X533))),s(X532,X534))))),s(bool,X535)))) | p(s(bool,happ(s(fun(X528,bool),happ(s(fun(X529,fun(X528,bool)),X530),s(X529,X531))),s(X528,happ(s(fun(X532,X528),X533),s(X532,X534))))))) )),
  inference(superposition,[],[f317,f335])).
fof(f47955,plain,(
  ( ! [X524,X526,X520,X522,X525,X527,X521,X523] : (~p(s(bool,happ(s(fun(X524,bool),'_dst_x0x0x1_3'(s(fun(X521,fun(X520,bool)),X522),s(X521,X523),s(fun(X524,X520),X525))),s(X524,X526)))) | p(s(bool,X527)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X520,bool),happ(s(fun(X521,fun(X520,bool)),X522),s(X521,X523))),s(X520,happ(s(fun(X524,X520),X525),s(X524,X526))))))),s(bool,X527))))) )),
  inference(superposition,[],[f316,f335])).
fof(f47954,plain,(
  ( ! [X516,X518,X512,X514,X517,X519,X513,X515] : (~p(s(bool,happ(s(fun(X516,bool),'_dst_x0x0x1_3'(s(fun(X513,fun(X512,bool)),X514),s(X513,X515),s(fun(X516,X512),X517))),s(X516,X518)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X519))),s(bool,happ(s(fun(X512,bool),happ(s(fun(X513,fun(X512,bool)),X514),s(X513,X515))),s(X512,happ(s(fun(X516,X512),X517),s(X516,X518))))))))) )),
  inference(superposition,[],[f315,f335])).
fof(f47953,plain,(
  ( ! [X509,X511,X505,X507,X508,X510,X504,X506] : (~p(s(bool,happ(s(fun(X508,bool),'_dst_x0x0x1_3'(s(fun(X505,fun(X504,bool)),X506),s(X505,X507),s(fun(X508,X504),X509))),s(X508,X510)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X504,bool),happ(s(fun(X505,fun(X504,bool)),X506),s(X505,X507))),s(X504,happ(s(fun(X508,X504),X509),s(X508,X510))))))),s(bool,X511))))) )),
  inference(superposition,[],[f314,f335])).
fof(f47952,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X503,X497] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X503))),s(bool,happ(s(fun(X500,bool),'_dst_x0x0x1_3'(s(fun(X497,fun(X496,bool)),X498),s(X497,X499),s(fun(X500,X496),X501))),s(X500,X502)))))) | p(s(bool,X503)) | p(s(bool,happ(s(fun(X496,bool),happ(s(fun(X497,fun(X496,bool)),X498),s(X497,X499))),s(X496,happ(s(fun(X500,X496),X501),s(X500,X502))))))) )),
  inference(superposition,[],[f313,f335])).
fof(f47951,plain,(
  ( ! [X492,X494,X488,X490,X493,X495,X489,X491] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X492,bool),'_dst_x0x0x1_3'(s(fun(X489,fun(X488,bool)),X490),s(X489,X491),s(fun(X492,X488),X493))),s(X492,X494))))),s(bool,X495)))) | p(s(bool,happ(s(fun(X488,bool),happ(s(fun(X489,fun(X488,bool)),X490),s(X489,X491))),s(X488,happ(s(fun(X492,X488),X493),s(X492,X494)))))) | p(s(bool,X495))) )),
  inference(superposition,[],[f313,f335])).
fof(f47950,plain,(
  ( ! [X484,X486,X480,X482,X485,X487,X481,X483] : (~p(s(bool,happ(s(fun(X484,bool),'_dst_x0x0x1_3'(s(fun(X481,fun(X480,bool)),X482),s(X481,X483),s(fun(X484,X480),X485))),s(X484,X486)))) | ~p(s(bool,X487)) | s(bool,X487) = s(bool,happ(s(fun(X480,bool),happ(s(fun(X481,fun(X480,bool)),X482),s(X481,X483))),s(X480,happ(s(fun(X484,X480),X485),s(X484,X486)))))) )),
  inference(superposition,[],[f308,f335])).
fof(f47948,plain,(
  ( ! [X466,X469,X471,X465,X467,X468,X470,X464] : (p(s(bool,happ(s(fun(X468,bool),'_dst_x0x0x1_3'(s(fun(X465,fun(X464,bool)),X466),s(X465,X467),s(fun(X468,X464),X469))),s(X468,X470)))) | p(s(bool,X471)) | s(bool,X471) = s(bool,happ(s(fun(X464,bool),happ(s(fun(X465,fun(X464,bool)),X466),s(X465,X467))),s(X464,happ(s(fun(X468,X464),X469),s(X468,X470)))))) )),
  inference(superposition,[],[f305,f335])).
fof(f47947,plain,(
  ( ! [X461,X463,X457,X459,X460,X462,X458] : (p(s(bool,happ(s(fun(X461,bool),'_dst_x0x0x1_3'(s(fun(X458,fun(X457,bool)),X459),s(X458,X460),s(fun(X461,X457),X462))),s(X461,X463)))) | s(bool,'F_0') = s(bool,happ(s(fun(X457,bool),happ(s(fun(X458,fun(X457,bool)),X459),s(X458,X460))),s(X457,happ(s(fun(X461,X457),X462),s(X461,X463)))))) )),
  inference(superposition,[],[f250,f335])).
fof(f47946,plain,(
  ( ! [X453,X455,X451,X452,X454,X450,X456] : (s(bool,'F_0') != s(bool,happ(s(fun(X454,bool),'_dst_x0x0x1_3'(s(fun(X451,fun(X450,bool)),X452),s(X451,X453),s(fun(X454,X450),X455))),s(X454,X456))) | ~p(s(bool,happ(s(fun(X450,bool),happ(s(fun(X451,fun(X450,bool)),X452),s(X451,X453))),s(X450,happ(s(fun(X454,X450),X455),s(X454,X456))))))) )),
  inference(superposition,[],[f249,f335])).
fof(f47945,plain,(
  ( ! [X445,X447,X443,X449,X444,X446,X448] : (~p(s(bool,happ(s(fun(X447,bool),'_dst_x0x0x1_3'(s(fun(X444,fun(X443,bool)),X445),s(X444,X446),s(fun(X447,X443),X448))),s(X447,X449)))) | s(bool,'T_0') = s(bool,happ(s(fun(X443,bool),happ(s(fun(X444,fun(X443,bool)),X445),s(X444,X446))),s(X443,happ(s(fun(X447,X443),X448),s(X447,X449)))))) )),
  inference(superposition,[],[f246,f335])).
fof(f47944,plain,(
  ( ! [X441,X436,X438,X440,X442,X437,X439] : (p(s(bool,happ(s(fun(X440,bool),'_dst_x0x0x1_3'(s(fun(X437,fun(X436,bool)),X438),s(X437,X439),s(fun(X440,X436),X441))),s(X440,X442)))) | s(bool,'T_0') != s(bool,happ(s(fun(X436,bool),happ(s(fun(X437,fun(X436,bool)),X438),s(X437,X439))),s(X436,happ(s(fun(X440,X436),X441),s(X440,X442)))))) )),
  inference(superposition,[],[f245,f335])).
fof(f47942,plain,(
  ( ! [X428,X426,X425,X427] : (~p(s(bool,happ(s(fun(X426,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X425),s(fun(X426,bool),X427))),s(X426,X428)))) | p(s(bool,X425)) | p(s(bool,happ(s(fun(X426,bool),X427),s(X426,X428))))) )),
  inference(superposition,[],[f313,f335])).
fof(f47941,plain,(
  ( ! [X422,X424,X421,X423] : (p(s(bool,happ(s(fun(X422,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X421),s(fun(X422,bool),X423))),s(X422,X424)))) | p(s(bool,X421))) )),
  inference(superposition,[],[f317,f335])).
fof(f47940,plain,(
  ( ! [X414,X420,X416,X418,X415,X417,X419] : (~p(s(bool,happ(s(fun(X418,bool),'_dst_x0x0x1_3'(s(fun(X415,fun(X414,bool)),X416),s(X415,X417),s(fun(X418,X414),X419))),s(X418,X420)))) | p(s(bool,'|dollar|exists_1'(s(fun(X414,bool),happ(s(fun(X415,fun(X414,bool)),X416),s(X415,X417))))))) )),
  inference(superposition,[],[f2633,f335])).
fof(f47939,plain,(
  ( ! [X412,X408,X410,X407,X413,X409,X411] : (~p(s(bool,happ(s(fun(X411,bool),'_dst_x0x0x1_3'(s(fun(X408,fun(X407,bool)),X409),s(X408,X410),s(fun(X411,X407),X412))),s(X411,X413)))) | p(s(bool,happ(s(fun(fun(X407,bool),bool),'?_1'),s(fun(X407,bool),happ(s(fun(X408,fun(X407,bool)),X409),s(X408,X410))))))) )),
  inference(superposition,[],[f312,f335])).
fof(f47925,plain,(
  ( ! [X280,X282,X279,X285,X287,X281,X283,X284,X286] : (p(s(bool,happ(s(fun(X279,bool),happ(s(fun(X279,fun(X279,bool)),'=_0'),s(X279,X287))),s(X279,happ(s(fun(X284,X279),'_dst_x0x0x1_3'(s(fun(X281,fun(X280,X279)),X282),s(X281,X283),s(fun(X284,X280),X285))),s(X284,X286)))))) | s(X279,X287) != s(X279,happ(s(fun(X280,X279),happ(s(fun(X281,fun(X280,X279)),X282),s(X281,X283))),s(X280,happ(s(fun(X284,X280),X285),s(X284,X286)))))) )),
  inference(superposition,[],[f331,f335])).
fof(f47924,plain,(
  ( ! [X271,X277,X273,X275,X270,X276,X278,X272,X274] : (p(s(bool,happ(s(fun(X270,bool),happ(s(fun(X270,fun(X270,bool)),'=_0'),s(X270,happ(s(fun(X275,X270),'_dst_x0x0x1_3'(s(fun(X272,fun(X271,X270)),X273),s(X272,X274),s(fun(X275,X271),X276))),s(X275,X277))))),s(X270,X278)))) | s(X270,X278) != s(X270,happ(s(fun(X271,X270),happ(s(fun(X272,fun(X271,X270)),X273),s(X272,X274))),s(X271,happ(s(fun(X275,X271),X276),s(X275,X277)))))) )),
  inference(superposition,[],[f331,f335])).
fof(f47923,plain,(
  ( ! [X261,X263,X269,X265,X267,X262,X268,X264,X266] : (~p(s(bool,happ(s(fun(X261,bool),happ(s(fun(X261,fun(X261,bool)),'=_0'),s(X261,X269))),s(X261,happ(s(fun(X266,X261),'_dst_x0x0x1_3'(s(fun(X263,fun(X262,X261)),X264),s(X263,X265),s(fun(X266,X262),X267))),s(X266,X268)))))) | s(X261,X269) = s(X261,happ(s(fun(X262,X261),happ(s(fun(X263,fun(X262,X261)),X264),s(X263,X265))),s(X262,happ(s(fun(X266,X262),X267),s(X266,X268)))))) )),
  inference(superposition,[],[f330,f335])).
fof(f47922,plain,(
  ( ! [X255,X253,X257,X259,X260,X254,X252,X256,X258] : (~p(s(bool,happ(s(fun(X252,bool),happ(s(fun(X252,fun(X252,bool)),'=_0'),s(X252,happ(s(fun(X257,X252),'_dst_x0x0x1_3'(s(fun(X254,fun(X253,X252)),X255),s(X254,X256),s(fun(X257,X253),X258))),s(X257,X259))))),s(X252,X260)))) | s(X252,X260) = s(X252,happ(s(fun(X253,X252),happ(s(fun(X254,fun(X253,X252)),X255),s(X254,X256))),s(X253,happ(s(fun(X257,X253),X258),s(X257,X259)))))) )),
  inference(superposition,[],[f330,f335])).
fof(f47900,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X16,happ(s(fun(X8,X16),X17),s(X8,happ(s(fun(X13,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X9,X8)),X11),s(X10,X12),s(fun(X13,X9),X14))),s(X13,X15))))) = s(X16,happ(s(fun(X9,X16),'_dst_x0x1_2'(s(fun(X8,X16),X17),s(fun(X9,X8),happ(s(fun(X10,fun(X9,X8)),X11),s(X10,X12))))),s(X9,happ(s(fun(X13,X9),X14),s(X13,X15)))))) )),
  inference(superposition,[],[f333,f335])).
fof(f47898,plain,(
  ( ! [X1808,X1806,X1804,X1802,X1800,X1807,X1805,X1803,X1801,X1799] : (s('type.fcp.cart'(bool,X1799),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1799),happ(s(fun(X1802,'type.fcp.cart'(bool,X1799)),happ(s(fun(X1801,fun(X1802,'type.fcp.cart'(bool,X1799))),X1803),s(X1801,X1804))),s(X1802,happ(s(fun(X1800,X1802),X1805),s(X1800,X1806))))) | p(s(bool,sK4(X1807,X1808,happ(s(fun(X1800,'type.fcp.cart'(bool,X1799)),'_dst_x0x0x1_3'(s(fun(X1801,fun(X1802,'type.fcp.cart'(bool,X1799))),X1803),s(X1801,X1804),s(fun(X1800,X1802),X1805))),s(X1800,X1806)),X1799)))) )),
  inference(superposition,[],[f302,f335])).
fof(f47896,plain,(
  ( ! [X1787,X1778,X1780,X1782,X1784,X1786,X1779,X1781,X1783,X1785] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1786,X1787,happ(s(fun(X1779,'type.fcp.cart'(bool,X1778)),'_dst_x0x0x1_3'(s(fun(X1780,fun(X1781,'type.fcp.cart'(bool,X1778))),X1782),s(X1780,X1783),s(fun(X1779,X1781),X1784))),s(X1779,X1785)),X1778)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1778),'const.wordSem.Loc_2'(s('type.num.num',X1786),s('type.num.num',X1787))),s('type.wordSem.word_loc'(X1778),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1778),happ(s(fun(X1781,'type.fcp.cart'(bool,X1778)),happ(s(fun(X1780,fun(X1781,'type.fcp.cart'(bool,X1778))),X1782),s(X1780,X1783))),s(X1781,happ(s(fun(X1779,X1781),X1784),s(X1779,X1785)))))))))) )),
  inference(superposition,[],[f303,f335])).
fof(f47892,plain,(
  ( ! [X1734,X1736,X1738,X1740,X1742,X1735,X1737,X1739,X1741,X1743] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1741,happ(s(fun(X1734,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1735,fun(X1736,'type.num.num')),X1737),s(X1735,X1738),s(fun(X1734,X1736),X1739))),s(X1734,X1740)),X1742,X1743)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1743),'const.wordSem.Loc_2'(s('type.num.num',X1741),s('type.num.num',happ(s(fun(X1736,'type.num.num'),happ(s(fun(X1735,fun(X1736,'type.num.num')),X1737),s(X1735,X1738))),s(X1736,happ(s(fun(X1734,X1736),X1739),s(X1734,X1740))))))),s('type.wordSem.word_loc'(X1743),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1743),X1742)))))) )),
  inference(superposition,[],[f303,f335])).
fof(f47891,plain,(
  ( ! [X1725,X1727,X1728,X1730,X1732,X1724,X1726,X1729,X1731,X1733] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X1724,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1725,fun(X1726,'type.num.num')),X1727),s(X1725,X1728),s(fun(X1724,X1726),X1729))),s(X1724,X1730)),X1731,X1732,X1733)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1733),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X1726,'type.num.num'),happ(s(fun(X1725,fun(X1726,'type.num.num')),X1727),s(X1725,X1728))),s(X1726,happ(s(fun(X1724,X1726),X1729),s(X1724,X1730))))),s('type.num.num',X1731))),s('type.wordSem.word_loc'(X1733),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1733),X1732)))))) )),
  inference(superposition,[],[f303,f335])).
fof(f47880,plain,(
  ( ! [X1608,X1610,X1612,X1614,X1609,X1611,X1613,X1615,X1616] : (s('type.wordSem.word_loc'(X1608),X1616) != s('type.wordSem.word_loc'(X1608),happ(s(fun(X1611,'type.wordSem.word_loc'(X1608)),happ(s(fun(X1610,fun(X1611,'type.wordSem.word_loc'(X1608))),X1612),s(X1610,X1613))),s(X1611,happ(s(fun(X1609,X1611),X1614),s(X1609,X1615))))) | s('type.stackSem.result'(X1608),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1608),X1616))) = s('type.stackSem.result'(X1608),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1608),happ(s(fun(X1609,'type.wordSem.word_loc'(X1608)),'_dst_x0x0x1_3'(s(fun(X1610,fun(X1611,'type.wordSem.word_loc'(X1608))),X1612),s(X1610,X1613),s(fun(X1609,X1611),X1614))),s(X1609,X1615)))))) )),
  inference(superposition,[],[f295,f335])).
fof(f47878,plain,(
  ( ! [X1590,X1592,X1594,X1596,X1598,X1591,X1593,X1595,X1597] : (s('type.stackSem.result'(X1590),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1590),X1598))) != s('type.stackSem.result'(X1590),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1590),happ(s(fun(X1593,'type.wordSem.word_loc'(X1590)),happ(s(fun(X1592,fun(X1593,'type.wordSem.word_loc'(X1590))),X1594),s(X1592,X1595))),s(X1593,happ(s(fun(X1591,X1593),X1596),s(X1591,X1597))))))) | s('type.wordSem.word_loc'(X1590),X1598) = s('type.wordSem.word_loc'(X1590),happ(s(fun(X1591,'type.wordSem.word_loc'(X1590)),'_dst_x0x0x1_3'(s(fun(X1592,fun(X1593,'type.wordSem.word_loc'(X1590))),X1594),s(X1592,X1595),s(fun(X1591,X1593),X1596))),s(X1591,X1597)))) )),
  inference(superposition,[],[f294,f335])).
fof(f47876,plain,(
  ( ! [X1573,X1575,X1577,X1579,X1572,X1574,X1576,X1578,X1580] : (s('type.wordSem.word_loc'(X1572),X1580) != s('type.wordSem.word_loc'(X1572),happ(s(fun(X1575,'type.wordSem.word_loc'(X1572)),happ(s(fun(X1574,fun(X1575,'type.wordSem.word_loc'(X1572))),X1576),s(X1574,X1577))),s(X1575,happ(s(fun(X1573,X1575),X1578),s(X1573,X1579))))) | s('type.stackSem.result'(X1572),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1572),X1580))) = s('type.stackSem.result'(X1572),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1572),happ(s(fun(X1573,'type.wordSem.word_loc'(X1572)),'_dst_x0x0x1_3'(s(fun(X1574,fun(X1575,'type.wordSem.word_loc'(X1572))),X1576),s(X1574,X1577),s(fun(X1573,X1575),X1578))),s(X1573,X1579)))))) )),
  inference(superposition,[],[f293,f335])).
fof(f47874,plain,(
  ( ! [X1560,X1562,X1555,X1557,X1559,X1561,X1554,X1556,X1558] : (s('type.stackSem.result'(X1554),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1554),X1562))) != s('type.stackSem.result'(X1554),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1554),happ(s(fun(X1557,'type.wordSem.word_loc'(X1554)),happ(s(fun(X1556,fun(X1557,'type.wordSem.word_loc'(X1554))),X1558),s(X1556,X1559))),s(X1557,happ(s(fun(X1555,X1557),X1560),s(X1555,X1561))))))) | s('type.wordSem.word_loc'(X1554),X1562) = s('type.wordSem.word_loc'(X1554),happ(s(fun(X1555,'type.wordSem.word_loc'(X1554)),'_dst_x0x0x1_3'(s(fun(X1556,fun(X1557,'type.wordSem.word_loc'(X1554))),X1558),s(X1556,X1559),s(fun(X1555,X1557),X1560))),s(X1555,X1561)))) )),
  inference(superposition,[],[f292,f335])).
fof(f47872,plain,(
  ( ! [X1538,X1540,X1542,X1536,X1544,X1539,X1541,X1543,X1537] : (s('type.wordSem.word_loc'(X1536),X1544) != s('type.wordSem.word_loc'(X1536),happ(s(fun(X1539,'type.wordSem.word_loc'(X1536)),happ(s(fun(X1538,fun(X1539,'type.wordSem.word_loc'(X1536))),X1540),s(X1538,X1541))),s(X1539,happ(s(fun(X1537,X1539),X1542),s(X1537,X1543))))) | s('type.stackSem.result'(X1536),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1536),X1544))) = s('type.stackSem.result'(X1536),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1536),happ(s(fun(X1537,'type.wordSem.word_loc'(X1536)),'_dst_x0x0x1_3'(s(fun(X1538,fun(X1539,'type.wordSem.word_loc'(X1536))),X1540),s(X1538,X1541),s(fun(X1537,X1539),X1542))),s(X1537,X1543)))))) )),
  inference(superposition,[],[f291,f335])).
fof(f47870,plain,(
  ( ! [X1521,X1523,X1525,X1519,X1520,X1522,X1524,X1526,X1518] : (s('type.stackSem.result'(X1518),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1518),X1526))) != s('type.stackSem.result'(X1518),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1518),happ(s(fun(X1521,'type.wordSem.word_loc'(X1518)),happ(s(fun(X1520,fun(X1521,'type.wordSem.word_loc'(X1518))),X1522),s(X1520,X1523))),s(X1521,happ(s(fun(X1519,X1521),X1524),s(X1519,X1525))))))) | s('type.wordSem.word_loc'(X1518),X1526) = s('type.wordSem.word_loc'(X1518),happ(s(fun(X1519,'type.wordSem.word_loc'(X1518)),'_dst_x0x0x1_3'(s(fun(X1520,fun(X1521,'type.wordSem.word_loc'(X1518))),X1522),s(X1520,X1523),s(fun(X1519,X1521),X1524))),s(X1519,X1525)))) )),
  inference(superposition,[],[f290,f335])).
fof(f47861,plain,(
  ( ! [X1449,X1445,X1447,X1448,X1450,X1444,X1446] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1446,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1445,fun(X1446,'type.wordSem.word_loc'(sK0))),X1447),s(X1445,X1448))),s(X1446,happ(s(fun(X1444,X1446),X1449),s(X1444,X1450))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1444,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1445,fun(X1446,'type.wordSem.word_loc'(sK0))),X1447),s(X1445,X1448),s(fun(X1444,X1446),X1449))),s(X1444,X1450)))) )),
  inference(superposition,[],[f2643,f335])).
fof(f47860,plain,(
  ( ! [X1438,X1441,X1443,X1437,X1439,X1440,X1442] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1439,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1438,fun(X1439,'type.wordSem.word_loc'(sK0))),X1440),s(X1438,X1441))),s(X1439,happ(s(fun(X1437,X1439),X1442),s(X1437,X1443))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun(X1437,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1438,fun(X1439,'type.wordSem.word_loc'(sK0))),X1440),s(X1438,X1441),s(fun(X1437,X1439),X1442))),s(X1437,X1443)))))) )),
  inference(superposition,[],[f2651,f335])).
fof(f47859,plain,(
  ( ! [X1434,X1428,X1430,X1436,X1433,X1435,X1429,X1431,X1432] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1430,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1429,fun(X1430,'type.wordSem.word_loc'(sK0))),X1431),s(X1429,X1432))),s(X1430,happ(s(fun(X1428,X1430),X1433),s(X1428,X1434))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1435,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1428,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1429,fun(X1430,'type.wordSem.word_loc'(sK0))),X1431),s(X1429,X1432),s(fun(X1428,X1430),X1433))),s(X1428,X1434))))),s(X1435,X1436)))) )),
  inference(superposition,[],[f2652,f335])).
fof(f47858,plain,(
  ( ! [X1424,X1426,X1420,X1422,X1427,X1425,X1421,X1423] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1422,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1421,fun(X1422,'type.wordSem.word_loc'(sK0))),X1423),s(X1421,X1424))),s(X1422,happ(s(fun(X1420,X1422),X1425),s(X1420,X1426))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1420,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1421,fun(X1422,'type.wordSem.word_loc'(sK0))),X1423),s(X1421,X1424),s(fun(X1420,X1422),X1425))),s(X1420,X1426))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X1427),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f335])).
fof(f47857,plain,(
  ( ! [X1416,X1418,X1412,X1414,X1417,X1419,X1413,X1415] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X1414,'type.wordSem.word_loc'(sK0)),happ(s(fun(X1413,fun(X1414,'type.wordSem.word_loc'(sK0))),X1415),s(X1413,X1416))),s(X1414,happ(s(fun(X1412,X1414),X1417),s(X1412,X1418))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X1412,'type.wordSem.word_loc'(sK0)),'_dst_x0x0x1_3'(s(fun(X1413,fun(X1414,'type.wordSem.word_loc'(sK0))),X1415),s(X1413,X1416),s(fun(X1412,X1414),X1417))),s(X1412,X1418)),X1419,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1419)))) )),
  inference(superposition,[],[f2654,f335])).
fof(f47828,plain,(
  ( ! [X1064,X1058,X1062,X1060,X1065,X1059,X1057,X1063,X1061] : (~p(s(bool,happ(s(fun(X1057,bool),happ(s(fun(X1060,fun(X1057,bool)),happ(s(fun(X1059,fun(X1060,fun(X1057,bool))),X1061),s(X1059,X1062))),s(X1060,happ(s(fun(X1058,X1060),X1063),s(X1058,X1064))))),s(X1057,X1065)))) | p(s(bool,'|dollar|exists_1'(s(fun(X1057,bool),happ(s(fun(X1058,fun(X1057,bool)),'_dst_x0x0x1_3'(s(fun(X1059,fun(X1060,fun(X1057,bool))),X1061),s(X1059,X1062),s(fun(X1058,X1060),X1063))),s(X1058,X1064))))))) )),
  inference(superposition,[],[f2633,f335])).
fof(f47827,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1056,X1051,X1049,X1055,X1053] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1048,bool),happ(s(fun(X1051,fun(X1048,bool)),happ(s(fun(X1050,fun(X1051,fun(X1048,bool))),X1052),s(X1050,X1053))),s(X1051,happ(s(fun(X1049,X1051),X1054),s(X1049,X1055))))))) | s(X1048,X1056) = s(X1048,sK3(X1056,happ(s(fun(X1049,fun(X1048,bool)),'_dst_x0x0x1_3'(s(fun(X1050,fun(X1051,fun(X1048,bool))),X1052),s(X1050,X1053),s(fun(X1049,X1051),X1054))),s(X1049,X1055)),X1048))) )),
  inference(superposition,[],[f565,f335])).
fof(f47826,plain,(
  ( ! [X1042,X1040,X1046,X1044,X1039,X1043,X1041,X1047,X1045] : (~p(s(bool,happ(s(fun(X1039,bool),happ(s(fun(X1042,fun(X1039,bool)),happ(s(fun(X1041,fun(X1042,fun(X1039,bool))),X1043),s(X1041,X1044))),s(X1042,happ(s(fun(X1040,X1042),X1045),s(X1040,X1046))))),s(X1039,X1047)))) | p(s(bool,happ(s(fun(fun(X1039,bool),bool),'?_1'),s(fun(X1039,bool),happ(s(fun(X1040,fun(X1039,bool)),'_dst_x0x0x1_3'(s(fun(X1041,fun(X1042,fun(X1039,bool))),X1043),s(X1041,X1044),s(fun(X1040,X1042),X1045))),s(X1040,X1046))))))) )),
  inference(superposition,[],[f312,f335])).
fof(f47825,plain,(
  ( ! [X1035,X1033,X1037,X1031,X1034,X1032,X1038,X1036] : (~p(s(bool,happ(s(fun(fun(X1031,bool),bool),'?_1'),s(fun(X1031,bool),happ(s(fun(X1034,fun(X1031,bool)),happ(s(fun(X1033,fun(X1034,fun(X1031,bool))),X1035),s(X1033,X1036))),s(X1034,happ(s(fun(X1032,X1034),X1037),s(X1032,X1038)))))))) | p(s(bool,happ(s(fun(X1031,bool),happ(s(fun(X1032,fun(X1031,bool)),'_dst_x0x0x1_3'(s(fun(X1033,fun(X1034,fun(X1031,bool))),X1035),s(X1033,X1036),s(fun(X1032,X1034),X1037))),s(X1032,X1038))),s(X1031,sK7(happ(s(fun(X1032,fun(X1031,bool)),'_dst_x0x0x1_3'(s(fun(X1033,fun(X1034,fun(X1031,bool))),X1035),s(X1033,X1036),s(fun(X1032,X1034),X1037))),s(X1032,X1038)),X1031)))))) )),
  inference(superposition,[],[f311,f335])).
fof(f47824,plain,(
  ( ! [X1023,X1027,X1025,X1029,X1026,X1024,X1030,X1028] : (~p(s(bool,happ(s(fun(X1023,bool),happ(s(fun(X1026,fun(X1023,bool)),happ(s(fun(X1025,fun(X1026,fun(X1023,bool))),X1027),s(X1025,X1028))),s(X1026,happ(s(fun(X1024,X1026),X1029),s(X1024,X1030))))),s(X1023,sK6(happ(s(fun(X1024,fun(X1023,bool)),'_dst_x0x0x1_3'(s(fun(X1025,fun(X1026,fun(X1023,bool))),X1027),s(X1025,X1028),s(fun(X1024,X1026),X1029))),s(X1024,X1030)),X1023))))) | p(s(bool,happ(s(fun(fun(X1023,bool),bool),'!_1'),s(fun(X1023,bool),happ(s(fun(X1024,fun(X1023,bool)),'_dst_x0x0x1_3'(s(fun(X1025,fun(X1026,fun(X1023,bool))),X1027),s(X1025,X1028),s(fun(X1024,X1026),X1029))),s(X1024,X1030))))))) )),
  inference(superposition,[],[f310,f335])).
fof(f47823,plain,(
  ( ! [X1019,X1017,X1021,X1015,X1018,X1016,X1022,X1020,X1014] : (~p(s(bool,happ(s(fun(fun(X1014,bool),bool),'!_1'),s(fun(X1014,bool),happ(s(fun(X1017,fun(X1014,bool)),happ(s(fun(X1016,fun(X1017,fun(X1014,bool))),X1018),s(X1016,X1019))),s(X1017,happ(s(fun(X1015,X1017),X1020),s(X1015,X1021)))))))) | p(s(bool,happ(s(fun(X1014,bool),happ(s(fun(X1015,fun(X1014,bool)),'_dst_x0x0x1_3'(s(fun(X1016,fun(X1017,fun(X1014,bool))),X1018),s(X1016,X1019),s(fun(X1015,X1017),X1020))),s(X1015,X1021))),s(X1014,X1022))))) )),
  inference(superposition,[],[f309,f335])).
fof(f47822,plain,(
  ( ! [X1011,X1009,X1013,X1006,X1010,X1008,X1012,X1007,X1005] : (p(s(bool,'|dollar|exists_1'(s(fun(X1005,bool),happ(s(fun(X1008,fun(X1005,bool)),happ(s(fun(X1007,fun(X1008,fun(X1005,bool))),X1009),s(X1007,X1010))),s(X1008,happ(s(fun(X1006,X1008),X1011),s(X1006,X1012)))))))) | s(X1005,X1013) = s(X1005,sK3(X1013,happ(s(fun(X1006,fun(X1005,bool)),'_dst_x0x0x1_3'(s(fun(X1007,fun(X1008,fun(X1005,bool))),X1009),s(X1007,X1010),s(fun(X1006,X1008),X1011))),s(X1006,X1012)),X1005))) )),
  inference(superposition,[],[f288,f335])).
fof(f47816,plain,(
  ( ! [X957,X954,X952,X958,X956,X961,X960,X955,X953,X959] : (s(X953,happ(s(fun(X954,X953),'_dst_x1x0_2'(s(fun(X954,fun(X952,X953)),'_dst_x0x0x1_3'(s(fun(X955,fun(X956,fun(X952,X953))),X957),s(X955,X958),s(fun(X954,X956),X959))),s(X952,X961))),s(X954,X960))) = s(X953,happ(s(fun(X952,X953),happ(s(fun(X956,fun(X952,X953)),happ(s(fun(X955,fun(X956,fun(X952,X953))),X957),s(X955,X958))),s(X956,happ(s(fun(X954,X956),X959),s(X954,X960))))),s(X952,X961)))) )),
  inference(superposition,[],[f334,f335])).
fof(f47792,plain,(
  ( ! [X779,X777,X775,X773,X778,X776,X780,X774] : (~p(s(bool,happ(s(fun(X775,bool),happ(s(fun(X774,fun(X775,bool)),X776),s(X774,X777))),s(X775,happ(s(fun(X773,X775),X778),s(X773,X779)))))) | p(s(bool,happ(s(fun(fun(X780,bool),bool),'!_1'),s(fun(X780,bool),'_dst_x0_1'(s(bool,happ(s(fun(X773,bool),'_dst_x0x0x1_3'(s(fun(X774,fun(X775,bool)),X776),s(X774,X777),s(fun(X773,X775),X778))),s(X773,X779))))))))) )),
  inference(superposition,[],[f5586,f335])).
fof(f47789,plain,(
  ( ! [X757,X753,X755,X751,X756,X758,X752,X754] : (~p(s(bool,happ(s(fun(X753,bool),happ(s(fun(X752,fun(X753,bool)),X754),s(X752,X755))),s(X753,happ(s(fun(X751,X753),X756),s(X751,X757)))))) | p(s(bool,happ(s(fun(fun(X758,bool),bool),'?_1'),s(fun(X758,bool),'_dst_x0_1'(s(bool,happ(s(fun(X751,bool),'_dst_x0x0x1_3'(s(fun(X752,fun(X753,bool)),X754),s(X752,X755),s(fun(X751,X753),X756))),s(X751,X757))))))))) )),
  inference(superposition,[],[f4218,f335])).
fof(f47786,plain,(
  ( ! [X736,X732,X734,X730,X733,X735,X729,X731] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X736,bool),'_dst_x0_1'(s(bool,happ(s(fun(X731,bool),happ(s(fun(X730,fun(X731,bool)),X732),s(X730,X733))),s(X731,happ(s(fun(X729,X731),X734),s(X729,X735))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X729,bool),'_dst_x0x0x1_3'(s(fun(X730,fun(X731,bool)),X732),s(X730,X733),s(fun(X729,X731),X734))),s(X729,X735)))) )),
  inference(superposition,[],[f2213,f335])).
fof(f47783,plain,(
  ( ! [X707,X712,X708,X710,X706,X709,X711,X705] : (p(s(bool,'|dollar|exists_1'(s(fun(X712,bool),'_dst_x0_1'(s(bool,happ(s(fun(X707,bool),happ(s(fun(X706,fun(X707,bool)),X708),s(X706,X709))),s(X707,happ(s(fun(X705,X707),X710),s(X705,X711)))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X705,bool),'_dst_x0x0x1_3'(s(fun(X706,fun(X707,bool)),X708),s(X706,X709),s(fun(X705,X707),X710))),s(X705,X711)))) )),
  inference(superposition,[],[f1936,f335])).
fof(f47782,plain,(
  ( ! [X697,X699,X700,X702,X704,X698,X701,X703] : (~p(s(bool,happ(s(fun(X699,bool),happ(s(fun(X698,fun(X699,bool)),X700),s(X698,X701))),s(X699,happ(s(fun(X697,X699),X702),s(X697,X703)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X704,bool),'_dst_x0_1'(s(bool,happ(s(fun(X697,bool),'_dst_x0x0x1_3'(s(fun(X698,fun(X699,bool)),X700),s(X698,X701),s(fun(X697,X699),X702))),s(X697,X703))))))))) )),
  inference(superposition,[],[f1802,f335])).
fof(f47781,plain,(
  ( ! [X693,X695,X689,X691,X696,X692,X694,X690] : (s(bool,'T_0') != s(bool,happ(s(fun(X691,bool),happ(s(fun(X690,fun(X691,bool)),X692),s(X690,X693))),s(X691,happ(s(fun(X689,X691),X694),s(X689,X695))))) | s(bool,X696) = s(bool,happ(s(fun(X689,bool),'_dst_x0x0x1_3'(s(fun(X690,fun(X691,bool)),X692),s(X690,X693),s(fun(X689,X691),X694))),s(X689,X695))) | s(bool,'F_0') = s(bool,X696)) )),
  inference(superposition,[],[f1400,f335])).
fof(f47780,plain,(
  ( ! [X685,X687,X681,X683,X688,X684,X686,X682] : (s(bool,X688) != s(bool,happ(s(fun(X683,bool),happ(s(fun(X682,fun(X683,bool)),X684),s(X682,X685))),s(X683,happ(s(fun(X681,X683),X686),s(X681,X687))))) | s(bool,'T_0') = s(bool,happ(s(fun(X681,bool),'_dst_x0x0x1_3'(s(fun(X682,fun(X683,bool)),X684),s(X682,X685),s(fun(X681,X683),X686))),s(X681,X687))) | s(bool,'F_0') = s(bool,X688)) )),
  inference(superposition,[],[f1197,f335])).
fof(f47779,plain,(
  ( ! [X677,X679,X673,X675,X680,X676,X678,X674] : (s(bool,X680) != s(bool,happ(s(fun(X675,bool),happ(s(fun(X674,fun(X675,bool)),X676),s(X674,X677))),s(X675,happ(s(fun(X673,X675),X678),s(X673,X679))))) | s(bool,'T_0') = s(bool,X680) | s(bool,'F_0') = s(bool,happ(s(fun(X673,bool),'_dst_x0x0x1_3'(s(fun(X674,fun(X675,bool)),X676),s(X674,X677),s(fun(X673,X675),X678))),s(X673,X679)))) )),
  inference(superposition,[],[f1197,f335])).
fof(f47773,plain,(
  ( ! [X629,X631,X625,X627,X628,X630,X624,X626] : (~p(s(bool,happ(s(fun(X626,bool),happ(s(fun(X625,fun(X626,bool)),X627),s(X625,X628))),s(X626,happ(s(fun(X624,X626),X629),s(X624,X630)))))) | s(bool,X631) = s(bool,happ(s(fun(X624,bool),'_dst_x0x0x1_3'(s(fun(X625,fun(X626,bool)),X627),s(X625,X628),s(fun(X624,X626),X629))),s(X624,X630))) | s(bool,'F_0') = s(bool,X631)) )),
  inference(superposition,[],[f1037,f335])).
fof(f48215,plain,(
  ( ! [X588,X584,X586,X589,X585,X587,X583] : (s(bool,'T_0') != s(bool,happ(s(fun(X585,bool),happ(s(fun(X584,fun(X585,bool)),X586),s(X584,X587))),s(X585,happ(s(fun(X583,X585),X588),s(X583,X589))))) | s(bool,'T_0') = s(bool,happ(s(fun(X583,bool),'_dst_x0x0x1_3'(s(fun(X584,fun(X585,bool)),X586),s(X584,X587),s(fun(X583,X585),X588))),s(X583,X589)))) )),
  inference(forward_demodulation,[],[f47768,f270])).
fof(f47768,plain,(
  ( ! [X588,X590,X584,X586,X589,X591,X585,X587,X583] : (s(bool,'const.bool.DATATYPE_1'(s(X590,X591))) != s(bool,happ(s(fun(X585,bool),happ(s(fun(X584,fun(X585,bool)),X586),s(X584,X587))),s(X585,happ(s(fun(X583,X585),X588),s(X583,X589))))) | s(bool,'T_0') = s(bool,happ(s(fun(X583,bool),'_dst_x0x0x1_3'(s(fun(X584,fun(X585,bool)),X586),s(X584,X587),s(fun(X583,X585),X588))),s(X583,X589)))) )),
  inference(superposition,[],[f557,f335])).
fof(f47767,plain,(
  ( ! [X575,X580,X582,X576,X578,X581,X577,X579] : (p(s(bool,happ(s(fun(X577,bool),happ(s(fun(X576,fun(X577,bool)),X578),s(X576,X579))),s(X577,happ(s(fun(X575,X577),X580),s(X575,X581)))))) | s(bool,X582) = s(bool,happ(s(fun(X575,bool),'_dst_x0x0x1_3'(s(fun(X576,fun(X577,bool)),X578),s(X576,X579),s(fun(X575,X577),X580))),s(X575,X581))) | s(bool,'T_0') = s(bool,X582)) )),
  inference(superposition,[],[f425,f335])).
fof(f47766,plain,(
  ( ! [X573,X569,X571,X572,X574,X568,X570] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X570,bool),happ(s(fun(X569,fun(X570,bool)),X571),s(X569,X572))),s(X570,happ(s(fun(X568,X570),X573),s(X568,X574))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X568,bool),'_dst_x0x0x1_3'(s(fun(X569,fun(X570,bool)),X571),s(X569,X572),s(fun(X568,X570),X573))),s(X568,X574)))) )),
  inference(superposition,[],[f398,f335])).
fof(f47765,plain,(
  ( ! [X565,X567,X561,X563,X564,X566,X560,X562] : (~p(s(bool,happ(s(fun(X562,bool),happ(s(fun(X561,fun(X562,bool)),X563),s(X561,X564))),s(X562,happ(s(fun(X560,X562),X565),s(X560,X566)))))) | s(bool,X567) != s(bool,happ(s(fun(X560,bool),'_dst_x0x0x1_3'(s(fun(X561,fun(X562,bool)),X563),s(X561,X564),s(fun(X560,X562),X565))),s(X560,X566))) | s(bool,'T_0') = s(bool,X567)) )),
  inference(superposition,[],[f368,f335])).
fof(f47760,plain,(
  ( ! [X524,X526,X520,X522,X525,X527,X521,X523] : (~p(s(bool,happ(s(fun(X522,bool),happ(s(fun(X521,fun(X522,bool)),X523),s(X521,X524))),s(X522,happ(s(fun(X520,X522),X525),s(X520,X526)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X527))),s(bool,happ(s(fun(X520,bool),'_dst_x0x0x1_3'(s(fun(X521,fun(X522,bool)),X523),s(X521,X524),s(fun(X520,X522),X525))),s(X520,X526))))))) )),
  inference(superposition,[],[f318,f335])).
fof(f47758,plain,(
  ( ! [X509,X511,X505,X507,X508,X510,X504,X506] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X506,bool),happ(s(fun(X505,fun(X506,bool)),X507),s(X505,X508))),s(X506,happ(s(fun(X504,X506),X509),s(X504,X510))))))),s(bool,X511)))) | p(s(bool,happ(s(fun(X504,bool),'_dst_x0x0x1_3'(s(fun(X505,fun(X506,bool)),X507),s(X505,X508),s(fun(X504,X506),X509))),s(X504,X510))))) )),
  inference(superposition,[],[f317,f335])).
fof(f47757,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X503,X497] : (~p(s(bool,happ(s(fun(X498,bool),happ(s(fun(X497,fun(X498,bool)),X499),s(X497,X500))),s(X498,happ(s(fun(X496,X498),X501),s(X496,X502)))))) | p(s(bool,X503)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X496,bool),'_dst_x0x0x1_3'(s(fun(X497,fun(X498,bool)),X499),s(X497,X500),s(fun(X496,X498),X501))),s(X496,X502))))),s(bool,X503))))) )),
  inference(superposition,[],[f316,f335])).
fof(f47756,plain,(
  ( ! [X492,X494,X488,X490,X493,X495,X489,X491] : (~p(s(bool,happ(s(fun(X490,bool),happ(s(fun(X489,fun(X490,bool)),X491),s(X489,X492))),s(X490,happ(s(fun(X488,X490),X493),s(X488,X494)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X495))),s(bool,happ(s(fun(X488,bool),'_dst_x0x0x1_3'(s(fun(X489,fun(X490,bool)),X491),s(X489,X492),s(fun(X488,X490),X493))),s(X488,X494))))))) )),
  inference(superposition,[],[f315,f335])).
fof(f47755,plain,(
  ( ! [X484,X486,X480,X482,X485,X487,X481,X483] : (~p(s(bool,happ(s(fun(X482,bool),happ(s(fun(X481,fun(X482,bool)),X483),s(X481,X484))),s(X482,happ(s(fun(X480,X482),X485),s(X480,X486)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X480,bool),'_dst_x0x0x1_3'(s(fun(X481,fun(X482,bool)),X483),s(X481,X484),s(fun(X480,X482),X485))),s(X480,X486))))),s(bool,X487))))) )),
  inference(superposition,[],[f314,f335])).
fof(f47754,plain,(
  ( ! [X476,X478,X472,X474,X475,X477,X479,X473] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X479))),s(bool,happ(s(fun(X474,bool),happ(s(fun(X473,fun(X474,bool)),X475),s(X473,X476))),s(X474,happ(s(fun(X472,X474),X477),s(X472,X478)))))))) | p(s(bool,X479)) | p(s(bool,happ(s(fun(X472,bool),'_dst_x0x0x1_3'(s(fun(X473,fun(X474,bool)),X475),s(X473,X476),s(fun(X472,X474),X477))),s(X472,X478))))) )),
  inference(superposition,[],[f313,f335])).
fof(f47753,plain,(
  ( ! [X466,X469,X471,X465,X467,X468,X470,X464] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X466,bool),happ(s(fun(X465,fun(X466,bool)),X467),s(X465,X468))),s(X466,happ(s(fun(X464,X466),X469),s(X464,X470))))))),s(bool,X471)))) | p(s(bool,happ(s(fun(X464,bool),'_dst_x0x0x1_3'(s(fun(X465,fun(X466,bool)),X467),s(X465,X468),s(fun(X464,X466),X469))),s(X464,X470)))) | p(s(bool,X471))) )),
  inference(superposition,[],[f313,f335])).
fof(f47752,plain,(
  ( ! [X461,X463,X457,X459,X460,X462,X456,X458] : (~p(s(bool,happ(s(fun(X458,bool),happ(s(fun(X457,fun(X458,bool)),X459),s(X457,X460))),s(X458,happ(s(fun(X456,X458),X461),s(X456,X462)))))) | ~p(s(bool,X463)) | s(bool,X463) = s(bool,happ(s(fun(X456,bool),'_dst_x0x0x1_3'(s(fun(X457,fun(X458,bool)),X459),s(X457,X460),s(fun(X456,X458),X461))),s(X456,X462)))) )),
  inference(superposition,[],[f308,f335])).
fof(f47750,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442] : (p(s(bool,happ(s(fun(X442,bool),happ(s(fun(X441,fun(X442,bool)),X443),s(X441,X444))),s(X442,happ(s(fun(X440,X442),X445),s(X440,X446)))))) | p(s(bool,X447)) | s(bool,X447) = s(bool,happ(s(fun(X440,bool),'_dst_x0x0x1_3'(s(fun(X441,fun(X442,bool)),X443),s(X441,X444),s(fun(X440,X442),X445))),s(X440,X446)))) )),
  inference(superposition,[],[f305,f335])).
fof(f47749,plain,(
  ( ! [X436,X438,X434,X437,X439,X433,X435] : (p(s(bool,happ(s(fun(X435,bool),happ(s(fun(X434,fun(X435,bool)),X436),s(X434,X437))),s(X435,happ(s(fun(X433,X435),X438),s(X433,X439)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X433,bool),'_dst_x0x0x1_3'(s(fun(X434,fun(X435,bool)),X436),s(X434,X437),s(fun(X433,X435),X438))),s(X433,X439)))) )),
  inference(superposition,[],[f250,f335])).
fof(f47748,plain,(
  ( ! [X428,X430,X426,X432,X429,X431,X427] : (s(bool,'F_0') != s(bool,happ(s(fun(X428,bool),happ(s(fun(X427,fun(X428,bool)),X429),s(X427,X430))),s(X428,happ(s(fun(X426,X428),X431),s(X426,X432))))) | ~p(s(bool,happ(s(fun(X426,bool),'_dst_x0x0x1_3'(s(fun(X427,fun(X428,bool)),X429),s(X427,X430),s(fun(X426,X428),X431))),s(X426,X432))))) )),
  inference(superposition,[],[f249,f335])).
fof(f47747,plain,(
  ( ! [X420,X422,X424,X421,X423,X419,X425] : (~p(s(bool,happ(s(fun(X421,bool),happ(s(fun(X420,fun(X421,bool)),X422),s(X420,X423))),s(X421,happ(s(fun(X419,X421),X424),s(X419,X425)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X419,bool),'_dst_x0x0x1_3'(s(fun(X420,fun(X421,bool)),X422),s(X420,X423),s(fun(X419,X421),X424))),s(X419,X425)))) )),
  inference(superposition,[],[f246,f335])).
fof(f47746,plain,(
  ( ! [X412,X414,X416,X418,X413,X415,X417] : (p(s(bool,happ(s(fun(X414,bool),happ(s(fun(X413,fun(X414,bool)),X415),s(X413,X416))),s(X414,happ(s(fun(X412,X414),X417),s(X412,X418)))))) | s(bool,'T_0') != s(bool,happ(s(fun(X412,bool),'_dst_x0x0x1_3'(s(fun(X413,fun(X414,bool)),X415),s(X413,X416),s(fun(X412,X414),X417))),s(X412,X418)))) )),
  inference(superposition,[],[f245,f335])).
fof(f47744,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (~p(s(bool,happ(s(fun(X401,bool),happ(s(fun(X400,fun(X401,bool)),X402),s(X400,X403))),s(X401,happ(s(fun(X399,X401),X404),s(X399,sK6('_dst_x0x0x1_3'(s(fun(X400,fun(X401,bool)),X402),s(X400,X403),s(fun(X399,X401),X404)),X399))))))) | p(s(bool,happ(s(fun(fun(X399,bool),bool),'!_1'),s(fun(X399,bool),'_dst_x0x0x1_3'(s(fun(X400,fun(X401,bool)),X402),s(X400,X403),s(fun(X399,X401),X404))))))) )),
  inference(superposition,[],[f310,f335])).
fof(f47743,plain,(
  ( ! [X397,X393,X395,X396,X398,X392,X394] : (~p(s(bool,happ(s(fun(X394,bool),happ(s(fun(X393,fun(X394,bool)),X395),s(X393,X396))),s(X394,happ(s(fun(X392,X394),X397),s(X392,X398)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X392,bool),'_dst_x0x0x1_3'(s(fun(X393,fun(X394,bool)),X395),s(X393,X396),s(fun(X392,X394),X397))))))) )),
  inference(superposition,[],[f2633,f335])).
fof(f47742,plain,(
  ( ! [X389,X391,X385,X387,X388,X390,X386] : (~p(s(bool,happ(s(fun(X387,bool),happ(s(fun(X386,fun(X387,bool)),X388),s(X386,X389))),s(X387,happ(s(fun(X385,X387),X390),s(X385,X391)))))) | p(s(bool,happ(s(fun(fun(X385,bool),bool),'?_1'),s(fun(X385,bool),'_dst_x0x0x1_3'(s(fun(X386,fun(X387,bool)),X388),s(X386,X389),s(fun(X385,X387),X390))))))) )),
  inference(superposition,[],[f312,f335])).
fof(f47730,plain,(
  ( ! [X269,X271,X267,X273,X275,X268,X270,X272,X274] : (p(s(bool,happ(s(fun(X267,bool),happ(s(fun(X267,fun(X267,bool)),'=_0'),s(X267,X275))),s(X267,happ(s(fun(X270,X267),happ(s(fun(X269,fun(X270,X267)),X271),s(X269,X272))),s(X270,happ(s(fun(X268,X270),X273),s(X268,X274)))))))) | s(X267,X275) != s(X267,happ(s(fun(X268,X267),'_dst_x0x0x1_3'(s(fun(X269,fun(X270,X267)),X271),s(X269,X272),s(fun(X268,X270),X273))),s(X268,X274)))) )),
  inference(superposition,[],[f331,f335])).
fof(f47729,plain,(
  ( ! [X261,X263,X259,X265,X260,X262,X258,X264,X266] : (p(s(bool,happ(s(fun(X258,bool),happ(s(fun(X258,fun(X258,bool)),'=_0'),s(X258,happ(s(fun(X261,X258),happ(s(fun(X260,fun(X261,X258)),X262),s(X260,X263))),s(X261,happ(s(fun(X259,X261),X264),s(X259,X265))))))),s(X258,X266)))) | s(X258,X266) != s(X258,happ(s(fun(X259,X258),'_dst_x0x0x1_3'(s(fun(X260,fun(X261,X258)),X262),s(X260,X263),s(fun(X259,X261),X264))),s(X259,X265)))) )),
  inference(superposition,[],[f331,f335])).
fof(f47728,plain,(
  ( ! [X255,X253,X257,X249,X251,X254,X252,X250,X256] : (~p(s(bool,happ(s(fun(X249,bool),happ(s(fun(X249,fun(X249,bool)),'=_0'),s(X249,X257))),s(X249,happ(s(fun(X252,X249),happ(s(fun(X251,fun(X252,X249)),X253),s(X251,X254))),s(X252,happ(s(fun(X250,X252),X255),s(X250,X256)))))))) | s(X249,X257) = s(X249,happ(s(fun(X250,X249),'_dst_x0x0x1_3'(s(fun(X251,fun(X252,X249)),X253),s(X251,X254),s(fun(X250,X252),X255))),s(X250,X256)))) )),
  inference(superposition,[],[f330,f335])).
fof(f47727,plain,(
  ( ! [X243,X241,X246,X244,X242,X240,X248,X247,X245] : (~p(s(bool,happ(s(fun(X240,bool),happ(s(fun(X240,fun(X240,bool)),'=_0'),s(X240,happ(s(fun(X243,X240),happ(s(fun(X242,fun(X243,X240)),X244),s(X242,X245))),s(X243,happ(s(fun(X241,X243),X246),s(X241,X247))))))),s(X240,X248)))) | s(X240,X248) = s(X240,happ(s(fun(X241,X240),'_dst_x0x0x1_3'(s(fun(X242,fun(X243,X240)),X244),s(X242,X245),s(fun(X241,X243),X246))),s(X241,X247)))) )),
  inference(superposition,[],[f330,f335])).
fof(f47706,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(X8,happ(s(fun(X1,X8),'_dst_x0x1_2'(s(fun(X0,X8),X9),s(fun(X1,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X0)),X4),s(X2,X5),s(fun(X1,X3),X6))))),s(X1,X7))) = s(X8,happ(s(fun(X0,X8),X9),s(X0,happ(s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7)))))))) )),
  inference(superposition,[],[f333,f335])).
fof(f47705,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s('type.ind_type.recspace'(X202),'const.ind_type.CONSTR_3'(s('type.num.num',X203),s(X202,X204),s(fun('type.num.num','type.ind_type.recspace'(X202)),happ(s(fun(X205,fun('type.num.num','type.ind_type.recspace'(X202))),X206),s(X205,X207))))) = s('type.ind_type.recspace'(X202),happ(s(fun(X205,'type.ind_type.recspace'(X202)),'_dst_x0x0x1_3'(s(fun(X202,fun(fun('type.num.num','type.ind_type.recspace'(X202)),'type.ind_type.recspace'(X202))),'const.ind_type.CONSTR_1'(s('type.num.num',X203))),s(X202,X204),s(fun(X205,fun('type.num.num','type.ind_type.recspace'(X202))),X206))),s(X205,X207)))) )),
  inference(superposition,[],[f335,f299])).
fof(f47682,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(X24,'const.ind_type.FCONS_3'(s(X24,X26),s(fun('type.num.num',X24),X25),s('type.num.num',happ(s(fun(X27,'type.num.num'),X28),s(X27,X29))))) = s(X24,happ(s(fun(X27,X24),'_dst_x0x0x1_3'(s(fun(X24,fun('type.num.num',X24)),'_dst_x1x0_2'(s(fun(X24,fun(fun('type.num.num',X24),fun('type.num.num',X24))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X24),X25))),s(X24,X26),s(fun(X27,'type.num.num'),X28))),s(X27,X29)))) )),
  inference(superposition,[],[f335,f347])).
fof(f48203,plain,(
  ( ! [X191,X189,X192,X190,X193] : (p(s(bool,happ(s(fun(X191,bool),'_dst_x0x0x1_3'(s(fun(X189,fun(X189,bool)),'=_0'),s(X189,X190),s(fun(X191,X189),X192))),s(X191,X193)))) | s(X189,X190) != s(X189,happ(s(fun(X191,X189),X192),s(X191,X193)))) )),
  inference(backward_demodulation,[],[f47681,f35562])).
fof(f48202,plain,(
  ( ! [X198,X196,X194,X197,X195] : (~p(s(bool,happ(s(fun(X196,bool),'_dst_x0x0x1_3'(s(fun(X194,fun(X194,bool)),'=_0'),s(X194,X195),s(fun(X196,X194),X197))),s(X196,X198)))) | s(X194,X195) = s(X194,happ(s(fun(X196,X194),X197),s(X196,X198)))) )),
  inference(backward_demodulation,[],[f47681,f35563])).
fof(f47681,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(X16,happ(s(fun(X21,X16),'_dst_x0x0x1_3'(s(fun(X18,fun(X17,X16)),X19),s(X18,X20),s(fun(X21,X17),X22))),s(X21,X23))) = s(X16,happ(s(fun(X21,X16),'_dst_x0x1_2'(s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,X20))),s(fun(X21,X17),X22))),s(X21,X23)))) )),
  inference(superposition,[],[f335,f333])).
fof(f47680,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(X8,happ(s(fun(X13,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X9,X8)),X11),s(X10,X12),s(fun(X13,X9),X14))),s(X13,X15))) = s(X8,happ(s(fun(X10,X8),'_dst_x1x0_2'(s(fun(X10,fun(X9,X8)),X11),s(X9,happ(s(fun(X13,X9),X14),s(X13,X15))))),s(X10,X12)))) )),
  inference(superposition,[],[f335,f334])).
fof(f47679,plain,(
  ( ! [X383,X389,X385,X387,X382,X388,X384,X386] : (s(X386,happ(s(fun('type.ind_type.recspace'(X382),X386),happ(s(fun(X387,fun('type.ind_type.recspace'(X382),X386)),X388),s(X387,X389))),s('type.ind_type.recspace'(X382),'const.ind_type.CONSTR_3'(s('type.num.num',X383),s(X382,X384),s(fun('type.num.num','type.ind_type.recspace'(X382)),X385))))) = s(X386,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X382)),X386),'_dst_x0x0x1_3'(s(fun(X387,fun('type.ind_type.recspace'(X382),X386)),X388),s(X387,X389),s(fun(fun('type.num.num','type.ind_type.recspace'(X382)),'type.ind_type.recspace'(X382)),happ(s(fun(X382,fun(fun('type.num.num','type.ind_type.recspace'(X382)),'type.ind_type.recspace'(X382))),'const.ind_type.CONSTR_1'(s('type.num.num',X383))),s(X382,X384))))),s(fun('type.num.num','type.ind_type.recspace'(X382)),X385)))) )),
  inference(superposition,[],[f335,f299])).
fof(f47678,plain,(
  ( ! [X377,X379,X380,X376,X378,X381] : (s(X378,happ(s(fun('type.stackSem.result'(X376),X378),happ(s(fun(X379,fun('type.stackSem.result'(X376),X378)),X380),s(X379,X381))),s('type.stackSem.result'(X376),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X376),X377))))) = s(X378,happ(s(fun('type.wordSem.word_loc'(X376),X378),'_dst_x0x0x1_3'(s(fun(X379,fun('type.stackSem.result'(X376),X378)),X380),s(X379,X381),s(fun('type.wordSem.word_loc'(X376),'type.stackSem.result'(X376)),'const.stackSem.Result_0'))),s('type.wordSem.word_loc'(X376),X377)))) )),
  inference(superposition,[],[f335,f276])).
fof(f47677,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s(X372,happ(s(fun('type.stackSem.result'(X370),X372),happ(s(fun(X373,fun('type.stackSem.result'(X370),X372)),X374),s(X373,X375))),s('type.stackSem.result'(X370),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X370),X371))))) = s(X372,happ(s(fun('type.wordSem.word_loc'(X370),X372),'_dst_x0x0x1_3'(s(fun(X373,fun('type.stackSem.result'(X370),X372)),X374),s(X373,X375),s(fun('type.wordSem.word_loc'(X370),'type.stackSem.result'(X370)),'const.stackSem.Exception_0'))),s('type.wordSem.word_loc'(X370),X371)))) )),
  inference(superposition,[],[f335,f275])).
fof(f47676,plain,(
  ( ! [X364,X366,X368,X365,X367,X369] : (s(X366,happ(s(fun('type.stackSem.result'(X364),X366),happ(s(fun(X367,fun('type.stackSem.result'(X364),X366)),X368),s(X367,X369))),s('type.stackSem.result'(X364),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X364),X365))))) = s(X366,happ(s(fun('type.wordSem.word_loc'(X364),X366),'_dst_x0x0x1_3'(s(fun(X367,fun('type.stackSem.result'(X364),X366)),X368),s(X367,X369),s(fun('type.wordSem.word_loc'(X364),'type.stackSem.result'(X364)),'const.stackSem.Halt_0'))),s('type.wordSem.word_loc'(X364),X365)))) )),
  inference(superposition,[],[f335,f274])).
fof(f47675,plain,(
  ( ! [X356,X358,X360,X362,X357,X359,X355,X361,X363] : (s(X360,happ(s(fun(X357,X360),'_dst_x0x0x1_3'(s(fun(X361,fun(fun(fun(X355,X356),X356),X360)),X362),s(X361,X363),s(fun(X357,fun(fun(X355,X356),X356)),'_dstsel_1_x10_1'(s(fun(X357,X355),X358))))),s(X357,X359))) = s(X360,happ(s(fun(fun(fun(X355,X356),X356),X360),happ(s(fun(X361,fun(fun(fun(X355,X356),X356),X360)),X362),s(X361,X363))),s(fun(fun(X355,X356),X356),'_dstsel_0_x0_1'(s(X355,happ(s(fun(X357,X355),X358),s(X357,X359)))))))) )),
  inference(superposition,[],[f335,f332])).
fof(f47664,plain,(
  ( ! [X271,X277,X273,X275,X276,X278,X272,X274] : (s(X275,happ(s(fun(bool,X275),happ(s(fun(X276,fun(bool,X275)),X277),s(X276,X278))),s(bool,X274))) = s(X275,happ(s(fun(X271,X275),'_dst_x0x0x1_3'(s(fun(X276,fun(bool,X275)),X277),s(X276,X278),s(fun(X271,bool),X272))),s(X271,X273))) | s(bool,'F_0') = s(bool,X274) | s(bool,'F_0') = s(bool,happ(s(fun(X271,bool),X272),s(X271,X273)))) )),
  inference(superposition,[],[f335,f1108])).
fof(f47662,plain,(
  ( ! [X261,X255,X257,X259,X260,X262,X256,X258] : (s(X258,happ(s(fun(bool,X258),happ(s(fun(X259,fun(bool,X258)),X260),s(X259,X261))),s(bool,'F_0'))) = s(X258,happ(s(fun(X255,X258),'_dst_x0x0x1_3'(s(fun(X259,fun(bool,X258)),X260),s(X259,X261),s(fun(X255,bool),X256))),s(X255,X257))) | s(bool,X262) = s(bool,happ(s(fun(X255,bool),X256),s(X255,X257))) | s(bool,'F_0') = s(bool,X262)) )),
  inference(superposition,[],[f335,f1108])).
fof(f48186,plain,(
  ( ! [X253,X251,X246,X254,X252,X248,X247] : (s(X251,happ(s(fun(bool,X251),happ(s(fun(X252,fun(bool,X251)),X253),s(X252,X254))),s(bool,'T_0'))) = s(X251,happ(s(fun(X246,X251),'_dst_x0x0x1_3'(s(fun(X252,fun(bool,X251)),X253),s(X252,X254),s(fun(X246,bool),X247))),s(X246,X248))) | s(bool,'F_0') = s(bool,happ(s(fun(X246,bool),X247),s(X246,X248)))) )),
  inference(forward_demodulation,[],[f47661,f270])).
fof(f47661,plain,(
  ( ! [X253,X251,X249,X246,X254,X252,X250,X248,X247] : (s(X251,happ(s(fun(bool,X251),happ(s(fun(X252,fun(bool,X251)),X253),s(X252,X254))),s(bool,'const.bool.DATATYPE_1'(s(X249,X250))))) = s(X251,happ(s(fun(X246,X251),'_dst_x0x0x1_3'(s(fun(X252,fun(bool,X251)),X253),s(X252,X254),s(fun(X246,bool),X247))),s(X246,X248))) | s(bool,'F_0') = s(bool,happ(s(fun(X246,bool),X247),s(X246,X248)))) )),
  inference(superposition,[],[f335,f1071])).
fof(f47660,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (s(X241,happ(s(fun(bool,X241),happ(s(fun(X242,fun(bool,X241)),X243),s(X242,X244))),s(bool,'T_0'))) = s(X241,happ(s(fun(X238,X241),'_dst_x0x0x1_3'(s(fun(X242,fun(bool,X241)),X243),s(X242,X244),s(fun(X238,bool),X239))),s(X238,X240))) | s(bool,X245) = s(bool,'const.bool.DATATYPE_1'(s(bool,X245))) | s(bool,X245) = s(bool,happ(s(fun(X238,bool),X239),s(X238,X240)))) )),
  inference(superposition,[],[f335,f742])).
fof(f47655,plain,(
  ( ! [X198,X204,X202,X200,X199,X205,X203,X201] : (s(X202,happ(s(fun(bool,X202),happ(s(fun(X203,fun(bool,X202)),X204),s(X203,X205))),s(bool,X201))) = s(X202,happ(s(fun(X198,X202),'_dst_x0x0x1_3'(s(fun(X203,fun(bool,X202)),X204),s(X203,X205),s(fun(X198,bool),X199))),s(X198,X200))) | s(bool,'T_0') = s(bool,X201) | s(bool,'T_0') = s(bool,happ(s(fun(X198,bool),X199),s(X198,X200)))) )),
  inference(superposition,[],[f335,f365])).
fof(f47654,plain,(
  ( ! [X191,X196,X194,X192,X190,X197,X195,X193] : (s(X193,happ(s(fun(bool,X193),happ(s(fun(X194,fun(bool,X193)),X195),s(X194,X196))),s(bool,'T_0'))) = s(X193,happ(s(fun(X190,X193),'_dst_x0x0x1_3'(s(fun(X194,fun(bool,X193)),X195),s(X194,X196),s(fun(X190,bool),X191))),s(X190,X192))) | s(bool,X197) = s(bool,happ(s(fun(X190,bool),X191),s(X190,X192))) | s(bool,'T_0') = s(bool,X197)) )),
  inference(superposition,[],[f335,f365])).
fof(f47653,plain,(
  ( ! [X189,X187,X185,X188,X186,X184,X183] : (s(X186,happ(s(fun(bool,X186),happ(s(fun(X187,fun(bool,X186)),X188),s(X187,X189))),s(bool,'F_0'))) = s(X186,happ(s(fun(X183,X186),'_dst_x0x0x1_3'(s(fun(X187,fun(bool,X186)),X188),s(X187,X189),s(fun(X183,bool),X184))),s(X183,X185))) | s(bool,'T_0') = s(bool,happ(s(fun(X183,bool),X184),s(X183,X185)))) )),
  inference(superposition,[],[f335,f242])).
fof(f47652,plain,(
  ( ! [X177,X182,X180,X178,X181,X179] : (s(X179,happ(s(fun(bool,X179),happ(s(fun(X180,fun(bool,X179)),X181),s(X180,X182))),s(bool,'T_0'))) = s(X179,happ(s(fun(X177,X179),'_dst_x0x0x1_3'(s(fun(X180,fun(bool,X179)),X181),s(X180,X182),s(fun(X177,bool),sK7('!_1',fun(X177,bool))))),s(X177,X178)))) )),
  inference(superposition,[],[f335,f33563])).
fof(f47650,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(X168,happ(s(fun(bool,X168),happ(s(fun(X169,fun(bool,X168)),X170),s(X169,X171))),s(bool,'T_0'))) = s(X168,happ(s(fun(bool,X168),'_dst_x0x0x1_3'(s(fun(X169,fun(bool,X168)),X170),s(X169,X171),s(fun(bool,bool),'_i_0_0'))),s(bool,X167))) | s(bool,'F_0') = s(bool,X167)) )),
  inference(superposition,[],[f335,f398])).
fof(f47644,plain,(
  ( ! [X144,X142,X140,X143,X141] : (s(X141,happ(s(fun(bool,X141),happ(s(fun(X142,fun(bool,X141)),X143),s(X142,X144))),s(bool,'T_0'))) = s(X141,happ(s(fun(fun(X140,bool),X141),'_dst_x0x0x1_3'(s(fun(X142,fun(bool,X141)),X143),s(X142,X144),s(fun(fun(X140,bool),bool),'!_1'))),s(fun(X140,bool),sK7('!_1',fun(X140,bool)))))) )),
  inference(superposition,[],[f335,f33016])).
fof(f47643,plain,(
  ( ! [X138,X136,X135,X139,X137] : (s(X136,happ(s(fun(bool,X136),happ(s(fun(X137,fun(bool,X136)),X138),s(X137,X139))),s(bool,'T_0'))) = s(X136,happ(s(fun(fun(X135,bool),X136),'_dst_x0x0x1_3'(s(fun(X137,fun(bool,X136)),X138),s(X137,X139),s(fun(fun(X135,bool),bool),'?_1'))),s(fun(X135,bool),sK7('!_1',fun(X135,bool)))))) )),
  inference(superposition,[],[f335,f34447])).
fof(f47642,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(X131,happ(s(fun(bool,X131),happ(s(fun(X132,fun(bool,X131)),X133),s(X132,X134))),s(bool,'T_0'))) = s(X131,happ(s(fun(fun(X130,bool),X131),'_dst_x0x0x1_3'(s(fun(X132,fun(bool,X131)),X133),s(X132,X134),s(fun(fun(X130,bool),bool),'?_1'))),s(fun(X130,bool),sK7('?_1',fun(X130,bool)))))) )),
  inference(superposition,[],[f335,f22155])).
fof(f47641,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(X112,happ(s(fun(bool,X112),happ(s(fun(X113,fun(bool,X112)),X114),s(X113,X115))),s(bool,'T_0'))) = s(X112,happ(s(fun(fun(X111,bool),X112),'_dst_x0x0x1_3'(s(fun(X113,fun(bool,X112)),X114),s(X113,X115),s(fun(fun(X111,bool),bool),'!_1'))),s(fun(X111,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f335,f32095])).
fof(f47640,plain,(
  ( ! [X109,X107,X110,X108,X106] : (s(X107,happ(s(fun(bool,X107),happ(s(fun(X108,fun(bool,X107)),X109),s(X108,X110))),s(bool,'T_0'))) = s(X107,happ(s(fun(fun(X106,bool),X107),'_dst_x0x0x1_3'(s(fun(X108,fun(bool,X107)),X109),s(X108,X110),s(fun(fun(X106,bool),bool),'?_1'))),s(fun(X106,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f335,f21706])).
fof(f47636,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s(X90,happ(s(fun(X86,X90),happ(s(fun(X91,fun(X86,X90)),X92),s(X91,X93))),s(X86,'const.ind_type.FCONS_3'(s(X86,X88),s(fun('type.num.num',X86),X87),s('type.num.num',X89))))) = s(X90,happ(s(fun('type.num.num',X90),'_dst_x0x0x1_3'(s(fun(X91,fun(X86,X90)),X92),s(X91,X93),s(fun('type.num.num',X86),happ(s(fun(X86,fun('type.num.num',X86)),'_dst_x1x0_2'(s(fun(X86,fun(fun('type.num.num',X86),fun('type.num.num',X86))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X86),X87))),s(X86,X88))))),s('type.num.num',X89)))) )),
  inference(superposition,[],[f335,f347])).
fof(f47635,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X84,X82] : (s(X82,happ(s(fun(X78,X82),happ(s(fun(X83,fun(X78,X82)),X84),s(X83,X85))),s(X78,happ(s(fun(X79,X78),X81),s(X79,X80))))) = s(X82,happ(s(fun(fun(X79,X78),X82),'_dst_x0x0x1_3'(s(fun(X83,fun(X78,X82)),X84),s(X83,X85),s(fun(fun(X79,X78),X78),'_dstsel_0_x0_1'(s(X79,X80))))),s(fun(X79,X78),X81)))) )),
  inference(superposition,[],[f335,f321])).
fof(f47634,plain,(
  ( ! [X70,X68,X66,X76,X74,X72,X71,X69,X67,X77,X75,X73] : (s(X74,happ(s(fun(X67,X74),'_dst_x0x0x1_3'(s(fun(X75,fun(X66,X74)),X76),s(X75,X77),s(fun(X67,X66),'_dst_x0x0x1_3'(s(fun(X68,fun(X69,X66)),X70),s(X68,X71),s(fun(X67,X69),X72))))),s(X67,X73))) = s(X74,happ(s(fun(X66,X74),happ(s(fun(X75,fun(X66,X74)),X76),s(X75,X77))),s(X66,happ(s(fun(X69,X66),happ(s(fun(X68,fun(X69,X66)),X70),s(X68,X71))),s(X69,happ(s(fun(X67,X69),X72),s(X67,X73)))))))) )),
  inference(superposition,[],[f335,f335])).
fof(f47633,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X56,X65,X63] : (s(X62,happ(s(fun(X57,X62),'_dst_x0x0x1_3'(s(fun(X63,fun(X56,X62)),X64),s(X63,X65),s(fun(X57,X56),'_dst_x1x0_2'(s(fun(X57,fun(X58,X56)),X59),s(X58,X60))))),s(X57,X61))) = s(X62,happ(s(fun(X56,X62),happ(s(fun(X63,fun(X56,X62)),X64),s(X63,X65))),s(X56,happ(s(fun(X58,X56),happ(s(fun(X57,fun(X58,X56)),X59),s(X57,X61))),s(X58,X60)))))) )),
  inference(superposition,[],[f335,f334])).
fof(f47632,plain,(
  ( ! [X54,X52,X50,X48,X55,X53,X51,X49] : (s(X52,happ(s(fun(X48,X52),happ(s(fun(X53,fun(X48,X52)),X54),s(X53,X55))),s(X48,X50))) = s(X52,happ(s(fun(X49,X52),'_dst_x0x0x1_3'(s(fun(X53,fun(X48,X52)),X54),s(X53,X55),s(fun(X49,X48),'_dst_x0_1'(s(X48,X50))))),s(X49,X51)))) )),
  inference(superposition,[],[f335,f320])).
fof(f47631,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(X44,happ(s(fun(X36,X44),happ(s(fun(X45,fun(X36,X44)),X46),s(X45,X47))),s(X36,happ(s(fun(X41,X36),'_dst_x0x0x1_3'(s(fun(X38,fun(X37,X36)),X39),s(X38,X40),s(fun(X41,X37),X42))),s(X41,X43))))) = s(X44,happ(s(fun(X37,X44),'_dst_x0x0x1_3'(s(fun(X45,fun(X36,X44)),X46),s(X45,X47),s(fun(X37,X36),happ(s(fun(X38,fun(X37,X36)),X39),s(X38,X40))))),s(X37,happ(s(fun(X41,X37),X42),s(X41,X43)))))) )),
  inference(superposition,[],[f335,f335])).
fof(f47630,plain,(
  ( ! [X30,X28,X26,X35,X33,X31,X29,X27,X34,X32] : (s(X32,happ(s(fun(X27,X32),'_dst_x0x0x1_3'(s(fun(X33,fun(X26,X32)),X34),s(X33,X35),s(fun(X27,X26),happ(s(fun(X28,fun(X27,X26)),X29),s(X28,X30))))),s(X27,X31))) = s(X32,happ(s(fun(X26,X32),happ(s(fun(X33,fun(X26,X32)),X34),s(X33,X35))),s(X26,happ(s(fun(X28,X26),'_dst_x1x0_2'(s(fun(X28,fun(X27,X26)),X29),s(X27,X31))),s(X28,X30)))))) )),
  inference(superposition,[],[f335,f334])).
fof(f47629,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (s(X22,happ(s(fun(X17,X22),'_dst_x0x0x1_3'(s(fun(X23,fun(X16,X22)),X24),s(X23,X25),s(fun(X17,X16),'_dst_x0x1_2'(s(fun(X18,X16),X19),s(fun(X17,X18),X20))))),s(X17,X21))) = s(X22,happ(s(fun(X16,X22),happ(s(fun(X23,fun(X16,X22)),X24),s(X23,X25))),s(X16,happ(s(fun(X18,X16),X19),s(X18,happ(s(fun(X17,X18),X20),s(X17,X21)))))))) )),
  inference(superposition,[],[f335,f333])).
fof(f47628,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(X12,happ(s(fun(X7,X12),'_dst_x0x0x1_3'(s(fun(X13,fun(X6,X12)),X14),s(X13,X15),s(fun(X7,X6),X8))),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))) = s(X12,happ(s(fun(X6,X12),happ(s(fun(X13,fun(X6,X12)),X14),s(X13,X15))),s(X6,happ(s(fun(X9,X6),'_dst_x0x1_2'(s(fun(X7,X6),X8),s(fun(X9,X7),X10))),s(X9,X11)))))) )),
  inference(superposition,[],[f335,f333])).
fof(f47627,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X2,happ(s(fun(X0,X2),happ(s(fun(X3,fun(X0,X2)),X4),s(X3,X5))),s(X0,X1))) = s(X2,happ(s(fun(X0,X2),'_dst_x0x0x1_3'(s(fun(X3,fun(X0,X2)),X4),s(X3,X5),s(fun(X0,X0),'_i_0_0'))),s(X0,X1)))) )),
  inference(superposition,[],[f335,f271])).
fof(f47493,plain,(
  ( ! [X94,X101,X99,X97,X95,X100,X98,X96] : (s(X95,happ(s(fun(X94,X95),'const.ind_type.FCONS_3'(s(fun(X94,X95),X97),s(fun('type.num.num',fun(X94,X95)),X96),s('type.num.num',X98))),s(X94,happ(s(fun(X99,X94),X100),s(X99,X101))))) = s(X95,happ(s(fun(X99,X95),'_dst_x0x0x1_3'(s(fun('type.num.num',fun(X94,X95)),happ(s(fun(fun(X94,X95),fun('type.num.num',fun(X94,X95))),'_dst_x1x0_2'(s(fun(fun(X94,X95),fun(fun('type.num.num',fun(X94,X95)),fun('type.num.num',fun(X94,X95)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X94,X95)),X96))),s(fun(X94,X95),X97))),s('type.num.num',X98),s(fun(X99,X94),X100))),s(X99,X101)))) )),
  inference(superposition,[],[f335,f347])).
fof(f47492,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s(X87,happ(s(fun(X86,X87),happ(s(fun(X88,fun(X86,X87)),X90),s(X88,X89))),s(X86,happ(s(fun(X91,X86),X92),s(X91,X93))))) = s(X87,happ(s(fun(X91,X87),'_dst_x0x0x1_3'(s(fun(fun(X88,fun(X86,X87)),fun(X86,X87)),'_dstsel_0_x0_1'(s(X88,X89))),s(fun(X88,fun(X86,X87)),X90),s(fun(X91,X86),X92))),s(X91,X93)))) )),
  inference(superposition,[],[f335,f321])).
fof(f47491,plain,(
  ( ! [X80,X78,X76,X74,X85,X83,X81,X79,X77,X75,X84,X82] : (s(X75,happ(s(fun(X83,X75),'_dst_x0x0x1_3'(s(fun(X76,fun(X74,X75)),'_dst_x0x0x1_3'(s(fun(X77,fun(X78,fun(X74,X75))),X79),s(X77,X80),s(fun(X76,X78),X81))),s(X76,X82),s(fun(X83,X74),X84))),s(X83,X85))) = s(X75,happ(s(fun(X74,X75),happ(s(fun(X78,fun(X74,X75)),happ(s(fun(X77,fun(X78,fun(X74,X75))),X79),s(X77,X80))),s(X78,happ(s(fun(X76,X78),X81),s(X76,X82))))),s(X74,happ(s(fun(X83,X74),X84),s(X83,X85)))))) )),
  inference(superposition,[],[f335,f335])).
fof(f47490,plain,(
  ( ! [X70,X68,X66,X64,X72,X71,X69,X67,X65,X73] : (s(X65,happ(s(fun(X71,X65),'_dst_x0x0x1_3'(s(fun(X66,fun(X64,X65)),'_dst_x1x0_2'(s(fun(X66,fun(X67,fun(X64,X65))),X68),s(X67,X69))),s(X66,X70),s(fun(X71,X64),X72))),s(X71,X73))) = s(X65,happ(s(fun(X64,X65),happ(s(fun(X67,fun(X64,X65)),happ(s(fun(X66,fun(X67,fun(X64,X65))),X68),s(X66,X70))),s(X67,X69))),s(X64,happ(s(fun(X71,X64),X72),s(X71,X73)))))) )),
  inference(superposition,[],[f335,f334])).
fof(f47489,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X63] : (s(X57,happ(s(fun(X56,X57),X59),s(X56,happ(s(fun(X61,X56),X62),s(X61,X63))))) = s(X57,happ(s(fun(X61,X57),'_dst_x0x0x1_3'(s(fun(X58,fun(X56,X57)),'_dst_x0_1'(s(fun(X56,X57),X59))),s(X58,X60),s(fun(X61,X56),X62))),s(X61,X63)))) )),
  inference(superposition,[],[f335,f320])).
fof(f47488,plain,(
  ( ! [X47,X45,X54,X52,X50,X48,X46,X44,X55,X53,X51,X49] : (s(X45,happ(s(fun(X44,X45),happ(s(fun(X50,fun(X44,X45)),'_dst_x0x0x1_3'(s(fun(X47,fun(X46,fun(X44,X45))),X48),s(X47,X49),s(fun(X50,X46),X51))),s(X50,X52))),s(X44,happ(s(fun(X53,X44),X54),s(X53,X55))))) = s(X45,happ(s(fun(X53,X45),'_dst_x0x0x1_3'(s(fun(X46,fun(X44,X45)),happ(s(fun(X47,fun(X46,fun(X44,X45))),X48),s(X47,X49))),s(X46,happ(s(fun(X50,X46),X51),s(X50,X52))),s(fun(X53,X44),X54))),s(X53,X55)))) )),
  inference(superposition,[],[f335,f335])).
fof(f47487,plain,(
  ( ! [X39,X37,X35,X43,X41,X38,X36,X34,X42,X40] : (s(X35,happ(s(fun(X41,X35),'_dst_x0x0x1_3'(s(fun(X36,fun(X34,X35)),happ(s(fun(X37,fun(X36,fun(X34,X35))),X38),s(X37,X39))),s(X36,X40),s(fun(X41,X34),X42))),s(X41,X43))) = s(X35,happ(s(fun(X34,X35),happ(s(fun(X37,fun(X34,X35)),'_dst_x1x0_2'(s(fun(X37,fun(X36,fun(X34,X35))),X38),s(X36,X40))),s(X37,X39))),s(X34,happ(s(fun(X41,X34),X42),s(X41,X43)))))) )),
  inference(superposition,[],[f335,f334])).
fof(f47486,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (s(X25,happ(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(X24,happ(s(fun(X31,X24),X32),s(X31,X33))))) = s(X25,happ(s(fun(X31,X25),'_dst_x0x0x1_3'(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30),s(fun(X31,X24),X32))),s(X31,X33)))) )),
  inference(superposition,[],[f335,f333])).
fof(f47485,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,happ(s(fun(X21,X15),'_dst_x0x0x1_3'(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))),s(fun(X21,X14),X22))),s(X21,X23))) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(X14,happ(s(fun(X21,X14),X22),s(X21,X23)))))) )),
  inference(superposition,[],[f335,f333])).
fof(f47484,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(X9,happ(s(fun(X8,X9),X10),s(X8,happ(s(fun(X11,X8),X12),s(X11,X13))))) = s(X9,happ(s(fun(X11,X9),'_dst_x0x0x1_3'(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10),s(fun(X11,X8),X12))),s(X11,X13)))) )),
  inference(superposition,[],[f335,f271])).
fof(f47483,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun(X5,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(X2,X4),s(fun(X5,fun(X0,X1)),X6))),s(X5,X7))) = s(X1,happ(s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))),s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),X6),s(X5,X7)))))) )),
  inference(superposition,[],[f335,f332])).
fof(f47339,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106,X113] : (s(bool,X113) = s(bool,happ(s(fun(X108,bool),happ(s(fun(X107,fun(X108,bool)),X109),s(X107,X110))),s(X108,happ(s(fun(X106,X108),X111),s(X106,X112))))) | s(bool,'F_0') = s(bool,X113) | s(bool,'F_0') = s(bool,happ(s(fun(X106,bool),'_dst_x0x0x1_3'(s(fun(X107,fun(X108,bool)),X109),s(X107,X110),s(fun(X106,X108),X111))),s(X106,X112)))) )),
  inference(superposition,[],[f335,f1108])).
fof(f47337,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s(bool,'F_0') = s(bool,happ(s(fun(X92,bool),happ(s(fun(X91,fun(X92,bool)),X93),s(X91,X94))),s(X92,happ(s(fun(X90,X92),X95),s(X90,X96))))) | s(bool,X97) = s(bool,happ(s(fun(X90,bool),'_dst_x0x0x1_3'(s(fun(X91,fun(X92,bool)),X93),s(X91,X94),s(fun(X90,X92),X95))),s(X90,X96))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(superposition,[],[f335,f1108])).
fof(f48117,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (s(bool,'T_0') = s(bool,happ(s(fun(X83,bool),happ(s(fun(X82,fun(X83,bool)),X84),s(X82,X85))),s(X83,happ(s(fun(X81,X83),X86),s(X81,X87))))) | s(bool,'F_0') = s(bool,happ(s(fun(X81,bool),'_dst_x0x0x1_3'(s(fun(X82,fun(X83,bool)),X84),s(X82,X85),s(fun(X81,X83),X86))),s(X81,X87)))) )),
  inference(forward_demodulation,[],[f47336,f270])).
fof(f47336,plain,(
  ( ! [X88,X87,X85,X83,X81,X89,X86,X84,X82] : (s(bool,'const.bool.DATATYPE_1'(s(X88,X89))) = s(bool,happ(s(fun(X83,bool),happ(s(fun(X82,fun(X83,bool)),X84),s(X82,X85))),s(X83,happ(s(fun(X81,X83),X86),s(X81,X87))))) | s(bool,'F_0') = s(bool,happ(s(fun(X81,bool),'_dst_x0x0x1_3'(s(fun(X82,fun(X83,bool)),X84),s(X82,X85),s(fun(X81,X83),X86))),s(X81,X87)))) )),
  inference(superposition,[],[f335,f1071])).
fof(f47335,plain,(
  ( ! [X80,X78,X76,X74,X79,X77,X75,X73] : (s(bool,'T_0') = s(bool,happ(s(fun(X75,bool),happ(s(fun(X74,fun(X75,bool)),X76),s(X74,X77))),s(X75,happ(s(fun(X73,X75),X78),s(X73,X79))))) | s(bool,X80) = s(bool,'const.bool.DATATYPE_1'(s(bool,X80))) | s(bool,X80) = s(bool,happ(s(fun(X73,bool),'_dst_x0x0x1_3'(s(fun(X74,fun(X75,bool)),X76),s(X74,X77),s(fun(X73,X75),X78))),s(X73,X79)))) )),
  inference(superposition,[],[f335,f742])).
fof(f47334,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X65] : (s(bool,X72) = s(bool,happ(s(fun(X67,bool),happ(s(fun(X66,fun(X67,bool)),X68),s(X66,X69))),s(X67,happ(s(fun(X65,X67),X70),s(X65,X71))))) | s(bool,X72) = s(bool,'const.bool.DATATYPE_1'(s(bool,X72))) | s(bool,'T_0') = s(bool,happ(s(fun(X65,bool),'_dst_x0x0x1_3'(s(fun(X66,fun(X67,bool)),X68),s(X66,X69),s(fun(X65,X67),X70))),s(X65,X71)))) )),
  inference(superposition,[],[f335,f742])).
fof(f47330,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s(bool,X40) = s(bool,happ(s(fun(X35,bool),happ(s(fun(X34,fun(X35,bool)),X36),s(X34,X37))),s(X35,happ(s(fun(X33,X35),X38),s(X33,X39))))) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,happ(s(fun(X33,bool),'_dst_x0x0x1_3'(s(fun(X34,fun(X35,bool)),X36),s(X34,X37),s(fun(X33,X35),X38))),s(X33,X39)))) )),
  inference(superposition,[],[f335,f365])).
fof(f47329,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25,X32] : (s(bool,'T_0') = s(bool,happ(s(fun(X27,bool),happ(s(fun(X26,fun(X27,bool)),X28),s(X26,X29))),s(X27,happ(s(fun(X25,X27),X30),s(X25,X31))))) | s(bool,X32) = s(bool,happ(s(fun(X25,bool),'_dst_x0x0x1_3'(s(fun(X26,fun(X27,bool)),X28),s(X26,X29),s(fun(X25,X27),X30))),s(X25,X31))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f335,f365])).
fof(f47328,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),happ(s(fun(X19,fun(X20,bool)),X21),s(X19,X22))),s(X20,happ(s(fun(X18,X20),X23),s(X18,X24))))) | s(bool,'T_0') = s(bool,happ(s(fun(X18,bool),'_dst_x0x0x1_3'(s(fun(X19,fun(X20,bool)),X21),s(X19,X22),s(fun(X18,X20),X23))),s(X18,X24)))) )),
  inference(superposition,[],[f335,f242])).
fof(f47327,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X8,happ(s(fun(X15,X8),'_dst_x0x1_2'(s(fun(X9,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X11,X8)),X12),s(X10,X13),s(fun(X9,X11),X14))),s(fun(X15,X9),X16))),s(X15,X17))) = s(X8,happ(s(fun(X11,X8),happ(s(fun(X10,fun(X11,X8)),X12),s(X10,X13))),s(X11,happ(s(fun(X9,X11),X14),s(X9,happ(s(fun(X15,X9),X16),s(X15,X17)))))))) )),
  inference(superposition,[],[f335,f333])).
fof(f47319,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X0)),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))))),s(X0,happ(s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))))))) )),
  inference(unit_resulting_resolution,[],[f335,f331])).
fof(f47323,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))),s(X1,happ(s(fun(X5,X1),X6),s(X5,X7))))))),s(X0,happ(s(fun(X5,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X1,X0)),X3),s(X2,X4),s(fun(X5,X1),X6))),s(X5,X7))))))) )),
  inference(unit_resulting_resolution,[],[f335,f331])).
fof(f47324,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.wordSem.word_loc'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X3,'type.wordSem.word_loc'(X0)),happ(s(fun(X2,fun(X3,'type.wordSem.word_loc'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7)))))))) )),
  inference(unit_resulting_resolution,[],[f335,f295])).
fof(f47325,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.wordSem.word_loc'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X3,'type.wordSem.word_loc'(X0)),happ(s(fun(X2,fun(X3,'type.wordSem.word_loc'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7)))))))) )),
  inference(unit_resulting_resolution,[],[f335,f293])).
fof(f47326,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.wordSem.word_loc'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X3,'type.wordSem.word_loc'(X0)),happ(s(fun(X2,fun(X3,'type.wordSem.word_loc'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7)))))))) )),
  inference(unit_resulting_resolution,[],[f335,f291])).
fof(f46454,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ind_type.recspace'(X4),'const.ind_type.CONSTR_3'(s('type.num.num',X5),s(X4,X6),s(fun('type.num.num','type.ind_type.recspace'(X4)),X7))) = s('type.ind_type.recspace'(X4),happ(s(fun(X4,'type.ind_type.recspace'(X4)),'_dst_x1x0_2'(s(fun(X4,fun(fun('type.num.num','type.ind_type.recspace'(X4)),'type.ind_type.recspace'(X4))),'const.ind_type.CONSTR_1'(s('type.num.num',X5))),s(fun('type.num.num','type.ind_type.recspace'(X4)),X7))),s(X4,X6)))) )),
  inference(superposition,[],[f299,f334])).
fof(f46503,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x0x1_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f46502,f335])).
fof(f46502,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(X0,X2))))))) )),
  inference(forward_demodulation,[],[f46501,f333])).
fof(f46501,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f46298,f37614])).
fof(f46298,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))))) )),
  inference(unit_resulting_resolution,[],[f299,f331])).
fof(f46500,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(X0,X2))))))) )),
  inference(forward_demodulation,[],[f46499,f333])).
fof(f46499,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f46498,f37614])).
fof(f46498,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))))) )),
  inference(forward_demodulation,[],[f46299,f334])).
fof(f46299,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))))) )),
  inference(unit_resulting_resolution,[],[f299,f331])).
fof(f45645,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X4) | s(bool,X4) = s(bool,'const.bool.DATATYPE_1'(s(bool,X4))) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f44066,f365])).
fof(f45644,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(bool,X1))) | s(bool,X2) = s(bool,'const.bool.DATATYPE_1'(s(bool,X2))) | s(bool,X0) = s(bool,X2)) )),
  inference(superposition,[],[f44066,f742])).
fof(f45512,plain,(
  ( ! [X990,X988,X987,X991,X989,X986] : (s('type.fcp.cart'(bool,X986),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X986),'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X986),X988),s(fun('type.num.num','type.fcp.cart'(bool,X986)),X987),s('type.num.num',X989))) | p(s(bool,sK4(X990,X991,happ(s(fun('type.num.num','type.fcp.cart'(bool,X986)),happ(s(fun('type.fcp.cart'(bool,X986),fun('type.num.num','type.fcp.cart'(bool,X986))),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X986),fun(fun('type.num.num','type.fcp.cart'(bool,X986)),fun('type.num.num','type.fcp.cart'(bool,X986)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.fcp.cart'(bool,X986)),X987))),s('type.fcp.cart'(bool,X986),X988))),s('type.num.num',X989)),X986)))) )),
  inference(superposition,[],[f302,f347])).
fof(f45608,plain,(
  ( ! [X978,X976,X975,X973,X977,X974] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X977,X978,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X973),X975),s(fun('type.num.num','type.fcp.cart'(bool,X973)),X974),s('type.num.num',X976)),X973)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X977,X978,happ(s(fun('type.num.num','type.fcp.cart'(bool,X973)),happ(s(fun('type.fcp.cart'(bool,X973),fun('type.num.num','type.fcp.cart'(bool,X973))),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X973),fun(fun('type.num.num','type.fcp.cart'(bool,X973)),fun('type.num.num','type.fcp.cart'(bool,X973)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.fcp.cart'(bool,X973)),X974))),s('type.fcp.cart'(bool,X973),X975))),s('type.num.num',X976)),X973)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f45510,f303])).
fof(f45510,plain,(
  ( ! [X978,X976,X975,X973,X977,X974] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X973),'const.wordSem.Loc_2'(s('type.num.num',X977),s('type.num.num',X978))),s('type.wordSem.word_loc'(X973),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X973),'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X973),X975),s(fun('type.num.num','type.fcp.cart'(bool,X973)),X974),s('type.num.num',X976))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X977,X978,happ(s(fun('type.num.num','type.fcp.cart'(bool,X973)),happ(s(fun('type.fcp.cart'(bool,X973),fun('type.num.num','type.fcp.cart'(bool,X973))),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X973),fun(fun('type.num.num','type.fcp.cart'(bool,X973)),fun('type.num.num','type.fcp.cart'(bool,X973)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.fcp.cart'(bool,X973)),X974))),s('type.fcp.cart'(bool,X973),X975))),s('type.num.num',X976)),X973)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f347])).
fof(f45607,plain,(
  ( ! [X963,X961,X965,X962,X966,X964] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.ind_type.FCONS_3'(s('type.num.num',X962),s(fun('type.num.num','type.num.num'),X961),s('type.num.num',X963)),X964,X965,X966)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x1x0_2'(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.num.num'),X961))),s('type.num.num',X962))),s('type.num.num',X963)),X964,X965,X966)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f45508,f303])).
fof(f45508,plain,(
  ( ! [X963,X961,X965,X962,X966,X964] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X966),'const.wordSem.Loc_2'(s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',X962),s(fun('type.num.num','type.num.num'),X961),s('type.num.num',X963))),s('type.num.num',X964))),s('type.wordSem.word_loc'(X966),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X966),X965))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x1x0_2'(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.num.num'),X961))),s('type.num.num',X962))),s('type.num.num',X963)),X964,X965,X966)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f347])).
fof(f45606,plain,(
  ( ! [X957,X958,X956,X960,X955,X959] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X958,'const.ind_type.FCONS_3'(s('type.num.num',X956),s(fun('type.num.num','type.num.num'),X955),s('type.num.num',X957)),X959,X960)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X958,happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x1x0_2'(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.num.num'),X955))),s('type.num.num',X956))),s('type.num.num',X957)),X959,X960)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f45507,f303])).
fof(f45507,plain,(
  ( ! [X957,X958,X956,X960,X955,X959] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X960),'const.wordSem.Loc_2'(s('type.num.num',X958),s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',X956),s(fun('type.num.num','type.num.num'),X955),s('type.num.num',X957))))),s('type.wordSem.word_loc'(X960),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X960),X959))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X958,happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x1x0_2'(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.num.num'),X955))),s('type.num.num',X956))),s('type.num.num',X957)),X959,X960)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f347])).
fof(f45494,plain,(
  ( ! [X872,X870,X873,X871,X869] : (s('type.stackSem.result'(X869),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X869),X873))) != s('type.stackSem.result'(X869),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X869),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X869),X871),s(fun('type.num.num','type.wordSem.word_loc'(X869)),X870),s('type.num.num',X872))))) | s('type.wordSem.word_loc'(X869),X873) = s('type.wordSem.word_loc'(X869),happ(s(fun('type.num.num','type.wordSem.word_loc'(X869)),happ(s(fun('type.wordSem.word_loc'(X869),fun('type.num.num','type.wordSem.word_loc'(X869))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X869),fun(fun('type.num.num','type.wordSem.word_loc'(X869)),fun('type.num.num','type.wordSem.word_loc'(X869)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.wordSem.word_loc'(X869)),X870))),s('type.wordSem.word_loc'(X869),X871))),s('type.num.num',X872)))) )),
  inference(superposition,[],[f294,f347])).
fof(f45490,plain,(
  ( ! [X850,X852,X851,X849,X853] : (s('type.stackSem.result'(X849),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X849),X853))) != s('type.stackSem.result'(X849),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X849),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X849),X851),s(fun('type.num.num','type.wordSem.word_loc'(X849)),X850),s('type.num.num',X852))))) | s('type.wordSem.word_loc'(X849),X853) = s('type.wordSem.word_loc'(X849),happ(s(fun('type.num.num','type.wordSem.word_loc'(X849)),happ(s(fun('type.wordSem.word_loc'(X849),fun('type.num.num','type.wordSem.word_loc'(X849))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X849),fun(fun('type.num.num','type.wordSem.word_loc'(X849)),fun('type.num.num','type.wordSem.word_loc'(X849)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.wordSem.word_loc'(X849)),X850))),s('type.wordSem.word_loc'(X849),X851))),s('type.num.num',X852)))) )),
  inference(superposition,[],[f292,f347])).
fof(f45486,plain,(
  ( ! [X831,X829,X833,X830,X832] : (s('type.stackSem.result'(X829),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X829),X833))) != s('type.stackSem.result'(X829),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X829),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X829),X831),s(fun('type.num.num','type.wordSem.word_loc'(X829)),X830),s('type.num.num',X832))))) | s('type.wordSem.word_loc'(X829),X833) = s('type.wordSem.word_loc'(X829),happ(s(fun('type.num.num','type.wordSem.word_loc'(X829)),happ(s(fun('type.wordSem.word_loc'(X829),fun('type.num.num','type.wordSem.word_loc'(X829))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X829),fun(fun('type.num.num','type.wordSem.word_loc'(X829)),fun('type.num.num','type.wordSem.word_loc'(X829)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.wordSem.word_loc'(X829)),X830))),s('type.wordSem.word_loc'(X829),X831))),s('type.num.num',X832)))) )),
  inference(superposition,[],[f290,f347])).
fof(f45477,plain,(
  ( ! [X793,X791,X792] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),X792),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X791),s('type.num.num',X793))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.num.num','type.wordSem.word_loc'(sK0)),happ(s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num','type.wordSem.word_loc'(sK0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(sK0),fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),fun('type.num.num','type.wordSem.word_loc'(sK0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X791))),s('type.wordSem.word_loc'(sK0),X792))),s('type.num.num',X793)))) )),
  inference(superposition,[],[f2643,f347])).
fof(f45473,plain,(
  ( ! [X777,X775,X778,X776] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),X776),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X775),s('type.num.num',X777))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun('type.num.num','type.wordSem.word_loc'(sK0)),happ(s(fun('type.wordSem.word_loc'(sK0),fun('type.num.num','type.wordSem.word_loc'(sK0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(sK0),fun(fun('type.num.num','type.wordSem.word_loc'(sK0)),fun('type.num.num','type.wordSem.word_loc'(sK0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X775))),s('type.wordSem.word_loc'(sK0),X776))),s('type.num.num',X777)),X778,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X778)))) )),
  inference(superposition,[],[f2654,f347])).
fof(f45445,plain,(
  ( ! [X546,X545,X547,X543,X544] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X543,bool),'const.ind_type.FCONS_3'(s(fun(X543,bool),X545),s(fun('type.num.num',fun(X543,bool)),X544),s('type.num.num',X546))))) | s(X543,X547) = s(X543,sK3(X547,happ(s(fun('type.num.num',fun(X543,bool)),happ(s(fun(fun(X543,bool),fun('type.num.num',fun(X543,bool))),'_dst_x1x0_2'(s(fun(fun(X543,bool),fun(fun('type.num.num',fun(X543,bool)),fun('type.num.num',fun(X543,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X543,bool)),X544))),s(fun(X543,bool),X545))),s('type.num.num',X546)),X543))) )),
  inference(superposition,[],[f565,f347])).
fof(f45594,plain,(
  ( ! [X536,X534,X537,X535] : (p(s(bool,happ(s(fun(X534,bool),'const.ind_type.FCONS_3'(s(fun(X534,bool),X536),s(fun('type.num.num',fun(X534,bool)),X535),s('type.num.num',X537))),s(X534,sK7(happ(s(fun('type.num.num',fun(X534,bool)),happ(s(fun(fun(X534,bool),fun('type.num.num',fun(X534,bool))),'_dst_x1x0_2'(s(fun(fun(X534,bool),fun(fun('type.num.num',fun(X534,bool)),fun('type.num.num',fun(X534,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X534,bool)),X535))),s(fun(X534,bool),X536))),s('type.num.num',X537)),X534))))) | ~p(s(bool,happ(s(fun(fun(X534,bool),bool),'?_1'),s(fun(X534,bool),'const.ind_type.FCONS_3'(s(fun(X534,bool),X536),s(fun('type.num.num',fun(X534,bool)),X535),s('type.num.num',X537))))))) )),
  inference(forward_demodulation,[],[f45443,f347])).
fof(f45443,plain,(
  ( ! [X536,X534,X537,X535] : (~p(s(bool,happ(s(fun(fun(X534,bool),bool),'?_1'),s(fun(X534,bool),'const.ind_type.FCONS_3'(s(fun(X534,bool),X536),s(fun('type.num.num',fun(X534,bool)),X535),s('type.num.num',X537)))))) | p(s(bool,happ(s(fun(X534,bool),happ(s(fun('type.num.num',fun(X534,bool)),happ(s(fun(fun(X534,bool),fun('type.num.num',fun(X534,bool))),'_dst_x1x0_2'(s(fun(fun(X534,bool),fun(fun('type.num.num',fun(X534,bool)),fun('type.num.num',fun(X534,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X534,bool)),X535))),s(fun(X534,bool),X536))),s('type.num.num',X537))),s(X534,sK7(happ(s(fun('type.num.num',fun(X534,bool)),happ(s(fun(fun(X534,bool),fun('type.num.num',fun(X534,bool))),'_dst_x1x0_2'(s(fun(fun(X534,bool),fun(fun('type.num.num',fun(X534,bool)),fun('type.num.num',fun(X534,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X534,bool)),X535))),s(fun(X534,bool),X536))),s('type.num.num',X537)),X534)))))) )),
  inference(superposition,[],[f311,f347])).
fof(f45593,plain,(
  ( ! [X532,X530,X533,X531] : (p(s(bool,happ(s(fun(fun(X530,bool),bool),'!_1'),s(fun(X530,bool),'const.ind_type.FCONS_3'(s(fun(X530,bool),X532),s(fun('type.num.num',fun(X530,bool)),X531),s('type.num.num',X533)))))) | ~p(s(bool,happ(s(fun(X530,bool),'const.ind_type.FCONS_3'(s(fun(X530,bool),X532),s(fun('type.num.num',fun(X530,bool)),X531),s('type.num.num',X533))),s(X530,sK6(happ(s(fun('type.num.num',fun(X530,bool)),happ(s(fun(fun(X530,bool),fun('type.num.num',fun(X530,bool))),'_dst_x1x0_2'(s(fun(fun(X530,bool),fun(fun('type.num.num',fun(X530,bool)),fun('type.num.num',fun(X530,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X530,bool)),X531))),s(fun(X530,bool),X532))),s('type.num.num',X533)),X530)))))) )),
  inference(forward_demodulation,[],[f45442,f347])).
fof(f45442,plain,(
  ( ! [X532,X530,X533,X531] : (~p(s(bool,happ(s(fun(X530,bool),'const.ind_type.FCONS_3'(s(fun(X530,bool),X532),s(fun('type.num.num',fun(X530,bool)),X531),s('type.num.num',X533))),s(X530,sK6(happ(s(fun('type.num.num',fun(X530,bool)),happ(s(fun(fun(X530,bool),fun('type.num.num',fun(X530,bool))),'_dst_x1x0_2'(s(fun(fun(X530,bool),fun(fun('type.num.num',fun(X530,bool)),fun('type.num.num',fun(X530,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X530,bool)),X531))),s(fun(X530,bool),X532))),s('type.num.num',X533)),X530))))) | p(s(bool,happ(s(fun(fun(X530,bool),bool),'!_1'),s(fun(X530,bool),happ(s(fun('type.num.num',fun(X530,bool)),happ(s(fun(fun(X530,bool),fun('type.num.num',fun(X530,bool))),'_dst_x1x0_2'(s(fun(fun(X530,bool),fun(fun('type.num.num',fun(X530,bool)),fun('type.num.num',fun(X530,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X530,bool)),X531))),s(fun(X530,bool),X532))),s('type.num.num',X533))))))) )),
  inference(superposition,[],[f310,f347])).
fof(f45440,plain,(
  ( ! [X524,X520,X522,X521,X523] : (p(s(bool,'|dollar|exists_1'(s(fun(X520,bool),'const.ind_type.FCONS_3'(s(fun(X520,bool),X522),s(fun('type.num.num',fun(X520,bool)),X521),s('type.num.num',X523)))))) | s(X520,X524) = s(X520,sK3(X524,happ(s(fun('type.num.num',fun(X520,bool)),happ(s(fun(fun(X520,bool),fun('type.num.num',fun(X520,bool))),'_dst_x1x0_2'(s(fun(fun(X520,bool),fun(fun('type.num.num',fun(X520,bool)),fun('type.num.num',fun(X520,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X520,bool)),X521))),s(fun(X520,bool),X522))),s('type.num.num',X523)),X520))) )),
  inference(superposition,[],[f288,f347])).
fof(f45434,plain,(
  ( ! [X492,X494,X496,X493,X495,X491] : (s(X492,happ(s(fun(X491,X492),'const.ind_type.FCONS_3'(s(fun(X491,X492),X494),s(fun('type.num.num',fun(X491,X492)),X493),s('type.num.num',X495))),s(X491,X496))) = s(X492,happ(s(fun('type.num.num',X492),'_dst_x1x0_2'(s(fun('type.num.num',fun(X491,X492)),happ(s(fun(fun(X491,X492),fun('type.num.num',fun(X491,X492))),'_dst_x1x0_2'(s(fun(fun(X491,X492),fun(fun('type.num.num',fun(X491,X492)),fun('type.num.num',fun(X491,X492)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X491,X492)),X493))),s(fun(X491,X492),X494))),s(X491,X496))),s('type.num.num',X495)))) )),
  inference(superposition,[],[f334,f347])).
fof(f45406,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X399,bool),'_dst_x0_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X397),s(fun('type.num.num',bool),X396),s('type.num.num',X398))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X396))),s(bool,X397))),s('type.num.num',X398)))) )),
  inference(superposition,[],[f2213,f347])).
fof(f45401,plain,(
  ( ! [X377,X379,X376,X378] : (s(bool,'T_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X377),s(fun('type.num.num',bool),X376),s('type.num.num',X378))) | s(bool,X379) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X376))),s(bool,X377))),s('type.num.num',X378))) | s(bool,'F_0') = s(bool,X379)) )),
  inference(superposition,[],[f1400,f347])).
fof(f45400,plain,(
  ( ! [X372,X374,X373,X375] : (s(bool,X375) != s(bool,'const.ind_type.FCONS_3'(s(bool,X373),s(fun('type.num.num',bool),X372),s('type.num.num',X374))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X372))),s(bool,X373))),s('type.num.num',X374))) | s(bool,'F_0') = s(bool,X375)) )),
  inference(superposition,[],[f1197,f347])).
fof(f45399,plain,(
  ( ! [X368,X370,X369,X371] : (s(bool,X371) != s(bool,'const.ind_type.FCONS_3'(s(bool,X369),s(fun('type.num.num',bool),X368),s('type.num.num',X370))) | s(bool,'T_0') = s(bool,X371) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X368))),s(bool,X369))),s('type.num.num',X370)))) )),
  inference(superposition,[],[f1197,f347])).
fof(f45559,plain,(
  ( ! [X323,X324,X322] : (s(bool,'T_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X323),s(fun('type.num.num',bool),X322),s('type.num.num',X324))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X322))),s(bool,X323))),s('type.num.num',X324)))) )),
  inference(forward_demodulation,[],[f45388,f270])).
fof(f45388,plain,(
  ( ! [X325,X323,X324,X326,X322] : (s(bool,'const.bool.DATATYPE_1'(s(X325,X326))) != s(bool,'const.ind_type.FCONS_3'(s(bool,X323),s(fun('type.num.num',bool),X322),s('type.num.num',X324))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X322))),s(bool,X323))),s('type.num.num',X324)))) )),
  inference(superposition,[],[f557,f347])).
fof(f45555,plain,(
  ( ! [X292,X294,X293,X291] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X294),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X291))),s(bool,X292))))),s('type.num.num',X293)))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X292),s(fun('type.num.num',bool),X291),s('type.num.num',X293))))) )),
  inference(forward_demodulation,[],[f45380,f335])).
fof(f45380,plain,(
  ( ! [X292,X294,X293,X291] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X292),s(fun('type.num.num',bool),X291),s('type.num.num',X293)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X294))),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X291))),s(bool,X292))),s('type.num.num',X293))))))) )),
  inference(superposition,[],[f318,f347])).
fof(f45552,plain,(
  ( ! [X277,X275,X276,X278] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X278),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X275))),s(bool,X276))))),s('type.num.num',X277)))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X276),s(fun('type.num.num',bool),X275),s('type.num.num',X277))))) )),
  inference(forward_demodulation,[],[f45376,f335])).
fof(f45376,plain,(
  ( ! [X277,X275,X276,X278] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X276),s(fun('type.num.num',bool),X275),s('type.num.num',X277)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X278))),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X275))),s(bool,X276))),s('type.num.num',X277))))))) )),
  inference(superposition,[],[f315,f347])).
fof(f45364,plain,(
  ( ! [X235,X234] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X235),s(fun('type.num.num',bool),X234),s('type.num.num',sK6(happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X234))),s(bool,X235)),'type.num.num'))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),'!_1'),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X234))),s(bool,X235))))))) )),
  inference(superposition,[],[f310,f347])).
fof(f45363,plain,(
  ( ! [X231,X233,X232] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X232),s(fun('type.num.num',bool),X231),s('type.num.num',X233)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X231))),s(bool,X232))))))) )),
  inference(superposition,[],[f2633,f347])).
fof(f45362,plain,(
  ( ! [X229,X230,X228] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X229),s(fun('type.num.num',bool),X228),s('type.num.num',X230)))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),'?_1'),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X228))),s(bool,X229))))))) )),
  inference(superposition,[],[f312,f347])).
fof(f45329,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X4,happ(s(fun(X0,X4),X5),s(X0,'const.ind_type.FCONS_3'(s(X0,X2),s(fun('type.num.num',X0),X1),s('type.num.num',X3))))) = s(X4,happ(s(fun('type.num.num',X4),'_dst_x0x1_2'(s(fun(X0,X4),X5),s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X1))),s(X0,X2))))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f333,f347])).
fof(f45318,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X61) = s(bool,'const.ind_type.FCONS_3'(s(bool,X59),s(fun('type.num.num',bool),X58),s('type.num.num',X60))) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X58))),s(bool,X59))),s('type.num.num',X60)))) )),
  inference(superposition,[],[f347,f1108])).
fof(f45316,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X51),s(fun('type.num.num',bool),X50),s('type.num.num',X52))) | s(bool,X53) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X50))),s(bool,X51))),s('type.num.num',X52))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(superposition,[],[f347,f1108])).
fof(f45528,plain,(
  ( ! [X47,X45,X46] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X46),s(fun('type.num.num',bool),X45),s('type.num.num',X47))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X45))),s(bool,X46))),s('type.num.num',X47)))) )),
  inference(forward_demodulation,[],[f45315,f270])).
fof(f45315,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,'const.bool.DATATYPE_1'(s(X48,X49))) = s(bool,'const.ind_type.FCONS_3'(s(bool,X46),s(fun('type.num.num',bool),X45),s('type.num.num',X47))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X45))),s(bool,X46))),s('type.num.num',X47)))) )),
  inference(superposition,[],[f347,f1071])).
fof(f45314,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X42),s(fun('type.num.num',bool),X41),s('type.num.num',X43))) | s(bool,X44) = s(bool,'const.bool.DATATYPE_1'(s(bool,X44))) | s(bool,X44) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X41))),s(bool,X42))),s('type.num.num',X43)))) )),
  inference(superposition,[],[f347,f742])).
fof(f45313,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X40) = s(bool,'const.ind_type.FCONS_3'(s(bool,X38),s(fun('type.num.num',bool),X37),s('type.num.num',X39))) | s(bool,X40) = s(bool,'const.bool.DATATYPE_1'(s(bool,X40))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X37))),s(bool,X38))),s('type.num.num',X39)))) )),
  inference(superposition,[],[f347,f742])).
fof(f45309,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X24) = s(bool,'const.ind_type.FCONS_3'(s(bool,X22),s(fun('type.num.num',bool),X21),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X21))),s(bool,X22))),s('type.num.num',X23)))) )),
  inference(superposition,[],[f347,f365])).
fof(f45308,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X18),s(fun('type.num.num',bool),X17),s('type.num.num',X19))) | s(bool,X20) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X17))),s(bool,X18))),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f347,f365])).
fof(f45307,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X15),s(fun('type.num.num',bool),X14),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X14))),s(bool,X15))),s('type.num.num',X16)))) )),
  inference(superposition,[],[f347,f242])).
fof(f45306,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,'const.ind_type.FCONS_3'(s(X4,X6),s(fun('type.num.num',X4),X5),s('type.num.num',X7))) = s(X4,happ(s(fun(X4,X4),'_dst_x1x0_2'(s(fun(X4,fun('type.num.num',X4)),'_dst_x1x0_2'(s(fun(X4,fun(fun('type.num.num',X4),fun('type.num.num',X4))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X4),X5))),s('type.num.num',X7))),s(X4,X6)))) )),
  inference(superposition,[],[f347,f334])).
fof(f45526,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))),s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X2))),s(X0,X1))))),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f45145,f335])).
fof(f45145,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X2))),s(X0,X1))),s('type.num.num',X3))))))) )),
  inference(unit_resulting_resolution,[],[f347,f331])).
fof(f44770,plain,(
  ( ! [X1581,X1583,X1584,X1586,X1588,X1580,X1582,X1585,X1589,X1587] : (s('type.fcp.cart'(bool,X1580),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1580),happ(s(fun('type.wordSem.word_loc'(X1581),'type.fcp.cart'(bool,X1580)),X1584),s('type.wordSem.word_loc'(X1581),X1582))) | p(s(bool,sK4(X1588,X1589,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1581),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1581),X1582))),s(fun('type.wordSem.word_loc'(X1581),'type.fcp.cart'(bool,X1580)),X1583),s(fun('type.wordSem.word_loc'(X1581),'type.fcp.cart'(bool,X1580)),X1584),s(fun('type.wordSem.word_loc'(X1581),'type.fcp.cart'(bool,X1580)),X1585),s('type.fcp.cart'(bool,X1580),X1586),s('type.fcp.cart'(bool,X1580),X1587)),X1580)))) )),
  inference(superposition,[],[f302,f329])).
fof(f44876,plain,(
  ( ! [X1560,X1562,X1564,X1566,X1559,X1561,X1568,X1563,X1567,X1565] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1567,X1568,happ(s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1563),s('type.wordSem.word_loc'(X1560),X1561)),X1559)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1567,X1568,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1560),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1560),X1561))),s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1562),s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1563),s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1564),s('type.fcp.cart'(bool,X1559),X1565),s('type.fcp.cart'(bool,X1559),X1566)),X1559)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f44768,f303])).
fof(f44768,plain,(
  ( ! [X1560,X1562,X1564,X1566,X1559,X1561,X1568,X1563,X1567,X1565] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1559),'const.wordSem.Loc_2'(s('type.num.num',X1567),s('type.num.num',X1568))),s('type.wordSem.word_loc'(X1559),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1559),happ(s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1563),s('type.wordSem.word_loc'(X1560),X1561))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1567,X1568,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1560),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1560),X1561))),s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1562),s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1563),s(fun('type.wordSem.word_loc'(X1560),'type.fcp.cart'(bool,X1559)),X1564),s('type.fcp.cart'(bool,X1559),X1565),s('type.fcp.cart'(bool,X1559),X1566)),X1559)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f329])).
fof(f44875,plain,(
  ( ! [X1540,X1542,X1544,X1546,X1548,X1539,X1541,X1543,X1545,X1547] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1542),s('type.wordSem.word_loc'(X1539),X1540)),X1546,X1547,X1548)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1539),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1539),X1540))),s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1541),s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1542),s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1543),s('type.num.num',X1544),s('type.num.num',X1545)),X1546,X1547,X1548)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f44766,f303])).
fof(f44766,plain,(
  ( ! [X1540,X1542,X1544,X1546,X1548,X1539,X1541,X1543,X1545,X1547] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1548),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1542),s('type.wordSem.word_loc'(X1539),X1540))),s('type.num.num',X1546))),s('type.wordSem.word_loc'(X1548),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1548),X1547))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1539),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1539),X1540))),s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1541),s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1542),s(fun('type.wordSem.word_loc'(X1539),'type.num.num'),X1543),s('type.num.num',X1544),s('type.num.num',X1545)),X1546,X1547,X1548)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f329])).
fof(f44874,plain,(
  ( ! [X1531,X1538,X1533,X1535,X1536,X1530,X1532,X1534,X1537,X1529] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1536,happ(s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1532),s('type.wordSem.word_loc'(X1529),X1530)),X1537,X1538)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1536,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1529),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1529),X1530))),s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1531),s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1532),s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1533),s('type.num.num',X1534),s('type.num.num',X1535)),X1537,X1538)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f44765,f303])).
fof(f44765,plain,(
  ( ! [X1531,X1538,X1533,X1535,X1536,X1530,X1532,X1534,X1537,X1529] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1538),'const.wordSem.Loc_2'(s('type.num.num',X1536),s('type.num.num',happ(s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1532),s('type.wordSem.word_loc'(X1529),X1530))))),s('type.wordSem.word_loc'(X1538),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1538),X1537))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1536,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1529),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1529),X1530))),s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1531),s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1532),s(fun('type.wordSem.word_loc'(X1529),'type.num.num'),X1533),s('type.num.num',X1534),s('type.num.num',X1535)),X1537,X1538)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f329])).
fof(f44753,plain,(
  ( ! [X1407,X1408,X1410,X1412,X1406,X1409,X1411,X1413,X1405] : (s('type.stackSem.result'(X1405),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1405),X1413))) != s('type.stackSem.result'(X1405),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1405),happ(s(fun('type.wordSem.word_loc'(X1406),'type.wordSem.word_loc'(X1405)),X1409),s('type.wordSem.word_loc'(X1406),X1407))))) | s('type.wordSem.word_loc'(X1405),X1413) = s('type.wordSem.word_loc'(X1405),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1406),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1406),X1407))),s(fun('type.wordSem.word_loc'(X1406),'type.wordSem.word_loc'(X1405)),X1408),s(fun('type.wordSem.word_loc'(X1406),'type.wordSem.word_loc'(X1405)),X1409),s(fun('type.wordSem.word_loc'(X1406),'type.wordSem.word_loc'(X1405)),X1410),s('type.wordSem.word_loc'(X1405),X1411),s('type.wordSem.word_loc'(X1405),X1412)))) )),
  inference(superposition,[],[f294,f329])).
fof(f44749,plain,(
  ( ! [X1377,X1369,X1371,X1373,X1375,X1376,X1370,X1372,X1374] : (s('type.stackSem.result'(X1369),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1369),X1377))) != s('type.stackSem.result'(X1369),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1369),happ(s(fun('type.wordSem.word_loc'(X1370),'type.wordSem.word_loc'(X1369)),X1373),s('type.wordSem.word_loc'(X1370),X1371))))) | s('type.wordSem.word_loc'(X1369),X1377) = s('type.wordSem.word_loc'(X1369),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1370),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1370),X1371))),s(fun('type.wordSem.word_loc'(X1370),'type.wordSem.word_loc'(X1369)),X1372),s(fun('type.wordSem.word_loc'(X1370),'type.wordSem.word_loc'(X1369)),X1373),s(fun('type.wordSem.word_loc'(X1370),'type.wordSem.word_loc'(X1369)),X1374),s('type.wordSem.word_loc'(X1369),X1375),s('type.wordSem.word_loc'(X1369),X1376)))) )),
  inference(superposition,[],[f292,f329])).
fof(f44745,plain,(
  ( ! [X1341,X1333,X1335,X1336,X1338,X1340,X1334,X1337,X1339] : (s('type.stackSem.result'(X1333),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1333),X1341))) != s('type.stackSem.result'(X1333),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1333),happ(s(fun('type.wordSem.word_loc'(X1334),'type.wordSem.word_loc'(X1333)),X1337),s('type.wordSem.word_loc'(X1334),X1335))))) | s('type.wordSem.word_loc'(X1333),X1341) = s('type.wordSem.word_loc'(X1333),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1334),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1334),X1335))),s(fun('type.wordSem.word_loc'(X1334),'type.wordSem.word_loc'(X1333)),X1336),s(fun('type.wordSem.word_loc'(X1334),'type.wordSem.word_loc'(X1333)),X1337),s(fun('type.wordSem.word_loc'(X1334),'type.wordSem.word_loc'(X1333)),X1338),s('type.wordSem.word_loc'(X1333),X1339),s('type.wordSem.word_loc'(X1333),X1340)))) )),
  inference(superposition,[],[f290,f329])).
fof(f44736,plain,(
  ( ! [X1265,X1262,X1260,X1264,X1259,X1263,X1261] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(X1259),'type.wordSem.word_loc'(sK0)),X1262),s('type.wordSem.word_loc'(X1259),X1260))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1259),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1259),X1260))),s(fun('type.wordSem.word_loc'(X1259),'type.wordSem.word_loc'(sK0)),X1261),s(fun('type.wordSem.word_loc'(X1259),'type.wordSem.word_loc'(sK0)),X1262),s(fun('type.wordSem.word_loc'(X1259),'type.wordSem.word_loc'(sK0)),X1263),s('type.wordSem.word_loc'(sK0),X1264),s('type.wordSem.word_loc'(sK0),X1265)))) )),
  inference(superposition,[],[f2643,f329])).
fof(f44732,plain,(
  ( ! [X1234,X1232,X1227,X1231,X1229,X1233,X1230,X1228] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(X1227),'type.wordSem.word_loc'(sK0)),X1230),s('type.wordSem.word_loc'(X1227),X1228))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1227),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1227),X1228))),s(fun('type.wordSem.word_loc'(X1227),'type.wordSem.word_loc'(sK0)),X1229),s(fun('type.wordSem.word_loc'(X1227),'type.wordSem.word_loc'(sK0)),X1230),s(fun('type.wordSem.word_loc'(X1227),'type.wordSem.word_loc'(sK0)),X1231),s('type.wordSem.word_loc'(sK0),X1232),s('type.wordSem.word_loc'(sK0),X1233)),X1234,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1234)))) )),
  inference(superposition,[],[f2654,f329])).
fof(f44707,plain,(
  ( ! [X926,X930,X928,X932,X927,X925,X931,X929,X933] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X925,bool),happ(s(fun('type.wordSem.word_loc'(X926),fun(X925,bool)),X929),s('type.wordSem.word_loc'(X926),X927))))) | s(X925,X933) = s(X925,sK3(X933,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X926),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X926),X927))),s(fun('type.wordSem.word_loc'(X926),fun(X925,bool)),X928),s(fun('type.wordSem.word_loc'(X926),fun(X925,bool)),X929),s(fun('type.wordSem.word_loc'(X926),fun(X925,bool)),X930),s(fun(X925,bool),X931),s(fun(X925,bool),X932)),X925))) )),
  inference(superposition,[],[f565,f329])).
fof(f44862,plain,(
  ( ! [X912,X914,X911,X909,X915,X913,X910,X908] : (p(s(bool,happ(s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X912),s('type.wordSem.word_loc'(X909),X910))),s(X908,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X909),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X909),X910))),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X911),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X912),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X913),s(fun(X908,bool),X914),s(fun(X908,bool),X915)),X908))))) | ~p(s(bool,happ(s(fun(fun(X908,bool),bool),'?_1'),s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X912),s('type.wordSem.word_loc'(X909),X910))))))) )),
  inference(forward_demodulation,[],[f44705,f329])).
fof(f44705,plain,(
  ( ! [X912,X914,X911,X909,X915,X913,X910,X908] : (~p(s(bool,happ(s(fun(fun(X908,bool),bool),'?_1'),s(fun(X908,bool),happ(s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X912),s('type.wordSem.word_loc'(X909),X910)))))) | p(s(bool,happ(s(fun(X908,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X909),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X909),X910))),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X911),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X912),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X913),s(fun(X908,bool),X914),s(fun(X908,bool),X915))),s(X908,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X909),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X909),X910))),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X911),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X912),s(fun('type.wordSem.word_loc'(X909),fun(X908,bool)),X913),s(fun(X908,bool),X914),s(fun(X908,bool),X915)),X908)))))) )),
  inference(superposition,[],[f311,f329])).
fof(f44861,plain,(
  ( ! [X907,X905,X903,X901,X906,X904,X902,X900] : (p(s(bool,happ(s(fun(fun(X900,bool),bool),'!_1'),s(fun(X900,bool),happ(s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X904),s('type.wordSem.word_loc'(X901),X902)))))) | ~p(s(bool,happ(s(fun(X900,bool),happ(s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X904),s('type.wordSem.word_loc'(X901),X902))),s(X900,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X901),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X901),X902))),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X903),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X904),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X905),s(fun(X900,bool),X906),s(fun(X900,bool),X907)),X900)))))) )),
  inference(forward_demodulation,[],[f44704,f329])).
fof(f44704,plain,(
  ( ! [X907,X905,X903,X901,X906,X904,X902,X900] : (~p(s(bool,happ(s(fun(X900,bool),happ(s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X904),s('type.wordSem.word_loc'(X901),X902))),s(X900,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X901),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X901),X902))),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X903),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X904),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X905),s(fun(X900,bool),X906),s(fun(X900,bool),X907)),X900))))) | p(s(bool,happ(s(fun(fun(X900,bool),bool),'!_1'),s(fun(X900,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X901),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X901),X902))),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X903),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X904),s(fun('type.wordSem.word_loc'(X901),fun(X900,bool)),X905),s(fun(X900,bool),X906),s(fun(X900,bool),X907))))))) )),
  inference(superposition,[],[f310,f329])).
fof(f44702,plain,(
  ( ! [X883,X887,X885,X890,X888,X882,X886,X884,X889] : (p(s(bool,'|dollar|exists_1'(s(fun(X882,bool),happ(s(fun('type.wordSem.word_loc'(X883),fun(X882,bool)),X886),s('type.wordSem.word_loc'(X883),X884)))))) | s(X882,X890) = s(X882,sK3(X890,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X883),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X883),X884))),s(fun('type.wordSem.word_loc'(X883),fun(X882,bool)),X885),s(fun('type.wordSem.word_loc'(X883),fun(X882,bool)),X886),s(fun('type.wordSem.word_loc'(X883),fun(X882,bool)),X887),s(fun(X882,bool),X888),s(fun(X882,bool),X889)),X882))) )),
  inference(superposition,[],[f288,f329])).
fof(f44669,plain,(
  ( ! [X639,X633,X635,X636,X638,X632,X634,X637] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X639,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(X632),bool),X635),s('type.wordSem.word_loc'(X632),X633))))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X632),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X632),X633))),s(fun('type.wordSem.word_loc'(X632),bool),X634),s(fun('type.wordSem.word_loc'(X632),bool),X635),s(fun('type.wordSem.word_loc'(X632),bool),X636),s(bool,X637),s(bool,X638)))) )),
  inference(superposition,[],[f2213,f329])).
fof(f44664,plain,(
  ( ! [X596,X598,X592,X594,X597,X599,X593,X595] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X592),bool),X595),s('type.wordSem.word_loc'(X592),X593))) | s(bool,X599) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X592),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X592),X593))),s(fun('type.wordSem.word_loc'(X592),bool),X594),s(fun('type.wordSem.word_loc'(X592),bool),X595),s(fun('type.wordSem.word_loc'(X592),bool),X596),s(bool,X597),s(bool,X598))) | s(bool,'F_0') = s(bool,X599)) )),
  inference(superposition,[],[f1400,f329])).
fof(f44663,plain,(
  ( ! [X588,X590,X584,X586,X589,X591,X585,X587] : (s(bool,X591) != s(bool,happ(s(fun('type.wordSem.word_loc'(X584),bool),X587),s('type.wordSem.word_loc'(X584),X585))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X584),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X584),X585))),s(fun('type.wordSem.word_loc'(X584),bool),X586),s(fun('type.wordSem.word_loc'(X584),bool),X587),s(fun('type.wordSem.word_loc'(X584),bool),X588),s(bool,X589),s(bool,X590))) | s(bool,'F_0') = s(bool,X591)) )),
  inference(superposition,[],[f1197,f329])).
fof(f44662,plain,(
  ( ! [X580,X582,X576,X578,X581,X583,X577,X579] : (s(bool,X583) != s(bool,happ(s(fun('type.wordSem.word_loc'(X576),bool),X579),s('type.wordSem.word_loc'(X576),X577))) | s(bool,'T_0') = s(bool,X583) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X576),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X576),X577))),s(fun('type.wordSem.word_loc'(X576),bool),X578),s(fun('type.wordSem.word_loc'(X576),bool),X579),s(fun('type.wordSem.word_loc'(X576),bool),X580),s(bool,X581),s(bool,X582)))) )),
  inference(superposition,[],[f1197,f329])).
fof(f44827,plain,(
  ( ! [X486,X492,X488,X490,X487,X489,X491] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X486),bool),X489),s('type.wordSem.word_loc'(X486),X487))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X486),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X486),X487))),s(fun('type.wordSem.word_loc'(X486),bool),X488),s(fun('type.wordSem.word_loc'(X486),bool),X489),s(fun('type.wordSem.word_loc'(X486),bool),X490),s(bool,X491),s(bool,X492)))) )),
  inference(forward_demodulation,[],[f44651,f270])).
fof(f44651,plain,(
  ( ! [X486,X492,X494,X488,X490,X487,X493,X489,X491] : (s(bool,'const.bool.DATATYPE_1'(s(X493,X494))) != s(bool,happ(s(fun('type.wordSem.word_loc'(X486),bool),X489),s('type.wordSem.word_loc'(X486),X487))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X486),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X486),X487))),s(fun('type.wordSem.word_loc'(X486),bool),X488),s(fun('type.wordSem.word_loc'(X486),bool),X489),s(fun('type.wordSem.word_loc'(X486),bool),X490),s(bool,X491),s(bool,X492)))) )),
  inference(superposition,[],[f557,f329])).
fof(f44588,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X96] : (s(bool,X103) = s(bool,happ(s(fun('type.wordSem.word_loc'(X96),bool),X99),s('type.wordSem.word_loc'(X96),X97))) | s(bool,'F_0') = s(bool,X103) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X96),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X96),X97))),s(fun('type.wordSem.word_loc'(X96),bool),X98),s(fun('type.wordSem.word_loc'(X96),bool),X99),s(fun('type.wordSem.word_loc'(X96),bool),X100),s(bool,X101),s(bool,X102)))) )),
  inference(superposition,[],[f329,f1108])).
fof(f44586,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X80),bool),X83),s('type.wordSem.word_loc'(X80),X81))) | s(bool,X87) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X80),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X80),X81))),s(fun('type.wordSem.word_loc'(X80),bool),X82),s(fun('type.wordSem.word_loc'(X80),bool),X83),s(fun('type.wordSem.word_loc'(X80),bool),X84),s(bool,X85),s(bool,X86))) | s(bool,'F_0') = s(bool,X87)) )),
  inference(superposition,[],[f329,f1108])).
fof(f44796,plain,(
  ( ! [X76,X74,X72,X71,X77,X75,X73] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X71),bool),X74),s('type.wordSem.word_loc'(X71),X72))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X71),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X71),X72))),s(fun('type.wordSem.word_loc'(X71),bool),X73),s(fun('type.wordSem.word_loc'(X71),bool),X74),s(fun('type.wordSem.word_loc'(X71),bool),X75),s(bool,X76),s(bool,X77)))) )),
  inference(forward_demodulation,[],[f44585,f270])).
fof(f44585,plain,(
  ( ! [X78,X76,X74,X72,X71,X79,X77,X75,X73] : (s(bool,'const.bool.DATATYPE_1'(s(X78,X79))) = s(bool,happ(s(fun('type.wordSem.word_loc'(X71),bool),X74),s('type.wordSem.word_loc'(X71),X72))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X71),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X71),X72))),s(fun('type.wordSem.word_loc'(X71),bool),X73),s(fun('type.wordSem.word_loc'(X71),bool),X74),s(fun('type.wordSem.word_loc'(X71),bool),X75),s(bool,X76),s(bool,X77)))) )),
  inference(superposition,[],[f329,f1071])).
fof(f44584,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X63),bool),X66),s('type.wordSem.word_loc'(X63),X64))) | s(bool,X70) = s(bool,'const.bool.DATATYPE_1'(s(bool,X70))) | s(bool,X70) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X63),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X63),X64))),s(fun('type.wordSem.word_loc'(X63),bool),X65),s(fun('type.wordSem.word_loc'(X63),bool),X66),s(fun('type.wordSem.word_loc'(X63),bool),X67),s(bool,X68),s(bool,X69)))) )),
  inference(superposition,[],[f329,f742])).
fof(f44583,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s(bool,X62) = s(bool,happ(s(fun('type.wordSem.word_loc'(X55),bool),X58),s('type.wordSem.word_loc'(X55),X56))) | s(bool,X62) = s(bool,'const.bool.DATATYPE_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X55),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X55),X56))),s(fun('type.wordSem.word_loc'(X55),bool),X57),s(fun('type.wordSem.word_loc'(X55),bool),X58),s(fun('type.wordSem.word_loc'(X55),bool),X59),s(bool,X60),s(bool,X61)))) )),
  inference(superposition,[],[f329,f742])).
fof(f44579,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun('type.wordSem.word_loc'(X23),bool),X26),s('type.wordSem.word_loc'(X23),X24))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X23),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X23),X24))),s(fun('type.wordSem.word_loc'(X23),bool),X25),s(fun('type.wordSem.word_loc'(X23),bool),X26),s(fun('type.wordSem.word_loc'(X23),bool),X27),s(bool,X28),s(bool,X29)))) )),
  inference(superposition,[],[f329,f365])).
fof(f44578,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X15),bool),X18),s('type.wordSem.word_loc'(X15),X16))) | s(bool,X22) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X15),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X15),X16))),s(fun('type.wordSem.word_loc'(X15),bool),X17),s(fun('type.wordSem.word_loc'(X15),bool),X18),s(fun('type.wordSem.word_loc'(X15),bool),X19),s(bool,X20),s(bool,X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f329,f365])).
fof(f44577,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X8),bool),X11),s('type.wordSem.word_loc'(X8),X9))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X8),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X8),X9))),s(fun('type.wordSem.word_loc'(X8),bool),X10),s(fun('type.wordSem.word_loc'(X8),bool),X11),s(fun('type.wordSem.word_loc'(X8),bool),X12),s(bool,X13),s(bool,X14)))) )),
  inference(superposition,[],[f329,f242])).
fof(f42903,plain,(
  ( ! [X191,X192] : (s(bool,X191) = s(bool,'const.bool.DATATYPE_1'(s(bool,X191))) | s(bool,X192) = s(bool,'const.bool.DATATYPE_1'(s(bool,X192))) | s(bool,X191) = s(bool,X192)) )),
  inference(superposition,[],[f270,f742])).
fof(f43119,plain,(
  ( ! [X613,X615,X612,X614] : (s(X614,f(s(bool,'T_0'))) != s(X614,g(s(bool,'T_0'))) | s(fun(bool,X614),X612) = s(fun(bool,X614),X613) | s(bool,X615) = s(bool,'const.bool.DATATYPE_1'(s(bool,X615))) | s(bool,X615) = s(bool,sK9(X612,X613,X614,bool))) )),
  inference(superposition,[],[f322,f742])).
fof(f43101,plain,(
  ( ! [X516,X518,X517,X519] : (s(bool,'T_0') != s(bool,f(s(X516,sK9(X517,X518,bool,X516)))) | s(fun(X516,bool),X517) = s(fun(X516,bool),X518) | s(bool,X519) = s(bool,'const.bool.DATATYPE_1'(s(bool,X519))) | s(bool,X519) = s(bool,g(s(X516,sK9(X517,X518,bool,X516))))) )),
  inference(superposition,[],[f322,f742])).
fof(f44273,plain,(
  ( ! [X364,X360,X362,X361,X363] : (s('type.fcp.cart'(bool,X363),X362) = s('type.fcp.cart'(bool,X363),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X364) = s(bool,'const.bool.DATATYPE_1'(s(bool,X364))) | s(bool,X364) = s(bool,sK4(X360,X361,X362,X363))) )),
  inference(subsumption_resolution,[],[f43063,f235])).
fof(f43063,plain,(
  ( ! [X364,X360,X362,X361,X363] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X363),X362) = s('type.fcp.cart'(bool,X363),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X364) = s(bool,'const.bool.DATATYPE_1'(s(bool,X364))) | s(bool,X364) = s(bool,sK4(X360,X361,X362,X363))) )),
  inference(superposition,[],[f301,f742])).
fof(f44260,plain,(
  ( ! [X243,X241,X244,X242] : (s(X241,X242) = s(X241,X243) | s(bool,X244) = s(bool,'const.bool.DATATYPE_1'(s(bool,X244))) | s(bool,X244) = s(bool,happ(s(fun(X241,bool),happ(s(fun(X241,fun(X241,bool)),'=_0'),s(X241,X242))),s(X241,X243)))) )),
  inference(subsumption_resolution,[],[f43028,f235])).
fof(f43028,plain,(
  ( ! [X243,X241,X244,X242] : (~p(s(bool,'T_0')) | s(X241,X242) = s(X241,X243) | s(bool,X244) = s(bool,'const.bool.DATATYPE_1'(s(bool,X244))) | s(bool,X244) = s(bool,happ(s(fun(X241,bool),happ(s(fun(X241,fun(X241,bool)),'=_0'),s(X241,X242))),s(X241,X243)))) )),
  inference(superposition,[],[f330,f742])).
fof(f44234,plain,(
  ( ! [X52,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,'const.bool.DATATYPE_1'(s(bool,X53))) | s(bool,X51) = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f42950,f235])).
fof(f42950,plain,(
  ( ! [X52,X53,X51] : (~p(s(bool,'T_0')) | s(bool,X51) != s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,'const.bool.DATATYPE_1'(s(bool,X53))) | s(bool,X51) = s(bool,X53)) )),
  inference(superposition,[],[f368,f742])).
fof(f42931,plain,(
  ( ! [X323,X324] : (s(bool,X323) = s(bool,happ(s(fun(bool,bool),sK7('!_1',fun(bool,bool))),s(bool,X323))) | s(bool,X324) = s(bool,'const.bool.DATATYPE_1'(s(bool,X324))) | s(bool,X323) = s(bool,X324)) )),
  inference(superposition,[],[f33563,f742])).
fof(f42930,plain,(
  ( ! [X321,X322] : (s(bool,X321) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X321))))) | s(bool,X322) = s(bool,'const.bool.DATATYPE_1'(s(bool,X322))) | s(bool,X321) = s(bool,X322)) )),
  inference(superposition,[],[f13113,f742])).
fof(f42895,plain,(
  ( ! [X146,X147] : (s(bool,X146) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X146))))) | s(bool,X147) = s(bool,'const.bool.DATATYPE_1'(s(bool,X147))) | s(bool,X146) = s(bool,X147)) )),
  inference(superposition,[],[f3728,f742])).
fof(f42863,plain,(
  ( ! [X50,X48,X49] : (s(bool,X48) = s(bool,happ(s(fun(fun(X49,bool),bool),'!_1'),s(fun(X49,bool),'_dst_x0_1'(s(bool,X48))))) | s(bool,X50) = s(bool,'const.bool.DATATYPE_1'(s(bool,X50))) | s(bool,X48) = s(bool,X50)) )),
  inference(superposition,[],[f32095,f742])).
fof(f42859,plain,(
  ( ! [X37,X38,X36] : (s(bool,X36) = s(bool,happ(s(fun(fun(X37,bool),bool),'?_1'),s(fun(X37,bool),'_dst_x0_1'(s(bool,X36))))) | s(bool,X38) = s(bool,'const.bool.DATATYPE_1'(s(bool,X38))) | s(bool,X36) = s(bool,X38)) )),
  inference(superposition,[],[f21706,f742])).
fof(f42857,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X26))))) | s(bool,X27) = s(bool,'const.bool.DATATYPE_1'(s(bool,X27))) | s(bool,X26) = s(bool,X27)) )),
  inference(superposition,[],[f3001,f742])).
fof(f42856,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,X23) != s(bool,'|dollar|exists_1'(s(fun(X24,bool),'_dst_x0_1'(s(bool,X22))))) | s(bool,'T_0') = s(bool,X23) | s(bool,X25) = s(bool,'const.bool.DATATYPE_1'(s(bool,X25))) | s(bool,X22) = s(bool,X25)) )),
  inference(superposition,[],[f2082,f742])).
fof(f42855,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X19) = s(bool,'|dollar|exists_1'(s(fun(X20,bool),'_dst_x0_1'(s(bool,X18))))) | s(bool,'F_0') = s(bool,X19) | s(bool,X21) = s(bool,'const.bool.DATATYPE_1'(s(bool,X21))) | s(bool,X18) = s(bool,X21)) )),
  inference(superposition,[],[f1997,f742])).
fof(f42854,plain,(
  ( ! [X17,X15,X16] : (s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(X16,bool),'_dst_x0_1'(s(bool,X15))))) | s(bool,X17) = s(bool,'const.bool.DATATYPE_1'(s(bool,X17))) | s(bool,X15) = s(bool,X17)) )),
  inference(superposition,[],[f1960,f742])).
fof(f42853,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) != s(bool,X12) | s(bool,X12) = s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,X14) = s(bool,'const.bool.DATATYPE_1'(s(bool,X14))) | s(bool,X11) = s(bool,X14)) )),
  inference(superposition,[],[f1400,f742])).
fof(f42849,plain,(
  ( ! [X660,X662,X661,X659] : (s(X661,f(s(bool,X662))) != s(X661,g(s(bool,X662))) | s(fun(bool,X661),X659) = s(fun(bool,X661),X660) | s(bool,X662) = s(bool,'const.bool.DATATYPE_1'(s(bool,X662))) | s(bool,'T_0') = s(bool,sK9(X659,X660,X661,bool))) )),
  inference(superposition,[],[f322,f742])).
fof(f42831,plain,(
  ( ! [X565,X563,X564,X562] : (s(bool,X565) != s(bool,f(s(X562,sK9(X563,X564,bool,X562)))) | s(fun(X562,bool),X563) = s(fun(X562,bool),X564) | s(bool,X565) = s(bool,'const.bool.DATATYPE_1'(s(bool,X565))) | s(bool,'T_0') = s(bool,g(s(X562,sK9(X563,X564,bool,X562))))) )),
  inference(superposition,[],[f322,f742])).
fof(f44066,plain,(
  ( ! [X222] : (s(bool,'T_0') != s(bool,X222) | s(bool,X222) = s(bool,'const.bool.DATATYPE_1'(s(bool,X222)))) )),
  inference(subsumption_resolution,[],[f42711,f350])).
fof(f42711,plain,(
  ( ! [X222] : (s(bool,'T_0') != s(bool,X222) | s(bool,X222) = s(bool,'const.bool.DATATYPE_1'(s(bool,X222))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f350,f742])).
fof(f43737,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') != s(bool,X16) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f43736,f235])).
fof(f43736,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X16) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(forward_demodulation,[],[f42308,f270])).
fof(f42308,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') != s(bool,X16) | ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X16)))) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f249,f742])).
fof(f42300,plain,(
  ( ! [X222,X223,X221] : (s(bool,'T_0') = s(bool,X221) | s(bool,X223) = s(bool,'const.bool.DATATYPE_1'(s(bool,X223))) | s(bool,X223) = s(bool,sK3(X221,X222,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X222)))) )),
  inference(superposition,[],[f742,f565])).
fof(f42299,plain,(
  ( ! [X218,X216,X220,X215,X219,X217] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X219),s('type.num.num',X216))),s('type.num.num',X217))) | s(bool,X220) = s(bool,'const.bool.DATATYPE_1'(s(bool,X220))) | s(bool,X220) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X215),'const.wordSem.Loc_2'(s('type.num.num',X216),s('type.num.num',X217))),s(fun('type.fcp.cart'(bool,X215),bool),X218),s(fun('type.num.num',fun('type.num.num',bool)),X219)))) )),
  inference(superposition,[],[f742,f324])).
fof(f42298,plain,(
  ( ! [X212,X210,X213,X211,X214] : (s(bool,'T_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,X210),bool),X212),s('type.fcp.cart'(bool,X210),X211))) | s(bool,X214) = s(bool,'const.bool.DATATYPE_1'(s(bool,X214))) | s(bool,X214) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X210),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X210),X211))),s(fun('type.fcp.cart'(bool,X210),bool),X212),s(fun('type.num.num',fun('type.num.num',bool)),X213)))) )),
  inference(superposition,[],[f742,f323])).
fof(f42297,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X202),bool),X204),s('type.wordSem.word_loc'(X202),X203))) | s(bool,X209) = s(bool,'const.bool.DATATYPE_1'(s(bool,X209))) | s(bool,X209) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X202),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X202),X203))),s(fun('type.wordSem.word_loc'(X202),bool),X204),s(fun('type.wordSem.word_loc'(X202),bool),X205),s(fun('type.wordSem.word_loc'(X202),bool),X206),s(bool,X207),s(bool,X208)))) )),
  inference(superposition,[],[f742,f328])).
fof(f42296,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195,X201] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X194),bool),X198),s('type.wordSem.word_loc'(X194),X195))) | s(bool,X201) = s(bool,'const.bool.DATATYPE_1'(s(bool,X201))) | s(bool,X201) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X194),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X194),X195))),s(fun('type.wordSem.word_loc'(X194),bool),X196),s(fun('type.wordSem.word_loc'(X194),bool),X197),s(fun('type.wordSem.word_loc'(X194),bool),X198),s(bool,X199),s(bool,X200)))) )),
  inference(superposition,[],[f742,f327])).
fof(f42295,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X193] : (s(bool,'T_0') = s(bool,X191) | s(bool,X193) = s(bool,'const.bool.DATATYPE_1'(s(bool,X193))) | s(bool,X193) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X187),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X187),bool),X188),s(fun('type.wordSem.word_loc'(X187),bool),X189),s(fun('type.wordSem.word_loc'(X187),bool),X190),s(bool,X191),s(bool,X192)))) )),
  inference(superposition,[],[f742,f326])).
fof(f42294,plain,(
  ( ! [X185,X182,X180,X186,X184,X183,X181] : (s(bool,'T_0') = s(bool,X185) | s(bool,X186) = s(bool,'const.bool.DATATYPE_1'(s(bool,X186))) | s(bool,X186) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X180),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X180),bool),X181),s(fun('type.wordSem.word_loc'(X180),bool),X182),s(fun('type.wordSem.word_loc'(X180),bool),X183),s(bool,X184),s(bool,X185)))) )),
  inference(superposition,[],[f742,f325])).
fof(f42293,plain,(
  ( ! [X177,X178,X176,X179] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X177),s('type.num.num',X178))) | s(bool,X179) = s(bool,'const.bool.DATATYPE_1'(s(bool,X179))) | s(bool,X179) = s(bool,'const.ind_type.FCONS_3'(s(bool,X176),s(fun('type.num.num',bool),X177),s('type.num.num','const.num.SUC_1'(s('type.num.num',X178)))))) )),
  inference(superposition,[],[f742,f298])).
fof(f42292,plain,(
  ( ! [X175,X173,X174] : (s(bool,'T_0') = s(bool,X173) | s(bool,X175) = s(bool,'const.bool.DATATYPE_1'(s(bool,X175))) | s(bool,X175) = s(bool,'const.ind_type.FCONS_3'(s(bool,X173),s(fun('type.num.num',bool),X174),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f742,f284])).
fof(f42291,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,'T_0') = s(bool,happ(s(fun(X169,bool),X171),s(X169,X170))) | s(bool,X172) = s(bool,'const.bool.DATATYPE_1'(s(bool,X172))) | s(bool,X172) = s(bool,happ(s(fun(fun(X169,bool),bool),'_dstsel_0_x0_1'(s(X169,X170))),s(fun(X169,bool),X171)))) )),
  inference(superposition,[],[f742,f321])).
fof(f42289,plain,(
  ( ! [X161,X159,X162,X160] : (s(bool,'T_0') = s(bool,X160) | s(bool,X162) = s(bool,'const.bool.DATATYPE_1'(s(bool,X162))) | s(bool,X162) = s(bool,happ(s(fun(X159,bool),'_dst_x0_1'(s(bool,X160))),s(X159,X161)))) )),
  inference(superposition,[],[f742,f320])).
fof(f42233,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.bool.DATATYPE_1'(s(bool,X6))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f742,f365])).
fof(f42232,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.DATATYPE_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.bool.DATATYPE_1'(s(bool,X3))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f742,f742])).
fof(f42231,plain,(
  ( ! [X265,X267,X266] : (s(bool,X265) = s(bool,X267) | s(bool,X267) = s(bool,'const.bool.DATATYPE_1'(s(bool,X267))) | s(bool,'T_0') = s(bool,sK3(X265,X266,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X266)))) )),
  inference(superposition,[],[f742,f565])).
fof(f42230,plain,(
  ( ! [X261,X263,X259,X260,X262,X264] : (s(bool,X264) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X263),s('type.num.num',X260))),s('type.num.num',X261))) | s(bool,X264) = s(bool,'const.bool.DATATYPE_1'(s(bool,X264))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X259),'const.wordSem.Loc_2'(s('type.num.num',X260),s('type.num.num',X261))),s(fun('type.fcp.cart'(bool,X259),bool),X262),s(fun('type.num.num',fun('type.num.num',bool)),X263)))) )),
  inference(superposition,[],[f742,f324])).
fof(f42229,plain,(
  ( ! [X255,X257,X254,X256,X258] : (s(bool,X258) = s(bool,happ(s(fun('type.fcp.cart'(bool,X254),bool),X256),s('type.fcp.cart'(bool,X254),X255))) | s(bool,X258) = s(bool,'const.bool.DATATYPE_1'(s(bool,X258))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X254),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X254),X255))),s(fun('type.fcp.cart'(bool,X254),bool),X256),s(fun('type.num.num',fun('type.num.num',bool)),X257)))) )),
  inference(superposition,[],[f742,f323])).
fof(f42228,plain,(
  ( ! [X253,X251,X249,X246,X252,X250,X248,X247] : (s(bool,X253) = s(bool,happ(s(fun('type.wordSem.word_loc'(X246),bool),X248),s('type.wordSem.word_loc'(X246),X247))) | s(bool,X253) = s(bool,'const.bool.DATATYPE_1'(s(bool,X253))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X246),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X246),X247))),s(fun('type.wordSem.word_loc'(X246),bool),X248),s(fun('type.wordSem.word_loc'(X246),bool),X249),s(fun('type.wordSem.word_loc'(X246),bool),X250),s(bool,X251),s(bool,X252)))) )),
  inference(superposition,[],[f742,f328])).
fof(f42227,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (s(bool,X245) = s(bool,happ(s(fun('type.wordSem.word_loc'(X238),bool),X242),s('type.wordSem.word_loc'(X238),X239))) | s(bool,X245) = s(bool,'const.bool.DATATYPE_1'(s(bool,X245))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X238),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X238),X239))),s(fun('type.wordSem.word_loc'(X238),bool),X240),s(fun('type.wordSem.word_loc'(X238),bool),X241),s(fun('type.wordSem.word_loc'(X238),bool),X242),s(bool,X243),s(bool,X244)))) )),
  inference(superposition,[],[f742,f327])).
fof(f42226,plain,(
  ( ! [X231,X237,X235,X233,X236,X234,X232] : (s(bool,X235) = s(bool,X237) | s(bool,X237) = s(bool,'const.bool.DATATYPE_1'(s(bool,X237))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X231),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X231),bool),X232),s(fun('type.wordSem.word_loc'(X231),bool),X233),s(fun('type.wordSem.word_loc'(X231),bool),X234),s(bool,X235),s(bool,X236)))) )),
  inference(superposition,[],[f742,f326])).
fof(f42225,plain,(
  ( ! [X229,X227,X225,X230,X228,X226,X224] : (s(bool,X229) = s(bool,X230) | s(bool,X230) = s(bool,'const.bool.DATATYPE_1'(s(bool,X230))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X224),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X224),bool),X225),s(fun('type.wordSem.word_loc'(X224),bool),X226),s(fun('type.wordSem.word_loc'(X224),bool),X227),s(bool,X228),s(bool,X229)))) )),
  inference(superposition,[],[f742,f325])).
fof(f42224,plain,(
  ( ! [X222,X220,X223,X221] : (s(bool,X223) = s(bool,happ(s(fun('type.num.num',bool),X221),s('type.num.num',X222))) | s(bool,X223) = s(bool,'const.bool.DATATYPE_1'(s(bool,X223))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X220),s(fun('type.num.num',bool),X221),s('type.num.num','const.num.SUC_1'(s('type.num.num',X222)))))) )),
  inference(superposition,[],[f742,f298])).
fof(f42223,plain,(
  ( ! [X218,X219,X217] : (s(bool,X217) = s(bool,X219) | s(bool,X219) = s(bool,'const.bool.DATATYPE_1'(s(bool,X219))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X217),s(fun('type.num.num',bool),X218),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f742,f284])).
fof(f42222,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,X216) = s(bool,happ(s(fun(X213,bool),X215),s(X213,X214))) | s(bool,X216) = s(bool,'const.bool.DATATYPE_1'(s(bool,X216))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X213,bool),bool),'_dstsel_0_x0_1'(s(X213,X214))),s(fun(X213,bool),X215)))) )),
  inference(superposition,[],[f742,f321])).
fof(f42221,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (s(bool,X212) = s(bool,happ(s(fun(X208,bool),happ(s(fun(X207,fun(X208,bool)),X209),s(X207,X211))),s(X208,X210))) | s(bool,X212) = s(bool,'const.bool.DATATYPE_1'(s(bool,X212))) | s(bool,'T_0') = s(bool,happ(s(fun(X207,bool),'_dst_x1x0_2'(s(fun(X207,fun(X208,bool)),X209),s(X208,X210))),s(X207,X211)))) )),
  inference(superposition,[],[f742,f334])).
fof(f42220,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,X204) = s(bool,X206) | s(bool,X206) = s(bool,'const.bool.DATATYPE_1'(s(bool,X206))) | s(bool,'T_0') = s(bool,happ(s(fun(X203,bool),'_dst_x0_1'(s(bool,X204))),s(X203,X205)))) )),
  inference(superposition,[],[f742,f320])).
fof(f42219,plain,(
  ( ! [X198,X202,X200,X199,X197,X201] : (s(bool,X202) = s(bool,happ(s(fun(X198,bool),'_dst_x1x0_2'(s(fun(X198,fun(X197,bool)),X199),s(X197,X201))),s(X198,X200))) | s(bool,X202) = s(bool,'const.bool.DATATYPE_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,happ(s(fun(X197,bool),happ(s(fun(X198,fun(X197,bool)),X199),s(X198,X200))),s(X197,X201)))) )),
  inference(superposition,[],[f742,f334])).
fof(f42218,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s(bool,X196) = s(bool,happ(s(fun(X192,bool),X193),s(X192,happ(s(fun(X191,X192),X194),s(X191,X195))))) | s(bool,X196) = s(bool,'const.bool.DATATYPE_1'(s(bool,X196))) | s(bool,'T_0') = s(bool,happ(s(fun(X191,bool),'_dst_x0x1_2'(s(fun(X192,bool),X193),s(fun(X191,X192),X194))),s(X191,X195)))) )),
  inference(superposition,[],[f742,f333])).
fof(f42217,plain,(
  ( ! [X189,X187,X185,X190,X188,X186] : (s(bool,X190) = s(bool,happ(s(fun(X187,bool),'_dst_x0x1_2'(s(fun(X185,bool),X186),s(fun(X187,X185),X188))),s(X187,X189))) | s(bool,X190) = s(bool,'const.bool.DATATYPE_1'(s(bool,X190))) | s(bool,'T_0') = s(bool,happ(s(fun(X185,bool),X186),s(X185,happ(s(fun(X187,X185),X188),s(X187,X189)))))) )),
  inference(superposition,[],[f742,f333])).
fof(f42216,plain,(
  ( ! [X184,X183] : (s(bool,X183) = s(bool,X184) | s(bool,X184) = s(bool,'const.bool.DATATYPE_1'(s(bool,X184))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X183)))) )),
  inference(superposition,[],[f742,f271])).
fof(f43657,plain,(
  ( ! [X74,X72,X73] : (s(bool,X72) = s(bool,X73) | s(bool,X73) = s(bool,'const.bool.DATATYPE_1'(s(bool,X73))) | s(bool,X72) = s(bool,X74) | s(bool,'F_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f42162,f350])).
fof(f42162,plain,(
  ( ! [X74,X72,X73] : (s(bool,X72) = s(bool,X73) | s(bool,X73) = s(bool,'const.bool.DATATYPE_1'(s(bool,X73))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X72) = s(bool,X74) | s(bool,'F_0') = s(bool,X74)) )),
  inference(superposition,[],[f742,f1108])).
fof(f43517,plain,(
  ( ! [X72,X71,X73] : (s(bool,X71) = s(bool,'|dollar|exists_1'(s(fun(X72,bool),sK7('!_1',fun(X72,bool))))) | s(bool,X71) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f43516,f350])).
fof(f43516,plain,(
  ( ! [X72,X71,X73] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X71) = s(bool,'|dollar|exists_1'(s(fun(X72,bool),sK7('!_1',fun(X72,bool))))) | s(bool,X71) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(forward_demodulation,[],[f42037,f270])).
fof(f42037,plain,(
  ( ! [X72,X71,X73] : (s(bool,X71) = s(bool,'|dollar|exists_1'(s(fun(X72,bool),sK7('!_1',fun(X72,bool))))) | s(bool,X71) = s(bool,X73) | s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X71)))) )),
  inference(superposition,[],[f742,f33864])).
fof(f43515,plain,(
  ( ! [X70,X68,X69] : (s(bool,X68) = s(bool,'|dollar|exists_1'(s(fun(fun(X69,bool),bool),'!_1'))) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f43514,f350])).
fof(f43514,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X68) = s(bool,'|dollar|exists_1'(s(fun(fun(X69,bool),bool),'!_1'))) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(forward_demodulation,[],[f42036,f270])).
fof(f42036,plain,(
  ( ! [X70,X68,X69] : (s(bool,X68) = s(bool,'|dollar|exists_1'(s(fun(fun(X69,bool),bool),'!_1'))) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X68)))) )),
  inference(superposition,[],[f742,f32297])).
fof(f43511,plain,(
  ( ! [X61,X62,X63] : (s(bool,X61) = s(bool,'|dollar|exists_1'(s(fun(X62,bool),sK7('?_1',fun(X62,bool))))) | s(bool,X61) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(subsumption_resolution,[],[f43510,f350])).
fof(f43510,plain,(
  ( ! [X61,X62,X63] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X61) = s(bool,'|dollar|exists_1'(s(fun(X62,bool),sK7('?_1',fun(X62,bool))))) | s(bool,X61) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(forward_demodulation,[],[f42033,f270])).
fof(f42033,plain,(
  ( ! [X61,X62,X63] : (s(bool,X61) = s(bool,'|dollar|exists_1'(s(fun(X62,bool),sK7('?_1',fun(X62,bool))))) | s(bool,X61) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X61)))) )),
  inference(superposition,[],[f742,f23772])).
fof(f43509,plain,(
  ( ! [X59,X60,X58] : (s(bool,X58) = s(bool,'|dollar|exists_1'(s(fun(fun(X59,bool),bool),'?_1'))) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f43508,f350])).
fof(f43508,plain,(
  ( ! [X59,X60,X58] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X58) = s(bool,'|dollar|exists_1'(s(fun(fun(X59,bool),bool),'?_1'))) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(forward_demodulation,[],[f42032,f270])).
fof(f42032,plain,(
  ( ! [X59,X60,X58] : (s(bool,X58) = s(bool,'|dollar|exists_1'(s(fun(fun(X59,bool),bool),'?_1'))) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X58)))) )),
  inference(superposition,[],[f742,f21893])).
fof(f43504,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) = s(bool,'|dollar|exists_1'(s(fun(X48,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f43503,f350])).
fof(f43503,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X47) = s(bool,'|dollar|exists_1'(s(fun(X48,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(forward_demodulation,[],[f42027,f270])).
fof(f42027,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) = s(bool,'|dollar|exists_1'(s(fun(X48,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X47)))) )),
  inference(superposition,[],[f742,f1997])).
fof(f43498,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X31) = s(bool,'const.bool.DATATYPE_1'(s(X32,X33))) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f43497,f350])).
fof(f43497,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X31) = s(bool,'const.bool.DATATYPE_1'(s(X32,X33))) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(forward_demodulation,[],[f42022,f270])).
fof(f42022,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X31) = s(bool,'const.bool.DATATYPE_1'(s(X32,X33))) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X31)))) )),
  inference(superposition,[],[f742,f1071])).
fof(f41617,plain,(
  ( ! [X1500,X1492,X1494,X1497,X1499,X1501,X1493,X1495,X1496,X1498] : (s('type.fcp.cart'(bool,X1492),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1492),happ(s(fun('type.wordSem.word_loc'(X1493),'type.fcp.cart'(bool,X1492)),X1495),s('type.wordSem.word_loc'(X1493),X1494))) | p(s(bool,sK4(X1500,X1501,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1493),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1493),X1494))),s(fun('type.wordSem.word_loc'(X1493),'type.fcp.cart'(bool,X1492)),X1495),s(fun('type.wordSem.word_loc'(X1493),'type.fcp.cart'(bool,X1492)),X1496),s(fun('type.wordSem.word_loc'(X1493),'type.fcp.cart'(bool,X1492)),X1497),s('type.fcp.cart'(bool,X1492),X1498),s('type.fcp.cart'(bool,X1492),X1499)),X1492)))) )),
  inference(superposition,[],[f302,f328])).
fof(f41724,plain,(
  ( ! [X1480,X1472,X1474,X1476,X1478,X1473,X1475,X1477,X1479,X1471] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1479,X1480,happ(s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1474),s('type.wordSem.word_loc'(X1472),X1473)),X1471)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1479,X1480,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1472),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1472),X1473))),s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1474),s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1475),s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1476),s('type.fcp.cart'(bool,X1471),X1477),s('type.fcp.cart'(bool,X1471),X1478)),X1471)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f41615,f303])).
fof(f41615,plain,(
  ( ! [X1480,X1472,X1474,X1476,X1478,X1473,X1475,X1477,X1479,X1471] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1471),'const.wordSem.Loc_2'(s('type.num.num',X1479),s('type.num.num',X1480))),s('type.wordSem.word_loc'(X1471),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1471),happ(s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1474),s('type.wordSem.word_loc'(X1472),X1473))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1479,X1480,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1472),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1472),X1473))),s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1474),s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1475),s(fun('type.wordSem.word_loc'(X1472),'type.fcp.cart'(bool,X1471)),X1476),s('type.fcp.cart'(bool,X1471),X1477),s('type.fcp.cart'(bool,X1471),X1478)),X1471)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f328])).
fof(f41723,plain,(
  ( ! [X1457,X1459,X1451,X1453,X1455,X1456,X1458,X1460,X1452,X1454] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1453),s('type.wordSem.word_loc'(X1451),X1452)),X1458,X1459,X1460)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1451),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1451),X1452))),s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1453),s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1454),s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1455),s('type.num.num',X1456),s('type.num.num',X1457)),X1458,X1459,X1460)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f41613,f303])).
fof(f41613,plain,(
  ( ! [X1457,X1459,X1451,X1453,X1455,X1456,X1458,X1460,X1452,X1454] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1460),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1453),s('type.wordSem.word_loc'(X1451),X1452))),s('type.num.num',X1458))),s('type.wordSem.word_loc'(X1460),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1460),X1459))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1451),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1451),X1452))),s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1453),s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1454),s(fun('type.wordSem.word_loc'(X1451),'type.num.num'),X1455),s('type.num.num',X1456),s('type.num.num',X1457)),X1458,X1459,X1460)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f328])).
fof(f41722,plain,(
  ( ! [X1449,X1441,X1443,X1445,X1447,X1448,X1450,X1442,X1444,X1446] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1448,happ(s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1443),s('type.wordSem.word_loc'(X1441),X1442)),X1449,X1450)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1448,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1441),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1441),X1442))),s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1443),s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1444),s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1445),s('type.num.num',X1446),s('type.num.num',X1447)),X1449,X1450)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f41612,f303])).
fof(f41612,plain,(
  ( ! [X1449,X1441,X1443,X1445,X1447,X1448,X1450,X1442,X1444,X1446] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1450),'const.wordSem.Loc_2'(s('type.num.num',X1448),s('type.num.num',happ(s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1443),s('type.wordSem.word_loc'(X1441),X1442))))),s('type.wordSem.word_loc'(X1450),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1450),X1449))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1448,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1441),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1441),X1442))),s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1443),s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1444),s(fun('type.wordSem.word_loc'(X1441),'type.num.num'),X1445),s('type.num.num',X1446),s('type.num.num',X1447)),X1449,X1450)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f328])).
fof(f41601,plain,(
  ( ! [X1331,X1333,X1335,X1336,X1338,X1332,X1334,X1337,X1339] : (s('type.stackSem.result'(X1331),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1331),X1339))) != s('type.stackSem.result'(X1331),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1331),happ(s(fun('type.wordSem.word_loc'(X1332),'type.wordSem.word_loc'(X1331)),X1334),s('type.wordSem.word_loc'(X1332),X1333))))) | s('type.wordSem.word_loc'(X1331),X1339) = s('type.wordSem.word_loc'(X1331),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1332),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1332),X1333))),s(fun('type.wordSem.word_loc'(X1332),'type.wordSem.word_loc'(X1331)),X1334),s(fun('type.wordSem.word_loc'(X1332),'type.wordSem.word_loc'(X1331)),X1335),s(fun('type.wordSem.word_loc'(X1332),'type.wordSem.word_loc'(X1331)),X1336),s('type.wordSem.word_loc'(X1331),X1337),s('type.wordSem.word_loc'(X1331),X1338)))) )),
  inference(superposition,[],[f294,f328])).
fof(f41597,plain,(
  ( ! [X1296,X1298,X1300,X1302,X1297,X1299,X1301,X1303,X1295] : (s('type.stackSem.result'(X1295),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1295),X1303))) != s('type.stackSem.result'(X1295),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1295),happ(s(fun('type.wordSem.word_loc'(X1296),'type.wordSem.word_loc'(X1295)),X1298),s('type.wordSem.word_loc'(X1296),X1297))))) | s('type.wordSem.word_loc'(X1295),X1303) = s('type.wordSem.word_loc'(X1295),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1296),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1296),X1297))),s(fun('type.wordSem.word_loc'(X1296),'type.wordSem.word_loc'(X1295)),X1298),s(fun('type.wordSem.word_loc'(X1296),'type.wordSem.word_loc'(X1295)),X1299),s(fun('type.wordSem.word_loc'(X1296),'type.wordSem.word_loc'(X1295)),X1300),s('type.wordSem.word_loc'(X1295),X1301),s('type.wordSem.word_loc'(X1295),X1302)))) )),
  inference(superposition,[],[f292,f328])).
fof(f41593,plain,(
  ( ! [X1267,X1265,X1262,X1260,X1266,X1264,X1259,X1263,X1261] : (s('type.stackSem.result'(X1259),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1259),X1267))) != s('type.stackSem.result'(X1259),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1259),happ(s(fun('type.wordSem.word_loc'(X1260),'type.wordSem.word_loc'(X1259)),X1262),s('type.wordSem.word_loc'(X1260),X1261))))) | s('type.wordSem.word_loc'(X1259),X1267) = s('type.wordSem.word_loc'(X1259),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1260),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1260),X1261))),s(fun('type.wordSem.word_loc'(X1260),'type.wordSem.word_loc'(X1259)),X1262),s(fun('type.wordSem.word_loc'(X1260),'type.wordSem.word_loc'(X1259)),X1263),s(fun('type.wordSem.word_loc'(X1260),'type.wordSem.word_loc'(X1259)),X1264),s('type.wordSem.word_loc'(X1259),X1265),s('type.wordSem.word_loc'(X1259),X1266)))) )),
  inference(superposition,[],[f290,f328])).
fof(f41584,plain,(
  ( ! [X1186,X1190,X1188,X1187,X1185,X1191,X1189] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(X1185),'type.wordSem.word_loc'(sK0)),X1187),s('type.wordSem.word_loc'(X1185),X1186))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1185),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1185),X1186))),s(fun('type.wordSem.word_loc'(X1185),'type.wordSem.word_loc'(sK0)),X1187),s(fun('type.wordSem.word_loc'(X1185),'type.wordSem.word_loc'(sK0)),X1188),s(fun('type.wordSem.word_loc'(X1185),'type.wordSem.word_loc'(sK0)),X1189),s('type.wordSem.word_loc'(sK0),X1190),s('type.wordSem.word_loc'(sK0),X1191)))) )),
  inference(superposition,[],[f2643,f328])).
fof(f41580,plain,(
  ( ! [X1155,X1153,X1159,X1157,X1160,X1154,X1158,X1156] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(X1153),'type.wordSem.word_loc'(sK0)),X1155),s('type.wordSem.word_loc'(X1153),X1154))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1153),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1153),X1154))),s(fun('type.wordSem.word_loc'(X1153),'type.wordSem.word_loc'(sK0)),X1155),s(fun('type.wordSem.word_loc'(X1153),'type.wordSem.word_loc'(sK0)),X1156),s(fun('type.wordSem.word_loc'(X1153),'type.wordSem.word_loc'(sK0)),X1157),s('type.wordSem.word_loc'(sK0),X1158),s('type.wordSem.word_loc'(sK0),X1159)),X1160,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1160)))) )),
  inference(superposition,[],[f2654,f328])).
fof(f41557,plain,(
  ( ! [X893,X887,X890,X888,X894,X892,X886,X891,X889] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X886,bool),happ(s(fun('type.wordSem.word_loc'(X887),fun(X886,bool)),X889),s('type.wordSem.word_loc'(X887),X888))))) | s(X886,X894) = s(X886,sK3(X894,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X887),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X887),X888))),s(fun('type.wordSem.word_loc'(X887),fun(X886,bool)),X889),s(fun('type.wordSem.word_loc'(X887),fun(X886,bool)),X890),s(fun('type.wordSem.word_loc'(X887),fun(X886,bool)),X891),s(fun(X886,bool),X892),s(fun(X886,bool),X893)),X886))) )),
  inference(superposition,[],[f565,f328])).
fof(f41709,plain,(
  ( ! [X874,X872,X876,X870,X875,X873,X871,X869] : (p(s(bool,happ(s(fun(X869,bool),happ(s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X872),s('type.wordSem.word_loc'(X870),X871))),s(X869,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X870),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X870),X871))),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X872),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X873),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X874),s(fun(X869,bool),X875),s(fun(X869,bool),X876)),X869))))) | ~p(s(bool,happ(s(fun(fun(X869,bool),bool),'?_1'),s(fun(X869,bool),happ(s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X872),s('type.wordSem.word_loc'(X870),X871))))))) )),
  inference(forward_demodulation,[],[f41555,f328])).
fof(f41555,plain,(
  ( ! [X874,X872,X876,X870,X875,X873,X871,X869] : (~p(s(bool,happ(s(fun(fun(X869,bool),bool),'?_1'),s(fun(X869,bool),happ(s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X872),s('type.wordSem.word_loc'(X870),X871)))))) | p(s(bool,happ(s(fun(X869,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X870),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X870),X871))),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X872),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X873),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X874),s(fun(X869,bool),X875),s(fun(X869,bool),X876))),s(X869,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X870),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X870),X871))),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X872),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X873),s(fun('type.wordSem.word_loc'(X870),fun(X869,bool)),X874),s(fun(X869,bool),X875),s(fun(X869,bool),X876)),X869)))))) )),
  inference(superposition,[],[f311,f328])).
fof(f41708,plain,(
  ( ! [X866,X864,X868,X863,X861,X867,X865,X862] : (p(s(bool,happ(s(fun(fun(X861,bool),bool),'!_1'),s(fun(X861,bool),happ(s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X864),s('type.wordSem.word_loc'(X862),X863)))))) | ~p(s(bool,happ(s(fun(X861,bool),happ(s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X864),s('type.wordSem.word_loc'(X862),X863))),s(X861,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X862),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X862),X863))),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X864),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X865),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X866),s(fun(X861,bool),X867),s(fun(X861,bool),X868)),X861)))))) )),
  inference(forward_demodulation,[],[f41554,f328])).
fof(f41554,plain,(
  ( ! [X866,X864,X868,X863,X861,X867,X865,X862] : (~p(s(bool,happ(s(fun(X861,bool),happ(s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X864),s('type.wordSem.word_loc'(X862),X863))),s(X861,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X862),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X862),X863))),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X864),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X865),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X866),s(fun(X861,bool),X867),s(fun(X861,bool),X868)),X861))))) | p(s(bool,happ(s(fun(fun(X861,bool),bool),'!_1'),s(fun(X861,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X862),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X862),X863))),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X864),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X865),s(fun('type.wordSem.word_loc'(X862),fun(X861,bool)),X866),s(fun(X861,bool),X867),s(fun(X861,bool),X868))))))) )),
  inference(superposition,[],[f310,f328])).
fof(f41552,plain,(
  ( ! [X850,X848,X843,X847,X845,X851,X849,X846,X844] : (p(s(bool,'|dollar|exists_1'(s(fun(X843,bool),happ(s(fun('type.wordSem.word_loc'(X844),fun(X843,bool)),X846),s('type.wordSem.word_loc'(X844),X845)))))) | s(X843,X851) = s(X843,sK3(X851,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X844),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X844),X845))),s(fun('type.wordSem.word_loc'(X844),fun(X843,bool)),X846),s(fun('type.wordSem.word_loc'(X844),fun(X843,bool)),X847),s(fun('type.wordSem.word_loc'(X844),fun(X843,bool)),X848),s(fun(X843,bool),X849),s(fun(X843,bool),X850)),X843))) )),
  inference(superposition,[],[f288,f328])).
fof(f41516,plain,(
  ( ! [X573,X575,X576,X578,X572,X574,X577,X579] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X579,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(X572),bool),X574),s('type.wordSem.word_loc'(X572),X573))))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X572),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X572),X573))),s(fun('type.wordSem.word_loc'(X572),bool),X574),s(fun('type.wordSem.word_loc'(X572),bool),X575),s(fun('type.wordSem.word_loc'(X572),bool),X576),s(bool,X577),s(bool,X578)))) )),
  inference(superposition,[],[f2213,f328])).
fof(f41511,plain,(
  ( ! [X536,X538,X532,X534,X537,X539,X533,X535] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X532),bool),X534),s('type.wordSem.word_loc'(X532),X533))) | s(bool,X539) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X532),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X532),X533))),s(fun('type.wordSem.word_loc'(X532),bool),X534),s(fun('type.wordSem.word_loc'(X532),bool),X535),s(fun('type.wordSem.word_loc'(X532),bool),X536),s(bool,X537),s(bool,X538))) | s(bool,'F_0') = s(bool,X539)) )),
  inference(superposition,[],[f1400,f328])).
fof(f41510,plain,(
  ( ! [X528,X530,X524,X526,X529,X531,X525,X527] : (s(bool,X531) != s(bool,happ(s(fun('type.wordSem.word_loc'(X524),bool),X526),s('type.wordSem.word_loc'(X524),X525))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X524),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X524),X525))),s(fun('type.wordSem.word_loc'(X524),bool),X526),s(fun('type.wordSem.word_loc'(X524),bool),X527),s(fun('type.wordSem.word_loc'(X524),bool),X528),s(bool,X529),s(bool,X530))) | s(bool,'F_0') = s(bool,X531)) )),
  inference(superposition,[],[f1197,f328])).
fof(f41509,plain,(
  ( ! [X520,X522,X516,X518,X521,X523,X517,X519] : (s(bool,X523) != s(bool,happ(s(fun('type.wordSem.word_loc'(X516),bool),X518),s('type.wordSem.word_loc'(X516),X517))) | s(bool,'T_0') = s(bool,X523) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X516),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X516),X517))),s(fun('type.wordSem.word_loc'(X516),bool),X518),s(fun('type.wordSem.word_loc'(X516),bool),X519),s(fun('type.wordSem.word_loc'(X516),bool),X520),s(bool,X521),s(bool,X522)))) )),
  inference(superposition,[],[f1197,f328])).
fof(f41673,plain,(
  ( ! [X461,X463,X459,X460,X462,X458,X464] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X458),bool),X460),s('type.wordSem.word_loc'(X458),X459))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X458),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X458),X459))),s(fun('type.wordSem.word_loc'(X458),bool),X460),s(fun('type.wordSem.word_loc'(X458),bool),X461),s(fun('type.wordSem.word_loc'(X458),bool),X462),s(bool,X463),s(bool,X464)))) )),
  inference(forward_demodulation,[],[f41502,f270])).
fof(f41502,plain,(
  ( ! [X466,X461,X463,X459,X465,X460,X462,X458,X464] : (s(bool,'const.bool.DATATYPE_1'(s(X465,X466))) != s(bool,happ(s(fun('type.wordSem.word_loc'(X458),bool),X460),s('type.wordSem.word_loc'(X458),X459))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X458),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X458),X459))),s(fun('type.wordSem.word_loc'(X458),bool),X460),s(fun('type.wordSem.word_loc'(X458),bool),X461),s(fun('type.wordSem.word_loc'(X458),bool),X462),s(bool,X463),s(bool,X464)))) )),
  inference(superposition,[],[f557,f328])).
fof(f41439,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (s(bool,X79) = s(bool,happ(s(fun('type.wordSem.word_loc'(X72),bool),X74),s('type.wordSem.word_loc'(X72),X73))) | s(bool,'F_0') = s(bool,X79) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X72),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X72),X73))),s(fun('type.wordSem.word_loc'(X72),bool),X74),s(fun('type.wordSem.word_loc'(X72),bool),X75),s(fun('type.wordSem.word_loc'(X72),bool),X76),s(bool,X77),s(bool,X78)))) )),
  inference(superposition,[],[f328,f1108])).
fof(f41437,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X63] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X56),bool),X58),s('type.wordSem.word_loc'(X56),X57))) | s(bool,X63) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X56),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X56),X57))),s(fun('type.wordSem.word_loc'(X56),bool),X58),s(fun('type.wordSem.word_loc'(X56),bool),X59),s(fun('type.wordSem.word_loc'(X56),bool),X60),s(bool,X61),s(bool,X62))) | s(bool,'F_0') = s(bool,X63)) )),
  inference(superposition,[],[f328,f1108])).
fof(f41640,plain,(
  ( ! [X47,X52,X50,X48,X53,X51,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X47),bool),X49),s('type.wordSem.word_loc'(X47),X48))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X47),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X47),X48))),s(fun('type.wordSem.word_loc'(X47),bool),X49),s(fun('type.wordSem.word_loc'(X47),bool),X50),s(fun('type.wordSem.word_loc'(X47),bool),X51),s(bool,X52),s(bool,X53)))) )),
  inference(forward_demodulation,[],[f41436,f270])).
fof(f41436,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (s(bool,'const.bool.DATATYPE_1'(s(X54,X55))) = s(bool,happ(s(fun('type.wordSem.word_loc'(X47),bool),X49),s('type.wordSem.word_loc'(X47),X48))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X47),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X47),X48))),s(fun('type.wordSem.word_loc'(X47),bool),X49),s(fun('type.wordSem.word_loc'(X47),bool),X50),s(fun('type.wordSem.word_loc'(X47),bool),X51),s(bool,X52),s(bool,X53)))) )),
  inference(superposition,[],[f328,f1071])).
fof(f41433,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun('type.wordSem.word_loc'(X23),bool),X25),s('type.wordSem.word_loc'(X23),X24))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X23),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X23),X24))),s(fun('type.wordSem.word_loc'(X23),bool),X25),s(fun('type.wordSem.word_loc'(X23),bool),X26),s(fun('type.wordSem.word_loc'(X23),bool),X27),s(bool,X28),s(bool,X29)))) )),
  inference(superposition,[],[f328,f365])).
fof(f41432,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X15),bool),X17),s('type.wordSem.word_loc'(X15),X16))) | s(bool,X22) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X15),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X15),X16))),s(fun('type.wordSem.word_loc'(X15),bool),X17),s(fun('type.wordSem.word_loc'(X15),bool),X18),s(fun('type.wordSem.word_loc'(X15),bool),X19),s(bool,X20),s(bool,X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f328,f365])).
fof(f41431,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X8),bool),X10),s('type.wordSem.word_loc'(X8),X9))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X8),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X8),X9))),s(fun('type.wordSem.word_loc'(X8),bool),X10),s(fun('type.wordSem.word_loc'(X8),bool),X11),s(fun('type.wordSem.word_loc'(X8),bool),X12),s(bool,X13),s(bool,X14)))) )),
  inference(superposition,[],[f328,f242])).
fof(f41068,plain,(
  ( ! [X241,X242,X240] : (s(bool,X240) != s(bool,'|dollar|exists_1'(s(fun(X242,bool),sK7('!_1',fun(X242,bool))))) | s(bool,'T_0') = s(bool,sK3(X240,X241,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X241)))) )),
  inference(superposition,[],[f34073,f565])).
fof(f41064,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X214] : (s(bool,X218) != s(bool,'|dollar|exists_1'(s(fun(X220,bool),sK7('!_1',fun(X220,bool))))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X214),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X214),bool),X215),s(fun('type.wordSem.word_loc'(X214),bool),X216),s(fun('type.wordSem.word_loc'(X214),bool),X217),s(bool,X218),s(bool,X219)))) )),
  inference(superposition,[],[f34073,f326])).
fof(f41063,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X207] : (s(bool,X212) != s(bool,'|dollar|exists_1'(s(fun(X213,bool),sK7('!_1',fun(X213,bool))))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X207),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X207),bool),X208),s(fun('type.wordSem.word_loc'(X207),bool),X209),s(fun('type.wordSem.word_loc'(X207),bool),X210),s(bool,X211),s(bool,X212)))) )),
  inference(superposition,[],[f34073,f325])).
fof(f41061,plain,(
  ( ! [X202,X200,X201] : (s(bool,X200) != s(bool,'|dollar|exists_1'(s(fun(X202,bool),sK7('!_1',fun(X202,bool))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X200),s(fun('type.num.num',bool),X201),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f34073,f284])).
fof(f41058,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,X187) != s(bool,'|dollar|exists_1'(s(fun(X189,bool),sK7('!_1',fun(X189,bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(X186,bool),'_dst_x0_1'(s(bool,X187))),s(X186,X188)))) )),
  inference(superposition,[],[f34073,f320])).
fof(f41054,plain,(
  ( ! [X167,X166] : (s(bool,X166) != s(bool,'|dollar|exists_1'(s(fun(X167,bool),sK7('!_1',fun(X167,bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X166)))) )),
  inference(superposition,[],[f34073,f271])).
fof(f40903,plain,(
  ( ! [X241,X242,X240] : (s(bool,X240) != s(bool,'|dollar|exists_1'(s(fun(X242,bool),sK7('?_1',fun(X242,bool))))) | s(bool,'T_0') = s(bool,sK3(X240,X241,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X241)))) )),
  inference(superposition,[],[f25612,f565])).
fof(f40899,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X214] : (s(bool,X218) != s(bool,'|dollar|exists_1'(s(fun(X220,bool),sK7('?_1',fun(X220,bool))))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X214),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X214),bool),X215),s(fun('type.wordSem.word_loc'(X214),bool),X216),s(fun('type.wordSem.word_loc'(X214),bool),X217),s(bool,X218),s(bool,X219)))) )),
  inference(superposition,[],[f25612,f326])).
fof(f40898,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X207] : (s(bool,X212) != s(bool,'|dollar|exists_1'(s(fun(X213,bool),sK7('?_1',fun(X213,bool))))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X207),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X207),bool),X208),s(fun('type.wordSem.word_loc'(X207),bool),X209),s(fun('type.wordSem.word_loc'(X207),bool),X210),s(bool,X211),s(bool,X212)))) )),
  inference(superposition,[],[f25612,f325])).
fof(f40896,plain,(
  ( ! [X202,X200,X201] : (s(bool,X200) != s(bool,'|dollar|exists_1'(s(fun(X202,bool),sK7('?_1',fun(X202,bool))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X200),s(fun('type.num.num',bool),X201),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f25612,f284])).
fof(f40893,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,X187) != s(bool,'|dollar|exists_1'(s(fun(X189,bool),sK7('?_1',fun(X189,bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(X186,bool),'_dst_x0_1'(s(bool,X187))),s(X186,X188)))) )),
  inference(superposition,[],[f25612,f320])).
fof(f40889,plain,(
  ( ! [X167,X166] : (s(bool,X166) != s(bool,'|dollar|exists_1'(s(fun(X167,bool),sK7('?_1',fun(X167,bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X166)))) )),
  inference(superposition,[],[f25612,f271])).
fof(f40713,plain,(
  ( ! [X1393,X1395,X1397,X1399,X1400,X1392,X1394,X1396,X1398,X1401] : (s('type.fcp.cart'(bool,X1392),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1392),happ(s(fun('type.wordSem.word_loc'(X1393),'type.fcp.cart'(bool,X1392)),X1397),s('type.wordSem.word_loc'(X1393),X1394))) | p(s(bool,sK4(X1400,X1401,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1393),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1393),X1394))),s(fun('type.wordSem.word_loc'(X1393),'type.fcp.cart'(bool,X1392)),X1395),s(fun('type.wordSem.word_loc'(X1393),'type.fcp.cart'(bool,X1392)),X1396),s(fun('type.wordSem.word_loc'(X1393),'type.fcp.cart'(bool,X1392)),X1397),s('type.fcp.cart'(bool,X1392),X1398),s('type.fcp.cart'(bool,X1392),X1399)),X1392)))) )),
  inference(superposition,[],[f302,f327])).
fof(f40818,plain,(
  ( ! [X1377,X1379,X1371,X1373,X1375,X1376,X1378,X1380,X1372,X1374] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1379,X1380,happ(s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1376),s('type.wordSem.word_loc'(X1372),X1373)),X1371)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1379,X1380,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1372),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1372),X1373))),s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1374),s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1375),s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1376),s('type.fcp.cart'(bool,X1371),X1377),s('type.fcp.cart'(bool,X1371),X1378)),X1371)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f40711,f303])).
fof(f40711,plain,(
  ( ! [X1377,X1379,X1371,X1373,X1375,X1376,X1378,X1380,X1372,X1374] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1371),'const.wordSem.Loc_2'(s('type.num.num',X1379),s('type.num.num',X1380))),s('type.wordSem.word_loc'(X1371),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1371),happ(s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1376),s('type.wordSem.word_loc'(X1372),X1373))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1379,X1380,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1372),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1372),X1373))),s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1374),s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1375),s(fun('type.wordSem.word_loc'(X1372),'type.fcp.cart'(bool,X1371)),X1376),s('type.fcp.cart'(bool,X1371),X1377),s('type.fcp.cart'(bool,X1371),X1378)),X1371)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f327])).
fof(f40817,plain,(
  ( ! [X1360,X1352,X1354,X1356,X1358,X1353,X1355,X1357,X1359,X1351] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1355),s('type.wordSem.word_loc'(X1351),X1352)),X1358,X1359,X1360)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1351),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1351),X1352))),s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1353),s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1354),s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1355),s('type.num.num',X1356),s('type.num.num',X1357)),X1358,X1359,X1360)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f40709,f303])).
fof(f40709,plain,(
  ( ! [X1360,X1352,X1354,X1356,X1358,X1353,X1355,X1357,X1359,X1351] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1360),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1355),s('type.wordSem.word_loc'(X1351),X1352))),s('type.num.num',X1358))),s('type.wordSem.word_loc'(X1360),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1360),X1359))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1351),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1351),X1352))),s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1353),s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1354),s(fun('type.wordSem.word_loc'(X1351),'type.num.num'),X1355),s('type.num.num',X1356),s('type.num.num',X1357)),X1358,X1359,X1360)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f327])).
fof(f40816,plain,(
  ( ! [X1341,X1343,X1344,X1346,X1348,X1350,X1342,X1345,X1347,X1349] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1348,happ(s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1345),s('type.wordSem.word_loc'(X1341),X1342)),X1349,X1350)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1348,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1341),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1341),X1342))),s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1343),s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1344),s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1345),s('type.num.num',X1346),s('type.num.num',X1347)),X1349,X1350)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f40708,f303])).
fof(f40708,plain,(
  ( ! [X1341,X1343,X1344,X1346,X1348,X1350,X1342,X1345,X1347,X1349] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1350),'const.wordSem.Loc_2'(s('type.num.num',X1348),s('type.num.num',happ(s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1345),s('type.wordSem.word_loc'(X1341),X1342))))),s('type.wordSem.word_loc'(X1350),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1350),X1349))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1348,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1341),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1341),X1342))),s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1343),s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1344),s(fun('type.wordSem.word_loc'(X1341),'type.num.num'),X1345),s('type.num.num',X1346),s('type.num.num',X1347)),X1349,X1350)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f327])).
fof(f40698,plain,(
  ( ! [X1246,X1250,X1248,X1252,X1247,X1245,X1251,X1249,X1253] : (s('type.stackSem.result'(X1245),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1245),X1253))) != s('type.stackSem.result'(X1245),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1245),happ(s(fun('type.wordSem.word_loc'(X1246),'type.wordSem.word_loc'(X1245)),X1250),s('type.wordSem.word_loc'(X1246),X1247))))) | s('type.wordSem.word_loc'(X1245),X1253) = s('type.wordSem.word_loc'(X1245),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1246),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1246),X1247))),s(fun('type.wordSem.word_loc'(X1246),'type.wordSem.word_loc'(X1245)),X1248),s(fun('type.wordSem.word_loc'(X1246),'type.wordSem.word_loc'(X1245)),X1249),s(fun('type.wordSem.word_loc'(X1246),'type.wordSem.word_loc'(X1245)),X1250),s('type.wordSem.word_loc'(X1245),X1251),s('type.wordSem.word_loc'(X1245),X1252)))) )),
  inference(superposition,[],[f294,f327])).
fof(f40694,plain,(
  ( ! [X1213,X1216,X1217,X1210,X1214,X1212,X1211,X1209,X1215] : (s('type.stackSem.result'(X1209),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1209),X1217))) != s('type.stackSem.result'(X1209),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1209),happ(s(fun('type.wordSem.word_loc'(X1210),'type.wordSem.word_loc'(X1209)),X1214),s('type.wordSem.word_loc'(X1210),X1211))))) | s('type.wordSem.word_loc'(X1209),X1217) = s('type.wordSem.word_loc'(X1209),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1210),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1210),X1211))),s(fun('type.wordSem.word_loc'(X1210),'type.wordSem.word_loc'(X1209)),X1212),s(fun('type.wordSem.word_loc'(X1210),'type.wordSem.word_loc'(X1209)),X1213),s(fun('type.wordSem.word_loc'(X1210),'type.wordSem.word_loc'(X1209)),X1214),s('type.wordSem.word_loc'(X1209),X1215),s('type.wordSem.word_loc'(X1209),X1216)))) )),
  inference(superposition,[],[f292,f327])).
fof(f40690,plain,(
  ( ! [X1180,X1174,X1179,X1177,X1181,X1175,X1173,X1178,X1176] : (s('type.stackSem.result'(X1173),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1173),X1181))) != s('type.stackSem.result'(X1173),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1173),happ(s(fun('type.wordSem.word_loc'(X1174),'type.wordSem.word_loc'(X1173)),X1178),s('type.wordSem.word_loc'(X1174),X1175))))) | s('type.wordSem.word_loc'(X1173),X1181) = s('type.wordSem.word_loc'(X1173),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1174),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1174),X1175))),s(fun('type.wordSem.word_loc'(X1174),'type.wordSem.word_loc'(X1173)),X1176),s(fun('type.wordSem.word_loc'(X1174),'type.wordSem.word_loc'(X1173)),X1177),s(fun('type.wordSem.word_loc'(X1174),'type.wordSem.word_loc'(X1173)),X1178),s('type.wordSem.word_loc'(X1173),X1179),s('type.wordSem.word_loc'(X1173),X1180)))) )),
  inference(superposition,[],[f290,f327])).
fof(f40681,plain,(
  ( ! [X1104,X1099,X1103,X1101,X1105,X1102,X1100] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(X1099),'type.wordSem.word_loc'(sK0)),X1103),s('type.wordSem.word_loc'(X1099),X1100))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1099),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1099),X1100))),s(fun('type.wordSem.word_loc'(X1099),'type.wordSem.word_loc'(sK0)),X1101),s(fun('type.wordSem.word_loc'(X1099),'type.wordSem.word_loc'(sK0)),X1102),s(fun('type.wordSem.word_loc'(X1099),'type.wordSem.word_loc'(sK0)),X1103),s('type.wordSem.word_loc'(sK0),X1104),s('type.wordSem.word_loc'(sK0),X1105)))) )),
  inference(superposition,[],[f2643,f327])).
fof(f40677,plain,(
  ( ! [X1073,X1070,X1068,X1074,X1072,X1067,X1071,X1069] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(X1067),'type.wordSem.word_loc'(sK0)),X1071),s('type.wordSem.word_loc'(X1067),X1068))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1067),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1067),X1068))),s(fun('type.wordSem.word_loc'(X1067),'type.wordSem.word_loc'(sK0)),X1069),s(fun('type.wordSem.word_loc'(X1067),'type.wordSem.word_loc'(sK0)),X1070),s(fun('type.wordSem.word_loc'(X1067),'type.wordSem.word_loc'(sK0)),X1071),s('type.wordSem.word_loc'(sK0),X1072),s('type.wordSem.word_loc'(sK0),X1073)),X1074,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1074)))) )),
  inference(superposition,[],[f2654,f327])).
fof(f40657,plain,(
  ( ! [X850,X848,X843,X847,X845,X849,X842,X846,X844] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X842,bool),happ(s(fun('type.wordSem.word_loc'(X843),fun(X842,bool)),X847),s('type.wordSem.word_loc'(X843),X844))))) | s(X842,X850) = s(X842,sK3(X850,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X843),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X843),X844))),s(fun('type.wordSem.word_loc'(X843),fun(X842,bool)),X845),s(fun('type.wordSem.word_loc'(X843),fun(X842,bool)),X846),s(fun('type.wordSem.word_loc'(X843),fun(X842,bool)),X847),s(fun(X842,bool),X848),s(fun(X842,bool),X849)),X842))) )),
  inference(superposition,[],[f565,f327])).
fof(f40803,plain,(
  ( ! [X825,X831,X829,X826,X830,X828,X832,X827] : (p(s(bool,happ(s(fun(X825,bool),happ(s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X830),s('type.wordSem.word_loc'(X826),X827))),s(X825,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X826),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X826),X827))),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X828),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X829),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X830),s(fun(X825,bool),X831),s(fun(X825,bool),X832)),X825))))) | ~p(s(bool,happ(s(fun(fun(X825,bool),bool),'?_1'),s(fun(X825,bool),happ(s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X830),s('type.wordSem.word_loc'(X826),X827))))))) )),
  inference(forward_demodulation,[],[f40655,f327])).
fof(f40655,plain,(
  ( ! [X825,X831,X829,X826,X830,X828,X832,X827] : (~p(s(bool,happ(s(fun(fun(X825,bool),bool),'?_1'),s(fun(X825,bool),happ(s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X830),s('type.wordSem.word_loc'(X826),X827)))))) | p(s(bool,happ(s(fun(X825,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X826),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X826),X827))),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X828),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X829),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X830),s(fun(X825,bool),X831),s(fun(X825,bool),X832))),s(X825,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X826),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X826),X827))),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X828),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X829),s(fun('type.wordSem.word_loc'(X826),fun(X825,bool)),X830),s(fun(X825,bool),X831),s(fun(X825,bool),X832)),X825)))))) )),
  inference(superposition,[],[f311,f327])).
fof(f40802,plain,(
  ( ! [X819,X817,X823,X821,X824,X818,X822,X820] : (p(s(bool,happ(s(fun(fun(X817,bool),bool),'!_1'),s(fun(X817,bool),happ(s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X822),s('type.wordSem.word_loc'(X818),X819)))))) | ~p(s(bool,happ(s(fun(X817,bool),happ(s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X822),s('type.wordSem.word_loc'(X818),X819))),s(X817,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X818),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X818),X819))),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X820),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X821),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X822),s(fun(X817,bool),X823),s(fun(X817,bool),X824)),X817)))))) )),
  inference(forward_demodulation,[],[f40654,f327])).
fof(f40654,plain,(
  ( ! [X819,X817,X823,X821,X824,X818,X822,X820] : (~p(s(bool,happ(s(fun(X817,bool),happ(s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X822),s('type.wordSem.word_loc'(X818),X819))),s(X817,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X818),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X818),X819))),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X820),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X821),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X822),s(fun(X817,bool),X823),s(fun(X817,bool),X824)),X817))))) | p(s(bool,happ(s(fun(fun(X817,bool),bool),'!_1'),s(fun(X817,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X818),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X818),X819))),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X820),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X821),s(fun('type.wordSem.word_loc'(X818),fun(X817,bool)),X822),s(fun(X817,bool),X823),s(fun(X817,bool),X824))))))) )),
  inference(superposition,[],[f310,f327])).
fof(f40652,plain,(
  ( ! [X802,X800,X806,X804,X799,X803,X801,X807,X805] : (p(s(bool,'|dollar|exists_1'(s(fun(X799,bool),happ(s(fun('type.wordSem.word_loc'(X800),fun(X799,bool)),X804),s('type.wordSem.word_loc'(X800),X801)))))) | s(X799,X807) = s(X799,sK3(X807,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X800),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X800),X801))),s(fun('type.wordSem.word_loc'(X800),fun(X799,bool)),X802),s(fun('type.wordSem.word_loc'(X800),fun(X799,bool)),X803),s(fun('type.wordSem.word_loc'(X800),fun(X799,bool)),X804),s(fun(X799,bool),X805),s(fun(X799,bool),X806)),X799))) )),
  inference(superposition,[],[f288,f327])).
fof(f40618,plain,(
  ( ! [X546,X549,X551,X545,X547,X548,X550,X544] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X551,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(X544),bool),X548),s('type.wordSem.word_loc'(X544),X545))))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X544),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X544),X545))),s(fun('type.wordSem.word_loc'(X544),bool),X546),s(fun('type.wordSem.word_loc'(X544),bool),X547),s(fun('type.wordSem.word_loc'(X544),bool),X548),s(bool,X549),s(bool,X550)))) )),
  inference(superposition,[],[f2213,f327])).
fof(f40613,plain,(
  ( ! [X509,X511,X505,X507,X508,X510,X504,X506] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X504),bool),X508),s('type.wordSem.word_loc'(X504),X505))) | s(bool,X511) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X504),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X504),X505))),s(fun('type.wordSem.word_loc'(X504),bool),X506),s(fun('type.wordSem.word_loc'(X504),bool),X507),s(fun('type.wordSem.word_loc'(X504),bool),X508),s(bool,X509),s(bool,X510))) | s(bool,'F_0') = s(bool,X511)) )),
  inference(superposition,[],[f1400,f327])).
fof(f40612,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X503,X497] : (s(bool,X503) != s(bool,happ(s(fun('type.wordSem.word_loc'(X496),bool),X500),s('type.wordSem.word_loc'(X496),X497))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X496),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X496),X497))),s(fun('type.wordSem.word_loc'(X496),bool),X498),s(fun('type.wordSem.word_loc'(X496),bool),X499),s(fun('type.wordSem.word_loc'(X496),bool),X500),s(bool,X501),s(bool,X502))) | s(bool,'F_0') = s(bool,X503)) )),
  inference(superposition,[],[f1197,f327])).
fof(f40611,plain,(
  ( ! [X492,X494,X488,X490,X493,X495,X489,X491] : (s(bool,X495) != s(bool,happ(s(fun('type.wordSem.word_loc'(X488),bool),X492),s('type.wordSem.word_loc'(X488),X489))) | s(bool,'T_0') = s(bool,X495) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X488),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X488),X489))),s(fun('type.wordSem.word_loc'(X488),bool),X490),s(fun('type.wordSem.word_loc'(X488),bool),X491),s(fun('type.wordSem.word_loc'(X488),bool),X492),s(bool,X493),s(bool,X494)))) )),
  inference(superposition,[],[f1197,f327])).
fof(f40769,plain,(
  ( ! [X430,X436,X432,X434,X431,X433,X435] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X430),bool),X434),s('type.wordSem.word_loc'(X430),X431))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X430),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X430),X431))),s(fun('type.wordSem.word_loc'(X430),bool),X432),s(fun('type.wordSem.word_loc'(X430),bool),X433),s(fun('type.wordSem.word_loc'(X430),bool),X434),s(bool,X435),s(bool,X436)))) )),
  inference(forward_demodulation,[],[f40604,f270])).
fof(f40604,plain,(
  ( ! [X430,X436,X438,X432,X434,X431,X437,X433,X435] : (s(bool,'const.bool.DATATYPE_1'(s(X437,X438))) != s(bool,happ(s(fun('type.wordSem.word_loc'(X430),bool),X434),s('type.wordSem.word_loc'(X430),X431))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X430),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X430),X431))),s(fun('type.wordSem.word_loc'(X430),bool),X432),s(fun('type.wordSem.word_loc'(X430),bool),X433),s(fun('type.wordSem.word_loc'(X430),bool),X434),s(bool,X435),s(bool,X436)))) )),
  inference(superposition,[],[f557,f327])).
fof(f40543,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (s(bool,X79) = s(bool,happ(s(fun('type.wordSem.word_loc'(X72),bool),X76),s('type.wordSem.word_loc'(X72),X73))) | s(bool,'F_0') = s(bool,X79) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X72),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X72),X73))),s(fun('type.wordSem.word_loc'(X72),bool),X74),s(fun('type.wordSem.word_loc'(X72),bool),X75),s(fun('type.wordSem.word_loc'(X72),bool),X76),s(bool,X77),s(bool,X78)))) )),
  inference(superposition,[],[f327,f1108])).
fof(f40541,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X63] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X56),bool),X60),s('type.wordSem.word_loc'(X56),X57))) | s(bool,X63) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X56),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X56),X57))),s(fun('type.wordSem.word_loc'(X56),bool),X58),s(fun('type.wordSem.word_loc'(X56),bool),X59),s(fun('type.wordSem.word_loc'(X56),bool),X60),s(bool,X61),s(bool,X62))) | s(bool,'F_0') = s(bool,X63)) )),
  inference(superposition,[],[f327,f1108])).
fof(f40736,plain,(
  ( ! [X47,X52,X50,X48,X53,X51,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X47),bool),X51),s('type.wordSem.word_loc'(X47),X48))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X47),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X47),X48))),s(fun('type.wordSem.word_loc'(X47),bool),X49),s(fun('type.wordSem.word_loc'(X47),bool),X50),s(fun('type.wordSem.word_loc'(X47),bool),X51),s(bool,X52),s(bool,X53)))) )),
  inference(forward_demodulation,[],[f40540,f270])).
fof(f40540,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (s(bool,'const.bool.DATATYPE_1'(s(X54,X55))) = s(bool,happ(s(fun('type.wordSem.word_loc'(X47),bool),X51),s('type.wordSem.word_loc'(X47),X48))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X47),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X47),X48))),s(fun('type.wordSem.word_loc'(X47),bool),X49),s(fun('type.wordSem.word_loc'(X47),bool),X50),s(fun('type.wordSem.word_loc'(X47),bool),X51),s(bool,X52),s(bool,X53)))) )),
  inference(superposition,[],[f327,f1071])).
fof(f40537,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun('type.wordSem.word_loc'(X23),bool),X27),s('type.wordSem.word_loc'(X23),X24))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X23),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X23),X24))),s(fun('type.wordSem.word_loc'(X23),bool),X25),s(fun('type.wordSem.word_loc'(X23),bool),X26),s(fun('type.wordSem.word_loc'(X23),bool),X27),s(bool,X28),s(bool,X29)))) )),
  inference(superposition,[],[f327,f365])).
fof(f40536,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X15),bool),X19),s('type.wordSem.word_loc'(X15),X16))) | s(bool,X22) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X15),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X15),X16))),s(fun('type.wordSem.word_loc'(X15),bool),X17),s(fun('type.wordSem.word_loc'(X15),bool),X18),s(fun('type.wordSem.word_loc'(X15),bool),X19),s(bool,X20),s(bool,X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f327,f365])).
fof(f40535,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(X8),bool),X12),s('type.wordSem.word_loc'(X8),X9))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X8),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X8),X9))),s(fun('type.wordSem.word_loc'(X8),bool),X10),s(fun('type.wordSem.word_loc'(X8),bool),X11),s(fun('type.wordSem.word_loc'(X8),bool),X12),s(bool,X13),s(bool,X14)))) )),
  inference(superposition,[],[f327,f242])).
fof(f40281,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.wordSem.word_loc'(sK0),X0),X1),s('type.wordSem.word_loc'(sK0),sK1))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),X0),X2),s(fun('type.wordSem.word_loc'(sK0),X0),X3),s(fun('type.wordSem.word_loc'(sK0),X0),X1),s(X0,X4),s(X0,X5)))) )),
  inference(superposition,[],[f327,f234])).
fof(f40241,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,happ(s(fun(fun(X36,bool),bool),'?_1'),s(fun(X36,bool),sK7('!_1',fun(X36,bool))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f40124,f235])).
fof(f40124,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,happ(s(fun(fun(X36,bool),bool),'?_1'),s(fun(X36,bool),sK7('!_1',fun(X36,bool))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f34447])).
fof(f39618,plain,(
  ( ! [X231,X230,X232] : (s(bool,X230) = s(bool,'|dollar|exists_1'(s(fun(X232,bool),sK7('!_1',fun(X232,bool))))) | s(bool,'F_0') = s(bool,sK3(X230,X231,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X231)))) )),
  inference(superposition,[],[f33864,f565])).
fof(f39615,plain,(
  ( ! [X212,X218,X216,X215,X213,X217,X214] : (s(bool,X216) = s(bool,'|dollar|exists_1'(s(fun(X218,bool),sK7('!_1',fun(X218,bool))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X212),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X212),bool),X213),s(fun('type.wordSem.word_loc'(X212),bool),X214),s(fun('type.wordSem.word_loc'(X212),bool),X215),s(bool,X216),s(bool,X217)))) )),
  inference(superposition,[],[f33864,f326])).
fof(f39614,plain,(
  ( ! [X210,X208,X206,X211,X209,X207,X205] : (s(bool,X210) = s(bool,'|dollar|exists_1'(s(fun(X211,bool),sK7('!_1',fun(X211,bool))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X205),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X205),bool),X206),s(fun('type.wordSem.word_loc'(X205),bool),X207),s(fun('type.wordSem.word_loc'(X205),bool),X208),s(bool,X209),s(bool,X210)))) )),
  inference(superposition,[],[f33864,f325])).
fof(f39612,plain,(
  ( ! [X198,X200,X199] : (s(bool,X198) = s(bool,'|dollar|exists_1'(s(fun(X200,bool),sK7('!_1',fun(X200,bool))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X198),s(fun('type.num.num',bool),X199),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f33864,f284])).
fof(f39609,plain,(
  ( ! [X187,X185,X186,X184] : (s(bool,X185) = s(bool,'|dollar|exists_1'(s(fun(X187,bool),sK7('!_1',fun(X187,bool))))) | s(bool,'F_0') = s(bool,happ(s(fun(X184,bool),'_dst_x0_1'(s(bool,X185))),s(X184,X186)))) )),
  inference(superposition,[],[f33864,f320])).
fof(f39605,plain,(
  ( ! [X165,X164] : (s(bool,X164) = s(bool,'|dollar|exists_1'(s(fun(X165,bool),sK7('!_1',fun(X165,bool))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X164)))) )),
  inference(superposition,[],[f33864,f271])).
fof(f39458,plain,(
  ( ! [X1035,X1033,X1039,X1037,X1034,X1032,X1038,X1036] : (s('type.fcp.cart'(bool,X1032),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1032),happ(s(fun('type.num.num','type.fcp.cart'(bool,X1032)),happ(s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X1032))),X1037),s('type.num.num',X1034))),s('type.num.num',X1035))) | p(s(bool,sK4(X1038,X1039,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X1033),'const.wordSem.Loc_2'(s('type.num.num',X1034),s('type.num.num',X1035))),s(fun('type.fcp.cart'(bool,X1033),'type.fcp.cart'(bool,X1032)),X1036),s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X1032))),X1037)),X1032)))) )),
  inference(superposition,[],[f302,f324])).
fof(f39545,plain,(
  ( ! [X1019,X1017,X1021,X1015,X1018,X1016,X1022,X1020] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1021,X1022,happ(s(fun('type.num.num','type.fcp.cart'(bool,X1015)),happ(s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X1015))),X1020),s('type.num.num',X1017))),s('type.num.num',X1018)),X1015)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1021,X1022,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X1016),'const.wordSem.Loc_2'(s('type.num.num',X1017),s('type.num.num',X1018))),s(fun('type.fcp.cart'(bool,X1016),'type.fcp.cart'(bool,X1015)),X1019),s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X1015))),X1020)),X1015)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f39456,f303])).
fof(f39456,plain,(
  ( ! [X1019,X1017,X1021,X1015,X1018,X1016,X1022,X1020] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1015),'const.wordSem.Loc_2'(s('type.num.num',X1021),s('type.num.num',X1022))),s('type.wordSem.word_loc'(X1015),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1015),happ(s(fun('type.num.num','type.fcp.cart'(bool,X1015)),happ(s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X1015))),X1020),s('type.num.num',X1017))),s('type.num.num',X1018))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X1021,X1022,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X1016),'const.wordSem.Loc_2'(s('type.num.num',X1017),s('type.num.num',X1018))),s(fun('type.fcp.cart'(bool,X1016),'type.fcp.cart'(bool,X1015)),X1019),s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X1015))),X1020)),X1015)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f324])).
fof(f39544,plain,(
  ( ! [X1002,X1000,X1006,X1004,X1003,X1001,X1005,X999] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X1003),s('type.num.num',X1000))),s('type.num.num',X1001)),X1004,X1005,X1006)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X999),'const.wordSem.Loc_2'(s('type.num.num',X1000),s('type.num.num',X1001))),s(fun('type.fcp.cart'(bool,X999),'type.num.num'),X1002),s(fun('type.num.num',fun('type.num.num','type.num.num')),X1003)),X1004,X1005,X1006)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f39454,f303])).
fof(f39454,plain,(
  ( ! [X1002,X1000,X1006,X1004,X1003,X1001,X1005,X999] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X1006),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X1003),s('type.num.num',X1000))),s('type.num.num',X1001))),s('type.num.num',X1004))),s('type.wordSem.word_loc'(X1006),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1006),X1005))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X999),'const.wordSem.Loc_2'(s('type.num.num',X1000),s('type.num.num',X1001))),s(fun('type.fcp.cart'(bool,X999),'type.num.num'),X1002),s(fun('type.num.num',fun('type.num.num','type.num.num')),X1003)),X1004,X1005,X1006)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f324])).
fof(f39543,plain,(
  ( ! [X994,X992,X998,X996,X991,X995,X993,X997] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X996,happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X995),s('type.num.num',X992))),s('type.num.num',X993)),X997,X998)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X996,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X991),'const.wordSem.Loc_2'(s('type.num.num',X992),s('type.num.num',X993))),s(fun('type.fcp.cart'(bool,X991),'type.num.num'),X994),s(fun('type.num.num',fun('type.num.num','type.num.num')),X995)),X997,X998)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f39453,f303])).
fof(f39453,plain,(
  ( ! [X994,X992,X998,X996,X991,X995,X993,X997] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X998),'const.wordSem.Loc_2'(s('type.num.num',X996),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X995),s('type.num.num',X992))),s('type.num.num',X993))))),s('type.wordSem.word_loc'(X998),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X998),X997))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X996,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X991),'const.wordSem.Loc_2'(s('type.num.num',X992),s('type.num.num',X993))),s(fun('type.fcp.cart'(bool,X991),'type.num.num'),X994),s(fun('type.num.num',fun('type.num.num','type.num.num')),X995)),X997,X998)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f324])).
fof(f39445,plain,(
  ( ! [X938,X936,X940,X939,X937,X941,X935] : (s('type.stackSem.result'(X935),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X935),X941))) != s('type.stackSem.result'(X935),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X935),happ(s(fun('type.num.num','type.wordSem.word_loc'(X935)),happ(s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X935))),X940),s('type.num.num',X937))),s('type.num.num',X938))))) | s('type.wordSem.word_loc'(X935),X941) = s('type.wordSem.word_loc'(X935),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X936),'const.wordSem.Loc_2'(s('type.num.num',X937),s('type.num.num',X938))),s(fun('type.fcp.cart'(bool,X936),'type.wordSem.word_loc'(X935)),X939),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X935))),X940)))) )),
  inference(superposition,[],[f294,f324])).
fof(f39441,plain,(
  ( ! [X912,X907,X911,X909,X913,X910,X908] : (s('type.stackSem.result'(X907),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X907),X913))) != s('type.stackSem.result'(X907),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X907),happ(s(fun('type.num.num','type.wordSem.word_loc'(X907)),happ(s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X907))),X912),s('type.num.num',X909))),s('type.num.num',X910))))) | s('type.wordSem.word_loc'(X907),X913) = s('type.wordSem.word_loc'(X907),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X908),'const.wordSem.Loc_2'(s('type.num.num',X909),s('type.num.num',X910))),s(fun('type.fcp.cart'(bool,X908),'type.wordSem.word_loc'(X907)),X911),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X907))),X912)))) )),
  inference(superposition,[],[f292,f324])).
fof(f39437,plain,(
  ( ! [X883,X881,X885,X882,X880,X884,X879] : (s('type.stackSem.result'(X879),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X879),X885))) != s('type.stackSem.result'(X879),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X879),happ(s(fun('type.num.num','type.wordSem.word_loc'(X879)),happ(s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X879))),X884),s('type.num.num',X881))),s('type.num.num',X882))))) | s('type.wordSem.word_loc'(X879),X885) = s('type.wordSem.word_loc'(X879),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X880),'const.wordSem.Loc_2'(s('type.num.num',X881),s('type.num.num',X882))),s(fun('type.fcp.cart'(bool,X880),'type.wordSem.word_loc'(X879)),X883),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X879))),X884)))) )),
  inference(superposition,[],[f290,f324])).
fof(f39428,plain,(
  ( ! [X825,X823,X826,X824,X827] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.num.num','type.wordSem.word_loc'(sK0)),happ(s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(sK0))),X827),s('type.num.num',X824))),s('type.num.num',X825))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X823),'const.wordSem.Loc_2'(s('type.num.num',X824),s('type.num.num',X825))),s(fun('type.fcp.cart'(bool,X823),'type.wordSem.word_loc'(sK0)),X826),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(sK0))),X827)))) )),
  inference(superposition,[],[f2643,f324])).
fof(f39424,plain,(
  ( ! [X802,X800,X804,X799,X803,X801] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.num.num','type.wordSem.word_loc'(sK0)),happ(s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(sK0))),X803),s('type.num.num',X800))),s('type.num.num',X801))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X799),'const.wordSem.Loc_2'(s('type.num.num',X800),s('type.num.num',X801))),s(fun('type.fcp.cart'(bool,X799),'type.wordSem.word_loc'(sK0)),X802),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(sK0))),X803)),X804,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X804)))) )),
  inference(superposition,[],[f2654,f324])).
fof(f39406,plain,(
  ( ! [X639,X635,X640,X636,X638,X634,X637] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X634,bool),happ(s(fun('type.num.num',fun(X634,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X634,bool))),X639),s('type.num.num',X636))),s('type.num.num',X637))))) | s(X634,X640) = s(X634,sK3(X640,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X635),'const.wordSem.Loc_2'(s('type.num.num',X636),s('type.num.num',X637))),s(fun('type.fcp.cart'(bool,X635),fun(X634,bool)),X638),s(fun('type.num.num',fun('type.num.num',fun(X634,bool))),X639)),X634))) )),
  inference(superposition,[],[f565,f324])).
fof(f39530,plain,(
  ( ! [X625,X621,X623,X624,X626,X622] : (p(s(bool,happ(s(fun(X621,bool),happ(s(fun('type.num.num',fun(X621,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X621,bool))),X626),s('type.num.num',X623))),s('type.num.num',X624))),s(X621,sK7('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X622),'const.wordSem.Loc_2'(s('type.num.num',X623),s('type.num.num',X624))),s(fun('type.fcp.cart'(bool,X622),fun(X621,bool)),X625),s(fun('type.num.num',fun('type.num.num',fun(X621,bool))),X626)),X621))))) | ~p(s(bool,happ(s(fun(fun(X621,bool),bool),'?_1'),s(fun(X621,bool),happ(s(fun('type.num.num',fun(X621,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X621,bool))),X626),s('type.num.num',X623))),s('type.num.num',X624))))))) )),
  inference(forward_demodulation,[],[f39404,f324])).
fof(f39404,plain,(
  ( ! [X625,X621,X623,X624,X626,X622] : (~p(s(bool,happ(s(fun(fun(X621,bool),bool),'?_1'),s(fun(X621,bool),happ(s(fun('type.num.num',fun(X621,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X621,bool))),X626),s('type.num.num',X623))),s('type.num.num',X624)))))) | p(s(bool,happ(s(fun(X621,bool),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X622),'const.wordSem.Loc_2'(s('type.num.num',X623),s('type.num.num',X624))),s(fun('type.fcp.cart'(bool,X622),fun(X621,bool)),X625),s(fun('type.num.num',fun('type.num.num',fun(X621,bool))),X626))),s(X621,sK7('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X622),'const.wordSem.Loc_2'(s('type.num.num',X623),s('type.num.num',X624))),s(fun('type.fcp.cart'(bool,X622),fun(X621,bool)),X625),s(fun('type.num.num',fun('type.num.num',fun(X621,bool))),X626)),X621)))))) )),
  inference(superposition,[],[f311,f324])).
fof(f39529,plain,(
  ( ! [X617,X619,X615,X620,X616,X618] : (p(s(bool,happ(s(fun(fun(X615,bool),bool),'!_1'),s(fun(X615,bool),happ(s(fun('type.num.num',fun(X615,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X615,bool))),X620),s('type.num.num',X617))),s('type.num.num',X618)))))) | ~p(s(bool,happ(s(fun(X615,bool),happ(s(fun('type.num.num',fun(X615,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X615,bool))),X620),s('type.num.num',X617))),s('type.num.num',X618))),s(X615,sK6('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X616),'const.wordSem.Loc_2'(s('type.num.num',X617),s('type.num.num',X618))),s(fun('type.fcp.cart'(bool,X616),fun(X615,bool)),X619),s(fun('type.num.num',fun('type.num.num',fun(X615,bool))),X620)),X615)))))) )),
  inference(forward_demodulation,[],[f39403,f324])).
fof(f39403,plain,(
  ( ! [X617,X619,X615,X620,X616,X618] : (~p(s(bool,happ(s(fun(X615,bool),happ(s(fun('type.num.num',fun(X615,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X615,bool))),X620),s('type.num.num',X617))),s('type.num.num',X618))),s(X615,sK6('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X616),'const.wordSem.Loc_2'(s('type.num.num',X617),s('type.num.num',X618))),s(fun('type.fcp.cart'(bool,X616),fun(X615,bool)),X619),s(fun('type.num.num',fun('type.num.num',fun(X615,bool))),X620)),X615))))) | p(s(bool,happ(s(fun(fun(X615,bool),bool),'!_1'),s(fun(X615,bool),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X616),'const.wordSem.Loc_2'(s('type.num.num',X617),s('type.num.num',X618))),s(fun('type.fcp.cart'(bool,X616),fun(X615,bool)),X619),s(fun('type.num.num',fun('type.num.num',fun(X615,bool))),X620))))))) )),
  inference(superposition,[],[f310,f324])).
fof(f39401,plain,(
  ( ! [X606,X602,X605,X607,X601,X603,X604] : (p(s(bool,'|dollar|exists_1'(s(fun(X601,bool),happ(s(fun('type.num.num',fun(X601,bool)),happ(s(fun('type.num.num',fun('type.num.num',fun(X601,bool))),X606),s('type.num.num',X603))),s('type.num.num',X604)))))) | s(X601,X607) = s(X601,sK3(X607,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X602),'const.wordSem.Loc_2'(s('type.num.num',X603),s('type.num.num',X604))),s(fun('type.fcp.cart'(bool,X602),fun(X601,bool)),X605),s(fun('type.num.num',fun('type.num.num',fun(X601,bool))),X606)),X601))) )),
  inference(superposition,[],[f288,f324])).
fof(f39368,plain,(
  ( ! [X420,X422,X424,X421,X423,X425] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X425,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X424),s('type.num.num',X421))),s('type.num.num',X422))))))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X420),'const.wordSem.Loc_2'(s('type.num.num',X421),s('type.num.num',X422))),s(fun('type.fcp.cart'(bool,X420),bool),X423),s(fun('type.num.num',fun('type.num.num',bool)),X424)))) )),
  inference(superposition,[],[f2213,f324])).
fof(f39363,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X394),s('type.num.num',X391))),s('type.num.num',X392))) | s(bool,X395) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X390),'const.wordSem.Loc_2'(s('type.num.num',X391),s('type.num.num',X392))),s(fun('type.fcp.cart'(bool,X390),bool),X393),s(fun('type.num.num',fun('type.num.num',bool)),X394))) | s(bool,'F_0') = s(bool,X395)) )),
  inference(superposition,[],[f1400,f324])).
fof(f39362,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (s(bool,X389) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X388),s('type.num.num',X385))),s('type.num.num',X386))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X384),'const.wordSem.Loc_2'(s('type.num.num',X385),s('type.num.num',X386))),s(fun('type.fcp.cart'(bool,X384),bool),X387),s(fun('type.num.num',fun('type.num.num',bool)),X388))) | s(bool,'F_0') = s(bool,X389)) )),
  inference(superposition,[],[f1197,f324])).
fof(f39361,plain,(
  ( ! [X383,X379,X380,X382,X378,X381] : (s(bool,X383) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X382),s('type.num.num',X379))),s('type.num.num',X380))) | s(bool,'T_0') = s(bool,X383) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X378),'const.wordSem.Loc_2'(s('type.num.num',X379),s('type.num.num',X380))),s(fun('type.fcp.cart'(bool,X378),bool),X381),s(fun('type.num.num',fun('type.num.num',bool)),X382)))) )),
  inference(superposition,[],[f1197,f324])).
fof(f39499,plain,(
  ( ! [X335,X337,X334,X336,X338] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X338),s('type.num.num',X335))),s('type.num.num',X336))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X334),'const.wordSem.Loc_2'(s('type.num.num',X335),s('type.num.num',X336))),s(fun('type.fcp.cart'(bool,X334),bool),X337),s(fun('type.num.num',fun('type.num.num',bool)),X338)))) )),
  inference(forward_demodulation,[],[f39354,f270])).
fof(f39354,plain,(
  ( ! [X335,X337,X339,X334,X340,X336,X338] : (s(bool,'const.bool.DATATYPE_1'(s(X339,X340))) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X338),s('type.num.num',X335))),s('type.num.num',X336))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X334),'const.wordSem.Loc_2'(s('type.num.num',X335),s('type.num.num',X336))),s(fun('type.fcp.cart'(bool,X334),bool),X337),s(fun('type.num.num',fun('type.num.num',bool)),X338)))) )),
  inference(superposition,[],[f557,f324])).
fof(f39352,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X327),s('type.num.num',X324))),s('type.num.num',X325))))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X323),'const.wordSem.Loc_2'(s('type.num.num',X324),s('type.num.num',X325))),s(fun('type.fcp.cart'(bool,X323),bool),X326),s(fun('type.num.num',fun('type.num.num',bool)),X327)))) )),
  inference(superposition,[],[f398,f324])).
fof(f39294,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(bool,X59) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X58),s('type.num.num',X55))),s('type.num.num',X56))) | s(bool,'F_0') = s(bool,X59) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X54),'const.wordSem.Loc_2'(s('type.num.num',X55),s('type.num.num',X56))),s(fun('type.fcp.cart'(bool,X54),bool),X57),s(fun('type.num.num',fun('type.num.num',bool)),X58)))) )),
  inference(superposition,[],[f324,f1108])).
fof(f39292,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X46),s('type.num.num',X43))),s('type.num.num',X44))) | s(bool,X47) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X42),'const.wordSem.Loc_2'(s('type.num.num',X43),s('type.num.num',X44))),s(fun('type.fcp.cart'(bool,X42),bool),X45),s(fun('type.num.num',fun('type.num.num',bool)),X46))) | s(bool,'F_0') = s(bool,X47)) )),
  inference(superposition,[],[f324,f1108])).
fof(f39465,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X39),s('type.num.num',X36))),s('type.num.num',X37))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X35),'const.wordSem.Loc_2'(s('type.num.num',X36),s('type.num.num',X37))),s(fun('type.fcp.cart'(bool,X35),bool),X38),s(fun('type.num.num',fun('type.num.num',bool)),X39)))) )),
  inference(forward_demodulation,[],[f39291,f270])).
fof(f39291,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X40] : (s(bool,'const.bool.DATATYPE_1'(s(X40,X41))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X39),s('type.num.num',X36))),s('type.num.num',X37))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X35),'const.wordSem.Loc_2'(s('type.num.num',X36),s('type.num.num',X37))),s(fun('type.fcp.cart'(bool,X35),bool),X38),s(fun('type.num.num',fun('type.num.num',bool)),X39)))) )),
  inference(superposition,[],[f324,f1071])).
fof(f39288,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,X22) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X21),s('type.num.num',X18))),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num',X18),s('type.num.num',X19))),s(fun('type.fcp.cart'(bool,X17),bool),X20),s(fun('type.num.num',fun('type.num.num',bool)),X21)))) )),
  inference(superposition,[],[f324,f365])).
fof(f39287,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X15),s('type.num.num',X12))),s('type.num.num',X13))) | s(bool,X16) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num',X12),s('type.num.num',X13))),s(fun('type.fcp.cart'(bool,X11),bool),X14),s(fun('type.num.num',fun('type.num.num',bool)),X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f324,f365])).
fof(f39286,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X10),s('type.num.num',X7))),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X7),s('type.num.num',X8))),s(fun('type.fcp.cart'(bool,X6),bool),X9),s(fun('type.num.num',fun('type.num.num',bool)),X10)))) )),
  inference(superposition,[],[f324,f242])).
fof(f38758,plain,(
  ( ! [X218,X220,X219] : (s(bool,X218) = s(bool,'|dollar|exists_1'(s(fun(X220,bool),sK7('?_1',fun(X220,bool))))) | s(bool,'F_0') = s(bool,sK3(X218,X219,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X219)))) )),
  inference(superposition,[],[f23772,f565])).
fof(f38756,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (s(bool,X210) = s(bool,'|dollar|exists_1'(s(fun(X212,bool),sK7('?_1',fun(X212,bool))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X206),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X206),bool),X207),s(fun('type.wordSem.word_loc'(X206),bool),X208),s(fun('type.wordSem.word_loc'(X206),bool),X209),s(bool,X210),s(bool,X211)))) )),
  inference(superposition,[],[f23772,f326])).
fof(f38755,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (s(bool,X204) = s(bool,'|dollar|exists_1'(s(fun(X205,bool),sK7('?_1',fun(X205,bool))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X199),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X199),bool),X200),s(fun('type.wordSem.word_loc'(X199),bool),X201),s(fun('type.wordSem.word_loc'(X199),bool),X202),s(bool,X203),s(bool,X204)))) )),
  inference(superposition,[],[f23772,f325])).
fof(f38753,plain,(
  ( ! [X194,X192,X193] : (s(bool,X192) = s(bool,'|dollar|exists_1'(s(fun(X194,bool),sK7('?_1',fun(X194,bool))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X192),s(fun('type.num.num',bool),X193),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f23772,f284])).
fof(f38750,plain,(
  ( ! [X180,X178,X181,X179] : (s(bool,X179) = s(bool,'|dollar|exists_1'(s(fun(X181,bool),sK7('?_1',fun(X181,bool))))) | s(bool,'F_0') = s(bool,happ(s(fun(X178,bool),'_dst_x0_1'(s(bool,X179))),s(X178,X180)))) )),
  inference(superposition,[],[f23772,f320])).
fof(f38746,plain,(
  ( ! [X158,X159] : (s(bool,X158) = s(bool,'|dollar|exists_1'(s(fun(X159,bool),sK7('?_1',fun(X159,bool))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X158)))) )),
  inference(superposition,[],[f23772,f271])).
fof(f38595,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X87,X88,X85,X84)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X87,X88,sK3(X85,X86,'type.fcp.cart'(bool,X84)),X84)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.fcp.cart'(bool,X84),bool),X86)))) )),
  inference(forward_demodulation,[],[f38529,f303])).
fof(f38529,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X84),'const.wordSem.Loc_2'(s('type.num.num',X87),s('type.num.num',X88))),s('type.wordSem.word_loc'(X84),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X84),X85))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X87,X88,sK3(X85,X86,'type.fcp.cart'(bool,X84)),X84)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.fcp.cart'(bool,X84),bool),X86)))) )),
  inference(superposition,[],[f303,f565])).
fof(f38594,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X82,X83,happ(s(fun('type.fcp.cart'(bool,X78),'type.fcp.cart'(bool,X77)),X80),s('type.fcp.cart'(bool,X78),X79)),X77)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X82,X83,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X78),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X78),X79))),s(fun('type.fcp.cart'(bool,X78),'type.fcp.cart'(bool,X77)),X80),s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X77))),X81)),X77)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38528,f303])).
fof(f38528,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X77),'const.wordSem.Loc_2'(s('type.num.num',X82),s('type.num.num',X83))),s('type.wordSem.word_loc'(X77),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X77),happ(s(fun('type.fcp.cart'(bool,X78),'type.fcp.cart'(bool,X77)),X80),s('type.fcp.cart'(bool,X78),X79))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X82,X83,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X78),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X78),X79))),s(fun('type.fcp.cart'(bool,X78),'type.fcp.cart'(bool,X77)),X80),s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X77))),X81)),X77)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f323])).
fof(f38593,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X75,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X75,X76,X73,X68)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X75,X76,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X69),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X69),'type.fcp.cart'(bool,X68)),X70),s(fun('type.wordSem.word_loc'(X69),'type.fcp.cart'(bool,X68)),X71),s(fun('type.wordSem.word_loc'(X69),'type.fcp.cart'(bool,X68)),X72),s('type.fcp.cart'(bool,X68),X73),s('type.fcp.cart'(bool,X68),X74)),X68)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38527,f303])).
fof(f38527,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X75,X73] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X68),'const.wordSem.Loc_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.wordSem.word_loc'(X68),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X68),X73))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X75,X76,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X69),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X69),'type.fcp.cart'(bool,X68)),X70),s(fun('type.wordSem.word_loc'(X69),'type.fcp.cart'(bool,X68)),X71),s(fun('type.wordSem.word_loc'(X69),'type.fcp.cart'(bool,X68)),X72),s('type.fcp.cart'(bool,X68),X73),s('type.fcp.cart'(bool,X68),X74)),X68)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f326])).
fof(f38592,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X67,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X66,X67,X65,X59)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X66,X67,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X60),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X60),'type.fcp.cart'(bool,X59)),X61),s(fun('type.wordSem.word_loc'(X60),'type.fcp.cart'(bool,X59)),X62),s(fun('type.wordSem.word_loc'(X60),'type.fcp.cart'(bool,X59)),X63),s('type.fcp.cart'(bool,X59),X64),s('type.fcp.cart'(bool,X59),X65)),X59)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38526,f303])).
fof(f38526,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X67,X65,X63] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X59),'const.wordSem.Loc_2'(s('type.num.num',X66),s('type.num.num',X67))),s('type.wordSem.word_loc'(X59),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X59),X65))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X66,X67,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X60),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X60),'type.fcp.cart'(bool,X59)),X61),s(fun('type.wordSem.word_loc'(X60),'type.fcp.cart'(bool,X59)),X62),s(fun('type.wordSem.word_loc'(X60),'type.fcp.cart'(bool,X59)),X63),s('type.fcp.cart'(bool,X59),X64),s('type.fcp.cart'(bool,X59),X65)),X59)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f325])).
fof(f38591,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X57,X58,happ(s(fun('type.num.num','type.fcp.cart'(bool,X53)),X55),s('type.num.num',X56)),X53)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X57,X58,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X53),X54),s(fun('type.num.num','type.fcp.cart'(bool,X53)),X55),s('type.num.num','const.num.SUC_1'(s('type.num.num',X56)))),X53)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38525,f303])).
fof(f38525,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X53),'const.wordSem.Loc_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.wordSem.word_loc'(X53),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X53),happ(s(fun('type.num.num','type.fcp.cart'(bool,X53)),X55),s('type.num.num',X56))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X57,X58,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X53),X54),s(fun('type.num.num','type.fcp.cart'(bool,X53)),X55),s('type.num.num','const.num.SUC_1'(s('type.num.num',X56)))),X53)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f298])).
fof(f38590,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X51,X52,X49,X48)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X51,X52,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X48),X49),s(fun('type.num.num','type.fcp.cart'(bool,X48)),X50),s('type.num.num','const.num.|48|_0')),X48)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38524,f303])).
fof(f38524,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X48),'const.wordSem.Loc_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.wordSem.word_loc'(X48),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X48),X49))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X51,X52,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X48),X49),s(fun('type.num.num','type.fcp.cart'(bool,X48)),X50),s('type.num.num','const.num.|48|_0')),X48)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f284])).
fof(f38589,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X46,X47,happ(s(fun(X43,'type.fcp.cart'(bool,X42)),X45),s(X43,X44)),X42)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X46,X47,happ(s(fun(fun(X43,'type.fcp.cart'(bool,X42)),'type.fcp.cart'(bool,X42)),'_dstsel_0_x0_1'(s(X43,X44))),s(fun(X43,'type.fcp.cart'(bool,X42)),X45)),X42)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38523,f303])).
fof(f38523,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X42),'const.wordSem.Loc_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.wordSem.word_loc'(X42),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X42),happ(s(fun(X43,'type.fcp.cart'(bool,X42)),X45),s(X43,X44))))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X46,X47,happ(s(fun(fun(X43,'type.fcp.cart'(bool,X42)),'type.fcp.cart'(bool,X42)),'_dstsel_0_x0_1'(s(X43,X44))),s(fun(X43,'type.fcp.cart'(bool,X42)),X45)),X42)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f321])).
fof(f38522,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X40,X41,happ(s(fun(X35,'type.fcp.cart'(bool,X34)),'_dst_x1x0_2'(s(fun(X35,fun(X36,'type.fcp.cart'(bool,X34))),X37),s(X36,X38))),s(X35,X39)),X34)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X34),'const.wordSem.Loc_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.wordSem.word_loc'(X34),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X34),happ(s(fun(X36,'type.fcp.cart'(bool,X34)),happ(s(fun(X35,fun(X36,'type.fcp.cart'(bool,X34))),X37),s(X35,X39))),s(X36,X38)))))))) )),
  inference(superposition,[],[f303,f334])).
fof(f38588,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X32,X33,X30,X28)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X32,X33,happ(s(fun(X29,'type.fcp.cart'(bool,X28)),'_dst_x0_1'(s('type.fcp.cart'(bool,X28),X30))),s(X29,X31)),X28)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38521,f303])).
fof(f38521,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X28),'const.wordSem.Loc_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.wordSem.word_loc'(X28),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X28),X30))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X32,X33,happ(s(fun(X29,'type.fcp.cart'(bool,X28)),'_dst_x0_1'(s('type.fcp.cart'(bool,X28),X30))),s(X29,X31)),X28)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f320])).
fof(f38520,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X26,X27,happ(s(fun(X21,'type.fcp.cart'(bool,X20)),happ(s(fun(X22,fun(X21,'type.fcp.cart'(bool,X20))),X23),s(X22,X24))),s(X21,X25)),X20)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X20),'const.wordSem.Loc_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.wordSem.word_loc'(X20),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X20),happ(s(fun(X22,'type.fcp.cart'(bool,X20)),'_dst_x1x0_2'(s(fun(X22,fun(X21,'type.fcp.cart'(bool,X20))),X23),s(X21,X25))),s(X22,X24)))))))) )),
  inference(superposition,[],[f303,f334])).
fof(f38519,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X18,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X18,X19,happ(s(fun(X13,'type.fcp.cart'(bool,X12)),'_dst_x0x1_2'(s(fun(X14,'type.fcp.cart'(bool,X12)),X15),s(fun(X13,X14),X16))),s(X13,X17)),X12)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X12),'const.wordSem.Loc_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.wordSem.word_loc'(X12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X12),happ(s(fun(X14,'type.fcp.cart'(bool,X12)),X15),s(X14,happ(s(fun(X13,X14),X16),s(X13,X17)))))))))) )),
  inference(superposition,[],[f303,f333])).
fof(f38518,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X10,X11,happ(s(fun(X5,'type.fcp.cart'(bool,X4)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),X4)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X4),'const.wordSem.Loc_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.wordSem.word_loc'(X4),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X4),happ(s(fun(X7,'type.fcp.cart'(bool,X4)),'_dst_x0x1_2'(s(fun(X5,'type.fcp.cart'(bool,X4)),X6),s(fun(X7,X5),X8))),s(X7,X9)))))))) )),
  inference(superposition,[],[f303,f333])).
fof(f38587,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X2,X3,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X2,X3,happ(s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_i_0_0'),s('type.fcp.cart'(bool,X0),X1)),X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38517,f303])).
fof(f38517,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X2,X3,happ(s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_i_0_0'),s('type.fcp.cart'(bool,X0),X1)),X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f271])).
fof(f38586,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X132,X130,X133,X134)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X132,sK3(X130,X131,'type.num.num'),X133,X134)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),X131)))) )),
  inference(forward_demodulation,[],[f38516,f303])).
fof(f38516,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X132,sK3(X130,X131,'type.num.num'),X133,X134)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X134),'const.wordSem.Loc_2'(s('type.num.num',X132),s('type.num.num',X130))),s('type.wordSem.word_loc'(X134),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X134),X133))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),X131)))) )),
  inference(superposition,[],[f303,f565])).
fof(f38585,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X127,happ(s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s('type.fcp.cart'(bool,X123),X124)),X128,X129)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X127,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X123),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X123),X124))),s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s(fun('type.num.num',fun('type.num.num','type.num.num')),X126)),X128,X129)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38515,f303])).
fof(f38515,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X129),'const.wordSem.Loc_2'(s('type.num.num',X127),s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s('type.fcp.cart'(bool,X123),X124))))),s('type.wordSem.word_loc'(X129),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X129),X128))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X127,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X123),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X123),X124))),s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s(fun('type.num.num',fun('type.num.num','type.num.num')),X126)),X128,X129)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f323])).
fof(f38584,plain,(
  ( ! [X121,X118,X116,X114,X122,X120,X119,X117,X115] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X120,X118,X121,X122)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X120,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X114),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X115),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X116),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X117),s('type.num.num',X118),s('type.num.num',X119)),X121,X122)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38514,f303])).
fof(f38514,plain,(
  ( ! [X121,X118,X116,X114,X122,X120,X119,X117,X115] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X122),'const.wordSem.Loc_2'(s('type.num.num',X120),s('type.num.num',X118))),s('type.wordSem.word_loc'(X122),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X122),X121))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X120,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X114),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X115),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X116),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X117),s('type.num.num',X118),s('type.num.num',X119)),X121,X122)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f326])).
fof(f38583,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X113] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X111,X110,X112,X113)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X111,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X105),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X106),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X107),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X108),s('type.num.num',X109),s('type.num.num',X110)),X112,X113)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38513,f303])).
fof(f38513,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X113] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X113),'const.wordSem.Loc_2'(s('type.num.num',X111),s('type.num.num',X110))),s('type.wordSem.word_loc'(X113),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X113),X112))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X111,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X105),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X106),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X107),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X108),s('type.num.num',X109),s('type.num.num',X110)),X112,X113)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f325])).
fof(f38582,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X102,happ(s(fun('type.num.num','type.num.num'),X100),s('type.num.num',X101)),X103,X104)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X102,'const.ind_type.FCONS_3'(s('type.num.num',X99),s(fun('type.num.num','type.num.num'),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))),X103,X104)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38512,f303])).
fof(f38512,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X104),'const.wordSem.Loc_2'(s('type.num.num',X102),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X100),s('type.num.num',X101))))),s('type.wordSem.word_loc'(X104),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X104),X103))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X102,'const.ind_type.FCONS_3'(s('type.num.num',X99),s(fun('type.num.num','type.num.num'),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))),X103,X104)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f298])).
fof(f38581,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X96,X94,X97,X98)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X96,'const.ind_type.FCONS_3'(s('type.num.num',X94),s(fun('type.num.num','type.num.num'),X95),s('type.num.num','const.num.|48|_0')),X97,X98)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38511,f303])).
fof(f38511,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X98),'const.wordSem.Loc_2'(s('type.num.num',X96),s('type.num.num',X94))),s('type.wordSem.word_loc'(X98),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X98),X97))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X96,'const.ind_type.FCONS_3'(s('type.num.num',X94),s(fun('type.num.num','type.num.num'),X95),s('type.num.num','const.num.|48|_0')),X97,X98)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f284])).
fof(f38580,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X91,happ(s(fun(X88,'type.num.num'),X90),s(X88,X89)),X92,X93)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X91,happ(s(fun(fun(X88,'type.num.num'),'type.num.num'),'_dstsel_0_x0_1'(s(X88,X89))),s(fun(X88,'type.num.num'),X90)),X92,X93)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38510,f303])).
fof(f38510,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X93),'const.wordSem.Loc_2'(s('type.num.num',X91),s('type.num.num',happ(s(fun(X88,'type.num.num'),X90),s(X88,X89))))),s('type.wordSem.word_loc'(X93),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X93),X92))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X91,happ(s(fun(fun(X88,'type.num.num'),'type.num.num'),'_dstsel_0_x0_1'(s(X88,X89))),s(fun(X88,'type.num.num'),X90)),X92,X93)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f321])).
fof(f38509,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X85,happ(s(fun(X80,'type.num.num'),'_dst_x1x0_2'(s(fun(X80,fun(X81,'type.num.num')),X82),s(X81,X83))),s(X80,X84)),X86,X87)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X87),'const.wordSem.Loc_2'(s('type.num.num',X85),s('type.num.num',happ(s(fun(X81,'type.num.num'),happ(s(fun(X80,fun(X81,'type.num.num')),X82),s(X80,X84))),s(X81,X83))))),s('type.wordSem.word_loc'(X87),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X87),X86)))))) )),
  inference(superposition,[],[f303,f334])).
fof(f38579,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X77,X75,X78,X79)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X77,happ(s(fun(X74,'type.num.num'),'_dst_x0_1'(s('type.num.num',X75))),s(X74,X76)),X78,X79)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38508,f303])).
fof(f38508,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X79),'const.wordSem.Loc_2'(s('type.num.num',X77),s('type.num.num',X75))),s('type.wordSem.word_loc'(X79),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X79),X78))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X77,happ(s(fun(X74,'type.num.num'),'_dst_x0_1'(s('type.num.num',X75))),s(X74,X76)),X78,X79)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f320])).
fof(f38507,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X71,happ(s(fun(X66,'type.num.num'),happ(s(fun(X67,fun(X66,'type.num.num')),X68),s(X67,X69))),s(X66,X70)),X72,X73)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X73),'const.wordSem.Loc_2'(s('type.num.num',X71),s('type.num.num',happ(s(fun(X67,'type.num.num'),'_dst_x1x0_2'(s(fun(X67,fun(X66,'type.num.num')),X68),s(X66,X70))),s(X67,X69))))),s('type.wordSem.word_loc'(X73),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X73),X72)))))) )),
  inference(superposition,[],[f303,f334])).
fof(f38506,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X63,happ(s(fun(X58,'type.num.num'),'_dst_x0x1_2'(s(fun(X59,'type.num.num'),X60),s(fun(X58,X59),X61))),s(X58,X62)),X64,X65)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X65),'const.wordSem.Loc_2'(s('type.num.num',X63),s('type.num.num',happ(s(fun(X59,'type.num.num'),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))))),s('type.wordSem.word_loc'(X65),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X65),X64)))))) )),
  inference(superposition,[],[f303,f333])).
fof(f38505,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X55,happ(s(fun(X50,'type.num.num'),X51),s(X50,happ(s(fun(X52,X50),X53),s(X52,X54)))),X56,X57)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X57),'const.wordSem.Loc_2'(s('type.num.num',X55),s('type.num.num',happ(s(fun(X52,'type.num.num'),'_dst_x0x1_2'(s(fun(X50,'type.num.num'),X51),s(fun(X52,X50),X53))),s(X52,X54))))),s('type.wordSem.word_loc'(X57),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X57),X56)))))) )),
  inference(superposition,[],[f303,f333])).
fof(f38578,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X47,X46,X48,X49)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X47,happ(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num',X46)),X48,X49)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38504,f303])).
fof(f38504,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X49),'const.wordSem.Loc_2'(s('type.num.num',X47),s('type.num.num',X46))),s('type.wordSem.word_loc'(X49),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X49),X48))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X47,happ(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num',X46)),X48,X49)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f271])).
fof(f38576,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num',X31),s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X28),X30))))))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X28,'type.num.num'),X29),s('type.wordSem.word_loc'(X28),X30)))),X32,X33)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38501,f35045])).
fof(f38501,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num',X31),s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X28),X30))))))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X28,'type.num.num'),X29),s('type.wordSem.word_loc'(X28),X30)))),X32,X33)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f287])).
fof(f38575,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X25,'const.num.|48|_0',X26,X27)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X25,'const.stackSem.result_size_2'(s(fun(X23,'type.num.num'),X24),s('type.stackSem.result'(X23),'const.stackSem.TimeOut_0')),X26,X27)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38500,f303])).
fof(f38500,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X27),'const.wordSem.Loc_2'(s('type.num.num',X25),s('type.num.num','const.num.|48|_0'))),s('type.wordSem.word_loc'(X27),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X27),X26))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X25,'const.stackSem.result_size_2'(s(fun(X23,'type.num.num'),X24),s('type.stackSem.result'(X23),'const.stackSem.TimeOut_0')),X26,X27)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f273])).
fof(f38574,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X20,'const.num.|48|_0',X21,X22)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X20,'const.stackSem.result_size_2'(s(fun(X18,'type.num.num'),X19),s('type.stackSem.result'(X18),'const.stackSem.Error_0')),X21,X22)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38499,f303])).
fof(f38499,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X22),'const.wordSem.Loc_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))),s('type.wordSem.word_loc'(X22),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X22),X21))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X20,'const.stackSem.result_size_2'(s(fun(X18,'type.num.num'),X19),s('type.stackSem.result'(X18),'const.stackSem.Error_0')),X21,X22)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f272])).
fof(f38498,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X15,'const.stackSem.result_size_2'(s(fun(X12,'type.num.num'),X13),s('type.stackSem.result'(X12),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X12),X14)))),X16,X17)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X12,'type.num.num'),X13),s('type.wordSem.word_loc'(X12),X14))))))),s('type.wordSem.word_loc'(X17),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X17),X16)))))) )),
  inference(superposition,[],[f303,f287])).
fof(f38497,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X9,'const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X7),s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8)))),X10,X11)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X7),s('type.wordSem.word_loc'(X6),X8))))))),s('type.wordSem.word_loc'(X11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X11),X10)))))) )),
  inference(superposition,[],[f303,f286])).
fof(f38496,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,'const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2)))),X4,X5)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X5),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))),s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X4)))))) )),
  inference(superposition,[],[f303,f285])).
fof(f38573,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X130,X132,X133,X134)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(sK3(X130,X131,'type.num.num'),X132,X133,X134)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),X131)))) )),
  inference(forward_demodulation,[],[f38495,f303])).
fof(f38495,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(sK3(X130,X131,'type.num.num'),X132,X133,X134)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X134),'const.wordSem.Loc_2'(s('type.num.num',X130),s('type.num.num',X132))),s('type.wordSem.word_loc'(X134),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X134),X133))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),X131)))) )),
  inference(superposition,[],[f303,f565])).
fof(f38572,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s('type.fcp.cart'(bool,X123),X124)),X127,X128,X129)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X123),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X123),X124))),s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s(fun('type.num.num',fun('type.num.num','type.num.num')),X126)),X127,X128,X129)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38494,f303])).
fof(f38494,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X129),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s('type.fcp.cart'(bool,X123),X124))),s('type.num.num',X127))),s('type.wordSem.word_loc'(X129),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X129),X128))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X123),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X123),X124))),s(fun('type.fcp.cart'(bool,X123),'type.num.num'),X125),s(fun('type.num.num',fun('type.num.num','type.num.num')),X126)),X127,X128,X129)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f323])).
fof(f38571,plain,(
  ( ! [X121,X118,X116,X114,X122,X120,X119,X117,X115] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X118,X120,X121,X122)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X114),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X115),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X116),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X117),s('type.num.num',X118),s('type.num.num',X119)),X120,X121,X122)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38493,f303])).
fof(f38493,plain,(
  ( ! [X121,X118,X116,X114,X122,X120,X119,X117,X115] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X122),'const.wordSem.Loc_2'(s('type.num.num',X118),s('type.num.num',X120))),s('type.wordSem.word_loc'(X122),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X122),X121))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X114),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X115),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X116),s(fun('type.wordSem.word_loc'(X114),'type.num.num'),X117),s('type.num.num',X118),s('type.num.num',X119)),X120,X121,X122)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f326])).
fof(f38570,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X113] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X110,X111,X112,X113)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X105),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X106),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X107),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X108),s('type.num.num',X109),s('type.num.num',X110)),X111,X112,X113)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38492,f303])).
fof(f38492,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X113] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X113),'const.wordSem.Loc_2'(s('type.num.num',X110),s('type.num.num',X111))),s('type.wordSem.word_loc'(X113),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X113),X112))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X105),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X106),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X107),s(fun('type.wordSem.word_loc'(X105),'type.num.num'),X108),s('type.num.num',X109),s('type.num.num',X110)),X111,X112,X113)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f325])).
fof(f38569,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.num.num','type.num.num'),X100),s('type.num.num',X101)),X102,X103,X104)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.ind_type.FCONS_3'(s('type.num.num',X99),s(fun('type.num.num','type.num.num'),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))),X102,X103,X104)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38491,f303])).
fof(f38491,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X104),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X100),s('type.num.num',X101))),s('type.num.num',X102))),s('type.wordSem.word_loc'(X104),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X104),X103))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.ind_type.FCONS_3'(s('type.num.num',X99),s(fun('type.num.num','type.num.num'),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))),X102,X103,X104)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f298])).
fof(f38568,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X94,X96,X97,X98)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.ind_type.FCONS_3'(s('type.num.num',X94),s(fun('type.num.num','type.num.num'),X95),s('type.num.num','const.num.|48|_0')),X96,X97,X98)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38490,f303])).
fof(f38490,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X98),'const.wordSem.Loc_2'(s('type.num.num',X94),s('type.num.num',X96))),s('type.wordSem.word_loc'(X98),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X98),X97))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.ind_type.FCONS_3'(s('type.num.num',X94),s(fun('type.num.num','type.num.num'),X95),s('type.num.num','const.num.|48|_0')),X96,X97,X98)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f284])).
fof(f38567,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X88,'type.num.num'),X90),s(X88,X89)),X91,X92,X93)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(fun(X88,'type.num.num'),'type.num.num'),'_dstsel_0_x0_1'(s(X88,X89))),s(fun(X88,'type.num.num'),X90)),X91,X92,X93)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38489,f303])).
fof(f38489,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X93),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X88,'type.num.num'),X90),s(X88,X89))),s('type.num.num',X91))),s('type.wordSem.word_loc'(X93),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X93),X92))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(fun(X88,'type.num.num'),'type.num.num'),'_dstsel_0_x0_1'(s(X88,X89))),s(fun(X88,'type.num.num'),X90)),X91,X92,X93)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f321])).
fof(f38488,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X80,'type.num.num'),'_dst_x1x0_2'(s(fun(X80,fun(X81,'type.num.num')),X82),s(X81,X83))),s(X80,X84)),X85,X86,X87)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X87),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X81,'type.num.num'),happ(s(fun(X80,fun(X81,'type.num.num')),X82),s(X80,X84))),s(X81,X83))),s('type.num.num',X85))),s('type.wordSem.word_loc'(X87),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X87),X86)))))) )),
  inference(superposition,[],[f303,f334])).
fof(f38566,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X75,X77,X78,X79)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X74,'type.num.num'),'_dst_x0_1'(s('type.num.num',X75))),s(X74,X76)),X77,X78,X79)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38487,f303])).
fof(f38487,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X79),'const.wordSem.Loc_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.wordSem.word_loc'(X79),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X79),X78))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X74,'type.num.num'),'_dst_x0_1'(s('type.num.num',X75))),s(X74,X76)),X77,X78,X79)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f320])).
fof(f38486,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X66,'type.num.num'),happ(s(fun(X67,fun(X66,'type.num.num')),X68),s(X67,X69))),s(X66,X70)),X71,X72,X73)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X73),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X67,'type.num.num'),'_dst_x1x0_2'(s(fun(X67,fun(X66,'type.num.num')),X68),s(X66,X70))),s(X67,X69))),s('type.num.num',X71))),s('type.wordSem.word_loc'(X73),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X73),X72)))))) )),
  inference(superposition,[],[f303,f334])).
fof(f38485,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X58,'type.num.num'),'_dst_x0x1_2'(s(fun(X59,'type.num.num'),X60),s(fun(X58,X59),X61))),s(X58,X62)),X63,X64,X65)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X65),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X59,'type.num.num'),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))),s('type.num.num',X63))),s('type.wordSem.word_loc'(X65),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X65),X64)))))) )),
  inference(superposition,[],[f303,f333])).
fof(f38484,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun(X50,'type.num.num'),X51),s(X50,happ(s(fun(X52,X50),X53),s(X52,X54)))),X55,X56,X57)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X57),'const.wordSem.Loc_2'(s('type.num.num',happ(s(fun(X52,'type.num.num'),'_dst_x0x1_2'(s(fun(X50,'type.num.num'),X51),s(fun(X52,X50),X53))),s(X52,X54))),s('type.num.num',X55))),s('type.wordSem.word_loc'(X57),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X57),X56)))))) )),
  inference(superposition,[],[f303,f333])).
fof(f38565,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X46,X47,X48,X49)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num',X46)),X47,X48,X49)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38483,f303])).
fof(f38483,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X49),'const.wordSem.Loc_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.wordSem.word_loc'(X49),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X49),X48))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(happ(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num',X46)),X47,X48,X49)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f271])).
fof(f38563,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X28),X30))))),s('type.num.num',X31))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X28,'type.num.num'),X29),s('type.wordSem.word_loc'(X28),X30)))),X31,X32,X33)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38480,f35045])).
fof(f38480,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X33),'const.wordSem.Loc_2'(s('type.num.num','const.stackSem.result_size_2'(s(fun(X28,'type.num.num'),X29),s('type.stackSem.result'(X28),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X28),X30))))),s('type.num.num',X31))),s('type.wordSem.word_loc'(X33),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X33),X32))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X28,'type.num.num'),X29),s('type.wordSem.word_loc'(X28),X30)))),X31,X32,X33)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f287])).
fof(f38562,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.num.|48|_0',X25,X26,X27)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X23,'type.num.num'),X24),s('type.stackSem.result'(X23),'const.stackSem.TimeOut_0')),X25,X26,X27)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38479,f303])).
fof(f38479,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X27),'const.wordSem.Loc_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.wordSem.word_loc'(X27),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X27),X26))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X23,'type.num.num'),X24),s('type.stackSem.result'(X23),'const.stackSem.TimeOut_0')),X25,X26,X27)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f273])).
fof(f38561,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.num.|48|_0',X20,X21,X22)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X18,'type.num.num'),X19),s('type.stackSem.result'(X18),'const.stackSem.Error_0')),X20,X21,X22)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(forward_demodulation,[],[f38478,f303])).
fof(f38478,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X22),'const.wordSem.Loc_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))),s('type.wordSem.word_loc'(X22),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X22),X21))))) = s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X18,'type.num.num'),X19),s('type.stackSem.result'(X18),'const.stackSem.Error_0')),X20,X21,X22)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0')))) )),
  inference(superposition,[],[f303,f272])).
fof(f38477,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X12,'type.num.num'),X13),s('type.stackSem.result'(X12),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X12),X14)))),X15,X16,X17)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X17),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X12,'type.num.num'),X13),s('type.wordSem.word_loc'(X12),X14))))),s('type.num.num',X15))),s('type.wordSem.word_loc'(X17),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X17),X16)))))) )),
  inference(superposition,[],[f303,f287])).
fof(f38476,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X7),s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8)))),X9,X10,X11)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X11),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X7),s('type.wordSem.word_loc'(X6),X8))))),s('type.num.num',X9))),s('type.wordSem.word_loc'(X11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X11),X10)))))) )),
  inference(superposition,[],[f303,f286])).
fof(f38475,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4('const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2)))),X3,X4,X5)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X5),'const.wordSem.Loc_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))),s('type.num.num',X3))),s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X4)))))) )),
  inference(superposition,[],[f303,f285])).
fof(f37919,plain,(
  ( ! [X1017,X1011,X1015,X1013,X1016,X1010,X1014,X1012] : (s('type.fcp.cart'(bool,X1010),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1010),happ(s(fun(X1012,'type.fcp.cart'(bool,X1010)),'_dst_x1x0_2'(s(fun(X1012,fun(X1011,'type.fcp.cart'(bool,X1010))),X1013),s(X1011,X1015))),s(X1012,X1014))) | p(s(bool,sK4(X1016,X1017,happ(s(fun(X1011,'type.fcp.cart'(bool,X1010)),happ(s(fun(X1012,fun(X1011,'type.fcp.cart'(bool,X1010))),X1013),s(X1012,X1014))),s(X1011,X1015)),X1010)))) )),
  inference(superposition,[],[f302,f334])).
fof(f37911,plain,(
  ( ! [X957,X951,X954,X952,X956,X955,X953] : (s('type.wordSem.word_loc'(X951),X957) != s('type.wordSem.word_loc'(X951),happ(s(fun(X953,'type.wordSem.word_loc'(X951)),'_dst_x1x0_2'(s(fun(X953,fun(X952,'type.wordSem.word_loc'(X951))),X954),s(X952,X956))),s(X953,X955))) | s('type.stackSem.result'(X951),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X951),X957))) = s('type.stackSem.result'(X951),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X951),happ(s(fun(X952,'type.wordSem.word_loc'(X951)),happ(s(fun(X953,fun(X952,'type.wordSem.word_loc'(X951))),X954),s(X953,X955))),s(X952,X956)))))) )),
  inference(superposition,[],[f295,f334])).
fof(f37909,plain,(
  ( ! [X938,X942,X940,X939,X937,X943,X941] : (s('type.stackSem.result'(X937),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X937),X943))) != s('type.stackSem.result'(X937),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X937),happ(s(fun(X939,'type.wordSem.word_loc'(X937)),'_dst_x1x0_2'(s(fun(X939,fun(X938,'type.wordSem.word_loc'(X937))),X940),s(X938,X942))),s(X939,X941))))) | s('type.wordSem.word_loc'(X937),X943) = s('type.wordSem.word_loc'(X937),happ(s(fun(X938,'type.wordSem.word_loc'(X937)),happ(s(fun(X939,fun(X938,'type.wordSem.word_loc'(X937))),X940),s(X939,X941))),s(X938,X942)))) )),
  inference(superposition,[],[f294,f334])).
fof(f37907,plain,(
  ( ! [X926,X924,X928,X923,X927,X925,X929] : (s('type.wordSem.word_loc'(X923),X929) != s('type.wordSem.word_loc'(X923),happ(s(fun(X925,'type.wordSem.word_loc'(X923)),'_dst_x1x0_2'(s(fun(X925,fun(X924,'type.wordSem.word_loc'(X923))),X926),s(X924,X928))),s(X925,X927))) | s('type.stackSem.result'(X923),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X923),X929))) = s('type.stackSem.result'(X923),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X923),happ(s(fun(X924,'type.wordSem.word_loc'(X923)),happ(s(fun(X925,fun(X924,'type.wordSem.word_loc'(X923))),X926),s(X925,X927))),s(X924,X928)))))) )),
  inference(superposition,[],[f293,f334])).
fof(f37905,plain,(
  ( ! [X912,X914,X911,X909,X915,X913,X910] : (s('type.stackSem.result'(X909),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X909),X915))) != s('type.stackSem.result'(X909),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X909),happ(s(fun(X911,'type.wordSem.word_loc'(X909)),'_dst_x1x0_2'(s(fun(X911,fun(X910,'type.wordSem.word_loc'(X909))),X912),s(X910,X914))),s(X911,X913))))) | s('type.wordSem.word_loc'(X909),X915) = s('type.wordSem.word_loc'(X909),happ(s(fun(X910,'type.wordSem.word_loc'(X909)),happ(s(fun(X911,fun(X910,'type.wordSem.word_loc'(X909))),X912),s(X911,X913))),s(X910,X914)))) )),
  inference(superposition,[],[f292,f334])).
fof(f37903,plain,(
  ( ! [X895,X899,X897,X901,X898,X896,X900] : (s('type.wordSem.word_loc'(X895),X901) != s('type.wordSem.word_loc'(X895),happ(s(fun(X897,'type.wordSem.word_loc'(X895)),'_dst_x1x0_2'(s(fun(X897,fun(X896,'type.wordSem.word_loc'(X895))),X898),s(X896,X900))),s(X897,X899))) | s('type.stackSem.result'(X895),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X895),X901))) = s('type.stackSem.result'(X895),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X895),happ(s(fun(X896,'type.wordSem.word_loc'(X895)),happ(s(fun(X897,fun(X896,'type.wordSem.word_loc'(X895))),X898),s(X897,X899))),s(X896,X900)))))) )),
  inference(superposition,[],[f291,f334])).
fof(f37901,plain,(
  ( ! [X883,X881,X887,X885,X882,X886,X884] : (s('type.stackSem.result'(X881),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X881),X887))) != s('type.stackSem.result'(X881),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X881),happ(s(fun(X883,'type.wordSem.word_loc'(X881)),'_dst_x1x0_2'(s(fun(X883,fun(X882,'type.wordSem.word_loc'(X881))),X884),s(X882,X886))),s(X883,X885))))) | s('type.wordSem.word_loc'(X881),X887) = s('type.wordSem.word_loc'(X881),happ(s(fun(X882,'type.wordSem.word_loc'(X881)),happ(s(fun(X883,fun(X882,'type.wordSem.word_loc'(X881))),X884),s(X883,X885))),s(X882,X886)))) )),
  inference(superposition,[],[f290,f334])).
fof(f37892,plain,(
  ( ! [X825,X829,X826,X828,X827] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X826,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X826,fun(X825,'type.wordSem.word_loc'(sK0))),X827),s(X825,X829))),s(X826,X828))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X825,'type.wordSem.word_loc'(sK0)),happ(s(fun(X826,fun(X825,'type.wordSem.word_loc'(sK0))),X827),s(X826,X828))),s(X825,X829)))) )),
  inference(superposition,[],[f2643,f334])).
fof(f37891,plain,(
  ( ! [X823,X821,X824,X822,X820] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X821,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X821,fun(X820,'type.wordSem.word_loc'(sK0))),X822),s(X820,X824))),s(X821,X823))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun(X820,'type.wordSem.word_loc'(sK0)),happ(s(fun(X821,fun(X820,'type.wordSem.word_loc'(sK0))),X822),s(X821,X823))),s(X820,X824)))))) )),
  inference(superposition,[],[f2651,f334])).
fof(f37890,plain,(
  ( ! [X819,X817,X814,X818,X816,X815,X813] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X814,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X814,fun(X813,'type.wordSem.word_loc'(sK0))),X815),s(X813,X817))),s(X814,X816))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X818,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X813,'type.wordSem.word_loc'(sK0)),happ(s(fun(X814,fun(X813,'type.wordSem.word_loc'(sK0))),X815),s(X814,X816))),s(X813,X817))))),s(X818,X819)))) )),
  inference(superposition,[],[f2652,f334])).
fof(f37889,plain,(
  ( ! [X810,X808,X812,X811,X809,X807] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X808,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X808,fun(X807,'type.wordSem.word_loc'(sK0))),X809),s(X807,X811))),s(X808,X810))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X807,'type.wordSem.word_loc'(sK0)),happ(s(fun(X808,fun(X807,'type.wordSem.word_loc'(sK0))),X809),s(X808,X810))),s(X807,X811))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X812),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f334])).
fof(f37888,plain,(
  ( ! [X802,X806,X804,X803,X801,X805] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X802,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X802,fun(X801,'type.wordSem.word_loc'(sK0))),X803),s(X801,X805))),s(X802,X804))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X801,'type.wordSem.word_loc'(sK0)),happ(s(fun(X802,fun(X801,'type.wordSem.word_loc'(sK0))),X803),s(X802,X804))),s(X801,X805)),X806,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X806)))) )),
  inference(superposition,[],[f2654,f334])).
fof(f37872,plain,(
  ( ! [X656,X658,X654,X657,X659,X653,X655] : (~p(s(bool,happ(s(fun(X653,bool),happ(s(fun(X655,fun(X653,bool)),'_dst_x1x0_2'(s(fun(X655,fun(X654,fun(X653,bool))),X656),s(X654,X658))),s(X655,X657))),s(X653,X659)))) | p(s(bool,'|dollar|exists_1'(s(fun(X653,bool),happ(s(fun(X654,fun(X653,bool)),happ(s(fun(X655,fun(X654,fun(X653,bool))),X656),s(X655,X657))),s(X654,X658))))))) )),
  inference(superposition,[],[f2633,f334])).
fof(f37871,plain,(
  ( ! [X652,X648,X650,X646,X649,X651,X647] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X646,bool),happ(s(fun(X648,fun(X646,bool)),'_dst_x1x0_2'(s(fun(X648,fun(X647,fun(X646,bool))),X649),s(X647,X651))),s(X648,X650))))) | s(X646,X652) = s(X646,sK3(X652,happ(s(fun(X647,fun(X646,bool)),happ(s(fun(X648,fun(X647,fun(X646,bool))),X649),s(X648,X650))),s(X647,X651)),X646))) )),
  inference(superposition,[],[f565,f334])).
fof(f37870,plain,(
  ( ! [X639,X644,X640,X642,X645,X641,X643] : (~p(s(bool,happ(s(fun(X639,bool),happ(s(fun(X641,fun(X639,bool)),'_dst_x1x0_2'(s(fun(X641,fun(X640,fun(X639,bool))),X642),s(X640,X644))),s(X641,X643))),s(X639,X645)))) | p(s(bool,happ(s(fun(fun(X639,bool),bool),'?_1'),s(fun(X639,bool),happ(s(fun(X640,fun(X639,bool)),happ(s(fun(X641,fun(X640,fun(X639,bool))),X642),s(X641,X643))),s(X640,X644))))))) )),
  inference(superposition,[],[f312,f334])).
fof(f37869,plain,(
  ( ! [X633,X635,X636,X638,X634,X637] : (~p(s(bool,happ(s(fun(fun(X633,bool),bool),'?_1'),s(fun(X633,bool),happ(s(fun(X635,fun(X633,bool)),'_dst_x1x0_2'(s(fun(X635,fun(X634,fun(X633,bool))),X636),s(X634,X638))),s(X635,X637)))))) | p(s(bool,happ(s(fun(X633,bool),happ(s(fun(X634,fun(X633,bool)),happ(s(fun(X635,fun(X634,fun(X633,bool))),X636),s(X635,X637))),s(X634,X638))),s(X633,sK7(happ(s(fun(X634,fun(X633,bool)),happ(s(fun(X635,fun(X634,fun(X633,bool))),X636),s(X635,X637))),s(X634,X638)),X633)))))) )),
  inference(superposition,[],[f311,f334])).
fof(f37868,plain,(
  ( ! [X629,X631,X627,X632,X628,X630] : (~p(s(bool,happ(s(fun(X627,bool),happ(s(fun(X629,fun(X627,bool)),'_dst_x1x0_2'(s(fun(X629,fun(X628,fun(X627,bool))),X630),s(X628,X632))),s(X629,X631))),s(X627,sK6(happ(s(fun(X628,fun(X627,bool)),happ(s(fun(X629,fun(X628,fun(X627,bool))),X630),s(X629,X631))),s(X628,X632)),X627))))) | p(s(bool,happ(s(fun(fun(X627,bool),bool),'!_1'),s(fun(X627,bool),happ(s(fun(X628,fun(X627,bool)),happ(s(fun(X629,fun(X628,fun(X627,bool))),X630),s(X629,X631))),s(X628,X632))))))) )),
  inference(superposition,[],[f310,f334])).
fof(f37867,plain,(
  ( ! [X625,X621,X623,X624,X626,X620,X622] : (~p(s(bool,happ(s(fun(fun(X620,bool),bool),'!_1'),s(fun(X620,bool),happ(s(fun(X622,fun(X620,bool)),'_dst_x1x0_2'(s(fun(X622,fun(X621,fun(X620,bool))),X623),s(X621,X625))),s(X622,X624)))))) | p(s(bool,happ(s(fun(X620,bool),happ(s(fun(X621,fun(X620,bool)),happ(s(fun(X622,fun(X621,fun(X620,bool))),X623),s(X622,X624))),s(X621,X625))),s(X620,X626))))) )),
  inference(superposition,[],[f309,f334])).
fof(f37866,plain,(
  ( ! [X617,X619,X613,X615,X616,X618,X614] : (p(s(bool,'|dollar|exists_1'(s(fun(X613,bool),happ(s(fun(X615,fun(X613,bool)),'_dst_x1x0_2'(s(fun(X615,fun(X614,fun(X613,bool))),X616),s(X614,X618))),s(X615,X617)))))) | s(X613,X619) = s(X613,sK3(X619,happ(s(fun(X614,fun(X613,bool)),happ(s(fun(X615,fun(X614,fun(X613,bool))),X616),s(X615,X617))),s(X614,X618)),X613))) )),
  inference(superposition,[],[f288,f334])).
fof(f37841,plain,(
  ( ! [X476,X478,X480,X475,X477,X479] : (~p(s(bool,happ(s(fun(X476,bool),'_dst_x1x0_2'(s(fun(X476,fun(X475,bool)),X477),s(X475,X479))),s(X476,X478)))) | p(s(bool,happ(s(fun(fun(X480,bool),bool),'!_1'),s(fun(X480,bool),'_dst_x0_1'(s(bool,happ(s(fun(X475,bool),happ(s(fun(X476,fun(X475,bool)),X477),s(X476,X478))),s(X475,X479))))))))) )),
  inference(superposition,[],[f5586,f334])).
fof(f37838,plain,(
  ( ! [X461,X463,X459,X460,X462,X464] : (~p(s(bool,happ(s(fun(X460,bool),'_dst_x1x0_2'(s(fun(X460,fun(X459,bool)),X461),s(X459,X463))),s(X460,X462)))) | p(s(bool,happ(s(fun(fun(X464,bool),bool),'?_1'),s(fun(X464,bool),'_dst_x0_1'(s(bool,happ(s(fun(X459,bool),happ(s(fun(X460,fun(X459,bool)),X461),s(X460,X462))),s(X459,X463))))))))) )),
  inference(superposition,[],[f4218,f334])).
fof(f37835,plain,(
  ( ! [X445,X447,X443,X444,X446,X448] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X448,bool),'_dst_x0_1'(s(bool,happ(s(fun(X444,bool),'_dst_x1x0_2'(s(fun(X444,fun(X443,bool)),X445),s(X443,X447))),s(X444,X446))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X443,bool),happ(s(fun(X444,fun(X443,bool)),X445),s(X444,X446))),s(X443,X447)))) )),
  inference(superposition,[],[f2213,f334])).
fof(f37832,plain,(
  ( ! [X428,X430,X426,X429,X425,X427] : (p(s(bool,'|dollar|exists_1'(s(fun(X430,bool),'_dst_x0_1'(s(bool,happ(s(fun(X426,bool),'_dst_x1x0_2'(s(fun(X426,fun(X425,bool)),X427),s(X425,X429))),s(X426,X428)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X425,bool),happ(s(fun(X426,fun(X425,bool)),X427),s(X426,X428))),s(X425,X429)))) )),
  inference(superposition,[],[f1936,f334])).
fof(f37831,plain,(
  ( ! [X420,X422,X424,X421,X423,X419] : (~p(s(bool,happ(s(fun(X420,bool),'_dst_x1x0_2'(s(fun(X420,fun(X419,bool)),X421),s(X419,X423))),s(X420,X422)))) | p(s(bool,'|dollar|exists_1'(s(fun(X424,bool),'_dst_x0_1'(s(bool,happ(s(fun(X419,bool),happ(s(fun(X420,fun(X419,bool)),X421),s(X420,X422))),s(X419,X423))))))))) )),
  inference(superposition,[],[f1802,f334])).
fof(f37830,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (s(bool,'T_0') != s(bool,happ(s(fun(X414,bool),'_dst_x1x0_2'(s(fun(X414,fun(X413,bool)),X415),s(X413,X417))),s(X414,X416))) | s(bool,X418) = s(bool,happ(s(fun(X413,bool),happ(s(fun(X414,fun(X413,bool)),X415),s(X414,X416))),s(X413,X417))) | s(bool,'F_0') = s(bool,X418)) )),
  inference(superposition,[],[f1400,f334])).
fof(f37829,plain,(
  ( ! [X412,X408,X410,X407,X409,X411] : (s(bool,X412) != s(bool,happ(s(fun(X408,bool),'_dst_x1x0_2'(s(fun(X408,fun(X407,bool)),X409),s(X407,X411))),s(X408,X410))) | s(bool,'T_0') = s(bool,happ(s(fun(X407,bool),happ(s(fun(X408,fun(X407,bool)),X409),s(X408,X410))),s(X407,X411))) | s(bool,'F_0') = s(bool,X412)) )),
  inference(superposition,[],[f1197,f334])).
fof(f37828,plain,(
  ( ! [X405,X401,X403,X404,X406,X402] : (s(bool,X406) != s(bool,happ(s(fun(X402,bool),'_dst_x1x0_2'(s(fun(X402,fun(X401,bool)),X403),s(X401,X405))),s(X402,X404))) | s(bool,'T_0') = s(bool,X406) | s(bool,'F_0') = s(bool,happ(s(fun(X401,bool),happ(s(fun(X402,fun(X401,bool)),X403),s(X402,X404))),s(X401,X405)))) )),
  inference(superposition,[],[f1197,f334])).
fof(f37822,plain,(
  ( ! [X364,X366,X368,X365,X367,X369] : (~p(s(bool,happ(s(fun(X365,bool),'_dst_x1x0_2'(s(fun(X365,fun(X364,bool)),X366),s(X364,X368))),s(X365,X367)))) | s(bool,X369) = s(bool,happ(s(fun(X364,bool),happ(s(fun(X365,fun(X364,bool)),X366),s(X365,X367))),s(X364,X368))) | s(bool,'F_0') = s(bool,X369)) )),
  inference(superposition,[],[f1037,f334])).
fof(f37978,plain,(
  ( ! [X358,X360,X357,X359,X361] : (s(bool,'T_0') != s(bool,happ(s(fun(X358,bool),'_dst_x1x0_2'(s(fun(X358,fun(X357,bool)),X359),s(X357,X361))),s(X358,X360))) | s(bool,'T_0') = s(bool,happ(s(fun(X357,bool),happ(s(fun(X358,fun(X357,bool)),X359),s(X358,X360))),s(X357,X361)))) )),
  inference(forward_demodulation,[],[f37821,f270])).
fof(f37821,plain,(
  ( ! [X358,X360,X362,X357,X359,X361,X363] : (s(bool,'const.bool.DATATYPE_1'(s(X362,X363))) != s(bool,happ(s(fun(X358,bool),'_dst_x1x0_2'(s(fun(X358,fun(X357,bool)),X359),s(X357,X361))),s(X358,X360))) | s(bool,'T_0') = s(bool,happ(s(fun(X357,bool),happ(s(fun(X358,fun(X357,bool)),X359),s(X358,X360))),s(X357,X361)))) )),
  inference(superposition,[],[f557,f334])).
fof(f37820,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (p(s(bool,happ(s(fun(X352,bool),'_dst_x1x0_2'(s(fun(X352,fun(X351,bool)),X353),s(X351,X355))),s(X352,X354)))) | s(bool,X356) = s(bool,happ(s(fun(X351,bool),happ(s(fun(X352,fun(X351,bool)),X353),s(X352,X354))),s(X351,X355))) | s(bool,'T_0') = s(bool,X356)) )),
  inference(superposition,[],[f425,f334])).
fof(f37819,plain,(
  ( ! [X350,X346,X349,X347,X348] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X347,bool),'_dst_x1x0_2'(s(fun(X347,fun(X346,bool)),X348),s(X346,X350))),s(X347,X349))))) | s(bool,'F_0') = s(bool,happ(s(fun(X346,bool),happ(s(fun(X347,fun(X346,bool)),X348),s(X347,X349))),s(X346,X350)))) )),
  inference(superposition,[],[f398,f334])).
fof(f37818,plain,(
  ( ! [X344,X341,X343,X345,X340,X342] : (~p(s(bool,happ(s(fun(X341,bool),'_dst_x1x0_2'(s(fun(X341,fun(X340,bool)),X342),s(X340,X344))),s(X341,X343)))) | s(bool,X345) != s(bool,happ(s(fun(X340,bool),happ(s(fun(X341,fun(X340,bool)),X342),s(X341,X343))),s(X340,X344))) | s(bool,'T_0') = s(bool,X345)) )),
  inference(superposition,[],[f368,f334])).
fof(f37813,plain,(
  ( ! [X313,X315,X310,X312,X314,X311] : (~p(s(bool,happ(s(fun(X311,bool),'_dst_x1x0_2'(s(fun(X311,fun(X310,bool)),X312),s(X310,X314))),s(X311,X313)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X315))),s(bool,happ(s(fun(X310,bool),happ(s(fun(X311,fun(X310,bool)),X312),s(X311,X313))),s(X310,X314))))))) )),
  inference(superposition,[],[f318,f334])).
fof(f37811,plain,(
  ( ! [X300,X302,X298,X301,X303,X299] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X299,bool),'_dst_x1x0_2'(s(fun(X299,fun(X298,bool)),X300),s(X298,X302))),s(X299,X301))))),s(bool,X303)))) | p(s(bool,happ(s(fun(X298,bool),happ(s(fun(X299,fun(X298,bool)),X300),s(X299,X301))),s(X298,X302))))) )),
  inference(superposition,[],[f317,f334])).
fof(f37810,plain,(
  ( ! [X292,X294,X296,X293,X295,X297] : (~p(s(bool,happ(s(fun(X293,bool),'_dst_x1x0_2'(s(fun(X293,fun(X292,bool)),X294),s(X292,X296))),s(X293,X295)))) | p(s(bool,X297)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X292,bool),happ(s(fun(X293,fun(X292,bool)),X294),s(X293,X295))),s(X292,X296))))),s(bool,X297))))) )),
  inference(superposition,[],[f316,f334])).
fof(f37809,plain,(
  ( ! [X288,X290,X287,X289,X291,X286] : (~p(s(bool,happ(s(fun(X287,bool),'_dst_x1x0_2'(s(fun(X287,fun(X286,bool)),X288),s(X286,X290))),s(X287,X289)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X291))),s(bool,happ(s(fun(X286,bool),happ(s(fun(X287,fun(X286,bool)),X288),s(X287,X289))),s(X286,X290))))))) )),
  inference(superposition,[],[f315,f334])).
fof(f37808,plain,(
  ( ! [X280,X282,X285,X281,X283,X284] : (~p(s(bool,happ(s(fun(X281,bool),'_dst_x1x0_2'(s(fun(X281,fun(X280,bool)),X282),s(X280,X284))),s(X281,X283)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X280,bool),happ(s(fun(X281,fun(X280,bool)),X282),s(X281,X283))),s(X280,X284))))),s(bool,X285))))) )),
  inference(superposition,[],[f314,f334])).
fof(f37807,plain,(
  ( ! [X277,X279,X275,X276,X278,X274] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X279))),s(bool,happ(s(fun(X275,bool),'_dst_x1x0_2'(s(fun(X275,fun(X274,bool)),X276),s(X274,X278))),s(X275,X277)))))) | p(s(bool,X279)) | p(s(bool,happ(s(fun(X274,bool),happ(s(fun(X275,fun(X274,bool)),X276),s(X275,X277))),s(X274,X278))))) )),
  inference(superposition,[],[f313,f334])).
fof(f37806,plain,(
  ( ! [X269,X271,X273,X268,X270,X272] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X269,bool),'_dst_x1x0_2'(s(fun(X269,fun(X268,bool)),X270),s(X268,X272))),s(X269,X271))))),s(bool,X273)))) | p(s(bool,happ(s(fun(X268,bool),happ(s(fun(X269,fun(X268,bool)),X270),s(X269,X271))),s(X268,X272)))) | p(s(bool,X273))) )),
  inference(superposition,[],[f313,f334])).
fof(f37805,plain,(
  ( ! [X263,X265,X267,X262,X264,X266] : (~p(s(bool,happ(s(fun(X263,bool),'_dst_x1x0_2'(s(fun(X263,fun(X262,bool)),X264),s(X262,X266))),s(X263,X265)))) | ~p(s(bool,X267)) | s(bool,X267) = s(bool,happ(s(fun(X262,bool),happ(s(fun(X263,fun(X262,bool)),X264),s(X263,X265))),s(X262,X266)))) )),
  inference(superposition,[],[f308,f334])).
fof(f37803,plain,(
  ( ! [X255,X253,X251,X254,X252,X250] : (p(s(bool,happ(s(fun(X251,bool),'_dst_x1x0_2'(s(fun(X251,fun(X250,bool)),X252),s(X250,X254))),s(X251,X253)))) | p(s(bool,X255)) | s(bool,X255) = s(bool,happ(s(fun(X250,bool),happ(s(fun(X251,fun(X250,bool)),X252),s(X251,X253))),s(X250,X254)))) )),
  inference(superposition,[],[f305,f334])).
fof(f37802,plain,(
  ( ! [X249,X246,X248,X247,X245] : (p(s(bool,happ(s(fun(X246,bool),'_dst_x1x0_2'(s(fun(X246,fun(X245,bool)),X247),s(X245,X249))),s(X246,X248)))) | s(bool,'F_0') = s(bool,happ(s(fun(X245,bool),happ(s(fun(X246,fun(X245,bool)),X247),s(X246,X248))),s(X245,X249)))) )),
  inference(superposition,[],[f250,f334])).
fof(f37801,plain,(
  ( ! [X243,X241,X244,X242,X240] : (s(bool,'F_0') != s(bool,happ(s(fun(X241,bool),'_dst_x1x0_2'(s(fun(X241,fun(X240,bool)),X242),s(X240,X244))),s(X241,X243))) | ~p(s(bool,happ(s(fun(X240,bool),happ(s(fun(X241,fun(X240,bool)),X242),s(X241,X243))),s(X240,X244))))) )),
  inference(superposition,[],[f249,f334])).
fof(f37800,plain,(
  ( ! [X239,X237,X235,X238,X236] : (~p(s(bool,happ(s(fun(X236,bool),'_dst_x1x0_2'(s(fun(X236,fun(X235,bool)),X237),s(X235,X239))),s(X236,X238)))) | s(bool,'T_0') = s(bool,happ(s(fun(X235,bool),happ(s(fun(X236,fun(X235,bool)),X237),s(X236,X238))),s(X235,X239)))) )),
  inference(superposition,[],[f246,f334])).
fof(f37799,plain,(
  ( ! [X231,X233,X230,X234,X232] : (p(s(bool,happ(s(fun(X231,bool),'_dst_x1x0_2'(s(fun(X231,fun(X230,bool)),X232),s(X230,X234))),s(X231,X233)))) | s(bool,'T_0') != s(bool,happ(s(fun(X230,bool),happ(s(fun(X231,fun(X230,bool)),X232),s(X231,X233))),s(X230,X234)))) )),
  inference(superposition,[],[f245,f334])).
fof(f37796,plain,(
  ( ! [X220,X221] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X221))),s(bool,X220)))) | p(s(bool,X220)) | p(s(bool,X221))) )),
  inference(superposition,[],[f313,f334])).
fof(f37795,plain,(
  ( ! [X218,X219] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X219))),s(bool,X218)))) | p(s(bool,X218))) )),
  inference(superposition,[],[f317,f334])).
fof(f37794,plain,(
  ( ! [X216,X215,X217,X214] : (~p(s(bool,happ(s(fun(X215,bool),'_dst_x1x0_2'(s(fun(X215,fun(X214,bool)),X216),s(X214,sK6(happ(s(fun(X215,fun(X214,bool)),X216),s(X215,X217)),X214)))),s(X215,X217)))) | p(s(bool,happ(s(fun(fun(X214,bool),bool),'!_1'),s(fun(X214,bool),happ(s(fun(X215,fun(X214,bool)),X216),s(X215,X217))))))) )),
  inference(superposition,[],[f310,f334])).
fof(f37793,plain,(
  ( ! [X212,X210,X213,X211,X209] : (~p(s(bool,happ(s(fun(X210,bool),'_dst_x1x0_2'(s(fun(X210,fun(X209,bool)),X211),s(X209,X213))),s(X210,X212)))) | p(s(bool,'|dollar|exists_1'(s(fun(X209,bool),happ(s(fun(X210,fun(X209,bool)),X211),s(X210,X212))))))) )),
  inference(superposition,[],[f2633,f334])).
fof(f37792,plain,(
  ( ! [X208,X206,X204,X207,X205] : (~p(s(bool,happ(s(fun(X205,bool),'_dst_x1x0_2'(s(fun(X205,fun(X204,bool)),X206),s(X204,X208))),s(X205,X207)))) | p(s(bool,happ(s(fun(fun(X204,bool),bool),'?_1'),s(fun(X204,bool),happ(s(fun(X205,fun(X204,bool)),X206),s(X205,X207))))))) )),
  inference(superposition,[],[f312,f334])).
fof(f37791,plain,(
  ( ! [X202,X203,X201] : (~p(s(bool,happ(s(fun(X201,bool),'_dst_x1x0_2'(s(fun(X201,fun(X201,bool)),'=_0'),s(X201,X203))),s(X201,X202)))) | s(X201,X202) = s(X201,X203)) )),
  inference(superposition,[],[f330,f334])).
fof(f37790,plain,(
  ( ! [X198,X200,X199] : (p(s(bool,happ(s(fun(X198,bool),'_dst_x1x0_2'(s(fun(X198,fun(X198,bool)),'=_0'),s(X198,X200))),s(X198,X199)))) | s(X198,X199) != s(X198,X200)) )),
  inference(superposition,[],[f331,f334])).
fof(f37782,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (p(s(bool,happ(s(fun(X139,bool),happ(s(fun(X139,fun(X139,bool)),'=_0'),s(X139,X145))),s(X139,happ(s(fun(X141,X139),'_dst_x1x0_2'(s(fun(X141,fun(X140,X139)),X142),s(X140,X144))),s(X141,X143)))))) | s(X139,X145) != s(X139,happ(s(fun(X140,X139),happ(s(fun(X141,fun(X140,X139)),X142),s(X141,X143))),s(X140,X144)))) )),
  inference(superposition,[],[f331,f334])).
fof(f37781,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (p(s(bool,happ(s(fun(X132,bool),happ(s(fun(X132,fun(X132,bool)),'=_0'),s(X132,happ(s(fun(X134,X132),'_dst_x1x0_2'(s(fun(X134,fun(X133,X132)),X135),s(X133,X137))),s(X134,X136))))),s(X132,X138)))) | s(X132,X138) != s(X132,happ(s(fun(X133,X132),happ(s(fun(X134,fun(X133,X132)),X135),s(X134,X136))),s(X133,X137)))) )),
  inference(superposition,[],[f331,f334])).
fof(f37780,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (~p(s(bool,happ(s(fun(X125,bool),happ(s(fun(X125,fun(X125,bool)),'=_0'),s(X125,X131))),s(X125,happ(s(fun(X127,X125),'_dst_x1x0_2'(s(fun(X127,fun(X126,X125)),X128),s(X126,X130))),s(X127,X129)))))) | s(X125,X131) = s(X125,happ(s(fun(X126,X125),happ(s(fun(X127,fun(X126,X125)),X128),s(X127,X129))),s(X126,X130)))) )),
  inference(superposition,[],[f330,f334])).
fof(f37779,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),happ(s(fun(X118,fun(X118,bool)),'=_0'),s(X118,happ(s(fun(X120,X118),'_dst_x1x0_2'(s(fun(X120,fun(X119,X118)),X121),s(X119,X123))),s(X120,X122))))),s(X118,X124)))) | s(X118,X124) = s(X118,happ(s(fun(X119,X118),happ(s(fun(X120,fun(X119,X118)),X121),s(X120,X122))),s(X119,X123)))) )),
  inference(superposition,[],[f330,f334])).
fof(f37765,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X6,happ(s(fun(X0,X6),X7),s(X0,happ(s(fun(X2,X0),'_dst_x1x0_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X5))),s(X2,X4))))) = s(X6,happ(s(fun(X1,X6),'_dst_x0x1_2'(s(fun(X0,X6),X7),s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))))),s(X1,X5)))) )),
  inference(superposition,[],[f333,f334])).
fof(f37764,plain,(
  ( ! [X1002,X1000,X1006,X1004,X1003,X1001,X1007,X1005] : (s('type.fcp.cart'(bool,X1000),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X1000),happ(s(fun(X1002,'type.fcp.cart'(bool,X1000)),happ(s(fun(X1001,fun(X1002,'type.fcp.cart'(bool,X1000))),X1003),s(X1001,X1005))),s(X1002,X1004))) | p(s(bool,sK4(X1006,X1007,happ(s(fun(X1001,'type.fcp.cart'(bool,X1000)),'_dst_x1x0_2'(s(fun(X1001,fun(X1002,'type.fcp.cart'(bool,X1000))),X1003),s(X1002,X1004))),s(X1001,X1005)),X1000)))) )),
  inference(superposition,[],[f302,f334])).
fof(f37756,plain,(
  ( ! [X947,X945,X942,X946,X944,X943,X941] : (s('type.wordSem.word_loc'(X941),X947) != s('type.wordSem.word_loc'(X941),happ(s(fun(X943,'type.wordSem.word_loc'(X941)),happ(s(fun(X942,fun(X943,'type.wordSem.word_loc'(X941))),X944),s(X942,X946))),s(X943,X945))) | s('type.stackSem.result'(X941),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X941),X947))) = s('type.stackSem.result'(X941),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X941),happ(s(fun(X942,'type.wordSem.word_loc'(X941)),'_dst_x1x0_2'(s(fun(X942,fun(X943,'type.wordSem.word_loc'(X941))),X944),s(X943,X945))),s(X942,X946)))))) )),
  inference(superposition,[],[f295,f334])).
fof(f37754,plain,(
  ( ! [X930,X928,X932,X927,X931,X929,X933] : (s('type.stackSem.result'(X927),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X927),X933))) != s('type.stackSem.result'(X927),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X927),happ(s(fun(X929,'type.wordSem.word_loc'(X927)),happ(s(fun(X928,fun(X929,'type.wordSem.word_loc'(X927))),X930),s(X928,X932))),s(X929,X931))))) | s('type.wordSem.word_loc'(X927),X933) = s('type.wordSem.word_loc'(X927),happ(s(fun(X928,'type.wordSem.word_loc'(X927)),'_dst_x1x0_2'(s(fun(X928,fun(X929,'type.wordSem.word_loc'(X927))),X930),s(X929,X931))),s(X928,X932)))) )),
  inference(superposition,[],[f294,f334])).
fof(f37752,plain,(
  ( ! [X918,X916,X914,X915,X913,X919,X917] : (s('type.wordSem.word_loc'(X913),X919) != s('type.wordSem.word_loc'(X913),happ(s(fun(X915,'type.wordSem.word_loc'(X913)),happ(s(fun(X914,fun(X915,'type.wordSem.word_loc'(X913))),X916),s(X914,X918))),s(X915,X917))) | s('type.stackSem.result'(X913),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X913),X919))) = s('type.stackSem.result'(X913),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X913),happ(s(fun(X914,'type.wordSem.word_loc'(X913)),'_dst_x1x0_2'(s(fun(X914,fun(X915,'type.wordSem.word_loc'(X913))),X916),s(X915,X917))),s(X914,X918)))))) )),
  inference(superposition,[],[f293,f334])).
fof(f37750,plain,(
  ( ! [X905,X899,X903,X901,X904,X902,X900] : (s('type.stackSem.result'(X899),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X899),X905))) != s('type.stackSem.result'(X899),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X899),happ(s(fun(X901,'type.wordSem.word_loc'(X899)),happ(s(fun(X900,fun(X901,'type.wordSem.word_loc'(X899))),X902),s(X900,X904))),s(X901,X903))))) | s('type.wordSem.word_loc'(X899),X905) = s('type.wordSem.word_loc'(X899),happ(s(fun(X900,'type.wordSem.word_loc'(X899)),'_dst_x1x0_2'(s(fun(X900,fun(X901,'type.wordSem.word_loc'(X899))),X902),s(X901,X903))),s(X900,X904)))) )),
  inference(superposition,[],[f292,f334])).
fof(f37748,plain,(
  ( ! [X887,X885,X890,X888,X886,X891,X889] : (s('type.wordSem.word_loc'(X885),X891) != s('type.wordSem.word_loc'(X885),happ(s(fun(X887,'type.wordSem.word_loc'(X885)),happ(s(fun(X886,fun(X887,'type.wordSem.word_loc'(X885))),X888),s(X886,X890))),s(X887,X889))) | s('type.stackSem.result'(X885),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X885),X891))) = s('type.stackSem.result'(X885),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X885),happ(s(fun(X886,'type.wordSem.word_loc'(X885)),'_dst_x1x0_2'(s(fun(X886,fun(X887,'type.wordSem.word_loc'(X885))),X888),s(X887,X889))),s(X886,X890)))))) )),
  inference(superposition,[],[f291,f334])).
fof(f37746,plain,(
  ( ! [X874,X872,X876,X875,X873,X877,X871] : (s('type.stackSem.result'(X871),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X871),X877))) != s('type.stackSem.result'(X871),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X871),happ(s(fun(X873,'type.wordSem.word_loc'(X871)),happ(s(fun(X872,fun(X873,'type.wordSem.word_loc'(X871))),X874),s(X872,X876))),s(X873,X875))))) | s('type.wordSem.word_loc'(X871),X877) = s('type.wordSem.word_loc'(X871),happ(s(fun(X872,'type.wordSem.word_loc'(X871)),'_dst_x1x0_2'(s(fun(X872,fun(X873,'type.wordSem.word_loc'(X871))),X874),s(X873,X875))),s(X872,X876)))) )),
  inference(superposition,[],[f290,f334])).
fof(f37737,plain,(
  ( ! [X819,X817,X818,X816,X815] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X816,'type.wordSem.word_loc'(sK0)),happ(s(fun(X815,fun(X816,'type.wordSem.word_loc'(sK0))),X817),s(X815,X819))),s(X816,X818))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X815,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X815,fun(X816,'type.wordSem.word_loc'(sK0))),X817),s(X816,X818))),s(X815,X819)))) )),
  inference(superposition,[],[f2643,f334])).
fof(f37736,plain,(
  ( ! [X810,X814,X812,X811,X813] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X811,'type.wordSem.word_loc'(sK0)),happ(s(fun(X810,fun(X811,'type.wordSem.word_loc'(sK0))),X812),s(X810,X814))),s(X811,X813))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun(X810,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X810,fun(X811,'type.wordSem.word_loc'(sK0))),X812),s(X811,X813))),s(X810,X814)))))) )),
  inference(superposition,[],[f2651,f334])).
fof(f37735,plain,(
  ( ! [X808,X806,X804,X809,X803,X807,X805] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X804,'type.wordSem.word_loc'(sK0)),happ(s(fun(X803,fun(X804,'type.wordSem.word_loc'(sK0))),X805),s(X803,X807))),s(X804,X806))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X808,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X803,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X803,fun(X804,'type.wordSem.word_loc'(sK0))),X805),s(X804,X806))),s(X803,X807))))),s(X808,X809)))) )),
  inference(superposition,[],[f2652,f334])).
fof(f37734,plain,(
  ( ! [X798,X802,X800,X799,X797,X801] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X798,'type.wordSem.word_loc'(sK0)),happ(s(fun(X797,fun(X798,'type.wordSem.word_loc'(sK0))),X799),s(X797,X801))),s(X798,X800))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X797,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X797,fun(X798,'type.wordSem.word_loc'(sK0))),X799),s(X798,X800))),s(X797,X801))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X802),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f334])).
fof(f37733,plain,(
  ( ! [X796,X795,X793,X791,X794,X792] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X792,'type.wordSem.word_loc'(sK0)),happ(s(fun(X791,fun(X792,'type.wordSem.word_loc'(sK0))),X793),s(X791,X795))),s(X792,X794))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X791,'type.wordSem.word_loc'(sK0)),'_dst_x1x0_2'(s(fun(X791,fun(X792,'type.wordSem.word_loc'(sK0))),X793),s(X792,X794))),s(X791,X795)),X796,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X796)))) )),
  inference(superposition,[],[f2654,f334])).
fof(f37717,plain,(
  ( ! [X648,X644,X646,X649,X645,X647,X643] : (~p(s(bool,happ(s(fun(X643,bool),happ(s(fun(X645,fun(X643,bool)),happ(s(fun(X644,fun(X645,fun(X643,bool))),X646),s(X644,X648))),s(X645,X647))),s(X643,X649)))) | p(s(bool,'|dollar|exists_1'(s(fun(X643,bool),happ(s(fun(X644,fun(X643,bool)),'_dst_x1x0_2'(s(fun(X644,fun(X645,fun(X643,bool))),X646),s(X645,X647))),s(X644,X648))))))) )),
  inference(superposition,[],[f2633,f334])).
fof(f37716,plain,(
  ( ! [X639,X640,X642,X636,X638,X641,X637] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X636,bool),happ(s(fun(X638,fun(X636,bool)),happ(s(fun(X637,fun(X638,fun(X636,bool))),X639),s(X637,X641))),s(X638,X640))))) | s(X636,X642) = s(X636,sK3(X642,happ(s(fun(X637,fun(X636,bool)),'_dst_x1x0_2'(s(fun(X637,fun(X638,fun(X636,bool))),X639),s(X638,X640))),s(X637,X641)),X636))) )),
  inference(superposition,[],[f565,f334])).
fof(f37715,plain,(
  ( ! [X633,X635,X629,X631,X632,X634,X630] : (~p(s(bool,happ(s(fun(X629,bool),happ(s(fun(X631,fun(X629,bool)),happ(s(fun(X630,fun(X631,fun(X629,bool))),X632),s(X630,X634))),s(X631,X633))),s(X629,X635)))) | p(s(bool,happ(s(fun(fun(X629,bool),bool),'?_1'),s(fun(X629,bool),happ(s(fun(X630,fun(X629,bool)),'_dst_x1x0_2'(s(fun(X630,fun(X631,fun(X629,bool))),X632),s(X631,X633))),s(X630,X634))))))) )),
  inference(superposition,[],[f312,f334])).
fof(f37714,plain,(
  ( ! [X625,X627,X623,X628,X624,X626] : (~p(s(bool,happ(s(fun(fun(X623,bool),bool),'?_1'),s(fun(X623,bool),happ(s(fun(X625,fun(X623,bool)),happ(s(fun(X624,fun(X625,fun(X623,bool))),X626),s(X624,X628))),s(X625,X627)))))) | p(s(bool,happ(s(fun(X623,bool),happ(s(fun(X624,fun(X623,bool)),'_dst_x1x0_2'(s(fun(X624,fun(X625,fun(X623,bool))),X626),s(X625,X627))),s(X624,X628))),s(X623,sK7(happ(s(fun(X624,fun(X623,bool)),'_dst_x1x0_2'(s(fun(X624,fun(X625,fun(X623,bool))),X626),s(X625,X627))),s(X624,X628)),X623)))))) )),
  inference(superposition,[],[f311,f334])).
fof(f37713,plain,(
  ( ! [X621,X617,X619,X620,X622,X618] : (~p(s(bool,happ(s(fun(X617,bool),happ(s(fun(X619,fun(X617,bool)),happ(s(fun(X618,fun(X619,fun(X617,bool))),X620),s(X618,X622))),s(X619,X621))),s(X617,sK6(happ(s(fun(X618,fun(X617,bool)),'_dst_x1x0_2'(s(fun(X618,fun(X619,fun(X617,bool))),X620),s(X619,X621))),s(X618,X622)),X617))))) | p(s(bool,happ(s(fun(fun(X617,bool),bool),'!_1'),s(fun(X617,bool),happ(s(fun(X618,fun(X617,bool)),'_dst_x1x0_2'(s(fun(X618,fun(X619,fun(X617,bool))),X620),s(X619,X621))),s(X618,X622))))))) )),
  inference(superposition,[],[f310,f334])).
fof(f37712,plain,(
  ( ! [X613,X615,X611,X616,X612,X614,X610] : (~p(s(bool,happ(s(fun(fun(X610,bool),bool),'!_1'),s(fun(X610,bool),happ(s(fun(X612,fun(X610,bool)),happ(s(fun(X611,fun(X612,fun(X610,bool))),X613),s(X611,X615))),s(X612,X614)))))) | p(s(bool,happ(s(fun(X610,bool),happ(s(fun(X611,fun(X610,bool)),'_dst_x1x0_2'(s(fun(X611,fun(X612,fun(X610,bool))),X613),s(X612,X614))),s(X611,X615))),s(X610,X616))))) )),
  inference(superposition,[],[f309,f334])).
fof(f37711,plain,(
  ( ! [X606,X609,X605,X607,X603,X608,X604] : (p(s(bool,'|dollar|exists_1'(s(fun(X603,bool),happ(s(fun(X605,fun(X603,bool)),happ(s(fun(X604,fun(X605,fun(X603,bool))),X606),s(X604,X608))),s(X605,X607)))))) | s(X603,X609) = s(X603,sK3(X609,happ(s(fun(X604,fun(X603,bool)),'_dst_x1x0_2'(s(fun(X604,fun(X605,fun(X603,bool))),X606),s(X605,X607))),s(X604,X608)),X603))) )),
  inference(superposition,[],[f288,f334])).
fof(f37686,plain,(
  ( ! [X466,X469,X465,X467,X468,X470] : (~p(s(bool,happ(s(fun(X466,bool),happ(s(fun(X465,fun(X466,bool)),X467),s(X465,X469))),s(X466,X468)))) | p(s(bool,happ(s(fun(fun(X470,bool),bool),'!_1'),s(fun(X470,bool),'_dst_x0_1'(s(bool,happ(s(fun(X465,bool),'_dst_x1x0_2'(s(fun(X465,fun(X466,bool)),X467),s(X466,X468))),s(X465,X469))))))))) )),
  inference(superposition,[],[f5586,f334])).
fof(f37683,plain,(
  ( ! [X453,X449,X451,X452,X454,X450] : (~p(s(bool,happ(s(fun(X450,bool),happ(s(fun(X449,fun(X450,bool)),X451),s(X449,X453))),s(X450,X452)))) | p(s(bool,happ(s(fun(fun(X454,bool),bool),'?_1'),s(fun(X454,bool),'_dst_x0_1'(s(bool,happ(s(fun(X449,bool),'_dst_x1x0_2'(s(fun(X449,fun(X450,bool)),X451),s(X450,X452))),s(X449,X453))))))))) )),
  inference(superposition,[],[f4218,f334])).
fof(f37680,plain,(
  ( ! [X436,X438,X434,X437,X433,X435] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X438,bool),'_dst_x0_1'(s(bool,happ(s(fun(X434,bool),happ(s(fun(X433,fun(X434,bool)),X435),s(X433,X437))),s(X434,X436))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X433,bool),'_dst_x1x0_2'(s(fun(X433,fun(X434,bool)),X435),s(X434,X436))),s(X433,X437)))) )),
  inference(superposition,[],[f2213,f334])).
fof(f37677,plain,(
  ( ! [X420,X416,X418,X415,X417,X419] : (p(s(bool,'|dollar|exists_1'(s(fun(X420,bool),'_dst_x0_1'(s(bool,happ(s(fun(X416,bool),happ(s(fun(X415,fun(X416,bool)),X417),s(X415,X419))),s(X416,X418)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X415,bool),'_dst_x1x0_2'(s(fun(X415,fun(X416,bool)),X417),s(X416,X418))),s(X415,X419)))) )),
  inference(superposition,[],[f1936,f334])).
fof(f37676,plain,(
  ( ! [X412,X414,X410,X413,X409,X411] : (~p(s(bool,happ(s(fun(X410,bool),happ(s(fun(X409,fun(X410,bool)),X411),s(X409,X413))),s(X410,X412)))) | p(s(bool,'|dollar|exists_1'(s(fun(X414,bool),'_dst_x0_1'(s(bool,happ(s(fun(X409,bool),'_dst_x1x0_2'(s(fun(X409,fun(X410,bool)),X411),s(X410,X412))),s(X409,X413))))))))) )),
  inference(superposition,[],[f1802,f334])).
fof(f37675,plain,(
  ( ! [X408,X405,X407,X403,X404,X406] : (s(bool,'T_0') != s(bool,happ(s(fun(X404,bool),happ(s(fun(X403,fun(X404,bool)),X405),s(X403,X407))),s(X404,X406))) | s(bool,X408) = s(bool,happ(s(fun(X403,bool),'_dst_x1x0_2'(s(fun(X403,fun(X404,bool)),X405),s(X404,X406))),s(X403,X407))) | s(bool,'F_0') = s(bool,X408)) )),
  inference(superposition,[],[f1400,f334])).
fof(f37674,plain,(
  ( ! [X397,X399,X401,X398,X400,X402] : (s(bool,X402) != s(bool,happ(s(fun(X398,bool),happ(s(fun(X397,fun(X398,bool)),X399),s(X397,X401))),s(X398,X400))) | s(bool,'T_0') = s(bool,happ(s(fun(X397,bool),'_dst_x1x0_2'(s(fun(X397,fun(X398,bool)),X399),s(X398,X400))),s(X397,X401))) | s(bool,'F_0') = s(bool,X402)) )),
  inference(superposition,[],[f1197,f334])).
fof(f37673,plain,(
  ( ! [X391,X393,X395,X396,X392,X394] : (s(bool,X396) != s(bool,happ(s(fun(X392,bool),happ(s(fun(X391,fun(X392,bool)),X393),s(X391,X395))),s(X392,X394))) | s(bool,'T_0') = s(bool,X396) | s(bool,'F_0') = s(bool,happ(s(fun(X391,bool),'_dst_x1x0_2'(s(fun(X391,fun(X392,bool)),X393),s(X392,X394))),s(X391,X395)))) )),
  inference(superposition,[],[f1197,f334])).
fof(f37667,plain,(
  ( ! [X356,X358,X354,X357,X359,X355] : (~p(s(bool,happ(s(fun(X355,bool),happ(s(fun(X354,fun(X355,bool)),X356),s(X354,X358))),s(X355,X357)))) | s(bool,X359) = s(bool,happ(s(fun(X354,bool),'_dst_x1x0_2'(s(fun(X354,fun(X355,bool)),X356),s(X355,X357))),s(X354,X358))) | s(bool,'F_0') = s(bool,X359)) )),
  inference(superposition,[],[f1037,f334])).
fof(f37957,plain,(
  ( ! [X350,X349,X351,X347,X348] : (s(bool,'T_0') != s(bool,happ(s(fun(X348,bool),happ(s(fun(X347,fun(X348,bool)),X349),s(X347,X351))),s(X348,X350))) | s(bool,'T_0') = s(bool,happ(s(fun(X347,bool),'_dst_x1x0_2'(s(fun(X347,fun(X348,bool)),X349),s(X348,X350))),s(X347,X351)))) )),
  inference(forward_demodulation,[],[f37666,f270])).
fof(f37666,plain,(
  ( ! [X350,X352,X349,X351,X347,X353,X348] : (s(bool,'const.bool.DATATYPE_1'(s(X352,X353))) != s(bool,happ(s(fun(X348,bool),happ(s(fun(X347,fun(X348,bool)),X349),s(X347,X351))),s(X348,X350))) | s(bool,'T_0') = s(bool,happ(s(fun(X347,bool),'_dst_x1x0_2'(s(fun(X347,fun(X348,bool)),X349),s(X348,X350))),s(X347,X351)))) )),
  inference(superposition,[],[f557,f334])).
fof(f37665,plain,(
  ( ! [X344,X346,X341,X343,X345,X342] : (p(s(bool,happ(s(fun(X342,bool),happ(s(fun(X341,fun(X342,bool)),X343),s(X341,X345))),s(X342,X344)))) | s(bool,X346) = s(bool,happ(s(fun(X341,bool),'_dst_x1x0_2'(s(fun(X341,fun(X342,bool)),X343),s(X342,X344))),s(X341,X345))) | s(bool,'T_0') = s(bool,X346)) )),
  inference(superposition,[],[f425,f334])).
fof(f37664,plain,(
  ( ! [X337,X339,X340,X336,X338] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X337,bool),happ(s(fun(X336,fun(X337,bool)),X338),s(X336,X340))),s(X337,X339))))) | s(bool,'F_0') = s(bool,happ(s(fun(X336,bool),'_dst_x1x0_2'(s(fun(X336,fun(X337,bool)),X338),s(X337,X339))),s(X336,X340)))) )),
  inference(superposition,[],[f398,f334])).
fof(f37663,plain,(
  ( ! [X333,X335,X331,X332,X334,X330] : (~p(s(bool,happ(s(fun(X331,bool),happ(s(fun(X330,fun(X331,bool)),X332),s(X330,X334))),s(X331,X333)))) | s(bool,X335) != s(bool,happ(s(fun(X330,bool),'_dst_x1x0_2'(s(fun(X330,fun(X331,bool)),X332),s(X331,X333))),s(X330,X334))) | s(bool,'T_0') = s(bool,X335)) )),
  inference(superposition,[],[f368,f334])).
fof(f37658,plain,(
  ( ! [X300,X302,X304,X301,X303,X305] : (~p(s(bool,happ(s(fun(X301,bool),happ(s(fun(X300,fun(X301,bool)),X302),s(X300,X304))),s(X301,X303)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X305))),s(bool,happ(s(fun(X300,bool),'_dst_x1x0_2'(s(fun(X300,fun(X301,bool)),X302),s(X301,X303))),s(X300,X304))))))) )),
  inference(superposition,[],[f318,f334])).
fof(f37656,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X289,bool),happ(s(fun(X288,fun(X289,bool)),X290),s(X288,X292))),s(X289,X291))))),s(bool,X293)))) | p(s(bool,happ(s(fun(X288,bool),'_dst_x1x0_2'(s(fun(X288,fun(X289,bool)),X290),s(X289,X291))),s(X288,X292))))) )),
  inference(superposition,[],[f317,f334])).
fof(f37655,plain,(
  ( ! [X282,X285,X287,X283,X284,X286] : (~p(s(bool,happ(s(fun(X283,bool),happ(s(fun(X282,fun(X283,bool)),X284),s(X282,X286))),s(X283,X285)))) | p(s(bool,X287)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X282,bool),'_dst_x1x0_2'(s(fun(X282,fun(X283,bool)),X284),s(X283,X285))),s(X282,X286))))),s(bool,X287))))) )),
  inference(superposition,[],[f316,f334])).
fof(f37654,plain,(
  ( ! [X280,X277,X279,X281,X276,X278] : (~p(s(bool,happ(s(fun(X277,bool),happ(s(fun(X276,fun(X277,bool)),X278),s(X276,X280))),s(X277,X279)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X281))),s(bool,happ(s(fun(X276,bool),'_dst_x1x0_2'(s(fun(X276,fun(X277,bool)),X278),s(X277,X279))),s(X276,X280))))))) )),
  inference(superposition,[],[f315,f334])).
fof(f37653,plain,(
  ( ! [X271,X273,X275,X270,X272,X274] : (~p(s(bool,happ(s(fun(X271,bool),happ(s(fun(X270,fun(X271,bool)),X272),s(X270,X274))),s(X271,X273)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X270,bool),'_dst_x1x0_2'(s(fun(X270,fun(X271,bool)),X272),s(X271,X273))),s(X270,X274))))),s(bool,X275))))) )),
  inference(superposition,[],[f314,f334])).
fof(f37652,plain,(
  ( ! [X269,X265,X267,X268,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X269))),s(bool,happ(s(fun(X265,bool),happ(s(fun(X264,fun(X265,bool)),X266),s(X264,X268))),s(X265,X267)))))) | p(s(bool,X269)) | p(s(bool,happ(s(fun(X264,bool),'_dst_x1x0_2'(s(fun(X264,fun(X265,bool)),X266),s(X265,X267))),s(X264,X268))))) )),
  inference(superposition,[],[f313,f334])).
fof(f37651,plain,(
  ( ! [X261,X263,X259,X260,X262,X258] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X259,bool),happ(s(fun(X258,fun(X259,bool)),X260),s(X258,X262))),s(X259,X261))))),s(bool,X263)))) | p(s(bool,happ(s(fun(X258,bool),'_dst_x1x0_2'(s(fun(X258,fun(X259,bool)),X260),s(X259,X261))),s(X258,X262)))) | p(s(bool,X263))) )),
  inference(superposition,[],[f313,f334])).
fof(f37650,plain,(
  ( ! [X255,X253,X257,X254,X252,X256] : (~p(s(bool,happ(s(fun(X253,bool),happ(s(fun(X252,fun(X253,bool)),X254),s(X252,X256))),s(X253,X255)))) | ~p(s(bool,X257)) | s(bool,X257) = s(bool,happ(s(fun(X252,bool),'_dst_x1x0_2'(s(fun(X252,fun(X253,bool)),X254),s(X253,X255))),s(X252,X256)))) )),
  inference(superposition,[],[f308,f334])).
fof(f37648,plain,(
  ( ! [X243,X241,X244,X242,X240,X245] : (p(s(bool,happ(s(fun(X241,bool),happ(s(fun(X240,fun(X241,bool)),X242),s(X240,X244))),s(X241,X243)))) | p(s(bool,X245)) | s(bool,X245) = s(bool,happ(s(fun(X240,bool),'_dst_x1x0_2'(s(fun(X240,fun(X241,bool)),X242),s(X241,X243))),s(X240,X244)))) )),
  inference(superposition,[],[f305,f334])).
fof(f37647,plain,(
  ( ! [X239,X237,X235,X238,X236] : (p(s(bool,happ(s(fun(X236,bool),happ(s(fun(X235,fun(X236,bool)),X237),s(X235,X239))),s(X236,X238)))) | s(bool,'F_0') = s(bool,happ(s(fun(X235,bool),'_dst_x1x0_2'(s(fun(X235,fun(X236,bool)),X237),s(X236,X238))),s(X235,X239)))) )),
  inference(superposition,[],[f250,f334])).
fof(f37646,plain,(
  ( ! [X231,X233,X230,X234,X232] : (s(bool,'F_0') != s(bool,happ(s(fun(X231,bool),happ(s(fun(X230,fun(X231,bool)),X232),s(X230,X234))),s(X231,X233))) | ~p(s(bool,happ(s(fun(X230,bool),'_dst_x1x0_2'(s(fun(X230,fun(X231,bool)),X232),s(X231,X233))),s(X230,X234))))) )),
  inference(superposition,[],[f249,f334])).
fof(f37645,plain,(
  ( ! [X229,X227,X225,X228,X226] : (~p(s(bool,happ(s(fun(X226,bool),happ(s(fun(X225,fun(X226,bool)),X227),s(X225,X229))),s(X226,X228)))) | s(bool,'T_0') = s(bool,happ(s(fun(X225,bool),'_dst_x1x0_2'(s(fun(X225,fun(X226,bool)),X227),s(X226,X228))),s(X225,X229)))) )),
  inference(superposition,[],[f246,f334])).
fof(f37644,plain,(
  ( ! [X222,X220,X223,X221,X224] : (p(s(bool,happ(s(fun(X221,bool),happ(s(fun(X220,fun(X221,bool)),X222),s(X220,X224))),s(X221,X223)))) | s(bool,'T_0') != s(bool,happ(s(fun(X220,bool),'_dst_x1x0_2'(s(fun(X220,fun(X221,bool)),X222),s(X221,X223))),s(X220,X224)))) )),
  inference(superposition,[],[f245,f334])).
fof(f37641,plain,(
  ( ! [X210,X208,X211,X209] : (~p(s(bool,happ(s(fun(X209,bool),happ(s(fun(X208,fun(X209,bool)),X210),s(X208,sK6('_dst_x1x0_2'(s(fun(X208,fun(X209,bool)),X210),s(X209,X211)),X208)))),s(X209,X211)))) | p(s(bool,happ(s(fun(fun(X208,bool),bool),'!_1'),s(fun(X208,bool),'_dst_x1x0_2'(s(fun(X208,fun(X209,bool)),X210),s(X209,X211))))))) )),
  inference(superposition,[],[f310,f334])).
fof(f37640,plain,(
  ( ! [X206,X204,X207,X205,X203] : (~p(s(bool,happ(s(fun(X204,bool),happ(s(fun(X203,fun(X204,bool)),X205),s(X203,X207))),s(X204,X206)))) | p(s(bool,'|dollar|exists_1'(s(fun(X203,bool),'_dst_x1x0_2'(s(fun(X203,fun(X204,bool)),X205),s(X204,X206))))))) )),
  inference(superposition,[],[f2633,f334])).
fof(f37639,plain,(
  ( ! [X198,X202,X200,X199,X201] : (~p(s(bool,happ(s(fun(X199,bool),happ(s(fun(X198,fun(X199,bool)),X200),s(X198,X202))),s(X199,X201)))) | p(s(bool,happ(s(fun(fun(X198,bool),bool),'?_1'),s(fun(X198,bool),'_dst_x1x0_2'(s(fun(X198,fun(X199,bool)),X200),s(X199,X201))))))) )),
  inference(superposition,[],[f312,f334])).
fof(f37631,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (p(s(bool,happ(s(fun(X139,bool),happ(s(fun(X139,fun(X139,bool)),'=_0'),s(X139,X145))),s(X139,happ(s(fun(X141,X139),happ(s(fun(X140,fun(X141,X139)),X142),s(X140,X144))),s(X141,X143)))))) | s(X139,X145) != s(X139,happ(s(fun(X140,X139),'_dst_x1x0_2'(s(fun(X140,fun(X141,X139)),X142),s(X141,X143))),s(X140,X144)))) )),
  inference(superposition,[],[f331,f334])).
fof(f37630,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (p(s(bool,happ(s(fun(X132,bool),happ(s(fun(X132,fun(X132,bool)),'=_0'),s(X132,happ(s(fun(X134,X132),happ(s(fun(X133,fun(X134,X132)),X135),s(X133,X137))),s(X134,X136))))),s(X132,X138)))) | s(X132,X138) != s(X132,happ(s(fun(X133,X132),'_dst_x1x0_2'(s(fun(X133,fun(X134,X132)),X135),s(X134,X136))),s(X133,X137)))) )),
  inference(superposition,[],[f331,f334])).
fof(f37629,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (~p(s(bool,happ(s(fun(X125,bool),happ(s(fun(X125,fun(X125,bool)),'=_0'),s(X125,X131))),s(X125,happ(s(fun(X127,X125),happ(s(fun(X126,fun(X127,X125)),X128),s(X126,X130))),s(X127,X129)))))) | s(X125,X131) = s(X125,happ(s(fun(X126,X125),'_dst_x1x0_2'(s(fun(X126,fun(X127,X125)),X128),s(X127,X129))),s(X126,X130)))) )),
  inference(superposition,[],[f330,f334])).
fof(f37628,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),happ(s(fun(X118,fun(X118,bool)),'=_0'),s(X118,happ(s(fun(X120,X118),happ(s(fun(X119,fun(X120,X118)),X121),s(X119,X123))),s(X120,X122))))),s(X118,X124)))) | s(X118,X124) = s(X118,happ(s(fun(X119,X118),'_dst_x1x0_2'(s(fun(X119,fun(X120,X118)),X121),s(X120,X122))),s(X119,X123)))) )),
  inference(superposition,[],[f330,f334])).
fof(f37614,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X6,happ(s(fun(X0,X6),X7),s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4))))) = s(X6,happ(s(fun(X1,X6),'_dst_x0x1_2'(s(fun(X0,X6),X7),s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))))),s(X1,X5)))) )),
  inference(superposition,[],[f333,f334])).
fof(f37594,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,happ(s(fun(X8,X6),'_dst_x1x0_2'(s(fun(X8,fun(X7,X6)),X9),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))))),s(X8,X10))) = s(X6,happ(s(fun(X11,X6),'_dst_x0x1_2'(s(fun(X7,X6),happ(s(fun(X8,fun(X7,X6)),X9),s(X8,X10))),s(fun(X11,X7),X12))),s(X11,X13)))) )),
  inference(superposition,[],[f334,f333])).
fof(f37498,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42,X40] : (s(X41,happ(s(fun(X40,X41),happ(s(fun(X43,fun(X40,X41)),happ(s(fun(X42,fun(X43,fun(X40,X41))),X44),s(X42,X46))),s(X43,X45))),s(X40,X47))) = s(X41,happ(s(fun(X42,X41),'_dst_x1x0_2'(s(fun(X42,fun(X40,X41)),'_dst_x1x0_2'(s(fun(X42,fun(X43,fun(X40,X41))),X44),s(X43,X45))),s(X40,X47))),s(X42,X46)))) )),
  inference(superposition,[],[f334,f334])).
fof(f37497,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(X35,happ(s(fun(X34,X35),X37),s(X34,X39))) = s(X35,happ(s(fun(X36,X35),'_dst_x1x0_2'(s(fun(X36,fun(X34,X35)),'_dst_x0_1'(s(fun(X34,X35),X37))),s(X34,X39))),s(X36,X38)))) )),
  inference(superposition,[],[f334,f320])).
fof(f37496,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X27,happ(s(fun(X26,X27),happ(s(fun(X29,fun(X26,X27)),'_dst_x1x0_2'(s(fun(X29,fun(X28,fun(X26,X27))),X30),s(X28,X32))),s(X29,X31))),s(X26,X33))) = s(X27,happ(s(fun(X28,X27),'_dst_x1x0_2'(s(fun(X28,fun(X26,X27)),happ(s(fun(X29,fun(X28,fun(X26,X27))),X30),s(X29,X31))),s(X26,X33))),s(X28,X32)))) )),
  inference(superposition,[],[f334,f334])).
fof(f37495,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(X19,happ(s(fun(X18,X19),happ(s(fun(X21,fun(X18,X19)),X22),s(X21,happ(s(fun(X20,X21),X23),s(X20,X24))))),s(X18,X25))) = s(X19,happ(s(fun(X20,X19),'_dst_x1x0_2'(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X18,X25))),s(X20,X24)))) )),
  inference(superposition,[],[f334,f333])).
fof(f37494,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X11,happ(s(fun(X12,X11),'_dst_x1x0_2'(s(fun(X12,fun(X10,X11)),X13),s(X10,X17))),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16))))) = s(X11,happ(s(fun(X10,X11),happ(s(fun(X14,fun(X10,X11)),'_dst_x0x1_2'(s(fun(X12,fun(X10,X11)),X13),s(fun(X14,X12),X15))),s(X14,X16))),s(X10,X17)))) )),
  inference(superposition,[],[f334,f333])).
fof(f37946,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun(X0,X1),X5),s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))) = s(X1,happ(s(fun(X2,X1),'_dst_x1x0_2'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X0,X1),X5))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f37493,f321])).
fof(f37493,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))),s(fun(X0,X1),X5))) = s(X1,happ(s(fun(X2,X1),'_dst_x1x0_2'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X0,X1),X5))),s(X2,X4)))) )),
  inference(superposition,[],[f334,f332])).
fof(f37373,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(X63,bool),happ(s(fun(X62,fun(X63,bool)),X64),s(X62,X66))),s(X63,X65))) | s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,happ(s(fun(X62,bool),'_dst_x1x0_2'(s(fun(X62,fun(X63,bool)),X64),s(X63,X65))),s(X62,X66)))) )),
  inference(superposition,[],[f334,f1108])).
fof(f37371,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(bool,'F_0') = s(bool,happ(s(fun(X51,bool),happ(s(fun(X50,fun(X51,bool)),X52),s(X50,X54))),s(X51,X53))) | s(bool,X55) = s(bool,happ(s(fun(X50,bool),'_dst_x1x0_2'(s(fun(X50,fun(X51,bool)),X52),s(X51,X53))),s(X50,X54))) | s(bool,'F_0') = s(bool,X55)) )),
  inference(superposition,[],[f334,f1108])).
fof(f37936,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,'T_0') = s(bool,happ(s(fun(X44,bool),happ(s(fun(X43,fun(X44,bool)),X45),s(X43,X47))),s(X44,X46))) | s(bool,'F_0') = s(bool,happ(s(fun(X43,bool),'_dst_x1x0_2'(s(fun(X43,fun(X44,bool)),X45),s(X44,X46))),s(X43,X47)))) )),
  inference(forward_demodulation,[],[f37370,f270])).
fof(f37370,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X49] : (s(bool,'const.bool.DATATYPE_1'(s(X48,X49))) = s(bool,happ(s(fun(X44,bool),happ(s(fun(X43,fun(X44,bool)),X45),s(X43,X47))),s(X44,X46))) | s(bool,'F_0') = s(bool,happ(s(fun(X43,bool),'_dst_x1x0_2'(s(fun(X43,fun(X44,bool)),X45),s(X44,X46))),s(X43,X47)))) )),
  inference(superposition,[],[f334,f1071])).
fof(f37367,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun(X26,bool),happ(s(fun(X25,fun(X26,bool)),X27),s(X25,X29))),s(X26,X28))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,happ(s(fun(X25,bool),'_dst_x1x0_2'(s(fun(X25,fun(X26,bool)),X27),s(X26,X28))),s(X25,X29)))) )),
  inference(superposition,[],[f334,f365])).
fof(f37366,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),happ(s(fun(X19,fun(X20,bool)),X21),s(X19,X23))),s(X20,X22))) | s(bool,X24) = s(bool,happ(s(fun(X19,bool),'_dst_x1x0_2'(s(fun(X19,fun(X20,bool)),X21),s(X20,X22))),s(X19,X23))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f334,f365])).
fof(f37365,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),happ(s(fun(X14,fun(X15,bool)),X16),s(X14,X18))),s(X15,X17))) | s(bool,'T_0') = s(bool,happ(s(fun(X14,bool),'_dst_x1x0_2'(s(fun(X14,fun(X15,bool)),X16),s(X15,X17))),s(X14,X18)))) )),
  inference(superposition,[],[f334,f242])).
fof(f37364,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,happ(s(fun(X8,X6),happ(s(fun(X7,fun(X8,X6)),X9),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))))),s(X8,X10))) = s(X6,happ(s(fun(X11,X6),'_dst_x0x1_2'(s(fun(X7,X6),'_dst_x1x0_2'(s(fun(X7,fun(X8,X6)),X9),s(X8,X10))),s(fun(X11,X7),X12))),s(X11,X13)))) )),
  inference(superposition,[],[f334,f333])).
fof(f37356,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))))),s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4))))))) )),
  inference(unit_resulting_resolution,[],[f334,f331])).
fof(f37360,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))),s(X1,X5))))),s(X0,happ(s(fun(X2,X0),'_dst_x1x0_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X5))),s(X2,X4))))))) )),
  inference(unit_resulting_resolution,[],[f334,f331])).
fof(f37361,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),happ(s(fun(X2,fun(X1,'type.wordSem.word_loc'(X0))),X3),s(X2,X4))),s(X1,X5))))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X2,'type.wordSem.word_loc'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.wordSem.word_loc'(X0))),X3),s(X1,X5))),s(X2,X4)))))) )),
  inference(unit_resulting_resolution,[],[f334,f295])).
fof(f37362,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),happ(s(fun(X2,fun(X1,'type.wordSem.word_loc'(X0))),X3),s(X2,X4))),s(X1,X5))))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X2,'type.wordSem.word_loc'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.wordSem.word_loc'(X0))),X3),s(X1,X5))),s(X2,X4)))))) )),
  inference(unit_resulting_resolution,[],[f334,f293])).
fof(f37363,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),happ(s(fun(X2,fun(X1,'type.wordSem.word_loc'(X0))),X3),s(X2,X4))),s(X1,X5))))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X2,'type.wordSem.word_loc'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.wordSem.word_loc'(X0))),X3),s(X1,X5))),s(X2,X4)))))) )),
  inference(unit_resulting_resolution,[],[f334,f291])).
fof(f37187,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,happ(s(fun(fun(X37,bool),bool),'!_1'),s(fun(X37,bool),sK7('!_1',fun(X37,bool))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f37076,f235])).
fof(f37076,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | s(bool,X38) != s(bool,happ(s(fun(fun(X37,bool),bool),'!_1'),s(fun(X37,bool),sK7('!_1',fun(X37,bool))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f368,f33016])).
fof(f36980,plain,(
  ( ! [X80,X78,X83,X81,X79,X84,X82] : (s(X83,happ(s(fun(fun(fun(X78,X79),X79),X83),X84),s(fun(fun(X78,X79),X79),'_dstsel_0_x0_1'(s(X78,happ(s(fun(X80,X78),X81),s(X80,X82))))))) = s(X83,happ(s(fun(X80,X83),'_dst_x0x1_2'(s(fun(fun(fun(X78,X79),X79),X83),X84),s(fun(X80,fun(fun(X78,X79),X79)),'_dstsel_1_x10_1'(s(fun(X80,X78),X81))))),s(X80,X82)))) )),
  inference(superposition,[],[f333,f332])).
fof(f36975,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X46,bool),bool),'_dstsel_0_x0_1'(s(X46,happ(s(fun(X47,X46),X48),s(X47,X49))))))) | s(fun(X46,bool),X50) = s(fun(X46,bool),sK3(X50,happ(s(fun(X47,fun(fun(X46,bool),bool)),'_dstsel_1_x10_1'(s(fun(X47,X46),X48))),s(X47,X49)),fun(X46,bool)))) )),
  inference(superposition,[],[f565,f332])).
fof(f37022,plain,(
  ( ! [X39,X37,X38,X40] : (p(s(bool,happ(s(fun(X37,bool),sK7(happ(s(fun(X38,fun(fun(X37,bool),bool)),'_dstsel_1_x10_1'(s(fun(X38,X37),X39))),s(X38,X40)),fun(X37,bool))),s(X37,happ(s(fun(X38,X37),X39),s(X38,X40)))))) | ~p(s(bool,happ(s(fun(fun(fun(X37,bool),bool),bool),'?_1'),s(fun(fun(X37,bool),bool),'_dstsel_0_x0_1'(s(X37,happ(s(fun(X38,X37),X39),s(X38,X40))))))))) )),
  inference(forward_demodulation,[],[f37021,f321])).
fof(f37021,plain,(
  ( ! [X39,X37,X38,X40] : (p(s(bool,happ(s(fun(fun(X37,bool),bool),'_dstsel_0_x0_1'(s(X37,happ(s(fun(X38,X37),X39),s(X38,X40))))),s(fun(X37,bool),sK7(happ(s(fun(X38,fun(fun(X37,bool),bool)),'_dstsel_1_x10_1'(s(fun(X38,X37),X39))),s(X38,X40)),fun(X37,bool)))))) | ~p(s(bool,happ(s(fun(fun(fun(X37,bool),bool),bool),'?_1'),s(fun(fun(X37,bool),bool),'_dstsel_0_x0_1'(s(X37,happ(s(fun(X38,X37),X39),s(X38,X40))))))))) )),
  inference(forward_demodulation,[],[f36973,f332])).
fof(f36973,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,happ(s(fun(fun(fun(X37,bool),bool),bool),'?_1'),s(fun(fun(X37,bool),bool),'_dstsel_0_x0_1'(s(X37,happ(s(fun(X38,X37),X39),s(X38,X40)))))))) | p(s(bool,happ(s(fun(fun(X37,bool),bool),happ(s(fun(X38,fun(fun(X37,bool),bool)),'_dstsel_1_x10_1'(s(fun(X38,X37),X39))),s(X38,X40))),s(fun(X37,bool),sK7(happ(s(fun(X38,fun(fun(X37,bool),bool)),'_dstsel_1_x10_1'(s(fun(X38,X37),X39))),s(X38,X40)),fun(X37,bool))))))) )),
  inference(superposition,[],[f311,f332])).
fof(f37020,plain,(
  ( ! [X35,X33,X36,X34] : (p(s(bool,happ(s(fun(fun(fun(X33,bool),bool),bool),'!_1'),s(fun(fun(X33,bool),bool),'_dstsel_0_x0_1'(s(X33,happ(s(fun(X34,X33),X35),s(X34,X36)))))))) | ~p(s(bool,happ(s(fun(X33,bool),sK6(happ(s(fun(X34,fun(fun(X33,bool),bool)),'_dstsel_1_x10_1'(s(fun(X34,X33),X35))),s(X34,X36)),fun(X33,bool))),s(X33,happ(s(fun(X34,X33),X35),s(X34,X36))))))) )),
  inference(forward_demodulation,[],[f37019,f332])).
fof(f37019,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,happ(s(fun(X33,bool),sK6(happ(s(fun(X34,fun(fun(X33,bool),bool)),'_dstsel_1_x10_1'(s(fun(X34,X33),X35))),s(X34,X36)),fun(X33,bool))),s(X33,happ(s(fun(X34,X33),X35),s(X34,X36)))))) | p(s(bool,happ(s(fun(fun(fun(X33,bool),bool),bool),'!_1'),s(fun(fun(X33,bool),bool),happ(s(fun(X34,fun(fun(X33,bool),bool)),'_dstsel_1_x10_1'(s(fun(X34,X33),X35))),s(X34,X36))))))) )),
  inference(forward_demodulation,[],[f36972,f321])).
fof(f36972,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,happ(s(fun(fun(X33,bool),bool),'_dstsel_0_x0_1'(s(X33,happ(s(fun(X34,X33),X35),s(X34,X36))))),s(fun(X33,bool),sK6(happ(s(fun(X34,fun(fun(X33,bool),bool)),'_dstsel_1_x10_1'(s(fun(X34,X33),X35))),s(X34,X36)),fun(X33,bool)))))) | p(s(bool,happ(s(fun(fun(fun(X33,bool),bool),bool),'!_1'),s(fun(fun(X33,bool),bool),happ(s(fun(X34,fun(fun(X33,bool),bool)),'_dstsel_1_x10_1'(s(fun(X34,X33),X35))),s(X34,X36))))))) )),
  inference(superposition,[],[f310,f332])).
fof(f36970,plain,(
  ( ! [X26,X24,X23,X27,X25] : (p(s(bool,'|dollar|exists_1'(s(fun(fun(X23,bool),bool),'_dstsel_0_x0_1'(s(X23,happ(s(fun(X24,X23),X25),s(X24,X26)))))))) | s(fun(X23,bool),X27) = s(fun(X23,bool),sK3(X27,happ(s(fun(X24,fun(fun(X23,bool),bool)),'_dstsel_1_x10_1'(s(fun(X24,X23),X25))),s(X24,X26)),fun(X23,bool)))) )),
  inference(superposition,[],[f288,f332])).
fof(f36964,plain,(
  ( ! [X6,X10,X8,X7,X5,X11,X9] : (s(fun(fun(X5,X6),X6),'_dstsel_0_x0_1'(s(X5,happ(s(fun(X7,X5),X8),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))))) = s(fun(fun(X5,X6),X6),happ(s(fun(X9,fun(fun(X5,X6),X6)),'_dst_x0x1_2'(s(fun(X7,fun(fun(X5,X6),X6)),'_dstsel_1_x10_1'(s(fun(X7,X5),X8))),s(fun(X9,X7),X10))),s(X9,X11)))) )),
  inference(superposition,[],[f332,f333])).
fof(f36841,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,happ(s(fun(fun(X36,bool),bool),'?_1'),s(fun(X36,bool),sK7('?_1',fun(X36,bool))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f36731,f235])).
fof(f36731,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,happ(s(fun(fun(X36,bool),bool),'?_1'),s(fun(X36,bool),sK7('?_1',fun(X36,bool))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f22155])).
fof(f36669,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,happ(s(fun(fun(fun(X36,bool),bool),bool),'?_1'),s(fun(fun(X36,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f36559,f235])).
fof(f36559,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,happ(s(fun(fun(fun(X36,bool),bool),bool),'?_1'),s(fun(fun(X36,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f32930])).
fof(f36432,plain,(
  ( ! [X784,X779,X783,X781,X785,X782,X780] : (s('type.fcp.cart'(bool,X779),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X779),happ(s(fun('type.fcp.cart'(bool,X780),'type.fcp.cart'(bool,X779)),X782),s('type.fcp.cart'(bool,X780),X781))) | p(s(bool,sK4(X784,X785,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X780),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X780),X781))),s(fun('type.fcp.cart'(bool,X780),'type.fcp.cart'(bool,X779)),X782),s(fun('type.num.num',fun('type.num.num','type.fcp.cart'(bool,X779))),X783)),X779)))) )),
  inference(superposition,[],[f302,f323])).
fof(f36423,plain,(
  ( ! [X728,X724,X726,X729,X725,X727] : (s('type.stackSem.result'(X724),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X724),X729))) != s('type.stackSem.result'(X724),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X724),happ(s(fun('type.fcp.cart'(bool,X725),'type.wordSem.word_loc'(X724)),X727),s('type.fcp.cart'(bool,X725),X726))))) | s('type.wordSem.word_loc'(X724),X729) = s('type.wordSem.word_loc'(X724),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X725),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X725),X726))),s(fun('type.fcp.cart'(bool,X725),'type.wordSem.word_loc'(X724)),X727),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X724))),X728)))) )),
  inference(superposition,[],[f294,f323])).
fof(f36419,plain,(
  ( ! [X703,X700,X702,X704,X701,X705] : (s('type.stackSem.result'(X700),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X700),X705))) != s('type.stackSem.result'(X700),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X700),happ(s(fun('type.fcp.cart'(bool,X701),'type.wordSem.word_loc'(X700)),X703),s('type.fcp.cart'(bool,X701),X702))))) | s('type.wordSem.word_loc'(X700),X705) = s('type.wordSem.word_loc'(X700),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X701),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X701),X702))),s(fun('type.fcp.cart'(bool,X701),'type.wordSem.word_loc'(X700)),X703),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X700))),X704)))) )),
  inference(superposition,[],[f292,f323])).
fof(f36415,plain,(
  ( ! [X681,X677,X679,X680,X676,X678] : (s('type.stackSem.result'(X676),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X676),X681))) != s('type.stackSem.result'(X676),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X676),happ(s(fun('type.fcp.cart'(bool,X677),'type.wordSem.word_loc'(X676)),X679),s('type.fcp.cart'(bool,X677),X678))))) | s('type.wordSem.word_loc'(X676),X681) = s('type.wordSem.word_loc'(X676),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X677),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X677),X678))),s(fun('type.fcp.cart'(bool,X677),'type.wordSem.word_loc'(X676)),X679),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(X676))),X680)))) )),
  inference(superposition,[],[f290,f323])).
fof(f36406,plain,(
  ( ! [X629,X631,X632,X630] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.fcp.cart'(bool,X629),'type.wordSem.word_loc'(sK0)),X631),s('type.fcp.cart'(bool,X629),X630))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X629),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X629),X630))),s(fun('type.fcp.cart'(bool,X629),'type.wordSem.word_loc'(sK0)),X631),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(sK0))),X632)))) )),
  inference(superposition,[],[f2643,f323])).
fof(f36402,plain,(
  ( ! [X613,X609,X611,X612,X610] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.fcp.cart'(bool,X609),'type.wordSem.word_loc'(sK0)),X611),s('type.fcp.cart'(bool,X609),X610))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X609),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X609),X610))),s(fun('type.fcp.cart'(bool,X609),'type.wordSem.word_loc'(sK0)),X611),s(fun('type.num.num',fun('type.num.num','type.wordSem.word_loc'(sK0))),X612)),X613,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X613)))) )),
  inference(superposition,[],[f2654,f323])).
fof(f36388,plain,(
  ( ! [X499,X500,X496,X498,X495,X497] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X495,bool),happ(s(fun('type.fcp.cart'(bool,X496),fun(X495,bool)),X498),s('type.fcp.cart'(bool,X496),X497))))) | s(X495,X500) = s(X495,sK3(X500,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X496),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X496),X497))),s(fun('type.fcp.cart'(bool,X496),fun(X495,bool)),X498),s(fun('type.num.num',fun('type.num.num',fun(X495,bool))),X499)),X495))) )),
  inference(superposition,[],[f565,f323])).
fof(f36501,plain,(
  ( ! [X484,X486,X488,X485,X487] : (p(s(bool,happ(s(fun(X484,bool),happ(s(fun('type.fcp.cart'(bool,X485),fun(X484,bool)),X487),s('type.fcp.cart'(bool,X485),X486))),s(X484,sK7('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X485),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X485),X486))),s(fun('type.fcp.cart'(bool,X485),fun(X484,bool)),X487),s(fun('type.num.num',fun('type.num.num',fun(X484,bool))),X488)),X484))))) | ~p(s(bool,happ(s(fun(fun(X484,bool),bool),'?_1'),s(fun(X484,bool),happ(s(fun('type.fcp.cart'(bool,X485),fun(X484,bool)),X487),s('type.fcp.cart'(bool,X485),X486))))))) )),
  inference(forward_demodulation,[],[f36386,f323])).
fof(f36386,plain,(
  ( ! [X484,X486,X488,X485,X487] : (~p(s(bool,happ(s(fun(fun(X484,bool),bool),'?_1'),s(fun(X484,bool),happ(s(fun('type.fcp.cart'(bool,X485),fun(X484,bool)),X487),s('type.fcp.cart'(bool,X485),X486)))))) | p(s(bool,happ(s(fun(X484,bool),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X485),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X485),X486))),s(fun('type.fcp.cart'(bool,X485),fun(X484,bool)),X487),s(fun('type.num.num',fun('type.num.num',fun(X484,bool))),X488))),s(X484,sK7('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X485),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X485),X486))),s(fun('type.fcp.cart'(bool,X485),fun(X484,bool)),X487),s(fun('type.num.num',fun('type.num.num',fun(X484,bool))),X488)),X484)))))) )),
  inference(superposition,[],[f311,f323])).
fof(f36500,plain,(
  ( ! [X480,X482,X479,X481,X483] : (p(s(bool,happ(s(fun(fun(X479,bool),bool),'!_1'),s(fun(X479,bool),happ(s(fun('type.fcp.cart'(bool,X480),fun(X479,bool)),X482),s('type.fcp.cart'(bool,X480),X481)))))) | ~p(s(bool,happ(s(fun(X479,bool),happ(s(fun('type.fcp.cart'(bool,X480),fun(X479,bool)),X482),s('type.fcp.cart'(bool,X480),X481))),s(X479,sK6('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X480),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X480),X481))),s(fun('type.fcp.cart'(bool,X480),fun(X479,bool)),X482),s(fun('type.num.num',fun('type.num.num',fun(X479,bool))),X483)),X479)))))) )),
  inference(forward_demodulation,[],[f36385,f323])).
fof(f36385,plain,(
  ( ! [X480,X482,X479,X481,X483] : (~p(s(bool,happ(s(fun(X479,bool),happ(s(fun('type.fcp.cart'(bool,X480),fun(X479,bool)),X482),s('type.fcp.cart'(bool,X480),X481))),s(X479,sK6('const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X480),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X480),X481))),s(fun('type.fcp.cart'(bool,X480),fun(X479,bool)),X482),s(fun('type.num.num',fun('type.num.num',fun(X479,bool))),X483)),X479))))) | p(s(bool,happ(s(fun(fun(X479,bool),bool),'!_1'),s(fun(X479,bool),'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X480),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X480),X481))),s(fun('type.fcp.cart'(bool,X480),fun(X479,bool)),X482),s(fun('type.num.num',fun('type.num.num',fun(X479,bool))),X483))))))) )),
  inference(superposition,[],[f310,f323])).
fof(f36383,plain,(
  ( ! [X472,X469,X471,X467,X468,X470] : (p(s(bool,'|dollar|exists_1'(s(fun(X467,bool),happ(s(fun('type.fcp.cart'(bool,X468),fun(X467,bool)),X470),s('type.fcp.cart'(bool,X468),X469)))))) | s(X467,X472) = s(X467,sK3(X472,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X468),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X468),X469))),s(fun('type.fcp.cart'(bool,X468),fun(X467,bool)),X470),s(fun('type.num.num',fun('type.num.num',fun(X467,bool))),X471)),X467))) )),
  inference(superposition,[],[f288,f323])).
fof(f36353,plain,(
  ( ! [X333,X335,X332,X334,X336] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X336,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,X332),bool),X334),s('type.fcp.cart'(bool,X332),X333))))))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X332),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X332),X333))),s(fun('type.fcp.cart'(bool,X332),bool),X334),s(fun('type.num.num',fun('type.num.num',bool)),X335)))) )),
  inference(superposition,[],[f2213,f323])).
fof(f36348,plain,(
  ( ! [X308,X310,X309,X311,X307] : (s(bool,'T_0') != s(bool,happ(s(fun('type.fcp.cart'(bool,X307),bool),X309),s('type.fcp.cart'(bool,X307),X308))) | s(bool,X311) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X307),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X307),X308))),s(fun('type.fcp.cart'(bool,X307),bool),X309),s(fun('type.num.num',fun('type.num.num',bool)),X310))) | s(bool,'F_0') = s(bool,X311)) )),
  inference(superposition,[],[f1400,f323])).
fof(f36347,plain,(
  ( ! [X302,X304,X306,X303,X305] : (s(bool,X306) != s(bool,happ(s(fun('type.fcp.cart'(bool,X302),bool),X304),s('type.fcp.cart'(bool,X302),X303))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X302),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X302),X303))),s(fun('type.fcp.cart'(bool,X302),bool),X304),s(fun('type.num.num',fun('type.num.num',bool)),X305))) | s(bool,'F_0') = s(bool,X306)) )),
  inference(superposition,[],[f1197,f323])).
fof(f36346,plain,(
  ( ! [X300,X298,X301,X297,X299] : (s(bool,X301) != s(bool,happ(s(fun('type.fcp.cart'(bool,X297),bool),X299),s('type.fcp.cart'(bool,X297),X298))) | s(bool,'T_0') = s(bool,X301) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X297),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X297),X298))),s(fun('type.fcp.cart'(bool,X297),bool),X299),s(fun('type.num.num',fun('type.num.num',bool)),X300)))) )),
  inference(superposition,[],[f1197,f323])).
fof(f36470,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,'T_0') != s(bool,happ(s(fun('type.fcp.cart'(bool,X260),bool),X262),s('type.fcp.cart'(bool,X260),X261))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X260),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X260),X261))),s(fun('type.fcp.cart'(bool,X260),bool),X262),s(fun('type.num.num',fun('type.num.num',bool)),X263)))) )),
  inference(forward_demodulation,[],[f36339,f270])).
fof(f36339,plain,(
  ( ! [X261,X263,X265,X260,X262,X264] : (s(bool,'const.bool.DATATYPE_1'(s(X264,X265))) != s(bool,happ(s(fun('type.fcp.cart'(bool,X260),bool),X262),s('type.fcp.cart'(bool,X260),X261))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X260),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X260),X261))),s(fun('type.fcp.cart'(bool,X260),bool),X262),s(fun('type.num.num',fun('type.num.num',bool)),X263)))) )),
  inference(superposition,[],[f557,f323])).
fof(f36283,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,X49) = s(bool,happ(s(fun('type.fcp.cart'(bool,X45),bool),X47),s('type.fcp.cart'(bool,X45),X46))) | s(bool,'F_0') = s(bool,X49) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X45),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X45),X46))),s(fun('type.fcp.cart'(bool,X45),bool),X47),s(fun('type.num.num',fun('type.num.num',bool)),X48)))) )),
  inference(superposition,[],[f323,f1108])).
fof(f36281,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'F_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,X35),bool),X37),s('type.fcp.cart'(bool,X35),X36))) | s(bool,X39) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X35),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X35),X36))),s(fun('type.fcp.cart'(bool,X35),bool),X37),s(fun('type.num.num',fun('type.num.num',bool)),X38))) | s(bool,'F_0') = s(bool,X39)) )),
  inference(superposition,[],[f323,f1108])).
fof(f36439,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,X29),bool),X31),s('type.fcp.cart'(bool,X29),X30))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X29),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X29),X30))),s(fun('type.fcp.cart'(bool,X29),bool),X31),s(fun('type.num.num',fun('type.num.num',bool)),X32)))) )),
  inference(forward_demodulation,[],[f36280,f270])).
fof(f36280,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(bool,'const.bool.DATATYPE_1'(s(X33,X34))) = s(bool,happ(s(fun('type.fcp.cart'(bool,X29),bool),X31),s('type.fcp.cart'(bool,X29),X30))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X29),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X29),X30))),s(fun('type.fcp.cart'(bool,X29),bool),X31),s(fun('type.num.num',fun('type.num.num',bool)),X32)))) )),
  inference(superposition,[],[f323,f1071])).
fof(f36277,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,X18) = s(bool,happ(s(fun('type.fcp.cart'(bool,X14),bool),X16),s('type.fcp.cart'(bool,X14),X15))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X14),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X14),X15))),s(fun('type.fcp.cart'(bool,X14),bool),X16),s(fun('type.num.num',fun('type.num.num',bool)),X17)))) )),
  inference(superposition,[],[f323,f365])).
fof(f36276,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,X9),bool),X11),s('type.fcp.cart'(bool,X9),X10))) | s(bool,X13) = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X9),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X9),X10))),s(fun('type.fcp.cart'(bool,X9),bool),X11),s(fun('type.num.num',fun('type.num.num',bool)),X12))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f323,f365])).
fof(f36275,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'F_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,X5),bool),X7),s('type.fcp.cart'(bool,X5),X6))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X5),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X5),X6))),s(fun('type.fcp.cart'(bool,X5),bool),X7),s(fun('type.num.num',fun('type.num.num',bool)),X8)))) )),
  inference(superposition,[],[f323,f242])).
fof(f36217,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,happ(s(fun(fun(fun(X36,bool),bool),bool),'?_1'),s(fun(fun(X36,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f36107,f235])).
fof(f36107,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,happ(s(fun(fun(fun(X36,bool),bool),bool),'?_1'),s(fun(fun(X36,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f22085])).
fof(f35821,plain,(
  ( ! [X907,X905,X911,X909,X906,X904,X910,X908] : (s('type.fcp.cart'(bool,X904),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X904),happ(s(fun(X906,'type.fcp.cart'(bool,X904)),X907),s(X906,happ(s(fun(X905,X906),X908),s(X905,X909))))) | p(s(bool,sK4(X910,X911,happ(s(fun(X905,'type.fcp.cart'(bool,X904)),'_dst_x0x1_2'(s(fun(X906,'type.fcp.cart'(bool,X904)),X907),s(fun(X905,X906),X908))),s(X905,X909)),X904)))) )),
  inference(superposition,[],[f302,f333])).
fof(f35814,plain,(
  ( ! [X860,X854,X859,X857,X855,X858,X856] : (s('type.wordSem.word_loc'(X854),X860) != s('type.wordSem.word_loc'(X854),happ(s(fun(X856,'type.wordSem.word_loc'(X854)),X857),s(X856,happ(s(fun(X855,X856),X858),s(X855,X859))))) | s('type.stackSem.result'(X854),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X854),X860))) = s('type.stackSem.result'(X854),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X854),happ(s(fun(X855,'type.wordSem.word_loc'(X854)),'_dst_x0x1_2'(s(fun(X856,'type.wordSem.word_loc'(X854)),X857),s(fun(X855,X856),X858))),s(X855,X859)))))) )),
  inference(superposition,[],[f295,f333])).
fof(f35812,plain,(
  ( ! [X843,X841,X845,X842,X840,X846,X844] : (s('type.stackSem.result'(X840),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X840),X846))) != s('type.stackSem.result'(X840),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X840),happ(s(fun(X842,'type.wordSem.word_loc'(X840)),X843),s(X842,happ(s(fun(X841,X842),X844),s(X841,X845))))))) | s('type.wordSem.word_loc'(X840),X846) = s('type.wordSem.word_loc'(X840),happ(s(fun(X841,'type.wordSem.word_loc'(X840)),'_dst_x0x1_2'(s(fun(X842,'type.wordSem.word_loc'(X840)),X843),s(fun(X841,X842),X844))),s(X841,X845)))) )),
  inference(superposition,[],[f294,f333])).
fof(f35810,plain,(
  ( ! [X831,X829,X826,X830,X828,X832,X827] : (s('type.wordSem.word_loc'(X826),X832) != s('type.wordSem.word_loc'(X826),happ(s(fun(X828,'type.wordSem.word_loc'(X826)),X829),s(X828,happ(s(fun(X827,X828),X830),s(X827,X831))))) | s('type.stackSem.result'(X826),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X826),X832))) = s('type.stackSem.result'(X826),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X826),happ(s(fun(X827,'type.wordSem.word_loc'(X826)),'_dst_x0x1_2'(s(fun(X828,'type.wordSem.word_loc'(X826)),X829),s(fun(X827,X828),X830))),s(X827,X831)))))) )),
  inference(superposition,[],[f293,f333])).
fof(f35808,plain,(
  ( ! [X817,X814,X812,X818,X816,X815,X813] : (s('type.stackSem.result'(X812),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X812),X818))) != s('type.stackSem.result'(X812),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X812),happ(s(fun(X814,'type.wordSem.word_loc'(X812)),X815),s(X814,happ(s(fun(X813,X814),X816),s(X813,X817))))))) | s('type.wordSem.word_loc'(X812),X818) = s('type.wordSem.word_loc'(X812),happ(s(fun(X813,'type.wordSem.word_loc'(X812)),'_dst_x0x1_2'(s(fun(X814,'type.wordSem.word_loc'(X812)),X815),s(fun(X813,X814),X816))),s(X813,X817)))) )),
  inference(superposition,[],[f292,f333])).
fof(f35806,plain,(
  ( ! [X798,X802,X800,X804,X799,X803,X801] : (s('type.wordSem.word_loc'(X798),X804) != s('type.wordSem.word_loc'(X798),happ(s(fun(X800,'type.wordSem.word_loc'(X798)),X801),s(X800,happ(s(fun(X799,X800),X802),s(X799,X803))))) | s('type.stackSem.result'(X798),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X798),X804))) = s('type.stackSem.result'(X798),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X798),happ(s(fun(X799,'type.wordSem.word_loc'(X798)),'_dst_x0x1_2'(s(fun(X800,'type.wordSem.word_loc'(X798)),X801),s(fun(X799,X800),X802))),s(X799,X803)))))) )),
  inference(superposition,[],[f291,f333])).
fof(f35804,plain,(
  ( ! [X786,X784,X790,X788,X787,X785,X789] : (s('type.stackSem.result'(X784),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X784),X790))) != s('type.stackSem.result'(X784),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X784),happ(s(fun(X786,'type.wordSem.word_loc'(X784)),X787),s(X786,happ(s(fun(X785,X786),X788),s(X785,X789))))))) | s('type.wordSem.word_loc'(X784),X790) = s('type.wordSem.word_loc'(X784),happ(s(fun(X785,'type.wordSem.word_loc'(X784)),'_dst_x0x1_2'(s(fun(X786,'type.wordSem.word_loc'(X784)),X787),s(fun(X785,X786),X788))),s(X785,X789)))) )),
  inference(superposition,[],[f290,f333])).
fof(f35795,plain,(
  ( ! [X732,X728,X730,X729,X731] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X729,'type.wordSem.word_loc'(sK0)),X730),s(X729,happ(s(fun(X728,X729),X731),s(X728,X732))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X728,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X729,'type.wordSem.word_loc'(sK0)),X730),s(fun(X728,X729),X731))),s(X728,X732)))) )),
  inference(superposition,[],[f2643,f333])).
fof(f35794,plain,(
  ( ! [X724,X726,X725,X727,X723] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X724,'type.wordSem.word_loc'(sK0)),X725),s(X724,happ(s(fun(X723,X724),X726),s(X723,X727))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun(X723,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X724,'type.wordSem.word_loc'(sK0)),X725),s(fun(X723,X724),X726))),s(X723,X727)))))) )),
  inference(superposition,[],[f2651,f333])).
fof(f35793,plain,(
  ( ! [X720,X722,X716,X718,X721,X717,X719] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X717,'type.wordSem.word_loc'(sK0)),X718),s(X717,happ(s(fun(X716,X717),X719),s(X716,X720))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X721,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X716,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X717,'type.wordSem.word_loc'(sK0)),X718),s(fun(X716,X717),X719))),s(X716,X720))))),s(X721,X722)))) )),
  inference(superposition,[],[f2652,f333])).
fof(f35792,plain,(
  ( ! [X712,X714,X710,X713,X715,X711] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X711,'type.wordSem.word_loc'(sK0)),X712),s(X711,happ(s(fun(X710,X711),X713),s(X710,X714))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X710,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X711,'type.wordSem.word_loc'(sK0)),X712),s(fun(X710,X711),X713))),s(X710,X714))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X715),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f333])).
fof(f35791,plain,(
  ( ! [X707,X708,X704,X706,X709,X705] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X705,'type.wordSem.word_loc'(sK0)),X706),s(X705,happ(s(fun(X704,X705),X707),s(X704,X708))))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X704,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X705,'type.wordSem.word_loc'(sK0)),X706),s(fun(X704,X705),X707))),s(X704,X708)),X709,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X709)))) )),
  inference(superposition,[],[f2654,f333])).
fof(f35780,plain,(
  ( ! [X606,X609,X605,X607,X603,X608,X604] : (~p(s(bool,happ(s(fun(X603,bool),happ(s(fun(X605,fun(X603,bool)),X606),s(X605,happ(s(fun(X604,X605),X607),s(X604,X608))))),s(X603,X609)))) | p(s(bool,'|dollar|exists_1'(s(fun(X603,bool),happ(s(fun(X604,fun(X603,bool)),'_dst_x0x1_2'(s(fun(X605,fun(X603,bool)),X606),s(fun(X604,X605),X607))),s(X604,X608))))))) )),
  inference(superposition,[],[f2633,f333])).
fof(f35779,plain,(
  ( ! [X600,X602,X596,X598,X601,X597,X599] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X596,bool),happ(s(fun(X598,fun(X596,bool)),X599),s(X598,happ(s(fun(X597,X598),X600),s(X597,X601))))))) | s(X596,X602) = s(X596,sK3(X602,happ(s(fun(X597,fun(X596,bool)),'_dst_x0x1_2'(s(fun(X598,fun(X596,bool)),X599),s(fun(X597,X598),X600))),s(X597,X601)),X596))) )),
  inference(superposition,[],[f565,f333])).
fof(f35778,plain,(
  ( ! [X592,X594,X590,X593,X595,X589,X591] : (~p(s(bool,happ(s(fun(X589,bool),happ(s(fun(X591,fun(X589,bool)),X592),s(X591,happ(s(fun(X590,X591),X593),s(X590,X594))))),s(X589,X595)))) | p(s(bool,happ(s(fun(fun(X589,bool),bool),'?_1'),s(fun(X589,bool),happ(s(fun(X590,fun(X589,bool)),'_dst_x0x1_2'(s(fun(X591,fun(X589,bool)),X592),s(fun(X590,X591),X593))),s(X590,X594))))))) )),
  inference(superposition,[],[f312,f333])).
fof(f35777,plain,(
  ( ! [X588,X584,X586,X585,X587,X583] : (~p(s(bool,happ(s(fun(fun(X583,bool),bool),'?_1'),s(fun(X583,bool),happ(s(fun(X585,fun(X583,bool)),X586),s(X585,happ(s(fun(X584,X585),X587),s(X584,X588)))))))) | p(s(bool,happ(s(fun(X583,bool),happ(s(fun(X584,fun(X583,bool)),'_dst_x0x1_2'(s(fun(X585,fun(X583,bool)),X586),s(fun(X584,X585),X587))),s(X584,X588))),s(X583,sK7(happ(s(fun(X584,fun(X583,bool)),'_dst_x0x1_2'(s(fun(X585,fun(X583,bool)),X586),s(fun(X584,X585),X587))),s(X584,X588)),X583)))))) )),
  inference(superposition,[],[f311,f333])).
fof(f35776,plain,(
  ( ! [X580,X582,X578,X581,X577,X579] : (~p(s(bool,happ(s(fun(X577,bool),happ(s(fun(X579,fun(X577,bool)),X580),s(X579,happ(s(fun(X578,X579),X581),s(X578,X582))))),s(X577,sK6(happ(s(fun(X578,fun(X577,bool)),'_dst_x0x1_2'(s(fun(X579,fun(X577,bool)),X580),s(fun(X578,X579),X581))),s(X578,X582)),X577))))) | p(s(bool,happ(s(fun(fun(X577,bool),bool),'!_1'),s(fun(X577,bool),happ(s(fun(X578,fun(X577,bool)),'_dst_x0x1_2'(s(fun(X579,fun(X577,bool)),X580),s(fun(X578,X579),X581))),s(X578,X582))))))) )),
  inference(superposition,[],[f310,f333])).
fof(f35775,plain,(
  ( ! [X573,X575,X571,X576,X572,X574,X570] : (~p(s(bool,happ(s(fun(fun(X570,bool),bool),'!_1'),s(fun(X570,bool),happ(s(fun(X572,fun(X570,bool)),X573),s(X572,happ(s(fun(X571,X572),X574),s(X571,X575)))))))) | p(s(bool,happ(s(fun(X570,bool),happ(s(fun(X571,fun(X570,bool)),'_dst_x0x1_2'(s(fun(X572,fun(X570,bool)),X573),s(fun(X571,X572),X574))),s(X571,X575))),s(X570,X576))))) )),
  inference(superposition,[],[f309,f333])).
fof(f35774,plain,(
  ( ! [X569,X565,X567,X563,X568,X564,X566] : (p(s(bool,'|dollar|exists_1'(s(fun(X563,bool),happ(s(fun(X565,fun(X563,bool)),X566),s(X565,happ(s(fun(X564,X565),X567),s(X564,X568)))))))) | s(X563,X569) = s(X563,sK3(X569,happ(s(fun(X564,fun(X563,bool)),'_dst_x0x1_2'(s(fun(X565,fun(X563,bool)),X566),s(fun(X564,X565),X567))),s(X564,X568)),X563))) )),
  inference(superposition,[],[f288,f333])).
fof(f35749,plain,(
  ( ! [X428,X430,X426,X429,X425,X427] : (~p(s(bool,happ(s(fun(X426,bool),X427),s(X426,happ(s(fun(X425,X426),X428),s(X425,X429)))))) | p(s(bool,happ(s(fun(fun(X430,bool),bool),'!_1'),s(fun(X430,bool),'_dst_x0_1'(s(bool,happ(s(fun(X425,bool),'_dst_x0x1_2'(s(fun(X426,bool),X427),s(fun(X425,X426),X428))),s(X425,X429))))))))) )),
  inference(superposition,[],[f5586,f333])).
fof(f35747,plain,(
  ( ! [X414,X416,X418,X415,X417,X419] : (~p(s(bool,happ(s(fun(X415,bool),X416),s(X415,happ(s(fun(X414,X415),X417),s(X414,X418)))))) | p(s(bool,happ(s(fun(fun(X419,bool),bool),'?_1'),s(fun(X419,bool),'_dst_x0_1'(s(bool,happ(s(fun(X414,bool),'_dst_x0x1_2'(s(fun(X415,bool),X416),s(fun(X414,X415),X417))),s(X414,X418))))))))) )),
  inference(superposition,[],[f4218,f333])).
fof(f35744,plain,(
  ( ! [X399,X401,X403,X398,X400,X402] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X403,bool),'_dst_x0_1'(s(bool,happ(s(fun(X399,bool),X400),s(X399,happ(s(fun(X398,X399),X401),s(X398,X402))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X398,bool),'_dst_x0x1_2'(s(fun(X399,bool),X400),s(fun(X398,X399),X401))),s(X398,X402)))) )),
  inference(superposition,[],[f2213,f333])).
fof(f35741,plain,(
  ( ! [X383,X385,X380,X382,X384,X381] : (p(s(bool,'|dollar|exists_1'(s(fun(X385,bool),'_dst_x0_1'(s(bool,happ(s(fun(X381,bool),X382),s(X381,happ(s(fun(X380,X381),X383),s(X380,X384)))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X380,bool),'_dst_x0x1_2'(s(fun(X381,bool),X382),s(fun(X380,X381),X383))),s(X380,X384)))) )),
  inference(superposition,[],[f1936,f333])).
fof(f35740,plain,(
  ( ! [X377,X379,X374,X376,X378,X375] : (~p(s(bool,happ(s(fun(X375,bool),X376),s(X375,happ(s(fun(X374,X375),X377),s(X374,X378)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X379,bool),'_dst_x0_1'(s(bool,happ(s(fun(X374,bool),'_dst_x0x1_2'(s(fun(X375,bool),X376),s(fun(X374,X375),X377))),s(X374,X378))))))))) )),
  inference(superposition,[],[f1802,f333])).
fof(f35739,plain,(
  ( ! [X372,X368,X370,X373,X369,X371] : (s(bool,'T_0') != s(bool,happ(s(fun(X369,bool),X370),s(X369,happ(s(fun(X368,X369),X371),s(X368,X372))))) | s(bool,X373) = s(bool,happ(s(fun(X368,bool),'_dst_x0x1_2'(s(fun(X369,bool),X370),s(fun(X368,X369),X371))),s(X368,X372))) | s(bool,'F_0') = s(bool,X373)) )),
  inference(superposition,[],[f1400,f333])).
fof(f35738,plain,(
  ( ! [X364,X366,X362,X365,X367,X363] : (s(bool,X367) != s(bool,happ(s(fun(X363,bool),X364),s(X363,happ(s(fun(X362,X363),X365),s(X362,X366))))) | s(bool,'T_0') = s(bool,happ(s(fun(X362,bool),'_dst_x0x1_2'(s(fun(X363,bool),X364),s(fun(X362,X363),X365))),s(X362,X366))) | s(bool,'F_0') = s(bool,X367)) )),
  inference(superposition,[],[f1197,f333])).
fof(f35737,plain,(
  ( ! [X356,X358,X360,X357,X359,X361] : (s(bool,X361) != s(bool,happ(s(fun(X357,bool),X358),s(X357,happ(s(fun(X356,X357),X359),s(X356,X360))))) | s(bool,'T_0') = s(bool,X361) | s(bool,'F_0') = s(bool,happ(s(fun(X356,bool),'_dst_x0x1_2'(s(fun(X357,bool),X358),s(fun(X356,X357),X359))),s(X356,X360)))) )),
  inference(superposition,[],[f1197,f333])).
fof(f35731,plain,(
  ( ! [X321,X323,X324,X320,X322,X319] : (~p(s(bool,happ(s(fun(X320,bool),X321),s(X320,happ(s(fun(X319,X320),X322),s(X319,X323)))))) | s(bool,X324) = s(bool,happ(s(fun(X319,bool),'_dst_x0x1_2'(s(fun(X320,bool),X321),s(fun(X319,X320),X322))),s(X319,X323))) | s(bool,'F_0') = s(bool,X324)) )),
  inference(superposition,[],[f1037,f333])).
fof(f35870,plain,(
  ( ! [X313,X315,X316,X312,X314] : (s(bool,'T_0') != s(bool,happ(s(fun(X313,bool),X314),s(X313,happ(s(fun(X312,X313),X315),s(X312,X316))))) | s(bool,'T_0') = s(bool,happ(s(fun(X312,bool),'_dst_x0x1_2'(s(fun(X313,bool),X314),s(fun(X312,X313),X315))),s(X312,X316)))) )),
  inference(forward_demodulation,[],[f35730,f270])).
fof(f35730,plain,(
  ( ! [X313,X315,X316,X318,X312,X314,X317] : (s(bool,'const.bool.DATATYPE_1'(s(X317,X318))) != s(bool,happ(s(fun(X313,bool),X314),s(X313,happ(s(fun(X312,X313),X315),s(X312,X316))))) | s(bool,'T_0') = s(bool,happ(s(fun(X312,bool),'_dst_x0x1_2'(s(fun(X313,bool),X314),s(fun(X312,X313),X315))),s(X312,X316)))) )),
  inference(superposition,[],[f557,f333])).
fof(f35729,plain,(
  ( ! [X308,X310,X306,X309,X311,X307] : (p(s(bool,happ(s(fun(X307,bool),X308),s(X307,happ(s(fun(X306,X307),X309),s(X306,X310)))))) | s(bool,X311) = s(bool,happ(s(fun(X306,bool),'_dst_x0x1_2'(s(fun(X307,bool),X308),s(fun(X306,X307),X309))),s(X306,X310))) | s(bool,'T_0') = s(bool,X311)) )),
  inference(superposition,[],[f425,f333])).
fof(f35728,plain,(
  ( ! [X302,X304,X301,X303,X305] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X302,bool),X303),s(X302,happ(s(fun(X301,X302),X304),s(X301,X305))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X301,bool),'_dst_x0x1_2'(s(fun(X302,bool),X303),s(fun(X301,X302),X304))),s(X301,X305)))) )),
  inference(superposition,[],[f398,f333])).
fof(f35727,plain,(
  ( ! [X300,X296,X298,X295,X297,X299] : (~p(s(bool,happ(s(fun(X296,bool),X297),s(X296,happ(s(fun(X295,X296),X298),s(X295,X299)))))) | s(bool,X300) != s(bool,happ(s(fun(X295,bool),'_dst_x0x1_2'(s(fun(X296,bool),X297),s(fun(X295,X296),X298))),s(X295,X299))) | s(bool,'T_0') = s(bool,X300)) )),
  inference(superposition,[],[f368,f333])).
fof(f35722,plain,(
  ( ! [X269,X265,X267,X268,X270,X266] : (~p(s(bool,happ(s(fun(X266,bool),X267),s(X266,happ(s(fun(X265,X266),X268),s(X265,X269)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X270))),s(bool,happ(s(fun(X265,bool),'_dst_x0x1_2'(s(fun(X266,bool),X267),s(fun(X265,X266),X268))),s(X265,X269))))))) )),
  inference(superposition,[],[f318,f333])).
fof(f35720,plain,(
  ( ! [X255,X253,X257,X254,X256,X258] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X254,bool),X255),s(X254,happ(s(fun(X253,X254),X256),s(X253,X257))))))),s(bool,X258)))) | p(s(bool,happ(s(fun(X253,bool),'_dst_x0x1_2'(s(fun(X254,bool),X255),s(fun(X253,X254),X256))),s(X253,X257))))) )),
  inference(superposition,[],[f317,f333])).
fof(f35719,plain,(
  ( ! [X251,X249,X252,X250,X248,X247] : (~p(s(bool,happ(s(fun(X248,bool),X249),s(X248,happ(s(fun(X247,X248),X250),s(X247,X251)))))) | p(s(bool,X252)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X247,bool),'_dst_x0x1_2'(s(fun(X248,bool),X249),s(fun(X247,X248),X250))),s(X247,X251))))),s(bool,X252))))) )),
  inference(superposition,[],[f316,f333])).
fof(f35718,plain,(
  ( ! [X243,X241,X246,X244,X242,X245] : (~p(s(bool,happ(s(fun(X242,bool),X243),s(X242,happ(s(fun(X241,X242),X244),s(X241,X245)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X246))),s(bool,happ(s(fun(X241,bool),'_dst_x0x1_2'(s(fun(X242,bool),X243),s(fun(X241,X242),X244))),s(X241,X245))))))) )),
  inference(superposition,[],[f315,f333])).
fof(f35717,plain,(
  ( ! [X239,X237,X235,X240,X238,X236] : (~p(s(bool,happ(s(fun(X236,bool),X237),s(X236,happ(s(fun(X235,X236),X238),s(X235,X239)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X235,bool),'_dst_x0x1_2'(s(fun(X236,bool),X237),s(fun(X235,X236),X238))),s(X235,X239))))),s(bool,X240))))) )),
  inference(superposition,[],[f314,f333])).
fof(f35716,plain,(
  ( ! [X231,X229,X233,X230,X234,X232] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X234))),s(bool,happ(s(fun(X230,bool),X231),s(X230,happ(s(fun(X229,X230),X232),s(X229,X233)))))))) | p(s(bool,X234)) | p(s(bool,happ(s(fun(X229,bool),'_dst_x0x1_2'(s(fun(X230,bool),X231),s(fun(X229,X230),X232))),s(X229,X233))))) )),
  inference(superposition,[],[f313,f333])).
fof(f35715,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X224,bool),X225),s(X224,happ(s(fun(X223,X224),X226),s(X223,X227))))))),s(bool,X228)))) | p(s(bool,happ(s(fun(X223,bool),'_dst_x0x1_2'(s(fun(X224,bool),X225),s(fun(X223,X224),X226))),s(X223,X227)))) | p(s(bool,X228))) )),
  inference(superposition,[],[f313,f333])).
fof(f35714,plain,(
  ( ! [X218,X222,X220,X219,X217,X221] : (~p(s(bool,happ(s(fun(X218,bool),X219),s(X218,happ(s(fun(X217,X218),X220),s(X217,X221)))))) | ~p(s(bool,X222)) | s(bool,X222) = s(bool,happ(s(fun(X217,bool),'_dst_x0x1_2'(s(fun(X218,bool),X219),s(fun(X217,X218),X220))),s(X217,X221)))) )),
  inference(superposition,[],[f308,f333])).
fof(f35712,plain,(
  ( ! [X210,X208,X206,X209,X207,X205] : (p(s(bool,happ(s(fun(X206,bool),X207),s(X206,happ(s(fun(X205,X206),X208),s(X205,X209)))))) | p(s(bool,X210)) | s(bool,X210) = s(bool,happ(s(fun(X205,bool),'_dst_x0x1_2'(s(fun(X206,bool),X207),s(fun(X205,X206),X208))),s(X205,X209)))) )),
  inference(superposition,[],[f305,f333])).
fof(f35711,plain,(
  ( ! [X204,X202,X200,X203,X201] : (p(s(bool,happ(s(fun(X201,bool),X202),s(X201,happ(s(fun(X200,X201),X203),s(X200,X204)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X200,bool),'_dst_x0x1_2'(s(fun(X201,bool),X202),s(fun(X200,X201),X203))),s(X200,X204)))) )),
  inference(superposition,[],[f250,f333])).
fof(f35710,plain,(
  ( ! [X198,X196,X199,X197,X195] : (s(bool,'F_0') != s(bool,happ(s(fun(X196,bool),X197),s(X196,happ(s(fun(X195,X196),X198),s(X195,X199))))) | ~p(s(bool,happ(s(fun(X195,bool),'_dst_x0x1_2'(s(fun(X196,bool),X197),s(fun(X195,X196),X198))),s(X195,X199))))) )),
  inference(superposition,[],[f249,f333])).
fof(f35709,plain,(
  ( ! [X191,X194,X192,X190,X193] : (~p(s(bool,happ(s(fun(X191,bool),X192),s(X191,happ(s(fun(X190,X191),X193),s(X190,X194)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X190,bool),'_dst_x0x1_2'(s(fun(X191,bool),X192),s(fun(X190,X191),X193))),s(X190,X194)))) )),
  inference(superposition,[],[f246,f333])).
fof(f35708,plain,(
  ( ! [X189,X187,X185,X188,X186] : (p(s(bool,happ(s(fun(X186,bool),X187),s(X186,happ(s(fun(X185,X186),X188),s(X185,X189)))))) | s(bool,'T_0') != s(bool,happ(s(fun(X185,bool),'_dst_x0x1_2'(s(fun(X186,bool),X187),s(fun(X185,X186),X188))),s(X185,X189)))) )),
  inference(superposition,[],[f245,f333])).
fof(f35705,plain,(
  ( ! [X175,X173,X176,X174] : (~p(s(bool,happ(s(fun(X174,bool),X175),s(X174,happ(s(fun(X173,X174),X176),s(X173,sK6('_dst_x0x1_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176)),X173))))))) | p(s(bool,happ(s(fun(fun(X173,bool),bool),'!_1'),s(fun(X173,bool),'_dst_x0x1_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176))))))) )),
  inference(superposition,[],[f310,f333])).
fof(f35704,plain,(
  ( ! [X171,X169,X172,X170,X168] : (~p(s(bool,happ(s(fun(X169,bool),X170),s(X169,happ(s(fun(X168,X169),X171),s(X168,X172)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X168,bool),'_dst_x0x1_2'(s(fun(X169,bool),X170),s(fun(X168,X169),X171))))))) )),
  inference(superposition,[],[f2633,f333])).
fof(f35703,plain,(
  ( ! [X167,X165,X163,X166,X164] : (~p(s(bool,happ(s(fun(X164,bool),X165),s(X164,happ(s(fun(X163,X164),X166),s(X163,X167)))))) | p(s(bool,happ(s(fun(fun(X163,bool),bool),'?_1'),s(fun(X163,bool),'_dst_x0x1_2'(s(fun(X164,bool),X165),s(fun(X163,X164),X166))))))) )),
  inference(superposition,[],[f312,f333])).
fof(f35697,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (p(s(bool,happ(s(fun(X123,bool),happ(s(fun(X123,fun(X123,bool)),'=_0'),s(X123,X129))),s(X123,happ(s(fun(X125,X123),X126),s(X125,happ(s(fun(X124,X125),X127),s(X124,X128)))))))) | s(X123,X129) != s(X123,happ(s(fun(X124,X123),'_dst_x0x1_2'(s(fun(X125,X123),X126),s(fun(X124,X125),X127))),s(X124,X128)))) )),
  inference(superposition,[],[f331,f333])).
fof(f35696,plain,(
  ( ! [X121,X118,X116,X122,X120,X119,X117] : (p(s(bool,happ(s(fun(X116,bool),happ(s(fun(X116,fun(X116,bool)),'=_0'),s(X116,happ(s(fun(X118,X116),X119),s(X118,happ(s(fun(X117,X118),X120),s(X117,X121))))))),s(X116,X122)))) | s(X116,X122) != s(X116,happ(s(fun(X117,X116),'_dst_x0x1_2'(s(fun(X118,X116),X119),s(fun(X117,X118),X120))),s(X117,X121)))) )),
  inference(superposition,[],[f331,f333])).
fof(f35695,plain,(
  ( ! [X111,X109,X114,X112,X110,X115,X113] : (~p(s(bool,happ(s(fun(X109,bool),happ(s(fun(X109,fun(X109,bool)),'=_0'),s(X109,X115))),s(X109,happ(s(fun(X111,X109),X112),s(X111,happ(s(fun(X110,X111),X113),s(X110,X114)))))))) | s(X109,X115) = s(X109,happ(s(fun(X110,X109),'_dst_x0x1_2'(s(fun(X111,X109),X112),s(fun(X110,X111),X113))),s(X110,X114)))) )),
  inference(superposition,[],[f330,f333])).
fof(f35694,plain,(
  ( ! [X103,X107,X105,X102,X108,X106,X104] : (~p(s(bool,happ(s(fun(X102,bool),happ(s(fun(X102,fun(X102,bool)),'=_0'),s(X102,happ(s(fun(X104,X102),X105),s(X104,happ(s(fun(X103,X104),X106),s(X103,X107))))))),s(X102,X108)))) | s(X102,X108) = s(X102,happ(s(fun(X103,X102),'_dst_x0x1_2'(s(fun(X104,X102),X105),s(fun(X103,X104),X106))),s(X103,X107)))) )),
  inference(superposition,[],[f330,f333])).
fof(f35681,plain,(
  ( ! [X990,X994,X992,X996,X991,X989,X995,X993] : (s('type.fcp.cart'(bool,X989),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X989),happ(s(fun(X992,'type.fcp.cart'(bool,X989)),'_dst_x0x1_2'(s(fun(X990,'type.fcp.cart'(bool,X989)),X991),s(fun(X992,X990),X993))),s(X992,X994))) | p(s(bool,sK4(X995,X996,happ(s(fun(X990,'type.fcp.cart'(bool,X989)),X991),s(X990,happ(s(fun(X992,X990),X993),s(X992,X994)))),X989)))) )),
  inference(superposition,[],[f302,f333])).
fof(f35674,plain,(
  ( ! [X945,X942,X940,X944,X939,X943,X941] : (s('type.wordSem.word_loc'(X939),X945) != s('type.wordSem.word_loc'(X939),happ(s(fun(X942,'type.wordSem.word_loc'(X939)),'_dst_x0x1_2'(s(fun(X940,'type.wordSem.word_loc'(X939)),X941),s(fun(X942,X940),X943))),s(X942,X944))) | s('type.stackSem.result'(X939),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X939),X945))) = s('type.stackSem.result'(X939),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X939),happ(s(fun(X940,'type.wordSem.word_loc'(X939)),X941),s(X940,happ(s(fun(X942,X940),X943),s(X942,X944)))))))) )),
  inference(superposition,[],[f295,f333])).
fof(f35672,plain,(
  ( ! [X926,X930,X928,X927,X925,X931,X929] : (s('type.stackSem.result'(X925),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X925),X931))) != s('type.stackSem.result'(X925),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X925),happ(s(fun(X928,'type.wordSem.word_loc'(X925)),'_dst_x0x1_2'(s(fun(X926,'type.wordSem.word_loc'(X925)),X927),s(fun(X928,X926),X929))),s(X928,X930))))) | s('type.wordSem.word_loc'(X925),X931) = s('type.wordSem.word_loc'(X925),happ(s(fun(X926,'type.wordSem.word_loc'(X925)),X927),s(X926,happ(s(fun(X928,X926),X929),s(X928,X930)))))) )),
  inference(superposition,[],[f294,f333])).
fof(f35670,plain,(
  ( ! [X912,X916,X914,X911,X915,X913,X917] : (s('type.wordSem.word_loc'(X911),X917) != s('type.wordSem.word_loc'(X911),happ(s(fun(X914,'type.wordSem.word_loc'(X911)),'_dst_x0x1_2'(s(fun(X912,'type.wordSem.word_loc'(X911)),X913),s(fun(X914,X912),X915))),s(X914,X916))) | s('type.stackSem.result'(X911),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X911),X917))) = s('type.stackSem.result'(X911),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X911),happ(s(fun(X912,'type.wordSem.word_loc'(X911)),X913),s(X912,happ(s(fun(X914,X912),X915),s(X914,X916)))))))) )),
  inference(superposition,[],[f293,f333])).
fof(f35668,plain,(
  ( ! [X899,X897,X903,X901,X898,X902,X900] : (s('type.stackSem.result'(X897),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X897),X903))) != s('type.stackSem.result'(X897),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X897),happ(s(fun(X900,'type.wordSem.word_loc'(X897)),'_dst_x0x1_2'(s(fun(X898,'type.wordSem.word_loc'(X897)),X899),s(fun(X900,X898),X901))),s(X900,X902))))) | s('type.wordSem.word_loc'(X897),X903) = s('type.wordSem.word_loc'(X897),happ(s(fun(X898,'type.wordSem.word_loc'(X897)),X899),s(X898,happ(s(fun(X900,X898),X901),s(X900,X902)))))) )),
  inference(superposition,[],[f292,f333])).
fof(f35666,plain,(
  ( ! [X883,X887,X885,X888,X886,X884,X889] : (s('type.wordSem.word_loc'(X883),X889) != s('type.wordSem.word_loc'(X883),happ(s(fun(X886,'type.wordSem.word_loc'(X883)),'_dst_x0x1_2'(s(fun(X884,'type.wordSem.word_loc'(X883)),X885),s(fun(X886,X884),X887))),s(X886,X888))) | s('type.stackSem.result'(X883),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X883),X889))) = s('type.stackSem.result'(X883),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X883),happ(s(fun(X884,'type.wordSem.word_loc'(X883)),X885),s(X884,happ(s(fun(X886,X884),X887),s(X886,X888)))))))) )),
  inference(superposition,[],[f291,f333])).
fof(f35664,plain,(
  ( ! [X874,X872,X870,X875,X873,X871,X869] : (s('type.stackSem.result'(X869),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X869),X875))) != s('type.stackSem.result'(X869),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X869),happ(s(fun(X872,'type.wordSem.word_loc'(X869)),'_dst_x0x1_2'(s(fun(X870,'type.wordSem.word_loc'(X869)),X871),s(fun(X872,X870),X873))),s(X872,X874))))) | s('type.wordSem.word_loc'(X869),X875) = s('type.wordSem.word_loc'(X869),happ(s(fun(X870,'type.wordSem.word_loc'(X869)),X871),s(X870,happ(s(fun(X872,X870),X873),s(X872,X874)))))) )),
  inference(superposition,[],[f290,f333])).
fof(f35655,plain,(
  ( ! [X817,X814,X816,X815,X813] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X815,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X813,'type.wordSem.word_loc'(sK0)),X814),s(fun(X815,X813),X816))),s(X815,X817))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X813,'type.wordSem.word_loc'(sK0)),X814),s(X813,happ(s(fun(X815,X813),X816),s(X815,X817)))))) )),
  inference(superposition,[],[f2643,f333])).
fof(f35654,plain,(
  ( ! [X810,X808,X812,X811,X809] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X810,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X808,'type.wordSem.word_loc'(sK0)),X809),s(fun(X810,X808),X811))),s(X810,X812))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun(X808,'type.wordSem.word_loc'(sK0)),X809),s(X808,happ(s(fun(X810,X808),X811),s(X810,X812)))))))) )),
  inference(superposition,[],[f2651,f333])).
fof(f35653,plain,(
  ( ! [X802,X806,X804,X803,X801,X807,X805] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X803,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X801,'type.wordSem.word_loc'(sK0)),X802),s(fun(X803,X801),X804))),s(X803,X805))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X806,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X801,'type.wordSem.word_loc'(sK0)),X802),s(X801,happ(s(fun(X803,X801),X804),s(X803,X805))))))),s(X806,X807)))) )),
  inference(superposition,[],[f2652,f333])).
fof(f35652,plain,(
  ( ! [X798,X796,X800,X795,X799,X797] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X797,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X795,'type.wordSem.word_loc'(sK0)),X796),s(fun(X797,X795),X798))),s(X797,X799))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X795,'type.wordSem.word_loc'(sK0)),X796),s(X795,happ(s(fun(X797,X795),X798),s(X797,X799))))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X800),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f333])).
fof(f35651,plain,(
  ( ! [X790,X793,X791,X789,X794,X792] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X791,'type.wordSem.word_loc'(sK0)),'_dst_x0x1_2'(s(fun(X789,'type.wordSem.word_loc'(sK0)),X790),s(fun(X791,X789),X792))),s(X791,X793))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X789,'type.wordSem.word_loc'(sK0)),X790),s(X789,happ(s(fun(X791,X789),X792),s(X791,X793)))),X794,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X794)))) )),
  inference(superposition,[],[f2654,f333])).
fof(f35640,plain,(
  ( ! [X666,X668,X670,X664,X667,X669,X665] : (~p(s(bool,happ(s(fun(X664,bool),happ(s(fun(X667,fun(X664,bool)),'_dst_x0x1_2'(s(fun(X665,fun(X664,bool)),X666),s(fun(X667,X665),X668))),s(X667,X669))),s(X664,X670)))) | p(s(bool,'|dollar|exists_1'(s(fun(X664,bool),happ(s(fun(X665,fun(X664,bool)),X666),s(X665,happ(s(fun(X667,X665),X668),s(X667,X669))))))))) )),
  inference(superposition,[],[f2633,f333])).
fof(f35639,plain,(
  ( ! [X660,X662,X658,X661,X663,X657,X659] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X657,bool),happ(s(fun(X660,fun(X657,bool)),'_dst_x0x1_2'(s(fun(X658,fun(X657,bool)),X659),s(fun(X660,X658),X661))),s(X660,X662))))) | s(X657,X663) = s(X657,sK3(X663,happ(s(fun(X658,fun(X657,bool)),X659),s(X658,happ(s(fun(X660,X658),X661),s(X660,X662)))),X657))) )),
  inference(superposition,[],[f565,f333])).
fof(f35638,plain,(
  ( ! [X656,X652,X654,X650,X653,X655,X651] : (~p(s(bool,happ(s(fun(X650,bool),happ(s(fun(X653,fun(X650,bool)),'_dst_x0x1_2'(s(fun(X651,fun(X650,bool)),X652),s(fun(X653,X651),X654))),s(X653,X655))),s(X650,X656)))) | p(s(bool,happ(s(fun(fun(X650,bool),bool),'?_1'),s(fun(X650,bool),happ(s(fun(X651,fun(X650,bool)),X652),s(X651,happ(s(fun(X653,X651),X654),s(X653,X655))))))))) )),
  inference(superposition,[],[f312,f333])).
fof(f35637,plain,(
  ( ! [X648,X644,X646,X649,X645,X647] : (~p(s(bool,happ(s(fun(fun(X644,bool),bool),'?_1'),s(fun(X644,bool),happ(s(fun(X647,fun(X644,bool)),'_dst_x0x1_2'(s(fun(X645,fun(X644,bool)),X646),s(fun(X647,X645),X648))),s(X647,X649)))))) | p(s(bool,happ(s(fun(X644,bool),happ(s(fun(X645,fun(X644,bool)),X646),s(X645,happ(s(fun(X647,X645),X648),s(X647,X649))))),s(X644,sK7(happ(s(fun(X645,fun(X644,bool)),X646),s(X645,happ(s(fun(X647,X645),X648),s(X647,X649)))),X644)))))) )),
  inference(superposition,[],[f311,f333])).
fof(f35636,plain,(
  ( ! [X639,X640,X642,X638,X641,X643] : (~p(s(bool,happ(s(fun(X638,bool),happ(s(fun(X641,fun(X638,bool)),'_dst_x0x1_2'(s(fun(X639,fun(X638,bool)),X640),s(fun(X641,X639),X642))),s(X641,X643))),s(X638,sK6(happ(s(fun(X639,fun(X638,bool)),X640),s(X639,happ(s(fun(X641,X639),X642),s(X641,X643)))),X638))))) | p(s(bool,happ(s(fun(fun(X638,bool),bool),'!_1'),s(fun(X638,bool),happ(s(fun(X639,fun(X638,bool)),X640),s(X639,happ(s(fun(X641,X639),X642),s(X641,X643))))))))) )),
  inference(superposition,[],[f310,f333])).
fof(f35635,plain,(
  ( ! [X633,X635,X631,X636,X632,X634,X637] : (~p(s(bool,happ(s(fun(fun(X631,bool),bool),'!_1'),s(fun(X631,bool),happ(s(fun(X634,fun(X631,bool)),'_dst_x0x1_2'(s(fun(X632,fun(X631,bool)),X633),s(fun(X634,X632),X635))),s(X634,X636)))))) | p(s(bool,happ(s(fun(X631,bool),happ(s(fun(X632,fun(X631,bool)),X633),s(X632,happ(s(fun(X634,X632),X635),s(X634,X636))))),s(X631,X637))))) )),
  inference(superposition,[],[f309,f333])).
fof(f35634,plain,(
  ( ! [X629,X625,X627,X628,X630,X624,X626] : (p(s(bool,'|dollar|exists_1'(s(fun(X624,bool),happ(s(fun(X627,fun(X624,bool)),'_dst_x0x1_2'(s(fun(X625,fun(X624,bool)),X626),s(fun(X627,X625),X628))),s(X627,X629)))))) | s(X624,X630) = s(X624,sK3(X630,happ(s(fun(X625,fun(X624,bool)),X626),s(X625,happ(s(fun(X627,X625),X628),s(X627,X629)))),X624))) )),
  inference(superposition,[],[f288,f333])).
fof(f35609,plain,(
  ( ! [X476,X478,X474,X475,X477,X479] : (~p(s(bool,happ(s(fun(X476,bool),'_dst_x0x1_2'(s(fun(X474,bool),X475),s(fun(X476,X474),X477))),s(X476,X478)))) | p(s(bool,happ(s(fun(fun(X479,bool),bool),'!_1'),s(fun(X479,bool),'_dst_x0_1'(s(bool,happ(s(fun(X474,bool),X475),s(X474,happ(s(fun(X476,X474),X477),s(X476,X478))))))))))) )),
  inference(superposition,[],[f5586,f333])).
fof(f35607,plain,(
  ( ! [X466,X463,X465,X467,X468,X464] : (~p(s(bool,happ(s(fun(X465,bool),'_dst_x0x1_2'(s(fun(X463,bool),X464),s(fun(X465,X463),X466))),s(X465,X467)))) | p(s(bool,happ(s(fun(fun(X468,bool),bool),'?_1'),s(fun(X468,bool),'_dst_x0_1'(s(bool,happ(s(fun(X463,bool),X464),s(X463,happ(s(fun(X465,X463),X466),s(X465,X467))))))))))) )),
  inference(superposition,[],[f4218,f333])).
fof(f35604,plain,(
  ( ! [X447,X449,X451,X452,X448,X450] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X452,bool),'_dst_x0_1'(s(bool,happ(s(fun(X449,bool),'_dst_x0x1_2'(s(fun(X447,bool),X448),s(fun(X449,X447),X450))),s(X449,X451))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X447,bool),X448),s(X447,happ(s(fun(X449,X447),X450),s(X449,X451)))))) )),
  inference(superposition,[],[f2213,f333])).
fof(f35601,plain,(
  ( ! [X430,X432,X434,X429,X431,X433] : (p(s(bool,'|dollar|exists_1'(s(fun(X434,bool),'_dst_x0_1'(s(bool,happ(s(fun(X431,bool),'_dst_x0x1_2'(s(fun(X429,bool),X430),s(fun(X431,X429),X432))),s(X431,X433)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X429,bool),X430),s(X429,happ(s(fun(X431,X429),X432),s(X431,X433)))))) )),
  inference(superposition,[],[f1936,f333])).
fof(f35600,plain,(
  ( ! [X428,X424,X426,X423,X425,X427] : (~p(s(bool,happ(s(fun(X425,bool),'_dst_x0x1_2'(s(fun(X423,bool),X424),s(fun(X425,X423),X426))),s(X425,X427)))) | p(s(bool,'|dollar|exists_1'(s(fun(X428,bool),'_dst_x0_1'(s(bool,happ(s(fun(X423,bool),X424),s(X423,happ(s(fun(X425,X423),X426),s(X425,X427))))))))))) )),
  inference(superposition,[],[f1802,f333])).
fof(f35599,plain,(
  ( ! [X420,X422,X418,X421,X417,X419] : (s(bool,'T_0') != s(bool,happ(s(fun(X419,bool),'_dst_x0x1_2'(s(fun(X417,bool),X418),s(fun(X419,X417),X420))),s(X419,X421))) | s(bool,X422) = s(bool,happ(s(fun(X417,bool),X418),s(X417,happ(s(fun(X419,X417),X420),s(X419,X421))))) | s(bool,'F_0') = s(bool,X422)) )),
  inference(superposition,[],[f1400,f333])).
fof(f35598,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s(bool,X416) != s(bool,happ(s(fun(X413,bool),'_dst_x0x1_2'(s(fun(X411,bool),X412),s(fun(X413,X411),X414))),s(X413,X415))) | s(bool,'T_0') = s(bool,happ(s(fun(X411,bool),X412),s(X411,happ(s(fun(X413,X411),X414),s(X413,X415))))) | s(bool,'F_0') = s(bool,X416)) )),
  inference(superposition,[],[f1197,f333])).
fof(f35597,plain,(
  ( ! [X408,X410,X405,X407,X409,X406] : (s(bool,X410) != s(bool,happ(s(fun(X407,bool),'_dst_x0x1_2'(s(fun(X405,bool),X406),s(fun(X407,X405),X408))),s(X407,X409))) | s(bool,'T_0') = s(bool,X410) | s(bool,'F_0') = s(bool,happ(s(fun(X405,bool),X406),s(X405,happ(s(fun(X407,X405),X408),s(X407,X409)))))) )),
  inference(superposition,[],[f1197,f333])).
fof(f35591,plain,(
  ( ! [X372,X368,X370,X373,X369,X371] : (~p(s(bool,happ(s(fun(X370,bool),'_dst_x0x1_2'(s(fun(X368,bool),X369),s(fun(X370,X368),X371))),s(X370,X372)))) | s(bool,X373) = s(bool,happ(s(fun(X368,bool),X369),s(X368,happ(s(fun(X370,X368),X371),s(X370,X372))))) | s(bool,'F_0') = s(bool,X373)) )),
  inference(superposition,[],[f1037,f333])).
fof(f35850,plain,(
  ( ! [X364,X362,X365,X361,X363] : (s(bool,'T_0') != s(bool,happ(s(fun(X363,bool),'_dst_x0x1_2'(s(fun(X361,bool),X362),s(fun(X363,X361),X364))),s(X363,X365))) | s(bool,'T_0') = s(bool,happ(s(fun(X361,bool),X362),s(X361,happ(s(fun(X363,X361),X364),s(X363,X365)))))) )),
  inference(forward_demodulation,[],[f35590,f270])).
fof(f35590,plain,(
  ( ! [X364,X366,X362,X365,X367,X361,X363] : (s(bool,'const.bool.DATATYPE_1'(s(X366,X367))) != s(bool,happ(s(fun(X363,bool),'_dst_x0x1_2'(s(fun(X361,bool),X362),s(fun(X363,X361),X364))),s(X363,X365))) | s(bool,'T_0') = s(bool,happ(s(fun(X361,bool),X362),s(X361,happ(s(fun(X363,X361),X364),s(X363,X365)))))) )),
  inference(superposition,[],[f557,f333])).
fof(f35589,plain,(
  ( ! [X356,X358,X360,X357,X359,X355] : (p(s(bool,happ(s(fun(X357,bool),'_dst_x0x1_2'(s(fun(X355,bool),X356),s(fun(X357,X355),X358))),s(X357,X359)))) | s(bool,X360) = s(bool,happ(s(fun(X355,bool),X356),s(X355,happ(s(fun(X357,X355),X358),s(X357,X359))))) | s(bool,'T_0') = s(bool,X360)) )),
  inference(superposition,[],[f425,f333])).
fof(f35588,plain,(
  ( ! [X350,X352,X354,X351,X353] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X352,bool),'_dst_x0x1_2'(s(fun(X350,bool),X351),s(fun(X352,X350),X353))),s(X352,X354))))) | s(bool,'F_0') = s(bool,happ(s(fun(X350,bool),X351),s(X350,happ(s(fun(X352,X350),X353),s(X352,X354)))))) )),
  inference(superposition,[],[f398,f333])).
fof(f35587,plain,(
  ( ! [X344,X346,X349,X345,X347,X348] : (~p(s(bool,happ(s(fun(X346,bool),'_dst_x0x1_2'(s(fun(X344,bool),X345),s(fun(X346,X344),X347))),s(X346,X348)))) | s(bool,X349) != s(bool,happ(s(fun(X344,bool),X345),s(X344,happ(s(fun(X346,X344),X347),s(X346,X348))))) | s(bool,'T_0') = s(bool,X349)) )),
  inference(superposition,[],[f368,f333])).
fof(f35582,plain,(
  ( ! [X315,X316,X318,X314,X317,X319] : (~p(s(bool,happ(s(fun(X316,bool),'_dst_x0x1_2'(s(fun(X314,bool),X315),s(fun(X316,X314),X317))),s(X316,X318)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X319))),s(bool,happ(s(fun(X314,bool),X315),s(X314,happ(s(fun(X316,X314),X317),s(X316,X318))))))))) )),
  inference(superposition,[],[f318,f333])).
fof(f35580,plain,(
  ( ! [X302,X304,X306,X303,X305,X307] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X304,bool),'_dst_x0x1_2'(s(fun(X302,bool),X303),s(fun(X304,X302),X305))),s(X304,X306))))),s(bool,X307)))) | p(s(bool,happ(s(fun(X302,bool),X303),s(X302,happ(s(fun(X304,X302),X305),s(X304,X306))))))) )),
  inference(superposition,[],[f317,f333])).
fof(f35579,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (~p(s(bool,happ(s(fun(X298,bool),'_dst_x0x1_2'(s(fun(X296,bool),X297),s(fun(X298,X296),X299))),s(X298,X300)))) | p(s(bool,X301)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X296,bool),X297),s(X296,happ(s(fun(X298,X296),X299),s(X298,X300))))))),s(bool,X301))))) )),
  inference(superposition,[],[f316,f333])).
fof(f35578,plain,(
  ( ! [X292,X294,X290,X293,X295,X291] : (~p(s(bool,happ(s(fun(X292,bool),'_dst_x0x1_2'(s(fun(X290,bool),X291),s(fun(X292,X290),X293))),s(X292,X294)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X295))),s(bool,happ(s(fun(X290,bool),X291),s(X290,happ(s(fun(X292,X290),X293),s(X292,X294))))))))) )),
  inference(superposition,[],[f315,f333])).
fof(f35577,plain,(
  ( ! [X288,X285,X287,X289,X284,X286] : (~p(s(bool,happ(s(fun(X286,bool),'_dst_x0x1_2'(s(fun(X284,bool),X285),s(fun(X286,X284),X287))),s(X286,X288)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X284,bool),X285),s(X284,happ(s(fun(X286,X284),X287),s(X286,X288))))))),s(bool,X289))))) )),
  inference(superposition,[],[f314,f333])).
fof(f35576,plain,(
  ( ! [X280,X282,X279,X281,X283,X278] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X283))),s(bool,happ(s(fun(X280,bool),'_dst_x0x1_2'(s(fun(X278,bool),X279),s(fun(X280,X278),X281))),s(X280,X282)))))) | p(s(bool,X283)) | p(s(bool,happ(s(fun(X278,bool),X279),s(X278,happ(s(fun(X280,X278),X281),s(X280,X282))))))) )),
  inference(superposition,[],[f313,f333])).
fof(f35575,plain,(
  ( ! [X277,X273,X275,X276,X272,X274] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X274,bool),'_dst_x0x1_2'(s(fun(X272,bool),X273),s(fun(X274,X272),X275))),s(X274,X276))))),s(bool,X277)))) | p(s(bool,happ(s(fun(X272,bool),X273),s(X272,happ(s(fun(X274,X272),X275),s(X274,X276)))))) | p(s(bool,X277))) )),
  inference(superposition,[],[f313,f333])).
fof(f35574,plain,(
  ( ! [X269,X271,X267,X268,X270,X266] : (~p(s(bool,happ(s(fun(X268,bool),'_dst_x0x1_2'(s(fun(X266,bool),X267),s(fun(X268,X266),X269))),s(X268,X270)))) | ~p(s(bool,X271)) | s(bool,X271) = s(bool,happ(s(fun(X266,bool),X267),s(X266,happ(s(fun(X268,X266),X269),s(X268,X270)))))) )),
  inference(superposition,[],[f308,f333])).
fof(f35572,plain,(
  ( ! [X255,X257,X259,X254,X256,X258] : (p(s(bool,happ(s(fun(X256,bool),'_dst_x0x1_2'(s(fun(X254,bool),X255),s(fun(X256,X254),X257))),s(X256,X258)))) | p(s(bool,X259)) | s(bool,X259) = s(bool,happ(s(fun(X254,bool),X255),s(X254,happ(s(fun(X256,X254),X257),s(X256,X258)))))) )),
  inference(superposition,[],[f305,f333])).
fof(f35571,plain,(
  ( ! [X253,X251,X249,X252,X250] : (p(s(bool,happ(s(fun(X251,bool),'_dst_x0x1_2'(s(fun(X249,bool),X250),s(fun(X251,X249),X252))),s(X251,X253)))) | s(bool,'F_0') = s(bool,happ(s(fun(X249,bool),X250),s(X249,happ(s(fun(X251,X249),X252),s(X251,X253)))))) )),
  inference(superposition,[],[f250,f333])).
fof(f35570,plain,(
  ( ! [X246,X244,X248,X247,X245] : (s(bool,'F_0') != s(bool,happ(s(fun(X246,bool),'_dst_x0x1_2'(s(fun(X244,bool),X245),s(fun(X246,X244),X247))),s(X246,X248))) | ~p(s(bool,happ(s(fun(X244,bool),X245),s(X244,happ(s(fun(X246,X244),X247),s(X246,X248))))))) )),
  inference(superposition,[],[f249,f333])).
fof(f35569,plain,(
  ( ! [X243,X241,X239,X242,X240] : (~p(s(bool,happ(s(fun(X241,bool),'_dst_x0x1_2'(s(fun(X239,bool),X240),s(fun(X241,X239),X242))),s(X241,X243)))) | s(bool,'T_0') = s(bool,happ(s(fun(X239,bool),X240),s(X239,happ(s(fun(X241,X239),X242),s(X241,X243)))))) )),
  inference(superposition,[],[f246,f333])).
fof(f35568,plain,(
  ( ! [X237,X235,X238,X236,X234] : (p(s(bool,happ(s(fun(X236,bool),'_dst_x0x1_2'(s(fun(X234,bool),X235),s(fun(X236,X234),X237))),s(X236,X238)))) | s(bool,'T_0') != s(bool,happ(s(fun(X234,bool),X235),s(X234,happ(s(fun(X236,X234),X237),s(X236,X238)))))) )),
  inference(superposition,[],[f245,f333])).
fof(f35566,plain,(
  ( ! [X227,X225,X228,X226] : (~p(s(bool,happ(s(fun(X226,bool),'_dst_x0x1_2'(s(fun(fun(X225,bool),bool),'?_1'),s(fun(X226,fun(X225,bool)),X227))),s(X226,X228)))) | p(s(bool,happ(s(fun(X225,bool),happ(s(fun(X226,fun(X225,bool)),X227),s(X226,X228))),s(X225,sK7(happ(s(fun(X226,fun(X225,bool)),X227),s(X226,X228)),X225)))))) )),
  inference(superposition,[],[f311,f333])).
fof(f35565,plain,(
  ( ! [X222,X220,X223,X221,X224] : (~p(s(bool,happ(s(fun(X221,bool),'_dst_x0x1_2'(s(fun(fun(X220,bool),bool),'!_1'),s(fun(X221,fun(X220,bool)),X222))),s(X221,X223)))) | p(s(bool,happ(s(fun(X220,bool),happ(s(fun(X221,fun(X220,bool)),X222),s(X221,X223))),s(X220,X224))))) )),
  inference(superposition,[],[f309,f333])).
fof(f35563,plain,(
  ( ! [X198,X196,X194,X197,X195] : (~p(s(bool,happ(s(fun(X196,bool),'_dst_x0x1_2'(s(fun(X194,bool),happ(s(fun(X194,fun(X194,bool)),'=_0'),s(X194,X195))),s(fun(X196,X194),X197))),s(X196,X198)))) | s(X194,X195) = s(X194,happ(s(fun(X196,X194),X197),s(X196,X198)))) )),
  inference(superposition,[],[f330,f333])).
fof(f35562,plain,(
  ( ! [X191,X189,X192,X190,X193] : (p(s(bool,happ(s(fun(X191,bool),'_dst_x0x1_2'(s(fun(X189,bool),happ(s(fun(X189,fun(X189,bool)),'=_0'),s(X189,X190))),s(fun(X191,X189),X192))),s(X191,X193)))) | s(X189,X190) != s(X189,happ(s(fun(X191,X189),X192),s(X191,X193)))) )),
  inference(superposition,[],[f331,f333])).
fof(f35561,plain,(
  ( ! [X187,X185,X188,X186,X184] : (~p(s(bool,happ(s(fun(X186,bool),'_dst_x0x1_2'(s(fun(X184,bool),X185),s(fun(X186,X184),X187))),s(X186,X188)))) | p(s(bool,'|dollar|exists_1'(s(fun(X184,bool),X185))))) )),
  inference(superposition,[],[f2633,f333])).
fof(f35560,plain,(
  ( ! [X182,X180,X183,X181,X179] : (~p(s(bool,happ(s(fun(X181,bool),'_dst_x0x1_2'(s(fun(X179,bool),X180),s(fun(X181,X179),X182))),s(X181,X183)))) | p(s(bool,happ(s(fun(fun(X179,bool),bool),'?_1'),s(fun(X179,bool),X180))))) )),
  inference(superposition,[],[f312,f333])).
fof(f35554,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (p(s(bool,happ(s(fun(X139,bool),happ(s(fun(X139,fun(X139,bool)),'=_0'),s(X139,X145))),s(X139,happ(s(fun(X142,X139),'_dst_x0x1_2'(s(fun(X140,X139),X141),s(fun(X142,X140),X143))),s(X142,X144)))))) | s(X139,X145) != s(X139,happ(s(fun(X140,X139),X141),s(X140,happ(s(fun(X142,X140),X143),s(X142,X144)))))) )),
  inference(superposition,[],[f331,f333])).
fof(f35553,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (p(s(bool,happ(s(fun(X132,bool),happ(s(fun(X132,fun(X132,bool)),'=_0'),s(X132,happ(s(fun(X135,X132),'_dst_x0x1_2'(s(fun(X133,X132),X134),s(fun(X135,X133),X136))),s(X135,X137))))),s(X132,X138)))) | s(X132,X138) != s(X132,happ(s(fun(X133,X132),X134),s(X133,happ(s(fun(X135,X133),X136),s(X135,X137)))))) )),
  inference(superposition,[],[f331,f333])).
fof(f35552,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (~p(s(bool,happ(s(fun(X125,bool),happ(s(fun(X125,fun(X125,bool)),'=_0'),s(X125,X131))),s(X125,happ(s(fun(X128,X125),'_dst_x0x1_2'(s(fun(X126,X125),X127),s(fun(X128,X126),X129))),s(X128,X130)))))) | s(X125,X131) = s(X125,happ(s(fun(X126,X125),X127),s(X126,happ(s(fun(X128,X126),X129),s(X128,X130)))))) )),
  inference(superposition,[],[f330,f333])).
fof(f35551,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),happ(s(fun(X118,fun(X118,bool)),'=_0'),s(X118,happ(s(fun(X121,X118),'_dst_x0x1_2'(s(fun(X119,X118),X120),s(fun(X121,X119),X122))),s(X121,X123))))),s(X118,X124)))) | s(X118,X124) = s(X118,happ(s(fun(X119,X118),X120),s(X119,happ(s(fun(X121,X119),X122),s(X121,X123)))))) )),
  inference(superposition,[],[f330,f333])).
fof(f35400,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s(bool,X93) = s(bool,happ(s(fun(X90,bool),'_dst_x0x1_2'(s(fun(X88,bool),X89),s(fun(X90,X88),X91))),s(X90,X92))) | s(bool,'F_0') = s(bool,X93) | s(bool,'F_0') = s(bool,happ(s(fun(X88,bool),X89),s(X88,happ(s(fun(X90,X88),X91),s(X90,X92)))))) )),
  inference(superposition,[],[f333,f1108])).
fof(f35398,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,'F_0') = s(bool,happ(s(fun(X78,bool),'_dst_x0x1_2'(s(fun(X76,bool),X77),s(fun(X78,X76),X79))),s(X78,X80))) | s(bool,X81) = s(bool,happ(s(fun(X76,bool),X77),s(X76,happ(s(fun(X78,X76),X79),s(X78,X80))))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(superposition,[],[f333,f1108])).
fof(f35830,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,happ(s(fun(X71,bool),'_dst_x0x1_2'(s(fun(X69,bool),X70),s(fun(X71,X69),X72))),s(X71,X73))) | s(bool,'F_0') = s(bool,happ(s(fun(X69,bool),X70),s(X69,happ(s(fun(X71,X69),X72),s(X71,X73)))))) )),
  inference(forward_demodulation,[],[f35397,f270])).
fof(f35397,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (s(bool,'const.bool.DATATYPE_1'(s(X74,X75))) = s(bool,happ(s(fun(X71,bool),'_dst_x0x1_2'(s(fun(X69,bool),X70),s(fun(X71,X69),X72))),s(X71,X73))) | s(bool,'F_0') = s(bool,happ(s(fun(X69,bool),X70),s(X69,happ(s(fun(X71,X69),X72),s(X71,X73)))))) )),
  inference(superposition,[],[f333,f1071])).
fof(f35394,plain,(
  ( ! [X54,X52,X56,X55,X53,X51] : (s(bool,X56) = s(bool,happ(s(fun(X53,bool),'_dst_x0x1_2'(s(fun(X51,bool),X52),s(fun(X53,X51),X54))),s(X53,X55))) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,happ(s(fun(X51,bool),X52),s(X51,happ(s(fun(X53,X51),X54),s(X53,X55)))))) )),
  inference(superposition,[],[f333,f365])).
fof(f35393,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'_dst_x0x1_2'(s(fun(X45,bool),X46),s(fun(X47,X45),X48))),s(X47,X49))) | s(bool,X50) = s(bool,happ(s(fun(X45,bool),X46),s(X45,happ(s(fun(X47,X45),X48),s(X47,X49))))) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f333,f365])).
fof(f35392,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),'_dst_x0x1_2'(s(fun(X40,bool),X41),s(fun(X42,X40),X43))),s(X42,X44))) | s(bool,'T_0') = s(bool,happ(s(fun(X40,bool),X41),s(X40,happ(s(fun(X42,X40),X43),s(X42,X44)))))) )),
  inference(superposition,[],[f333,f242])).
fof(f35391,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'T_0') = s(bool,happ(s(fun(X37,bool),'_dst_x0x1_2'(s(fun(X36,bool),sK7('!_1',fun(X36,bool))),s(fun(X37,X36),X38))),s(X37,X39)))) )),
  inference(superposition,[],[f333,f33563])).
fof(f35390,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(X24,happ(s(fun(X25,X24),happ(s(fun(X27,fun(X25,X24)),X28),s(X27,X29))),s(X25,X26))) = s(X24,happ(s(fun(X27,X24),'_dst_x0x1_2'(s(fun(fun(X25,X24),X24),'_dstsel_0_x0_1'(s(X25,X26))),s(fun(X27,fun(X25,X24)),X28))),s(X27,X29)))) )),
  inference(superposition,[],[f333,f321])).
fof(f35389,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(X16,happ(s(fun(X18,X16),X19),s(X18,happ(s(fun(X17,X18),X20),s(X17,happ(s(fun(X21,X17),X22),s(X21,X23))))))) = s(X16,happ(s(fun(X21,X16),'_dst_x0x1_2'(s(fun(X17,X16),'_dst_x0x1_2'(s(fun(X18,X16),X19),s(fun(X17,X18),X20))),s(fun(X21,X17),X22))),s(X21,X23)))) )),
  inference(superposition,[],[f333,f333])).
fof(f35388,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(X4,X6) = s(X4,happ(s(fun(X7,X4),'_dst_x0x1_2'(s(fun(X5,X4),'_dst_x0_1'(s(X4,X6))),s(fun(X7,X5),X8))),s(X7,X9)))) )),
  inference(superposition,[],[f333,f320])).
fof(f35387,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(X24,happ(s(fun(X18,X24),X25),s(X18,happ(s(fun(X20,X18),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))))) = s(X24,happ(s(fun(X19,X24),'_dst_x0x1_2'(s(fun(X18,X24),X25),s(fun(X19,X18),'_dst_x0x1_2'(s(fun(X20,X18),X21),s(fun(X19,X20),X22))))),s(X19,X23)))) )),
  inference(superposition,[],[f333,f333])).
fof(f35386,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X16,happ(s(fun(X10,X16),X17),s(X10,happ(s(fun(X13,X10),'_dst_x0x1_2'(s(fun(X11,X10),X12),s(fun(X13,X11),X14))),s(X13,X15))))) = s(X16,happ(s(fun(X11,X16),'_dst_x0x1_2'(s(fun(X10,X16),X17),s(fun(X11,X10),X12))),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))))) )),
  inference(superposition,[],[f333,f333])).
fof(f35385,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(X8,happ(s(fun(X4,X8),X9),s(X4,X6))) = s(X8,happ(s(fun(X5,X8),'_dst_x0x1_2'(s(fun(X4,X8),X9),s(fun(X5,X4),'_dst_x0_1'(s(X4,X6))))),s(X5,X7)))) )),
  inference(superposition,[],[f333,f320])).
fof(f35377,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))))),s(X0,happ(s(fun(X3,X0),'_dst_x0x1_2'(s(fun(X1,X0),X2),s(fun(X3,X1),X4))),s(X3,X5))))))) )),
  inference(unit_resulting_resolution,[],[f333,f331])).
fof(f35381,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X3),s(fun(X1,X2),X4))),s(X1,X5))))),s(X0,happ(s(fun(X2,X0),X3),s(X2,happ(s(fun(X1,X2),X4),s(X1,X5))))))))) )),
  inference(unit_resulting_resolution,[],[f333,f331])).
fof(f35382,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X3,'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.wordSem.word_loc'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5)))))) )),
  inference(unit_resulting_resolution,[],[f333,f295])).
fof(f35383,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X3,'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.wordSem.word_loc'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5)))))) )),
  inference(unit_resulting_resolution,[],[f333,f293])).
fof(f35384,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X1,'type.wordSem.word_loc'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),happ(s(fun(X3,'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.wordSem.word_loc'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5)))))) )),
  inference(unit_resulting_resolution,[],[f333,f291])).
fof(f35360,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,happ(s(fun(fun(X37,bool),bool),'!_1'),s(fun(X37,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f35251,f235])).
fof(f35251,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | s(bool,X38) != s(bool,happ(s(fun(fun(X37,bool),bool),'!_1'),s(fun(X37,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f368,f32095])).
fof(f35205,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f32095,f365])).
fof(f35124,plain,(
  ( ! [X171,X172,X170] : (s(bool,X170) != s(bool,'|dollar|exists_1'(s(fun(fun(X172,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,sK3(X170,X171,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X171)))) )),
  inference(superposition,[],[f32442,f565])).
fof(f35123,plain,(
  ( ! [X167,X165,X163,X169,X166,X164,X168] : (s(bool,X167) != s(bool,'|dollar|exists_1'(s(fun(fun(X169,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X163),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X163),bool),X164),s(fun('type.wordSem.word_loc'(X163),bool),X165),s(fun('type.wordSem.word_loc'(X163),bool),X166),s(bool,X167),s(bool,X168)))) )),
  inference(superposition,[],[f32442,f326])).
fof(f35122,plain,(
  ( ! [X158,X156,X161,X159,X157,X162,X160] : (s(bool,X161) != s(bool,'|dollar|exists_1'(s(fun(fun(X162,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X156),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X156),bool),X157),s(fun('type.wordSem.word_loc'(X156),bool),X158),s(fun('type.wordSem.word_loc'(X156),bool),X159),s(bool,X160),s(bool,X161)))) )),
  inference(superposition,[],[f32442,f325])).
fof(f35120,plain,(
  ( ! [X151,X149,X150] : (s(bool,X149) != s(bool,'|dollar|exists_1'(s(fun(fun(X151,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X149),s(fun('type.num.num',bool),X150),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f32442,f284])).
fof(f35118,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X142) != s(bool,'|dollar|exists_1'(s(fun(fun(X144,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(X141,bool),'_dst_x0_1'(s(bool,X142))),s(X141,X143)))) )),
  inference(superposition,[],[f32442,f320])).
fof(f35117,plain,(
  ( ! [X140,X139] : (s(bool,X139) != s(bool,'|dollar|exists_1'(s(fun(fun(X140,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X139)))) )),
  inference(superposition,[],[f32442,f271])).
fof(f35045,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.stackSem.result_size_2'(s(fun(X3,'type.num.num'),X4),s('type.stackSem.result'(X3),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X3),X5))))) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X3,'type.num.num'),X4),s('type.stackSem.result'(X3),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X3),X5)))))) )),
  inference(forward_demodulation,[],[f34997,f34367])).
fof(f34997,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.stackSem.result_size_2'(s(fun(X3,'type.num.num'),X4),s('type.stackSem.result'(X3),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X3),X5))))) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X3,'type.num.num'),X4),s('type.stackSem.result'(X3),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X3),X5)))))) )),
  inference(superposition,[],[f287,f286])).
fof(f34979,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))))) )),
  inference(unit_resulting_resolution,[],[f287,f331])).
fof(f34980,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))))))) )),
  inference(unit_resulting_resolution,[],[f287,f331])).
fof(f34569,plain,(
  ( ! [X171,X172,X170] : (s(bool,X170) = s(bool,'|dollar|exists_1'(s(fun(fun(X172,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,sK3(X170,X171,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X171)))) )),
  inference(superposition,[],[f32297,f565])).
fof(f34568,plain,(
  ( ! [X167,X165,X163,X169,X166,X164,X168] : (s(bool,X167) = s(bool,'|dollar|exists_1'(s(fun(fun(X169,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X163),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X163),bool),X164),s(fun('type.wordSem.word_loc'(X163),bool),X165),s(fun('type.wordSem.word_loc'(X163),bool),X166),s(bool,X167),s(bool,X168)))) )),
  inference(superposition,[],[f32297,f326])).
fof(f34567,plain,(
  ( ! [X158,X156,X161,X159,X157,X162,X160] : (s(bool,X161) = s(bool,'|dollar|exists_1'(s(fun(fun(X162,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X156),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X156),bool),X157),s(fun('type.wordSem.word_loc'(X156),bool),X158),s(fun('type.wordSem.word_loc'(X156),bool),X159),s(bool,X160),s(bool,X161)))) )),
  inference(superposition,[],[f32297,f325])).
fof(f34565,plain,(
  ( ! [X151,X149,X150] : (s(bool,X149) = s(bool,'|dollar|exists_1'(s(fun(fun(X151,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X149),s(fun('type.num.num',bool),X150),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f32297,f284])).
fof(f34563,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X142) = s(bool,'|dollar|exists_1'(s(fun(fun(X144,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(X141,bool),'_dst_x0_1'(s(bool,X142))),s(X141,X143)))) )),
  inference(superposition,[],[f32297,f320])).
fof(f34562,plain,(
  ( ! [X140,X139] : (s(bool,X139) = s(bool,'|dollar|exists_1'(s(fun(fun(X140,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X139)))) )),
  inference(superposition,[],[f32297,f271])).
fof(f34505,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),sK7('!_1',fun(X12,bool))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f34457,f342])).
fof(f34457,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),sK7('!_1',fun(X12,bool))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f33537,f1108])).
fof(f34441,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),sK7('!_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f321,f33537,f368])).
fof(f34447,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK7('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f350,f33537,f1037])).
fof(f34448,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33537,f1802])).
fof(f34449,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33537,f4218])).
fof(f34450,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33537,f5586])).
fof(f34367,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.stackSem.result_size_2'(s(fun(X3,'type.num.num'),X4),s('type.stackSem.result'(X3),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X3),X5))))) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X3,'type.num.num'),X4),s('type.stackSem.result'(X3),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X3),X5)))))) )),
  inference(superposition,[],[f286,f285])).
fof(f34349,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))))) )),
  inference(unit_resulting_resolution,[],[f286,f331])).
fof(f34350,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))))))))) )),
  inference(unit_resulting_resolution,[],[f286,f331])).
fof(f34332,plain,(
  ( ! [X59,X60,X58] : (s(bool,X60) != s(bool,happ(s(fun(X58,bool),sK7('!_1',fun(X58,bool))),s(X58,X59))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f34212,f235])).
fof(f34212,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) != s(bool,happ(s(fun(X58,bool),sK7('!_1',fun(X58,bool))),s(X58,X59))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f368,f33563])).
fof(f34123,plain,(
  ( ! [X64,X65] : (s(bool,X64) = s(bool,happ(s(fun(bool,bool),sK7('!_1',fun(bool,bool))),s(bool,X64))) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f33563,f365])).
fof(f34073,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,'|dollar|exists_1'(s(fun(X36,bool),sK7('!_1',fun(X36,bool))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f33973,f235])).
fof(f33973,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,'|dollar|exists_1'(s(fun(X36,bool),sK7('!_1',fun(X36,bool))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f33805])).
fof(f33926,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X87))),s('type.num.num','const.stackSem.result_size_2'(s(fun(X84,'type.num.num'),X85),s('type.stackSem.result'(X84),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X84),X86)))))))) | s('type.num.num',X87) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X84,'type.num.num'),X85),s('type.wordSem.word_loc'(X84),X86)))))) )),
  inference(superposition,[],[f331,f285])).
fof(f33925,plain,(
  ( ! [X80,X83,X81,X82] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.stackSem.result_size_2'(s(fun(X80,'type.num.num'),X81),s('type.stackSem.result'(X80),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X80),X82))))))),s('type.num.num',X83)))) | s('type.num.num',X83) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X80,'type.num.num'),X81),s('type.wordSem.word_loc'(X80),X82)))))) )),
  inference(superposition,[],[f331,f285])).
fof(f33924,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X79))),s('type.num.num','const.stackSem.result_size_2'(s(fun(X76,'type.num.num'),X77),s('type.stackSem.result'(X76),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X76),X78)))))))) | s('type.num.num',X79) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X76,'type.num.num'),X77),s('type.wordSem.word_loc'(X76),X78)))))) )),
  inference(superposition,[],[f330,f285])).
fof(f33923,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.stackSem.result_size_2'(s(fun(X72,'type.num.num'),X73),s('type.stackSem.result'(X72),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X72),X74))))))),s('type.num.num',X75)))) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X72,'type.num.num'),X73),s('type.wordSem.word_loc'(X72),X74)))))) )),
  inference(superposition,[],[f330,f285])).
fof(f33905,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X87))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X84,'type.num.num'),X85),s('type.wordSem.word_loc'(X84),X86)))))))) | s('type.num.num',X87) != s('type.num.num','const.stackSem.result_size_2'(s(fun(X84,'type.num.num'),X85),s('type.stackSem.result'(X84),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X84),X86)))))) )),
  inference(superposition,[],[f331,f285])).
fof(f33904,plain,(
  ( ! [X80,X83,X81,X82] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X80,'type.num.num'),X81),s('type.wordSem.word_loc'(X80),X82))))))),s('type.num.num',X83)))) | s('type.num.num',X83) != s('type.num.num','const.stackSem.result_size_2'(s(fun(X80,'type.num.num'),X81),s('type.stackSem.result'(X80),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X80),X82)))))) )),
  inference(superposition,[],[f331,f285])).
fof(f33903,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X79))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X76,'type.num.num'),X77),s('type.wordSem.word_loc'(X76),X78)))))))) | s('type.num.num',X79) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X76,'type.num.num'),X77),s('type.stackSem.result'(X76),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X76),X78)))))) )),
  inference(superposition,[],[f330,f285])).
fof(f33902,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X72,'type.num.num'),X73),s('type.wordSem.word_loc'(X72),X74))))))),s('type.num.num',X75)))) | s('type.num.num',X75) = s('type.num.num','const.stackSem.result_size_2'(s(fun(X72,'type.num.num'),X73),s('type.stackSem.result'(X72),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X72),X74)))))) )),
  inference(superposition,[],[f330,f285])).
fof(f33871,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))))) )),
  inference(unit_resulting_resolution,[],[f285,f331])).
fof(f33872,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2))))))),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))))))))) )),
  inference(unit_resulting_resolution,[],[f285,f331])).
fof(f33864,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(X14,bool),sK7('!_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f33816,f342])).
fof(f33816,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(X14,bool),sK7('!_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f33538,f1108])).
fof(f33805,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK7('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f350,f33538,f1037])).
fof(f33806,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33538,f1802])).
fof(f33807,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33538,f4218])).
fof(f33808,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33538,f5586])).
fof(f33778,plain,(
  ( ! [X19,X20,X18] : (s(bool,X20) = s(bool,happ(s(fun(X18,bool),sK7('!_1',fun(X18,bool))),s(X18,X19))) | s(bool,'F_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f33646,f342])).
fof(f33646,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,'F_0')) | s(bool,X20) = s(bool,happ(s(fun(X18,bool),sK7('!_1',fun(X18,bool))),s(X18,X19))) | s(bool,'F_0') = s(bool,X20)) )),
  inference(superposition,[],[f32993,f1108])).
fof(f33537,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK7('!_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f32993,f312])).
fof(f33538,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK7('!_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f32993,f2633])).
fof(f33556,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),sK7('!_1',fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f298,f32993,f368])).
fof(f33557,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'_dstsel_0_x0_1'(s(X0,X1))),s(fun(X0,bool),sK7('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f321,f32993,f368])).
fof(f33563,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),sK7('!_1',fun(X0,bool))),s(X0,X1)))) )),
  inference(unit_resulting_resolution,[],[f350,f32993,f1037])).
fof(f33564,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK7('!_1',fun(X1,bool))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f32993,f1802])).
fof(f33565,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK7('!_1',fun(X1,bool))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f32993,f4218])).
fof(f33566,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK7('!_1',fun(X1,bool))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f32993,f5586])).
fof(f33423,plain,(
  ( ! [X895,X893,X899,X897,X901,X894,X898,X896,X900] : (s('type.fcp.cart'(bool,X893),X898) != s('type.fcp.cart'(bool,X893),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X900,X901,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X894),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X894),'type.fcp.cart'(bool,X893)),X895),s(fun('type.wordSem.word_loc'(X894),'type.fcp.cart'(bool,X893)),X896),s(fun('type.wordSem.word_loc'(X894),'type.fcp.cart'(bool,X893)),X897),s('type.fcp.cart'(bool,X893),X898),s('type.fcp.cart'(bool,X893),X899)),X893)))) )),
  inference(superposition,[],[f302,f326])).
fof(f33414,plain,(
  ( ! [X825,X823,X821,X826,X824,X822,X820,X827] : (s('type.stackSem.result'(X820),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X820),X825))) != s('type.stackSem.result'(X820),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X820),X827))) | s('type.wordSem.word_loc'(X820),X827) = s('type.wordSem.word_loc'(X820),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X821),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X821),'type.wordSem.word_loc'(X820)),X822),s(fun('type.wordSem.word_loc'(X821),'type.wordSem.word_loc'(X820)),X823),s(fun('type.wordSem.word_loc'(X821),'type.wordSem.word_loc'(X820)),X824),s('type.wordSem.word_loc'(X820),X825),s('type.wordSem.word_loc'(X820),X826)))) )),
  inference(superposition,[],[f294,f326])).
fof(f33410,plain,(
  ( ! [X790,X788,X795,X793,X791,X789,X794,X792] : (s('type.stackSem.result'(X788),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X788),X793))) != s('type.stackSem.result'(X788),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X788),X795))) | s('type.wordSem.word_loc'(X788),X795) = s('type.wordSem.word_loc'(X788),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X789),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X789),'type.wordSem.word_loc'(X788)),X790),s(fun('type.wordSem.word_loc'(X789),'type.wordSem.word_loc'(X788)),X791),s(fun('type.wordSem.word_loc'(X789),'type.wordSem.word_loc'(X788)),X792),s('type.wordSem.word_loc'(X788),X793),s('type.wordSem.word_loc'(X788),X794)))) )),
  inference(superposition,[],[f292,f326])).
fof(f33406,plain,(
  ( ! [X761,X763,X757,X759,X760,X762,X756,X758] : (s('type.stackSem.result'(X756),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X756),X761))) != s('type.stackSem.result'(X756),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X756),X763))) | s('type.wordSem.word_loc'(X756),X763) = s('type.wordSem.word_loc'(X756),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X757),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X757),'type.wordSem.word_loc'(X756)),X758),s(fun('type.wordSem.word_loc'(X757),'type.wordSem.word_loc'(X756)),X759),s(fun('type.wordSem.word_loc'(X757),'type.wordSem.word_loc'(X756)),X760),s('type.wordSem.word_loc'(X756),X761),s('type.wordSem.word_loc'(X756),X762)))) )),
  inference(superposition,[],[f290,f326])).
fof(f33400,plain,(
  ( ! [X720,X716,X718,X717,X719,X715] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X719))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X715),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X715),'type.wordSem.word_loc'(sK0)),X716),s(fun('type.wordSem.word_loc'(X715),'type.wordSem.word_loc'(sK0)),X717),s(fun('type.wordSem.word_loc'(X715),'type.wordSem.word_loc'(sK0)),X718),s('type.wordSem.word_loc'(sK0),X719),s('type.wordSem.word_loc'(sK0),X720)))) )),
  inference(superposition,[],[f2643,f326])).
fof(f33396,plain,(
  ( ! [X693,X689,X691,X687,X692,X688,X690] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X691))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X687),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X687),'type.wordSem.word_loc'(sK0)),X688),s(fun('type.wordSem.word_loc'(X687),'type.wordSem.word_loc'(sK0)),X689),s(fun('type.wordSem.word_loc'(X687),'type.wordSem.word_loc'(sK0)),X690),s('type.wordSem.word_loc'(sK0),X691),s('type.wordSem.word_loc'(sK0),X692)),X693,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X693)))) )),
  inference(superposition,[],[f2654,f326])).
fof(f33387,plain,(
  ( ! [X604,X606,X609,X605,X607,X603,X608,X610] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X603,bool),X608))) | s(X603,X610) = s(X603,sK3(X610,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X604),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X604),fun(X603,bool)),X605),s(fun('type.wordSem.word_loc'(X604),fun(X603,bool)),X606),s(fun('type.wordSem.word_loc'(X604),fun(X603,bool)),X607),s(fun(X603,bool),X608),s(fun(X603,bool),X609)),X603))) )),
  inference(superposition,[],[f565,f326])).
fof(f33524,plain,(
  ( ! [X592,X594,X588,X590,X593,X589,X591] : (p(s(bool,happ(s(fun(X588,bool),X593),s(X588,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X589),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X590),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X591),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X592),s(fun(X588,bool),X593),s(fun(X588,bool),X594)),X588))))) | ~p(s(bool,happ(s(fun(fun(X588,bool),bool),'?_1'),s(fun(X588,bool),X593))))) )),
  inference(forward_demodulation,[],[f33385,f326])).
fof(f33385,plain,(
  ( ! [X592,X594,X588,X590,X593,X589,X591] : (~p(s(bool,happ(s(fun(fun(X588,bool),bool),'?_1'),s(fun(X588,bool),X593)))) | p(s(bool,happ(s(fun(X588,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X589),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X590),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X591),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X592),s(fun(X588,bool),X593),s(fun(X588,bool),X594))),s(X588,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X589),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X590),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X591),s(fun('type.wordSem.word_loc'(X589),fun(X588,bool)),X592),s(fun(X588,bool),X593),s(fun(X588,bool),X594)),X588)))))) )),
  inference(superposition,[],[f311,f326])).
fof(f33523,plain,(
  ( ! [X584,X586,X582,X585,X587,X581,X583] : (p(s(bool,happ(s(fun(fun(X581,bool),bool),'!_1'),s(fun(X581,bool),X586)))) | ~p(s(bool,happ(s(fun(X581,bool),X586),s(X581,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X582),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X583),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X584),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X585),s(fun(X581,bool),X586),s(fun(X581,bool),X587)),X581)))))) )),
  inference(forward_demodulation,[],[f33384,f326])).
fof(f33384,plain,(
  ( ! [X584,X586,X582,X585,X587,X581,X583] : (~p(s(bool,happ(s(fun(X581,bool),X586),s(X581,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X582),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X583),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X584),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X585),s(fun(X581,bool),X586),s(fun(X581,bool),X587)),X581))))) | p(s(bool,happ(s(fun(fun(X581,bool),bool),'!_1'),s(fun(X581,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X582),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X583),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X584),s(fun('type.wordSem.word_loc'(X582),fun(X581,bool)),X585),s(fun(X581,bool),X586),s(fun(X581,bool),X587))))))) )),
  inference(superposition,[],[f310,f326])).
fof(f33382,plain,(
  ( ! [X569,X571,X565,X567,X572,X568,X570,X566] : (p(s(bool,'|dollar|exists_1'(s(fun(X565,bool),X570)))) | s(X565,X572) = s(X565,sK3(X572,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X566),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X566),fun(X565,bool)),X567),s(fun('type.wordSem.word_loc'(X566),fun(X565,bool)),X568),s(fun('type.wordSem.word_loc'(X566),fun(X565,bool)),X569),s(fun(X565,bool),X570),s(fun(X565,bool),X571)),X565))) )),
  inference(superposition,[],[f288,f326])).
fof(f33376,plain,(
  ( ! [X532,X528,X530,X526,X529,X531,X527] : (s(bool,X530) != s(bool,'|dollar|exists_1'(s(fun(fun(X532,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X526),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X526),bool),X527),s(fun('type.wordSem.word_loc'(X526),bool),X528),s(fun('type.wordSem.word_loc'(X526),bool),X529),s(bool,X530),s(bool,X531)))) )),
  inference(superposition,[],[f22019,f326])).
fof(f33357,plain,(
  ( ! [X412,X414,X408,X410,X413,X409,X411] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X414,bool),'_dst_x0_1'(s(bool,X412))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X408),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X408),bool),X409),s(fun('type.wordSem.word_loc'(X408),bool),X410),s(fun('type.wordSem.word_loc'(X408),bool),X411),s(bool,X412),s(bool,X413)))) )),
  inference(superposition,[],[f2213,f326])).
fof(f33356,plain,(
  ( ! [X405,X407,X401,X403,X404,X406,X402] : (s(bool,X405) != s(bool,'|dollar|exists_1'(s(fun(X407,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X401),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X401),bool),X402),s(fun('type.wordSem.word_loc'(X401),bool),X403),s(fun('type.wordSem.word_loc'(X401),bool),X404),s(bool,X405),s(bool,X406)))) )),
  inference(superposition,[],[f2082,f326])).
fof(f33352,plain,(
  ( ! [X377,X379,X374,X376,X378,X373,X375] : (s(bool,'T_0') != s(bool,X377) | s(bool,X379) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X373),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X373),bool),X374),s(fun('type.wordSem.word_loc'(X373),bool),X375),s(fun('type.wordSem.word_loc'(X373),bool),X376),s(bool,X377),s(bool,X378))) | s(bool,'F_0') = s(bool,X379)) )),
  inference(superposition,[],[f1400,f326])).
fof(f33351,plain,(
  ( ! [X366,X372,X368,X370,X367,X369,X371] : (s(bool,X370) != s(bool,X372) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X366),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X366),bool),X367),s(fun('type.wordSem.word_loc'(X366),bool),X368),s(fun('type.wordSem.word_loc'(X366),bool),X369),s(bool,X370),s(bool,X371))) | s(bool,'F_0') = s(bool,X372)) )),
  inference(superposition,[],[f1197,f326])).
fof(f33350,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,X363) != s(bool,X365) | s(bool,'T_0') = s(bool,X365) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X359),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X359),bool),X360),s(fun('type.wordSem.word_loc'(X359),bool),X361),s(fun('type.wordSem.word_loc'(X359),bool),X362),s(bool,X363),s(bool,X364)))) )),
  inference(superposition,[],[f1197,f326])).
fof(f33343,plain,(
  ( ! [X313,X315,X308,X310,X312,X314,X309,X311] : (s(bool,X312) != s(bool,'const.bool.DATATYPE_1'(s(X314,X315))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X308),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X308),bool),X309),s(fun('type.wordSem.word_loc'(X308),bool),X310),s(fun('type.wordSem.word_loc'(X308),bool),X311),s(bool,X312),s(bool,X313)))) )),
  inference(superposition,[],[f557,f326])).
fof(f33299,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (s(bool,X112) = s(bool,'|dollar|exists_1'(s(fun(fun(X114,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X108),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X108),bool),X109),s(fun('type.wordSem.word_loc'(X108),bool),X110),s(fun('type.wordSem.word_loc'(X108),bool),X111),s(bool,X112),s(bool,X113)))) )),
  inference(superposition,[],[f326,f21893])).
fof(f33294,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s(bool,X81) = s(bool,'|dollar|exists_1'(s(fun(X83,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X77),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X77),bool),X78),s(fun('type.wordSem.word_loc'(X77),bool),X79),s(fun('type.wordSem.word_loc'(X77),bool),X80),s(bool,X81),s(bool,X82)))) )),
  inference(superposition,[],[f326,f1997])).
fof(f33292,plain,(
  ( ! [X68,X66,X64,X69,X67,X65,X63] : (s(bool,X67) = s(bool,X69) | s(bool,'F_0') = s(bool,X69) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X63),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X63),bool),X64),s(fun('type.wordSem.word_loc'(X63),bool),X65),s(fun('type.wordSem.word_loc'(X63),bool),X66),s(bool,X67),s(bool,X68)))) )),
  inference(superposition,[],[f326,f1108])).
fof(f33290,plain,(
  ( ! [X54,X52,X50,X55,X53,X51,X49] : (s(bool,'F_0') = s(bool,X53) | s(bool,X55) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X49),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X49),bool),X50),s(fun('type.wordSem.word_loc'(X49),bool),X51),s(fun('type.wordSem.word_loc'(X49),bool),X52),s(bool,X53),s(bool,X54))) | s(bool,'F_0') = s(bool,X55)) )),
  inference(superposition,[],[f326,f1108])).
fof(f33289,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42] : (s(bool,X45) = s(bool,'const.bool.DATATYPE_1'(s(X47,X48))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X41),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X41),bool),X42),s(fun('type.wordSem.word_loc'(X41),bool),X43),s(fun('type.wordSem.word_loc'(X41),bool),X44),s(bool,X45),s(bool,X46)))) )),
  inference(superposition,[],[f326,f1071])).
fof(f33286,plain,(
  ( ! [X26,X24,X23,X21,X25,X22,X20] : (s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X20),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X20),bool),X21),s(fun('type.wordSem.word_loc'(X20),bool),X22),s(fun('type.wordSem.word_loc'(X20),bool),X23),s(bool,X24),s(bool,X25)))) )),
  inference(superposition,[],[f326,f365])).
fof(f33285,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s(bool,'T_0') = s(bool,X17) | s(bool,X19) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X13),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X13),bool),X14),s(fun('type.wordSem.word_loc'(X13),bool),X15),s(fun('type.wordSem.word_loc'(X13),bool),X16),s(bool,X17),s(bool,X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f326,f365])).
fof(f33284,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X7),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X7),bool),X8),s(fun('type.wordSem.word_loc'(X7),bool),X9),s(fun('type.wordSem.word_loc'(X7),bool),X10),s(bool,X11),s(bool,X12)))) )),
  inference(superposition,[],[f326,f242])).
fof(f33113,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,sK4(X0,X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X2),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X2),'type.fcp.cart'(bool,X3)),X4),s(fun('type.wordSem.word_loc'(X2),'type.fcp.cart'(bool,X3)),X5),s(fun('type.wordSem.word_loc'(X2),'type.fcp.cart'(bool,X3)),X6),s('type.fcp.cart'(bool,X3),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.fcp.cart'(bool,X3),X7)),X3)))) )),
  inference(unit_resulting_resolution,[],[f326,f302])).
fof(f33072,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'!_1'),s(fun(X12,bool),sK7('!_1',fun(X12,bool))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f33026,f342])).
fof(f33026,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'!_1'),s(fun(X12,bool),sK7('!_1',fun(X12,bool))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f32907,f1108])).
fof(f32993,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),sK7('!_1',fun(X0,bool))),s(X0,X1))))) )),
  inference(unit_resulting_resolution,[],[f32907,f309])).
fof(f33011,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),sK7('!_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f321,f32907,f368])).
fof(f33016,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),sK7('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f350,f32907,f1037])).
fof(f33017,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f32907,f1802])).
fof(f33018,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f32907,f4218])).
fof(f33019,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),sK7('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f32907,f5586])).
fof(f32986,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(fun(X12,bool),bool),bool),'?_1'),s(fun(fun(X12,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f32940,f342])).
fof(f32940,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(fun(X12,bool),bool),bool),'?_1'),s(fun(fun(X12,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f32074,f1108])).
fof(f32907,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),sK7('!_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f32074,f311])).
fof(f32925,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(fun(X0,bool),bool),bool),bool),'_dstsel_0_x0_1'(s(fun(fun(X0,bool),bool),'!_1'))),s(fun(fun(fun(X0,bool),bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f321,f32074,f368])).
fof(f32930,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f350,f32074,f1037])).
fof(f32931,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f32074,f1802])).
fof(f32932,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f32074,f4218])).
fof(f32933,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f32074,f5586])).
fof(f32793,plain,(
  ( ! [X841,X835,X833,X839,X837,X840,X834,X838,X836] : (s('type.fcp.cart'(bool,X833),X839) != s('type.fcp.cart'(bool,X833),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X840,X841,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X834),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X834),'type.fcp.cart'(bool,X833)),X835),s(fun('type.wordSem.word_loc'(X834),'type.fcp.cart'(bool,X833)),X836),s(fun('type.wordSem.word_loc'(X834),'type.fcp.cart'(bool,X833)),X837),s('type.fcp.cart'(bool,X833),X838),s('type.fcp.cart'(bool,X833),X839)),X833)))) )),
  inference(superposition,[],[f302,f325])).
fof(f32784,plain,(
  ( ! [X765,X767,X761,X763,X764,X766,X760,X762] : (s('type.stackSem.result'(X760),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X760),X766))) != s('type.stackSem.result'(X760),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X760),X767))) | s('type.wordSem.word_loc'(X760),X767) = s('type.wordSem.word_loc'(X760),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X761),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X761),'type.wordSem.word_loc'(X760)),X762),s(fun('type.wordSem.word_loc'(X761),'type.wordSem.word_loc'(X760)),X763),s(fun('type.wordSem.word_loc'(X761),'type.wordSem.word_loc'(X760)),X764),s('type.wordSem.word_loc'(X760),X765),s('type.wordSem.word_loc'(X760),X766)))) )),
  inference(superposition,[],[f294,f325])).
fof(f32780,plain,(
  ( ! [X732,X734,X728,X730,X733,X735,X729,X731] : (s('type.stackSem.result'(X728),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X728),X734))) != s('type.stackSem.result'(X728),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X728),X735))) | s('type.wordSem.word_loc'(X728),X735) = s('type.wordSem.word_loc'(X728),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X729),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X729),'type.wordSem.word_loc'(X728)),X730),s(fun('type.wordSem.word_loc'(X729),'type.wordSem.word_loc'(X728)),X731),s(fun('type.wordSem.word_loc'(X729),'type.wordSem.word_loc'(X728)),X732),s('type.wordSem.word_loc'(X728),X733),s('type.wordSem.word_loc'(X728),X734)))) )),
  inference(superposition,[],[f292,f325])).
fof(f32776,plain,(
  ( ! [X697,X699,X700,X702,X696,X698,X701,X703] : (s('type.stackSem.result'(X696),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X696),X702))) != s('type.stackSem.result'(X696),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X696),X703))) | s('type.wordSem.word_loc'(X696),X703) = s('type.wordSem.word_loc'(X696),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X697),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X697),'type.wordSem.word_loc'(X696)),X698),s(fun('type.wordSem.word_loc'(X697),'type.wordSem.word_loc'(X696)),X699),s(fun('type.wordSem.word_loc'(X697),'type.wordSem.word_loc'(X696)),X700),s('type.wordSem.word_loc'(X696),X701),s('type.wordSem.word_loc'(X696),X702)))) )),
  inference(superposition,[],[f290,f325])).
fof(f32770,plain,(
  ( ! [X660,X656,X658,X657,X659,X655] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X660))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X655),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X655),'type.wordSem.word_loc'(sK0)),X656),s(fun('type.wordSem.word_loc'(X655),'type.wordSem.word_loc'(sK0)),X657),s(fun('type.wordSem.word_loc'(X655),'type.wordSem.word_loc'(sK0)),X658),s('type.wordSem.word_loc'(sK0),X659),s('type.wordSem.word_loc'(sK0),X660)))) )),
  inference(superposition,[],[f2643,f325])).
fof(f32766,plain,(
  ( ! [X633,X629,X631,X627,X632,X628,X630] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X632))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X627),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X627),'type.wordSem.word_loc'(sK0)),X628),s(fun('type.wordSem.word_loc'(X627),'type.wordSem.word_loc'(sK0)),X629),s(fun('type.wordSem.word_loc'(X627),'type.wordSem.word_loc'(sK0)),X630),s('type.wordSem.word_loc'(sK0),X631),s('type.wordSem.word_loc'(sK0),X632)),X633,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X633)))) )),
  inference(superposition,[],[f2654,f325])).
fof(f32760,plain,(
  ( ! [X584,X586,X580,X582,X585,X581,X583,X579] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X579,bool),X585))) | s(X579,X586) = s(X579,sK3(X586,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X580),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X580),fun(X579,bool)),X581),s(fun('type.wordSem.word_loc'(X580),fun(X579,bool)),X582),s(fun('type.wordSem.word_loc'(X580),fun(X579,bool)),X583),s(fun(X579,bool),X584),s(fun(X579,bool),X585)),X579))) )),
  inference(superposition,[],[f565,f325])).
fof(f32894,plain,(
  ( ! [X569,X565,X567,X568,X570,X564,X566] : (p(s(bool,happ(s(fun(X564,bool),X570),s(X564,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X565),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X566),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X567),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X568),s(fun(X564,bool),X569),s(fun(X564,bool),X570)),X564))))) | ~p(s(bool,happ(s(fun(fun(X564,bool),bool),'?_1'),s(fun(X564,bool),X570))))) )),
  inference(forward_demodulation,[],[f32758,f325])).
fof(f32758,plain,(
  ( ! [X569,X565,X567,X568,X570,X564,X566] : (~p(s(bool,happ(s(fun(fun(X564,bool),bool),'?_1'),s(fun(X564,bool),X570)))) | p(s(bool,happ(s(fun(X564,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X565),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X566),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X567),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X568),s(fun(X564,bool),X569),s(fun(X564,bool),X570))),s(X564,sK7('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X565),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X566),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X567),s(fun('type.wordSem.word_loc'(X565),fun(X564,bool)),X568),s(fun(X564,bool),X569),s(fun(X564,bool),X570)),X564)))))) )),
  inference(superposition,[],[f311,f325])).
fof(f32893,plain,(
  ( ! [X561,X563,X557,X559,X560,X562,X558] : (p(s(bool,happ(s(fun(fun(X557,bool),bool),'!_1'),s(fun(X557,bool),X563)))) | ~p(s(bool,happ(s(fun(X557,bool),X563),s(X557,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X558),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X559),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X560),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X561),s(fun(X557,bool),X562),s(fun(X557,bool),X563)),X557)))))) )),
  inference(forward_demodulation,[],[f32757,f325])).
fof(f32757,plain,(
  ( ! [X561,X563,X557,X559,X560,X562,X558] : (~p(s(bool,happ(s(fun(X557,bool),X563),s(X557,sK6('const.stackSem.result_CASE_6'(s('type.stackSem.result'(X558),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X559),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X560),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X561),s(fun(X557,bool),X562),s(fun(X557,bool),X563)),X557))))) | p(s(bool,happ(s(fun(fun(X557,bool),bool),'!_1'),s(fun(X557,bool),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X558),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X559),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X560),s(fun('type.wordSem.word_loc'(X558),fun(X557,bool)),X561),s(fun(X557,bool),X562),s(fun(X557,bool),X563))))))) )),
  inference(superposition,[],[f310,f325])).
fof(f32755,plain,(
  ( ! [X546,X542,X545,X541,X547,X543,X548,X544] : (p(s(bool,'|dollar|exists_1'(s(fun(X541,bool),X547)))) | s(X541,X548) = s(X541,sK3(X548,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X542),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X542),fun(X541,bool)),X543),s(fun('type.wordSem.word_loc'(X542),fun(X541,bool)),X544),s(fun('type.wordSem.word_loc'(X542),fun(X541,bool)),X545),s(fun(X541,bool),X546),s(fun(X541,bool),X547)),X541))) )),
  inference(superposition,[],[f288,f325])).
fof(f32749,plain,(
  ( ! [X505,X507,X502,X508,X504,X506,X503] : (s(bool,X507) != s(bool,'|dollar|exists_1'(s(fun(fun(X508,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X502),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X502),bool),X503),s(fun('type.wordSem.word_loc'(X502),bool),X504),s(fun('type.wordSem.word_loc'(X502),bool),X505),s(bool,X506),s(bool,X507)))) )),
  inference(superposition,[],[f22019,f325])).
fof(f32730,plain,(
  ( ! [X389,X385,X387,X388,X390,X384,X386] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X390,bool),'_dst_x0_1'(s(bool,X389))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X384),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X384),bool),X385),s(fun('type.wordSem.word_loc'(X384),bool),X386),s(fun('type.wordSem.word_loc'(X384),bool),X387),s(bool,X388),s(bool,X389)))) )),
  inference(superposition,[],[f2213,f325])).
fof(f32729,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X381] : (s(bool,X382) != s(bool,'|dollar|exists_1'(s(fun(X383,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X377),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X377),bool),X378),s(fun('type.wordSem.word_loc'(X377),bool),X379),s(fun('type.wordSem.word_loc'(X377),bool),X380),s(bool,X381),s(bool,X382)))) )),
  inference(superposition,[],[f2082,f325])).
fof(f32725,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X355] : (s(bool,'T_0') != s(bool,X354) | s(bool,X355) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X349),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X349),bool),X350),s(fun('type.wordSem.word_loc'(X349),bool),X351),s(fun('type.wordSem.word_loc'(X349),bool),X352),s(bool,X353),s(bool,X354))) | s(bool,'F_0') = s(bool,X355)) )),
  inference(superposition,[],[f1400,f325])).
fof(f32724,plain,(
  ( ! [X344,X346,X343,X345,X347,X342,X348] : (s(bool,X347) != s(bool,X348) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X342),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X342),bool),X343),s(fun('type.wordSem.word_loc'(X342),bool),X344),s(fun('type.wordSem.word_loc'(X342),bool),X345),s(bool,X346),s(bool,X347))) | s(bool,'F_0') = s(bool,X348)) )),
  inference(superposition,[],[f1197,f325])).
fof(f32723,plain,(
  ( ! [X335,X341,X337,X339,X340,X336,X338] : (s(bool,X340) != s(bool,X341) | s(bool,'T_0') = s(bool,X341) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X335),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X335),bool),X336),s(fun('type.wordSem.word_loc'(X335),bool),X337),s(fun('type.wordSem.word_loc'(X335),bool),X338),s(bool,X339),s(bool,X340)))) )),
  inference(superposition,[],[f1197,f325])).
fof(f32716,plain,(
  ( ! [X288,X290,X285,X287,X289,X291,X284,X286] : (s(bool,X289) != s(bool,'const.bool.DATATYPE_1'(s(X290,X291))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X284),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X284),bool),X285),s(fun('type.wordSem.word_loc'(X284),bool),X286),s(fun('type.wordSem.word_loc'(X284),bool),X287),s(bool,X288),s(bool,X289)))) )),
  inference(superposition,[],[f557,f325])).
fof(f32674,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (s(bool,X113) = s(bool,'|dollar|exists_1'(s(fun(fun(X114,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X108),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X108),bool),X109),s(fun('type.wordSem.word_loc'(X108),bool),X110),s(fun('type.wordSem.word_loc'(X108),bool),X111),s(bool,X112),s(bool,X113)))) )),
  inference(superposition,[],[f325,f21893])).
fof(f32669,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s(bool,X82) = s(bool,'|dollar|exists_1'(s(fun(X83,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X77),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X77),bool),X78),s(fun('type.wordSem.word_loc'(X77),bool),X79),s(fun('type.wordSem.word_loc'(X77),bool),X80),s(bool,X81),s(bool,X82)))) )),
  inference(superposition,[],[f325,f1997])).
fof(f32667,plain,(
  ( ! [X68,X66,X64,X69,X67,X65,X63] : (s(bool,X68) = s(bool,X69) | s(bool,'F_0') = s(bool,X69) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X63),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X63),bool),X64),s(fun('type.wordSem.word_loc'(X63),bool),X65),s(fun('type.wordSem.word_loc'(X63),bool),X66),s(bool,X67),s(bool,X68)))) )),
  inference(superposition,[],[f325,f1108])).
fof(f32665,plain,(
  ( ! [X54,X52,X50,X55,X53,X51,X49] : (s(bool,'F_0') = s(bool,X54) | s(bool,X55) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X49),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X49),bool),X50),s(fun('type.wordSem.word_loc'(X49),bool),X51),s(fun('type.wordSem.word_loc'(X49),bool),X52),s(bool,X53),s(bool,X54))) | s(bool,'F_0') = s(bool,X55)) )),
  inference(superposition,[],[f325,f1108])).
fof(f32664,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42] : (s(bool,X46) = s(bool,'const.bool.DATATYPE_1'(s(X47,X48))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X41),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X41),bool),X42),s(fun('type.wordSem.word_loc'(X41),bool),X43),s(fun('type.wordSem.word_loc'(X41),bool),X44),s(bool,X45),s(bool,X46)))) )),
  inference(superposition,[],[f325,f1071])).
fof(f32661,plain,(
  ( ! [X26,X24,X23,X21,X25,X22,X20] : (s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X20),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X20),bool),X21),s(fun('type.wordSem.word_loc'(X20),bool),X22),s(fun('type.wordSem.word_loc'(X20),bool),X23),s(bool,X24),s(bool,X25)))) )),
  inference(superposition,[],[f325,f365])).
fof(f32660,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X13),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X13),bool),X14),s(fun('type.wordSem.word_loc'(X13),bool),X15),s(fun('type.wordSem.word_loc'(X13),bool),X16),s(bool,X17),s(bool,X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f325,f365])).
fof(f32659,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s(bool,'F_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X7),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X7),bool),X8),s(fun('type.wordSem.word_loc'(X7),bool),X9),s(fun('type.wordSem.word_loc'(X7),bool),X10),s(bool,X11),s(bool,X12)))) )),
  inference(superposition,[],[f325,f242])).
fof(f32493,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,sK4(X0,X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X2),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X2),'type.fcp.cart'(bool,X3)),X4),s(fun('type.wordSem.word_loc'(X2),'type.fcp.cart'(bool,X3)),X5),s(fun('type.wordSem.word_loc'(X2),'type.fcp.cart'(bool,X3)),X6),s('type.fcp.cart'(bool,X3),X7),s('type.fcp.cart'(bool,X3),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X3)))) )),
  inference(unit_resulting_resolution,[],[f325,f302])).
fof(f32442,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,'|dollar|exists_1'(s(fun(fun(X36,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f32346,f235])).
fof(f32346,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,'|dollar|exists_1'(s(fun(fun(X36,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f32240])).
fof(f32297,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(fun(X14,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f32251,f342])).
fof(f32251,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(fun(X14,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f32075,f1108])).
fof(f32240,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f350,f32075,f1037])).
fof(f32241,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f32075,f1802])).
fof(f32242,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f32075,f4218])).
fof(f32243,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f32075,f5586])).
fof(f32194,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,X35) != s(bool,f(s(X32,sK9(X33,X34,bool,X32)))) | s(fun(X32,bool),X33) = s(fun(X32,bool),X34) | s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,g(s(X32,sK9(X33,X34,bool,X32))))) )),
  inference(superposition,[],[f322,f1108])).
fof(f32192,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,f(s(X24,sK9(X25,X26,bool,X24)))) | s(fun(X24,bool),X25) = s(fun(X24,bool),X26) | s(bool,X27) = s(bool,g(s(X24,sK9(X25,X26,bool,X24)))) | s(bool,'F_0') = s(bool,X27)) )),
  inference(superposition,[],[f322,f1108])).
fof(f32213,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') != s(bool,f(s(X19,sK9(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'F_0') = s(bool,g(s(X19,sK9(X20,X21,bool,X19))))) )),
  inference(forward_demodulation,[],[f32191,f270])).
fof(f32191,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,'const.bool.DATATYPE_1'(s(X22,X23))) != s(bool,f(s(X19,sK9(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'F_0') = s(bool,g(s(X19,sK9(X20,X21,bool,X19))))) )),
  inference(superposition,[],[f322,f1071])).
fof(f32188,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK9(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK9(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f322,f365])).
fof(f32187,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK9(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK9(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f322,f365])).
fof(f32186,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK9(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK9(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f322,f242])).
fof(f32176,plain,(
  ( ! [X35,X33,X34,X32] : (s(X34,f(s(bool,X35))) != s(X34,g(s(bool,X35))) | s(fun(bool,X34),X32) = s(fun(bool,X34),X33) | s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,sK9(X32,X33,X34,bool))) )),
  inference(superposition,[],[f322,f1108])).
fof(f32174,plain,(
  ( ! [X26,X24,X27,X25] : (s(X26,f(s(bool,'F_0'))) != s(X26,g(s(bool,'F_0'))) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(bool,X27) = s(bool,sK9(X24,X25,X26,bool)) | s(bool,'F_0') = s(bool,X27)) )),
  inference(superposition,[],[f322,f1108])).
fof(f32204,plain,(
  ( ! [X21,X19,X20] : (s(X21,f(s(bool,'T_0'))) != s(X21,g(s(bool,'T_0'))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'F_0') = s(bool,sK9(X19,X20,X21,bool))) )),
  inference(forward_demodulation,[],[f32173,f270])).
fof(f32173,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(X21,f(s(bool,'const.bool.DATATYPE_1'(s(X22,X23))))) != s(X21,g(s(bool,'const.bool.DATATYPE_1'(s(X22,X23))))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'F_0') = s(bool,sK9(X19,X20,X21,bool))) )),
  inference(superposition,[],[f322,f1071])).
fof(f32170,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK9(X7,X8,X9,bool))) )),
  inference(superposition,[],[f322,f365])).
fof(f32169,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK9(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f322,f365])).
fof(f32168,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK9(X0,X1,X2,bool))) )),
  inference(superposition,[],[f322,f242])).
fof(f32161,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'!_1'),s(fun(X12,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f32113,f342])).
fof(f32113,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'!_1'),s(fun(X12,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f31940,f1108])).
fof(f32074,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'!_1'))))) )),
  inference(unit_resulting_resolution,[],[f31940,f312])).
fof(f32075,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'!_1'))))) )),
  inference(unit_resulting_resolution,[],[f31940,f2633])).
fof(f32091,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))),s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f321,f31940,f368])).
fof(f32095,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f350,f31940,f1037])).
fof(f32096,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f31940,f1802])).
fof(f32097,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f31940,f4218])).
fof(f32098,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f31940,f5586])).
fof(f32004,plain,(
  ( ! [X149,X147,X148] : (~p(s(bool,X147)) | p(s(bool,happ(s(fun(fun(X149,bool),bool),'!_1'),s(fun(X149,bool),'_dst_x0_1'(s(bool,sK3(X147,X148,bool))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X148)))) )),
  inference(superposition,[],[f5586,f565])).
fof(f32029,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,happ(s(fun(fun(X89,bool),bool),'!_1'),s(fun(X89,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X87,bool),'_dst_x0_1'(s(bool,X88)))))))))) | s(bool,'F_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f31977,f235])).
fof(f31977,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X89,bool),bool),'!_1'),s(fun(X89,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X87,bool),'_dst_x0_1'(s(bool,X88)))))))))) | s(bool,'F_0') = s(bool,X88)) )),
  inference(superposition,[],[f5586,f2213])).
fof(f32022,plain,(
  ( ! [X78,X76,X77,X75] : (p(s(bool,happ(s(fun(fun(X77,bool),bool),'!_1'),s(fun(X77,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X75,bool),X76)))))))) | s(X75,X78) = s(X75,sK3(X78,X76,X75))) )),
  inference(subsumption_resolution,[],[f31973,f235])).
fof(f31973,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X77,bool),bool),'!_1'),s(fun(X77,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X75,bool),X76)))))))) | s(X75,X78) = s(X75,sK3(X78,X76,X75))) )),
  inference(superposition,[],[f5586,f565])).
fof(f32007,plain,(
  ( ! [X14,X17] : (p(s(bool,happ(s(fun(fun(X17,bool),bool),'!_1'),s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f32006,f235])).
fof(f32006,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X17,bool),bool),'!_1'),s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f31946,f270])).
fof(f31946,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,happ(s(fun(fun(X17,bool),bool),'!_1'),s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f5586,f1071])).
fof(f32005,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f31942,f235])).
fof(f31942,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f5586,f365])).
fof(f31940,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f235,f5586])).
fof(f25612,plain,(
  ( ! [X24,X25] : (s(bool,X25) != s(bool,'|dollar|exists_1'(s(fun(X24,bool),sK7('?_1',fun(X24,bool))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(subsumption_resolution,[],[f25560,f235])).
fof(f25560,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | s(bool,X25) != s(bool,'|dollar|exists_1'(s(fun(X24,bool),sK7('?_1',fun(X24,bool))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f368,f23722])).
fof(f249,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X25] : (s(bool,'F_0') = s(bool,X25) <=> ~p(s(bool,X25)))),
  file('thm.stackSem.result_distinct|split|4','thm.bool.EQ_CLAUSES|split|2')).
fof(f250,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f197])).
fof(f303,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,sK4(X3,X2,X1,X0))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.fcp.cart'(bool,X0),X1) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X3,X2,X1,X0)))) & s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f218])).
fof(f218,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : ((~p(s(bool,X4)) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.fcp.cart'(bool,X0),X1) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X4))) & s('type.option.option'(bool),'const.bool.COND_3'(s(bool,X4),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1))))))),
  inference(flattening,[],[f217])).
fof(f217,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : (((~p(s(bool,X4)) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.fcp.cart'(bool,X0),X1) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X4)))) & s('type.option.option'(bool),'const.bool.COND_3'(s(bool,X4),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1))))))),
  inference(nnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : ((p(s(bool,X4)) <=> s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & s('type.option.option'(bool),'const.bool.COND_3'(s(bool,X4),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1))))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4] : ((p(s(bool,X4)) <=> s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & s('type.option.option'(bool),'const.bool.COND_3'(s(bool,X4),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1))))))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X18] : ! [X44,X45,X46] : ? [X47] : ((p(s(bool,X47)) <=> s('type.fcp.cart'(bool,X18),X44) = s('type.fcp.cart'(bool,X18),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & s('type.option.option'(bool),'const.bool.COND_3'(s(bool,X47),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X18),'const.wordSem.Loc_2'(s('type.num.num',X46),s('type.num.num',X45))),s('type.wordSem.word_loc'(X18),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X18),X44))))))),
  file('thm.stackSem.result_distinct|split|4','thm.labSem.word_cmp_def|split|9')).
fof(f342,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f238,f235])).
fof(f238,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f39])).
fof(f39,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.stackSem.result_distinct|split|4','thm.bool.NOT_CLAUSES|split|2')).
fof(f398,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f271,f242])).
fof(f462,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X3),s(fun('type.num.num',bool),X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f284,f242])).
fof(f510,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,X5) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'_dst_x0_1'(s(bool,X5))),s(X4,X6)))) )),
  inference(superposition,[],[f320,f242])).
fof(f1034,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,happ(s(fun(X18,bool),'_dst_x0_1'(s(bool,X19))),s(X18,X20)))) )),
  inference(forward_demodulation,[],[f1000,f271])).
fof(f1000,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X19))) | s(bool,'F_0') = s(bool,happ(s(fun(X18,bool),'_dst_x0_1'(s(bool,X19))),s(X18,X20)))) )),
  inference(superposition,[],[f398,f320])).
fof(f1035,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,X21) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X21),s(fun('type.num.num',bool),X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f1001,f271])).
fof(f1001,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X21))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X21),s(fun('type.num.num',bool),X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f398,f284])).
fof(f1037,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f1036,f271])).
fof(f1036,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X9))) | s(bool,'F_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1013,f235])).
fof(f1013,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X9))) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f308,f398])).
fof(f1038,plain,(
  ( ! [X17,X18] : (s(bool,X18) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X17))) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f1016,f235])).
fof(f1016,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s(bool,X18) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X17))) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f368,f398])).
fof(f1070,plain,(
  ( ! [X23,X22] : (s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22))) | s(bool,'F_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f1059,f235])).
fof(f1059,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22))) | s(bool,'F_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f1037,f398])).
fof(f1071,plain,(
  ( ! [X26,X24,X25] : (s(bool,X26) = s(bool,'const.bool.DATATYPE_1'(s(X24,X25))) | s(bool,'F_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f1060,f235])).
fof(f1060,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,'const.bool.DATATYPE_1'(s(X24,X25))) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f1037,f270])).
fof(f1085,plain,(
  ( ! [X47,X45,X46] : (s(bool,X45) = s(bool,'const.bool.DATATYPE_1'(s(X46,X47))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X45)))) )),
  inference(superposition,[],[f1071,f271])).
fof(f1086,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X49) = s(bool,'const.bool.DATATYPE_1'(s(X51,X52))) | s(bool,'F_0') = s(bool,happ(s(fun(X48,bool),'_dst_x0_1'(s(bool,X49))),s(X48,X50)))) )),
  inference(superposition,[],[f1071,f320])).
fof(f1087,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X53) = s(bool,'const.bool.DATATYPE_1'(s(X55,X56))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X53),s(fun('type.num.num',bool),X54),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1071,f284])).
fof(f1244,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,X52) | s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X51)))) )),
  inference(superposition,[],[f1108,f271])).
fof(f1245,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,happ(s(fun(X53,bool),'_dst_x0_1'(s(bool,X54))),s(X53,X55)))) )),
  inference(superposition,[],[f1108,f320])).
fof(f1246,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) = s(bool,X59) | s(bool,'F_0') = s(bool,X59) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X57),s(fun('type.num.num',bool),X58),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1108,f284])).
fof(f1291,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'F_0') = s(bool,X42) | s(bool,X44) = s(bool,happ(s(fun(X41,bool),'_dst_x0_1'(s(bool,X42))),s(X41,X43))) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f1108,f320])).
fof(f1292,plain,(
  ( ! [X47,X45,X46] : (s(bool,'F_0') = s(bool,X45) | s(bool,X47) = s(bool,'const.ind_type.FCONS_3'(s(bool,X45),s(fun('type.num.num',bool),X46),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X47)) )),
  inference(superposition,[],[f1108,f284])).
fof(f1399,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X4) | ~p(s(bool,X4)) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) )),
  inference(superposition,[],[f249,f1108])).
fof(f1684,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f1428,f342])).
fof(f1428,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f305,f1108])).
fof(f1693,plain,(
  ( ! [X59,X57,X60,X58] : (s(X57,X59) = s(X57,sK3(X59,X58,X57)) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X57,bool),X58))) | s(bool,'F_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f1446,f342])).
fof(f1446,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,'F_0')) | s(X57,X59) = s(X57,sK3(X59,X58,X57)) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X57,bool),X58))) | s(bool,'F_0') = s(bool,X60)) )),
  inference(superposition,[],[f288,f1108])).
fof(f1730,plain,(
  ( ! [X52,X51] : (s(bool,X51) != s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X51)))) )),
  inference(superposition,[],[f1197,f271])).
fof(f1731,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X54) != s(bool,X56) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,happ(s(fun(X53,bool),'_dst_x0_1'(s(bool,X54))),s(X53,X55)))) )),
  inference(superposition,[],[f1197,f320])).
fof(f1732,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) != s(bool,X59) | s(bool,'T_0') = s(bool,X59) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X57),s(fun('type.num.num',bool),X58),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1197,f284])).
fof(f1751,plain,(
  ( ! [X52,X51] : (s(bool,X51) != s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X51))) | s(bool,'F_0') = s(bool,X52)) )),
  inference(superposition,[],[f1197,f271])).
fof(f1752,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X54) != s(bool,X56) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'_dst_x0_1'(s(bool,X54))),s(X53,X55))) | s(bool,'F_0') = s(bool,X56)) )),
  inference(superposition,[],[f1197,f320])).
fof(f1753,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) != s(bool,X59) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X57),s(fun('type.num.num',bool),X58),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X59)) )),
  inference(superposition,[],[f1197,f284])).
fof(f1936,plain,(
  ( ! [X14,X17] : (p(s(bool,'|dollar|exists_1'(s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f1935,f235])).
fof(f1935,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f1917,f270])).
fof(f1917,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,'|dollar|exists_1'(s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f1802,f1071])).
fof(f1997,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,'|dollar|exists_1'(s(fun(X12,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f1976,f342])).
fof(f1976,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'|dollar|exists_1'(s(fun(X12,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f1911,f1108])).
fof(f2213,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X2))))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f2182,f342])).
fof(f2182,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X2)))))) )),
  inference(superposition,[],[f1936,f242])).
fof(f2217,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') = s(bool,X20) | s(bool,X21) = s(bool,'|dollar|exists_1'(s(fun(X19,bool),'_dst_x0_1'(s(bool,X20))))) | s(bool,'F_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f2188,f342])).
fof(f2188,plain,(
  ( ! [X21,X19,X20] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,X20) | s(bool,X21) = s(bool,'|dollar|exists_1'(s(fun(X19,bool),'_dst_x0_1'(s(bool,X20))))) | s(bool,'F_0') = s(bool,X21)) )),
  inference(superposition,[],[f1936,f1108])).
fof(f2472,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') != s(bool,X60) | s(bool,X61) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X60))) | s(bool,'F_0') = s(bool,X61)) )),
  inference(superposition,[],[f1400,f271])).
fof(f2473,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'T_0') != s(bool,X63) | s(bool,X65) = s(bool,happ(s(fun(X62,bool),'_dst_x0_1'(s(bool,X63))),s(X62,X64))) | s(bool,'F_0') = s(bool,X65)) )),
  inference(superposition,[],[f1400,f320])).
fof(f2474,plain,(
  ( ! [X68,X66,X67] : (s(bool,'T_0') != s(bool,X66) | s(bool,X68) = s(bool,'const.ind_type.FCONS_3'(s(bool,X66),s(fun('type.num.num',bool),X67),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X68)) )),
  inference(superposition,[],[f1400,f284])).
fof(f2501,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X4))) | s(bool,'T_0') = s(bool,sK3(X3,X4,bool))) )),
  inference(superposition,[],[f565,f242])).
fof(f2506,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X17) = s(bool,'const.bool.DATATYPE_1'(s(X19,X20))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X18))) | s(bool,'F_0') = s(bool,sK3(X17,X18,bool))) )),
  inference(superposition,[],[f565,f1071])).
fof(f2507,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') = s(bool,X21) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X22))) | s(bool,X23) = s(bool,sK3(X21,X22,bool)) | s(bool,'F_0') = s(bool,X23)) )),
  inference(superposition,[],[f565,f1108])).
fof(f2509,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X28))) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,sK3(X27,X28,bool))) )),
  inference(superposition,[],[f565,f1108])).
fof(f2537,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') != s(bool,X37) | ~p(s(bool,sK3(X37,X38,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X38)))) )),
  inference(superposition,[],[f249,f565])).
fof(f2538,plain,(
  ( ! [X39,X40] : (p(s(bool,X39)) | s(bool,'F_0') = s(bool,sK3(X39,X40,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X40)))) )),
  inference(superposition,[],[f250,f565])).
fof(f2547,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X65))) | s(bool,'F_0') = s(bool,sK3(X65,X66,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X66)))) )),
  inference(superposition,[],[f398,f565])).
fof(f2550,plain,(
  ( ! [X76,X74,X75] : (~p(s(bool,X74)) | s(bool,X76) = s(bool,sK3(X74,X75,bool)) | s(bool,'F_0') = s(bool,X76) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X75)))) )),
  inference(superposition,[],[f1037,f565])).
fof(f2556,plain,(
  ( ! [X94,X95,X93] : (s(bool,X93) != s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'F_0') = s(bool,sK3(X93,X94,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X94)))) )),
  inference(superposition,[],[f1197,f565])).
fof(f2557,plain,(
  ( ! [X97,X98,X96] : (s(bool,X96) != s(bool,X98) | s(bool,'T_0') = s(bool,sK3(X96,X97,bool)) | s(bool,'F_0') = s(bool,X98) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X97)))) )),
  inference(superposition,[],[f1197,f565])).
fof(f2558,plain,(
  ( ! [X101,X99,X100] : (s(bool,'T_0') != s(bool,X99) | s(bool,X101) = s(bool,sK3(X99,X100,bool)) | s(bool,'F_0') = s(bool,X101) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X100)))) )),
  inference(superposition,[],[f1400,f565])).
fof(f2562,plain,(
  ( ! [X111,X109,X110] : (p(s(bool,'|dollar|exists_1'(s(fun(X111,bool),'_dst_x0_1'(s(bool,X109)))))) | s(bool,'F_0') = s(bool,sK3(X109,X110,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X110)))) )),
  inference(superposition,[],[f1936,f565])).
fof(f2737,plain,(
  ( ! [X14,X17] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))),s(bool,X17)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f2736,f235])).
fof(f2736,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))),s(bool,X17)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f2713,f270])).
fof(f2713,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))),s(bool,X17)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f314,f1071])).
fof(f2822,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'|dollar|exists_1'(s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) )),
  inference(subsumption_resolution,[],[f2821,f235])).
fof(f2821,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) )),
  inference(forward_demodulation,[],[f2799,f270])).
fof(f2799,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X23,X24)))) | p(s(bool,'|dollar|exists_1'(s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) )),
  inference(superposition,[],[f2633,f1071])).
fof(f2862,plain,(
  ( ! [X14,X17] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X17))),s(bool,X14)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f2861,f235])).
fof(f2861,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X17))),s(bool,X14)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f2838,f270])).
fof(f2838,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X17))),s(bool,X14)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f315,f1071])).
fof(f2866,plain,(
  ( ! [X47,X46] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X47),s(fun(bool,bool),'_i_0_0'))),s(bool,X46)))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(forward_demodulation,[],[f2865,f335])).
fof(f2865,plain,(
  ( ! [X47,X46] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X47))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X46)))))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f2849,f235])).
fof(f2849,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X47))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X46)))))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f315,f398])).
fof(f2987,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X12))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f2938,f342])).
fof(f2938,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X12))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f2707,f1108])).
fof(f3125,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X38))),s(bool,X39)))) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f3059,f342])).
fof(f3059,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X38))),s(bool,X39)))) | p(s(bool,'F_0')) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) )),
  inference(superposition,[],[f317,f1108])).
fof(f3137,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | s(bool,X20) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X18))),s(bool,X19))) | s(bool,'F_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f3106,f342])).
fof(f3106,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,'F_0')) | p(s(bool,X18)) | s(bool,X20) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X18))),s(bool,X19))) | s(bool,'F_0') = s(bool,X20)) )),
  inference(superposition,[],[f317,f1108])).
fof(f3251,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X12))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f3195,f342])).
fof(f3195,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X12))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f2832,f1108])).
fof(f3364,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f3301,f342])).
fof(f3301,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f3139,f1108])).
fof(f3396,plain,(
  ( ! [X14,X17] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X17))),s(bool,X14)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f3395,f235])).
fof(f3395,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X17))),s(bool,X14)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f3372,f270])).
fof(f3372,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X17))),s(bool,X14)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f318,f1071])).
fof(f3400,plain,(
  ( ! [X47,X46] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47),s(fun(bool,bool),'_i_0_0'))),s(bool,X46)))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(forward_demodulation,[],[f3399,f335])).
fof(f3399,plain,(
  ( ! [X47,X46] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X46)))))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f3383,f235])).
fof(f3383,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X46)))))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f318,f398])).
fof(f3430,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f350,f3045,f1037])).
fof(f3499,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f3425,f335])).
fof(f3425,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f3045,f318])).
fof(f3500,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f3424,f335])).
fof(f3424,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f3045,f315])).
fof(f3599,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.fcp.cart'(bool,X27),X26) = s('type.fcp.cart'(bool,X27),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,sK4(X24,X25,X26,X27))) )),
  inference(subsumption_resolution,[],[f3598,f235])).
fof(f3598,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X27),X26) = s('type.fcp.cart'(bool,X27),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,sK4(X24,X25,X26,X27))) )),
  inference(forward_demodulation,[],[f3591,f270])).
fof(f3591,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X28,X29)))) | s('type.fcp.cart'(bool,X27),X26) = s('type.fcp.cart'(bool,X27),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,sK4(X24,X25,X26,X27))) )),
  inference(superposition,[],[f301,f1071])).
fof(f3713,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X12))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f3659,f342])).
fof(f3659,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X12))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f3366,f1108])).
fof(f3830,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X14))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f3764,f342])).
fof(f3764,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X14))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f3602,f1108])).
fof(f3886,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X27) = s(bool,sK4(X24,X25,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26)) | s(bool,'F_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f3862,f342])).
fof(f3862,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,'F_0')) | s(bool,X27) = s(bool,sK4(X24,X25,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26)) | s(bool,'F_0') = s(bool,X27)) )),
  inference(superposition,[],[f3839,f1108])).
fof(f3990,plain,(
  ( ! [X23,X19,X20] : (p(s(bool,happ(s(fun(X19,bool),X20),s(X19,X23)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X19,bool),bool),'!_1'),s(fun(X19,bool),X20)))) )),
  inference(subsumption_resolution,[],[f3989,f235])).
fof(f3989,plain,(
  ( ! [X23,X19,X20] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X19,bool),X20),s(X19,X23)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X19,bool),bool),'!_1'),s(fun(X19,bool),X20)))) )),
  inference(forward_demodulation,[],[f3979,f270])).
fof(f3979,plain,(
  ( ! [X23,X21,X19,X22,X20] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X21,X22)))) | p(s(bool,happ(s(fun(X19,bool),X20),s(X19,X23)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X19,bool),bool),'!_1'),s(fun(X19,bool),X20)))) )),
  inference(superposition,[],[f309,f1071])).
fof(f4236,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,happ(s(fun(fun(X20,bool),bool),'?_1'),s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) )),
  inference(subsumption_resolution,[],[f4235,f235])).
fof(f4235,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X20,bool),bool),'?_1'),s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) )),
  inference(forward_demodulation,[],[f4211,f270])).
fof(f4211,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X23,X24)))) | p(s(bool,happ(s(fun(fun(X20,bool),bool),'?_1'),s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) )),
  inference(superposition,[],[f312,f1071])).
fof(f4389,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X4),s(fun('type.num.num',bool),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f298,f242])).
fof(f4395,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num',X30))) | s(bool,X31) = s(bool,'const.ind_type.FCONS_3'(s(bool,X28),s(fun('type.num.num',bool),X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))))) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f298,f1108])).
fof(f4397,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X39) = s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',X38))) | s(bool,'F_0') = s(bool,X39) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X36),s(fun('type.num.num',bool),X37),s('type.num.num','const.num.SUC_1'(s('type.num.num',X38)))))) )),
  inference(superposition,[],[f298,f1108])).
fof(f4427,plain,(
  ( ! [X114,X112,X113] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),X113),s('type.num.num',X114))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X112),s(fun('type.num.num',bool),X113),s('type.num.num','const.num.SUC_1'(s('type.num.num',X114)))))) )),
  inference(superposition,[],[f398,f298])).
fof(f4436,plain,(
  ( ! [X152,X151,X149,X150] : (s(bool,X152) != s(bool,happ(s(fun('type.num.num',bool),X150),s('type.num.num',X151))) | s(bool,'T_0') = s(bool,X152) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X149),s(fun('type.num.num',bool),X150),s('type.num.num','const.num.SUC_1'(s('type.num.num',X151)))))) )),
  inference(superposition,[],[f1197,f298])).
fof(f4437,plain,(
  ( ! [X156,X154,X155,X153] : (s(bool,X156) != s(bool,happ(s(fun('type.num.num',bool),X154),s('type.num.num',X155))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X153),s(fun('type.num.num',bool),X154),s('type.num.num','const.num.SUC_1'(s('type.num.num',X155))))) | s(bool,'F_0') = s(bool,X156)) )),
  inference(superposition,[],[f1197,f298])).
fof(f4438,plain,(
  ( ! [X158,X159,X157,X160] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X158),s('type.num.num',X159))) | s(bool,X160) = s(bool,'const.ind_type.FCONS_3'(s(bool,X157),s(fun('type.num.num',bool),X158),s('type.num.num','const.num.SUC_1'(s('type.num.num',X159))))) | s(bool,'F_0') = s(bool,X160)) )),
  inference(superposition,[],[f1400,f298])).
fof(f4488,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',X25))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X23),s(fun('type.num.num',bool),X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) )),
  inference(forward_demodulation,[],[f4394,f270])).
fof(f4394,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(bool,'const.bool.DATATYPE_1'(s(X26,X27))) = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',X25))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X23),s(fun('type.num.num',bool),X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) )),
  inference(superposition,[],[f298,f1071])).
fof(f4709,plain,(
  ( ! [X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X22)))) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f330,f242])).
fof(f4715,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X40)))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) )),
  inference(superposition,[],[f330,f1108])).
fof(f4717,plain,(
  ( ! [X47,X45,X46] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X46))),s(bool,X47)))) | s(bool,X45) = s(bool,X47) | s(bool,'F_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f330,f1108])).
fof(f4722,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X59))),s(bool,X60)))) | s(bool,'F_0') = s(bool,X60) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) )),
  inference(superposition,[],[f330,f1108])).
fof(f4724,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X65))),s(bool,X66)))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f330,f242])).
fof(f4747,plain,(
  ( ! [X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X22))),s(bool,'F_0')))) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f330,f242])).
fof(f4753,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))),s(bool,'F_0')))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) )),
  inference(superposition,[],[f330,f1108])).
fof(f4797,plain,(
  ( ! [X35,X38] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X38)))) | s(bool,X35) = s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(forward_demodulation,[],[f4714,f270])).
fof(f4714,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'const.bool.DATATYPE_1'(s(X36,X37))))),s(bool,X38)))) | s(bool,X35) = s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f330,f1071])).
fof(f4820,plain,(
  ( ! [X35,X38] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X38))),s(bool,'T_0')))) | s(bool,X35) = s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(forward_demodulation,[],[f4752,f270])).
fof(f4752,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X38))),s(bool,'const.bool.DATATYPE_1'(s(X36,X37)))))) | s(bool,X35) = s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f330,f1071])).
fof(f4840,plain,(
  ( ! [X21,X19,X20] : (s(X19,X20) = s(X19,X21) | s(bool,'F_0') = s(bool,happ(s(fun(X19,bool),happ(s(fun(X19,fun(X19,bool)),'=_0'),s(X19,X20))),s(X19,X21)))) )),
  inference(subsumption_resolution,[],[f4839,f235])).
fof(f4839,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s(X19,X20) = s(X19,X21) | s(bool,'F_0') = s(bool,happ(s(fun(X19,bool),happ(s(fun(X19,fun(X19,bool)),'=_0'),s(X19,X20))),s(X19,X21)))) )),
  inference(forward_demodulation,[],[f4785,f270])).
fof(f4785,plain,(
  ( ! [X23,X21,X19,X22,X20] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X22,X23)))) | s(X19,X20) = s(X19,X21) | s(bool,'F_0') = s(bool,happ(s(fun(X19,bool),happ(s(fun(X19,fun(X19,bool)),'=_0'),s(X19,X20))),s(X19,X21)))) )),
  inference(superposition,[],[f330,f1071])).
fof(f4979,plain,(
  ( ! [X21,X22] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X22)))) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f331,f242])).
fof(f4985,plain,(
  ( ! [X39,X41,X40] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X40)))) | s(bool,X39) != s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) )),
  inference(superposition,[],[f331,f1108])).
fof(f4987,plain,(
  ( ! [X47,X45,X46] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X46))),s(bool,X47)))) | s(bool,X45) != s(bool,X47) | s(bool,'F_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f331,f1108])).
fof(f4992,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X59))),s(bool,X60)))) | s(bool,'F_0') != s(bool,X60) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) )),
  inference(superposition,[],[f331,f1108])).
fof(f4994,plain,(
  ( ! [X66,X65] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X65))),s(bool,X66)))) | s(bool,'F_0') != s(bool,X66) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f331,f242])).
fof(f5017,plain,(
  ( ! [X21,X22] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X22))),s(bool,'F_0')))) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f331,f242])).
fof(f5023,plain,(
  ( ! [X39,X41,X40] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))),s(bool,'F_0')))) | s(bool,X39) != s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) )),
  inference(superposition,[],[f331,f1108])).
fof(f5025,plain,(
  ( ! [X47,X45,X46] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X47))),s(bool,X46)))) | s(bool,X45) != s(bool,X47) | s(bool,'F_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f331,f1108])).
fof(f5030,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X60))),s(bool,X59)))) | s(bool,'F_0') != s(bool,X60) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) )),
  inference(superposition,[],[f331,f1108])).
fof(f5032,plain,(
  ( ! [X66,X65] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X66))),s(bool,X65)))) | s(bool,'F_0') != s(bool,X66) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f331,f242])).
fof(f5132,plain,(
  ( ! [X35,X38] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X38)))) | s(bool,X35) != s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(forward_demodulation,[],[f4984,f270])).
fof(f4984,plain,(
  ( ! [X37,X35,X38,X36] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'const.bool.DATATYPE_1'(s(X36,X37))))),s(bool,X38)))) | s(bool,X35) != s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f331,f1071])).
fof(f5155,plain,(
  ( ! [X35,X38] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X38))),s(bool,'T_0')))) | s(bool,X35) != s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(forward_demodulation,[],[f5022,f270])).
fof(f5022,plain,(
  ( ! [X37,X35,X38,X36] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X38))),s(bool,'const.bool.DATATYPE_1'(s(X36,X37)))))) | s(bool,X35) != s(bool,X38) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f331,f1071])).
fof(f5178,plain,(
  ( ! [X26,X24,X27,X25] : (s(X24,X25) != s(X24,X26) | s(bool,X27) = s(bool,happ(s(fun(X24,bool),happ(s(fun(X24,fun(X24,bool)),'=_0'),s(X24,X25))),s(X24,X26))) | s(bool,'F_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f5056,f342])).
fof(f5056,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,'F_0')) | s(X24,X25) != s(X24,X26) | s(bool,X27) = s(bool,happ(s(fun(X24,bool),happ(s(fun(X24,fun(X24,bool)),'=_0'),s(X24,X25))),s(X24,X26))) | s(bool,'F_0') = s(bool,X27)) )),
  inference(superposition,[],[f331,f1108])).
fof(f5560,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X0)))) | s(bool,'T_0') = s(bool,sK6(X0,bool))) )),
  inference(superposition,[],[f310,f242])).
fof(f5566,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X12)))) | s(bool,X13) = s(bool,sK6(X12,bool)) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f310,f1108])).
fof(f5568,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X16)))) | s(bool,'F_0') = s(bool,X17) | s(bool,'F_0') = s(bool,sK6(X16,bool))) )),
  inference(superposition,[],[f310,f1108])).
fof(f5591,plain,(
  ( ! [X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'T_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X9)))) | s(bool,'F_0') = s(bool,sK6(X9,bool))) )),
  inference(forward_demodulation,[],[f5565,f270])).
fof(f5565,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'const.bool.DATATYPE_1'(s(X10,X11)))))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X9)))) | s(bool,'F_0') = s(bool,sK6(X9,bool))) )),
  inference(superposition,[],[f310,f1071])).
fof(f5601,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),X15)))) | s(bool,'F_0') = s(bool,happ(s(fun(X14,bool),X15),s(X14,sK6(X15,X14))))) )),
  inference(subsumption_resolution,[],[f5600,f235])).
fof(f5600,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),X15)))) | s(bool,'F_0') = s(bool,happ(s(fun(X14,bool),X15),s(X14,sK6(X15,X14))))) )),
  inference(forward_demodulation,[],[f5578,f270])).
fof(f5578,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X16,X17)))) | p(s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),X15)))) | s(bool,'F_0') = s(bool,happ(s(fun(X14,bool),X15),s(X14,sK6(X15,X14))))) )),
  inference(superposition,[],[f310,f1071])).
fof(f5781,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(X14,bool),X15),s(X14,sK7(X15,X14))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),X15)))) )),
  inference(subsumption_resolution,[],[f5780,f235])).
fof(f5780,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X14,bool),X15),s(X14,sK7(X15,X14))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),X15)))) )),
  inference(forward_demodulation,[],[f5766,f270])).
fof(f5766,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X16,X17)))) | p(s(bool,happ(s(fun(X14,bool),X15),s(X14,sK7(X15,X14))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),X15)))) )),
  inference(superposition,[],[f311,f1071])).
fof(f6008,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,X0))))) )),
  inference(condensation,[],[f6007])).
fof(f6007,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f5921,f245])).
fof(f5921,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f313,f242])).
fof(f6017,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X40))),s(bool,X41)))) | p(s(bool,X41)) | s(bool,X40) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f5935,f342])).
fof(f5935,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X40))),s(bool,X41)))) | p(s(bool,'F_0')) | p(s(bool,X41)) | s(bool,X40) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f313,f1108])).
fof(f6066,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'F_0'))))) )),
  inference(condensation,[],[f6065])).
fof(f6065,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f5958,f245])).
fof(f5958,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f313,f242])).
fof(f6075,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X41))),s(bool,X40)))) | p(s(bool,X41)) | s(bool,X40) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f5972,f342])).
fof(f5972,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X41))),s(bool,X40)))) | p(s(bool,X41)) | p(s(bool,'F_0')) | s(bool,X40) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f313,f1108])).
fof(f6130,plain,(
  ( ! [X14,X15] : (p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))),s(bool,X15)))) )),
  inference(subsumption_resolution,[],[f6129,f235])).
fof(f6129,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))),s(bool,X15)))) )),
  inference(forward_demodulation,[],[f6000,f270])).
fof(f6000,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X16,X17)))) | p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X14))),s(bool,X15)))) )),
  inference(superposition,[],[f313,f1071])).
fof(f6512,plain,(
  ( ! [X14,X17] : (p(s(bool,X17)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X14))),s(bool,X17)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f6511,f235])).
fof(f6511,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X14))),s(bool,X17)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f6479,f270])).
fof(f6479,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,X17)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X14))),s(bool,X17)))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f316,f1071])).
fof(f13094,plain,(
  ( ! [X19,X20,X18] : (s(bool,X20) = s(bool,happ(s(fun(X18,bool),happ(s(fun(X18,fun(X18,bool)),'=_0'),s(X18,X19))),s(X18,X19))) | s(bool,'F_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f13001,f342])).
fof(f13001,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,'F_0')) | s(bool,X20) = s(bool,happ(s(fun(X18,bool),happ(s(fun(X18,fun(X18,bool)),'=_0'),s(X18,X19))),s(X18,X19))) | s(bool,'F_0') = s(bool,X20)) )),
  inference(superposition,[],[f5104,f1108])).
fof(f13259,plain,(
  ( ! [X23,X21,X22] : (s(bool,X23) = s(bool,'|dollar|exists_1'(s(fun(X21,bool),happ(s(fun(X21,fun(X21,bool)),'=_0'),s(X21,X22))))) | s(bool,'F_0') = s(bool,X23)) )),
  inference(subsumption_resolution,[],[f13170,f342])).
fof(f13170,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,'F_0')) | s(bool,X23) = s(bool,'|dollar|exists_1'(s(fun(X21,bool),happ(s(fun(X21,fun(X21,bool)),'=_0'),s(X21,X22))))) | s(bool,'F_0') = s(bool,X23)) )),
  inference(superposition,[],[f12928,f1108])).
fof(f13292,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f5920,f309])).
fof(f13293,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f5920,f245])).
fof(f13303,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X0)))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f5920,f1108])).
fof(f13338,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f13316,f235])).
fof(f13316,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f5920,f365])).
fof(f13344,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f6473,f245])).
fof(f13354,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,'F_0')))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f6473,f365])).
fof(f13362,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f6473,f1108])).
fof(f13401,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f13375,f235])).
fof(f13375,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f6473,f365])).
fof(f13497,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f4694,f245])).
fof(f13554,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f13528,f235])).
fof(f13528,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4694,f365])).
fof(f13557,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f4699,f309])).
fof(f13558,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0')))),
  inference(unit_resulting_resolution,[],[f4699,f245])).
fof(f13615,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f13589,f235])).
fof(f13589,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4699,f365])).
fof(f14880,plain,(
  ( ! [X99,X100] : (s(bool,X99) = s(bool,'|dollar|exists_1'(s(fun(X100,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X99)))) )),
  inference(superposition,[],[f1997,f271])).
fof(f14881,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,X102) = s(bool,'|dollar|exists_1'(s(fun(X104,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(X101,bool),'_dst_x0_1'(s(bool,X102))),s(X101,X103)))) )),
  inference(superposition,[],[f1997,f320])).
fof(f14882,plain,(
  ( ! [X107,X105,X106] : (s(bool,X105) = s(bool,'|dollar|exists_1'(s(fun(X107,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X105),s(fun('type.num.num',bool),X106),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1997,f284])).
fof(f14884,plain,(
  ( ! [X114,X112,X113] : (s(bool,X112) = s(bool,'|dollar|exists_1'(s(fun(X114,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,sK3(X112,X113,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X113)))) )),
  inference(superposition,[],[f1997,f565])).
fof(f14885,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'|dollar|exists_1'(s(fun(X2,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1997,f365])).
fof(f15180,plain,(
  ( ! [X152,X151] : (s(bool,'T_0') = s(bool,X152) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X151))),s(bool,X152)))) | s(bool,'F_0') = s(bool,X151)) )),
  inference(forward_demodulation,[],[f15059,f1960])).
fof(f15059,plain,(
  ( ! [X152,X151,X150] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X151))),s(bool,X152)))) | s(bool,X152) = s(bool,'|dollar|exists_1'(s(fun(X150,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X151)) )),
  inference(superposition,[],[f330,f1997])).
fof(f15182,plain,(
  ( ! [X158,X157] : (s(bool,'T_0') != s(bool,X158) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X157))),s(bool,X158)))) | s(bool,'F_0') = s(bool,X157)) )),
  inference(forward_demodulation,[],[f15061,f1960])).
fof(f15061,plain,(
  ( ! [X158,X156,X157] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X157))),s(bool,X158)))) | s(bool,X158) != s(bool,'|dollar|exists_1'(s(fun(X156,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X157)) )),
  inference(superposition,[],[f331,f1997])).
fof(f15183,plain,(
  ( ! [X161,X160] : (s(bool,'T_0') != s(bool,X161) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X161))),s(bool,X160)))) | s(bool,'F_0') = s(bool,X160)) )),
  inference(forward_demodulation,[],[f15062,f1960])).
fof(f15062,plain,(
  ( ! [X161,X159,X160] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X161))),s(bool,X160)))) | s(bool,X161) != s(bool,'|dollar|exists_1'(s(fun(X159,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X160)) )),
  inference(superposition,[],[f331,f1997])).
fof(f15410,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X107,bool),'_dst_x0_1'(s(bool,X105))))) | s(bool,'F_0') = s(bool,happ(s(fun(X104,bool),'_dst_x0_1'(s(bool,X105))),s(X104,X106)))) )),
  inference(superposition,[],[f2213,f320])).
fof(f15411,plain,(
  ( ! [X109,X110,X108] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X110,bool),'_dst_x0_1'(s(bool,X108))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X108),s(fun('type.num.num',bool),X109),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2213,f284])).
fof(f15412,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X114,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.num.num',bool),X112),s('type.num.num',X113))))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X111),s(fun('type.num.num',bool),X112),s('type.num.num','const.num.SUC_1'(s('type.num.num',X113)))))) )),
  inference(superposition,[],[f2213,f298])).
fof(f15413,plain,(
  ( ! [X116,X117,X115] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X117,bool),'_dst_x0_1'(s(bool,X115))))) | s(bool,'F_0') = s(bool,sK3(X115,X116,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X116)))) )),
  inference(superposition,[],[f2213,f565])).
fof(f15482,plain,(
  ( ! [X154,X152,X153] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X154)))) | s(bool,X154) = s(bool,'|dollar|exists_1'(s(fun(X152,bool),'_dst_x0_1'(s(bool,X153))))) | s(bool,'F_0') = s(bool,X153)) )),
  inference(superposition,[],[f330,f2213])).
fof(f15483,plain,(
  ( ! [X156,X157,X155] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X157))),s(bool,'T_0')))) | s(bool,X157) = s(bool,'|dollar|exists_1'(s(fun(X155,bool),'_dst_x0_1'(s(bool,X156))))) | s(bool,'F_0') = s(bool,X156)) )),
  inference(superposition,[],[f330,f2213])).
fof(f15484,plain,(
  ( ! [X158,X159,X160] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X160)))) | s(bool,X160) != s(bool,'|dollar|exists_1'(s(fun(X158,bool),'_dst_x0_1'(s(bool,X159))))) | s(bool,'F_0') = s(bool,X159)) )),
  inference(superposition,[],[f331,f2213])).
fof(f15485,plain,(
  ( ! [X163,X161,X162] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X163))),s(bool,'T_0')))) | s(bool,X163) != s(bool,'|dollar|exists_1'(s(fun(X161,bool),'_dst_x0_1'(s(bool,X162))))) | s(bool,'F_0') = s(bool,X162)) )),
  inference(superposition,[],[f331,f2213])).
fof(f15521,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X30)) | s(bool,X30) = s(bool,'|dollar|exists_1'(s(fun(X28,bool),'_dst_x0_1'(s(bool,X29))))) | s(bool,'F_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f15439,f235])).
fof(f15439,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X30)) | s(bool,X30) = s(bool,'|dollar|exists_1'(s(fun(X28,bool),'_dst_x0_1'(s(bool,X29))))) | s(bool,'F_0') = s(bool,X29)) )),
  inference(superposition,[],[f308,f2213])).
fof(f15522,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X31,bool),'_dst_x0_1'(s(bool,X32))))))),s(bool,X33)))) | s(bool,'F_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f15440,f235])).
fof(f15440,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X31,bool),'_dst_x0_1'(s(bool,X32))))))),s(bool,X33)))) | s(bool,'F_0') = s(bool,X32)) )),
  inference(superposition,[],[f314,f2213])).
fof(f15523,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X36))),s(bool,'|dollar|exists_1'(s(fun(X34,bool),'_dst_x0_1'(s(bool,X35)))))))) | s(bool,'F_0') = s(bool,X35)) )),
  inference(subsumption_resolution,[],[f15441,f235])).
fof(f15441,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X36))),s(bool,'|dollar|exists_1'(s(fun(X34,bool),'_dst_x0_1'(s(bool,X35)))))))) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f315,f2213])).
fof(f15524,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X45))),s(bool,'|dollar|exists_1'(s(fun(X43,bool),'_dst_x0_1'(s(bool,X44)))))))) | s(bool,'F_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f15444,f235])).
fof(f15444,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X45))),s(bool,'|dollar|exists_1'(s(fun(X43,bool),'_dst_x0_1'(s(bool,X44)))))))) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f318,f2213])).
fof(f15525,plain,(
  ( ! [X57,X58,X56] : (s(bool,X58) != s(bool,'|dollar|exists_1'(s(fun(X56,bool),'_dst_x0_1'(s(bool,X57))))) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f15447,f235])).
fof(f15447,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,'T_0')) | s(bool,X58) != s(bool,'|dollar|exists_1'(s(fun(X56,bool),'_dst_x0_1'(s(bool,X57))))) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) )),
  inference(superposition,[],[f368,f2213])).
fof(f15528,plain,(
  ( ! [X97,X98,X96] : (p(s(bool,'|dollar|exists_1'(s(fun(X98,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X96,bool),'_dst_x0_1'(s(bool,X97)))))))))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f15460,f235])).
fof(f15460,plain,(
  ( ! [X97,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X98,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X96,bool),'_dst_x0_1'(s(bool,X97)))))))))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(superposition,[],[f1802,f2213])).
fof(f16266,plain,(
  ( ! [X68,X66,X67] : (p(s(bool,X68)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X66,bool),'_dst_x0_1'(s(bool,X67))))))),s(bool,X68)))) | s(bool,'F_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f16226,f235])).
fof(f16226,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,'T_0')) | p(s(bool,X68)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X66,bool),'_dst_x0_1'(s(bool,X67))))))),s(bool,X68)))) | s(bool,'F_0') = s(bool,X67)) )),
  inference(superposition,[],[f316,f2213])).
fof(f21639,plain,(
  ( ! [X14,X17] : (p(s(bool,happ(s(fun(fun(X17,bool),bool),'?_1'),s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f21638,f235])).
fof(f21638,plain,(
  ( ! [X14,X17] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X17,bool),bool),'?_1'),s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f21590,f270])).
fof(f21590,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X15,X16)))) | p(s(bool,happ(s(fun(fun(X17,bool),bool),'?_1'),s(fun(X17,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f4218,f1071])).
fof(f21652,plain,(
  ( ! [X70,X72,X71] : (p(s(bool,happ(s(fun(fun(X72,bool),bool),'?_1'),s(fun(X72,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X70,bool),'_dst_x0_1'(s(bool,X71)))))))))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(subsumption_resolution,[],[f21613,f235])).
fof(f21613,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X72,bool),bool),'?_1'),s(fun(X72,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X70,bool),'_dst_x0_1'(s(bool,X71)))))))))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f4218,f2213])).
fof(f21761,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f21723,f342])).
fof(f21723,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f21584,f1108])).
fof(f21893,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(fun(X15,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f21857,f342])).
fof(f21857,plain,(
  ( ! [X15,X16] : (p(s(bool,'F_0')) | s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(fun(X15,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X16)) )),
  inference(superposition,[],[f21689,f1108])).
fof(f22131,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(fun(X12,bool),bool),bool),'?_1'),s(fun(fun(X12,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f22094,f342])).
fof(f22094,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(fun(X12,bool),bool),bool),'?_1'),s(fun(fun(X12,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f21688,f1108])).
fof(f22200,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),sK7('?_1',fun(X12,bool))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f22164,f342])).
fof(f22164,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),sK7('?_1',fun(X12,bool))))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f22066,f1108])).
fof(f22544,plain,(
  ( ! [X114,X115] : (s(bool,X114) = s(bool,'|dollar|exists_1'(s(fun(fun(X115,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X114)))) )),
  inference(superposition,[],[f21893,f271])).
fof(f22545,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,X117) = s(bool,'|dollar|exists_1'(s(fun(fun(X119,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(X116,bool),'_dst_x0_1'(s(bool,X117))),s(X116,X118)))) )),
  inference(superposition,[],[f21893,f320])).
fof(f22546,plain,(
  ( ! [X121,X122,X120] : (s(bool,X120) = s(bool,'|dollar|exists_1'(s(fun(fun(X122,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X120),s(fun('type.num.num',bool),X121),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f21893,f284])).
fof(f22548,plain,(
  ( ! [X127,X128,X129] : (s(bool,X127) = s(bool,'|dollar|exists_1'(s(fun(fun(X129,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,sK3(X127,X128,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X128)))) )),
  inference(superposition,[],[f21893,f565])).
fof(f23404,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,happ(s(fun(X12,bool),sK7('?_1',fun(X12,bool))),s(X12,sK7(sK7('?_1',fun(X12,bool)),X12)))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f23348,f342])).
fof(f23348,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,happ(s(fun(X12,bool),sK7('?_1',fun(X12,bool))),s(X12,sK7(sK7('?_1',fun(X12,bool)),X12)))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f22136,f1108])).
fof(f23494,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,happ(s(fun(X4,bool),X6),s(X4,X5))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X4,bool),bool),'_dstsel_0_x0_1'(s(X4,X5))),s(fun(X4,bool),X6)))) )),
  inference(superposition,[],[f321,f242])).
fof(f23500,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'F_0') = s(bool,happ(s(fun(X28,bool),X30),s(X28,X29))) | s(bool,X31) = s(bool,happ(s(fun(fun(X28,bool),bool),'_dstsel_0_x0_1'(s(X28,X29))),s(fun(X28,bool),X30))) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f321,f1108])).
fof(f23502,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X39) = s(bool,happ(s(fun(X36,bool),X38),s(X36,X37))) | s(bool,'F_0') = s(bool,X39) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X36,bool),bool),'_dstsel_0_x0_1'(s(X36,X37))),s(fun(X36,bool),X38)))) )),
  inference(superposition,[],[f321,f1108])).
fof(f23550,plain,(
  ( ! [X163,X164,X162] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X162,bool),X164),s(X162,X163))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X162,bool),bool),'_dstsel_0_x0_1'(s(X162,X163))),s(fun(X162,bool),X164)))) )),
  inference(superposition,[],[f398,f321])).
fof(f23559,plain,(
  ( ! [X202,X200,X199,X201] : (s(bool,X202) != s(bool,happ(s(fun(X199,bool),X201),s(X199,X200))) | s(bool,'T_0') = s(bool,X202) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X199,bool),bool),'_dstsel_0_x0_1'(s(X199,X200))),s(fun(X199,bool),X201)))) )),
  inference(superposition,[],[f1197,f321])).
fof(f23560,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,X206) != s(bool,happ(s(fun(X203,bool),X205),s(X203,X204))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X203,bool),bool),'_dstsel_0_x0_1'(s(X203,X204))),s(fun(X203,bool),X205))) | s(bool,'F_0') = s(bool,X206)) )),
  inference(superposition,[],[f1197,f321])).
fof(f23561,plain,(
  ( ! [X210,X208,X209,X207] : (s(bool,'T_0') != s(bool,happ(s(fun(X207,bool),X209),s(X207,X208))) | s(bool,X210) = s(bool,happ(s(fun(fun(X207,bool),bool),'_dstsel_0_x0_1'(s(X207,X208))),s(fun(X207,bool),X209))) | s(bool,'F_0') = s(bool,X210)) )),
  inference(superposition,[],[f1400,f321])).
fof(f23566,plain,(
  ( ! [X229,X227,X230,X228] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X230,bool),'_dst_x0_1'(s(bool,happ(s(fun(X227,bool),X229),s(X227,X228))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X227,bool),bool),'_dstsel_0_x0_1'(s(X227,X228))),s(fun(X227,bool),X229)))) )),
  inference(superposition,[],[f2213,f321])).
fof(f23641,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun(X23,bool),X25),s(X23,X24))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X23,bool),bool),'_dstsel_0_x0_1'(s(X23,X24))),s(fun(X23,bool),X25)))) )),
  inference(forward_demodulation,[],[f23499,f270])).
fof(f23499,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(bool,'const.bool.DATATYPE_1'(s(X26,X27))) = s(bool,happ(s(fun(X23,bool),X25),s(X23,X24))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X23,bool),bool),'_dstsel_0_x0_1'(s(X23,X24))),s(fun(X23,bool),X25)))) )),
  inference(superposition,[],[f321,f1071])).
fof(f23772,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(X14,bool),sK7('?_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f23732,f342])).
fof(f23732,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'|dollar|exists_1'(s(fun(X14,bool),sK7('?_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f23307,f1108])).
fof(f309,plain,(
  ( ! [X0,X3,X1] : (~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X1,X0))))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f222])).
fof(f222,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))))),
  inference(rectify,[],[f221])).
fof(f221,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))))),
  inference(nnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) <=> ! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X40,X43] : (p(s(bool,happ(s(fun(fun(X40,bool),bool),'!_1'),s(fun(X40,bool),X43)))) <=> ! [X41] : p(s(bool,happ(s(fun(X40,bool),X43),s(X40,X41)))))),
  file('thm.stackSem.result_distinct|split|4','!_HL_QUANT')).
fof(f312,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X1,X0)))))) & (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f225])).
fof(f225,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))))),
  inference(rectify,[],[f224])).
fof(f224,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | ? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))))),
  inference(nnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) <=> ? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X40,X43] : (p(s(bool,happ(s(fun(fun(X40,bool),bool),'?_1'),s(fun(X40,bool),X43)))) <=> ? [X41] : p(s(bool,happ(s(fun(X40,bool),X43),s(X40,X41)))))),
  file('thm.stackSem.result_distinct|split|4','?_HL_QUANT')).
fof(f2633,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2))))) )),
  inference(subsumption_resolution,[],[f2526,f245])).
fof(f2526,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2)))) )),
  inference(superposition,[],[f289,f565])).
fof(f2759,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X15)))) | p(s(bool,'|dollar|exists_1'(s(fun(X12,bool),sK3(X13,X14,fun(X12,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f2633,f565])).
fof(f2820,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f2795,f235])).
fof(f2795,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2633,f365])).
fof(f3988,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3975,f235])).
fof(f3975,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f309,f365])).
fof(f4169,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X15)))) | p(s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),sK3(X13,X14,fun(X12,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f312,f565])).
fof(f4234,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(fun(X4,bool),bool),'?_1'),s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f4207,f235])).
fof(f4207,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X4,bool),bool),'?_1'),s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f312,f365])).
fof(f23495,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X7,bool),X9),s(X7,X8))) | s(bool,X10) = s(bool,happ(s(fun(fun(X7,bool),bool),'_dstsel_0_x0_1'(s(X7,X8))),s(fun(X7,bool),X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f321,f365])).
fof(f23496,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X14) = s(bool,happ(s(fun(X11,bool),X13),s(X11,X12))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X11,bool),bool),'_dstsel_0_x0_1'(s(X11,X12))),s(fun(X11,bool),X13)))) )),
  inference(superposition,[],[f321,f365])).
fof(f23526,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,happ(s(fun(X75,bool),X77),s(X75,X76)))) | p(s(bool,happ(s(fun(fun(fun(X75,bool),bool),bool),'?_1'),s(fun(fun(X75,bool),bool),'_dstsel_0_x0_1'(s(X75,X76))))))) )),
  inference(superposition,[],[f312,f321])).
fof(f23527,plain,(
  ( ! [X80,X78,X79] : (~p(s(bool,happ(s(fun(X78,bool),X80),s(X78,X79)))) | p(s(bool,'|dollar|exists_1'(s(fun(fun(X78,bool),bool),'_dstsel_0_x0_1'(s(X78,X79))))))) )),
  inference(superposition,[],[f2633,f321])).
fof(f23669,plain,(
  ( ! [X171,X169,X170] : (s(bool,'T_0') != s(bool,happ(s(fun(X169,bool),X171),s(X169,X170))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X169,bool),bool),'_dstsel_0_x0_1'(s(X169,X170))),s(fun(X169,bool),X171)))) )),
  inference(forward_demodulation,[],[f23552,f270])).
fof(f23552,plain,(
  ( ! [X173,X171,X169,X172,X170] : (s(bool,'const.bool.DATATYPE_1'(s(X172,X173))) != s(bool,happ(s(fun(X169,bool),X171),s(X169,X170))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X169,bool),bool),'_dstsel_0_x0_1'(s(X169,X170))),s(fun(X169,bool),X171)))) )),
  inference(superposition,[],[f557,f321])).
fof(f310,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X1,X0))))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f5599,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),X3)))) | s(bool,X4) = s(bool,happ(s(fun(X2,bool),X3),s(X2,sK6(X3,X2)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5574,f235])).
fof(f5574,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),X3)))) | s(bool,X4) = s(bool,happ(s(fun(X2,bool),X3),s(X2,sK6(X3,X2)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f310,f365])).
fof(f5587,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(forward_demodulation,[],[f5555,f271])).
fof(f5555,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))))))) )),
  inference(superposition,[],[f310,f271])).
fof(f5588,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),X4)))) | ~p(s(bool,happ(s(fun(X2,bool),X4),s(X2,sK6(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2)))))) )),
  inference(forward_demodulation,[],[f5556,f320])).
fof(f5556,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X4),s(X2,sK6(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2))))) | p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5))))))) )),
  inference(superposition,[],[f310,f320])).
fof(f5589,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(fun(X6,bool),bool),'!_1'),s(fun(X6,bool),X7)))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK6('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6)))))) )),
  inference(forward_demodulation,[],[f5557,f284])).
fof(f5557,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK6('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6))))) | p(s(bool,happ(s(fun(fun(X6,bool),bool),'!_1'),s(fun(X6,bool),'const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f310,f284])).
fof(f5559,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(X13,bool),X14),s(X13,sK6(sK3(X14,X15,fun(X13,bool)),X13))))) | p(s(bool,happ(s(fun(fun(X13,bool),bool),'!_1'),s(fun(X13,bool),sK3(X14,X15,fun(X13,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X13,bool),bool),X15)))) )),
  inference(superposition,[],[f310,f565])).
fof(f311,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X1,X0)))))) )),
  inference(cnf_transformation,[],[f226])).
fof(f5779,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK7(X3,X2))))) | s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5762,f235])).
fof(f5762,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK7(X3,X2))))) | s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f311,f365])).
fof(f5773,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | ~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))) )),
  inference(forward_demodulation,[],[f5755,f271])).
fof(f5755,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))),s(X0,sK7(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(superposition,[],[f311,f271])).
fof(f5774,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X4),s(X2,sK7(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2))))) | ~p(s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X4))))) )),
  inference(forward_demodulation,[],[f5756,f320])).
fof(f5756,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X4)))) | p(s(bool,happ(s(fun(X2,bool),happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5))),s(X2,sK7(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2)))))) )),
  inference(superposition,[],[f311,f320])).
fof(f5775,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK7('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6))))) | ~p(s(bool,happ(s(fun(fun(X6,bool),bool),'?_1'),s(fun(X6,bool),X7))))) )),
  inference(forward_demodulation,[],[f5757,f284])).
fof(f5757,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(fun(X6,bool),bool),'?_1'),s(fun(X6,bool),X7)))) | p(s(bool,happ(s(fun(X6,bool),'const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))),s(X6,sK7('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6)))))) )),
  inference(superposition,[],[f311,f284])).
fof(f330,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f233])).
fof(f233,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X40,X41,X42] : (p(s(bool,happ(s(fun(X40,bool),happ(s(fun(X40,fun(X40,bool)),'=_0'),s(X40,X41))),s(X40,X42)))) <=> s(X40,X41) = s(X40,X42))),
  file('thm.stackSem.result_distinct|split|4',arity_0_HL_EQ)).
fof(f331,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f233])).
fof(f4708,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,happ(s(fun(X17,bool),happ(s(fun(X17,fun(X17,bool)),'=_0'),s(X17,X18))),s(X17,X20)))) | s(X17,X20) = s(X17,sK3(X18,X19,X17)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) )),
  inference(superposition,[],[f330,f565])).
fof(f4746,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,happ(s(fun(X17,bool),happ(s(fun(X17,fun(X17,bool)),'=_0'),s(X17,X20))),s(X17,X18)))) | s(X17,X20) = s(X17,sK3(X18,X19,X17)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) )),
  inference(superposition,[],[f330,f565])).
fof(f4978,plain,(
  ( ! [X19,X17,X20,X18] : (p(s(bool,happ(s(fun(X17,bool),happ(s(fun(X17,fun(X17,bool)),'=_0'),s(X17,X18))),s(X17,X20)))) | s(X17,X20) != s(X17,sK3(X18,X19,X17)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) )),
  inference(superposition,[],[f331,f565])).
fof(f5016,plain,(
  ( ! [X19,X17,X20,X18] : (p(s(bool,happ(s(fun(X17,bool),happ(s(fun(X17,fun(X17,bool)),'=_0'),s(X17,X20))),s(X17,X18)))) | s(X17,X20) != s(X17,sK3(X18,X19,X17)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) )),
  inference(superposition,[],[f331,f565])).
fof(f5590,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,happ(s(fun(fun(X9,bool),bool),'!_1'),s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12)))))) | ~p(s(bool,happ(s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))),s(X9,sK6('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9)))))) )),
  inference(forward_demodulation,[],[f5558,f298])).
fof(f5558,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))),s(X9,sK6('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9))))) | p(s(bool,happ(s(fun(fun(X9,bool),bool),'!_1'),s(fun(X9,bool),'const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) )),
  inference(superposition,[],[f310,f298])).
fof(f23692,plain,(
  ( ! [X310,X312,X309,X311] : (p(s(bool,happ(s(fun(fun(X309,bool),bool),'!_1'),s(fun(X309,bool),happ(s(fun(X310,fun(X309,bool)),X312),s(X310,X311)))))) | ~p(s(bool,happ(s(fun(X309,bool),happ(s(fun(X310,fun(X309,bool)),X312),s(X310,X311))),s(X309,sK6(happ(s(fun(fun(X310,fun(X309,bool)),fun(X309,bool)),'_dstsel_0_x0_1'(s(X310,X311))),s(fun(X310,fun(X309,bool)),X312)),X309)))))) )),
  inference(forward_demodulation,[],[f23590,f321])).
fof(f23590,plain,(
  ( ! [X310,X312,X309,X311] : (~p(s(bool,happ(s(fun(X309,bool),happ(s(fun(X310,fun(X309,bool)),X312),s(X310,X311))),s(X309,sK6(happ(s(fun(fun(X310,fun(X309,bool)),fun(X309,bool)),'_dstsel_0_x0_1'(s(X310,X311))),s(fun(X310,fun(X309,bool)),X312)),X309))))) | p(s(bool,happ(s(fun(fun(X309,bool),bool),'!_1'),s(fun(X309,bool),happ(s(fun(fun(X310,fun(X309,bool)),fun(X309,bool)),'_dstsel_0_x0_1'(s(X310,X311))),s(fun(X310,fun(X309,bool)),X312))))))) )),
  inference(superposition,[],[f310,f321])).
fof(f5776,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))),s(X9,sK7('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9))))) | ~p(s(bool,happ(s(fun(fun(X9,bool),bool),'?_1'),s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f5758,f298])).
fof(f5758,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun(fun(X9,bool),bool),'?_1'),s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12)))))) | p(s(bool,happ(s(fun(X9,bool),'const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s(X9,sK7('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9)))))) )),
  inference(superposition,[],[f311,f298])).
fof(f23693,plain,(
  ( ! [X313,X315,X316,X314] : (p(s(bool,happ(s(fun(X313,bool),happ(s(fun(X314,fun(X313,bool)),X316),s(X314,X315))),s(X313,sK7(happ(s(fun(fun(X314,fun(X313,bool)),fun(X313,bool)),'_dstsel_0_x0_1'(s(X314,X315))),s(fun(X314,fun(X313,bool)),X316)),X313))))) | ~p(s(bool,happ(s(fun(fun(X313,bool),bool),'?_1'),s(fun(X313,bool),happ(s(fun(X314,fun(X313,bool)),X316),s(X314,X315))))))) )),
  inference(forward_demodulation,[],[f23591,f321])).
fof(f23591,plain,(
  ( ! [X313,X315,X316,X314] : (~p(s(bool,happ(s(fun(fun(X313,bool),bool),'?_1'),s(fun(X313,bool),happ(s(fun(X314,fun(X313,bool)),X316),s(X314,X315)))))) | p(s(bool,happ(s(fun(X313,bool),happ(s(fun(fun(X314,fun(X313,bool)),fun(X313,bool)),'_dstsel_0_x0_1'(s(X314,X315))),s(fun(X314,fun(X313,bool)),X316))),s(X313,sK7(happ(s(fun(fun(X314,fun(X313,bool)),fun(X313,bool)),'_dstsel_0_x0_1'(s(X314,X315))),s(fun(X314,fun(X313,bool)),X316)),X313)))))) )),
  inference(superposition,[],[f311,f321])).
fof(f5127,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1),s(fun(X0,X0),'_i_0_0'))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f4940,f335])).
fof(f4940,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f271,f331])).
fof(f3973,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(fun(X12,bool),bool),'!_1'),s(fun(X12,bool),X13)))) | p(s(bool,happ(s(fun(X12,bool),sK3(X13,X14,fun(X12,bool))),s(X12,X15)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f309,f565])).
fof(f5759,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(fun(X13,bool),bool),'?_1'),s(fun(X13,bool),X14)))) | p(s(bool,happ(s(fun(X13,bool),sK3(X14,X15,fun(X13,bool))),s(X13,sK7(sK3(X14,X15,fun(X13,bool)),X13))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X13,bool),bool),X15)))) )),
  inference(superposition,[],[f311,f565])).
fof(f23528,plain,(
  ( ! [X81,X82] : (~p(s(bool,happ(s(fun(X81,bool),sK6('_dstsel_0_x0_1'(s(X81,X82)),fun(X81,bool))),s(X81,X82)))) | p(s(bool,happ(s(fun(fun(fun(X81,bool),bool),bool),'!_1'),s(fun(fun(X81,bool),bool),'_dstsel_0_x0_1'(s(X81,X82))))))) )),
  inference(superposition,[],[f310,f321])).
fof(f5561,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X1)))) | s(bool,X2) = s(bool,sK6(X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f310,f365])).
fof(f5562,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X3)))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,sK6(X3,bool))) )),
  inference(superposition,[],[f310,f365])).
fof(f13364,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X4)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f6473,f242])).
fof(f4710,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X24)))) | s(bool,X23) = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f330,f365])).
fof(f4731,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X78)))) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) )),
  inference(superposition,[],[f330,f565])).
fof(f4980,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X24)))) | s(bool,X23) != s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f331,f365])).
fof(f5001,plain,(
  ( ! [X78,X76,X79,X77] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X78)))) | s(bool,X78) != s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) )),
  inference(superposition,[],[f331,f565])).
fof(f13305,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X4))),s(bool,X4)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f5920,f242])).
fof(f313,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f228])).
fof(f228,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))))),
  inference(flattening,[],[f227])).
fof(f227,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | (p(s(bool,X0)) | p(s(bool,X1)))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))))),
  inference(nnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) <=> (p(s(bool,X0)) | p(s(bool,X1))))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X41,X42] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X41))),s(bool,X42)))) <=> (p(s(bool,X41)) | p(s(bool,X42))))),
  file('thm.stackSem.result_distinct|split|4','|bslash||slash|_HL_0')).
fof(f314,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f228])).
fof(f315,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f228])).
fof(f2735,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2709,f235])).
fof(f2709,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f314,f365])).
fof(f2860,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2834,f235])).
fof(f2834,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f315,f365])).
fof(f5957,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X91))),s(bool,X93)))) | p(s(bool,sK3(X91,X92,bool))) | p(s(bool,X93)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X92)))) )),
  inference(superposition,[],[f313,f565])).
fof(f5994,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X93))),s(bool,X91)))) | p(s(bool,X93)) | p(s(bool,sK3(X91,X92,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X92)))) )),
  inference(superposition,[],[f313,f565])).
fof(f6010,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,X0)))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f6009])).
fof(f6009,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | p(s(bool,X7)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f5923,f245])).
fof(f5923,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | p(s(bool,X7)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f313,f365])).
fof(f6068,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f6067])).
fof(f6067,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X7))),s(bool,X6)))) | p(s(bool,X7)) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f5960,f245])).
fof(f5960,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X7))),s(bool,X6)))) | p(s(bool,X7)) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f313,f365])).
fof(f6128,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5996,f235])).
fof(f5996,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | p(s(bool,X3)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f313,f365])).
fof(f316,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | ~p(s(bool,X0)) | p(s(bool,X1))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))))),
  inference(flattening,[],[f229])).
fof(f229,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | (~p(s(bool,X0)) | p(s(bool,X1)))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))))),
  inference(nnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) <=> (~p(s(bool,X0)) | p(s(bool,X1))))),
  inference(ennf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) <=> (p(s(bool,X0)) => p(s(bool,X1))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X41,X42] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X41))),s(bool,X42)))) <=> (p(s(bool,X41)) => p(s(bool,X42))))),
  file('thm.stackSem.result_distinct|split|4','==>_HL_0')).
fof(f317,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f230])).
fof(f318,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f230])).
fof(f3072,plain,(
  ( ! [X74,X75,X73] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X73))),s(bool,X75)))) | p(s(bool,sK3(X73,X74,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) )),
  inference(superposition,[],[f317,f565])).
fof(f3122,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f3121])).
fof(f3121,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3048,f245])).
fof(f3048,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f317,f365])).
fof(f3135,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(subsumption_resolution,[],[f3100,f342])).
fof(f3100,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(superposition,[],[f317,f242])).
fof(f3394,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3368,f235])).
fof(f3368,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f318,f365])).
fof(f6510,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X3)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f6475,f235])).
fof(f6475,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f316,f365])).
fof(f4711,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X27))),s(bool,X28)))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f330,f365])).
fof(f4720,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X53))),s(bool,X54)))) | s(bool,'T_0') = s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f330,f365])).
fof(f4981,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X27))),s(bool,X28)))) | s(bool,X26) != s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f331,f365])).
fof(f4990,plain,(
  ( ! [X54,X55,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X53))),s(bool,X54)))) | s(bool,'T_0') != s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f331,f365])).
fof(f5019,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X28))),s(bool,X27)))) | s(bool,X26) != s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f331,f365])).
fof(f5028,plain,(
  ( ! [X54,X55,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X54))),s(bool,X53)))) | s(bool,'T_0') != s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f331,f365])).
fof(f2748,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54))))),s(bool,X55)))) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) )),
  inference(subsumption_resolution,[],[f2728,f235])).
fof(f2728,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54))))),s(bool,X55)))) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) )),
  inference(superposition,[],[f314,f565])).
fof(f2734,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,sK3(X73,X74,bool)))),s(bool,X75)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) )),
  inference(superposition,[],[f314,f565])).
fof(f6535,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,X59)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X57,bool),X58))))),s(bool,X59)))) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) )),
  inference(subsumption_resolution,[],[f6497,f235])).
fof(f6497,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X59)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X57,bool),X58))))),s(bool,X59)))) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) )),
  inference(superposition,[],[f316,f565])).
fof(f6509,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,X90)) | p(s(bool,X92)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,sK3(X90,X91,bool)))),s(bool,X92)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X91)))) )),
  inference(superposition,[],[f316,f565])).
fof(f4748,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X24))),s(bool,'T_0')))) | s(bool,X23) = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f330,f365])).
fof(f4769,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X78))),s(bool,'T_0')))) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) )),
  inference(superposition,[],[f330,f565])).
fof(f5018,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X24))),s(bool,'T_0')))) | s(bool,X23) != s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f331,f365])).
fof(f5039,plain,(
  ( ! [X78,X76,X79,X77] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X78))),s(bool,'T_0')))) | s(bool,X78) != s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) )),
  inference(superposition,[],[f331,f565])).
fof(f2873,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X55))),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54)))))) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) )),
  inference(subsumption_resolution,[],[f2853,f235])).
fof(f2853,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X55))),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54)))))) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) )),
  inference(superposition,[],[f315,f565])).
fof(f3407,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X55))),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54)))))) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) )),
  inference(subsumption_resolution,[],[f3387,f235])).
fof(f3387,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X55))),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54)))))) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) )),
  inference(superposition,[],[f318,f565])).
fof(f2859,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X75))),s(bool,sK3(X73,X74,bool))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) )),
  inference(superposition,[],[f315,f565])).
fof(f3393,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X75))),s(bool,sK3(X73,X74,bool))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) )),
  inference(superposition,[],[f318,f565])).
fof(f2878,plain,(
  ( ! [X64,X65] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X65),s(fun(bool,bool),'_i_0_0'))),s(bool,X64)))) | ~p(s(bool,X64))) )),
  inference(forward_demodulation,[],[f2856,f335])).
fof(f2856,plain,(
  ( ! [X64,X65] : (~p(s(bool,X64)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X65))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X64))))))) )),
  inference(superposition,[],[f315,f271])).
fof(f2960,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f2890,f335])).
fof(f2890,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f2707,f315])).
fof(f3217,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3147,f335])).
fof(f3147,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f2832,f315])).
fof(f3682,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3610,f335])).
fof(f3610,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f3366,f315])).
fof(f3412,plain,(
  ( ! [X64,X65] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X65),s(fun(bool,bool),'_i_0_0'))),s(bool,X64)))) | ~p(s(bool,X64))) )),
  inference(forward_demodulation,[],[f3390,f335])).
fof(f3390,plain,(
  ( ! [X64,X65] : (~p(s(bool,X64)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X65))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X64))))))) )),
  inference(superposition,[],[f318,f271])).
fof(f3681,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3611,f335])).
fof(f3611,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f3366,f318])).
fof(f13343,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f6473,f309])).
fof(f13496,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f4694,f309])).
fof(f21637,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(fun(X3,bool),bool),'?_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f21586,f235])).
fof(f21586,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X3,bool),bool),'?_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f4218,f365])).
fof(f4218,plain,(
  ( ! [X45,X46] : (~p(s(bool,X46)) | p(s(bool,happ(s(fun(fun(X45,bool),bool),'?_1'),s(fun(X45,bool),'_dst_x0_1'(s(bool,X46))))))) )),
  inference(superposition,[],[f312,f320])).
fof(f5586,plain,(
  ( ! [X35,X34] : (~p(s(bool,X35)) | p(s(bool,happ(s(fun(fun(X34,bool),bool),'!_1'),s(fun(X34,bool),'_dst_x0_1'(s(bool,X35))))))) )),
  inference(superposition,[],[f310,f320])).
fof(f21653,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,happ(s(fun(fun(X75,bool),bool),'?_1'),s(fun(X75,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X73,bool),X74)))))))) | s(X73,X76) = s(X73,sK3(X76,X74,X73))) )),
  inference(subsumption_resolution,[],[f21614,f235])).
fof(f21614,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X75,bool),bool),'?_1'),s(fun(X75,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X73,bool),X74)))))))) | s(X73,X76) = s(X73,sK3(X76,X74,X73))) )),
  inference(superposition,[],[f4218,f565])).
fof(f21636,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,X123)) | p(s(bool,happ(s(fun(fun(X125,bool),bool),'?_1'),s(fun(X125,bool),'_dst_x0_1'(s(bool,sK3(X123,X124,bool))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X124)))) )),
  inference(superposition,[],[f4218,f565])).
fof(f4697,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))))) )),
  inference(unit_resulting_resolution,[],[f296,f330])).
fof(f4698,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))))) )),
  inference(unit_resulting_resolution,[],[f297,f330])).
fof(f4703,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))))))) )),
  inference(unit_resulting_resolution,[],[f297,f330])).
fof(f4702,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))))))) )),
  inference(unit_resulting_resolution,[],[f296,f330])).
fof(f4696,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Error_0'))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f283,f330])).
fof(f4695,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f282,f330])).
fof(f4791,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Error_0'))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f4701,f334])).
fof(f4701,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Error_0'))))) )),
  inference(unit_resulting_resolution,[],[f283,f330])).
fof(f4792,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f4700,f334])).
fof(f4700,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'))))) )),
  inference(unit_resulting_resolution,[],[f282,f330])).
fof(f5113,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x0x0x1_3'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))),s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'))),s('type.wordSem.word_loc'(X0),X1))))) )),
  inference(forward_demodulation,[],[f4954,f335])).
fof(f4954,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f276,f331])).
fof(f5114,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x0x0x1_3'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))),s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'))),s('type.wordSem.word_loc'(X0),X1))))) )),
  inference(forward_demodulation,[],[f4953,f335])).
fof(f4953,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f274,f331])).
fof(f5115,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x0x0x1_3'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))),s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'))),s('type.wordSem.word_loc'(X0),X1))))) )),
  inference(forward_demodulation,[],[f4952,f335])).
fof(f4952,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f275,f331])).
fof(f4390,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num',X9))) | s(bool,X10) = s(bool,'const.ind_type.FCONS_3'(s(bool,X7),s(fun('type.num.num',bool),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f298,f365])).
fof(f4391,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num',X13))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X11),s(fun('type.num.num',bool),X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))) )),
  inference(superposition,[],[f298,f365])).
fof(f4503,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X120),s('type.num.num',X121))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X119),s(fun('type.num.num',bool),X120),s('type.num.num','const.num.SUC_1'(s('type.num.num',X121)))))) )),
  inference(forward_demodulation,[],[f4429,f270])).
fof(f4429,plain,(
  ( ! [X123,X121,X122,X120,X119] : (s(bool,'const.bool.DATATYPE_1'(s(X122,X123))) != s(bool,happ(s(fun('type.num.num',bool),X120),s('type.num.num',X121))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X119),s(fun('type.num.num',bool),X120),s('type.num.num','const.num.SUC_1'(s('type.num.num',X121)))))) )),
  inference(superposition,[],[f557,f298])).
fof(f6127,plain,(
  ( ! [X90,X88,X89] : (p(s(bool,happ(s(fun('type.num.num',bool),X88),s('type.num.num',X89)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X90),s(fun('type.num.num',bool),X88))),s('type.num.num',X89)))) | p(s(bool,X90))) )),
  inference(forward_demodulation,[],[f6126,f298])).
fof(f6126,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X90),s(fun('type.num.num',bool),X88))),s('type.num.num',X89)))) | p(s(bool,X90)) | p(s(bool,'const.ind_type.FCONS_3'(s(bool,X87),s(fun('type.num.num',bool),X88),s('type.num.num','const.num.SUC_1'(s('type.num.num',X89))))))) )),
  inference(forward_demodulation,[],[f5993,f335])).
fof(f5993,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X90))),s(bool,happ(s(fun('type.num.num',bool),X88),s('type.num.num',X89)))))) | p(s(bool,X90)) | p(s(bool,'const.ind_type.FCONS_3'(s(bool,X87),s(fun('type.num.num',bool),X88),s('type.num.num','const.num.SUC_1'(s('type.num.num',X89))))))) )),
  inference(superposition,[],[f313,f298])).
fof(f5101,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f5100,f335])).
fof(f5100,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))))) )),
  inference(forward_demodulation,[],[f5099,f334])).
fof(f5099,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))))) )),
  inference(forward_demodulation,[],[f5098,f298])).
fof(f5098,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) )),
  inference(forward_demodulation,[],[f4960,f334])).
fof(f4960,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))))) )),
  inference(unit_resulting_resolution,[],[f298,f331])).
fof(f4819,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X12,fun(X12,bool)),'=_0'),s(X12,X16),s(fun('type.num.num',X12),X14))),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f4818,f298])).
fof(f4818,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X12,fun(X12,bool)),'=_0'),s(X12,X16),s(fun('type.num.num',X12),X14))),s('type.num.num',X15)))) | s(X12,X16) = s(X12,'const.ind_type.FCONS_3'(s(X12,X13),s(fun('type.num.num',X12),X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(forward_demodulation,[],[f4745,f335])).
fof(f4745,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~p(s(bool,happ(s(fun(X12,bool),happ(s(fun(X12,fun(X12,bool)),'=_0'),s(X12,X16))),s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))))) | s(X12,X16) = s(X12,'const.ind_type.FCONS_3'(s(X12,X13),s(fun('type.num.num',X12),X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f330,f298])).
fof(f5154,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) != s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15))) | p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X12,fun(X12,bool)),'=_0'),s(X12,X16),s(fun('type.num.num',X12),X14))),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f5153,f298])).
fof(f5153,plain,(
  ( ! [X14,X12,X15,X13,X16] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X12,fun(X12,bool)),'=_0'),s(X12,X16),s(fun('type.num.num',X12),X14))),s('type.num.num',X15)))) | s(X12,X16) != s(X12,'const.ind_type.FCONS_3'(s(X12,X13),s(fun('type.num.num',X12),X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(forward_demodulation,[],[f5015,f335])).
fof(f5015,plain,(
  ( ! [X14,X12,X15,X13,X16] : (p(s(bool,happ(s(fun(X12,bool),happ(s(fun(X12,fun(X12,bool)),'=_0'),s(X12,X16))),s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))))) | s(X12,X16) != s(X12,'const.ind_type.FCONS_3'(s(X12,X13),s(fun('type.num.num',X12),X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f331,f298])).
fof(f12847,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f12814,f335])).
fof(f12814,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(unit_resulting_resolution,[],[f5063,f318])).
fof(f12848,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f12813,f335])).
fof(f12813,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(unit_resulting_resolution,[],[f5063,f315])).
fof(f288,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK3(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1,X2] : ((s(X0,X2) = s(X0,sK3(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK3(X2,X1,X0)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(ennf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X18] : ! [X24,X25] : (! [X26] : (s(X18,X25) = s(X18,X26) => p(s(bool,happ(s(fun(X18,bool),X24),s(X18,X26))))) => p(s(bool,'|dollar|exists_1'(s(fun(X18,bool),X24)))))),
  file('thm.stackSem.result_distinct|split|4','thm.bool.JRH_INDUCT_UTIL')).
fof(f561,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) )),
  inference(superposition,[],[f288,f271])).
fof(f562,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),X5)))) | s(X3,X7) = s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) )),
  inference(superposition,[],[f288,f320])).
fof(f563,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),X9)))) | s(X8,X11) = s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) )),
  inference(superposition,[],[f288,f284])).
fof(f2512,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))) | s(X0,X2) = s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) )),
  inference(superposition,[],[f565,f271])).
fof(f2513,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X3,bool),X5))) | s(X3,X7) = s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) )),
  inference(superposition,[],[f565,f320])).
fof(f2514,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X8,bool),X9))) | s(X8,X11) = s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) )),
  inference(superposition,[],[f565,f284])).
fof(f2515,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X12,bool),X13))) | s(X12,X15) = s(X12,sK3(X15,sK3(X13,X14,fun(X12,bool)),X12)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f565,f565])).
fof(f2566,plain,(
  ( ! [X125,X123,X124,X122] : (p(s(bool,'|dollar|exists_1'(s(fun(X122,bool),X123)))) | s(X122,X125) = s(X122,sK3(X125,sK3(X123,X124,fun(X122,bool)),X122)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X122,bool),bool),X124)))) )),
  inference(superposition,[],[f288,f565])).
fof(f2634,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | s(bool,X37) = s(bool,'|dollar|exists_1'(s(fun(X35,bool),X36))) | s(X35,X38) = s(X35,sK3(X38,X36,X35))) )),
  inference(subsumption_resolution,[],[f2596,f235])).
fof(f2596,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | s(bool,X37) = s(bool,'|dollar|exists_1'(s(fun(X35,bool),X36))) | s(X35,X38) = s(X35,sK3(X38,X36,X35))) )),
  inference(superposition,[],[f308,f565])).
fof(f2637,plain,(
  ( ! [X107,X105,X106,X104] : (p(s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X104,bool),X105)))))))) | s(X104,X107) = s(X104,sK3(X107,X105,X104))) )),
  inference(subsumption_resolution,[],[f2612,f235])).
fof(f2612,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X104,bool),X105)))))))) | s(X104,X107) = s(X104,sK3(X107,X105,X104))) )),
  inference(superposition,[],[f1802,f565])).
fof(f4449,plain,(
  ( ! [X206,X204,X202,X205,X203] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X202,bool),happ(s(fun('type.num.num',fun(X202,bool)),X204),s('type.num.num',X205))))) | s(X202,X206) = s(X202,sK3(X206,'const.ind_type.FCONS_3'(s(fun(X202,bool),X203),s(fun('type.num.num',fun(X202,bool)),X204),s('type.num.num','const.num.SUC_1'(s('type.num.num',X205)))),X202))) )),
  inference(superposition,[],[f565,f298])).
fof(f4451,plain,(
  ( ! [X212,X216,X215,X213,X214] : (p(s(bool,'|dollar|exists_1'(s(fun(X212,bool),happ(s(fun('type.num.num',fun(X212,bool)),X214),s('type.num.num',X215)))))) | s(X212,X216) = s(X212,sK3(X216,'const.ind_type.FCONS_3'(s(fun(X212,bool),X213),s(fun('type.num.num',fun(X212,bool)),X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',X215)))),X212))) )),
  inference(superposition,[],[f288,f298])).
fof(f23593,plain,(
  ( ! [X325,X323,X324,X326,X322] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X322,bool),happ(s(fun(X323,fun(X322,bool)),X325),s(X323,X324))))) | s(X322,X326) = s(X322,sK3(X326,happ(s(fun(fun(X323,fun(X322,bool)),fun(X322,bool)),'_dstsel_0_x0_1'(s(X323,X324))),s(fun(X323,fun(X322,bool)),X325)),X322))) )),
  inference(superposition,[],[f565,f321])).
fof(f23588,plain,(
  ( ! [X300,X302,X301,X303,X299] : (p(s(bool,'|dollar|exists_1'(s(fun(X299,bool),happ(s(fun(X300,fun(X299,bool)),X302),s(X300,X301)))))) | s(X299,X303) = s(X299,sK3(X303,happ(s(fun(fun(X300,fun(X299,bool)),fun(X299,bool)),'_dstsel_0_x0_1'(s(X300,X301))),s(fun(X300,fun(X299,bool)),X302)),X299))) )),
  inference(superposition,[],[f288,f321])).
fof(f1802,plain,(
  ( ! [X43,X42] : (~p(s(bool,X43)) | p(s(bool,'|dollar|exists_1'(s(fun(X42,bool),'_dst_x0_1'(s(bool,X43))))))) )),
  inference(superposition,[],[f289,f320])).
fof(f1934,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1913,f235])).
fof(f1913,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1802,f365])).
fof(f2559,plain,(
  ( ! [X103,X102,X104] : (~p(s(bool,X102)) | p(s(bool,'|dollar|exists_1'(s(fun(X104,bool),'_dst_x0_1'(s(bool,sK3(X102,X103,bool))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X103)))) )),
  inference(superposition,[],[f1802,f565])).
fof(f2535,plain,(
  ( ! [X33,X34] : (p(s(bool,X33)) | s(bool,'T_0') != s(bool,sK3(X33,X34,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X34)))) )),
  inference(superposition,[],[f245,f565])).
fof(f2536,plain,(
  ( ! [X35,X36] : (~p(s(bool,X35)) | s(bool,'T_0') = s(bool,sK3(X35,X36,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X36)))) )),
  inference(superposition,[],[f246,f565])).
fof(f2539,plain,(
  ( ! [X43,X41,X42] : (p(s(bool,X41)) | p(s(bool,X43)) | s(bool,X43) = s(bool,sK3(X41,X42,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X42)))) )),
  inference(superposition,[],[f305,f565])).
fof(f2541,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,X47)) | ~p(s(bool,X49)) | s(bool,X49) = s(bool,sK3(X47,X48,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X48)))) )),
  inference(superposition,[],[f308,f565])).
fof(f2546,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,X62)) | s(bool,X64) != s(bool,sK3(X62,X63,bool)) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X63)))) )),
  inference(superposition,[],[f368,f565])).
fof(f2548,plain,(
  ( ! [X68,X69,X67] : (p(s(bool,X67)) | s(bool,X69) = s(bool,sK3(X67,X68,bool)) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X68)))) )),
  inference(superposition,[],[f425,f565])).
fof(f2675,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.wordSem.word_loc'(X12),X13) != s('type.wordSem.word_loc'(X12),X15) | s('type.stackSem.result'(X12),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X12),X15))) = s('type.stackSem.result'(X12),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X12),sK3(X13,X14,'type.wordSem.word_loc'(X12))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(X12),bool),X14)))) )),
  inference(superposition,[],[f295,f565])).
fof(f2579,plain,(
  ( ! [X171,X169,X172,X170] : (s('type.wordSem.word_loc'(X169),X170) != s('type.wordSem.word_loc'(X169),X172) | s('type.stackSem.result'(X169),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X169),X172))) = s('type.stackSem.result'(X169),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X169),sK3(X170,X171,'type.wordSem.word_loc'(X169))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(X169),bool),X171)))) )),
  inference(superposition,[],[f293,f565])).
fof(f2575,plain,(
  ( ! [X156,X154,X155,X153] : (s('type.wordSem.word_loc'(X153),X154) != s('type.wordSem.word_loc'(X153),X156) | s('type.stackSem.result'(X153),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X153),X156))) = s('type.stackSem.result'(X153),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X153),sK3(X154,X155,'type.wordSem.word_loc'(X153))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(X153),bool),X155)))) )),
  inference(superposition,[],[f291,f565])).
fof(f2660,plain,(
  ( ! [X6,X7] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X6))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),sK3(X6,X7,'type.wordSem.word_loc'(sK0))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X7)))) )),
  inference(superposition,[],[f2651,f565])).
fof(f2691,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X12))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X14,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),sK3(X12,X13,'type.wordSem.word_loc'(sK0))))),s(X14,X15))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X13)))) )),
  inference(superposition,[],[f2652,f565])).
fof(f2701,plain,(
  ( ! [X10,X11,X9] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X9))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),sK3(X9,X10,'type.wordSem.word_loc'(sK0))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X11),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X10)))) )),
  inference(superposition,[],[f2653,f565])).
fof(f2826,plain,(
  ( ! [X0,X1] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X0))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),X0)),X1,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X1)))) )),
  inference(superposition,[],[f2654,f271])).
fof(f2827,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X3))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(X2,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),X3))),s(X2,X4)),X5,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X5)))) )),
  inference(superposition,[],[f2654,f320])).
fof(f2828,plain,(
  ( ! [X6,X8,X7] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X6))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),X6),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X7),s('type.num.num','const.num.|48|_0')),X8,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X8)))) )),
  inference(superposition,[],[f2654,f284])).
fof(f2829,plain,(
  ( ! [X10,X11,X9] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X9))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(sK3(X9,X10,'type.wordSem.word_loc'(sK0)),X11,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X11))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X10)))) )),
  inference(superposition,[],[f2654,f565])).
fof(f4453,plain,(
  ( ! [X222,X225,X223,X224] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X223),s('type.num.num',X224))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3('const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),X222),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X223),s('type.num.num','const.num.SUC_1'(s('type.num.num',X224)))),X225,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X225)))) )),
  inference(superposition,[],[f2654,f298])).
fof(f23597,plain,(
  ( ! [X344,X346,X343,X345] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X343,'type.wordSem.word_loc'(sK0)),X345),s(X343,X344))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(happ(s(fun(fun(X343,'type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0)),'_dstsel_0_x0_1'(s(X343,X344))),s(fun(X343,'type.wordSem.word_loc'(sK0)),X345)),X346,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X346)))) )),
  inference(superposition,[],[f2654,f321])).
fof(f3838,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.fcp.cart'(bool,X15),X16) != s('type.fcp.cart'(bool,X15),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X18,X19,sK3(X16,X17,'type.fcp.cart'(bool,X15)),X15))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.fcp.cart'(bool,X15),bool),X17)))) )),
  inference(superposition,[],[f302,f565])).
fof(f345,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),sK5(X0)))))) )),
  inference(forward_demodulation,[],[f344,f299])).
fof(f344,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.CONSTR_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),sK5(X0)))))) )),
  inference(forward_demodulation,[],[f304,f299])).
fof(f304,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),sK5(X0)))))) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X0] : p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),sK5(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f142])).
fof(f142,plain,(
  ! [X0] : ? [X1] : p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X0),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.wordSem.word_loc'(X0),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),happ(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'type.ind_type.recspace'('type.wordSem.word_loc'(X0)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('type.wordSem.word_loc'(X0),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X0)),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X0),'type.ind_type.recspace'('type.wordSem.word_loc'(X0))),X1))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X6] : ? [X36] : p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X6),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.wordSem.word_loc'(X6),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X6),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X6),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X6),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.wordSem.word_loc'(X6),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X6),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X6),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1_2'(s(fun(fun('type.wordSem.word_loc'(X6),bool),bool),'?_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.wordSem.word_loc'(X6),bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'=_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_i_0_0'),s(fun('type.wordSem.word_loc'(X6),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x1x0_2'(s(fun('type.wordSem.word_loc'(X6),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'const.ind_type.BOTTOM_0'))))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),happ(s(fun('type.wordSem.word_loc'(X6),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.wordSem.word_loc'(X6),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'const.ind_type.BOTTOM_0'))))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'=_0'),s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),happ(s(fun('type.wordSem.word_loc'(X6),fun(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'type.ind_type.recspace'('type.wordSem.word_loc'(X6)))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('type.wordSem.word_loc'(X6),'const.bool.ARB_0'))),s(fun('type.num.num','type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_dst_x0_1'(s('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'const.ind_type.BOTTOM_0'))))))))))))))),s(fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),fun(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'('type.wordSem.word_loc'(X6)),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),'_i_0_0'))))))),s(fun('type.stackSem.result'(X6),'type.ind_type.recspace'('type.wordSem.word_loc'(X6))),X36))))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_TY_DEF')).
fof(f302,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.fcp.cart'(bool,X0),X1) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X3,X2,X1,X0)))) )),
  inference(cnf_transformation,[],[f219])).
fof(f301,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,sK4(X3,X2,X1,X0))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f3833,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,sK4(X0,X1,happ(s(fun(X2,'type.fcp.cart'(bool,X3)),'_dst_x0_1'(s('type.fcp.cart'(bool,X3),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(X2,X4)),X3)))) )),
  inference(unit_resulting_resolution,[],[f320,f302])).
fof(f3836,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.fcp.cart'(bool,X4),X6) != s('type.fcp.cart'(bool,X4),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X8,X9,happ(s(fun(X5,'type.fcp.cart'(bool,X4)),'_dst_x0_1'(s('type.fcp.cart'(bool,X4),X6))),s(X5,X7)),X4)))) )),
  inference(superposition,[],[f302,f320])).
fof(f3832,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,sK4(X0,X1,happ(s(fun('type.fcp.cart'(bool,X2),'type.fcp.cart'(bool,X2)),'_i_0_0'),s('type.fcp.cart'(bool,X2),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X2)))) )),
  inference(unit_resulting_resolution,[],[f271,f302])).
fof(f3835,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.fcp.cart'(bool,X0),X1) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X2,X3,happ(s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_i_0_0'),s('type.fcp.cart'(bool,X0),X1)),X0)))) )),
  inference(superposition,[],[f302,f271])).
fof(f23624,plain,(
  ( ! [X472,X469,X471,X473,X468,X470] : (s('type.fcp.cart'(bool,X468),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X468),happ(s(fun(X469,'type.fcp.cart'(bool,X468)),X471),s(X469,X470))) | p(s(bool,sK4(X472,X473,happ(s(fun(fun(X469,'type.fcp.cart'(bool,X468)),'type.fcp.cart'(bool,X468)),'_dstsel_0_x0_1'(s(X469,X470))),s(fun(X469,'type.fcp.cart'(bool,X468)),X471)),X468)))) )),
  inference(superposition,[],[f302,f321])).
fof(f3834,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,sK4(X0,X1,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X2),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num','type.fcp.cart'(bool,X2)),X3),s('type.num.num','const.num.|48|_0')),X2)))) )),
  inference(unit_resulting_resolution,[],[f284,f302])).
fof(f3837,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.fcp.cart'(bool,X10),X11) != s('type.fcp.cart'(bool,X10),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,sK4(X13,X14,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X10),X11),s(fun('type.num.num','type.fcp.cart'(bool,X10)),X12),s('type.num.num','const.num.|48|_0')),X10)))) )),
  inference(superposition,[],[f302,f284])).
fof(f4479,plain,(
  ( ! [X344,X346,X341,X343,X345,X342] : (s('type.fcp.cart'(bool,X341),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X341),happ(s(fun('type.num.num','type.fcp.cart'(bool,X341)),X343),s('type.num.num',X344))) | p(s(bool,sK4(X345,X346,'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,X341),X342),s(fun('type.num.num','type.fcp.cart'(bool,X341)),X343),s('type.num.num','const.num.SUC_1'(s('type.num.num',X344)))),X341)))) )),
  inference(superposition,[],[f302,f298])).
fof(f23722,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK7('?_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f350,f23307,f1037])).
fof(f23723,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK7('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f23307,f1802])).
fof(f23724,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK7('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f23307,f4218])).
fof(f23615,plain,(
  ( ! [X422,X424,X426,X423,X425] : (s('type.stackSem.result'(X422),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X422),X426))) != s('type.stackSem.result'(X422),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X422),happ(s(fun(X423,'type.wordSem.word_loc'(X422)),X425),s(X423,X424))))) | s('type.wordSem.word_loc'(X422),X426) = s('type.wordSem.word_loc'(X422),happ(s(fun(fun(X423,'type.wordSem.word_loc'(X422)),'type.wordSem.word_loc'(X422)),'_dstsel_0_x0_1'(s(X423,X424))),s(fun(X423,'type.wordSem.word_loc'(X422)),X425)))) )),
  inference(superposition,[],[f294,f321])).
fof(f23611,plain,(
  ( ! [X405,X403,X404,X406,X402] : (s('type.stackSem.result'(X402),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X402),X406))) != s('type.stackSem.result'(X402),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X402),happ(s(fun(X403,'type.wordSem.word_loc'(X402)),X405),s(X403,X404))))) | s('type.wordSem.word_loc'(X402),X406) = s('type.wordSem.word_loc'(X402),happ(s(fun(fun(X403,'type.wordSem.word_loc'(X402)),'type.wordSem.word_loc'(X402)),'_dstsel_0_x0_1'(s(X403,X404))),s(fun(X403,'type.wordSem.word_loc'(X402)),X405)))) )),
  inference(superposition,[],[f292,f321])).
fof(f23607,plain,(
  ( ! [X383,X385,X382,X384,X386] : (s('type.stackSem.result'(X382),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X382),X386))) != s('type.stackSem.result'(X382),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X382),happ(s(fun(X383,'type.wordSem.word_loc'(X382)),X385),s(X383,X384))))) | s('type.wordSem.word_loc'(X382),X386) = s('type.wordSem.word_loc'(X382),happ(s(fun(fun(X383,'type.wordSem.word_loc'(X382)),'type.wordSem.word_loc'(X382)),'_dstsel_0_x0_1'(s(X383,X384))),s(fun(X383,'type.wordSem.word_loc'(X382)),X385)))) )),
  inference(superposition,[],[f290,f321])).
fof(f23601,plain,(
  ( ! [X360,X359,X361] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun(X359,'type.wordSem.word_loc'(sK0)),X361),s(X359,X360))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(fun(X359,'type.wordSem.word_loc'(sK0)),'type.wordSem.word_loc'(sK0)),'_dstsel_0_x0_1'(s(X359,X360))),s(fun(X359,'type.wordSem.word_loc'(sK0)),X361)))) )),
  inference(superposition,[],[f2643,f321])).
fof(f23307,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK7('?_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f22136,f2633])).
fof(f23322,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),sK7('?_1',fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK7('?_1',fun('type.num.num',bool)),'type.num.num'))))))) )),
  inference(unit_resulting_resolution,[],[f298,f22136,f368])).
fof(f23326,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),sK7('?_1',fun(X0,bool))),s(X0,sK7(sK7('?_1',fun(X0,bool)),X0))))) )),
  inference(unit_resulting_resolution,[],[f350,f22136,f1037])).
fof(f23327,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK7('?_1',fun(X1,bool))),s(X1,sK7(sK7('?_1',fun(X1,bool)),X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f22136,f1802])).
fof(f23328,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK7('?_1',fun(X1,bool))),s(X1,sK7(sK7('?_1',fun(X1,bool)),X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f22136,f4218])).
fof(f23292,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,happ(s(fun(fun(X36,bool),bool),'?_1'),s(fun(X36,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f23194,f235])).
fof(f23194,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,happ(s(fun(fun(X36,bool),bool),'?_1'),s(fun(X36,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f368,f21706])).
fof(f23150,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f21706,f365])).
fof(f22958,plain,(
  ( ! [X127,X128,X129] : (s(bool,X127) != s(bool,'|dollar|exists_1'(s(fun(fun(X129,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,sK3(X127,X128,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X128)))) )),
  inference(superposition,[],[f22019,f565])).
fof(f22956,plain,(
  ( ! [X121,X122,X120] : (s(bool,X120) != s(bool,'|dollar|exists_1'(s(fun(fun(X122,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X120),s(fun('type.num.num',bool),X121),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f22019,f284])).
fof(f22955,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,X117) != s(bool,'|dollar|exists_1'(s(fun(fun(X119,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(X116,bool),'_dst_x0_1'(s(bool,X117))),s(X116,X118)))) )),
  inference(superposition,[],[f22019,f320])).
fof(f22954,plain,(
  ( ! [X114,X115] : (s(bool,X114) != s(bool,'|dollar|exists_1'(s(fun(fun(X115,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X114)))) )),
  inference(superposition,[],[f22019,f271])).
fof(f22136,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(X0,bool),sK7('?_1',fun(X0,bool))),s(X0,sK7(sK7('?_1',fun(X0,bool)),X0)))))) )),
  inference(unit_resulting_resolution,[],[f22066,f311])).
fof(f22155,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK7('?_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f350,f22066,f1037])).
fof(f22156,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK7('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f22066,f1802])).
fof(f22157,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK7('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f22066,f4218])).
fof(f22066,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK7('?_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f21688,f311])).
fof(f22085,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f350,f21688,f1037])).
fof(f22086,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f21688,f1802])).
fof(f22087,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f21688,f4218])).
fof(f22019,plain,(
  ( ! [X33,X32] : (s(bool,X33) != s(bool,'|dollar|exists_1'(s(fun(fun(X32,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f21939,f235])).
fof(f21939,plain,(
  ( ! [X33,X32] : (~p(s(bool,'T_0')) | s(bool,X33) != s(bool,'|dollar|exists_1'(s(fun(fun(X32,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f368,f21844])).
fof(f21844,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f350,f21689,f1037])).
fof(f21845,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f21689,f1802])).
fof(f21846,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f21689,f4218])).
fof(f21688,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'?_1'))))) )),
  inference(unit_resulting_resolution,[],[f21584,f312])).
fof(f21689,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'?_1'))))) )),
  inference(unit_resulting_resolution,[],[f21584,f2633])).
fof(f21706,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f350,f21584,f1037])).
fof(f21707,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f21584,f1802])).
fof(f21708,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f21584,f4218])).
fof(f21584,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f235,f4218])).
fof(f14784,plain,(
  ( ! [X50,X51,X49] : (s(bool,X51) != s(bool,'|dollar|exists_1'(s(fun(X49,bool),happ(s(fun(X49,fun(X49,bool)),'=_0'),s(X49,X50))))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(subsumption_resolution,[],[f14703,f235])).
fof(f14703,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | s(bool,X51) != s(bool,'|dollar|exists_1'(s(fun(X49,bool),happ(s(fun(X49,fun(X49,bool)),'=_0'),s(X49,X50))))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f368,f13113])).
fof(f14642,plain,(
  ( ! [X41,X40] : (s(bool,X40) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f13113,f365])).
fof(f14607,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f14539,f235])).
fof(f14539,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f368,f12876])).
fof(f14128,plain,(
  ( ! [X30,X31] : (s(bool,X31) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X30))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f14056,f235])).
fof(f14056,plain,(
  ( ! [X30,X31] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X30))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f368,f3728])).
fof(f13998,plain,(
  ( ! [X24,X25] : (s(bool,X24) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X24))))) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f3728,f365])).
fof(f13972,plain,(
  ( ! [X30,X31] : (s(bool,X31) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X30))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f13901,f235])).
fof(f13901,plain,(
  ( ! [X30,X31] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X30))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f368,f3265])).
fof(f13113,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1)))))) )),
  inference(unit_resulting_resolution,[],[f350,f12928,f1037])).
fof(f13114,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),happ(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,X2))))))))))) )),
  inference(unit_resulting_resolution,[],[f12928,f1802])).
fof(f12928,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f5104,f2633])).
fof(f12941,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f298,f5104,f368])).
fof(f12945,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1)))) )),
  inference(unit_resulting_resolution,[],[f350,f5104,f1037])).
fof(f12946,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),happ(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,X2))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f5104,f1802])).
fof(f12914,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f12885,f342])).
fof(f12885,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f12805,f1108])).
fof(f12876,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f350,f12805,f1037])).
fof(f12877,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f12805,f1802])).
fof(f12857,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f12830,f342])).
fof(f12830,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X6)) )),
  inference(superposition,[],[f5063,f1108])).
fof(f12805,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))))))),
  inference(unit_resulting_resolution,[],[f5063,f2633])).
fof(f12818,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f298,f5063,f368])).
fof(f12822,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f350,f5063,f1037])).
fof(f12823,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f5063,f1802])).
fof(f4694,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f350,f330])).
fof(f4699,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))))),
  inference(unit_resulting_resolution,[],[f350,f330])).
fof(f5920,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f342,f342,f313])).
fof(f6473,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f235,f342,f316])).
fof(f1811,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK3(X6,X5,X4)))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1792,f235])).
fof(f1792,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK3(X6,X5,X4)))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f289,f365])).
fof(f289,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK3(X2,X1,X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f213])).
fof(f1804,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X5),s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3)))))) )),
  inference(forward_demodulation,[],[f1778,f320])).
fof(f1778,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X5),s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6))))))) )),
  inference(superposition,[],[f289,f320])).
fof(f1803,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(forward_demodulation,[],[f1777,f271])).
fof(f1777,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))))))) )),
  inference(superposition,[],[f289,f271])).
fof(f1805,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),X9)))) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8)))))) )),
  inference(forward_demodulation,[],[f1779,f284])).
fof(f1779,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))))) | p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f289,f284])).
fof(f2565,plain,(
  ( ! [X121,X118,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),X119),s(X118,sK3(X121,sK3(X119,X120,fun(X118,bool)),X118))))) | p(s(bool,'|dollar|exists_1'(s(fun(X118,bool),sK3(X119,X120,fun(X118,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X118,bool),bool),X120)))) )),
  inference(superposition,[],[f289,f565])).
fof(f5104,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f5103,f334])).
fof(f5103,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f5102,f284])).
fof(f5102,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f4959,f334])).
fof(f4959,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0'))))),s(X0,X1))))) )),
  inference(unit_resulting_resolution,[],[f284,f331])).
fof(f1782,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,X7)))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X6)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK3(X5,X6,bool))) )),
  inference(superposition,[],[f289,f365])).
fof(f1781,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X3)))) | s(bool,X4) = s(bool,sK3(X2,X3,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f289,f365])).
fof(f5079,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))))),
  inference(forward_demodulation,[],[f5078,f334])).
fof(f5078,plain,(
  p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))))),
  inference(forward_demodulation,[],[f5077,f3854])).
fof(f5077,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,sK4(X0,X1,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X2)))))) )),
  inference(forward_demodulation,[],[f4967,f334])).
fof(f4967,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,sK4(X0,X1,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X2)))),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f3854,f331])).
fof(f5069,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f5068,f334])).
fof(f5068,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f5067,f276])).
fof(f5067,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f4971,f334])).
fof(f4971,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f276,f331])).
fof(f5075,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f5074,f334])).
fof(f5074,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f5073,f275])).
fof(f5073,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f4969,f334])).
fof(f4969,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f275,f331])).
fof(f5072,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f5071,f334])).
fof(f5071,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f5070,f274])).
fof(f5070,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),'_dst_x1x0_2'(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f4970,f334])).
fof(f4970,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.stackSem.result'(X0),bool),happ(s(fun('type.stackSem.result'(X0),fun('type.stackSem.result'(X0),bool)),'=_0'),s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X0),X1))))),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f274,f331])).
fof(f5063,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f5062,f334])).
fof(f5062,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f5061,f273])).
fof(f5061,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'))))))) )),
  inference(forward_demodulation,[],[f4973,f334])).
fof(f4973,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f273,f331])).
fof(f5173,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(subsumption_resolution,[],[f5050,f342])).
fof(f5050,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(superposition,[],[f331,f242])).
fof(f4838,plain,(
  ( ! [X6,X4,X5,X3] : (s(X3,X4) = s(X3,X5) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),happ(s(fun(X3,fun(X3,bool)),'=_0'),s(X3,X4))),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f4781,f235])).
fof(f4781,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(X3,X4) = s(X3,X5) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),happ(s(fun(X3,fun(X3,bool)),'=_0'),s(X3,X4))),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f330,f365])).
fof(f4471,plain,(
  ( ! [X302,X304,X301,X303,X305] : (s('type.stackSem.result'(X301),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X301),X305))) != s('type.stackSem.result'(X301),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X301),happ(s(fun('type.num.num','type.wordSem.word_loc'(X301)),X303),s('type.num.num',X304))))) | s('type.wordSem.word_loc'(X301),X305) = s('type.wordSem.word_loc'(X301),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X301),X302),s(fun('type.num.num','type.wordSem.word_loc'(X301)),X303),s('type.num.num','const.num.SUC_1'(s('type.num.num',X304)))))) )),
  inference(superposition,[],[f294,f298])).
fof(f4467,plain,(
  ( ! [X282,X285,X281,X283,X284] : (s('type.stackSem.result'(X281),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X281),X285))) != s('type.stackSem.result'(X281),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X281),happ(s(fun('type.num.num','type.wordSem.word_loc'(X281)),X283),s('type.num.num',X284))))) | s('type.wordSem.word_loc'(X281),X285) = s('type.wordSem.word_loc'(X281),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X281),X282),s(fun('type.num.num','type.wordSem.word_loc'(X281)),X283),s('type.num.num','const.num.SUC_1'(s('type.num.num',X284)))))) )),
  inference(superposition,[],[f292,f298])).
fof(f4463,plain,(
  ( ! [X261,X263,X265,X262,X264] : (s('type.stackSem.result'(X261),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X261),X265))) != s('type.stackSem.result'(X261),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X261),happ(s(fun('type.num.num','type.wordSem.word_loc'(X261)),X263),s('type.num.num',X264))))) | s('type.wordSem.word_loc'(X261),X265) = s('type.wordSem.word_loc'(X261),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X261),X262),s(fun('type.num.num','type.wordSem.word_loc'(X261)),X263),s('type.num.num','const.num.SUC_1'(s('type.num.num',X264)))))) )),
  inference(superposition,[],[f290,f298])).
fof(f4457,plain,(
  ( ! [X239,X240,X238] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X239),s('type.num.num',X240))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),X238),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X239),s('type.num.num','const.num.SUC_1'(s('type.num.num',X240)))))) )),
  inference(superposition,[],[f2643,f298])).
fof(f4160,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f4108,f235])).
fof(f4108,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f368,f3001])).
fof(f4075,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f3001,f365])).
fof(f4021,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,'|dollar|exists_1'(s(fun(X2,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2082,f365])).
fof(f4020,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,'|dollar|exists_1'(s(fun(X75,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,sK3(X73,X74,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) )),
  inference(superposition,[],[f2082,f565])).
fof(f4019,plain,(
  ( ! [X70,X72,X71] : (s(bool,X70) != s(bool,'|dollar|exists_1'(s(fun(X72,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X70),s(fun('type.num.num',bool),X71),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2082,f284])).
fof(f4018,plain,(
  ( ! [X68,X66,X69,X67] : (s(bool,X67) != s(bool,'|dollar|exists_1'(s(fun(X69,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun(X66,bool),'_dst_x0_1'(s(bool,X67))),s(X66,X68)))) )),
  inference(superposition,[],[f2082,f320])).
fof(f4017,plain,(
  ( ! [X64,X65] : (s(bool,X64) != s(bool,'|dollar|exists_1'(s(fun(X65,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X64)))) )),
  inference(superposition,[],[f2082,f271])).
fof(f3964,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,X67) != s(bool,sK4(X64,X65,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X66)) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f3917,f235])).
fof(f3917,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,'T_0')) | s(bool,X67) != s(bool,sK4(X64,X65,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X66)) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f368,f3854])).
fof(f3854,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK4(X0,X1,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X2))) )),
  inference(unit_resulting_resolution,[],[f350,f3839,f1037])).
fof(f3855,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,sK4(X1,X2,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X3)))))))) )),
  inference(unit_resulting_resolution,[],[f3839,f1802])).
fof(f3839,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,sK4(X0,X1,'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X2)))) )),
  inference(equality_resolution,[],[f302])).
fof(f3728,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0)))))) )),
  inference(unit_resulting_resolution,[],[f350,f3602,f1037])).
fof(f3729,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))))))))))) )),
  inference(unit_resulting_resolution,[],[f3602,f1802])).
fof(f3602,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))))))) )),
  inference(unit_resulting_resolution,[],[f3366,f2633])).
fof(f3616,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f350,f3366,f1037])).
fof(f3617,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))),s(bool,'T_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f3366,f1802])).
fof(f3597,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.fcp.cart'(bool,X7),X6) = s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X8) = s(bool,sK4(X4,X5,X6,X7)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f3587,f235])).
fof(f3587,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X7),X6) = s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X8) = s(bool,sK4(X4,X5,X6,X7)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f301,f365])).
fof(f3584,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3557,f342])).
fof(f3557,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f3416,f1108])).
fof(f3540,plain,(
  ( ! [X4] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X4)))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f3416,f242])).
fof(f3538,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0)))))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f3416,f1108])).
fof(f3536,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f350,f3416,f1037])).
fof(f3537,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f3416,f1802])).
fof(f3416,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f3045,f2633])).
fof(f3431,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X1))))))))) )),
  inference(unit_resulting_resolution,[],[f3045,f1802])).
fof(f3366,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f235,f318])).
fof(f3265,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0)))))) )),
  inference(unit_resulting_resolution,[],[f350,f3139,f1037])).
fof(f3266,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))))))))))) )),
  inference(unit_resulting_resolution,[],[f3139,f1802])).
fof(f3139,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))))))) )),
  inference(unit_resulting_resolution,[],[f2832,f2633])).
fof(f3152,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f350,f2832,f1037])).
fof(f3153,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'T_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f2832,f1802])).
fof(f3045,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X0))))) )),
  inference(unit_resulting_resolution,[],[f342,f317])).
fof(f3043,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3018,f342])).
fof(f3018,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f2882,f1108])).
fof(f3003,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0)))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f2882,f365])).
fof(f3001,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0')))))),
  inference(unit_resulting_resolution,[],[f350,f2882,f1037])).
fof(f3002,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f2882,f1802])).
fof(f2882,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f2707,f2633])).
fof(f2895,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f350,f2707,f1037])).
fof(f2896,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X1))))))))) )),
  inference(unit_resulting_resolution,[],[f2707,f1802])).
fof(f2832,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f235,f315])).
fof(f2707,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0))))) )),
  inference(unit_resulting_resolution,[],[f235,f314])).
fof(f2654,plain,(
  ( ! [X6,X7] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X6))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),sK3(X6,X7,'type.wordSem.word_loc'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(sK0),bool),X7)))) )),
  inference(superposition,[],[f2643,f565])).
fof(f2653,plain,(
  ( ! [X4,X5] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X4))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),X4),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2643,f284])).
fof(f2652,plain,(
  ( ! [X2,X3,X1] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X2))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),X2))),s(X1,X3)))) )),
  inference(superposition,[],[f2643,f320])).
fof(f2651,plain,(
  ( ! [X0] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X0))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),X0)))) )),
  inference(superposition,[],[f2643,f271])).
fof(f2643,plain,(
  ( ! [X0] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),X0))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),X0)) )),
  inference(superposition,[],[f294,f234])).
fof(f2642,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.stackSem.result'(X12),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X12),X13))) != s('type.stackSem.result'(X12),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X12),X15))) | s('type.wordSem.word_loc'(X12),X15) = s('type.wordSem.word_loc'(X12),sK3(X13,X14,'type.wordSem.word_loc'(X12))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(X12),bool),X14)))) )),
  inference(superposition,[],[f294,f565])).
fof(f2641,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.stackSem.result'(X8),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X8),X9))) != s('type.stackSem.result'(X8),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X8),X11))) | s('type.wordSem.word_loc'(X8),X11) = s('type.wordSem.word_loc'(X8),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X8),X9),s(fun('type.num.num','type.wordSem.word_loc'(X8)),X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f294,f284])).
fof(f2640,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.stackSem.result'(X3),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X3),X5))) != s('type.stackSem.result'(X3),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X3),X7))) | s('type.wordSem.word_loc'(X3),X7) = s('type.wordSem.word_loc'(X3),happ(s(fun(X4,'type.wordSem.word_loc'(X3)),'_dst_x0_1'(s('type.wordSem.word_loc'(X3),X5))),s(X4,X6)))) )),
  inference(superposition,[],[f294,f320])).
fof(f2639,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X2) = s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.wordSem.word_loc'(X0)),'_i_0_0'),s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(superposition,[],[f294,f271])).
fof(f2635,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X53) != s(bool,'|dollar|exists_1'(s(fun(X51,bool),X52))) | s(bool,'T_0') = s(bool,X53) | s(X51,X54) = s(X51,sK3(X54,X52,X51))) )),
  inference(subsumption_resolution,[],[f2599,f235])).
fof(f2599,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | s(bool,X53) != s(bool,'|dollar|exists_1'(s(fun(X51,bool),X52))) | s(bool,'T_0') = s(bool,X53) | s(X51,X54) = s(X51,sK3(X54,X52,X51))) )),
  inference(superposition,[],[f368,f565])).
fof(f2577,plain,(
  ( ! [X163,X161,X164,X162] : (s('type.stackSem.result'(X161),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X161),X162))) != s('type.stackSem.result'(X161),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X161),X164))) | s('type.wordSem.word_loc'(X161),X164) = s('type.wordSem.word_loc'(X161),sK3(X162,X163,'type.wordSem.word_loc'(X161))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(X161),bool),X163)))) )),
  inference(superposition,[],[f292,f565])).
fof(f2573,plain,(
  ( ! [X146,X147,X145,X148] : (s('type.stackSem.result'(X145),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X145),X146))) != s('type.stackSem.result'(X145),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X145),X148))) | s('type.wordSem.word_loc'(X145),X148) = s('type.wordSem.word_loc'(X145),sK3(X146,X147,'type.wordSem.word_loc'(X145))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.wordSem.word_loc'(X145),bool),X147)))) )),
  inference(superposition,[],[f290,f565])).
fof(f2549,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,X70) != s(bool,'const.bool.DATATYPE_1'(s(X72,X73))) | s(bool,'T_0') = s(bool,sK3(X70,X71,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X71)))) )),
  inference(superposition,[],[f557,f565])).
fof(f2503,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X9))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK3(X8,X9,bool))) )),
  inference(superposition,[],[f565,f365])).
fof(f2502,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X6))) | s(bool,X7) = s(bool,sK3(X5,X6,bool)) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f565,f365])).
fof(f2442,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1400,f365])).
fof(f2152,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.stackSem.result'(X8),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X8),X9))) != s('type.stackSem.result'(X8),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X8),X11))) | s('type.wordSem.word_loc'(X8),X11) = s('type.wordSem.word_loc'(X8),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X8),X9),s(fun('type.num.num','type.wordSem.word_loc'(X8)),X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f292,f284])).
fof(f2151,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.stackSem.result'(X3),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X3),X5))) != s('type.stackSem.result'(X3),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X3),X7))) | s('type.wordSem.word_loc'(X3),X7) = s('type.wordSem.word_loc'(X3),happ(s(fun(X4,'type.wordSem.word_loc'(X3)),'_dst_x0_1'(s('type.wordSem.word_loc'(X3),X5))),s(X4,X6)))) )),
  inference(superposition,[],[f292,f320])).
fof(f2150,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X2) = s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.wordSem.word_loc'(X0)),'_i_0_0'),s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(superposition,[],[f292,f271])).
fof(f2082,plain,(
  ( ! [X19,X20] : (s(bool,X20) != s(bool,'|dollar|exists_1'(s(fun(X19,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f2047,f235])).
fof(f2047,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s(bool,X20) != s(bool,'|dollar|exists_1'(s(fun(X19,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f368,f1960])).
fof(f2020,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1960,f365])).
fof(f1960,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f350,f1911,f1037])).
fof(f1961,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f1911,f1802])).
fof(f1911,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f235,f1802])).
fof(f1906,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.stackSem.result'(X8),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X8),X9))) != s('type.stackSem.result'(X8),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X8),X11))) | s('type.wordSem.word_loc'(X8),X11) = s('type.wordSem.word_loc'(X8),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(X8),X9),s(fun('type.num.num','type.wordSem.word_loc'(X8)),X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f290,f284])).
fof(f1905,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.stackSem.result'(X3),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X3),X5))) != s('type.stackSem.result'(X3),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X3),X7))) | s('type.wordSem.word_loc'(X3),X7) = s('type.wordSem.word_loc'(X3),happ(s(fun(X4,'type.wordSem.word_loc'(X3)),'_dst_x0_1'(s('type.wordSem.word_loc'(X3),X5))),s(X4,X6)))) )),
  inference(superposition,[],[f290,f320])).
fof(f1904,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X2) = s('type.wordSem.word_loc'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.wordSem.word_loc'(X0)),'_i_0_0'),s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(superposition,[],[f290,f271])).
fof(f1813,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'|dollar|exists_1'(s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,sK3(X22,X21,X20))))) )),
  inference(subsumption_resolution,[],[f1812,f235])).
fof(f1812,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,sK3(X22,X21,X20))))) )),
  inference(forward_demodulation,[],[f1796,f270])).
fof(f1796,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X23,X24)))) | p(s(bool,'|dollar|exists_1'(s(fun(X20,bool),X21)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,sK3(X22,X21,X20))))) )),
  inference(superposition,[],[f289,f1071])).
fof(f1788,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X25),s(bool,X26)))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X25)))) | s(bool,'F_0') = s(bool,X26) | s(bool,'F_0') = s(bool,sK3(X24,X25,bool))) )),
  inference(superposition,[],[f289,f1108])).
fof(f1786,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X19)))) | s(bool,X20) = s(bool,sK3(X18,X19,bool)) | s(bool,'F_0') = s(bool,X20)) )),
  inference(superposition,[],[f289,f1108])).
fof(f1806,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X15)))) | s(bool,'F_0') = s(bool,sK3(X14,X15,bool))) )),
  inference(forward_demodulation,[],[f1785,f270])).
fof(f1785,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.bool.DATATYPE_1'(s(X16,X17)))))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X15)))) | s(bool,'F_0') = s(bool,sK3(X14,X15,bool))) )),
  inference(superposition,[],[f289,f1071])).
fof(f1780,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X1)))) | s(bool,'T_0') = s(bool,sK3(X0,X1,bool))) )),
  inference(superposition,[],[f289,f242])).
fof(f1773,plain,(
  ( ! [X35,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,'F_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f1745,f350])).
fof(f1745,plain,(
  ( ! [X35,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) )),
  inference(superposition,[],[f1197,f1108])).
fof(f1400,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f350,f1108])).
fof(f1268,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f1108,f1108])).
fof(f1197,plain,(
  ( ! [X43,X46] : (s(bool,X43) != s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f1196,f235])).
fof(f1196,plain,(
  ( ! [X43,X46] : (~p(s(bool,'T_0')) | s(bool,X43) != s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X43)) )),
  inference(forward_demodulation,[],[f1128,f270])).
fof(f1128,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X44,X45)))) | s(bool,X43) != s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X43)) )),
  inference(superposition,[],[f368,f1071])).
fof(f1108,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f1071,f1071])).
fof(f1065,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1051,f235])).
fof(f1051,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1037,f365])).
fof(f981,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f751,f235])).
fof(f751,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f368,f365])).
fof(f980,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f750,f235])).
fof(f750,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f308,f365])).
fof(f742,plain,(
  ( ! [X45,X44] : (s(bool,X44) = s(bool,'const.bool.DATATYPE_1'(s(bool,X44))) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f270,f365])).
fof(f658,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X24) = s(bool,'const.ind_type.FCONS_3'(s(bool,X22),s(fun('type.num.num',bool),X23),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f365,f284])).
fof(f657,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X21) = s(bool,happ(s(fun(X18,bool),'_dst_x0_1'(s(bool,X19))),s(X18,X20))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f365,f320])).
fof(f656,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X16))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f365,f271])).
fof(f646,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f365,f365])).
fof(f633,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X29),s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f365,f284])).
fof(f632,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(X25,bool),'_dst_x0_1'(s(bool,X26))),s(X25,X27)))) )),
  inference(superposition,[],[f365,f320])).
fof(f631,plain,(
  ( ! [X24,X23] : (s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X23)))) )),
  inference(superposition,[],[f365,f271])).
fof(f575,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X18) != s(bool,'const.bool.DATATYPE_1'(s(X20,X21))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X18),s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f557,f284])).
fof(f574,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,X14) != s(bool,'const.bool.DATATYPE_1'(s(X16,X17))) | s(bool,'T_0') = s(bool,happ(s(fun(X13,bool),'_dst_x0_1'(s(bool,X14))),s(X13,X15)))) )),
  inference(superposition,[],[f557,f320])).
fof(f573,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) != s(bool,'const.bool.DATATYPE_1'(s(X11,X12))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X10)))) )),
  inference(superposition,[],[f557,f271])).
fof(f565,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK3(X2,X1,X0)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) )),
  inference(subsumption_resolution,[],[f564,f342])).
fof(f564,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK3(X2,X1,X0)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) )),
  inference(superposition,[],[f288,f242])).
fof(f557,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) != s(bool,'const.bool.DATATYPE_1'(s(X0,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f548,f235])).
fof(f548,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X2) != s(bool,'const.bool.DATATYPE_1'(s(X0,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f368,f270])).
fof(f425,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f419,f342])).
fof(f419,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f305,f242])).
fof(f368,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f249,f242])).
fof(f365,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f242,f242])).
fof(f350,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f342,f245])).
fof(f338,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x01x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))) )),
  inference(cnf_transformation,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x01x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))),
  inference(flattening,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x01x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X9,X37,X10,X39,X11] : ! [X12,X13,X38,X14] : s(fun(X10,X9),'_dst_x0x1x1_3'(s(fun(X37,fun(X39,X9)),X12),s(fun(X10,X37),X13),s(fun(X10,X39),happ(s(fun(X11,fun(X10,X39)),X38),s(X11,X14))))) = s(fun(X10,X9),happ(s(fun(X11,fun(X10,X9)),'_dst_x00x01x11_3'(s(fun(X37,fun(X39,X9)),X12),s(fun(X10,X37),X13),s(fun(X11,fun(X10,X39)),X38))),s(X11,X14)))),
  file('thm.stackSem.result_distinct|split|4','_dst_x00x01x11_ax')).
fof(f337,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X4,X0)),X5),s(X1,happ(s(fun(X2,X1),X6),s(X2,X8))),s(fun(X3,X4),X7))) = s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X4,X0)),X5),s(fun(X2,X1),X6),s(fun(X3,X4),X7))),s(X2,X8)))) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X4,X0)),X5),s(X1,happ(s(fun(X2,X1),X6),s(X2,X8))),s(fun(X3,X4),X7))) = s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X4,X0)),X5),s(fun(X2,X1),X6),s(fun(X3,X4),X7))),s(X2,X8)))),
  inference(flattening,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X4,X0)),X5),s(X1,happ(s(fun(X2,X1),X6),s(X2,X8))),s(fun(X3,X4),X7))) = s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X4,X0)),X5),s(fun(X2,X1),X6),s(fun(X3,X4),X7))),s(X2,X8)))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X9,X37,X11,X10,X39] : ! [X12,X13,X38,X14] : s(fun(X10,X9),'_dst_x0x0x1_3'(s(fun(X37,fun(X39,X9)),X12),s(X37,happ(s(fun(X11,X37),X13),s(X11,X14))),s(fun(X10,X39),X38))) = s(fun(X10,X9),happ(s(fun(X11,fun(X10,X9)),'_dst_x00x10x01_3'(s(fun(X37,fun(X39,X9)),X12),s(fun(X11,X37),X13),s(fun(X10,X39),X38))),s(X11,X14)))),
  file('thm.stackSem.result_distinct|split|4','_dst_x00x10x01_ax')).
fof(f336,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X3,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X2,X0)),X4),s(fun(X3,X1),X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,happ(s(fun(X3,X1),X5),s(X3,X7))))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X2,X0)),X4),s(fun(X3,X1),X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,happ(s(fun(X3,X1),X5),s(X3,X7))))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(flattening,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X2,X0)),X4),s(fun(X3,X1),X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,happ(s(fun(X3,X1),X5),s(X3,X7))))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X9,X10,X37,X11] : ! [X12,X13,X38,X14] : s(X9,happ(s(fun(X11,X9),'_dst_x0x1x1_3'(s(fun(X10,fun(X37,X9)),X12),s(fun(X11,X10),X13),s(fun(X11,X37),X38))),s(X11,X14))) = s(X9,happ(s(fun(X37,X9),happ(s(fun(X10,fun(X37,X9)),X12),s(X10,happ(s(fun(X11,X10),X13),s(X11,X14))))),s(X37,happ(s(fun(X11,X37),X38),s(X11,X14)))))),
  file('thm.stackSem.result_distinct|split|4','_dst_x0x1x1_ax')).
fof(f335,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))) )),
  inference(cnf_transformation,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(flattening,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X9,X10,X37,X11] : ! [X12,X13,X38,X14] : s(X9,happ(s(fun(X11,X9),'_dst_x0x0x1_3'(s(fun(X10,fun(X37,X9)),X12),s(X10,X13),s(fun(X11,X37),X38))),s(X11,X14))) = s(X9,happ(s(fun(X37,X9),happ(s(fun(X10,fun(X37,X9)),X12),s(X10,X13))),s(X37,happ(s(fun(X11,X37),X38),s(X11,X14)))))),
  file('thm.stackSem.result_distinct|split|4','_dst_x0x0x1_ax')).
fof(f347,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X2))),s(X0,X1))),s('type.num.num',X3)))) )),
  inference(backward_demodulation,[],[f334,f300])).
fof(f346,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(X1,X5))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))) )),
  inference(backward_demodulation,[],[f334,f319])).
fof(f334,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X9,X11,X10] : ! [X12,X13,X14] : s(X9,happ(s(fun(X10,X9),happ(s(fun(X11,fun(X10,X9)),X12),s(X11,X14))),s(X10,X13))) = s(X9,happ(s(fun(X11,X9),'_dst_x1x0_2'(s(fun(X11,fun(X10,X9)),X12),s(X10,X13))),s(X11,X14)))),
  file('thm.stackSem.result_distinct|split|4','_dst_x1x0_ax')).
fof(f333,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(flattening,[],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10,X11] : ! [X12,X13,X14] : s(X9,happ(s(fun(X10,X9),X12),s(X10,happ(s(fun(X11,X10),X13),s(X11,X14))))) = s(X9,happ(s(fun(X11,X9),'_dst_x0x1_2'(s(fun(X10,X9),X12),s(fun(X11,X10),X13))),s(X11,X14)))),
  file('thm.stackSem.result_distinct|split|4','_dst_x0x1_ax')).
fof(f332,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(fun(X1,X0),X0),happ(s(fun(X2,fun(fun(X1,X0),X0)),'_dstsel_1_x10_1'(s(fun(X2,X1),X3))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(fun(X1,X0),X0),happ(s(fun(X2,fun(fun(X1,X0),X0)),'_dstsel_1_x10_1'(s(fun(X2,X1),X3))),s(X2,X4)))),
  inference(flattening,[],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(fun(X1,X0),X0),happ(s(fun(X2,fun(fun(X1,X0),X0)),'_dstsel_1_x10_1'(s(fun(X2,X1),X3))),s(X2,X4)))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X9,X10,X11] : ! [X13,X14] : s(fun(fun(X10,X9),X9),'_dstsel_0_x0_1'(s(X10,happ(s(fun(X11,X10),X13),s(X11,X14))))) = s(fun(fun(X10,X9),X9),happ(s(fun(X11,fun(fun(X10,X9),X9)),'_dstsel_1_x10_1'(s(fun(X11,X10),X13))),s(X11,X14)))),
  file('thm.stackSem.result_distinct|split|4','_dstsel_1_x10_ax')).
fof(f329,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X4),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X4),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X4),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X18,X6] : ! [X8,X20,X31,X32,X33,X34] : s(X18,happ(s(fun('type.wordSem.word_loc'(X6),X18),X31),s('type.wordSem.word_loc'(X6),X8))) = s(X18,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X8))),s(fun('type.wordSem.word_loc'(X6),X18),X20),s(fun('type.wordSem.word_loc'(X6),X18),X31),s(fun('type.wordSem.word_loc'(X6),X18),X32),s(X18,X33),s(X18,X34)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_case_def|split|1')).
fof(f328,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X3),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X3),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))),
  inference(flattening,[],[f166])).
fof(f166,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X3),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X18,X6] : ! [X8,X20,X31,X32,X33,X34] : s(X18,happ(s(fun('type.wordSem.word_loc'(X6),X18),X20),s('type.wordSem.word_loc'(X6),X8))) = s(X18,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8))),s(fun('type.wordSem.word_loc'(X6),X18),X20),s(fun('type.wordSem.word_loc'(X6),X18),X31),s(fun('type.wordSem.word_loc'(X6),X18),X32),s(X18,X33),s(X18,X34)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_case_def|split|0')).
fof(f327,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X5),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))) )),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X5),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))),
  inference(flattening,[],[f164])).
fof(f164,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.wordSem.word_loc'(X1),X0),X5),s('type.wordSem.word_loc'(X1),X2))) = s(X0,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X1),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X1),X2))),s(fun('type.wordSem.word_loc'(X1),X0),X3),s(fun('type.wordSem.word_loc'(X1),X0),X4),s(fun('type.wordSem.word_loc'(X1),X0),X5),s(X0,X6),s(X0,X7)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X18,X6] : ! [X8,X20,X31,X32,X33,X34] : s(X18,happ(s(fun('type.wordSem.word_loc'(X6),X18),X32),s('type.wordSem.word_loc'(X6),X8))) = s(X18,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8))),s(fun('type.wordSem.word_loc'(X6),X18),X20),s(fun('type.wordSem.word_loc'(X6),X18),X31),s(fun('type.wordSem.word_loc'(X6),X18),X32),s(X18,X33),s(X18,X34)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_case_def|split|2')).
fof(f326,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X1,X5) = s(X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X0),X1),X2),s(fun('type.wordSem.word_loc'(X0),X1),X3),s(fun('type.wordSem.word_loc'(X0),X1),X4),s(X1,X5),s(X1,X6)))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(X1,X5) = s(X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X0),X1),X2),s(fun('type.wordSem.word_loc'(X0),X1),X3),s(fun('type.wordSem.word_loc'(X0),X1),X4),s(X1,X5),s(X1,X6)))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6] : s(X1,X5) = s(X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X0),X1),X2),s(fun('type.wordSem.word_loc'(X0),X1),X3),s(fun('type.wordSem.word_loc'(X0),X1),X4),s(X1,X5),s(X1,X6)))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6,X18] : ! [X20,X31,X32,X33,X34] : s(X18,X33) = s(X18,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X6),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X6),X18),X20),s(fun('type.wordSem.word_loc'(X6),X18),X31),s(fun('type.wordSem.word_loc'(X6),X18),X32),s(X18,X33),s(X18,X34)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_case_def|split|3')).
fof(f325,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X1,X6) = s(X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X0),X1),X2),s(fun('type.wordSem.word_loc'(X0),X1),X3),s(fun('type.wordSem.word_loc'(X0),X1),X4),s(X1,X5),s(X1,X6)))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(X1,X6) = s(X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X0),X1),X2),s(fun('type.wordSem.word_loc'(X0),X1),X3),s(fun('type.wordSem.word_loc'(X0),X1),X4),s(X1,X5),s(X1,X6)))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6] : s(X1,X6) = s(X1,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X0),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X0),X1),X2),s(fun('type.wordSem.word_loc'(X0),X1),X3),s(fun('type.wordSem.word_loc'(X0),X1),X4),s(X1,X5),s(X1,X6)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X6,X18] : ! [X20,X31,X32,X33,X34] : s(X18,X34) = s(X18,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X6),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X6),X18),X20),s(fun('type.wordSem.word_loc'(X6),X18),X31),s(fun('type.wordSem.word_loc'(X6),X18),X32),s(X18,X33),s(X18,X34)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_case_def|split|4')).
fof(f324,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun('type.num.num',X1),happ(s(fun('type.num.num',fun('type.num.num',X1)),X5),s('type.num.num',X2))),s('type.num.num',X3))) = s(X1,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X2),s('type.num.num',X3))),s(fun('type.fcp.cart'(bool,X0),X1),X4),s(fun('type.num.num',fun('type.num.num',X1)),X5)))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X1,happ(s(fun('type.num.num',X1),happ(s(fun('type.num.num',fun('type.num.num',X1)),X5),s('type.num.num',X2))),s('type.num.num',X3))) = s(X1,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X2),s('type.num.num',X3))),s(fun('type.fcp.cart'(bool,X0),X1),X4),s(fun('type.num.num',fun('type.num.num',X1)),X5)))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X1,happ(s(fun('type.num.num',X1),happ(s(fun('type.num.num',fun('type.num.num',X1)),X5),s('type.num.num',X2))),s('type.num.num',X3))) = s(X1,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X2),s('type.num.num',X3))),s(fun('type.fcp.cart'(bool,X0),X1),X4),s(fun('type.num.num',fun('type.num.num',X1)),X5)))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X18,X17] : ! [X48,X49,X20,X31] : s(X17,happ(s(fun('type.num.num',X17),happ(s(fun('type.num.num',fun('type.num.num',X17)),X31),s('type.num.num',X48))),s('type.num.num',X49))) = s(X17,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X18),'const.wordSem.Loc_2'(s('type.num.num',X48),s('type.num.num',X49))),s(fun('type.fcp.cart'(bool,X18),X17),X20),s(fun('type.num.num',fun('type.num.num',X17)),X31)))),
  file('thm.stackSem.result_distinct|split|4','thm.wordSem.word_loc_case_def|split|1')).
fof(f323,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun('type.fcp.cart'(bool,X1),X0),X3),s('type.fcp.cart'(bool,X1),X2))) = s(X0,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),X2))),s(fun('type.fcp.cart'(bool,X1),X0),X3),s(fun('type.num.num',fun('type.num.num',X0)),X4)))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun('type.fcp.cart'(bool,X1),X0),X3),s('type.fcp.cart'(bool,X1),X2))) = s(X0,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),X2))),s(fun('type.fcp.cart'(bool,X1),X0),X3),s(fun('type.num.num',fun('type.num.num',X0)),X4)))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun('type.fcp.cart'(bool,X1),X0),X3),s('type.fcp.cart'(bool,X1),X2))) = s(X0,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),X2))),s(fun('type.fcp.cart'(bool,X1),X0),X3),s(fun('type.num.num',fun('type.num.num',X0)),X4)))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X17,X18] : ! [X8,X20,X31] : s(X17,happ(s(fun('type.fcp.cart'(bool,X18),X17),X20),s('type.fcp.cart'(bool,X18),X8))) = s(X17,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X18),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X18),X8))),s(fun('type.fcp.cart'(bool,X18),X17),X20),s(fun('type.num.num',fun('type.num.num',X17)),X31)))),
  file('thm.stackSem.result_distinct|split|4','thm.wordSem.word_loc_case_def|split|0')).
fof(f322,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK9(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK9(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f232])).
fof(f232,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK9(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK9(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.stackSem.result_distinct|split|4',aHL_EXT)).
fof(f321,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,happ(s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,X2))),s(fun(X1,X0),X3)))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,happ(s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,X2))),s(fun(X1,X0),X3)))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,happ(s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,X2))),s(fun(X1,X0),X3)))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X9,X11] : ! [X13,X14] : s(X9,happ(s(fun(X11,X9),X14),s(X11,X13))) = s(X9,happ(s(fun(fun(X11,X9),X9),'_dstsel_0_x0_1'(s(X11,X13))),s(fun(X11,X9),X14)))),
  file('thm.stackSem.result_distinct|split|4','_dstsel_0_x0_ax')).
fof(f320,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X11,X9] : ! [X12,X14] : s(X9,X12) = s(X9,happ(s(fun(X11,X9),'_dst_x0_1'(s(X9,X12))),s(X11,X14)))),
  file('thm.stackSem.result_distinct|split|4','_dst_x0_ax')).
fof(f319,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))) )),
  inference(cnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK8(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : ? [X3] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),X3),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),X3),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : ! [X2] : ? [X3] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),X3),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),X3),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X17,X18] : ! [X19] : ? [X20] : ! [X21,X22,X23] : s(X17,happ(s(fun('type.ind_type.recspace'(X18),X17),X20),s('type.ind_type.recspace'(X18),'const.ind_type.CONSTR_3'(s('type.num.num',X21),s(X18,X22),s(fun('type.num.num','type.ind_type.recspace'(X18)),X23))))) = s(X17,happ(s(fun(fun('type.num.num',X17),X17),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X17),X17)),happ(s(fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X17),X17))),happ(s(fun('type.num.num',fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X17),X17)))),X19),s('type.num.num',X21))),s(X18,X22))),s(fun('type.num.num','type.ind_type.recspace'(X18)),X23))),s(fun('type.num.num',X17),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X18),X17),X20),s(fun('type.num.num','type.ind_type.recspace'(X18)),X23)))))),
  file('thm.stackSem.result_distinct|split|4','thm.ind_type.CONSTR_REC')).
fof(f305,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f188])).
fof(f188,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X15,X16] : ((p(s(bool,X15)) => p(s(bool,X16))) => ((p(s(bool,X16)) => p(s(bool,X15))) => s(bool,X15) = s(bool,X16)))),
  file('thm.stackSem.result_distinct|split|4','thm.bool.IMP_ANTISYM_AX')).
fof(f308,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f189])).
fof(f300,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X18] : ! [X27,X28,X29] : s(X18,'const.ind_type.FCONS_3'(s(X18,X27),s(fun('type.num.num',X18),X28),s('type.num.num',X29))) = s(X18,happ(s(fun('type.num.num',X18),happ(s(fun(fun('type.num.num',X18),fun('type.num.num',X18)),happ(s(fun(X18,fun(fun('type.num.num',X18),fun('type.num.num',X18))),'const.ind_type.FCONS_0'),s(X18,X27))),s(fun('type.num.num',X18),X28))),s('type.num.num',X29)))),
  file('thm.stackSem.result_distinct|split|4','ARITY_0_3_const.ind_type.FCONS')).
fof(f299,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3] : s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X18] : ! [X27,X28,X29] : s('type.ind_type.recspace'(X18),'const.ind_type.CONSTR_3'(s('type.num.num',X27),s(X18,X28),s(fun('type.num.num','type.ind_type.recspace'(X18)),X29))) = s('type.ind_type.recspace'(X18),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X18)),'type.ind_type.recspace'(X18)),happ(s(fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),'type.ind_type.recspace'(X18))),'const.ind_type.CONSTR_1'(s('type.num.num',X27))),s(X18,X28))),s(fun('type.num.num','type.ind_type.recspace'(X18)),X29)))),
  file('thm.stackSem.result_distinct|split|4','ARITY_1_3_const.ind_type.CONSTR')).
fof(f298,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X18] : ! [X8,X20,X30] : s(X18,happ(s(fun('type.num.num',X18),X20),s('type.num.num',X30))) = s(X18,'const.ind_type.FCONS_3'(s(X18,X8),s(fun('type.num.num',X18),X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30)))))),
  file('thm.stackSem.result_distinct|split|4','thm.ind_type.FCONS|split|1')).
fof(f297,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7,X8] : ~s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X7))) = s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_distinct|split|1')).
fof(f296,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))),
  inference(flattening,[],[f130])).
fof(f130,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X8] : ~s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X7))) = s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_distinct|split|0')).
fof(f294,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2)) )),
  inference(cnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1,X2] : ((s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2)) & (s('type.wordSem.word_loc'(X0),X1) != s('type.wordSem.word_loc'(X0),X2) | s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2)))))),
  inference(nnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))) <=> s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0] : ! [X1,X2] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))) <=> s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X7))) = s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8))) <=> s('type.wordSem.word_loc'(X6),X7) = s('type.wordSem.word_loc'(X6),X8))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_|49||49||split|2')).
fof(f295,plain,(
  ( ! [X2,X0,X1] : (s('type.wordSem.word_loc'(X0),X1) != s('type.wordSem.word_loc'(X0),X2) | s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2)))) )),
  inference(cnf_transformation,[],[f216])).
fof(f292,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2)) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2] : ((s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2)) & (s('type.wordSem.word_loc'(X0),X1) != s('type.wordSem.word_loc'(X0),X2) | s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2)))))),
  inference(nnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) <=> s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) <=> s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X7))) = s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X8))) <=> s('type.wordSem.word_loc'(X6),X7) = s('type.wordSem.word_loc'(X6),X8))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_|49||49||split|1')).
fof(f293,plain,(
  ( ! [X2,X0,X1] : (s('type.wordSem.word_loc'(X0),X1) != s('type.wordSem.word_loc'(X0),X2) | s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2)))) )),
  inference(cnf_transformation,[],[f215])).
fof(f290,plain,(
  ( ! [X2,X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2)) )),
  inference(cnf_transformation,[],[f214])).
fof(f214,plain,(
  ! [X0,X1,X2] : ((s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2)) & (s('type.wordSem.word_loc'(X0),X1) != s('type.wordSem.word_loc'(X0),X2) | s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))))),
  inference(nnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))) <=> s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))) <=> s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),X2))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X7))) = s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8))) <=> s('type.wordSem.word_loc'(X6),X7) = s('type.wordSem.word_loc'(X6),X8))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_|49||49||split|0')).
fof(f291,plain,(
  ( ! [X2,X0,X1] : (s('type.wordSem.word_loc'(X0),X1) != s('type.wordSem.word_loc'(X0),X2) | s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2)))) )),
  inference(cnf_transformation,[],[f214])).
fof(f287,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X6] : ! [X20,X8] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X20),s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X20),s('type.wordSem.word_loc'(X6),X8)))))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_size_def|split|0')).
fof(f286,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X20,X8] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X20),s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X20),s('type.wordSem.word_loc'(X6),X8)))))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_size_def|split|2')).
fof(f285,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X0,'type.num.num'),X1),s('type.wordSem.word_loc'(X0),X2)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X20,X8] : s('type.num.num','const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X20),s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.wordSem.word_loc_size_2'(s(fun(X6,'type.num.num'),X20),s('type.wordSem.word_loc'(X6),X8)))))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_size_def|split|1')).
fof(f284,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X18] : ! [X8,X20] : s(X18,X8) = s(X18,'const.ind_type.FCONS_3'(s(X18,X8),s(fun('type.num.num',X18),X20),s('type.num.num','const.num.|48|_0')))),
  file('thm.stackSem.result_distinct|split|4','thm.ind_type.FCONS|split|0')).
fof(f283,plain,(
  ( ! [X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Error_0') != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : s('type.stackSem.result'(X0),'const.stackSem.Error_0') != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1] : ~s('type.stackSem.result'(X0),'const.stackSem.Error_0') = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X8] : ~s('type.stackSem.result'(X6),'const.stackSem.Error_0') = s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_distinct|split|3')).
fof(f282,plain,(
  ( ! [X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0') != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0') != s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1] : ~s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0') = s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8] : ~s('type.stackSem.result'(X6),'const.stackSem.TimeOut_0') = s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X8)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_distinct|split|2')).
fof(f276,plain,(
  ( ! [X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X0),X1)))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0] : ! [X1] : s('type.stackSem.result'(X0),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X0),X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X27] : s('type.stackSem.result'(X6),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X6),X27))) = s('type.stackSem.result'(X6),happ(s(fun('type.wordSem.word_loc'(X6),'type.stackSem.result'(X6)),'const.stackSem.Result_0'),s('type.wordSem.word_loc'(X6),X27)))),
  file('thm.stackSem.result_distinct|split|4','ARITY_0_1_const.stackSem.Result')).
fof(f275,plain,(
  ( ! [X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X0),X1)))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0] : ! [X1] : s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X0),X1)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X27] : s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X27))) = s('type.stackSem.result'(X6),happ(s(fun('type.wordSem.word_loc'(X6),'type.stackSem.result'(X6)),'const.stackSem.Exception_0'),s('type.wordSem.word_loc'(X6),X27)))),
  file('thm.stackSem.result_distinct|split|4','ARITY_0_1_const.stackSem.Exception')).
fof(f274,plain,(
  ( ! [X0,X1] : (s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X0),X1)))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X0),X1)))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1] : s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1))) = s('type.stackSem.result'(X0),happ(s(fun('type.wordSem.word_loc'(X0),'type.stackSem.result'(X0)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X0),X1)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X27] : s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X27))) = s('type.stackSem.result'(X6),happ(s(fun('type.wordSem.word_loc'(X6),'type.stackSem.result'(X6)),'const.stackSem.Halt_0'),s('type.wordSem.word_loc'(X6),X27)))),
  file('thm.stackSem.result_distinct|split|4','ARITY_0_1_const.stackSem.Halt')).
fof(f273,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0')))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0')))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.TimeOut_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6] : ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X20),s('type.stackSem.result'(X6),'const.stackSem.TimeOut_0')))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_size_def|split|3')).
fof(f272,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Error_0')))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Error_0')))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X0,'type.num.num'),X1),s('type.stackSem.result'(X0),'const.stackSem.Error_0')))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6] : ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.stackSem.result_size_2'(s(fun(X6,'type.num.num'),X20),s('type.stackSem.result'(X6),'const.stackSem.Error_0')))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_size_def|split|4')).
fof(f271,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X11] : ! [X13] : s(X11,X13) = s(X11,happ(s(fun(X11,X11),'_i_0_0'),s(X11,X13)))),
  file('thm.stackSem.result_distinct|split|4','_i0_ax')).
fof(f270,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X18] : ! [X26] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X18,X26)))),
  file('thm.stackSem.result_distinct|split|4','thm.bool.DATATYPE_TAG_THM')).
fof(f245,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f195])).
fof(f195,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X25] : (s(bool,'T_0') = s(bool,X25) <=> p(s(bool,X25)))),
  file('thm.stackSem.result_distinct|split|4','thm.bool.EQ_CLAUSES|split|0')).
fof(f246,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f195])).
fof(f242,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.stackSem.result_distinct|split|4',aHL_BOOL_CASES)).
fof(f235,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.stackSem.result_distinct|split|4',aHL_TRUTH)).
fof(f234,plain,(
  s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) = s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),sK1)))),
  inference(cnf_transformation,[],[f192])).
fof(f192,plain,(
  s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) = s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f185])).
fof(f185,plain,(
  ? [X0,X1,X2] : s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) != s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : ~s('type.stackSem.result'(X0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X0),X2))) = s('type.stackSem.result'(X0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ~s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X8))) = s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ~s('type.stackSem.result'(X6),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X6),X8))) = s('type.stackSem.result'(X6),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X6),X7)))),
  file('thm.stackSem.result_distinct|split|4','thm.stackSem.result_distinct|split|4')).
fof(f59873,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847,f59849,f59851,f59853,f59856,f57983])).
fof(f59867,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59866,f235])).
fof(f59866,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f57993,f58002])).
fof(f57993,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X0),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,'F_0'))))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f342,f57853,f316])).
fof(f59861,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(subsumption_resolution,[],[f59860,f58002])).
fof(f59860,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | ($spl12 | $spl20 | $spl108)),
  inference(forward_demodulation,[],[f57998,f58002])).
fof(f57998,plain,(
  ( ! [X0] : (s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X0),s('type.wordSem.word_loc'(sK0),sK1)))) ) | ($spl12 | $spl20 | $spl108)),
  inference(unit_resulting_resolution,[],[f20301,f57853,f368])).
fof(f20301,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f20221,f5596])).
fof(f20221,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0',bool)))) | ($spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f10287,f20097])).
fof(f20097,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f20006,f342])).
fof(f20006,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f245,f16819])).
fof(f16819,plain,(
  ( ! [X25] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X25))) | s(bool,'T_0') = s(bool,X25)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f16027,f5596])).
fof(f16027,plain,(
  ( ! [X25] : (s(bool,'F_0') != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X25))) | s(bool,'T_0') = s(bool,X25)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f10286])).
fof(f10286,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f10245,f350])).
fof(f10245,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,sK6('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f5596,f365])).
fof(f11041,plain,(
  ( ! [X35] : (s(bool,'F_0') != s(bool,X35) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X35)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f11011,f5596])).
fof(f11011,plain,(
  ( ! [X35] : (s(bool,X35) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X35)))) ) | $spl20),
  inference(superposition,[],[f6394,f271])).
fof(f10287,plain,(
  s(bool,'T_0') != s(bool,sK6('_i_0_0',bool)) | $spl12),
  inference(subsumption_resolution,[],[f10251,f342])).
fof(f10251,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('_i_0_0',bool)) | $spl12),
  inference(superposition,[],[f245,f5596])).
fof(f59857,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847,f59849,f59851,f59853,f59856])).
fof(f59854,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847,f59849,f59851,f59853])).
fof(f59852,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847,f59849,f59851])).
fof(f59850,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847,f59849])).
fof(f59848,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845,f59847])).
fof(f59846,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841,f59845])).
fof(f59842,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831,f59841])).
fof(f59840,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59109,f235])).
fof(f59109,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4703])).
fof(f59839,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59108,f235])).
fof(f59108,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4702])).
fof(f59838,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59107,f235])).
fof(f59107,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4697])).
fof(f59837,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59106,f235])).
fof(f59106,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4698])).
fof(f59836,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59105,f235])).
fof(f59105,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4696])).
fof(f59835,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59104,f235])).
fof(f59104,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4695])).
fof(f59834,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59103,f235])).
fof(f59103,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4791])).
fof(f59833,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59102,f235])).
fof(f59102,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f4792])).
fof(f59832,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829,f59831])).
fof(f59830,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827,f59829])).
fof(f59828,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825,f59827])).
fof(f59826,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823,f59825])).
fof(f59824,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821,f59823])).
fof(f59822,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819,f59821])).
fof(f59820,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817,f59819])).
fof(f59818,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813,f59817])).
fof(f59816,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59078,f235])).
fof(f59078,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f13343])).
fof(f59815,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59077,f235])).
fof(f59077,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f13496])).
fof(f59814,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811,f59813])).
fof(f59812,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809,f59811])).
fof(f59810,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807,f59809])).
fof(f59808,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805,f59807])).
fof(f59806,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801,f59805])).
fof(f59804,plain,(
  $false | ($spl8 | $spl108)),
  inference(global_subsumption,[],[f59803,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801])).
fof(f59803,plain,(
  ( ! [X50] : (p(s(bool,X50))) ) | ($spl8 | $spl108)),
  inference(subsumption_resolution,[],[f59022,f235])).
fof(f59022,plain,(
  ( ! [X50] : (~p(s(bool,'T_0')) | p(s(bool,X50))) ) | ($spl8 | $spl108)),
  inference(backward_demodulation,[],[f58002,f6525])).
fof(f6525,plain,(
  ( ! [X50] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X50)))) | p(s(bool,X50))) ) | $spl8),
  inference(forward_demodulation,[],[f6524,f4255])).
fof(f4255,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))) | $spl8),
  inference(unit_resulting_resolution,[],[f350,f4233,f1037])).
fof(f6524,plain,(
  ( ! [X50] : (p(s(bool,X50)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))),s(bool,X50))))) ) | $spl8),
  inference(subsumption_resolution,[],[f6492,f235])).
fof(f6492,plain,(
  ( ! [X50] : (~p(s(bool,'T_0')) | p(s(bool,X50)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))),s(bool,X50))))) ) | $spl8),
  inference(superposition,[],[f316,f4255])).
fof(f59802,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795,f59801])).
fof(f59796,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773,f59795])).
fof(f59774,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769,f59773])).
fof(f59770,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721,f59769])).
fof(f59722,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704,f59721])).
fof(f59705,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682,f59704])).
fof(f59683,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680,f59682])).
fof(f59681,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678,f59680])).
fof(f59679,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676,f59678])).
fof(f59677,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674,f59676])).
fof(f59675,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672,f59674])).
fof(f59673,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654,f59672])).
fof(f59655,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652,f59654])).
fof(f59653,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638,f59652])).
fof(f59639,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632,f59638])).
fof(f59633,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630,f59632])).
fof(f59631,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628,f59630])).
fof(f59629,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622,f59628])).
fof(f59623,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605,f59622])).
fof(f59606,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581,f59605])).
fof(f59582,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579,f59581])).
fof(f59580,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546,f59579])).
fof(f59547,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520,f59546])).
fof(f59521,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317,f59520])).
fof(f59505,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318,f59317])).
fof(f59504,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483,f59318])).
fof(f59497,plain,(
  $false | ($spl12 | $spl20 | $spl24 | $spl108)),
  inference(global_subsumption,[],[f58687,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f58687,plain,(
  ( ! [X511,X512,X513] : (s(bool,X511) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0'))) | s(bool,X511) = s(bool,'const.bool.DATATYPE_1'(s(X512,X513)))) ) | ($spl12 | $spl20 | $spl24 | $spl108)),
  inference(backward_demodulation,[],[f58002,f54703])).
fof(f54703,plain,(
  ( ! [X511,X512,X513] : (s(bool,X511) = s(bool,'const.bool.DATATYPE_1'(s(X512,X513))) | s(bool,X511) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20 | $spl24)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f5675,f5676,f6329,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f10286,f10287,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f20097,f20272,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23399,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f20271,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23582,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23681,f23641,f23579,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23421,f23404,f22548,f22546,f22545,f22544,f22421,f22200,f22131,f21893,f21761,f21652,f21639,f21541,f21137,f20823,f20822,f20818,f20710,f20708,f20707,f20703,f20577,f20385,f20304,f20301,f19989,f19988,f16819,f16764,f16266,f16060,f16001,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f11045,f11044,f11043,f11042,f11041,f6512,f6394,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5596,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31107,f30990,f30992,f31111,f31112,f31605,f31538,f31564,f31566,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32880,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33510,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35857,f35615,f35617,f35620,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35877,f35755,f35757,f35760,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36482,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37965,f37692,f37694,f37697,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37986,f37847,f37849,f37852,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39512,f39382,f39385,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40782,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41686,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43290,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f43727,f43728,f43279,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43787,f43218,f43216,f44043,f43215,f43205,f43204,f43202,f43201,f43200,f44066,f44067,f44089,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f43175,f44267,f44268,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44842,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45574,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47639,f47640,f47641,f47642,f47643,f47644,f47649,f47650,f47651,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f48225,f47798,f47800,f47803,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48252,f47996,f47998,f48001,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50561,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50566,f50567,f50056,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50254,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50267,f50268,f50269,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50646,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53454,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53928,f53442,f53938,f53939,f53440,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53286,f53285,f53284,f53283,f53282,f53281,f54501,f54507,f54508,f54509,f54510,f54511,f54512,f54524,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f53249,f54702])).
fof(f54702,plain,(
  ( ! [X511,X512,X510,X513] : (s(bool,'F_0') = s(bool,X510) | s(bool,X511) = s(bool,'const.bool.DATATYPE_1'(s(X512,X513))) | s(bool,X511) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | $spl24),
  inference(subsumption_resolution,[],[f53064,f242])).
fof(f53064,plain,(
  ( ! [X511,X512,X510,X513] : (s(bool,'T_0') != s(bool,X510) | s(bool,'F_0') = s(bool,X510) | s(bool,X511) = s(bool,'const.bool.DATATYPE_1'(s(X512,X513))) | s(bool,X511) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | $spl24),
  inference(superposition,[],[f16764,f43498])).
fof(f54524,plain,(
  ( ! [X536,X534,X537,X535] : (s(bool,X534) != s(bool,X535) | s(bool,'F_0') = s(bool,X535) | s(bool,X534) = s(bool,'const.bool.DATATYPE_1'(s(X536,X537)))) ) | ($spl12 | $spl20 | $spl24)),
  inference(subsumption_resolution,[],[f52720,f20301])).
fof(f52720,plain,(
  ( ! [X536,X534,X537,X535] : (s(bool,X534) != s(bool,X535) | s(bool,'F_0') = s(bool,X535) | s(bool,X534) = s(bool,'const.bool.DATATYPE_1'(s(X536,X537))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | $spl24),
  inference(superposition,[],[f16764,f43498])).
fof(f54511,plain,(
  ( ! [X466,X467,X468] : (s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X466))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X466) = s(bool,'const.bool.DATATYPE_1'(s(X467,X468)))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f52706,f350])).
fof(f52706,plain,(
  ( ! [X466,X467,X468] : (s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X466))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X466) = s(bool,'const.bool.DATATYPE_1'(s(X467,X468))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f31112,f43498])).
fof(f54510,plain,(
  ( ! [X461,X460,X462] : (s(bool,X460) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X460))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X460) = s(bool,'const.bool.DATATYPE_1'(s(X461,X462)))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f52704,f350])).
fof(f52704,plain,(
  ( ! [X461,X460,X462] : (s(bool,X460) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X460))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X460) = s(bool,'const.bool.DATATYPE_1'(s(X461,X462))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f23421,f43498])).
fof(f54509,plain,(
  ( ! [X449,X451,X452,X450] : (s(bool,X450) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X449))) | s(bool,'F_0') = s(bool,X450) | s(bool,X449) = s(bool,'const.bool.DATATYPE_1'(s(X451,X452)))) ) | $spl24),
  inference(subsumption_resolution,[],[f52701,f350])).
fof(f52701,plain,(
  ( ! [X449,X451,X452,X450] : (s(bool,X450) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X449))) | s(bool,'F_0') = s(bool,X450) | s(bool,X449) = s(bool,'const.bool.DATATYPE_1'(s(X451,X452))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl24),
  inference(superposition,[],[f16764,f43498])).
fof(f54508,plain,(
  ( ! [X445,X447,X446,X448] : (s(bool,X445) != s(bool,X446) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X446))) | s(bool,X445) = s(bool,'const.bool.DATATYPE_1'(s(X447,X448)))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f52700,f350])).
fof(f52700,plain,(
  ( ! [X445,X447,X446,X448] : (s(bool,X445) != s(bool,X446) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X446))) | s(bool,X445) = s(bool,'const.bool.DATATYPE_1'(s(X447,X448))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f43498])).
fof(f53939,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X153) = s(bool,'const.bool.DATATYPE_1'(s(X154,X155))) | s(bool,X153) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X152))) | s(bool,'T_0') = s(bool,X152)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f51975,f350])).
fof(f51975,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X153) = s(bool,'const.bool.DATATYPE_1'(s(X154,X155))) | s(bool,X153) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X152))) | s(bool,'T_0') = s(bool,X152)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f43498,f16819])).
fof(f53938,plain,(
  ( ! [X142,X143,X141] : (s(bool,X141) = s(bool,'const.bool.DATATYPE_1'(s(X142,X143))) | s(bool,X141) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f51974,f350])).
fof(f51974,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X141) = s(bool,'const.bool.DATATYPE_1'(s(X142,X143))) | s(bool,X141) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f43498,f23421])).
fof(f53928,plain,(
  ( ! [X19,X20,X18,X16] : (s(bool,X16) = s(bool,X18) | s(bool,X18) = s(bool,'const.bool.DATATYPE_1'(s(X19,X20))) | s(bool,X16) = s(bool,'const.bool.DATATYPE_1'(s(bool,X16)))) ) | ($spl12 | $spl20 | $spl24)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f5675,f5676,f6329,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f10286,f10287,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f20097,f20272,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23399,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f20271,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23582,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23681,f23641,f23579,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23421,f23404,f22548,f22546,f22545,f22544,f22421,f22200,f22131,f21893,f21761,f21652,f21639,f21541,f21137,f20823,f20822,f20818,f20710,f20708,f20707,f20703,f20577,f20385,f20304,f20301,f19989,f19988,f16819,f16764,f16266,f16060,f16001,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f11045,f11044,f11043,f11042,f11041,f6512,f6394,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5596,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31107,f30990,f30992,f31111,f31112,f31605,f31538,f31564,f31566,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32880,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33510,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35857,f35615,f35617,f35620,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35877,f35755,f35757,f35760,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36482,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37965,f37692,f37694,f37697,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37986,f37847,f37849,f37852,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39512,f39382,f39385,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40782,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41686,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43290,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f43727,f43728,f43279,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43787,f43218,f43216,f44043,f43215,f43205,f43204,f43202,f43201,f43200,f44066,f44067,f44089,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f43175,f44267,f44268,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44842,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45574,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47639,f47640,f47641,f47642,f47643,f47644,f47649,f47650,f47651,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f48225,f47798,f47800,f47803,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48252,f47996,f47998,f48001,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50561,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50566,f50567,f50056,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50254,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50267,f50268,f50269,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50646,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53454,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443])).
fof(f50646,plain,(
  ( ! [X895,X899,X897,X901,X898,X896,X900] : (s(bool,'F_0') != s(bool,happ(s(fun(X898,bool),'_dst_x0x1x1_3'(s(fun(X896,fun(X895,bool)),X897),s(fun(X898,X896),X899),s(fun(X898,X895),X901))),s(X898,X900))) | s(bool,'F_0') = s(bool,happ(s(fun(X895,bool),happ(s(fun(X896,fun(X895,bool)),X897),s(X896,happ(s(fun(X898,X896),X899),s(X898,X900))))),s(X895,happ(s(fun(X898,X895),X901),s(X898,X900)))))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f50428,f5596])).
fof(f50428,plain,(
  ( ! [X895,X899,X897,X901,X898,X896,X900] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X898,bool),'_dst_x0x1x1_3'(s(fun(X896,fun(X895,bool)),X897),s(fun(X898,X896),X899),s(fun(X898,X895),X901))),s(X898,X900))) | s(bool,'F_0') = s(bool,happ(s(fun(X895,bool),happ(s(fun(X896,fun(X895,bool)),X897),s(X896,happ(s(fun(X898,X896),X899),s(X898,X900))))),s(X895,happ(s(fun(X898,X895),X901),s(X898,X900)))))) ) | $spl20),
  inference(superposition,[],[f6394,f336])).
fof(f50269,plain,(
  ( ! [X187,X185,X188,X186,X184] : (s(X185,happ(s(fun(bool,X185),'_dst_x0x1x1_3'(s(fun(X186,fun(bool,X185)),X187),s(fun(bool,X186),X188),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0'))) = s(X185,happ(s(fun(bool,X185),happ(s(fun(X186,fun(bool,X185)),X187),s(X186,happ(s(fun(bool,X186),X188),s(bool,'F_0'))))),s(bool,X184))) | s(bool,'T_0') = s(bool,X184)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f336,f20385])).
fof(f50267,plain,(
  ( ! [X177,X175,X178,X176,X174] : (s(X175,happ(s(fun(bool,X175),'_dst_x0x1x1_3'(s(fun(X176,fun(bool,X175)),X177),s(fun(bool,X176),X178),s(fun(bool,bool),'_i_0_0'))),s(bool,X174))) = s(X175,happ(s(fun(bool,X175),happ(s(fun(X176,fun(bool,X175)),X177),s(X176,happ(s(fun(bool,X176),X178),s(bool,X174))))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X174)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f336,f16819])).
fof(f50254,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(bool,X114),happ(s(fun(X115,fun(bool,X114)),X116),s(X115,happ(s(fun(fun(bool,bool),X115),X117),s(fun(bool,bool),'_i_0_0'))))),s(bool,'F_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(X115,fun(bool,X114)),X116),s(fun(fun(bool,bool),X115),X117),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f336,f23421])).
fof(f50056,plain,(
  ( ! [X187,X185,X188,X186,X184] : (s(X185,happ(s(fun(bool,X185),'_dst_x0x1x1_3'(s(fun(bool,fun(X186,X185)),X187),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X186),X188))),s(bool,'F_0'))) = s(X185,happ(s(fun(X186,X185),happ(s(fun(bool,fun(X186,X185)),X187),s(bool,X184))),s(X186,happ(s(fun(bool,X186),X188),s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X184)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f336,f20385])).
fof(f50566,plain,(
  ( ! [X177,X175,X178,X176,X174] : (s(X175,happ(s(fun(bool,X175),'_dst_x0x0x1_3'(s(fun(bool,fun(X176,X175)),X177),s(bool,'F_0'),s(fun(bool,X176),X178))),s(bool,X174))) = s(X175,happ(s(fun(bool,X175),'_dst_x0x1x1_3'(s(fun(bool,fun(X176,X175)),X177),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X176),X178))),s(bool,X174))) | s(bool,'T_0') = s(bool,X174)) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f50054,f335])).
fof(f50054,plain,(
  ( ! [X177,X175,X178,X176,X174] : (s(X175,happ(s(fun(bool,X175),'_dst_x0x1x1_3'(s(fun(bool,fun(X176,X175)),X177),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X176),X178))),s(bool,X174))) = s(X175,happ(s(fun(X176,X175),happ(s(fun(bool,fun(X176,X175)),X177),s(bool,'F_0'))),s(X176,happ(s(fun(bool,X176),X178),s(bool,X174))))) | s(bool,'T_0') = s(bool,X174)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f336,f16819])).
fof(f50561,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x0x1_3'(s(fun(bool,fun(X115,X114)),X116),s(bool,'F_0'),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(bool,fun(X115,X114)),X116),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f50041,f335])).
fof(f50041,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(X115,X114),happ(s(fun(bool,fun(X115,X114)),X116),s(bool,'F_0'))),s(X115,happ(s(fun(fun(bool,bool),X115),X117),s(fun(bool,bool),'_i_0_0'))))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(bool,fun(X115,X114)),X116),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f336,f23421])).
fof(f48001,plain,(
  ( ! [X881,X878,X876,X880,X875,X879,X877] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X879,bool),'_dst_x0x0x1_3'(s(fun(X876,fun(X875,bool)),X877),s(X876,X878),s(fun(X879,X875),X880))),s(X879,X881))))) | s(bool,'T_0') = s(bool,happ(s(fun(X875,bool),happ(s(fun(X876,fun(X875,bool)),X877),s(X876,X878))),s(X875,happ(s(fun(X879,X875),X880),s(X879,X881)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f335])).
fof(f47998,plain,(
  ( ! [X860,X854,X859,X857,X855,X858,X856] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X858,bool),'_dst_x0x0x1_3'(s(fun(X855,fun(X854,bool)),X856),s(X855,X857),s(fun(X858,X854),X859))),s(X858,X860))))) | s(bool,'T_0') = s(bool,happ(s(fun(X854,bool),happ(s(fun(X855,fun(X854,bool)),X856),s(X855,X857))),s(X854,happ(s(fun(X858,X854),X859),s(X858,X860)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f335])).
fof(f47996,plain,(
  ( ! [X843,X841,X845,X842,X840,X846,X844] : (s(bool,'F_0') != s(bool,happ(s(fun(X844,bool),'_dst_x0x0x1_3'(s(fun(X841,fun(X840,bool)),X842),s(X841,X843),s(fun(X844,X840),X845))),s(X844,X846))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X840,bool),happ(s(fun(X841,fun(X840,bool)),X842),s(X841,X843))),s(X840,happ(s(fun(X844,X840),X845),s(X844,X846)))))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f335])).
fof(f48252,plain,(
  ( ! [X825,X819,X823,X821,X824,X822,X820] : (s(bool,'F_0') != s(bool,happ(s(fun(X823,bool),'_dst_x0x0x1_3'(s(fun(X820,fun(X819,bool)),X821),s(X820,X822),s(fun(X823,X819),X824))),s(X823,X825))) | s(bool,'F_0') = s(bool,happ(s(fun(X819,bool),happ(s(fun(X820,fun(X819,bool)),X821),s(X820,X822))),s(X819,happ(s(fun(X823,X819),X824),s(X823,X825)))))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f47993,f5596])).
fof(f47993,plain,(
  ( ! [X825,X819,X823,X821,X824,X822,X820] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X823,bool),'_dst_x0x0x1_3'(s(fun(X820,fun(X819,bool)),X821),s(X820,X822),s(fun(X823,X819),X824))),s(X823,X825))) | s(bool,'F_0') = s(bool,happ(s(fun(X819,bool),happ(s(fun(X820,fun(X819,bool)),X821),s(X820,X822))),s(X819,happ(s(fun(X823,X819),X824),s(X823,X825)))))) ) | $spl20),
  inference(superposition,[],[f6394,f335])).
fof(f47803,plain,(
  ( ! [X854,X852,X857,X851,X855,X853,X856] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X853,bool),happ(s(fun(X852,fun(X853,bool)),X854),s(X852,X855))),s(X853,happ(s(fun(X851,X853),X856),s(X851,X857))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X851,bool),'_dst_x0x0x1_3'(s(fun(X852,fun(X853,bool)),X854),s(X852,X855),s(fun(X851,X853),X856))),s(X851,X857)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f335])).
fof(f47800,plain,(
  ( ! [X831,X835,X833,X830,X834,X832,X836] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X832,bool),happ(s(fun(X831,fun(X832,bool)),X833),s(X831,X834))),s(X832,happ(s(fun(X830,X832),X835),s(X830,X836))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X830,bool),'_dst_x0x0x1_3'(s(fun(X831,fun(X832,bool)),X833),s(X831,X834),s(fun(X830,X832),X835))),s(X830,X836)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f335])).
fof(f47798,plain,(
  ( ! [X819,X817,X821,X818,X816,X822,X820] : (s(bool,'F_0') != s(bool,happ(s(fun(X818,bool),happ(s(fun(X817,fun(X818,bool)),X819),s(X817,X820))),s(X818,happ(s(fun(X816,X818),X821),s(X816,X822))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X816,bool),'_dst_x0x0x1_3'(s(fun(X817,fun(X818,bool)),X819),s(X817,X820),s(fun(X816,X818),X821))),s(X816,X822)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f335])).
fof(f48225,plain,(
  ( ! [X798,X796,X800,X795,X799,X797,X801] : (s(bool,'F_0') != s(bool,happ(s(fun(X797,bool),happ(s(fun(X796,fun(X797,bool)),X798),s(X796,X799))),s(X797,happ(s(fun(X795,X797),X800),s(X795,X801))))) | s(bool,'F_0') = s(bool,happ(s(fun(X795,bool),'_dst_x0x0x1_3'(s(fun(X796,fun(X797,bool)),X798),s(X796,X799),s(fun(X795,X797),X800))),s(X795,X801)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f47795,f5596])).
fof(f47795,plain,(
  ( ! [X798,X796,X800,X795,X799,X797,X801] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X797,bool),happ(s(fun(X796,fun(X797,bool)),X798),s(X796,X799))),s(X797,happ(s(fun(X795,X797),X800),s(X795,X801))))) | s(bool,'F_0') = s(bool,happ(s(fun(X795,bool),'_dst_x0x0x1_3'(s(fun(X796,fun(X797,bool)),X798),s(X796,X799),s(fun(X795,X797),X800))),s(X795,X801)))) ) | $spl20),
  inference(superposition,[],[f6394,f335])).
fof(f47651,plain,(
  ( ! [X175,X173,X176,X174,X172] : (s(X173,happ(s(fun(bool,X173),happ(s(fun(X174,fun(bool,X173)),X175),s(X174,X176))),s(bool,X172))) = s(X173,happ(s(fun(bool,X173),'_dst_x0x0x1_3'(s(fun(X174,fun(bool,X173)),X175),s(X174,X176),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X172)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f335,f20385])).
fof(f47649,plain,(
  ( ! [X165,X163,X166,X164,X162] : (s(X163,happ(s(fun(bool,X163),happ(s(fun(X164,fun(bool,X163)),X165),s(X164,X166))),s(bool,'F_0'))) = s(X163,happ(s(fun(bool,X163),'_dst_x0x0x1_3'(s(fun(X164,fun(bool,X163)),X165),s(X164,X166),s(fun(bool,bool),'_i_0_0'))),s(bool,X162))) | s(bool,'T_0') = s(bool,X162)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f335,f16819])).
fof(f47639,plain,(
  ( ! [X103,X105,X102,X104] : (s(X102,happ(s(fun(bool,X102),happ(s(fun(X103,fun(bool,X102)),X104),s(X103,X105))),s(bool,'F_0'))) = s(X102,happ(s(fun(fun(bool,bool),X102),'_dst_x0x0x1_3'(s(fun(X103,fun(bool,X102)),X104),s(X103,X105),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f335,f23421])).
fof(f45574,plain,(
  ( ! [X428,X426,X427] : (s(bool,'F_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X427),s(fun('type.num.num',bool),X426),s('type.num.num',X428))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X426))),s(bool,X427))),s('type.num.num',X428)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f45415,f5596])).
fof(f45415,plain,(
  ( ! [X428,X426,X427] : (s(bool,sK6('_i_0_0',bool)) != s(bool,'const.ind_type.FCONS_3'(s(bool,X427),s(fun('type.num.num',bool),X426),s('type.num.num',X428))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X426))),s(bool,X427))),s('type.num.num',X428)))) ) | $spl20),
  inference(superposition,[],[f6394,f347])).
fof(f44842,plain,(
  ( ! [X699,X700,X702,X704,X698,X701,X703] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X698),bool),X701),s('type.wordSem.word_loc'(X698),X699))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X698),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X698),X699))),s(fun('type.wordSem.word_loc'(X698),bool),X700),s(fun('type.wordSem.word_loc'(X698),bool),X701),s(fun('type.wordSem.word_loc'(X698),bool),X702),s(bool,X703),s(bool,X704)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f44678,f5596])).
fof(f44678,plain,(
  ( ! [X699,X700,X702,X704,X698,X701,X703] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun('type.wordSem.word_loc'(X698),bool),X701),s('type.wordSem.word_loc'(X698),X699))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X698),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(X698),X699))),s(fun('type.wordSem.word_loc'(X698),bool),X700),s(fun('type.wordSem.word_loc'(X698),bool),X701),s(fun('type.wordSem.word_loc'(X698),bool),X702),s(bool,X703),s(bool,X704)))) ) | $spl20),
  inference(superposition,[],[f6394,f329])).
fof(f44268,plain,(
  ( ! [X266] : (s(bool,X266) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X266) = s(bool,'const.bool.DATATYPE_1'(s(bool,X266)))) ) | ($spl12 | $spl20 | $spl24)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f5675,f5676,f6329,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f10286,f10287,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f20097,f20272,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23399,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f20271,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23582,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23681,f23641,f23579,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23421,f23404,f22548,f22546,f22545,f22544,f22421,f22200,f22131,f21893,f21761,f21652,f21639,f21541,f21137,f20823,f20822,f20818,f20710,f20708,f20707,f20703,f20577,f20385,f20304,f20301,f19989,f19988,f16819,f16764,f16266,f16060,f16001,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f11045,f11044,f11043,f11042,f11041,f6512,f6394,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5596,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31107,f30990,f30992,f31111,f31112,f31605,f31538,f31564,f31566,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32880,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33510,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35857,f35615,f35617,f35620,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35877,f35755,f35757,f35760,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36482,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37965,f37692,f37694,f37697,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37986,f37847,f37849,f37852,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39512,f39382,f39385,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40782,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41686,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43290,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f43727,f43728,f43279,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43787,f43218,f43216,f44043,f43215,f43205,f43204,f43202,f43201,f43200,f44066,f44067,f44089,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f43175,f44267])).
fof(f44267,plain,(
  ( ! [X265,X266] : (s(bool,'F_0') = s(bool,X265) | s(bool,X266) = s(bool,'const.bool.DATATYPE_1'(s(bool,X266))) | s(bool,X266) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | $spl24),
  inference(subsumption_resolution,[],[f43036,f242])).
fof(f43036,plain,(
  ( ! [X265,X266] : (s(bool,'T_0') != s(bool,X265) | s(bool,'F_0') = s(bool,X265) | s(bool,X266) = s(bool,'const.bool.DATATYPE_1'(s(bool,X266))) | s(bool,X266) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | $spl24),
  inference(superposition,[],[f16764,f742])).
fof(f44089,plain,(
  ( ! [X277,X278] : (s(bool,X277) != s(bool,X278) | s(bool,'F_0') = s(bool,X278) | s(bool,X277) = s(bool,'const.bool.DATATYPE_1'(s(bool,X277)))) ) | ($spl12 | $spl20 | $spl24)),
  inference(subsumption_resolution,[],[f42734,f20301])).
fof(f42734,plain,(
  ( ! [X277,X278] : (s(bool,X277) != s(bool,X278) | s(bool,'F_0') = s(bool,X278) | s(bool,X277) = s(bool,'const.bool.DATATYPE_1'(s(bool,X277))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | $spl24),
  inference(superposition,[],[f16764,f742])).
fof(f44067,plain,(
  ( ! [X229,X230] : (s(bool,X229) != s(bool,X230) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X230))) | s(bool,X229) = s(bool,'const.bool.DATATYPE_1'(s(bool,X229)))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f42714,f350])).
fof(f42714,plain,(
  ( ! [X229,X230] : (s(bool,X229) != s(bool,X230) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X230))) | s(bool,X229) = s(bool,'const.bool.DATATYPE_1'(s(bool,X229))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f742])).
fof(f43787,plain,(
  ( ! [X146,X147] : (s(bool,X146) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X146) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) ) | $spl24),
  inference(subsumption_resolution,[],[f43786,f350])).
fof(f43786,plain,(
  ( ! [X146,X147] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X146) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X146) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) ) | $spl24),
  inference(forward_demodulation,[],[f42355,f270])).
fof(f42355,plain,(
  ( ! [X146,X147] : (s(bool,X146) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,'const.bool.DATATYPE_1'(s(bool,X146))) | s(bool,X146) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) ) | $spl24),
  inference(superposition,[],[f16764,f742])).
fof(f43728,plain,(
  ( ! [X81,X82] : (s(bool,X82) = s(bool,'const.bool.DATATYPE_1'(s(bool,X82))) | s(bool,X82) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X81))) | s(bool,'T_0') = s(bool,X81)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f42270,f350])).
fof(f42270,plain,(
  ( ! [X81,X82] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X82) = s(bool,'const.bool.DATATYPE_1'(s(bool,X82))) | s(bool,X82) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X81))) | s(bool,'T_0') = s(bool,X81)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f742,f16819])).
fof(f43727,plain,(
  ( ! [X72] : (s(bool,X72) = s(bool,'const.bool.DATATYPE_1'(s(bool,X72))) | s(bool,X72) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f42269,f350])).
fof(f42269,plain,(
  ( ! [X72] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X72) = s(bool,'const.bool.DATATYPE_1'(s(bool,X72))) | s(bool,X72) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f742,f23421])).
fof(f41686,plain,(
  ( ! [X639,X644,X640,X642,X638,X641,X643] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X638),bool),X640),s('type.wordSem.word_loc'(X638),X639))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X638),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X638),X639))),s(fun('type.wordSem.word_loc'(X638),bool),X640),s(fun('type.wordSem.word_loc'(X638),bool),X641),s(fun('type.wordSem.word_loc'(X638),bool),X642),s(bool,X643),s(bool,X644)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f41525,f5596])).
fof(f41525,plain,(
  ( ! [X639,X644,X640,X642,X638,X641,X643] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun('type.wordSem.word_loc'(X638),bool),X640),s('type.wordSem.word_loc'(X638),X639))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X638),'const.stackSem.Result_1'(s('type.wordSem.word_loc'(X638),X639))),s(fun('type.wordSem.word_loc'(X638),bool),X640),s(fun('type.wordSem.word_loc'(X638),bool),X641),s(fun('type.wordSem.word_loc'(X638),bool),X642),s(bool,X643),s(bool,X644)))) ) | $spl20),
  inference(superposition,[],[f6394,f328])).
fof(f40782,plain,(
  ( ! [X613,X615,X611,X616,X612,X614,X610] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(X610),bool),X614),s('type.wordSem.word_loc'(X610),X611))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X610),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X610),X611))),s(fun('type.wordSem.word_loc'(X610),bool),X612),s(fun('type.wordSem.word_loc'(X610),bool),X613),s(fun('type.wordSem.word_loc'(X610),bool),X614),s(bool,X615),s(bool,X616)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f40627,f5596])).
fof(f40627,plain,(
  ( ! [X613,X615,X611,X616,X612,X614,X610] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun('type.wordSem.word_loc'(X610),bool),X614),s('type.wordSem.word_loc'(X610),X611))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X610),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(X610),X611))),s(fun('type.wordSem.word_loc'(X610),bool),X612),s(fun('type.wordSem.word_loc'(X610),bool),X613),s(fun('type.wordSem.word_loc'(X610),bool),X614),s(bool,X615),s(bool,X616)))) ) | $spl20),
  inference(superposition,[],[f6394,f327])).
fof(f39385,plain,(
  ( ! [X509,X511,X512,X508,X510] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X512),s('type.num.num',X509))),s('type.num.num',X510))))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X508),'const.wordSem.Loc_2'(s('type.num.num',X509),s('type.num.num',X510))),s(fun('type.fcp.cart'(bool,X508),bool),X511),s(fun('type.num.num',fun('type.num.num',bool)),X512)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f324])).
fof(f39382,plain,(
  ( ! [X494,X496,X493,X495,X497] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X497),s('type.num.num',X494))),s('type.num.num',X495))))) | s(bool,'T_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X493),'const.wordSem.Loc_2'(s('type.num.num',X494),s('type.num.num',X495))),s(fun('type.fcp.cart'(bool,X493),bool),X496),s(fun('type.num.num',fun('type.num.num',bool)),X497)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f324])).
fof(f39512,plain,(
  ( ! [X472,X469,X471,X468,X470] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X472),s('type.num.num',X469))),s('type.num.num',X470))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X468),'const.wordSem.Loc_2'(s('type.num.num',X469),s('type.num.num',X470))),s(fun('type.fcp.cart'(bool,X468),bool),X471),s(fun('type.num.num',fun('type.num.num',bool)),X472)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f39377,f5596])).
fof(f39377,plain,(
  ( ! [X472,X469,X471,X468,X470] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X472),s('type.num.num',X469))),s('type.num.num',X470))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X468),'const.wordSem.Loc_2'(s('type.num.num',X469),s('type.num.num',X470))),s(fun('type.fcp.cart'(bool,X468),bool),X471),s(fun('type.num.num',fun('type.num.num',bool)),X472)))) ) | $spl20),
  inference(superposition,[],[f6394,f324])).
fof(f37852,plain,(
  ( ! [X532,X534,X533,X535,X531] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X532,bool),'_dst_x1x0_2'(s(fun(X532,fun(X531,bool)),X533),s(X531,X535))),s(X532,X534))))) | s(bool,'T_0') = s(bool,happ(s(fun(X531,bool),happ(s(fun(X532,fun(X531,bool)),X533),s(X532,X534))),s(X531,X535)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f334])).
fof(f37849,plain,(
  ( ! [X520,X516,X518,X517,X519] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X517,bool),'_dst_x1x0_2'(s(fun(X517,fun(X516,bool)),X518),s(X516,X520))),s(X517,X519))))) | s(bool,'T_0') = s(bool,happ(s(fun(X516,bool),happ(s(fun(X517,fun(X516,bool)),X518),s(X517,X519))),s(X516,X520)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f334])).
fof(f37847,plain,(
  ( ! [X509,X507,X508,X510,X506] : (s(bool,'F_0') != s(bool,happ(s(fun(X507,bool),'_dst_x1x0_2'(s(fun(X507,fun(X506,bool)),X508),s(X506,X510))),s(X507,X509))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X506,bool),happ(s(fun(X507,fun(X506,bool)),X508),s(X507,X509))),s(X506,X510)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f334])).
fof(f37986,plain,(
  ( ! [X492,X494,X493,X495,X491] : (s(bool,'F_0') != s(bool,happ(s(fun(X492,bool),'_dst_x1x0_2'(s(fun(X492,fun(X491,bool)),X493),s(X491,X495))),s(X492,X494))) | s(bool,'F_0') = s(bool,happ(s(fun(X491,bool),happ(s(fun(X492,fun(X491,bool)),X493),s(X492,X494))),s(X491,X495)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f37844,f5596])).
fof(f37844,plain,(
  ( ! [X492,X494,X493,X495,X491] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X492,bool),'_dst_x1x0_2'(s(fun(X492,fun(X491,bool)),X493),s(X491,X495))),s(X492,X494))) | s(bool,'F_0') = s(bool,happ(s(fun(X491,bool),happ(s(fun(X492,fun(X491,bool)),X493),s(X492,X494))),s(X491,X495)))) ) | $spl20),
  inference(superposition,[],[f6394,f334])).
fof(f37697,plain,(
  ( ! [X524,X522,X525,X521,X523] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X522,bool),happ(s(fun(X521,fun(X522,bool)),X523),s(X521,X525))),s(X522,X524))))) | s(bool,'T_0') = s(bool,happ(s(fun(X521,bool),'_dst_x1x0_2'(s(fun(X521,fun(X522,bool)),X523),s(X522,X524))),s(X521,X525)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f334])).
fof(f37694,plain,(
  ( ! [X509,X507,X508,X510,X506] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X507,bool),happ(s(fun(X506,fun(X507,bool)),X508),s(X506,X510))),s(X507,X509))))) | s(bool,'T_0') = s(bool,happ(s(fun(X506,bool),'_dst_x1x0_2'(s(fun(X506,fun(X507,bool)),X508),s(X507,X509))),s(X506,X510)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f334])).
fof(f37692,plain,(
  ( ! [X499,X500,X496,X498,X497] : (s(bool,'F_0') != s(bool,happ(s(fun(X497,bool),happ(s(fun(X496,fun(X497,bool)),X498),s(X496,X500))),s(X497,X499))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X496,bool),'_dst_x1x0_2'(s(fun(X496,fun(X497,bool)),X498),s(X497,X499))),s(X496,X500)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f334])).
fof(f37965,plain,(
  ( ! [X484,X482,X485,X481,X483] : (s(bool,'F_0') != s(bool,happ(s(fun(X482,bool),happ(s(fun(X481,fun(X482,bool)),X483),s(X481,X485))),s(X482,X484))) | s(bool,'F_0') = s(bool,happ(s(fun(X481,bool),'_dst_x1x0_2'(s(fun(X481,fun(X482,bool)),X483),s(X482,X484))),s(X481,X485)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f37689,f5596])).
fof(f37689,plain,(
  ( ! [X484,X482,X485,X481,X483] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X482,bool),happ(s(fun(X481,fun(X482,bool)),X483),s(X481,X485))),s(X482,X484))) | s(bool,'F_0') = s(bool,happ(s(fun(X481,bool),'_dst_x1x0_2'(s(fun(X481,fun(X482,bool)),X483),s(X482,X484))),s(X481,X485)))) ) | $spl20),
  inference(superposition,[],[f6394,f334])).
fof(f36482,plain,(
  ( ! [X368,X370,X367,X369] : (s(bool,'F_0') != s(bool,happ(s(fun('type.fcp.cart'(bool,X367),bool),X369),s('type.fcp.cart'(bool,X367),X368))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X367),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X367),X368))),s(fun('type.fcp.cart'(bool,X367),bool),X369),s(fun('type.num.num',fun('type.num.num',bool)),X370)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f36361,f5596])).
fof(f36361,plain,(
  ( ! [X368,X370,X367,X369] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun('type.fcp.cart'(bool,X367),bool),X369),s('type.fcp.cart'(bool,X367),X368))) | s(bool,'F_0') = s(bool,'const.wordSem.word_loc_CASE_3'(s('type.wordSem.word_loc'(X367),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X367),X368))),s(fun('type.fcp.cart'(bool,X367),bool),X369),s(fun('type.num.num',fun('type.num.num',bool)),X370)))) ) | $spl20),
  inference(superposition,[],[f6394,f323])).
fof(f35760,plain,(
  ( ! [X484,X482,X485,X481,X483] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X482,bool),X483),s(X482,happ(s(fun(X481,X482),X484),s(X481,X485))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X481,bool),'_dst_x0x1_2'(s(fun(X482,bool),X483),s(fun(X481,X482),X484))),s(X481,X485)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f333])).
fof(f35757,plain,(
  ( ! [X466,X469,X467,X468,X470] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X467,bool),X468),s(X467,happ(s(fun(X466,X467),X469),s(X466,X470))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X466,bool),'_dst_x0x1_2'(s(fun(X467,bool),X468),s(fun(X466,X467),X469))),s(X466,X470)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f333])).
fof(f35755,plain,(
  ( ! [X457,X459,X460,X456,X458] : (s(bool,'F_0') != s(bool,happ(s(fun(X457,bool),X458),s(X457,happ(s(fun(X456,X457),X459),s(X456,X460))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X456,bool),'_dst_x0x1_2'(s(fun(X457,bool),X458),s(fun(X456,X457),X459))),s(X456,X460)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f333])).
fof(f35877,plain,(
  ( ! [X445,X441,X443,X444,X442] : (s(bool,'F_0') != s(bool,happ(s(fun(X442,bool),X443),s(X442,happ(s(fun(X441,X442),X444),s(X441,X445))))) | s(bool,'F_0') = s(bool,happ(s(fun(X441,bool),'_dst_x0x1_2'(s(fun(X442,bool),X443),s(fun(X441,X442),X444))),s(X441,X445)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f35752,f5596])).
fof(f35752,plain,(
  ( ! [X445,X441,X443,X444,X442] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X442,bool),X443),s(X442,happ(s(fun(X441,X442),X444),s(X441,X445))))) | s(bool,'F_0') = s(bool,happ(s(fun(X441,bool),'_dst_x0x1_2'(s(fun(X442,bool),X443),s(fun(X441,X442),X444))),s(X441,X445)))) ) | $spl20),
  inference(superposition,[],[f6394,f333])).
fof(f35620,plain,(
  ( ! [X532,X534,X530,X533,X531] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X532,bool),'_dst_x0x1_2'(s(fun(X530,bool),X531),s(fun(X532,X530),X533))),s(X532,X534))))) | s(bool,'T_0') = s(bool,happ(s(fun(X530,bool),X531),s(X530,happ(s(fun(X532,X530),X533),s(X532,X534)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f333])).
fof(f35617,plain,(
  ( ! [X516,X518,X517,X519,X515] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X517,bool),'_dst_x0x1_2'(s(fun(X515,bool),X516),s(fun(X517,X515),X518))),s(X517,X519))))) | s(bool,'T_0') = s(bool,happ(s(fun(X515,bool),X516),s(X515,happ(s(fun(X517,X515),X518),s(X517,X519)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f333])).
fof(f35615,plain,(
  ( ! [X509,X505,X507,X508,X506] : (s(bool,'F_0') != s(bool,happ(s(fun(X507,bool),'_dst_x0x1_2'(s(fun(X505,bool),X506),s(fun(X507,X505),X508))),s(X507,X509))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X505,bool),X506),s(X505,happ(s(fun(X507,X505),X508),s(X507,X509)))))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f333])).
fof(f35857,plain,(
  ( ! [X492,X494,X490,X493,X491] : (s(bool,'F_0') != s(bool,happ(s(fun(X492,bool),'_dst_x0x1_2'(s(fun(X490,bool),X491),s(fun(X492,X490),X493))),s(X492,X494))) | s(bool,'F_0') = s(bool,happ(s(fun(X490,bool),X491),s(X490,happ(s(fun(X492,X490),X493),s(X492,X494)))))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f35612,f5596])).
fof(f35612,plain,(
  ( ! [X492,X494,X490,X493,X491] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X492,bool),'_dst_x0x1_2'(s(fun(X490,bool),X491),s(fun(X492,X490),X493))),s(X492,X494))) | s(bool,'F_0') = s(bool,happ(s(fun(X490,bool),X491),s(X490,happ(s(fun(X492,X490),X493),s(X492,X494)))))) ) | $spl20),
  inference(superposition,[],[f6394,f333])).
fof(f33510,plain,(
  ( ! [X461,X463,X459,X460,X462,X464] : (s(bool,'F_0') != s(bool,X463) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X459),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X459),bool),X460),s(fun('type.wordSem.word_loc'(X459),bool),X461),s(fun('type.wordSem.word_loc'(X459),bool),X462),s(bool,X463),s(bool,X464)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f33365,f5596])).
fof(f33365,plain,(
  ( ! [X461,X463,X459,X460,X462,X464] : (s(bool,X463) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X459),'const.stackSem.TimeOut_0'),s(fun('type.wordSem.word_loc'(X459),bool),X460),s(fun('type.wordSem.word_loc'(X459),bool),X461),s(fun('type.wordSem.word_loc'(X459),bool),X462),s(bool,X463),s(bool,X464)))) ) | $spl20),
  inference(superposition,[],[f6394,f326])).
fof(f32880,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (s(bool,'F_0') != s(bool,X440) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X435),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X435),bool),X436),s(fun('type.wordSem.word_loc'(X435),bool),X437),s(fun('type.wordSem.word_loc'(X435),bool),X438),s(bool,X439),s(bool,X440)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f32738,f5596])).
fof(f32738,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (s(bool,X440) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(X435),'const.stackSem.Error_0'),s(fun('type.wordSem.word_loc'(X435),bool),X436),s(fun('type.wordSem.word_loc'(X435),bool),X437),s(fun('type.wordSem.word_loc'(X435),bool),X438),s(bool,X439),s(bool,X440)))) ) | $spl20),
  inference(superposition,[],[f6394,f325])).
fof(f31566,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X4))),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f31112,f242])).
fof(f31564,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X0))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f31112,f1108])).
fof(f31538,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(fun(bool,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(bool,bool),'_i_0_0'))),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))) | ($spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f321,f31112,f1197])).
fof(f31605,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))),s(fun(bool,bool),'_i_0_0')))) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f31556,f335])).
fof(f31556,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))))) | ($spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f31112,f330])).
fof(f31112,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f31020,f342])).
fof(f31020,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl12 | $spl20)),
  inference(superposition,[],[f245,f23421])).
fof(f31111,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f31002,f350])).
fof(f31002,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f23421,f365])).
fof(f30992,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X4))),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f23421,f242])).
fof(f30990,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,X0))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f23421,f1108])).
fof(f31107,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))),s(fun(bool,bool),'_i_0_0')))) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f30987,f335])).
fof(f30987,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))))) | ($spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f23421,f331])).
fof(f11042,plain,(
  ( ! [X37,X38,X36] : (s(bool,'F_0') != s(bool,X37) | s(bool,'F_0') = s(bool,happ(s(fun(X36,bool),'_dst_x0_1'(s(bool,X37))),s(X36,X38)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f11012,f5596])).
fof(f11012,plain,(
  ( ! [X37,X38,X36] : (s(bool,X37) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X36,bool),'_dst_x0_1'(s(bool,X37))),s(X36,X38)))) ) | $spl20),
  inference(superposition,[],[f6394,f320])).
fof(f11043,plain,(
  ( ! [X39,X40] : (s(bool,'F_0') != s(bool,X39) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X39),s(fun('type.num.num',bool),X40),s('type.num.num','const.num.|48|_0')))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f11013,f5596])).
fof(f11013,plain,(
  ( ! [X39,X40] : (s(bool,X39) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X39),s(fun('type.num.num',bool),X40),s('type.num.num','const.num.|48|_0')))) ) | $spl20),
  inference(superposition,[],[f6394,f284])).
fof(f11044,plain,(
  ( ! [X43,X41,X42] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),X42),s('type.num.num',X43))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X41),s(fun('type.num.num',bool),X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f11014,f5596])).
fof(f11014,plain,(
  ( ! [X43,X41,X42] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun('type.num.num',bool),X42),s('type.num.num',X43))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X41),s(fun('type.num.num',bool),X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))))) ) | $spl20),
  inference(superposition,[],[f6394,f298])).
fof(f11045,plain,(
  ( ! [X45,X44] : (s(bool,'F_0') != s(bool,X44) | s(bool,'F_0') = s(bool,sK3(X44,X45,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X45)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f11015,f5596])).
fof(f11015,plain,(
  ( ! [X45,X44] : (s(bool,X44) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,sK3(X44,X45,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X45)))) ) | $spl20),
  inference(superposition,[],[f6394,f565])).
fof(f16001,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X1))) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f1108])).
fof(f16060,plain,(
  ( ! [X68,X69] : (s(bool,'F_0') != s(bool,X68) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK3(X68,X69,bool)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X69)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f565])).
fof(f19988,plain,(
  ( ! [X66,X67,X65] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num',X67))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X65),s(fun('type.num.num',bool),X66),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f298])).
fof(f19989,plain,(
  ( ! [X68,X69] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X68))) | s(bool,'T_0') = s(bool,sK3(X68,X69,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X69)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f565])).
fof(f20304,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'F_0') = s(bool,X29)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f20240,f350])).
fof(f20240,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X28))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'F_0') = s(bool,X29)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f1108])).
fof(f20385,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20)),
  inference(trivial_inequality_removal,[],[f20370])).
fof(f20370,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20301,f365])).
fof(f20577,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0')))) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f20419,f335])).
fof(f20419,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | ($spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f20301,f330])).
fof(f20703,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X57)))) ) | $spl24),
  inference(superposition,[],[f16764,f271])).
fof(f20707,plain,(
  ( ! [X66,X67] : (s(bool,X66) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK3(X66,X67,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X67)))) ) | $spl24),
  inference(superposition,[],[f16764,f565])).
fof(f20708,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl24),
  inference(superposition,[],[f16764,f1108])).
fof(f20710,plain,(
  ( ! [X6,X7] : (s(bool,X7) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X6))) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | $spl24),
  inference(superposition,[],[f16764,f242])).
fof(f20818,plain,(
  ( ! [X61] : (s(bool,X61) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X61)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f271])).
fof(f20822,plain,(
  ( ! [X70,X71] : (s(bool,X70) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK3(X70,X71,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X71)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f565])).
fof(f20823,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f1108])).
fof(f21137,plain,(
  ( ! [X151,X150] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X151),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0')))) | s(bool,X150) = s(bool,X151) | s(bool,'T_0') = s(bool,X150)) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f20943,f335])).
fof(f20943,plain,(
  ( ! [X151,X150] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X151))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | s(bool,X150) = s(bool,X151) | s(bool,'T_0') = s(bool,X150)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f330,f20385])).
fof(f21541,plain,(
  ( ! [X62,X63] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X63),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0')))) | s(bool,X62) != s(bool,X63) | s(bool,'T_0') = s(bool,X62)) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f21293,f335])).
fof(f21293,plain,(
  ( ! [X62,X63] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X63))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | s(bool,X62) != s(bool,X63) | s(bool,'T_0') = s(bool,X62)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f331,f20385])).
fof(f22421,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0')))) | p(s(bool,X0))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f22420,f335])).
fof(f22420,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))))))) ) | ($spl12 | $spl20)),
  inference(condensation,[],[f22419])).
fof(f22419,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X42))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | p(s(bool,X42)) | p(s(bool,X41))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f22274,f245])).
fof(f22274,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X42))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | p(s(bool,X42)) | p(s(bool,X41)) | s(bool,'T_0') = s(bool,X41)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f313,f20385])).
fof(f23421,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f20301,f321,f1197])).
fof(f23579,plain,(
  ( ! [X269,X268,X270] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X268,bool),X270),s(X268,X269))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X268,bool),bool),'_dstsel_0_x0_1'(s(X268,X269))),s(fun(X268,bool),X270)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f16819,f321])).
fof(f23681,plain,(
  ( ! [X255,X253,X254] : (s(bool,'F_0') != s(bool,happ(s(fun(X253,bool),X255),s(X253,X254))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X253,bool),bool),'_dstsel_0_x0_1'(s(X253,X254))),s(fun(X253,bool),X255)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f23574,f5596])).
fof(f23574,plain,(
  ( ! [X255,X253,X254] : (s(bool,sK6('_i_0_0',bool)) != s(bool,happ(s(fun(X253,bool),X255),s(X253,X254))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X253,bool),bool),'_dstsel_0_x0_1'(s(X253,X254))),s(fun(X253,bool),X255)))) ) | $spl20),
  inference(superposition,[],[f6394,f321])).
fof(f23582,plain,(
  ( ! [X277,X279,X278] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X277,bool),X279),s(X277,X278))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X277,bool),bool),'_dstsel_0_x0_1'(s(X277,X278))),s(fun(X277,bool),X279)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f321])).
fof(f20271,plain,(
  ( ! [X66,X67,X65] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num',X67))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X65),s(fun('type.num.num',bool),X66),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f298])).
fof(f20272,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X68))) | s(bool,'T_0') = s(bool,sK3(X68,X69,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X69)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f565])).
fof(f5676,plain,(
  s(bool,'T_0') != s(bool,sK6('_i_0_0',bool)) | $spl12),
  inference(subsumption_resolution,[],[f5618,f342])).
fof(f5618,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('_i_0_0',bool)) | $spl12),
  inference(superposition,[],[f245,f5596])).
fof(f5675,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f5612,f350])).
fof(f5612,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,sK6('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f5596,f365])).
fof(f59496,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(global_subsumption,[],[f58683,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f58683,plain,(
  ( ! [X142,X143,X141] : (s(bool,X141) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X141) = s(bool,'const.bool.DATATYPE_1'(s(X142,X143)))) ) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f53938])).
fof(f59492,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(global_subsumption,[],[f58656,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f58656,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x0x1_3'(s(fun(bool,fun(X115,X114)),X116),s(bool,'T_0'),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(bool,fun(X115,X114)),X116),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f50561])).
fof(f59491,plain,(
  $false | ($spl12 | $spl15 | $spl108)),
  inference(global_subsumption,[],[f58655,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f58655,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x0x1_3'(s(fun(bool,fun(X111,X110)),X112),s(bool,'T_0'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(bool,fun(X111,X110)),X112),s(fun(fun(bool,bool),bool),'!_1'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15 | $spl108)),
  inference(backward_demodulation,[],[f58002,f50560])).
fof(f50560,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x0x1_3'(s(fun(bool,fun(X111,X110)),X112),s(bool,'F_0'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(bool,fun(X111,X110)),X112),s(fun(fun(bool,bool),bool),'!_1'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15)),
  inference(forward_demodulation,[],[f50040,f335])).
fof(f50040,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(X111,X110),happ(s(fun(bool,fun(X111,X110)),X112),s(bool,'F_0'))),s(X111,happ(s(fun(fun(bool,bool),X111),X113),s(fun(bool,bool),'_i_0_0'))))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(bool,fun(X111,X110)),X112),s(fun(fun(bool,bool),bool),'!_1'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15)),
  inference(superposition,[],[f336,f10483])).
fof(f10483,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | ($spl12 | $spl15)),
  inference(forward_demodulation,[],[f10473,f5596])).
fof(f10473,plain,(
  s(bool,sK6('_i_0_0',bool)) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | ($spl12 | $spl15)),
  inference(unit_resulting_resolution,[],[f10287,f5597,f425])).
fof(f5597,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | $spl15),
  inference(cnf_transformation,[],[f5597_D])).
fof(f5597_D,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f59489,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(global_subsumption,[],[f58639,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f58639,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(bool,X114),happ(s(fun(X115,fun(bool,X114)),X116),s(X115,happ(s(fun(fun(bool,bool),X115),X117),s(fun(bool,bool),'_i_0_0'))))),s(bool,'T_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(X115,fun(bool,X114)),X116),s(fun(fun(bool,bool),X115),X117),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f50254])).
fof(f59488,plain,(
  $false | ($spl12 | $spl15 | $spl108)),
  inference(global_subsumption,[],[f58638,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f58638,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(bool,X110),happ(s(fun(X111,fun(bool,X110)),X112),s(X111,happ(s(fun(fun(bool,bool),X111),X113),s(fun(bool,bool),'_i_0_0'))))),s(bool,'T_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(X111,fun(bool,X110)),X112),s(fun(fun(bool,bool),X111),X113),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15 | $spl108)),
  inference(backward_demodulation,[],[f58002,f50253])).
fof(f50253,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(bool,X110),happ(s(fun(X111,fun(bool,X110)),X112),s(X111,happ(s(fun(fun(bool,bool),X111),X113),s(fun(bool,bool),'_i_0_0'))))),s(bool,'F_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(X111,fun(bool,X110)),X112),s(fun(fun(bool,bool),X111),X113),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15)),
  inference(superposition,[],[f336,f10483])).
fof(f59484,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481,f59483])).
fof(f59482,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479,f59481])).
fof(f59480,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474,f59479])).
fof(f59478,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59477,f235])).
fof(f59477,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f59476,f58002])).
fof(f59476,plain,(
  ( ! [X453,X455,X451,X452,X454,X450,X456] : (~p(s(bool,happ(s(fun(X450,bool),happ(s(fun(X451,fun(X450,bool)),X452),s(X451,X453))),s(X450,happ(s(fun(X454,X450),X455),s(X454,X456))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58596,f58002])).
fof(f58596,plain,(
  ( ! [X453,X455,X451,X452,X454,X450,X456] : (s(bool,'T_0') != s(bool,happ(s(fun(X454,bool),'_dst_x0x0x1_3'(s(fun(X451,fun(X450,bool)),X452),s(X451,X453),s(fun(X454,X450),X455))),s(X454,X456))) | ~p(s(bool,happ(s(fun(X450,bool),happ(s(fun(X451,fun(X450,bool)),X452),s(X451,X453))),s(X450,happ(s(fun(X454,X450),X455),s(X454,X456))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47946])).
fof(f59475,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472,f59474])).
fof(f59473,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470,f59472])).
fof(f59471,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429,f59470])).
fof(f59469,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59468,f235])).
fof(f59468,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f59467,f58002])).
fof(f59467,plain,(
  ( ! [X428,X430,X426,X432,X429,X431,X427] : (~p(s(bool,happ(s(fun(X426,bool),'_dst_x0x0x1_3'(s(fun(X427,fun(X428,bool)),X429),s(X427,X430),s(fun(X426,X428),X431))),s(X426,X432))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58582,f58002])).
fof(f58582,plain,(
  ( ! [X428,X430,X426,X432,X429,X431,X427] : (s(bool,'T_0') != s(bool,happ(s(fun(X428,bool),happ(s(fun(X427,fun(X428,bool)),X429),s(X427,X430))),s(X428,happ(s(fun(X426,X428),X431),s(X426,X432))))) | ~p(s(bool,happ(s(fun(X426,bool),'_dst_x0x0x1_3'(s(fun(X427,fun(X428,bool)),X429),s(X427,X430),s(fun(X426,X428),X431))),s(X426,X432))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f47748])).
fof(f59465,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(global_subsumption,[],[f58574,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429])).
fof(f58574,plain,(
  ( ! [X103,X105,X102,X104] : (s(X102,happ(s(fun(bool,X102),happ(s(fun(X103,fun(bool,X102)),X104),s(X103,X105))),s(bool,'T_0'))) = s(X102,happ(s(fun(fun(bool,bool),X102),'_dst_x0x0x1_3'(s(fun(X103,fun(bool,X102)),X104),s(X103,X105),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f47639])).
fof(f59464,plain,(
  $false | ($spl12 | $spl15 | $spl108)),
  inference(global_subsumption,[],[f58573,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429])).
fof(f58573,plain,(
  ( ! [X101,X99,X100,X98] : (s(X98,happ(s(fun(bool,X98),happ(s(fun(X99,fun(bool,X98)),X100),s(X99,X101))),s(bool,'T_0'))) = s(X98,happ(s(fun(fun(bool,bool),X98),'_dst_x0x0x1_3'(s(fun(X99,fun(bool,X98)),X100),s(X99,X101),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15 | $spl108)),
  inference(backward_demodulation,[],[f58002,f47638])).
fof(f47638,plain,(
  ( ! [X101,X99,X100,X98] : (s(X98,happ(s(fun(bool,X98),happ(s(fun(X99,fun(bool,X98)),X100),s(X99,X101))),s(bool,'F_0'))) = s(X98,happ(s(fun(fun(bool,bool),X98),'_dst_x0x0x1_3'(s(fun(X99,fun(bool,X98)),X100),s(X99,X101),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl12 | $spl15)),
  inference(superposition,[],[f335,f10483])).
fof(f59457,plain,(
  $false | ($spl12 | $spl20 | $spl24 | $spl108)),
  inference(global_subsumption,[],[f58544,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429])).
fof(f58544,plain,(
  ( ! [X266] : (s(bool,X266) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0'))) | s(bool,X266) = s(bool,'const.bool.DATATYPE_1'(s(bool,X266)))) ) | ($spl12 | $spl20 | $spl24 | $spl108)),
  inference(backward_demodulation,[],[f58002,f44268])).
fof(f59456,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(global_subsumption,[],[f58540,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429])).
fof(f58540,plain,(
  ( ! [X72] : (s(bool,X72) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))) | s(bool,X72) = s(bool,'const.bool.DATATYPE_1'(s(bool,X72)))) ) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f43727])).
fof(f59430,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417,f59429])).
fof(f59418,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413,f59417])).
fof(f59414,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411,f59413])).
fof(f59412,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409,f59411])).
fof(f59410,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407,f59409])).
fof(f59408,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405,f59407])).
fof(f59406,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403,f59405])).
fof(f59404,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401,f59403])).
fof(f59402,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399,f59401])).
fof(f59400,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397,f59399])).
fof(f59398,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395,f59397])).
fof(f59396,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393,f59395])).
fof(f59394,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391,f59393])).
fof(f59392,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389,f59391])).
fof(f59390,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387,f59389])).
fof(f59388,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385,f59387])).
fof(f59386,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383,f59385])).
fof(f59384,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381,f59383])).
fof(f59382,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379,f59381])).
fof(f59380,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348,f59379])).
fof(f59378,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59377,f235])).
fof(f59377,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f59376,f58002])).
fof(f59376,plain,(
  ( ! [X243,X241,X244,X242,X240] : (~p(s(bool,happ(s(fun(X240,bool),happ(s(fun(X241,fun(X240,bool)),X242),s(X241,X243))),s(X240,X244))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58419,f58002])).
fof(f58419,plain,(
  ( ! [X243,X241,X244,X242,X240] : (s(bool,'T_0') != s(bool,happ(s(fun(X241,bool),'_dst_x1x0_2'(s(fun(X241,fun(X240,bool)),X242),s(X240,X244))),s(X241,X243))) | ~p(s(bool,happ(s(fun(X240,bool),happ(s(fun(X241,fun(X240,bool)),X242),s(X241,X243))),s(X240,X244))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37801])).
fof(f59375,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59374,f235])).
fof(f59374,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f59373,f58002])).
fof(f59373,plain,(
  ( ! [X231,X233,X230,X234,X232] : (~p(s(bool,happ(s(fun(X230,bool),'_dst_x1x0_2'(s(fun(X230,fun(X231,bool)),X232),s(X231,X233))),s(X230,X234))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58408,f58002])).
fof(f58408,plain,(
  ( ! [X231,X233,X230,X234,X232] : (s(bool,'T_0') != s(bool,happ(s(fun(X231,bool),happ(s(fun(X230,fun(X231,bool)),X232),s(X230,X234))),s(X231,X233))) | ~p(s(bool,happ(s(fun(X230,bool),'_dst_x1x0_2'(s(fun(X230,fun(X231,bool)),X232),s(X231,X233))),s(X230,X234))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f37646])).
fof(f59370,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59369,f235])).
fof(f59369,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f59368,f58002])).
fof(f59368,plain,(
  ( ! [X198,X196,X199,X197,X195] : (~p(s(bool,happ(s(fun(X195,bool),'_dst_x0x1_2'(s(fun(X196,bool),X197),s(fun(X195,X196),X198))),s(X195,X199))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58382,f58002])).
fof(f58382,plain,(
  ( ! [X198,X196,X199,X197,X195] : (s(bool,'T_0') != s(bool,happ(s(fun(X196,bool),X197),s(X196,happ(s(fun(X195,X196),X198),s(X195,X199))))) | ~p(s(bool,happ(s(fun(X195,bool),'_dst_x0x1_2'(s(fun(X196,bool),X197),s(fun(X195,X196),X198))),s(X195,X199))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35710])).
fof(f59367,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59366,f235])).
fof(f59366,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f59365,f58002])).
fof(f59365,plain,(
  ( ! [X246,X244,X248,X247,X245] : (~p(s(bool,happ(s(fun(X244,bool),X245),s(X244,happ(s(fun(X246,X244),X247),s(X246,X248))))))) ) | $spl108),
  inference(subsumption_resolution,[],[f58371,f58002])).
fof(f58371,plain,(
  ( ! [X246,X244,X248,X247,X245] : (s(bool,'T_0') != s(bool,happ(s(fun(X246,bool),'_dst_x0x1_2'(s(fun(X244,bool),X245),s(fun(X246,X244),X247))),s(X246,X248))) | ~p(s(bool,happ(s(fun(X244,bool),X245),s(X244,happ(s(fun(X246,X244),X247),s(X246,X248))))))) ) | $spl108),
  inference(backward_demodulation,[],[f58002,f35570])).
fof(f59361,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(subsumption_resolution,[],[f58318,f58002])).
fof(f58318,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f31112])).
fof(f59359,plain,(
  $false | ($spl12 | $spl20 | $spl108)),
  inference(subsumption_resolution,[],[f58275,f58002])).
fof(f58275,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0'))) | ($spl12 | $spl20 | $spl108)),
  inference(backward_demodulation,[],[f58002,f20301])).
fof(f59357,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f58240,f58002])).
fof(f58240,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | $spl108),
  inference(backward_demodulation,[],[f58002,f13558])).
fof(f59356,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59355,f235])).
fof(f59355,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f58239,f58002])).
fof(f58239,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0')))))) | $spl108),
  inference(backward_demodulation,[],[f58002,f13557])).
fof(f59354,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f58236,f58002])).
fof(f58236,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | $spl108),
  inference(backward_demodulation,[],[f58002,f13497])).
fof(f59353,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f58231,f58002])).
fof(f58231,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'T_0'))) | $spl108),
  inference(backward_demodulation,[],[f58002,f13344])).
fof(f59352,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f58227,f58002])).
fof(f58227,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,'T_0'))) | $spl108),
  inference(backward_demodulation,[],[f58002,f13293])).
fof(f59351,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f59350,f235])).
fof(f59350,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(forward_demodulation,[],[f58226,f58002])).
fof(f58226,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0')))))) | $spl108),
  inference(backward_demodulation,[],[f58002,f13292])).
fof(f59349,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345,f59348])).
fof(f59346,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337,f59345])).
fof(f59338,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332,f59337])).
fof(f59333,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322,f59332])).
fof(f59324,plain,(
  $false | $spl108),
  inference(subsumption_resolution,[],[f58106,f235])).
fof(f58106,plain,(
  ~p(s(bool,'T_0')) | $spl108),
  inference(backward_demodulation,[],[f58002,f342])).
fof(f59323,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320,f59322])).
fof(f59321,plain,(
  $false | $spl108),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f4699,f4694,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13114,f13113,f13972,f13998,f14128,f14607,f14642,f14784,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f21584,f21708,f21707,f21706,f21689,f21688,f21846,f21845,f21844,f22019,f22087,f22086,f22085,f22066,f22157,f22156,f22155,f22136,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23601,f23607,f23611,f23615,f23724,f23723,f23722,f4479,f3837,f3834,f23624,f3835,f3832,f3836,f3833,f301,f302,f345,f3838,f23597,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f23588,f23593,f4451,f4449,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f12848,f12847,f5154,f4819,f5101,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f4702,f4703,f4698,f4697,f21636,f21653,f5586,f4218,f21637,f13496,f13343,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5039,f5018,f4769,f4748,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f13305,f5001,f4980,f4731,f4710,f13364,f5562,f5561,f23528,f5759,f3973,f5127,f23693,f5776,f23692,f5590,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f5779,f311,f5559,f5589,f5588,f5587,f5599,f310,f23669,f23527,f23526,f23496,f23495,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f23772,f23641,f23566,f23561,f23560,f23559,f23550,f23502,f23500,f23494,f23404,f22548,f22546,f22545,f22544,f22200,f22131,f21893,f21761,f21652,f21639,f16266,f15528,f15525,f15524,f15523,f15522,f15521,f15485,f15484,f15483,f15482,f15413,f15412,f15411,f15410,f15183,f15182,f15180,f14885,f14884,f14882,f14881,f14880,f13615,f13558,f13557,f13554,f13497,f13401,f13362,f13354,f13344,f13338,f13303,f13293,f13292,f13259,f13094,f6512,f6130,f6075,f6066,f6017,f6008,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f25612,f31940,f32005,f32007,f32022,f32029,f32004,f32098,f32097,f32096,f32095,f32091,f32075,f32074,f32161,f32168,f32169,f32170,f32204,f32174,f32176,f32186,f32187,f32188,f32213,f32192,f32194,f32243,f32242,f32241,f32240,f32297,f32442,f32493,f32659,f32660,f32661,f32664,f32665,f32667,f32669,f32674,f32716,f32723,f32724,f32725,f32729,f32730,f32749,f32755,f32893,f32894,f32760,f32766,f32770,f32776,f32780,f32784,f32793,f32933,f32932,f32931,f32930,f32925,f32907,f32986,f33019,f33018,f33017,f33016,f33011,f32993,f33072,f33113,f33284,f33285,f33286,f33289,f33290,f33292,f33294,f33299,f33343,f33350,f33351,f33352,f33356,f33357,f33376,f33382,f33523,f33524,f33387,f33396,f33400,f33406,f33410,f33414,f33423,f33566,f33565,f33564,f33563,f33557,f33556,f33538,f33537,f33778,f33808,f33807,f33806,f33805,f33864,f33872,f33871,f33902,f33903,f33904,f33905,f33923,f33924,f33925,f33926,f34073,f34123,f34332,f34350,f34349,f34367,f34450,f34449,f34448,f34447,f34441,f34505,f34562,f34563,f34565,f34567,f34568,f34569,f34980,f34979,f35045,f35117,f35118,f35120,f35122,f35123,f35124,f35205,f35360,f35384,f35383,f35382,f35381,f35377,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35830,f35398,f35400,f35551,f35552,f35553,f35554,f35560,f35561,f35562,f35563,f35565,f35566,f35568,f35569,f35570,f35571,f35572,f35574,f35575,f35576,f35577,f35578,f35579,f35580,f35582,f35587,f35588,f35589,f35850,f35591,f35597,f35598,f35599,f35600,f35601,f35604,f35607,f35609,f35634,f35635,f35636,f35637,f35638,f35639,f35640,f35651,f35652,f35653,f35654,f35655,f35664,f35666,f35668,f35670,f35672,f35674,f35681,f35694,f35695,f35696,f35697,f35703,f35704,f35705,f35708,f35709,f35710,f35711,f35712,f35714,f35715,f35716,f35717,f35718,f35719,f35720,f35722,f35727,f35728,f35729,f35870,f35731,f35737,f35738,f35739,f35740,f35741,f35744,f35747,f35749,f35774,f35775,f35776,f35777,f35778,f35779,f35780,f35791,f35792,f35793,f35794,f35795,f35804,f35806,f35808,f35810,f35812,f35814,f35821,f36217,f36275,f36276,f36277,f36439,f36281,f36283,f36470,f36346,f36347,f36348,f36353,f36383,f36500,f36501,f36388,f36402,f36406,f36415,f36419,f36423,f36432,f36669,f36841,f36964,f36970,f37020,f37022,f36975,f36980,f37187,f37363,f37362,f37361,f37360,f37356,f37364,f37365,f37366,f37367,f37936,f37371,f37373,f37946,f37494,f37495,f37496,f37497,f37498,f37594,f37614,f37628,f37629,f37630,f37631,f37639,f37640,f37641,f37644,f37645,f37646,f37647,f37648,f37650,f37651,f37652,f37653,f37654,f37655,f37656,f37658,f37663,f37664,f37665,f37957,f37667,f37673,f37674,f37675,f37676,f37677,f37680,f37683,f37686,f37711,f37712,f37713,f37714,f37715,f37716,f37717,f37733,f37734,f37735,f37736,f37737,f37746,f37748,f37750,f37752,f37754,f37756,f37764,f37765,f37779,f37780,f37781,f37782,f37790,f37791,f37792,f37793,f37794,f37795,f37796,f37799,f37800,f37801,f37802,f37803,f37805,f37806,f37807,f37808,f37809,f37810,f37811,f37813,f37818,f37819,f37820,f37978,f37822,f37828,f37829,f37830,f37831,f37832,f37835,f37838,f37841,f37866,f37867,f37868,f37869,f37870,f37871,f37872,f37888,f37889,f37890,f37891,f37892,f37901,f37903,f37905,f37907,f37909,f37911,f37919,f38475,f38476,f38477,f38561,f38562,f38563,f38565,f38484,f38485,f38486,f38566,f38488,f38567,f38568,f38569,f38570,f38571,f38572,f38573,f38496,f38497,f38498,f38574,f38575,f38576,f38578,f38505,f38506,f38507,f38579,f38509,f38580,f38581,f38582,f38583,f38584,f38585,f38586,f38587,f38518,f38519,f38520,f38588,f38522,f38589,f38590,f38591,f38592,f38593,f38594,f38595,f38746,f38750,f38753,f38755,f38756,f38758,f39286,f39287,f39288,f39465,f39292,f39294,f39352,f39499,f39361,f39362,f39363,f39368,f39401,f39529,f39530,f39406,f39424,f39428,f39437,f39441,f39445,f39543,f39544,f39545,f39458,f39605,f39609,f39612,f39614,f39615,f39618,f40241,f40281,f40535,f40536,f40537,f40736,f40541,f40543,f40769,f40611,f40612,f40613,f40618,f40652,f40802,f40803,f40657,f40677,f40681,f40690,f40694,f40698,f40816,f40817,f40818,f40713,f40889,f40893,f40896,f40898,f40899,f40903,f41054,f41058,f41061,f41063,f41064,f41068,f41431,f41432,f41433,f41640,f41437,f41439,f41673,f41509,f41510,f41511,f41516,f41552,f41708,f41709,f41557,f41580,f41584,f41593,f41597,f41601,f41722,f41723,f41724,f41617,f43359,f43498,f43504,f43509,f43511,f43515,f43517,f43341,f43293,f43657,f42216,f42217,f42218,f42219,f42220,f42221,f42222,f42223,f42224,f42225,f42226,f42227,f42228,f42229,f42230,f42231,f42232,f42233,f43281,f42289,f42291,f42292,f42293,f42294,f42295,f42296,f42297,f42298,f42299,f42300,f43737,f43218,f43216,f44043,f43215,f43204,f43202,f43201,f43200,f44066,f42831,f42849,f42853,f42854,f42855,f42856,f42857,f42859,f42863,f42895,f42930,f42931,f44234,f44260,f44273,f43101,f43119,f42903,f44577,f44578,f44579,f44583,f44584,f44796,f44586,f44588,f44827,f44662,f44663,f44664,f44669,f44702,f44861,f44862,f44707,f44732,f44736,f44745,f44749,f44753,f44874,f44875,f44876,f44770,f45526,f45306,f45307,f45308,f45309,f45313,f45314,f45528,f45316,f45318,f45329,f45362,f45363,f45364,f45552,f45555,f45559,f45399,f45400,f45401,f45406,f45434,f45440,f45593,f45594,f45445,f45473,f45477,f45486,f45490,f45494,f45606,f45607,f45608,f45512,f45644,f45645,f46500,f46503,f46454,f47326,f47325,f47324,f47323,f47319,f47327,f47328,f47329,f47330,f47334,f47335,f48117,f47337,f47339,f47483,f47484,f47485,f47486,f47487,f47488,f47489,f47490,f47491,f47492,f47493,f47627,f47628,f47629,f47630,f47631,f47632,f47633,f47634,f47635,f47636,f47640,f47641,f47642,f47643,f47644,f47650,f47652,f47653,f47654,f47655,f47660,f48186,f47662,f47664,f47675,f47676,f47677,f47678,f47679,f47680,f47681,f48202,f48203,f47682,f47705,f47706,f47727,f47728,f47729,f47730,f47742,f47743,f47744,f47746,f47747,f47748,f47749,f47750,f47752,f47753,f47754,f47755,f47756,f47757,f47758,f47760,f47765,f47766,f47767,f48215,f47773,f47779,f47780,f47781,f47782,f47783,f47786,f47789,f47792,f47816,f47822,f47823,f47824,f47825,f47826,f47827,f47828,f47857,f47858,f47859,f47860,f47861,f47870,f47872,f47874,f47876,f47878,f47880,f47891,f47892,f47896,f47898,f47900,f47922,f47923,f47924,f47925,f47939,f47940,f47941,f47942,f47944,f47945,f47946,f47947,f47948,f47950,f47951,f47952,f47953,f47954,f47955,f47956,f47958,f47963,f47964,f47965,f48242,f47971,f47977,f47978,f47979,f47980,f47981,f47984,f47987,f47990,f48014,f48020,f48021,f48022,f48023,f48024,f48025,f48026,f48055,f48056,f48057,f48058,f48059,f48068,f48070,f48072,f48074,f48076,f48078,f48090,f48091,f48095,f48097,f49084,f49083,f49085,f49086,f49087,f49088,f49089,f49090,f49091,f49092,f49093,f49094,f49280,f49281,f49287,f49288,f49289,f49290,f49291,f49292,f49293,f49343,f49344,f49345,f49346,f49360,f49361,f49367,f49368,f49369,f49370,f49371,f49372,f49373,f49404,f49405,f49426,f49427,f49428,f49429,f49592,f49593,f49594,f49595,f49596,f49597,f49598,f49599,f49600,f49601,f49602,f49603,f49604,f49605,f49606,f49607,f49608,f49609,f49610,f49611,f50028,f50029,f50558,f50030,f50031,f50032,f50033,f50034,f50035,f50036,f50037,f50038,f50042,f50043,f50045,f50046,f50047,f50048,f50049,f50567,f50057,f50058,f50059,f50060,f50065,f50570,f50067,f50069,f50081,f50082,f50083,f50084,f50085,f50086,f50087,f50088,f50089,f50090,f50091,f50581,f50582,f50092,f50093,f50094,f50095,f50096,f50097,f50098,f50099,f50241,f50242,f50243,f50244,f50245,f50246,f50247,f50248,f50249,f50250,f50251,f50255,f50256,f50258,f50259,f50260,f50261,f50262,f50268,f50270,f50271,f50272,f50273,f50278,f50586,f50280,f50282,f50294,f50295,f50296,f50297,f50298,f50299,f50300,f50597,f50301,f50302,f50303,f50304,f50305,f50306,f50310,f50311,f50599,f50313,f50315,f50327,f50330,f50331,f50332,f50372,f50373,f50374,f50375,f50376,f50377,f50631,f50412,f50413,f50414,f50419,f50447,f50453,f50454,f50460,f50672,f50673,f50465,f50500,f50504,f50513,f50517,f50521,f50685,f50686,f50687,f50542,f50962,f50963,f50965,f50966,f50967,f50968,f50971,f50972,f50984,f51044,f51050,f51060,f51059,f51061,f51062,f51063,f51064,f51065,f51066,f51067,f51068,f51069,f51070,f51071,f51072,f51270,f51276,f51277,f51278,f51279,f51280,f51281,f51282,f51283,f51339,f51340,f51341,f51342,f51358,f51359,f51360,f51366,f51367,f51368,f51369,f51370,f51371,f51372,f51373,f51410,f51411,f51412,f51413,f51414,f51435,f51436,f51437,f51438,f51542,f51548,f51553,f51555,f51556,f51562,f53510,f53508,f53457,f53452,f53855,f51910,f51911,f51912,f51913,f51914,f51915,f51916,f51917,f51918,f51919,f51920,f51921,f51922,f51923,f51924,f51925,f51926,f51927,f51928,f51929,f51930,f51931,f51933,f53443,f53442,f51995,f51996,f51999,f52000,f52001,f52002,f52003,f52004,f52005,f52006,f52007,f52008,f52009,f52010,f53300,f53296,f54480,f53295,f53284,f53283,f53282,f53281,f54501,f54507,f54512,f52831,f52834,f52835,f52836,f52857,f52862,f52863,f52864,f52865,f52866,f52868,f52870,f52871,f52906,f52950,f52951,f54662,f54697,f54708,f53143,f53146,f53147,f53148,f53169,f55356,f54881,f54882,f54883,f54884,f54885,f54886,f54887,f54888,f54889,f54890,f54891,f54892,f54893,f54894,f54895,f54896,f54897,f54898,f54899,f54900,f54901,f54902,f54903,f54904,f54905,f54906,f54937,f54938,f54939,f54940,f54941,f54942,f54943,f54944,f54945,f55069,f55096,f55097,f55098,f55099,f55103,f55104,f55358,f55106,f55108,f55121,f55122,f55123,f55124,f55125,f55167,f55168,f55395,f55203,f55204,f55205,f55210,f55242,f55246,f55252,f55436,f55437,f55257,f55299,f55303,f55312,f55316,f55320,f55450,f55451,f55452,f55340,f55665,f55979,f55978,f55977,f55976,f56042,f57821,f57822,f57823,f57826,f57831,f57551,f57552,f57553,f57554,f57558,f57559,f57833,f57561,f57563,f57576,f57577,f57846,f57848,f57849,f57851,f57852,f57855,f57858,f57861,f57863,f57865,f57866,f57868,f57872,f57874,f57877,f57879,f57881,f57884,f57886,f57889,f57891,f57894,f57656,f57657,f57658,f57897,f57899,f57663,f57903,f57907,f57695,f57707,f57943,f57944,f57945,f57946,f57712,f57947,f57948,f57753,f57756,f57949,f57952,f57954,f57760,f57769,f57956,f57773,f57958,f57777,f57960,f57962,f57963,f57964,f57798,f57853,f58022,f58021,f58018,f58017,f58016,f58015,f58014,f58013,f58088,f58089,f58090,f58012,f58011,f58009,f58007,f58096,f58097,f58098,f58006,f58005,f58004,f58101,f58102,f58002,f59320])).
fof(f58082,plain,(
  $false | ($spl108 | $spl156)),
  inference(subsumption_resolution,[],[f58019,f57913])).
fof(f58019,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X0),s('type.wordSem.word_loc'(sK0),sK1)))) ) | $spl108),
  inference(unit_resulting_resolution,[],[f350,f57853,f1037])).
fof(f58003,plain,(
  $false | $spl108),
  inference(unit_resulting_resolution,[],[f350,f320,f57853,f368])).
fof(f57986,plain,(
  $false | $spl108),
  inference(unit_resulting_resolution,[],[f320,f57853,f249])).
fof(f57969,plain,(
  $false | ($spl108 | $spl112)),
  inference(subsumption_resolution,[],[f57853,f57856])).
fof(f57968,plain,(
  $false | ($spl120 | $spl128)),
  inference(subsumption_resolution,[],[f57966,f342])).
fof(f57966,plain,(
  p(s(bool,'F_0')) | ($spl120 | $spl128)),
  inference(backward_demodulation,[],[f57862,f57870])).
fof(f57967,plain,(
  $false | $spl120),
  inference(subsumption_resolution,[],[f57965,f342])).
fof(f57965,plain,(
  p(s(bool,'F_0')) | $spl120),
  inference(backward_demodulation,[],[f57862,f57831])).
fof(f57950,plain,(
  ( ! [X1404] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1404),s('type.wordSem.word_loc'(sK0),sK1)))))) ) | $spl162),
  inference(cnf_transformation,[],[f57950_D])).
fof(f57950_D,plain,(
  ( ! [X1404] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1404),s('type.wordSem.word_loc'(sK0),sK1)))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f57955,plain,(
  ( ! [X1416] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1416),s('type.wordSem.word_loc'(sK0),sK2)))))) ) | $spl168),
  inference(cnf_transformation,[],[f57955_D])).
fof(f57955_D,plain,(
  ( ! [X1416] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1416),s('type.wordSem.word_loc'(sK0),sK2)))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f57954,plain,(
  ( ! [X1416,X1417] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1416),s('type.wordSem.word_loc'(sK0),sK2))))) | s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1417),s('type.wordSem.word_loc'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f57759,f329])).
fof(f57759,plain,(
  ( ! [X1416,X1418,X1417,X1419,X1415] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1417),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),'_i_0_0'),s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1415),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1416),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1417),s('type.wordSem.word_loc'(sK0),X1418),s('type.wordSem.word_loc'(sK0),X1419)))))) )),
  inference(superposition,[],[f2651,f40281])).
fof(f57953,plain,(
  ( ! [X1414,X1409,X1413] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1413,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1409),s('type.wordSem.word_loc'(sK0),sK2))))),s(X1413,X1414)))) ) | $spl166),
  inference(cnf_transformation,[],[f57953_D])).
fof(f57953_D,plain,(
  ( ! [X1414,X1409,X1413] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1413,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1409),s('type.wordSem.word_loc'(sK0),sK2))))),s(X1413,X1414)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f57952,plain,(
  ( ! [X1410,X1414,X1409,X1413] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1413,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1409),s('type.wordSem.word_loc'(sK0),sK2))))),s(X1413,X1414))) | s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1410),s('type.wordSem.word_loc'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f57758,f329])).
fof(f57758,plain,(
  ( ! [X1408,X1410,X1412,X1414,X1409,X1411,X1413] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1410),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),happ(s(fun(X1413,'type.wordSem.word_loc'(sK0)),'_dst_x0_1'(s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1408),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1409),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1410),s('type.wordSem.word_loc'(sK0),X1411),s('type.wordSem.word_loc'(sK0),X1412))))),s(X1413,X1414)))) )),
  inference(superposition,[],[f2652,f40281])).
fof(f57951,plain,(
  ( ! [X1407,X1403] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1403),s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X1407),s('type.num.num','const.num.|48|_0')))) ) | $spl164),
  inference(cnf_transformation,[],[f57951_D])).
fof(f57951_D,plain,(
  ( ! [X1407,X1403] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1403),s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X1407),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f57949,plain,(
  ( ! [X1407,X1404,X1403] : (s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1403),s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X1407),s('type.num.num','const.num.|48|_0'))) | s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1404),s('type.wordSem.word_loc'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f57757,f329])).
fof(f57757,plain,(
  ( ! [X1407,X1402,X1404,X1406,X1403,X1405] : (s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))) != s('type.stackSem.result'(sK0),'const.stackSem.Halt_1'(s('type.wordSem.word_loc'(sK0),happ(s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1404),s('type.wordSem.word_loc'(sK0),sK1))))) | s('type.wordSem.word_loc'(sK0),sK1) = s('type.wordSem.word_loc'(sK0),'const.ind_type.FCONS_3'(s('type.wordSem.word_loc'(sK0),'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1402),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1403),s(fun('type.wordSem.word_loc'(sK0),'type.wordSem.word_loc'(sK0)),X1404),s('type.wordSem.word_loc'(sK0),X1405),s('type.wordSem.word_loc'(sK0),X1406))),s(fun('type.num.num','type.wordSem.word_loc'(sK0)),X1407),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2653,f40281])).
fof(f57859,plain,(
  ( ! [X409] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X409),s('type.wordSem.word_loc'(sK0),sK1)))) ) | $spl116),
  inference(cnf_transformation,[],[f57859_D])).
fof(f57859_D,plain,(
  ( ! [X409] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X409),s('type.wordSem.word_loc'(sK0),sK1)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f57917,plain,(
  ( ! [X698] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X698),s('type.wordSem.word_loc'(sK0),sK2)))))) ) | $spl160),
  inference(cnf_transformation,[],[f57917_D])).
fof(f57917_D,plain,(
  ( ! [X698] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X698),s('type.wordSem.word_loc'(sK0),sK2)))))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f57916,plain,(
  ( ! [X699,X698] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X698),s('type.wordSem.word_loc'(sK0),sK2))))) | s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X699),s('type.wordSem.word_loc'(sK0),sK1)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f57675,f329])).
fof(f57675,plain,(
  ( ! [X697,X699,X700,X698,X701] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X699),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X697),s(fun('type.wordSem.word_loc'(sK0),bool),X698),s(fun('type.wordSem.word_loc'(sK0),bool),X699),s(bool,X700),s(bool,X701)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f11041,f40281])).
fof(f57913,plain,(
  ( ! [X689] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X689),s('type.wordSem.word_loc'(sK0),sK1)))) ) | $spl156),
  inference(cnf_transformation,[],[f57913_D])).
fof(f57913_D,plain,(
  ( ! [X689] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X689),s('type.wordSem.word_loc'(sK0),sK1)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f57914,plain,(
  ( ! [X688] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X688),s('type.wordSem.word_loc'(sK0),sK2)))))) ) | $spl158),
  inference(cnf_transformation,[],[f57914_D])).
fof(f57914_D,plain,(
  ( ! [X688] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X688),s('type.wordSem.word_loc'(sK0),sK2)))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f57912,plain,(
  ( ! [X689,X688] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X688),s('type.wordSem.word_loc'(sK0),sK2))))) | s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X689),s('type.wordSem.word_loc'(sK0),sK1)))) ) | $spl8),
  inference(forward_demodulation,[],[f57673,f329])).
fof(f57673,plain,(
  ( ! [X689,X691,X687,X688,X690] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X689),s('type.wordSem.word_loc'(sK0),sK1))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X687),s(fun('type.wordSem.word_loc'(sK0),bool),X688),s(fun('type.wordSem.word_loc'(sK0),bool),X689),s(bool,X690),s(bool,X691)))))) ) | $spl8),
  inference(superposition,[],[f9656,f40281])).
fof(f9656,plain,(
  ( ! [X45] : (s(bool,'T_0') != s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X45)))) ) | $spl8),
  inference(forward_demodulation,[],[f9616,f4300])).
fof(f4300,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | $spl8),
  inference(unit_resulting_resolution,[],[f350,f4241,f1037])).
fof(f4241,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1')))) | $spl8),
  inference(unit_resulting_resolution,[],[f4233,f2633])).
fof(f9616,plain,(
  ( ! [X45] : (s(bool,X45) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X45)))) ) | $spl8),
  inference(superposition,[],[f4602,f271])).
fof(f4602,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X11)) ) | $spl8),
  inference(subsumption_resolution,[],[f4553,f235])).
fof(f4553,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X11)) ) | $spl8),
  inference(superposition,[],[f368,f4300])).
fof(f57856,plain,(
  ( ! [X404] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X404),s('type.wordSem.word_loc'(sK0),sK1))))) ) | $spl112),
  inference(cnf_transformation,[],[f57856_D])).
fof(f57856_D,plain,(
  ( ! [X404] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X404),s('type.wordSem.word_loc'(sK0),sK1))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f57908,plain,(
  ( ! [X667,X671] : (p(s(bool,happ(s(fun(fun(X671,bool),bool),'!_1'),s(fun(X671,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X667),s('type.wordSem.word_loc'(sK0),sK2))))))))) ) | $spl154),
  inference(cnf_transformation,[],[f57908_D])).
fof(f57908_D,plain,(
  ( ! [X667,X671] : (p(s(bool,happ(s(fun(fun(X671,bool),bool),'!_1'),s(fun(X671,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X667),s('type.wordSem.word_loc'(sK0),sK2))))))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f57907,plain,(
  ( ! [X668,X667,X671] : (p(s(bool,happ(s(fun(fun(X671,bool),bool),'!_1'),s(fun(X671,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X667),s('type.wordSem.word_loc'(sK0),sK2)))))))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X668),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57669,f329])).
fof(f57669,plain,(
  ( ! [X666,X668,X670,X667,X669,X671] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X668),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,happ(s(fun(fun(X671,bool),bool),'!_1'),s(fun(X671,bool),'_dst_x0_1'(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X666),s(fun('type.wordSem.word_loc'(sK0),bool),X667),s(fun('type.wordSem.word_loc'(sK0),bool),X668),s(bool,X669),s(bool,X670))))))))) )),
  inference(superposition,[],[f5586,f40281])).
fof(f57904,plain,(
  ( ! [X655,X651] : (p(s(bool,happ(s(fun(fun(X655,bool),bool),'?_1'),s(fun(X655,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X651),s('type.wordSem.word_loc'(sK0),sK2))))))))) ) | $spl152),
  inference(cnf_transformation,[],[f57904_D])).
fof(f57904_D,plain,(
  ( ! [X655,X651] : (p(s(bool,happ(s(fun(fun(X655,bool),bool),'?_1'),s(fun(X655,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X651),s('type.wordSem.word_loc'(sK0),sK2))))))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f57903,plain,(
  ( ! [X652,X655,X651] : (p(s(bool,happ(s(fun(fun(X655,bool),bool),'?_1'),s(fun(X655,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X651),s('type.wordSem.word_loc'(sK0),sK2)))))))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X652),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57666,f329])).
fof(f57666,plain,(
  ( ! [X652,X654,X650,X653,X655,X651] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X652),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,happ(s(fun(fun(X655,bool),bool),'?_1'),s(fun(X655,bool),'_dst_x0_1'(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X650),s(fun('type.wordSem.word_loc'(sK0),bool),X651),s(fun('type.wordSem.word_loc'(sK0),bool),X652),s(bool,X653),s(bool,X654))))))))) )),
  inference(superposition,[],[f4218,f40281])).
fof(f57900,plain,(
  ( ! [X621,X618] : (p(s(bool,'|dollar|exists_1'(s(fun(X621,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X618),s('type.wordSem.word_loc'(sK0),sK1))))))))) ) | $spl150),
  inference(cnf_transformation,[],[f57900_D])).
fof(f57900_D,plain,(
  ( ! [X621,X618] : (p(s(bool,'|dollar|exists_1'(s(fun(X621,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X618),s('type.wordSem.word_loc'(sK0),sK1))))))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f57862,plain,(
  ( ! [X413] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X413),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl120),
  inference(cnf_transformation,[],[f57862_D])).
fof(f57862_D,plain,(
  ( ! [X413] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X413),s('type.wordSem.word_loc'(sK0),sK2)))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f57899,plain,(
  ( ! [X621,X617,X618] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X617),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,'|dollar|exists_1'(s(fun(X621,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X618),s('type.wordSem.word_loc'(sK0),sK1))))))))) )),
  inference(forward_demodulation,[],[f57660,f329])).
fof(f57660,plain,(
  ( ! [X621,X617,X619,X620,X616,X618] : (p(s(bool,'|dollar|exists_1'(s(fun(X621,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X618),s('type.wordSem.word_loc'(sK0),sK1)))))))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X616),s(fun('type.wordSem.word_loc'(sK0),bool),X617),s(fun('type.wordSem.word_loc'(sK0),bool),X618),s(bool,X619),s(bool,X620)))) )),
  inference(superposition,[],[f1936,f40281])).
fof(f57898,plain,(
  ( ! [X615,X611] : (p(s(bool,'|dollar|exists_1'(s(fun(X615,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X611),s('type.wordSem.word_loc'(sK0),sK2))))))))) ) | $spl148),
  inference(cnf_transformation,[],[f57898_D])).
fof(f57898_D,plain,(
  ( ! [X615,X611] : (p(s(bool,'|dollar|exists_1'(s(fun(X615,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X611),s('type.wordSem.word_loc'(sK0),sK2))))))))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f57897,plain,(
  ( ! [X615,X611,X612] : (p(s(bool,'|dollar|exists_1'(s(fun(X615,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X611),s('type.wordSem.word_loc'(sK0),sK2)))))))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X612),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57659,f329])).
fof(f57659,plain,(
  ( ! [X613,X615,X611,X612,X614,X610] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X612),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X615,bool),'_dst_x0_1'(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X610),s(fun('type.wordSem.word_loc'(sK0),bool),X611),s(fun('type.wordSem.word_loc'(sK0),bool),X612),s(bool,X613),s(bool,X614))))))))) )),
  inference(superposition,[],[f1802,f40281])).
fof(f57895,plain,(
  ( ! [X560,X556] : (s(bool,X560) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X556),s('type.wordSem.word_loc'(sK0),sK2))) | s(bool,'F_0') = s(bool,X560)) ) | $spl146),
  inference(cnf_transformation,[],[f57895_D])).
fof(f57895_D,plain,(
  ( ! [X560,X556] : (s(bool,X560) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X556),s('type.wordSem.word_loc'(sK0),sK2))) | s(bool,'F_0') = s(bool,X560)) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f57894,plain,(
  ( ! [X557,X560,X556] : (s(bool,X560) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X556),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X557),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,'F_0') = s(bool,X560)) )),
  inference(forward_demodulation,[],[f57650,f329])).
fof(f57650,plain,(
  ( ! [X557,X559,X555,X560,X556,X558] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X557),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,X560) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X555),s(fun('type.wordSem.word_loc'(sK0),bool),X556),s(fun('type.wordSem.word_loc'(sK0),bool),X557),s(bool,X558),s(bool,X559))) | s(bool,'F_0') = s(bool,X560)) )),
  inference(superposition,[],[f1037,f40281])).
fof(f57853,plain,(
  ( ! [X399] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X399),s('type.wordSem.word_loc'(sK0),sK1))))) ) | $spl108),
  inference(cnf_transformation,[],[f57853_D])).
fof(f57853_D,plain,(
  ( ! [X399] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X399),s('type.wordSem.word_loc'(sK0),sK1))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f57890,plain,(
  ( ! [X523,X519] : (s(bool,X523) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X519),s('type.wordSem.word_loc'(sK0),sK2))) | s(bool,'T_0') = s(bool,X523)) ) | $spl144),
  inference(cnf_transformation,[],[f57890_D])).
fof(f57890_D,plain,(
  ( ! [X523,X519] : (s(bool,X523) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X519),s('type.wordSem.word_loc'(sK0),sK2))) | s(bool,'T_0') = s(bool,X523)) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f57889,plain,(
  ( ! [X520,X523,X519] : (s(bool,X523) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X519),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X520),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,'T_0') = s(bool,X523)) )),
  inference(forward_demodulation,[],[f57644,f329])).
fof(f57644,plain,(
  ( ! [X520,X522,X518,X521,X523,X519] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X520),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,X523) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X518),s(fun('type.wordSem.word_loc'(sK0),bool),X519),s(fun('type.wordSem.word_loc'(sK0),bool),X520),s(bool,X521),s(bool,X522))) | s(bool,'T_0') = s(bool,X523)) )),
  inference(superposition,[],[f425,f40281])).
fof(f57887,plain,(
  ( ! [X512,X508] : (s(bool,X512) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X508),s('type.wordSem.word_loc'(sK0),sK2))) | s(bool,'T_0') = s(bool,X512)) ) | $spl142),
  inference(cnf_transformation,[],[f57887_D])).
fof(f57887_D,plain,(
  ( ! [X512,X508] : (s(bool,X512) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X508),s('type.wordSem.word_loc'(sK0),sK2))) | s(bool,'T_0') = s(bool,X512)) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f57886,plain,(
  ( ! [X509,X512,X508] : (s(bool,X512) != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X508),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X509),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,'T_0') = s(bool,X512)) )),
  inference(forward_demodulation,[],[f57642,f329])).
fof(f57642,plain,(
  ( ! [X509,X511,X507,X512,X508,X510] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X509),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,X512) != s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X507),s(fun('type.wordSem.word_loc'(sK0),bool),X508),s(fun('type.wordSem.word_loc'(sK0),bool),X509),s(bool,X510),s(bool,X511))) | s(bool,'T_0') = s(bool,X512)) )),
  inference(superposition,[],[f368,f40281])).
fof(f57885,plain,(
  ( ! [X478,X482] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X482),s(fun('type.wordSem.word_loc'(sK0),bool),X478))),s('type.wordSem.word_loc'(sK0),sK2))))) ) | $spl140),
  inference(cnf_transformation,[],[f57885_D])).
fof(f57885_D,plain,(
  ( ! [X478,X482] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X482),s(fun('type.wordSem.word_loc'(sK0),bool),X478))),s('type.wordSem.word_loc'(sK0),sK2))))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f57884,plain,(
  ( ! [X478,X482,X479] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X482),s(fun('type.wordSem.word_loc'(sK0),bool),X478))),s('type.wordSem.word_loc'(sK0),sK2)))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X479),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57883,f335])).
fof(f57883,plain,(
  ( ! [X478,X482,X479] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X482))),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X478),s('type.wordSem.word_loc'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X479),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57637,f329])).
fof(f57637,plain,(
  ( ! [X478,X480,X482,X477,X479,X481] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X479),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X482))),s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X477),s(fun('type.wordSem.word_loc'(sK0),bool),X478),s(fun('type.wordSem.word_loc'(sK0),bool),X479),s(bool,X480),s(bool,X481))))))) )),
  inference(superposition,[],[f318,f40281])).
fof(f57882,plain,(
  ( ! [X467,X470] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X467),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X470))))) ) | $spl138),
  inference(cnf_transformation,[],[f57882_D])).
fof(f57882_D,plain,(
  ( ! [X467,X470] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X467),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X470))))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f57870,plain,(
  ( ! [X436] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X436),s('type.wordSem.word_loc'(sK0),sK2))))) ) | $spl128),
  inference(cnf_transformation,[],[f57870_D])).
fof(f57870_D,plain,(
  ( ! [X436] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X436),s('type.wordSem.word_loc'(sK0),sK2))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f57881,plain,(
  ( ! [X466,X467,X470] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X466),s('type.wordSem.word_loc'(sK0),sK2)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X467),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X470))))) )),
  inference(forward_demodulation,[],[f57635,f329])).
fof(f57635,plain,(
  ( ! [X466,X469,X465,X467,X468,X470] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X467),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X470)))) | p(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X465),s(fun('type.wordSem.word_loc'(sK0),bool),X466),s(fun('type.wordSem.word_loc'(sK0),bool),X467),s(bool,X468),s(bool,X469))))) )),
  inference(superposition,[],[f317,f40281])).
fof(f57880,plain,(
  ( ! [X460,X464] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X460),s('type.wordSem.word_loc'(sK0),sK2))))),s(bool,X464)))) | p(s(bool,X464))) ) | $spl136),
  inference(cnf_transformation,[],[f57880_D])).
fof(f57880_D,plain,(
  ( ! [X460,X464] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X460),s('type.wordSem.word_loc'(sK0),sK2))))),s(bool,X464)))) | p(s(bool,X464))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f57879,plain,(
  ( ! [X461,X460,X464] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X460),s('type.wordSem.word_loc'(sK0),sK2))))),s(bool,X464)))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X461),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X464))) )),
  inference(forward_demodulation,[],[f57634,f329])).
fof(f57634,plain,(
  ( ! [X461,X463,X459,X460,X462,X464] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X461),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X464)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X459),s(fun('type.wordSem.word_loc'(sK0),bool),X460),s(fun('type.wordSem.word_loc'(sK0),bool),X461),s(bool,X462),s(bool,X463))))),s(bool,X464))))) )),
  inference(superposition,[],[f316,f40281])).
fof(f57878,plain,(
  ( ! [X454,X458] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X458),s(fun('type.wordSem.word_loc'(sK0),bool),X454))),s('type.wordSem.word_loc'(sK0),sK2))))) ) | $spl134),
  inference(cnf_transformation,[],[f57878_D])).
fof(f57878_D,plain,(
  ( ! [X454,X458] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X458),s(fun('type.wordSem.word_loc'(sK0),bool),X454))),s('type.wordSem.word_loc'(sK0),sK2))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f57877,plain,(
  ( ! [X455,X454,X458] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X458),s(fun('type.wordSem.word_loc'(sK0),bool),X454))),s('type.wordSem.word_loc'(sK0),sK2)))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X455),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57876,f335])).
fof(f57876,plain,(
  ( ! [X455,X454,X458] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X458))),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X454),s('type.wordSem.word_loc'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X455),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57633,f329])).
fof(f57633,plain,(
  ( ! [X453,X455,X457,X454,X456,X458] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X455),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X458))),s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X453),s(fun('type.wordSem.word_loc'(sK0),bool),X454),s(fun('type.wordSem.word_loc'(sK0),bool),X455),s(bool,X456),s(bool,X457))))))) )),
  inference(superposition,[],[f315,f40281])).
fof(f57875,plain,(
  ( ! [X452,X448] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X448),s('type.wordSem.word_loc'(sK0),sK2))))),s(bool,X452))))) ) | $spl132),
  inference(cnf_transformation,[],[f57875_D])).
fof(f57875_D,plain,(
  ( ! [X452,X448] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X448),s('type.wordSem.word_loc'(sK0),sK2))))),s(bool,X452))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f57874,plain,(
  ( ! [X449,X452,X448] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X448),s('type.wordSem.word_loc'(sK0),sK2))))),s(bool,X452)))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X449),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57632,f329])).
fof(f57632,plain,(
  ( ! [X447,X449,X451,X452,X448,X450] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X449),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X447),s(fun('type.wordSem.word_loc'(sK0),bool),X448),s(fun('type.wordSem.word_loc'(sK0),bool),X449),s(bool,X450),s(bool,X451))))),s(bool,X452))))) )),
  inference(superposition,[],[f314,f40281])).
fof(f57873,plain,(
  ( ! [X443,X446] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X446),s(fun('type.wordSem.word_loc'(sK0),bool),X443))),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X446))) ) | $spl130),
  inference(cnf_transformation,[],[f57873_D])).
fof(f57873_D,plain,(
  ( ! [X443,X446] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X446),s(fun('type.wordSem.word_loc'(sK0),bool),X443))),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X446))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f57872,plain,(
  ( ! [X443,X446,X442] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X442),s('type.wordSem.word_loc'(sK0),sK2)))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X446),s(fun('type.wordSem.word_loc'(sK0),bool),X443))),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X446))) )),
  inference(forward_demodulation,[],[f57871,f329])).
fof(f57871,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X446),s(fun('type.wordSem.word_loc'(sK0),bool),X443))),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X446)) | p(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X441),s(fun('type.wordSem.word_loc'(sK0),bool),X442),s(fun('type.wordSem.word_loc'(sK0),bool),X443),s(bool,X444),s(bool,X445))))) )),
  inference(forward_demodulation,[],[f57631,f335])).
fof(f57631,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X446))),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X443),s('type.wordSem.word_loc'(sK0),sK1)))))) | p(s(bool,X446)) | p(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X441),s(fun('type.wordSem.word_loc'(sK0),bool),X442),s(fun('type.wordSem.word_loc'(sK0),bool),X443),s(bool,X444),s(bool,X445))))) )),
  inference(superposition,[],[f313,f40281])).
fof(f57869,plain,(
  ( ! [X440,X437] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X437),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X440)))) | p(s(bool,X440))) ) | $spl126),
  inference(cnf_transformation,[],[f57869_D])).
fof(f57869_D,plain,(
  ( ! [X440,X437] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X437),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X440)))) | p(s(bool,X440))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f57868,plain,(
  ( ! [X436,X440,X437] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X436),s('type.wordSem.word_loc'(sK0),sK2)))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X437),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X440)))) | p(s(bool,X440))) )),
  inference(forward_demodulation,[],[f57630,f329])).
fof(f57630,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X437),s('type.wordSem.word_loc'(sK0),sK1))))),s(bool,X440)))) | p(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X435),s(fun('type.wordSem.word_loc'(sK0),bool),X436),s(fun('type.wordSem.word_loc'(sK0),bool),X437),s(bool,X438),s(bool,X439)))) | p(s(bool,X440))) )),
  inference(superposition,[],[f313,f40281])).
fof(f57867,plain,(
  ( ! [X430,X434] : (s(bool,X434) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X430),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,X434))) ) | $spl124),
  inference(cnf_transformation,[],[f57867_D])).
fof(f57867_D,plain,(
  ( ! [X430,X434] : (s(bool,X434) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X430),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,X434))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f57866,plain,(
  ( ! [X430,X434,X431] : (s(bool,X434) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X430),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X431),s('type.wordSem.word_loc'(sK0),sK1)))) | ~p(s(bool,X434))) )),
  inference(forward_demodulation,[],[f57629,f329])).
fof(f57629,plain,(
  ( ! [X430,X432,X434,X429,X431,X433] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X431),s('type.wordSem.word_loc'(sK0),sK1)))) | ~p(s(bool,X434)) | s(bool,X434) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X429),s(fun('type.wordSem.word_loc'(sK0),bool),X430),s(fun('type.wordSem.word_loc'(sK0),bool),X431),s(bool,X432),s(bool,X433)))) )),
  inference(superposition,[],[f308,f40281])).
fof(f57864,plain,(
  ( ! [X422,X418] : (s(bool,X422) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X418),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,X422))) ) | $spl122),
  inference(cnf_transformation,[],[f57864_D])).
fof(f57864_D,plain,(
  ( ! [X422,X418] : (s(bool,X422) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X418),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,X422))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f57865,plain,(
  ( ! [X428,X424,X425] : (s(bool,X428) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X424),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X425),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X428))) )),
  inference(forward_demodulation,[],[f57628,f329])).
fof(f57628,plain,(
  ( ! [X428,X424,X426,X423,X425,X427] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X425),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X428)) | s(bool,X428) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X423),s(fun('type.wordSem.word_loc'(sK0),bool),X424),s(fun('type.wordSem.word_loc'(sK0),bool),X425),s(bool,X426),s(bool,X427)))) )),
  inference(superposition,[],[f305,f40281])).
fof(f57863,plain,(
  ( ! [X422,X418,X419] : (s(bool,X422) = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X418),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X419),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X422))) )),
  inference(forward_demodulation,[],[f57627,f329])).
fof(f57627,plain,(
  ( ! [X420,X422,X418,X421,X417,X419] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X419),s('type.wordSem.word_loc'(sK0),sK1)))) | p(s(bool,X422)) | s(bool,X422) = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X417),s(fun('type.wordSem.word_loc'(sK0),bool),X418),s(fun('type.wordSem.word_loc'(sK0),bool),X419),s(bool,X420),s(bool,X421)))) )),
  inference(superposition,[],[f305,f40281])).
fof(f57861,plain,(
  ( ! [X414,X413] : (s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X413),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X414),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57626,f329])).
fof(f57626,plain,(
  ( ! [X412,X414,X416,X413,X415] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X414),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X412),s(fun('type.wordSem.word_loc'(sK0),bool),X413),s(fun('type.wordSem.word_loc'(sK0),bool),X414),s(bool,X415),s(bool,X416)))) )),
  inference(superposition,[],[f250,f40281])).
fof(f57860,plain,(
  ( ! [X408] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X408),s('type.wordSem.word_loc'(sK0),sK2))))) ) | $spl118),
  inference(cnf_transformation,[],[f57860_D])).
fof(f57860_D,plain,(
  ( ! [X408] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X408),s('type.wordSem.word_loc'(sK0),sK2))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f57858,plain,(
  ( ! [X408,X409] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X408),s('type.wordSem.word_loc'(sK0),sK2)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X409),s('type.wordSem.word_loc'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f57625,f329])).
fof(f57625,plain,(
  ( ! [X408,X410,X407,X409,X411] : (s(bool,'F_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X409),s('type.wordSem.word_loc'(sK0),sK1))) | ~p(s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X407),s(fun('type.wordSem.word_loc'(sK0),bool),X408),s(fun('type.wordSem.word_loc'(sK0),bool),X409),s(bool,X410),s(bool,X411))))) )),
  inference(superposition,[],[f249,f40281])).
fof(f57857,plain,(
  ( ! [X403] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X403),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl114),
  inference(cnf_transformation,[],[f57857_D])).
fof(f57857_D,plain,(
  ( ! [X403] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X403),s('type.wordSem.word_loc'(sK0),sK2)))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f57855,plain,(
  ( ! [X403,X404] : (s(bool,'T_0') = s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X403),s('type.wordSem.word_loc'(sK0),sK2))) | ~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X404),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57624,f329])).
fof(f57624,plain,(
  ( ! [X405,X403,X404,X406,X402] : (~p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X404),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,'T_0') = s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X402),s(fun('type.wordSem.word_loc'(sK0),bool),X403),s(fun('type.wordSem.word_loc'(sK0),bool),X404),s(bool,X405),s(bool,X406)))) )),
  inference(superposition,[],[f246,f40281])).
fof(f57854,plain,(
  ( ! [X398] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X398),s('type.wordSem.word_loc'(sK0),sK2)))) ) | $spl110),
  inference(cnf_transformation,[],[f57854_D])).
fof(f57854_D,plain,(
  ( ! [X398] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X398),s('type.wordSem.word_loc'(sK0),sK2)))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f57852,plain,(
  ( ! [X399,X398] : (s(bool,'T_0') != s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X398),s('type.wordSem.word_loc'(sK0),sK2))) | p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X399),s('type.wordSem.word_loc'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f57623,f329])).
fof(f57623,plain,(
  ( ! [X397,X399,X401,X398,X400] : (p(s(bool,happ(s(fun('type.wordSem.word_loc'(sK0),bool),X399),s('type.wordSem.word_loc'(sK0),sK1)))) | s(bool,'T_0') != s(bool,'const.stackSem.result_CASE_6'(s('type.stackSem.result'(sK0),'const.stackSem.Exception_1'(s('type.wordSem.word_loc'(sK0),sK2))),s(fun('type.wordSem.word_loc'(sK0),bool),X397),s(fun('type.wordSem.word_loc'(sK0),bool),X398),s(fun('type.wordSem.word_loc'(sK0),bool),X399),s(bool,X400),s(bool,X401)))) )),
  inference(superposition,[],[f245,f40281])).
fof(f53852,plain,(
  ( ! [X85,X83,X84] : (s(bool,X83) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X83) = s(bool,'const.bool.DATATYPE_1'(s(X84,X85)))) ) | $spl78),
  inference(cnf_transformation,[],[f53852_D])).
fof(f53852_D,plain,(
  ( ! [X85,X83,X84] : (s(bool,X83) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X83) = s(bool,'const.bool.DATATYPE_1'(s(X84,X85)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f6393,plain,(
  ( ! [X56] : (s(bool,'T_0') = s(bool,X56)) ) | $spl18),
  inference(cnf_transformation,[],[f6393_D])).
fof(f6393_D,plain,(
  ( ! [X56] : (s(bool,'T_0') = s(bool,X56)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f53249,plain,(
  ( ! [X509,X507,X508,X506] : (s(bool,'T_0') = s(bool,X506) | s(bool,X507) = s(bool,'const.bool.DATATYPE_1'(s(X508,X509))) | s(bool,X507) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f53063])).
fof(f53063,plain,(
  ( ! [X509,X507,X508,X506] : (s(bool,'T_0') = s(bool,X506) | s(bool,'T_0') = s(bool,X506) | s(bool,X507) = s(bool,'const.bool.DATATYPE_1'(s(X508,X509))) | s(bool,X507) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f43498])).
fof(f54500,plain,(
  ( ! [X341,X340,X342] : (s(bool,X340) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,X340) = s(bool,'const.bool.DATATYPE_1'(s(X341,X342)))) ) | $spl104),
  inference(cnf_transformation,[],[f54500_D])).
fof(f54500_D,plain,(
  ( ! [X341,X340,X342] : (s(bool,X340) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,X340) = s(bool,'const.bool.DATATYPE_1'(s(X341,X342)))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f53279,plain,(
  ( ! [X352,X354,X351,X353] : (s(bool,X352) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X351) | s(bool,X352) = s(bool,'const.bool.DATATYPE_1'(s(X353,X354)))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f52679])).
fof(f52679,plain,(
  ( ! [X352,X354,X351,X353] : (s(bool,X352) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X351) | s(bool,X352) = s(bool,'const.bool.DATATYPE_1'(s(X353,X354))) | s(bool,'T_0') = s(bool,X351)) ) | $spl28),
  inference(superposition,[],[f47293,f43498])).
fof(f47293,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(subsumption_resolution,[],[f47174,f235])).
fof(f47174,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s(bool,X13) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(superposition,[],[f368,f23386])).
fof(f54502,plain,(
  ( ! [X343] : (s(bool,X343) = s(bool,'const.bool.DATATYPE_1'(s(bool,X343)))) ) | $spl106),
  inference(cnf_transformation,[],[f54502_D])).
fof(f54502_D,plain,(
  ( ! [X343] : (s(bool,X343) = s(bool,'const.bool.DATATYPE_1'(s(bool,X343)))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f54481,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(X2,X3)))) ) | $spl84),
  inference(cnf_transformation,[],[f54481_D])).
fof(f54481_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(X2,X3)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f54501,plain,(
  ( ! [X344,X346,X343,X345] : (s(bool,'T_0') != s(bool,X344) | s(bool,X343) = s(bool,'const.bool.DATATYPE_1'(s(bool,X343))) | s(bool,X344) = s(bool,'const.bool.DATATYPE_1'(s(X345,X346)))) )),
  inference(subsumption_resolution,[],[f52677,f44066])).
fof(f52677,plain,(
  ( ! [X344,X346,X343,X345] : (s(bool,'T_0') != s(bool,X344) | s(bool,X343) = s(bool,'const.bool.DATATYPE_1'(s(bool,X343))) | s(bool,X344) = s(bool,'const.bool.DATATYPE_1'(s(X345,X346))) | s(bool,'T_0') = s(bool,X343)) )),
  inference(superposition,[],[f44066,f43498])).
fof(f54499,plain,(
  ( ! [X341,X339,X340,X342] : (s(bool,X340) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,X340) = s(bool,'const.bool.DATATYPE_1'(s(X341,X342))) | s(bool,'T_0') = s(bool,X339)) ) | $spl64),
  inference(subsumption_resolution,[],[f52676,f557])).
fof(f52676,plain,(
  ( ! [X341,X339,X340,X342] : (s(bool,X340) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,X339) = s(bool,'const.bool.DATATYPE_1'(s(bool,X339))) | s(bool,X340) = s(bool,'const.bool.DATATYPE_1'(s(X341,X342))) | s(bool,'T_0') = s(bool,X339)) ) | $spl64),
  inference(superposition,[],[f44058,f43498])).
fof(f54491,plain,(
  ( ! [X269,X271,X270] : (s(bool,X269) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,X269) = s(bool,'const.bool.DATATYPE_1'(s(X270,X271)))) ) | $spl92),
  inference(cnf_transformation,[],[f54491_D])).
fof(f54491_D,plain,(
  ( ! [X269,X271,X270] : (s(bool,X269) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,X269) = s(bool,'const.bool.DATATYPE_1'(s(X270,X271)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f54498,plain,(
  ( ! [X335,X337,X336,X338] : (s(bool,X336) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,X336) = s(bool,'const.bool.DATATYPE_1'(s(X337,X338))) | s(bool,'T_0') = s(bool,X335)) ) | $spl60),
  inference(subsumption_resolution,[],[f52675,f557])).
fof(f52675,plain,(
  ( ! [X335,X337,X336,X338] : (s(bool,X336) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,X335) = s(bool,'const.bool.DATATYPE_1'(s(bool,X335))) | s(bool,X336) = s(bool,'const.bool.DATATYPE_1'(s(X337,X338))) | s(bool,'T_0') = s(bool,X335)) ) | $spl60),
  inference(superposition,[],[f44054,f43498])).
fof(f54468,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,X110) != s(bool,'const.bool.DATATYPE_1'(s(X111,X112))) | s(bool,X110) = s(bool,'const.bool.DATATYPE_1'(s(X113,X114)))) ) | $spl80),
  inference(cnf_transformation,[],[f54468_D])).
fof(f54468_D,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,X110) != s(bool,'const.bool.DATATYPE_1'(s(X111,X112))) | s(bool,X110) = s(bool,'const.bool.DATATYPE_1'(s(X113,X114)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f54497,plain,(
  ( ! [X333,X329,X331,X332,X334,X330] : (s(bool,X330) != s(bool,'const.bool.DATATYPE_1'(s(X331,X332))) | s(bool,X330) = s(bool,'const.bool.DATATYPE_1'(s(X333,X334))) | s(bool,'T_0') = s(bool,X329)) ) | $spl48),
  inference(subsumption_resolution,[],[f52674,f557])).
fof(f52674,plain,(
  ( ! [X333,X329,X331,X332,X334,X330] : (s(bool,X330) != s(bool,'const.bool.DATATYPE_1'(s(X331,X332))) | s(bool,X329) = s(bool,'const.bool.DATATYPE_1'(s(bool,X329))) | s(bool,X330) = s(bool,'const.bool.DATATYPE_1'(s(X333,X334))) | s(bool,'T_0') = s(bool,X329)) ) | $spl48),
  inference(superposition,[],[f44029,f43498])).
fof(f54496,plain,(
  ( ! [X316,X318,X317,X319] : (s(bool,X316) != s(bool,'|dollar|exists_1'(s(fun(X317,bool),sK7('!_1',fun(X317,bool))))) | s(bool,X316) = s(bool,'const.bool.DATATYPE_1'(s(X318,X319)))) ) | $spl102),
  inference(cnf_transformation,[],[f54496_D])).
fof(f54496_D,plain,(
  ( ! [X316,X318,X317,X319] : (s(bool,X316) != s(bool,'|dollar|exists_1'(s(fun(X317,bool),sK7('!_1',fun(X317,bool))))) | s(bool,X316) = s(bool,'const.bool.DATATYPE_1'(s(X318,X319)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f53281,plain,(
  ( ! [X315,X316,X318,X317,X319] : (s(bool,X316) != s(bool,'|dollar|exists_1'(s(fun(X317,bool),sK7('!_1',fun(X317,bool))))) | s(bool,'T_0') = s(bool,X315) | s(bool,X316) = s(bool,'const.bool.DATATYPE_1'(s(X318,X319)))) )),
  inference(duplicate_literal_removal,[],[f52671])).
fof(f52671,plain,(
  ( ! [X315,X316,X318,X317,X319] : (s(bool,X316) != s(bool,'|dollar|exists_1'(s(fun(X317,bool),sK7('!_1',fun(X317,bool))))) | s(bool,'T_0') = s(bool,X315) | s(bool,X316) = s(bool,'const.bool.DATATYPE_1'(s(X318,X319))) | s(bool,'T_0') = s(bool,X315)) )),
  inference(superposition,[],[f34073,f43498])).
fof(f54495,plain,(
  ( ! [X308,X306,X309,X307] : (s(bool,X306) != s(bool,'|dollar|exists_1'(s(fun(fun(X307,bool),bool),'!_1'))) | s(bool,X306) = s(bool,'const.bool.DATATYPE_1'(s(X308,X309)))) ) | $spl100),
  inference(cnf_transformation,[],[f54495_D])).
fof(f54495_D,plain,(
  ( ! [X308,X306,X309,X307] : (s(bool,X306) != s(bool,'|dollar|exists_1'(s(fun(fun(X307,bool),bool),'!_1'))) | s(bool,X306) = s(bool,'const.bool.DATATYPE_1'(s(X308,X309)))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f53282,plain,(
  ( ! [X308,X306,X309,X305,X307] : (s(bool,X306) != s(bool,'|dollar|exists_1'(s(fun(fun(X307,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X305) | s(bool,X306) = s(bool,'const.bool.DATATYPE_1'(s(X308,X309)))) )),
  inference(duplicate_literal_removal,[],[f52669])).
fof(f52669,plain,(
  ( ! [X308,X306,X309,X305,X307] : (s(bool,X306) != s(bool,'|dollar|exists_1'(s(fun(fun(X307,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X305) | s(bool,X306) = s(bool,'const.bool.DATATYPE_1'(s(X308,X309))) | s(bool,'T_0') = s(bool,X305)) )),
  inference(superposition,[],[f32442,f43498])).
fof(f54494,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,X296) != s(bool,'|dollar|exists_1'(s(fun(X297,bool),sK7('?_1',fun(X297,bool))))) | s(bool,X296) = s(bool,'const.bool.DATATYPE_1'(s(X298,X299)))) ) | $spl98),
  inference(cnf_transformation,[],[f54494_D])).
fof(f54494_D,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,X296) != s(bool,'|dollar|exists_1'(s(fun(X297,bool),sK7('?_1',fun(X297,bool))))) | s(bool,X296) = s(bool,'const.bool.DATATYPE_1'(s(X298,X299)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f53283,plain,(
  ( ! [X296,X298,X295,X297,X299] : (s(bool,X296) != s(bool,'|dollar|exists_1'(s(fun(X297,bool),sK7('?_1',fun(X297,bool))))) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.bool.DATATYPE_1'(s(X298,X299)))) )),
  inference(duplicate_literal_removal,[],[f52667])).
fof(f52667,plain,(
  ( ! [X296,X298,X295,X297,X299] : (s(bool,X296) != s(bool,'|dollar|exists_1'(s(fun(X297,bool),sK7('?_1',fun(X297,bool))))) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.bool.DATATYPE_1'(s(X298,X299))) | s(bool,'T_0') = s(bool,X295)) )),
  inference(superposition,[],[f25612,f43498])).
fof(f54493,plain,(
  ( ! [X288,X287,X289,X286] : (s(bool,X286) != s(bool,'|dollar|exists_1'(s(fun(fun(X287,bool),bool),'?_1'))) | s(bool,X286) = s(bool,'const.bool.DATATYPE_1'(s(X288,X289)))) ) | $spl96),
  inference(cnf_transformation,[],[f54493_D])).
fof(f54493_D,plain,(
  ( ! [X288,X287,X289,X286] : (s(bool,X286) != s(bool,'|dollar|exists_1'(s(fun(fun(X287,bool),bool),'?_1'))) | s(bool,X286) = s(bool,'const.bool.DATATYPE_1'(s(X288,X289)))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f53284,plain,(
  ( ! [X288,X285,X287,X289,X286] : (s(bool,X286) != s(bool,'|dollar|exists_1'(s(fun(fun(X287,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X285) | s(bool,X286) = s(bool,'const.bool.DATATYPE_1'(s(X288,X289)))) )),
  inference(duplicate_literal_removal,[],[f52665])).
fof(f52665,plain,(
  ( ! [X288,X285,X287,X289,X286] : (s(bool,X286) != s(bool,'|dollar|exists_1'(s(fun(fun(X287,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X285) | s(bool,X286) = s(bool,'const.bool.DATATYPE_1'(s(X288,X289))) | s(bool,'T_0') = s(bool,X285)) )),
  inference(superposition,[],[f22019,f43498])).
fof(f53285,plain,(
  ( ! [X277,X279,X276,X278] : (s(bool,X277) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X276) | s(bool,X277) = s(bool,'const.bool.DATATYPE_1'(s(X278,X279)))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f52663])).
fof(f52663,plain,(
  ( ! [X277,X279,X276,X278] : (s(bool,X277) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X276) | s(bool,X277) = s(bool,'const.bool.DATATYPE_1'(s(X278,X279))) | s(bool,'T_0') = s(bool,X276)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f43498])).
fof(f54492,plain,(
  ( ! [X273,X275,X274] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X273))) | s(bool,X273) = s(bool,'const.bool.DATATYPE_1'(s(X274,X275)))) ) | $spl94),
  inference(cnf_transformation,[],[f54492_D])).
fof(f54492_D,plain,(
  ( ! [X273,X275,X274] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X273))) | s(bool,X273) = s(bool,'const.bool.DATATYPE_1'(s(X274,X275)))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f53286,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X273))) | s(bool,'T_0') = s(bool,X272) | s(bool,X273) = s(bool,'const.bool.DATATYPE_1'(s(X274,X275)))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f52662])).
fof(f52662,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X273))) | s(bool,'T_0') = s(bool,X272) | s(bool,X273) = s(bool,'const.bool.DATATYPE_1'(s(X274,X275))) | s(bool,'T_0') = s(bool,X272)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20097,f43498])).
fof(f53287,plain,(
  ( ! [X269,X271,X268,X270] : (s(bool,X269) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X268) | s(bool,X269) = s(bool,'const.bool.DATATYPE_1'(s(X270,X271)))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f52661])).
fof(f52661,plain,(
  ( ! [X269,X271,X268,X270] : (s(bool,X269) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X268) | s(bool,X269) = s(bool,'const.bool.DATATYPE_1'(s(X270,X271))) | s(bool,'T_0') = s(bool,X268)) ) | $spl2),
  inference(superposition,[],[f17754,f43498])).
fof(f17754,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl2),
  inference(subsumption_resolution,[],[f17709,f235])).
fof(f17709,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s(bool,X7) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl2),
  inference(superposition,[],[f368,f17368])).
fof(f17368,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f350,f1810,f1037])).
fof(f54489,plain,(
  ( ! [X246,X244,X247,X245] : (s(bool,'T_0') != s(bool,X245) | s(bool,X245) = s(bool,'const.bool.DATATYPE_1'(s(X246,X247))) | s(bool,'T_0') = s(bool,X244)) ) | ($spl8 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f52655,f20097])).
fof(f52655,plain,(
  ( ! [X246,X244,X247,X245] : (s(bool,'T_0') != s(bool,X245) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X244))) | s(bool,X245) = s(bool,'const.bool.DATATYPE_1'(s(X246,X247))) | s(bool,'T_0') = s(bool,X244)) ) | $spl8),
  inference(superposition,[],[f9656,f43498])).
fof(f54488,plain,(
  ( ! [X239,X237,X238,X236] : (s(bool,'T_0') != s(bool,X237) | s(bool,'T_0') = s(bool,X236) | s(bool,X237) = s(bool,'const.bool.DATATYPE_1'(s(X238,X239)))) ) | $spl8),
  inference(forward_demodulation,[],[f53290,f5798])).
fof(f5798,plain,(
  s(bool,'T_0') = s(bool,sK7('_i_0_0',bool)) | $spl8),
  inference(unit_resulting_resolution,[],[f350,f5778,f1037])).
fof(f5778,plain,(
  p(s(bool,sK7('_i_0_0',bool))) | $spl8),
  inference(forward_demodulation,[],[f5777,f271])).
fof(f5777,plain,(
  p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK7('_i_0_0',bool))))) | $spl8),
  inference(subsumption_resolution,[],[f5760,f235])).
fof(f5760,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK7('_i_0_0',bool))))) | $spl8),
  inference(superposition,[],[f311,f4255])).
fof(f53290,plain,(
  ( ! [X239,X237,X238,X236] : (s(bool,X237) != s(bool,sK7('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X236) | s(bool,X237) = s(bool,'const.bool.DATATYPE_1'(s(X238,X239)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f52653])).
fof(f52653,plain,(
  ( ! [X239,X237,X238,X236] : (s(bool,X237) != s(bool,sK7('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X236) | s(bool,X237) = s(bool,'const.bool.DATATYPE_1'(s(X238,X239))) | s(bool,'T_0') = s(bool,X236)) ) | $spl8),
  inference(superposition,[],[f5910,f43498])).
fof(f5910,plain,(
  ( ! [X10] : (s(bool,X10) != s(bool,sK7('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl8),
  inference(subsumption_resolution,[],[f5857,f235])).
fof(f5857,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s(bool,X10) != s(bool,sK7('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl8),
  inference(superposition,[],[f368,f5798])).
fof(f54486,plain,(
  ( ! [X225,X226,X224] : (s(bool,X224) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,X224) = s(bool,'const.bool.DATATYPE_1'(s(X225,X226)))) ) | $spl90),
  inference(cnf_transformation,[],[f54486_D])).
fof(f54486_D,plain,(
  ( ! [X225,X226,X224] : (s(bool,X224) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,X224) = s(bool,'const.bool.DATATYPE_1'(s(X225,X226)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f53291,plain,(
  ( ! [X225,X223,X226,X224] : (s(bool,X224) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X223) | s(bool,X224) = s(bool,'const.bool.DATATYPE_1'(s(X225,X226)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f52650])).
fof(f52650,plain,(
  ( ! [X225,X223,X226,X224] : (s(bool,X224) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X223) | s(bool,X224) = s(bool,'const.bool.DATATYPE_1'(s(X225,X226))) | s(bool,'T_0') = s(bool,X223)) ) | $spl8),
  inference(superposition,[],[f5270,f43498])).
fof(f5270,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X11)) ) | $spl8),
  inference(subsumption_resolution,[],[f5212,f235])).
fof(f5212,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X11)) ) | $spl8),
  inference(superposition,[],[f368,f4905])).
fof(f4905,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | $spl8),
  inference(unit_resulting_resolution,[],[f350,f4844,f1037])).
fof(f4844,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1')))) | $spl8),
  inference(unit_resulting_resolution,[],[f4240,f2633])).
fof(f4240,plain,(
  p(s(bool,happ(s(fun(fun(fun(bool,bool),bool),bool),'?_1'),s(fun(fun(bool,bool),bool),'?_1')))) | $spl8),
  inference(unit_resulting_resolution,[],[f4233,f312])).
fof(f54485,plain,(
  ( ! [X222,X220,X221] : (s(bool,X220) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,X220) = s(bool,'const.bool.DATATYPE_1'(s(X221,X222)))) ) | $spl88),
  inference(cnf_transformation,[],[f54485_D])).
fof(f54485_D,plain,(
  ( ! [X222,X220,X221] : (s(bool,X220) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,X220) = s(bool,'const.bool.DATATYPE_1'(s(X221,X222)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f53292,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,X220) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X219) | s(bool,X220) = s(bool,'const.bool.DATATYPE_1'(s(X221,X222)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f52649])).
fof(f52649,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,X220) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X219) | s(bool,X220) = s(bool,'const.bool.DATATYPE_1'(s(X221,X222))) | s(bool,'T_0') = s(bool,X219)) ) | $spl8),
  inference(superposition,[],[f4602,f43498])).
fof(f54483,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X197) != s(bool,'|dollar|exists_1'(s(fun(X198,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X197) = s(bool,'const.bool.DATATYPE_1'(s(X199,X200)))) ) | $spl86),
  inference(cnf_transformation,[],[f54483_D])).
fof(f54483_D,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X197) != s(bool,'|dollar|exists_1'(s(fun(X198,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X197) = s(bool,'const.bool.DATATYPE_1'(s(X199,X200)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f53295,plain,(
  ( ! [X198,X196,X200,X199,X197] : (s(bool,X197) != s(bool,'|dollar|exists_1'(s(fun(X198,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X196) | s(bool,X197) = s(bool,'const.bool.DATATYPE_1'(s(X199,X200)))) )),
  inference(duplicate_literal_removal,[],[f52644])).
fof(f52644,plain,(
  ( ! [X198,X196,X200,X199,X197] : (s(bool,X197) != s(bool,'|dollar|exists_1'(s(fun(X198,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X196) | s(bool,X197) = s(bool,'const.bool.DATATYPE_1'(s(X199,X200))) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f2082,f43498])).
fof(f4231,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f4231_D])).
fof(f4231_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f54480,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(X2,X3)))) )),
  inference(condensation,[],[f54479])).
fof(f54479,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s(bool,'T_0') != s(bool,X177) | s(bool,X176) = s(bool,X178) | s(bool,'F_0') = s(bool,X178) | s(bool,X177) = s(bool,'const.bool.DATATYPE_1'(s(X179,X180)))) )),
  inference(subsumption_resolution,[],[f52640,f1400])).
fof(f52640,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s(bool,'T_0') != s(bool,X177) | s(bool,X176) = s(bool,X178) | s(bool,'F_0') = s(bool,X178) | s(bool,X177) = s(bool,'const.bool.DATATYPE_1'(s(X179,X180))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(superposition,[],[f1400,f43498])).
fof(f54478,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,X172) != s(bool,X173) | s(bool,X172) = s(bool,'const.bool.DATATYPE_1'(s(X174,X175))) | s(bool,'F_0') = s(bool,X173)) ) | $spl82),
  inference(cnf_transformation,[],[f54478_D])).
fof(f54478_D,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,X172) != s(bool,X173) | s(bool,X172) = s(bool,'const.bool.DATATYPE_1'(s(X174,X175))) | s(bool,'F_0') = s(bool,X173)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f53296,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s(bool,X172) != s(bool,X173) | s(bool,'T_0') = s(bool,X171) | s(bool,'F_0') = s(bool,X173) | s(bool,X172) = s(bool,'const.bool.DATATYPE_1'(s(X174,X175)))) )),
  inference(duplicate_literal_removal,[],[f52639])).
fof(f52639,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s(bool,X172) != s(bool,X173) | s(bool,'T_0') = s(bool,X171) | s(bool,'F_0') = s(bool,X173) | s(bool,X172) = s(bool,'const.bool.DATATYPE_1'(s(X174,X175))) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f1197,f43498])).
fof(f53300,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (s(bool,X110) != s(bool,'const.bool.DATATYPE_1'(s(X111,X112))) | s(bool,'T_0') = s(bool,X109) | s(bool,X110) = s(bool,'const.bool.DATATYPE_1'(s(X113,X114)))) )),
  inference(duplicate_literal_removal,[],[f52627])).
fof(f52627,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (s(bool,X110) != s(bool,'const.bool.DATATYPE_1'(s(X111,X112))) | s(bool,'T_0') = s(bool,X109) | s(bool,X110) = s(bool,'const.bool.DATATYPE_1'(s(X113,X114))) | s(bool,'T_0') = s(bool,X109)) )),
  inference(superposition,[],[f557,f43498])).
fof(f53440,plain,(
  ( ! [X158,X159,X157,X160] : (s(bool,'T_0') = s(bool,X157) | s(bool,X158) = s(bool,'const.bool.DATATYPE_1'(s(X159,X160))) | s(bool,X158) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f51976])).
fof(f51976,plain,(
  ( ! [X158,X159,X157,X160] : (s(bool,'T_0') = s(bool,X157) | s(bool,X158) = s(bool,'const.bool.DATATYPE_1'(s(X159,X160))) | s(bool,X158) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X157)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f43498,f20385])).
fof(f53721,plain,(
  ( ! [X127,X132,X130,X133,X131,X129] : (s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(X129,X130))) | s(bool,X127) = s(bool,X131) | s(bool,X131) = s(bool,'const.bool.DATATYPE_1'(s(X132,X133)))) ) | $spl76),
  inference(cnf_transformation,[],[f53721_D])).
fof(f53721_D,plain,(
  ( ! [X127,X132,X130,X133,X131,X129] : (s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(X129,X130))) | s(bool,X127) = s(bool,X131) | s(bool,X131) = s(bool,'const.bool.DATATYPE_1'(s(X132,X133)))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f53442,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,'const.bool.DATATYPE_1'(s(X104,X105))) | s(bool,X101) = s(bool,X103) | s(bool,X101) = s(bool,'const.bool.DATATYPE_1'(s(X106,X107)))) )),
  inference(duplicate_literal_removal,[],[f51967])).
fof(f51967,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,'const.bool.DATATYPE_1'(s(X104,X105))) | s(bool,X101) = s(bool,X103) | s(bool,X101) = s(bool,'const.bool.DATATYPE_1'(s(X106,X107))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f43498,f43498])).
fof(f53452,plain,(
  ( ! [X125,X123,X121,X126,X124,X122,X120] : (s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,'const.bool.DATATYPE_1'(s(X123,X124))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.bool.DATATYPE_1'(s(X125,X126)))) )),
  inference(duplicate_literal_removal,[],[f51849])).
fof(f51849,plain,(
  ( ! [X125,X123,X121,X126,X124,X122,X120] : (s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,'const.bool.DATATYPE_1'(s(X123,X124))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.bool.DATATYPE_1'(s(X125,X126))) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f43498,f43498])).
fof(f53454,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X83) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X83) = s(bool,'const.bool.DATATYPE_1'(s(X84,X85))) | s(bool,'T_0') = s(bool,X82)) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f51842])).
fof(f51842,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X83) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X83) = s(bool,'const.bool.DATATYPE_1'(s(X84,X85))) | s(bool,'T_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f43498,f20385])).
fof(f53706,plain,(
  ( ! [X37,X38,X36,X34] : (s(bool,X34) = s(bool,'const.bool.DATATYPE_1'(s(X36,X37))) | s(bool,X34) = s(bool,X38) | s(bool,X38) = s(bool,'const.bool.DATATYPE_1'(s(bool,X38)))) ) | $spl74),
  inference(cnf_transformation,[],[f53706_D])).
fof(f53706_D,plain,(
  ( ! [X37,X38,X36,X34] : (s(bool,X34) = s(bool,'const.bool.DATATYPE_1'(s(X36,X37))) | s(bool,X34) = s(bool,X38) | s(bool,X38) = s(bool,'const.bool.DATATYPE_1'(s(bool,X38)))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f53457,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,'const.bool.DATATYPE_1'(s(X32,X33))) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.bool.DATATYPE_1'(s(bool,X30)))) )),
  inference(duplicate_literal_removal,[],[f51831])).
fof(f51831,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,'const.bool.DATATYPE_1'(s(X32,X33))) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.bool.DATATYPE_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f43498,f742])).
fof(f53508,plain,(
  ( ! [X127,X132,X130,X128,X133,X131,X129] : (s(bool,'T_0') = s(bool,X128) | s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(X129,X130))) | s(bool,X131) = s(bool,'const.bool.DATATYPE_1'(s(X132,X133))) | s(bool,X127) = s(bool,X131)) )),
  inference(duplicate_literal_removal,[],[f51744])).
fof(f51744,plain,(
  ( ! [X127,X132,X130,X128,X133,X131,X129] : (s(bool,'T_0') = s(bool,X128) | s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(X129,X130))) | s(bool,'T_0') = s(bool,X128) | s(bool,X131) = s(bool,'const.bool.DATATYPE_1'(s(X132,X133))) | s(bool,X127) = s(bool,X131)) )),
  inference(superposition,[],[f43498,f43498])).
fof(f53510,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,'const.bool.DATATYPE_1'(s(X36,X37))) | s(bool,X38) = s(bool,'const.bool.DATATYPE_1'(s(bool,X38))) | s(bool,X34) = s(bool,X38)) )),
  inference(duplicate_literal_removal,[],[f51726])).
fof(f51726,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,'const.bool.DATATYPE_1'(s(X36,X37))) | s(bool,'T_0') = s(bool,X35) | s(bool,X38) = s(bool,'const.bool.DATATYPE_1'(s(bool,X38))) | s(bool,X34) = s(bool,X38)) )),
  inference(superposition,[],[f43498,f742])).
fof(f47029,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X67)) ) | $spl72),
  inference(cnf_transformation,[],[f47029_D])).
fof(f47029_D,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X67)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f46939,plain,(
  ( ! [X66,X67] : (s(bool,X67) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X66) | s(bool,'F_0') = s(bool,X67)) ) | $spl29),
  inference(duplicate_literal_removal,[],[f46658])).
fof(f46658,plain,(
  ( ! [X66,X67] : (s(bool,X67) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X66) | s(bool,'F_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X66)) ) | $spl29),
  inference(superposition,[],[f1197,f44953])).
fof(f44953,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl29),
  inference(trivial_inequality_removal,[],[f44936])).
fof(f44936,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl29),
  inference(superposition,[],[f23385,f365])).
fof(f23385,plain,(
  s(bool,'T_0') != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl29),
  inference(cnf_transformation,[],[f23385_D])).
fof(f23385_D,plain,(
  s(bool,'T_0') != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f43656,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X49) = s(bool,'const.bool.DATATYPE_1'(s(bool,X49)))) ) | $spl46),
  inference(cnf_transformation,[],[f43656_D])).
fof(f43656_D,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X49) = s(bool,'const.bool.DATATYPE_1'(s(bool,X49)))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f43175,plain,(
  ( ! [X263,X264] : (s(bool,'T_0') = s(bool,X263) | s(bool,X264) = s(bool,'const.bool.DATATYPE_1'(s(bool,X264))) | s(bool,X264) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f43035])).
fof(f43035,plain,(
  ( ! [X263,X264] : (s(bool,'T_0') = s(bool,X263) | s(bool,'T_0') = s(bool,X263) | s(bool,X264) = s(bool,'const.bool.DATATYPE_1'(s(bool,X264))) | s(bool,X264) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f742])).
fof(f44061,plain,(
  ( ! [X177,X176] : (s(bool,X176) != s(bool,'|dollar|exists_1'(s(fun(X177,bool),sK7('!_1',fun(X177,bool))))) | s(bool,X176) = s(bool,'const.bool.DATATYPE_1'(s(bool,X176)))) ) | $spl70),
  inference(cnf_transformation,[],[f44061_D])).
fof(f44061_D,plain,(
  ( ! [X177,X176] : (s(bool,X176) != s(bool,'|dollar|exists_1'(s(fun(X177,bool),sK7('!_1',fun(X177,bool))))) | s(bool,X176) = s(bool,'const.bool.DATATYPE_1'(s(bool,X176)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f43200,plain,(
  ( ! [X177,X175,X176] : (s(bool,X176) != s(bool,'|dollar|exists_1'(s(fun(X177,bool),sK7('!_1',fun(X177,bool))))) | s(bool,'T_0') = s(bool,X175) | s(bool,X176) = s(bool,'const.bool.DATATYPE_1'(s(bool,X176)))) )),
  inference(duplicate_literal_removal,[],[f42692])).
fof(f42692,plain,(
  ( ! [X177,X175,X176] : (s(bool,X176) != s(bool,'|dollar|exists_1'(s(fun(X177,bool),sK7('!_1',fun(X177,bool))))) | s(bool,'T_0') = s(bool,X175) | s(bool,X176) = s(bool,'const.bool.DATATYPE_1'(s(bool,X176))) | s(bool,'T_0') = s(bool,X175)) )),
  inference(superposition,[],[f34073,f742])).
fof(f44060,plain,(
  ( ! [X171,X170] : (s(bool,X170) != s(bool,'|dollar|exists_1'(s(fun(fun(X171,bool),bool),'!_1'))) | s(bool,X170) = s(bool,'const.bool.DATATYPE_1'(s(bool,X170)))) ) | $spl68),
  inference(cnf_transformation,[],[f44060_D])).
fof(f44060_D,plain,(
  ( ! [X171,X170] : (s(bool,X170) != s(bool,'|dollar|exists_1'(s(fun(fun(X171,bool),bool),'!_1'))) | s(bool,X170) = s(bool,'const.bool.DATATYPE_1'(s(bool,X170)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f43201,plain,(
  ( ! [X171,X169,X170] : (s(bool,X170) != s(bool,'|dollar|exists_1'(s(fun(fun(X171,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X169) | s(bool,X170) = s(bool,'const.bool.DATATYPE_1'(s(bool,X170)))) )),
  inference(duplicate_literal_removal,[],[f42690])).
fof(f42690,plain,(
  ( ! [X171,X169,X170] : (s(bool,X170) != s(bool,'|dollar|exists_1'(s(fun(fun(X171,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X169) | s(bool,X170) = s(bool,'const.bool.DATATYPE_1'(s(bool,X170))) | s(bool,'T_0') = s(bool,X169)) )),
  inference(superposition,[],[f32442,f742])).
fof(f44059,plain,(
  ( ! [X165,X164] : (s(bool,X164) != s(bool,'|dollar|exists_1'(s(fun(X165,bool),sK7('?_1',fun(X165,bool))))) | s(bool,X164) = s(bool,'const.bool.DATATYPE_1'(s(bool,X164)))) ) | $spl66),
  inference(cnf_transformation,[],[f44059_D])).
fof(f44059_D,plain,(
  ( ! [X165,X164] : (s(bool,X164) != s(bool,'|dollar|exists_1'(s(fun(X165,bool),sK7('?_1',fun(X165,bool))))) | s(bool,X164) = s(bool,'const.bool.DATATYPE_1'(s(bool,X164)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f43202,plain,(
  ( ! [X165,X163,X164] : (s(bool,X164) != s(bool,'|dollar|exists_1'(s(fun(X165,bool),sK7('?_1',fun(X165,bool))))) | s(bool,'T_0') = s(bool,X163) | s(bool,X164) = s(bool,'const.bool.DATATYPE_1'(s(bool,X164)))) )),
  inference(duplicate_literal_removal,[],[f42688])).
fof(f42688,plain,(
  ( ! [X165,X163,X164] : (s(bool,X164) != s(bool,'|dollar|exists_1'(s(fun(X165,bool),sK7('?_1',fun(X165,bool))))) | s(bool,'T_0') = s(bool,X163) | s(bool,X164) = s(bool,'const.bool.DATATYPE_1'(s(bool,X164))) | s(bool,'T_0') = s(bool,X163)) )),
  inference(superposition,[],[f25612,f742])).
fof(f44058,plain,(
  ( ! [X162] : (s(bool,X162) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,X162) = s(bool,'const.bool.DATATYPE_1'(s(bool,X162)))) ) | $spl64),
  inference(cnf_transformation,[],[f44058_D])).
fof(f44058_D,plain,(
  ( ! [X162] : (s(bool,X162) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,X162) = s(bool,'const.bool.DATATYPE_1'(s(bool,X162)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f43203,plain,(
  ( ! [X161,X162] : (s(bool,X162) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X161) | s(bool,X162) = s(bool,'const.bool.DATATYPE_1'(s(bool,X162)))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f42687])).
fof(f42687,plain,(
  ( ! [X161,X162] : (s(bool,X162) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X161) | s(bool,X162) = s(bool,'const.bool.DATATYPE_1'(s(bool,X162))) | s(bool,'T_0') = s(bool,X161)) ) | $spl28),
  inference(superposition,[],[f24437,f742])).
fof(f24437,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(subsumption_resolution,[],[f23814,f235])).
fof(f23814,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s(bool,X13) != s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(superposition,[],[f368,f23386])).
fof(f44057,plain,(
  ( ! [X152,X153] : (s(bool,X152) != s(bool,'|dollar|exists_1'(s(fun(fun(X153,bool),bool),'?_1'))) | s(bool,X152) = s(bool,'const.bool.DATATYPE_1'(s(bool,X152)))) ) | $spl62),
  inference(cnf_transformation,[],[f44057_D])).
fof(f44057_D,plain,(
  ( ! [X152,X153] : (s(bool,X152) != s(bool,'|dollar|exists_1'(s(fun(fun(X153,bool),bool),'?_1'))) | s(bool,X152) = s(bool,'const.bool.DATATYPE_1'(s(bool,X152)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f43204,plain,(
  ( ! [X152,X151,X153] : (s(bool,X152) != s(bool,'|dollar|exists_1'(s(fun(fun(X153,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X151) | s(bool,X152) = s(bool,'const.bool.DATATYPE_1'(s(bool,X152)))) )),
  inference(duplicate_literal_removal,[],[f42683])).
fof(f42683,plain,(
  ( ! [X152,X151,X153] : (s(bool,X152) != s(bool,'|dollar|exists_1'(s(fun(fun(X153,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X151) | s(bool,X152) = s(bool,'const.bool.DATATYPE_1'(s(bool,X152))) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f22019,f742])).
fof(f43205,plain,(
  ( ! [X146,X147] : (s(bool,X147) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X146) | s(bool,X147) = s(bool,'const.bool.DATATYPE_1'(s(bool,X147)))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f42681])).
fof(f42681,plain,(
  ( ! [X146,X147] : (s(bool,X147) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X146) | s(bool,X147) = s(bool,'const.bool.DATATYPE_1'(s(bool,X147))) | s(bool,'T_0') = s(bool,X146)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f20385,f742])).
fof(f44054,plain,(
  ( ! [X143] : (s(bool,X143) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,X143) = s(bool,'const.bool.DATATYPE_1'(s(bool,X143)))) ) | $spl60),
  inference(cnf_transformation,[],[f44054_D])).
fof(f44054_D,plain,(
  ( ! [X143] : (s(bool,X143) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,X143) = s(bool,'const.bool.DATATYPE_1'(s(bool,X143)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f43207,plain,(
  ( ! [X142,X143] : (s(bool,X143) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X142) | s(bool,X143) = s(bool,'const.bool.DATATYPE_1'(s(bool,X143)))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f42679])).
fof(f42679,plain,(
  ( ! [X142,X143] : (s(bool,X143) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X142) | s(bool,X143) = s(bool,'const.bool.DATATYPE_1'(s(bool,X143))) | s(bool,'T_0') = s(bool,X142)) ) | $spl2),
  inference(superposition,[],[f17754,f742])).
fof(f44044,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(bool,X1)))) ) | $spl52),
  inference(cnf_transformation,[],[f44044_D])).
fof(f44044_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(bool,X1)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f44052,plain,(
  ( ! [X130,X131] : (s(bool,'T_0') != s(bool,X131) | s(bool,X131) = s(bool,'const.bool.DATATYPE_1'(s(bool,X131))) | s(bool,'T_0') = s(bool,X130)) ) | ($spl8 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f42673,f20097])).
fof(f42673,plain,(
  ( ! [X130,X131] : (s(bool,'T_0') != s(bool,X131) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X130))) | s(bool,X131) = s(bool,'const.bool.DATATYPE_1'(s(bool,X131))) | s(bool,'T_0') = s(bool,X130)) ) | $spl8),
  inference(superposition,[],[f9656,f742])).
fof(f44051,plain,(
  ( ! [X127,X126] : (s(bool,'T_0') != s(bool,X127) | s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(bool,X127)))) ) | $spl8),
  inference(forward_demodulation,[],[f43210,f5798])).
fof(f43210,plain,(
  ( ! [X127,X126] : (s(bool,X127) != s(bool,sK7('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(bool,X127)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f42671])).
fof(f42671,plain,(
  ( ! [X127,X126] : (s(bool,X127) != s(bool,sK7('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.bool.DATATYPE_1'(s(bool,X127))) | s(bool,'T_0') = s(bool,X126)) ) | $spl8),
  inference(superposition,[],[f5910,f742])).
fof(f44049,plain,(
  ( ! [X120] : (s(bool,X120) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,X120) = s(bool,'const.bool.DATATYPE_1'(s(bool,X120)))) ) | $spl58),
  inference(cnf_transformation,[],[f44049_D])).
fof(f44049_D,plain,(
  ( ! [X120] : (s(bool,X120) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,X120) = s(bool,'const.bool.DATATYPE_1'(s(bool,X120)))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f43211,plain,(
  ( ! [X120,X119] : (s(bool,X120) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X119) | s(bool,X120) = s(bool,'const.bool.DATATYPE_1'(s(bool,X120)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f42668])).
fof(f42668,plain,(
  ( ! [X120,X119] : (s(bool,X120) != s(bool,'|dollar|exists_1'(s(fun(fun(fun(bool,bool),bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X119) | s(bool,X120) = s(bool,'const.bool.DATATYPE_1'(s(bool,X120))) | s(bool,'T_0') = s(bool,X119)) ) | $spl8),
  inference(superposition,[],[f5270,f742])).
fof(f44048,plain,(
  ( ! [X118] : (s(bool,X118) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,X118) = s(bool,'const.bool.DATATYPE_1'(s(bool,X118)))) ) | $spl56),
  inference(cnf_transformation,[],[f44048_D])).
fof(f44048_D,plain,(
  ( ! [X118] : (s(bool,X118) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,X118) = s(bool,'const.bool.DATATYPE_1'(s(bool,X118)))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f43212,plain,(
  ( ! [X118,X117] : (s(bool,X118) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,'const.bool.DATATYPE_1'(s(bool,X118)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f42667])).
fof(f42667,plain,(
  ( ! [X118,X117] : (s(bool,X118) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,'const.bool.DATATYPE_1'(s(bool,X118))) | s(bool,'T_0') = s(bool,X117)) ) | $spl8),
  inference(superposition,[],[f4602,f742])).
fof(f44046,plain,(
  ( ! [X105,X106] : (s(bool,X105) != s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X105) = s(bool,'const.bool.DATATYPE_1'(s(bool,X105)))) ) | $spl54),
  inference(cnf_transformation,[],[f44046_D])).
fof(f44046_D,plain,(
  ( ! [X105,X106] : (s(bool,X105) != s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,X105) = s(bool,'const.bool.DATATYPE_1'(s(bool,X105)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f43215,plain,(
  ( ! [X105,X106,X104] : (s(bool,X105) != s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,'const.bool.DATATYPE_1'(s(bool,X105)))) )),
  inference(duplicate_literal_removal,[],[f42662])).
fof(f42662,plain,(
  ( ! [X105,X106,X104] : (s(bool,X105) != s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,'const.bool.DATATYPE_1'(s(bool,X105))) | s(bool,'T_0') = s(bool,X104)) )),
  inference(superposition,[],[f2082,f742])).
fof(f44043,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(bool,X1)))) )),
  inference(condensation,[],[f44042])).
fof(f44042,plain,(
  ( ! [X94,X92,X93] : (s(bool,'T_0') != s(bool,X93) | s(bool,X92) = s(bool,X94) | s(bool,'F_0') = s(bool,X94) | s(bool,X93) = s(bool,'const.bool.DATATYPE_1'(s(bool,X93)))) )),
  inference(subsumption_resolution,[],[f42658,f1400])).
fof(f42658,plain,(
  ( ! [X94,X92,X93] : (s(bool,'T_0') != s(bool,X93) | s(bool,X92) = s(bool,X94) | s(bool,'F_0') = s(bool,X94) | s(bool,X93) = s(bool,'const.bool.DATATYPE_1'(s(bool,X93))) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f1400,f742])).
fof(f44041,plain,(
  ( ! [X90,X91] : (s(bool,X90) != s(bool,X91) | s(bool,X90) = s(bool,'const.bool.DATATYPE_1'(s(bool,X90))) | s(bool,'F_0') = s(bool,X91)) ) | $spl50),
  inference(cnf_transformation,[],[f44041_D])).
fof(f44041_D,plain,(
  ( ! [X90,X91] : (s(bool,X90) != s(bool,X91) | s(bool,X90) = s(bool,'const.bool.DATATYPE_1'(s(bool,X90))) | s(bool,'F_0') = s(bool,X91)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f43216,plain,(
  ( ! [X90,X91,X89] : (s(bool,X90) != s(bool,X91) | s(bool,'T_0') = s(bool,X89) | s(bool,'F_0') = s(bool,X91) | s(bool,X90) = s(bool,'const.bool.DATATYPE_1'(s(bool,X90)))) )),
  inference(duplicate_literal_removal,[],[f42657])).
fof(f42657,plain,(
  ( ! [X90,X91,X89] : (s(bool,X90) != s(bool,X91) | s(bool,'T_0') = s(bool,X89) | s(bool,'F_0') = s(bool,X91) | s(bool,X90) = s(bool,'const.bool.DATATYPE_1'(s(bool,X90))) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f1197,f742])).
fof(f44029,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) != s(bool,'const.bool.DATATYPE_1'(s(X65,X66))) | s(bool,X64) = s(bool,'const.bool.DATATYPE_1'(s(bool,X64)))) ) | $spl48),
  inference(cnf_transformation,[],[f44029_D])).
fof(f44029_D,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) != s(bool,'const.bool.DATATYPE_1'(s(X65,X66))) | s(bool,X64) = s(bool,'const.bool.DATATYPE_1'(s(bool,X64)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f43218,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,X64) != s(bool,'const.bool.DATATYPE_1'(s(X65,X66))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.bool.DATATYPE_1'(s(bool,X64)))) )),
  inference(duplicate_literal_removal,[],[f42649])).
fof(f42649,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,X64) != s(bool,'const.bool.DATATYPE_1'(s(X65,X66))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.bool.DATATYPE_1'(s(bool,X64))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f557,f742])).
fof(f43279,plain,(
  ( ! [X85,X84] : (s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.bool.DATATYPE_1'(s(bool,X85))) | s(bool,X85) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f42271])).
fof(f42271,plain,(
  ( ! [X85,X84] : (s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.bool.DATATYPE_1'(s(bool,X85))) | s(bool,X85) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X84)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f742,f20385])).
fof(f43403,plain,(
  ( ! [X68,X66] : (s(bool,X66) = s(bool,'const.bool.DATATYPE_1'(s(bool,X66))) | s(bool,X66) = s(bool,X68) | s(bool,X68) = s(bool,'const.bool.DATATYPE_1'(s(bool,X68)))) ) | $spl44),
  inference(cnf_transformation,[],[f43403_D])).
fof(f43403_D,plain,(
  ( ! [X68,X66] : (s(bool,X66) = s(bool,'const.bool.DATATYPE_1'(s(bool,X66))) | s(bool,X66) = s(bool,X68) | s(bool,X68) = s(bool,'const.bool.DATATYPE_1'(s(bool,X68)))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f43281,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,'const.bool.DATATYPE_1'(s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,X10) = s(bool,'const.bool.DATATYPE_1'(s(bool,X10)))) )),
  inference(duplicate_literal_removal,[],[f42247])).
fof(f42247,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,'const.bool.DATATYPE_1'(s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,X10) = s(bool,'const.bool.DATATYPE_1'(s(bool,X10))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f742,f742])).
fof(f43290,plain,(
  ( ! [X48,X49] : (s(bool,X49) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X49) = s(bool,'const.bool.DATATYPE_1'(s(bool,X49))) | s(bool,'T_0') = s(bool,X48)) ) | ($spl12 | $spl20)),
  inference(duplicate_literal_removal,[],[f42152])).
fof(f42152,plain,(
  ( ! [X48,X49] : (s(bool,X49) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,X49) = s(bool,'const.bool.DATATYPE_1'(s(bool,X49))) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f742,f20385])).
fof(f43293,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,X19) = s(bool,'const.bool.DATATYPE_1'(s(bool,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.DATATYPE_1'(s(bool,X18)))) )),
  inference(duplicate_literal_removal,[],[f42141])).
fof(f42141,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,X19) = s(bool,'const.bool.DATATYPE_1'(s(bool,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.DATATYPE_1'(s(bool,X18))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f742,f742])).
fof(f43341,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,'const.bool.DATATYPE_1'(s(bool,X20))) | s(bool,X22) = s(bool,'const.bool.DATATYPE_1'(s(bool,X22))) | s(bool,X20) = s(bool,X22)) )),
  inference(duplicate_literal_removal,[],[f42045])).
fof(f42045,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,'const.bool.DATATYPE_1'(s(bool,X20))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.bool.DATATYPE_1'(s(bool,X22))) | s(bool,X20) = s(bool,X22)) )),
  inference(superposition,[],[f742,f742])).
fof(f43359,plain,(
  ( ! [X68,X66,X67] : (s(bool,X66) = s(bool,'const.bool.DATATYPE_1'(s(bool,X66))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.bool.DATATYPE_1'(s(bool,X68))) | s(bool,X66) = s(bool,X68)) )),
  inference(duplicate_literal_removal,[],[f41938])).
fof(f41938,plain,(
  ( ! [X68,X66,X67] : (s(bool,X66) = s(bool,'const.bool.DATATYPE_1'(s(bool,X66))) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.bool.DATATYPE_1'(s(bool,X68))) | s(bool,X66) = s(bool,X68)) )),
  inference(superposition,[],[f742,f742])).
fof(f24420,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382,f24384,f24386,f24399,f24402,f24416,f24419])).
fof(f24419,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24418,f235])).
fof(f24418,plain,(
  ( ! [X46] : (~p(s(bool,'T_0')) | s(bool,X46) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f23852,f23901])).
fof(f23852,plain,(
  ( ! [X46] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X46))),s(bool,'T_0')))) | s(bool,X46) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) ) | $spl28),
  inference(superposition,[],[f330,f23386])).
fof(f24416,plain,(
  ( ! [X45] : (s(bool,X45) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24415,f235])).
fof(f24415,plain,(
  ( ! [X45] : (~p(s(bool,'T_0')) | s(bool,X45) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f23851,f23901])).
fof(f23851,plain,(
  ( ! [X45] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X45)))) | s(bool,X45) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) ) | $spl28),
  inference(superposition,[],[f330,f23386])).
fof(f24402,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24260,f235])).
fof(f24260,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f301])).
fof(f24399,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24241,f235])).
fof(f24241,plain,(
  ( ! [X14,X12,X15,X16] : (~p(s(bool,'T_0')) | s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4819])).
fof(f24386,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24200,f235])).
fof(f24200,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4769])).
fof(f24384,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,X59)) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24197,f235])).
fof(f24197,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X59)) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f6535])).
fof(f24382,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24288,f235])).
fof(f24288,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(condensation,[],[f24182])).
fof(f24182,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f316])).
fof(f24380,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24295,f235])).
fof(f24295,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | ($spl28 | $spl32)),
  inference(condensation,[],[f24172])).
fof(f24172,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f313])).
fof(f24378,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24168,f235])).
fof(f24168,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4731])).
fof(f24368,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24149,f235])).
fof(f24149,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f330])).
fof(f24333,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24332,f235])).
fof(f24332,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f24017,f3152])).
fof(f24017,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0')))) | p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f6066])).
fof(f24330,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24329,f235])).
fof(f24329,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f24015,f2895])).
fof(f24015,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f6008])).
fof(f24322,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24321,f235])).
fof(f24321,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | ($spl28 | $spl32)),
  inference(condensation,[],[f24320])).
fof(f24320,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | ($spl28 | $spl32)),
  inference(condensation,[],[f24319])).
fof(f24319,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f23987,f23901])).
fof(f23987,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))),s(bool,'T_0')))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4753])).
fof(f24317,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24316,f235])).
fof(f24316,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | ($spl28 | $spl32)),
  inference(condensation,[],[f24315])).
fof(f24315,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | ($spl28 | $spl32)),
  inference(condensation,[],[f24314])).
fof(f24314,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f23982,f23901])).
fof(f23982,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X40)))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4715])).
fof(f24307,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f23904,f23901])).
fof(f23904,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f303])).
fof(f24305,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f23902,f23901])).
fof(f23902,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f249])).
fof(f23901,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,X13)) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f23900,f235])).
fof(f23900,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X13)) ) | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f23814,f23389])).
fof(f23877,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X4)) ) | $spl28),
  inference(subsumption_resolution,[],[f23789,f350])).
fof(f23789,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X4) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X4)) ) | $spl28),
  inference(superposition,[],[f23386,f1108])).
fof(f24417,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382,f24384,f24386,f24399,f24402,f24416])).
fof(f24403,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382,f24384,f24386,f24399,f24402])).
fof(f24400,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382,f24384,f24386,f24399])).
fof(f24398,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24232,f235])).
fof(f24232,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4792])).
fof(f24397,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24231,f235])).
fof(f24231,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4791])).
fof(f24396,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24230,f235])).
fof(f24230,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4695])).
fof(f24395,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24229,f235])).
fof(f24229,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4696])).
fof(f24394,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24228,f235])).
fof(f24228,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4702])).
fof(f24393,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24227,f235])).
fof(f24227,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4703])).
fof(f24392,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24226,f235])).
fof(f24226,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4698])).
fof(f24391,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24225,f235])).
fof(f24225,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f4697])).
fof(f24390,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24219,f235])).
fof(f24219,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13496])).
fof(f24389,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24218,f235])).
fof(f24218,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13343])).
fof(f24388,plain,(
  $false | ($spl15 | $spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24217,f235])).
fof(f24217,plain,(
  ~p(s(bool,'T_0')) | ($spl15 | $spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13753])).
fof(f13753,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) | $spl15),
  inference(forward_demodulation,[],[f13620,f335])).
fof(f13620,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))))) | $spl15),
  inference(unit_resulting_resolution,[],[f10466,f330])).
fof(f10466,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | $spl15),
  inference(unit_resulting_resolution,[],[f5597,f245])).
fof(f24387,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382,f24384,f24386])).
fof(f24385,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382,f24384])).
fof(f24383,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380,f24382])).
fof(f24381,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378,f24380])).
fof(f24379,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368,f24378])).
fof(f24377,plain,(
  $false | ($spl8 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f24376,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368])).
fof(f24376,plain,(
  ( ! [X50] : (p(s(bool,X50))) ) | ($spl8 | $spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24165,f235])).
fof(f24165,plain,(
  ( ! [X50] : (~p(s(bool,'T_0')) | p(s(bool,X50))) ) | ($spl8 | $spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f6525])).
fof(f24369,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333,f24368])).
fof(f24350,plain,(
  $false | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f24349,f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333])).
fof(f24349,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24348,f235])).
fof(f24348,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(forward_demodulation,[],[f24102,f23901])).
fof(f24102,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),'_i_0_0'))),s(bool,'T_0')))) | p(s(bool,X0))) ) | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f22421])).
fof(f24347,plain,(
  $false | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24346,f235])).
fof(f24346,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(forward_demodulation,[],[f24086,f23901])).
fof(f24086,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'),s(fun(bool,bool),'_i_0_0'))),s(bool,'T_0')))) | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f20577])).
fof(f24345,plain,(
  $false | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24083,f23901])).
fof(f24083,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0'))) | ($spl12 | $spl20 | $spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f20301])).
fof(f24342,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24047,f23901])).
fof(f24047,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13558])).
fof(f24341,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24340,f235])).
fof(f24340,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f24046,f23901])).
fof(f24046,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0')))))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13557])).
fof(f24339,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24043,f23901])).
fof(f24043,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13497])).
fof(f24338,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24038,f23901])).
fof(f24038,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13344])).
fof(f24337,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24034,f23901])).
fof(f24034,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13293])).
fof(f24336,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f24335,f235])).
fof(f24335,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(forward_demodulation,[],[f24033,f23901])).
fof(f24033,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0')))))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f13292])).
fof(f24334,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330,f24333])).
fof(f24331,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322,f24330])).
fof(f24323,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317,f24322])).
fof(f24318,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307,f24317])).
fof(f24309,plain,(
  $false | ($spl28 | $spl32)),
  inference(subsumption_resolution,[],[f23905,f235])).
fof(f23905,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f23901,f342])).
fof(f24308,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305,f24307])).
fof(f24306,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f5063,f5072,f5075,f5069,f5079,f1781,f1782,f5104,f2565,f1805,f1803,f1804,f289,f1811,f6473,f5920,f5178,f4840,f4699,f4694,f3886,f3830,f3713,f3599,f3430,f3364,f3251,f2987,f2558,f2557,f2556,f2547,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f12823,f12822,f12818,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13338,f13344,f13401,f13497,f13554,f13558,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15413,f15525,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f309,f312,f2633,f2759,f2820,f2822,f3988,f3990,f4169,f4234,f4236,f5601,f5599,f310,f5587,f5588,f5589,f5559,f5781,f5779,f311,f5773,f5774,f5775,f330,f331,f4708,f4746,f4978,f5016,f5590,f5776,f5127,f3973,f5759,f5591,f5561,f5568,f5562,f5560,f5566,f13364,f13362,f4710,f4731,f4797,f4980,f5001,f5132,f15482,f15484,f6008,f4709,f4715,f4979,f4985,f13305,f13303,f313,f314,f315,f2735,f2737,f2860,f2862,f5957,f5994,f6010,f6017,f6068,f6075,f6128,f6130,f316,f317,f318,f3072,f3122,f3125,f3135,f3137,f3394,f3396,f6510,f6512,f4711,f4717,f4720,f4722,f4724,f4981,f4987,f4990,f4992,f4994,f5019,f5025,f5028,f5030,f5032,f15180,f15182,f15183,f2748,f15522,f2734,f6535,f16266,f6509,f4748,f4769,f4820,f5018,f5039,f5155,f15483,f15485,f4747,f4753,f5017,f5023,f6066,f13354,f2873,f3407,f15523,f15524,f2859,f3393,f2866,f2878,f2960,f3500,f3217,f3682,f3400,f3412,f3499,f3681,f13292,f13343,f13496,f13557,f4218,f5586,f4703,f4702,f4697,f4698,f4695,f4696,f4791,f4792,f5113,f5114,f5115,f4389,f4390,f4391,f4395,f4397,f4427,f4436,f4437,f4438,f4488,f4503,f6127,f15412,f5101,f5154,f4819,f12847,f12848,f288,f561,f562,f563,f2512,f2513,f2514,f2515,f2566,f2634,f2637,f4451,f4449,f1802,f1934,f1936,f2562,f15521,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f15528,f2559,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2548,f2550,f3838,f345,f301,f302,f3833,f3836,f3832,f3835,f3834,f3837,f4479,f21584,f21637,f21639,f21652,f21653,f21636,f21708,f21707,f21706,f21689,f21688,f21761,f21846,f21845,f21844,f21893,f22019,f22087,f22086,f22085,f22066,f22131,f22157,f22156,f22155,f22136,f22200,f22544,f22545,f22546,f22548,f22954,f22955,f22956,f22958,f23150,f23292,f23328,f23327,f23326,f23322,f23307,f23329,f23330,f23331,f23332,f23333,f23393,f23335,f23336,f23337,f23338,f23404,f23389,f23386,f23494,f23495,f23496,f23641,f23500,f23502,f23526,f23527,f23528,f23550,f23669,f23559,f23560,f23561,f23566,f23588,f23692,f23693,f23593,f23597,f23601,f23607,f23611,f23615,f23624,f23724,f23723,f23722,f23772,f23877,f23901,f24305])).
fof(f23411,plain,(
  $false | ($spl28 | $spl38)),
  inference(subsumption_resolution,[],[f23410,f350])).
fof(f23410,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl28 | $spl38)),
  inference(backward_demodulation,[],[f23386,f23395])).
fof(f23395,plain,(
  s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl38),
  inference(cnf_transformation,[],[f23395_D])).
fof(f23395_D,plain,(
  s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f23391,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) | $spl34),
  inference(cnf_transformation,[],[f23391_D])).
fof(f23391_D,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f23400,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl2),
  inference(forward_demodulation,[],[f23341,f17368])).
fof(f23341,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl2),
  inference(superposition,[],[f22136,f17396])).
fof(f17396,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X7)) ) | $spl2),
  inference(subsumption_resolution,[],[f17376,f342])).
fof(f17376,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X7)) ) | $spl2),
  inference(superposition,[],[f1810,f1108])).
fof(f23386,plain,(
  s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl28),
  inference(cnf_transformation,[],[f23386_D])).
fof(f23386_D,plain,(
  s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f23388,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'F_0')))) | $spl30),
  inference(cnf_transformation,[],[f23388_D])).
fof(f23388_D,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'F_0')))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f23399,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl12),
  inference(forward_demodulation,[],[f23340,f5596])).
fof(f23340,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,sK6('_i_0_0',bool))))) | s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl12),
  inference(superposition,[],[f22136,f10286])).
fof(f23398,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl8),
  inference(forward_demodulation,[],[f23339,f5798])).
fof(f23339,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,sK7('_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | $spl8),
  inference(superposition,[],[f22136,f5828])).
fof(f5828,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,sK7('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl8),
  inference(subsumption_resolution,[],[f5805,f342])).
fof(f5805,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,sK7('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl8),
  inference(superposition,[],[f5778,f1108])).
fof(f23397,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X8)))) | s(bool,'F_0') = s(bool,X8)) ) | $spl42),
  inference(cnf_transformation,[],[f23397_D])).
fof(f23397_D,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X8)))) | s(bool,'F_0') = s(bool,X8)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f23338,plain,(
  ( ! [X9] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X9)))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f22136,f1108])).
fof(f23337,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X8)))) | s(bool,'F_0') = s(bool,X8) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) )),
  inference(superposition,[],[f22136,f1108])).
fof(f23396,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl40),
  inference(cnf_transformation,[],[f23396_D])).
fof(f23396_D,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X6)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f23336,plain,(
  ( ! [X7] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,X7) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f22136,f1108])).
fof(f23335,plain,(
  ( ! [X6] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,X6) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X6)) )),
  inference(superposition,[],[f22136,f1108])).
fof(f23393,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))),
  inference(forward_demodulation,[],[f23334,f270])).
fof(f23334,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'const.bool.DATATYPE_1'(s(X4,X5)))))) | s(bool,'F_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) )),
  inference(superposition,[],[f22136,f1071])).
fof(f23389,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl32),
  inference(cnf_transformation,[],[f23389_D])).
fof(f23389_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f23333,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,X3) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f22136,f365])).
fof(f23392,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl36),
  inference(cnf_transformation,[],[f23392_D])).
fof(f23392_D,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f23332,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f22136,f365])).
fof(f23331,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))) )),
  inference(superposition,[],[f22136,f365])).
fof(f23330,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,X0) = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f22136,f365])).
fof(f23329,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK7('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK7('?_1',fun(bool,bool)),bool))),
  inference(superposition,[],[f22136,f242])).
fof(f18258,plain,(
  ( ! [X72,X73] : (s(bool,X73) != s(bool,sK3(X72,'_i_0_0',bool)) | s(bool,'F_0') = s(bool,X73)) ) | $spl26),
  inference(cnf_transformation,[],[f18258_D])).
fof(f18258_D,plain,(
  ( ! [X72,X73] : (s(bool,X73) != s(bool,sK3(X72,'_i_0_0',bool)) | s(bool,'F_0') = s(bool,X73)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f19006,plain,(
  ( ! [X80,X81,X82] : (s(bool,X82) != s(bool,sK3(X81,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X80) | s(bool,'F_0') = s(bool,X82)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f18878])).
fof(f18878,plain,(
  ( ! [X80,X81,X82] : (s(bool,X82) != s(bool,sK3(X81,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X80) | s(bool,'F_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X80)) ) | $spl4),
  inference(superposition,[],[f1197,f18489])).
fof(f18489,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,sK3(X1,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(subsumption_resolution,[],[f18468,f235])).
fof(f18468,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,sK3(X1,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(superposition,[],[f1816,f365])).
fof(f18196,plain,(
  ( ! [X72,X71,X73] : (s(bool,X73) != s(bool,sK3(X72,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X71) | s(bool,'F_0') = s(bool,X73)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f18072])).
fof(f18072,plain,(
  ( ! [X72,X71,X73] : (s(bool,X73) != s(bool,sK3(X72,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X71) | s(bool,'F_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f1197,f17471])).
fof(f17471,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,sK3(X2,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(subsumption_resolution,[],[f17402,f350])).
fof(f17402,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,sK3(X2,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1808,f365])).
fof(f17317,plain,(
  $false | ($spl2 | $spl10)),
  inference(subsumption_resolution,[],[f1810,f4239])).
fof(f17316,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303,f17305,f17307,f17309,f17311,f17313,f17315])).
fof(f17315,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) ) | $spl10),
  inference(subsumption_resolution,[],[f2820,f4239])).
fof(f17313,plain,(
  ( ! [X6,X4,X3] : (s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) ) | $spl10),
  inference(subsumption_resolution,[],[f3988,f4239])).
fof(f17311,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) ) | $spl10),
  inference(subsumption_resolution,[],[f4234,f4239])).
fof(f17309,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK3(X6,X5,X4)))) | s(bool,'T_0') = s(bool,X7)) ) | $spl10),
  inference(subsumption_resolution,[],[f1811,f4239])).
fof(f17307,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,happ(s(fun(X2,bool),X3),s(X2,sK6(X3,X2)))) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f5599,f4239])).
fof(f17305,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f5779,f4239])).
fof(f17303,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2)) ) | $spl10),
  inference(subsumption_resolution,[],[f331,f4239])).
fof(f17301,plain,(
  ( ! [X19,X17,X20,X18] : (s(X17,X20) != s(X17,sK3(X18,X19,X17)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) ) | $spl10),
  inference(subsumption_resolution,[],[f4978,f4239])).
fof(f17299,plain,(
  ( ! [X19,X17,X20,X18] : (s(X17,X20) != s(X17,sK3(X18,X19,X17)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) ) | $spl10),
  inference(subsumption_resolution,[],[f5016,f4239])).
fof(f17296,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl10),
  inference(subsumption_resolution,[],[f4980,f4239])).
fof(f17294,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) != s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl10),
  inference(subsumption_resolution,[],[f5001,f4239])).
fof(f17292,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X21)) ) | $spl10),
  inference(subsumption_resolution,[],[f4979,f4239])).
fof(f17290,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(condensation,[],[f17289])).
fof(f17289,plain,(
  ( ! [X4,X2] : (s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f2735,f4239])).
fof(f17287,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(condensation,[],[f17286])).
fof(f17286,plain,(
  ( ! [X4,X2] : (s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f2860,f4239])).
fof(f17284,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f17283,f4239])).
fof(f17283,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f6128,f4239])).
fof(f17279,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(subsumption_resolution,[],[f3122,f4239])).
fof(f17277,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) ) | $spl10),
  inference(subsumption_resolution,[],[f3135,f4239])).
fof(f17275,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(condensation,[],[f17274])).
fof(f17274,plain,(
  ( ! [X4,X2] : (s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f3394,f4239])).
fof(f17272,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1)) ) | $spl10),
  inference(condensation,[],[f17271])).
fof(f17271,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) ) | $spl10),
  inference(subsumption_resolution,[],[f4981,f4239])).
fof(f17269,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1)) ) | $spl10),
  inference(condensation,[],[f17268])).
fof(f17268,plain,(
  ( ! [X54,X55,X53] : (s(bool,'T_0') != s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) ) | $spl10),
  inference(subsumption_resolution,[],[f4990,f4239])).
fof(f17266,plain,(
  ( ! [X65] : (s(bool,'T_0') = s(bool,X65)) ) | $spl10),
  inference(subsumption_resolution,[],[f17265,f17187])).
fof(f17265,plain,(
  ( ! [X66,X65] : (s(bool,'F_0') != s(bool,X66) | s(bool,'T_0') = s(bool,X65)) ) | $spl10),
  inference(subsumption_resolution,[],[f4994,f4239])).
fof(f17263,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1)) ) | $spl10),
  inference(condensation,[],[f17262])).
fof(f17262,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) ) | $spl10),
  inference(subsumption_resolution,[],[f5019,f4239])).
fof(f17260,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1)) ) | $spl10),
  inference(condensation,[],[f17259])).
fof(f17259,plain,(
  ( ! [X54,X55,X53] : (s(bool,'T_0') != s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) ) | $spl10),
  inference(subsumption_resolution,[],[f5028,f4239])).
fof(f17257,plain,(
  ( ! [X65] : (s(bool,'T_0') = s(bool,X65)) ) | $spl10),
  inference(subsumption_resolution,[],[f17256,f17187])).
fof(f17256,plain,(
  ( ! [X66,X65] : (s(bool,'F_0') != s(bool,X66) | s(bool,'T_0') = s(bool,X65)) ) | $spl10),
  inference(subsumption_resolution,[],[f5032,f4239])).
fof(f17254,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | $spl10),
  inference(subsumption_resolution,[],[f2748,f4239])).
fof(f17252,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl10),
  inference(subsumption_resolution,[],[f5018,f4239])).
fof(f17250,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) != s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl10),
  inference(subsumption_resolution,[],[f5039,f4239])).
fof(f17248,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X21)) ) | $spl10),
  inference(subsumption_resolution,[],[f5017,f4239])).
fof(f17246,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | $spl10),
  inference(subsumption_resolution,[],[f2873,f4239])).
fof(f17244,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | $spl10),
  inference(subsumption_resolution,[],[f3407,f4239])).
fof(f17224,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) != s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl10),
  inference(subsumption_resolution,[],[f5154,f4239])).
fof(f17220,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK3(X2,X1,X0))) ) | $spl10),
  inference(subsumption_resolution,[],[f288,f4239])).
fof(f17218,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) ) | $spl10),
  inference(subsumption_resolution,[],[f561,f4239])).
fof(f17216,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X3,X7) = s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) ) | $spl10),
  inference(subsumption_resolution,[],[f562,f4239])).
fof(f17214,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X11) = s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) ) | $spl10),
  inference(subsumption_resolution,[],[f563,f4239])).
fof(f17206,plain,(
  ( ! [X107,X105,X104] : (s(X104,X107) = s(X104,sK3(X107,X105,X104))) ) | $spl10),
  inference(subsumption_resolution,[],[f2637,f4239])).
fof(f17204,plain,(
  ( ! [X212,X216,X215,X213,X214] : (s(X212,X216) = s(X212,sK3(X216,'const.ind_type.FCONS_3'(s(fun(X212,bool),X213),s(fun('type.num.num',fun(X212,bool)),X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',X215)))),X212))) ) | $spl10),
  inference(subsumption_resolution,[],[f4451,f4239])).
fof(f17201,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(condensation,[],[f17200])).
fof(f17200,plain,(
  ( ! [X4,X2] : (s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl10),
  inference(subsumption_resolution,[],[f1934,f4239])).
fof(f17199,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl10),
  inference(backward_demodulation,[],[f17187,f303])).
fof(f17187,plain,(
  ( ! [X97] : (s(bool,'F_0') = s(bool,X97)) ) | $spl10),
  inference(subsumption_resolution,[],[f15528,f4239])).
fof(f17186,plain,(
  ( ! [X34] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X34)))) ) | $spl10),
  inference(subsumption_resolution,[],[f17185,f4239])).
fof(f17185,plain,(
  ( ! [X33,X34] : (p(s(bool,X33)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X34)))) ) | $spl10),
  inference(subsumption_resolution,[],[f2535,f17184])).
fof(f17184,plain,(
  ( ! [X68,X69,X67] : (s(bool,X69) = s(bool,sK3(X67,X68,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X68)))) ) | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183])).
fof(f17183,plain,(
  ( ! [X68,X69,X67] : (s(bool,X69) = s(bool,sK3(X67,X68,bool)) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X68)))) ) | $spl10),
  inference(subsumption_resolution,[],[f2548,f4239])).
fof(f17177,plain,(
  ( ! [X10,X11] : (s('type.fcp.cart'(bool,X10),X11) != s('type.fcp.cart'(bool,X10),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f3837,f4239])).
fof(f17176,plain,(
  ( ! [X344,X341,X343] : (s('type.fcp.cart'(bool,X341),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.fcp.cart'(bool,X341),happ(s(fun('type.num.num','type.fcp.cart'(bool,X341)),X343),s('type.num.num',X344)))) ) | $spl10),
  inference(subsumption_resolution,[],[f4479,f4239])).
fof(f17314,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303,f17305,f17307,f17309,f17311,f17313])).
fof(f17312,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303,f17305,f17307,f17309,f17311])).
fof(f17310,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303,f17305,f17307,f17309])).
fof(f17308,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303,f17305,f17307])).
fof(f17306,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303,f17305])).
fof(f17304,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301,f17303])).
fof(f17302,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299,f17301])).
fof(f17300,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296,f17299])).
fof(f17298,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f5127,f4239])).
fof(f17297,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294,f17296])).
fof(f17295,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292,f17294])).
fof(f17293,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290,f17292])).
fof(f17291,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287,f17290])).
fof(f17288,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284,f17287])).
fof(f17285,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279,f17284])).
fof(f17282,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f17281,f4239])).
fof(f17281,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl10),
  inference(subsumption_resolution,[],[f317,f4239])).
fof(f17280,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277,f17279])).
fof(f17278,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275,f17277])).
fof(f17276,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272,f17275])).
fof(f17273,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269,f17272])).
fof(f17270,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266,f17269])).
fof(f17267,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263,f17266])).
fof(f17264,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260,f17263])).
fof(f17261,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257,f17260])).
fof(f17258,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254,f17257])).
fof(f17255,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252,f17254])).
fof(f17253,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250,f17252])).
fof(f17251,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248,f17250])).
fof(f17249,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246,f17248])).
fof(f17247,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244,f17246])).
fof(f17245,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224,f17244])).
fof(f17243,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f2960,f4239])).
fof(f17242,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3500,f4239])).
fof(f17241,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3217,f4239])).
fof(f17240,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3682,f4239])).
fof(f17239,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3499,f4239])).
fof(f17238,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3681,f4239])).
fof(f17237,plain,(
  $false | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4843,f4239])).
fof(f4843,plain,(
  p(s(bool,happ(s(fun(fun(fun(fun(bool,bool),bool),bool),bool),'?_1'),s(fun(fun(fun(bool,bool),bool),bool),'?_1')))) | $spl8),
  inference(unit_resulting_resolution,[],[f4240,f312])).
fof(f17236,plain,(
  $false | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4275,f4239])).
fof(f4275,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(fun(bool,bool),bool),'?_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl8),
  inference(forward_demodulation,[],[f4250,f335])).
fof(f4250,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f4233,f318])).
fof(f17235,plain,(
  $false | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4276,f4239])).
fof(f4276,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(fun(bool,bool),bool),'?_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl8),
  inference(forward_demodulation,[],[f4249,f335])).
fof(f4249,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f4233,f315])).
fof(f17234,plain,(
  $false | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f5123,f4239])).
fof(f5123,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'),s(fun(fun(bool,bool),bool),'?_1'))),s(fun(bool,bool),'_i_0_0')))) | $spl8),
  inference(forward_demodulation,[],[f4944,f335])).
fof(f4944,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))))) | $spl8),
  inference(unit_resulting_resolution,[],[f4255,f331])).
fof(f17233,plain,(
  $false | ($spl10 | $spl12 | $spl15)),
  inference(subsumption_resolution,[],[f14395,f4239])).
fof(f14395,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) | ($spl12 | $spl15)),
  inference(forward_demodulation,[],[f14152,f335])).
fof(f14152,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))))) | ($spl12 | $spl15)),
  inference(unit_resulting_resolution,[],[f10483,f331])).
fof(f17232,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f5113,f4239])).
fof(f17231,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f5114,f4239])).
fof(f17230,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f5115,f4239])).
fof(f17226,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f5101,f4239])).
fof(f17225,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220,f17224])).
fof(f17223,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f12847,f4239])).
fof(f17222,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f12848,f4239])).
fof(f17221,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218,f17220])).
fof(f17219,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216,f17218])).
fof(f17217,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214,f17216])).
fof(f17215,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206,f17214])).
fof(f17207,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204,f17206])).
fof(f17205,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201,f17204])).
fof(f17202,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f3834,f3837,f3833,f3836,f3832,f3835,f302,f301,f345,f3838,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f4503,f4391,f4390,f6127,f4819,f5154,f5101,f5063,f5113,f5114,f5115,f5072,f4703,f5075,f4702,f4697,f4698,f5069,f4696,f4695,f4791,f4792,f4218,f5586,f2878,f2960,f3217,f3682,f3412,f3681,f2859,f3393,f2873,f3407,f5079,f4748,f4769,f5018,f5039,f2748,f2734,f6535,f6509,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f5028,f5019,f4990,f4981,f4720,f4711,f4710,f4731,f4980,f5001,f1781,f5561,f1782,f5562,f3973,f5759,f5127,f5776,f5590,f5016,f4978,f4746,f4708,f331,f330,f5104,f311,f5779,f5773,f5774,f5775,f5559,f5589,f5587,f5588,f310,f5599,f2565,f1805,f1803,f1804,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f250,f249,f4479,f12823,f12822,f12818,f12847,f12848,f12805,f12857,f12877,f12876,f12914,f12946,f12945,f12941,f12928,f13094,f13114,f13113,f13259,f13293,f13292,f13303,f13305,f13338,f13344,f13343,f13354,f13362,f13364,f13401,f13497,f13496,f13554,f13558,f13557,f13615,f13972,f13998,f14128,f14607,f14642,f14784,f14880,f14881,f14882,f14884,f14885,f15410,f15411,f15412,f15413,f15521,f15522,f15523,f15524,f15525,f15528,f15482,f15483,f15484,f15485,f16266,f15183,f15182,f15180,f12770,f12768,f12255,f10972,f9129,f7351,f2805,f2818,f4239,f17176,f17177,f303,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f17183,f17184,f17186,f17187,f17199,f17201])).
fof(f17181,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f345,f4239])).
fof(f17180,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3833,f4239])).
fof(f17179,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3832,f4239])).
fof(f17178,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f3834,f4239])).
fof(f17175,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17056,f4239])).
fof(f17056,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3834])).
fof(f17174,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17054,f4239])).
fof(f17054,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3832])).
fof(f17173,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17052,f4239])).
fof(f17052,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3833])).
fof(f17172,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17049,f17117])).
fof(f17117,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16849,f4239])).
fof(f16849,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X1) != s(X0,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f331])).
fof(f17049,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f303])).
fof(f17171,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17048,f4239])).
fof(f17048,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f345])).
fof(f17170,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17169,f17117])).
fof(f17169,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17060,f4239])).
fof(f17060,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl6),
  inference(condensation,[],[f17019])).
fof(f17019,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f1934])).
fof(f17168,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17167,f17117])).
fof(f17167,plain,(
  ( ! [X212,X216,X215,X213,X214] : (s(X212,X216) = s(X212,sK3(X216,'const.ind_type.FCONS_3'(s(fun(X212,bool),X213),s(fun('type.num.num',fun(X212,bool)),X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',X215)))),X212))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17016,f4239])).
fof(f17016,plain,(
  ( ! [X212,X216,X215,X213,X214] : (p(s(bool,'F_0')) | s(X212,X216) = s(X212,sK3(X216,'const.ind_type.FCONS_3'(s(fun(X212,bool),X213),s(fun('type.num.num',fun(X212,bool)),X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',X215)))),X212))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f4451])).
fof(f17166,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17165,f17117])).
fof(f17165,plain,(
  ( ! [X107,X105,X104] : (s(X104,X107) = s(X104,sK3(X107,X105,X104))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17015,f4239])).
fof(f17015,plain,(
  ( ! [X107,X105,X106,X104] : (p(s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,'F_0')))))) | s(X104,X107) = s(X104,sK3(X107,X105,X104))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f2637])).
fof(f17164,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17163,f17117])).
fof(f17163,plain,(
  ( ! [X125,X123,X124,X122] : (s(X122,X125) = s(X122,sK3(X125,sK3(X123,X124,fun(X122,bool)),X122))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17162,f17117])).
fof(f17162,plain,(
  ( ! [X125,X123,X124,X122] : (s(X122,X125) = s(X122,sK3(X125,sK3(X123,X124,fun(X122,bool)),X122)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X122,bool),bool),X124)))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17013,f4239])).
fof(f17013,plain,(
  ( ! [X125,X123,X124,X122] : (p(s(bool,'F_0')) | s(X122,X125) = s(X122,sK3(X125,sK3(X123,X124,fun(X122,bool)),X122)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X122,bool),bool),X124)))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f2566])).
fof(f17161,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17160,f17117])).
fof(f17160,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X11) = s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17008,f4239])).
fof(f17008,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'F_0')) | s(X8,X11) = s(X8,sK3(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f563])).
fof(f17159,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17158,f17117])).
fof(f17158,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X3,X7) = s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17007,f4239])).
fof(f17007,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'F_0')) | s(X3,X7) = s(X3,sK3(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f562])).
fof(f17157,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17156,f17117])).
fof(f17156,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17006,f4239])).
fof(f17006,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK3(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f561])).
fof(f17155,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17154,f17117])).
fof(f17154,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK3(X2,X1,X0))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17005,f4239])).
fof(f17005,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK3(X2,X1,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f288])).
fof(f17153,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17004,f4239])).
fof(f17004,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f12848])).
fof(f17152,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17003,f4239])).
fof(f17003,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f12847])).
fof(f17151,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17000,f4239])).
fof(f17000,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f5101])).
fof(f17150,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16987,f4239])).
fof(f16987,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f5115])).
fof(f17149,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16986,f4239])).
fof(f16986,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f5114])).
fof(f17148,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16985,f4239])).
fof(f16985,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f5113])).
fof(f17147,plain,(
  $false | ($spl6 | $spl10 | $spl12 | $spl15)),
  inference(subsumption_resolution,[],[f16970,f4239])).
fof(f16970,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl12 | $spl15)),
  inference(backward_demodulation,[],[f4231,f14395])).
fof(f17146,plain,(
  $false | ($spl6 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16968,f4239])).
fof(f16968,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl8)),
  inference(backward_demodulation,[],[f4231,f5123])).
fof(f17145,plain,(
  $false | ($spl6 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16967,f4239])).
fof(f16967,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl8)),
  inference(backward_demodulation,[],[f4231,f4276])).
fof(f17144,plain,(
  $false | ($spl6 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16966,f4239])).
fof(f16966,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl8)),
  inference(backward_demodulation,[],[f4231,f4275])).
fof(f17143,plain,(
  $false | ($spl6 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16965,f4239])).
fof(f16965,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl8)),
  inference(backward_demodulation,[],[f4231,f4843])).
fof(f17142,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16964,f4239])).
fof(f16964,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3681])).
fof(f17141,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16963,f4239])).
fof(f16963,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3499])).
fof(f17140,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16960,f4239])).
fof(f16960,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3682])).
fof(f17139,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16959,f4239])).
fof(f16959,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3217])).
fof(f17138,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16958,f4239])).
fof(f16958,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f3500])).
fof(f17137,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16957,f4239])).
fof(f16957,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f2960])).
fof(f17136,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17135,f17117])).
fof(f17135,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16950,f4239])).
fof(f16950,plain,(
  ( ! [X54,X56,X53] : (p(s(bool,'F_0')) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f3407])).
fof(f17134,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17133,f17117])).
fof(f17133,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16949,f4239])).
fof(f16949,plain,(
  ( ! [X54,X56,X53] : (p(s(bool,'F_0')) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f2873])).
fof(f17132,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17131,f17117])).
fof(f17131,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16929,f4239])).
fof(f16929,plain,(
  ( ! [X54,X56,X53] : (p(s(bool,'F_0')) | s(X53,X56) = s(X53,sK3(X56,X54,X53))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f2748])).
fof(f17130,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17129,f17117])).
fof(f17129,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17089,f4239])).
fof(f17089,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl6),
  inference(condensation,[],[f16907])).
fof(f16907,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f3394])).
fof(f17128,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17127,f17117])).
fof(f17127,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16903,f4239])).
fof(f16903,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f3122])).
fof(f17126,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17125,f17117])).
fof(f17125,plain,(
  ( ! [X74] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17124,f4239])).
fof(f17124,plain,(
  ( ! [X74] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16902,f4239])).
fof(f16902,plain,(
  ( ! [X74,X73] : (p(s(bool,'F_0')) | p(s(bool,sK3(X73,X74,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f3072])).
fof(f17123,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17092,f4239])).
fof(f17092,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(condensation,[],[f16900])).
fof(f16900,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f317])).
fof(f17122,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17121,f17117])).
fof(f17121,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17099,f4239])).
fof(f17099,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl6),
  inference(condensation,[],[f16890])).
fof(f16890,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f2860])).
fof(f17120,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17119,f17117])).
fof(f17119,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f17100,f4239])).
fof(f17100,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl6),
  inference(condensation,[],[f16888])).
fof(f16888,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f4231,f2735])).
fof(f17118,plain,(
  $false | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f16856,f4239])).
fof(f16856,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(backward_demodulation,[],[f4231,f5127])).
fof(f1810,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | $spl2),
  inference(cnf_transformation,[],[f1810_D])).
fof(f1810_D,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f2818,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f2793,f235])).
fof(f2793,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f2633,f398])).
fof(f4239,plain,(
  ( ! [X44] : (~p(s(bool,X44))) ) | $spl10),
  inference(cnf_transformation,[],[f4239_D])).
fof(f4239_D,plain,(
  ( ! [X44] : (~p(s(bool,X44))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2805,plain,(
  ( ! [X44] : (~p(s(bool,X44)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f2633,f271])).
fof(f1816,plain,(
  ( ! [X41] : (~p(s(bool,sK3(X41,'_i_0_0',bool)))) ) | $spl4),
  inference(cnf_transformation,[],[f1816_D])).
fof(f1816_D,plain,(
  ( ! [X41] : (~p(s(bool,sK3(X41,'_i_0_0',bool)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f7351,plain,(
  ( ! [X35] : (~p(s(bool,sK3(X35,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f289,f271])).
fof(f9129,plain,(
  ( ! [X49] : (~p(s(bool,X49)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f2633,f271])).
fof(f10972,plain,(
  ( ! [X41] : (~p(s(bool,sK3(X41,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f289,f271])).
fof(f12255,plain,(
  ( ! [X49] : (~p(s(bool,X49)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f2633,f271])).
fof(f1808,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK3(X0,'_i_0_0',bool))) ) | $spl0),
  inference(cnf_transformation,[],[f1808_D])).
fof(f1808_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK3(X0,'_i_0_0',bool))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f12768,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK3(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f12690,f235])).
fof(f12690,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK3(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f289,f398])).
fof(f12770,plain,(
  ( ! [X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f12691,f235])).
fof(f12691,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f2633,f398])).
fof(f16764,plain,(
  ( ! [X59] : (s(bool,X59) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X59)) ) | $spl24),
  inference(cnf_transformation,[],[f16764_D])).
fof(f16764_D,plain,(
  ( ! [X59] : (s(bool,X59) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X59)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f16693,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X59)) ) | ($spl2 | $spl12 | $spl15)),
  inference(duplicate_literal_removal,[],[f16525])).
fof(f16525,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X58)) ) | ($spl2 | $spl12 | $spl15)),
  inference(superposition,[],[f1197,f16381])).
fof(f16381,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl12 | $spl15)),
  inference(trivial_inequality_removal,[],[f16366])).
fof(f16366,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl12 | $spl15)),
  inference(superposition,[],[f16189,f365])).
fof(f16189,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | ($spl2 | $spl12 | $spl15)),
  inference(forward_demodulation,[],[f16109,f10483])).
fof(f16109,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))) | ($spl2 | $spl15)),
  inference(unit_resulting_resolution,[],[f10466,f15696])).
fof(f15696,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl2),
  inference(subsumption_resolution,[],[f15602,f342])).
fof(f15602,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl2),
  inference(superposition,[],[f245,f2368])).
fof(f2368,plain,(
  ( ! [X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X34))) | s(bool,'T_0') = s(bool,X34)) ) | $spl2),
  inference(forward_demodulation,[],[f2233,f1827])).
fof(f1827,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f1810,f246])).
fof(f2233,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X34)))) ) | $spl2),
  inference(superposition,[],[f1849,f271])).
fof(f1849,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X6)) ) | $spl2),
  inference(subsumption_resolution,[],[f1834,f342])).
fof(f1834,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X6)) ) | $spl2),
  inference(superposition,[],[f1810,f1108])).
fof(f10158,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137,f10139,f10149,f9750,f9710,f9704,f9701])).
fof(f9701,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f9695,f249])).
fof(f9704,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f9695,f9695,f308])).
fof(f9710,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f9695,f9695,f308])).
fof(f9750,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f368])).
fof(f10149,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl14),
  inference(subsumption_resolution,[],[f10058,f235])).
fof(f10058,plain,(
  ( ! [X14,X12,X15,X16] : (~p(s(bool,'T_0')) | s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f4819])).
fof(f10139,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl14),
  inference(subsumption_resolution,[],[f10020,f235])).
fof(f10020,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f4769])).
fof(f10137,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl14),
  inference(subsumption_resolution,[],[f9988,f235])).
fof(f9988,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f4731])).
fof(f10135,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | $spl14),
  inference(subsumption_resolution,[],[f9971,f235])).
fof(f9971,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f330])).
fof(f10131,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(condensation,[],[f10130])).
fof(f10130,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | $spl14),
  inference(condensation,[],[f10129])).
fof(f10129,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl14),
  inference(subsumption_resolution,[],[f9903,f9695])).
fof(f9903,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))),s(bool,'T_0')))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f4753])).
fof(f10127,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(condensation,[],[f10126])).
fof(f10126,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | $spl14),
  inference(condensation,[],[f10125])).
fof(f10125,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl14),
  inference(subsumption_resolution,[],[f9898,f9695])).
fof(f9898,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X40)))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f4715])).
fof(f10119,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl14),
  inference(forward_demodulation,[],[f9815,f9754])).
fof(f9815,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f303])).
fof(f9754,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f1037])).
fof(f9760,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f9695,f301])).
fof(f9695,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl14),
  inference(forward_demodulation,[],[f9694,f271])).
fof(f9694,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))))) ) | $spl14),
  inference(subsumption_resolution,[],[f9675,f235])).
fof(f9675,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))))) ) | $spl14),
  inference(superposition,[],[f309,f7298])).
fof(f9299,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X11)) ) | $spl14),
  inference(subsumption_resolution,[],[f9248,f235])).
fof(f9248,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s(bool,X11) != s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X11)) ) | $spl14),
  inference(superposition,[],[f368,f9178])).
fof(f9213,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X7)) ) | $spl14),
  inference(subsumption_resolution,[],[f9187,f342])).
fof(f9187,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X7)) ) | $spl14),
  inference(superposition,[],[f9145,f1108])).
fof(f9178,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1'))) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9145,f1037])).
fof(f9179,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1'))))))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f9145,f1802])).
fof(f9145,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1')))) | $spl14),
  inference(subsumption_resolution,[],[f9115,f235])).
fof(f9115,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1')))) | $spl14),
  inference(superposition,[],[f2633,f7298])).
fof(f8761,plain,(
  ( ! [X49] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X49),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f8760,f335])).
fof(f8760,plain,(
  ( ! [X49] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X49))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl14),
  inference(subsumption_resolution,[],[f8732,f235])).
fof(f8732,plain,(
  ( ! [X49] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X49))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl14),
  inference(superposition,[],[f318,f7298])).
fof(f8615,plain,(
  ( ! [X9] : (s(bool,X9) != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl14),
  inference(subsumption_resolution,[],[f8570,f235])).
fof(f8570,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl14),
  inference(superposition,[],[f368,f7298])).
fof(f8613,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X4),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f8612,f335])).
fof(f8612,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X4))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl14),
  inference(subsumption_resolution,[],[f8565,f235])).
fof(f8565,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X4))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl14),
  inference(superposition,[],[f315,f7298])).
fof(f7326,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X4)) ) | $spl14),
  inference(subsumption_resolution,[],[f7310,f342])).
fof(f7310,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X4)) ) | $spl14),
  inference(superposition,[],[f5598,f1108])).
fof(f7298,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | $spl14),
  inference(unit_resulting_resolution,[],[f235,f5598,f308])).
fof(f7300,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f5598,f368])).
fof(f7301,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))) | $spl14),
  inference(unit_resulting_resolution,[],[f271,f5598,f368])).
fof(f7302,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))),s(X0,X1)))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f320,f5598,f368])).
fof(f7303,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))),s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f284,f5598,f368])).
fof(f7304,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f5598,f1802])).
fof(f10157,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137,f10139,f10149,f9750,f9710,f9704])).
fof(f10156,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9705,f235])).
fof(f9705,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f308])).
fof(f10155,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9707,f9695])).
fof(f9707,plain,(
  ~p(s(bool,'F_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f308])).
fof(f10154,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137,f10139,f10149,f9750,f9710])).
fof(f10153,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9711,f235])).
fof(f9711,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f308])).
fof(f10152,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9713,f9695])).
fof(f9713,plain,(
  ~p(s(bool,'F_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f308])).
fof(f10151,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137,f10139,f10149,f9750])).
fof(f10150,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137,f10139,f10149])).
fof(f10148,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10050,f235])).
fof(f10050,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4703])).
fof(f10147,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10048,f235])).
fof(f10048,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4702])).
fof(f10146,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10047,f235])).
fof(f10047,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4697])).
fof(f10145,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10046,f235])).
fof(f10046,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4698])).
fof(f10144,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10044,f235])).
fof(f10044,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4696])).
fof(f10143,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10043,f235])).
fof(f10043,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4695])).
fof(f10142,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10042,f235])).
fof(f10042,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4791])).
fof(f10141,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10041,f235])).
fof(f10041,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f4792])).
fof(f10140,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137,f10139])).
fof(f10138,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135,f10137])).
fof(f10136,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131,f10135])).
fof(f10134,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9939,f9695])).
fof(f9939,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl14),
  inference(backward_demodulation,[],[f9754,f6473])).
fof(f10133,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9933,f9695])).
fof(f9933,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl14),
  inference(backward_demodulation,[],[f9754,f5920])).
fof(f10132,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127,f10131])).
fof(f10128,plain,(
  $false | $spl14),
  inference(global_subsumption,[],[f234,f235,f242,f246,f245,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f308,f305,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f425,f557,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1065,f1108,f1197,f1268,f1400,f1773,f1780,f1806,f1786,f1788,f1807,f1813,f1801,f1904,f1905,f1906,f1911,f1961,f1960,f2020,f2082,f2150,f2151,f2152,f2442,f2502,f2503,f2549,f2573,f2577,f2635,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2707,f2832,f2896,f2895,f2882,f3002,f3001,f3003,f3043,f3045,f3153,f3152,f3139,f3266,f3265,f3366,f3431,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3617,f3616,f3602,f3729,f3728,f3839,f3855,f3854,f3964,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4230,f4217,f4457,f4463,f4467,f4471,f4838,f5173,f5594,f5585,f6518,f6521,f4479,f3837,f3834,f3835,f3832,f3836,f3833,f302,f301,f345,f3838,f4453,f2829,f2828,f2827,f2826,f2701,f2691,f2660,f2575,f2579,f2675,f2548,f2546,f2541,f2539,f2536,f2535,f2559,f1934,f1802,f4449,f4451,f2637,f2634,f2566,f2515,f2514,f2513,f2512,f563,f562,f561,f288,f5063,f5101,f4819,f5154,f6127,f4503,f4391,f4390,f5115,f5114,f5113,f4792,f4791,f4695,f4696,f5069,f4702,f4703,f5072,f4698,f5075,f4697,f5598,f5586,f4218,f3681,f3412,f3682,f3217,f2960,f2878,f3393,f2859,f3407,f2873,f5079,f4748,f4769,f5018,f5039,f6509,f6535,f2734,f2748,f5028,f5019,f4990,f4981,f4720,f4711,f6510,f3394,f3135,f3122,f3072,f318,f317,f316,f6128,f6068,f6010,f5994,f5957,f2860,f2735,f315,f314,f313,f4710,f4731,f4980,f5001,f1782,f5562,f1781,f5561,f5759,f3973,f5127,f5776,f5590,f5104,f5016,f4978,f4746,f4708,f331,f330,f5775,f5774,f5773,f311,f5779,f5559,f5589,f5588,f5587,f310,f5599,f2565,f1805,f1804,f1803,f289,f1811,f4234,f4169,f3988,f2820,f2759,f2633,f312,f309,f6512,f6473,f6130,f6075,f6066,f6017,f6008,f5920,f5781,f5601,f5591,f5568,f5566,f5560,f5178,f5155,f5132,f5032,f5030,f5025,f5023,f5017,f4994,f4992,f4987,f4985,f4979,f4840,f4820,f4797,f4753,f4747,f4724,f4722,f4717,f4715,f4709,f4699,f4694,f4488,f4438,f4437,f4436,f4427,f4397,f4395,f4389,f4236,f3990,f3886,f3830,f3713,f3599,f3500,f3499,f3430,f3400,f3396,f3364,f3251,f3137,f3125,f2987,f2866,f2862,f2822,f2737,f2562,f2558,f2557,f2556,f2550,f2547,f2538,f2537,f2509,f2507,f2506,f2501,f2474,f2473,f2472,f2217,f2213,f1997,f1936,f1753,f1752,f1751,f1732,f1731,f1730,f1693,f1684,f1399,f1292,f1291,f1246,f1245,f1244,f1087,f1086,f1085,f1071,f1070,f1038,f1037,f1035,f1034,f510,f462,f398,f342,f303,f250,f249,f7304,f7303,f7302,f7301,f7300,f7298,f7326,f8613,f8615,f8761,f9145,f9179,f9178,f9213,f9299,f9695,f9760,f9754,f10119,f10127])).
fof(f10124,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9896,f9695])).
fof(f9896,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl14),
  inference(backward_demodulation,[],[f9754,f4699])).
fof(f10123,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9895,f9695])).
fof(f9895,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl14),
  inference(backward_demodulation,[],[f9754,f4694])).
fof(f10120,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f9816,f235])).
fof(f9816,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f9754,f342])).
fof(f10118,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10117,f9695])).
fof(f10117,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl14),
  inference(subsumption_resolution,[],[f9813,f9754])).
fof(f9813,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl14),
  inference(backward_demodulation,[],[f9754,f249])).
fof(f9755,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f350,f350,f9695,f1037])).
fof(f9751,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f271,f350,f9695,f368])).
fof(f9714,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f9695,f350,f9695,f308])).
fof(f9712,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f235,f350,f9695,f308])).
fof(f9708,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f9695,f350,f9695,f308])).
fof(f9706,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f235,f350,f9695,f308])).
fof(f9702,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f271,f9695,f249])).
fof(f9700,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f350,f9695,f246])).
fof(f9698,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f342,f9695])).
fof(f6955,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933,f6935,f6937,f6939,f6941,f6951,f6954])).
fof(f6954,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(subsumption_resolution,[],[f6821,f235])).
fof(f6821,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f301])).
fof(f6951,plain,(
  ( ! [X14,X12,X15,X16] : (s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl18),
  inference(subsumption_resolution,[],[f6806,f235])).
fof(f6806,plain,(
  ( ! [X14,X12,X15,X16] : (~p(s(bool,'T_0')) | s(X12,X16) = s(X12,happ(s(fun('type.num.num',X12),X14),s('type.num.num',X15)))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f4819])).
fof(f6941,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl18),
  inference(subsumption_resolution,[],[f6768,f235])).
fof(f6768,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f4769])).
fof(f6939,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,X59)) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) ) | $spl18),
  inference(subsumption_resolution,[],[f6764,f235])).
fof(f6764,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X59)) | s(X57,X60) = s(X57,sK3(X60,X58,X57))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f6535])).
fof(f6937,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl18),
  inference(subsumption_resolution,[],[f6848,f235])).
fof(f6848,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl18),
  inference(condensation,[],[f6749])).
fof(f6749,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f316])).
fof(f6935,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl18),
  inference(subsumption_resolution,[],[f6855,f235])).
fof(f6855,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | $spl18),
  inference(condensation,[],[f6739])).
fof(f6739,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f313])).
fof(f6933,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl18),
  inference(subsumption_resolution,[],[f6737,f235])).
fof(f6737,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'|dollar|exists_1'(s(fun(X76,bool),X77))) | s(X76,X79) = s(X76,sK3(X79,X77,X76))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f4731])).
fof(f6927,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | $spl18),
  inference(subsumption_resolution,[],[f6718,f235])).
fof(f6718,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f330])).
fof(f6903,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl18),
  inference(subsumption_resolution,[],[f6902,f235])).
fof(f6902,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl18),
  inference(forward_demodulation,[],[f6688,f3152])).
fof(f6688,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0')))) | p(s(bool,X0))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f6066])).
fof(f6900,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl18),
  inference(subsumption_resolution,[],[f6899,f235])).
fof(f6899,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl18),
  inference(forward_demodulation,[],[f6686,f2895])).
fof(f6686,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f6008])).
fof(f6889,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(subsumption_resolution,[],[f6888,f235])).
fof(f6888,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | $spl18),
  inference(condensation,[],[f6887])).
fof(f6887,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f6886])).
fof(f6886,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl18),
  inference(forward_demodulation,[],[f6654,f6393])).
fof(f6654,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X40))),s(bool,'T_0')))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f4753])).
fof(f6884,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(subsumption_resolution,[],[f6883,f235])).
fof(f6883,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | $spl18),
  inference(condensation,[],[f6882])).
fof(f6882,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f6881])).
fof(f6881,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl18),
  inference(forward_demodulation,[],[f6649,f6393])).
fof(f6649,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X40)))) | s(bool,X39) = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'F_0') = s(bool,X41)) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f4715])).
fof(f6866,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl18),
  inference(forward_demodulation,[],[f6558,f6393])).
fof(f6558,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s('type.option.option'(bool),'const.option.NONE_0'))) = s('type.option.option'(bool),'const.labSem.word_cmp_3'(s('type.asm.cmp','const.asm.NotTest_0'),s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X1)))))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f303])).
fof(f6864,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl18),
  inference(subsumption_resolution,[],[f6556,f6393])).
fof(f6556,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl18),
  inference(backward_demodulation,[],[f6393,f249])).
fof(f6952,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933,f6935,f6937,f6939,f6941,f6951])).
fof(f6950,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6798,f235])).
fof(f6798,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4792])).
fof(f6949,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6797,f235])).
fof(f6797,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4791])).
fof(f6948,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6796,f235])).
fof(f6796,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4695])).
fof(f6947,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6795,f235])).
fof(f6795,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4696])).
fof(f6946,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6793,f235])).
fof(f6793,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4702])).
fof(f6945,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6792,f235])).
fof(f6792,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4703])).
fof(f6944,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6790,f235])).
fof(f6790,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4698])).
fof(f6943,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6788,f235])).
fof(f6788,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f4697])).
fof(f6942,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933,f6935,f6937,f6939,f6941])).
fof(f6940,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933,f6935,f6937,f6939])).
fof(f6938,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933,f6935,f6937])).
fof(f6936,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933,f6935])).
fof(f6934,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927,f6933])).
fof(f6932,plain,(
  $false | ($spl8 | $spl18)),
  inference(global_subsumption,[],[f6931,f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927])).
fof(f6931,plain,(
  ( ! [X50] : (p(s(bool,X50))) ) | ($spl8 | $spl18)),
  inference(subsumption_resolution,[],[f6734,f235])).
fof(f6734,plain,(
  ( ! [X50] : (~p(s(bool,'T_0')) | p(s(bool,X50))) ) | ($spl8 | $spl18)),
  inference(backward_demodulation,[],[f6393,f6525])).
fof(f6928,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903,f6927])).
fof(f6906,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6905,f235])).
fof(f6905,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(forward_demodulation,[],[f6691,f3616])).
fof(f6691,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl18),
  inference(backward_demodulation,[],[f6393,f6473])).
fof(f6904,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900,f6903])).
fof(f6901,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889,f6900])).
fof(f6898,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6897,f235])).
fof(f6897,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(forward_demodulation,[],[f6685,f2895])).
fof(f6685,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl18),
  inference(backward_demodulation,[],[f6393,f5920])).
fof(f6896,plain,(
  $false | ($spl13 | $spl18)),
  inference(subsumption_resolution,[],[f6681,f6393])).
fof(f6681,plain,(
  s(bool,'T_0') != s(bool,sK6('_i_0_0',bool)) | ($spl13 | $spl18)),
  inference(backward_demodulation,[],[f6393,f5595])).
fof(f5595,plain,(
  s(bool,'F_0') != s(bool,sK6('_i_0_0',bool)) | $spl13),
  inference(cnf_transformation,[],[f5595_D])).
fof(f5595_D,plain,(
  s(bool,'F_0') != s(bool,sK6('_i_0_0',bool)) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f6890,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884,f6889])).
fof(f6885,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866,f6884])).
fof(f6880,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6879,f235])).
fof(f6879,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(forward_demodulation,[],[f6647,f6393])).
fof(f6647,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl18),
  inference(backward_demodulation,[],[f6393,f4699])).
fof(f6878,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6877,f235])).
fof(f6877,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(forward_demodulation,[],[f6646,f6393])).
fof(f6646,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl18),
  inference(backward_demodulation,[],[f6393,f4694])).
fof(f6868,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f6559,f235])).
fof(f6559,plain,(
  ~p(s(bool,'T_0')) | $spl18),
  inference(backward_demodulation,[],[f6393,f342])).
fof(f6867,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864,f6866])).
fof(f6865,plain,(
  $false | $spl18),
  inference(global_subsumption,[],[f234,f235,f342,f242,f246,f245,f250,f249,f270,f271,f272,f273,f274,f275,f276,f282,f283,f284,f285,f286,f287,f289,f288,f291,f290,f293,f292,f295,f294,f296,f297,f298,f299,f300,f303,f302,f301,f345,f308,f305,f310,f309,f312,f311,f315,f314,f313,f318,f317,f316,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f331,f330,f332,f333,f334,f346,f347,f335,f336,f337,f338,f350,f365,f368,f398,f425,f462,f510,f557,f561,f562,f563,f565,f573,f574,f575,f631,f632,f633,f646,f656,f657,f658,f742,f980,f981,f1034,f1035,f1037,f1038,f1065,f1070,f1071,f1085,f1086,f1087,f1108,f1197,f1244,f1245,f1246,f1268,f1291,f1292,f1399,f1400,f1684,f1693,f1730,f1731,f1732,f1773,f1751,f1752,f1753,f1803,f1804,f1805,f1780,f1781,f1782,f1806,f1786,f1788,f1807,f1811,f1813,f1801,f1802,f1904,f1905,f1906,f1911,f1934,f1936,f1961,f1960,f1997,f2020,f2082,f2150,f2151,f2152,f2213,f2217,f2442,f2472,f2473,f2474,f2501,f2502,f2503,f2506,f2507,f2509,f2512,f2513,f2514,f2515,f2633,f2535,f2536,f2537,f2538,f2539,f2541,f2546,f2547,f2548,f2549,f2550,f2556,f2557,f2558,f2559,f2562,f2565,f2566,f2573,f2575,f2577,f2579,f2634,f2635,f2637,f2639,f2640,f2641,f2642,f2643,f2651,f2652,f2653,f2654,f2660,f2675,f2691,f2701,f2707,f2735,f2737,f2748,f2734,f2759,f2820,f2822,f2826,f2827,f2828,f2829,f2832,f2860,f2862,f2866,f2873,f2878,f2859,f2896,f2895,f2960,f2882,f2987,f3002,f3001,f3003,f3043,f3045,f3122,f3125,f3072,f3135,f3137,f3153,f3152,f3217,f3139,f3251,f3266,f3265,f3364,f3366,f3394,f3396,f3400,f3407,f3412,f3393,f3431,f3430,f3499,f3500,f3416,f3537,f3536,f3538,f3540,f3584,f3597,f3599,f3617,f3616,f3681,f3682,f3602,f3713,f3729,f3728,f3830,f3834,f3833,f3832,f3835,f3836,f3837,f3838,f3839,f3855,f3854,f3886,f3964,f3973,f3988,f3990,f4017,f4018,f4019,f4020,f4021,f4075,f4160,f4169,f4230,f4234,f4236,f4217,f4218,f4389,f4390,f4391,f4488,f4395,f4397,f4427,f4503,f4436,f4437,f4438,f4449,f4451,f4453,f4457,f4463,f4467,f4471,f4479,f4703,f4702,f4791,f4792,f4699,f4698,f4697,f4696,f4695,f4694,f4708,f4709,f4710,f4711,f4797,f4715,f4717,f4720,f4722,f4724,f4731,f4819,f4746,f4747,f4748,f4820,f4753,f4769,f4838,f4840,f5063,f5069,f5072,f5075,f5079,f5101,f5104,f5113,f5114,f5115,f5127,f4978,f4979,f4980,f4981,f5132,f4985,f4987,f4990,f4992,f4994,f5001,f5154,f5016,f5017,f5018,f5019,f5155,f5023,f5025,f5028,f5030,f5032,f5039,f5173,f5178,f5587,f5588,f5589,f5590,f5559,f5560,f5561,f5562,f5591,f5566,f5568,f5594,f5599,f5601,f5585,f5586,f5773,f5774,f5775,f5776,f5759,f5779,f5781,f5920,f6008,f6010,f6017,f5957,f6066,f6068,f6075,f6127,f5994,f6128,f6130,f6473,f6510,f6512,f6518,f6521,f6535,f6509,f6393,f6864])).
fof(f6519,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) | $spl22),
  inference(cnf_transformation,[],[f6519_D])).
fof(f6519_D,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f6521,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f6520])).
fof(f6520,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X37)) | p(s(bool,X38)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X38)))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(subsumption_resolution,[],[f6487,f368])).
fof(f6487,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X37)) | p(s(bool,X38)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X38)))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f316,f365])).
fof(f6518,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f6517])).
fof(f6517,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X35)))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f6486,f368])).
fof(f6486,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X35)))) | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f316,f365])).
fof(f6469,plain,(
  $false | ($spl13 | $spl17)),
  inference(subsumption_resolution,[],[f6445,f5595])).
fof(f6445,plain,(
  s(bool,'F_0') = s(bool,sK6('_i_0_0',bool)) | $spl17),
  inference(unit_resulting_resolution,[],[f5605,f250])).
fof(f6468,plain,(
  $false | ($spl13 | $spl17)),
  inference(subsumption_resolution,[],[f6446,f5595])).
fof(f6446,plain,(
  s(bool,'F_0') = s(bool,sK6('_i_0_0',bool)) | $spl17),
  inference(unit_resulting_resolution,[],[f342,f5605,f305])).
fof(f6467,plain,(
  $false | ($spl13 | $spl17)),
  inference(subsumption_resolution,[],[f6448,f5595])).
fof(f6448,plain,(
  s(bool,'F_0') = s(bool,sK6('_i_0_0',bool)) | $spl17),
  inference(unit_resulting_resolution,[],[f342,f5605,f305])).
fof(f6465,plain,(
  $false | ($spl13 | $spl17)),
  inference(subsumption_resolution,[],[f6455,f5595])).
fof(f6455,plain,(
  s(bool,'F_0') = s(bool,sK6('_i_0_0',bool)) | $spl17),
  inference(unit_resulting_resolution,[],[f350,f5605,f425])).
fof(f6394,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X57)) ) | $spl20),
  inference(cnf_transformation,[],[f6394_D])).
fof(f6394_D,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,sK6('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X57)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f6329,plain,(
  ( ! [X57,X56] : (s(bool,X57) != s(bool,sK6('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X57)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f6209])).
fof(f6209,plain,(
  ( ! [X57,X56] : (s(bool,X57) != s(bool,sK6('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56)) ) | $spl12),
  inference(superposition,[],[f1197,f5675])).
fof(f5598,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | $spl14),
  inference(cnf_transformation,[],[f5598_D])).
fof(f5598_D,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f5605,plain,(
  ~p(s(bool,sK6('_i_0_0',bool))) | $spl17),
  inference(cnf_transformation,[],[f5605_D])).
fof(f5605_D,plain,(
  ~p(s(bool,sK6('_i_0_0',bool))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f5585,plain,(
  ~p(s(bool,sK6('_i_0_0',bool))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))),
  inference(superposition,[],[f310,f271])).
fof(f5596,plain,(
  s(bool,'F_0') = s(bool,sK6('_i_0_0',bool)) | $spl12),
  inference(cnf_transformation,[],[f5596_D])).
fof(f5596_D,plain,(
  s(bool,'F_0') = s(bool,sK6('_i_0_0',bool)) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f5594,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK6('_i_0_0',bool))),
  inference(subsumption_resolution,[],[f5572,f235])).
fof(f5572,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK6('_i_0_0',bool))),
  inference(superposition,[],[f310,f398])).
fof(f4233,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) | $spl8),
  inference(cnf_transformation,[],[f4233_D])).
fof(f4233_D,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f4217,plain,(
  ( ! [X44] : (~p(s(bool,X44)) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f312,f271])).
fof(f4230,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f4205,f235])).
fof(f4205,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f312,f398])).
fof(f1801,plain,(
  ( ! [X41] : (~p(s(bool,sK3(X41,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f289,f271])).
fof(f1807,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK3(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f1790,f235])).
fof(f1790,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK3(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f289,f398])).
% SZS output end Proof for thm.stackSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 354
% Passive clauses: 3561
% Generated clauses: 61192
% Final active clauses: 116
% Final passive clauses: 636
% Input formulas: 69
% Initial clauses: 105
% 
% Duplicate literals: 1880
% Trivial inequalities: 409
% Fw subsumption resolutions: 4094
% Fw demodulations: 10748
% Bw demodulations: 2514
% Condensations: 3701
% Global subsumptions: 180
% 
% Simple tautologies: 419
% Equational tautologies: 308
% Forward subsumptions: 35316
% Fw demodulations to eq. taut.: 142
% Bw demodulations to eq. taut.: 185
% 
% Unit resulting resolution: 2791
% Factoring: 1
% Forward superposition: 17759
% Backward superposition: 14609
% Self superposition: 333
% Equality factoring: 154
% Equality resolution: 46
% 
% Split clauses: 110
% Split components: 220
% SAT solver clauses: 4298
% SAT solver unit clauses: 900
% SAT solver binary clauses: 1606
% 
% Sat splits: 110
% Sat splitting refutations: 335
% 
% Memory used [KB]: 49892
% Time elapsed: 2.734 s
% ------------------------------
% ------------------------------
% Success in time 4.08 s
