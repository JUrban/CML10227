Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f2761,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2760,f132,f256,f254,f252,f250,f248,f246,f244,f242,f240,f238,f236,f2758,f2757,f2756,f2755,f1817,f1816,f1344,f793,f792,f2759])).
fof(f2759,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f256,f143])).
fof(f143,plain,(
  ( ! [X2,X1] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  (s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK7))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK8),s('type.closLang.exp',sK9),s('type.closLang.exp',sK10))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK11),s('type.closLang.exp',sK12))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK13))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK14),s('type.closLang.exp',sK15))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK16))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK17),s('type.list.list'('type.closLang.exp'),sK18))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK19),s('type.closLang.exp',sK20),s('type.list.list'('type.closLang.exp'),sK21))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK22),s('type.option.option'('type.list.list'('type.num.num')),sK23),s('type.num.num',sK24),s('type.closLang.exp',sK25))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),sK26),s('type.option.option'('type.list.list'('type.num.num')),sK27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK28),s('type.closLang.exp',sK29))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK30),s('type.list.list'('type.closLang.exp'),sK31)))) & ! [X25] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25))) & ! [X22,X23,X24] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24))) & ! [X20,X21] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21))) & ! [X19] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19))) & ! [X17,X18] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18))) & ! [X16] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16))) & ! [X14,X15] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15))) & ! [X11,X12,X13] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13))) & ! [X7,X8,X9,X10] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) & ! [X3,X4,X5,X6] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6))) & ! [X1,X2] : s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31])],[f89])).
fof(f89,plain,(
  ? [X0] : ((? [X50] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X50))) | ? [X47,X48,X49] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X47),s('type.closLang.exp',X48),s('type.closLang.exp',X49))) | ? [X45,X46] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X45),s('type.closLang.exp',X46))) | ? [X44] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X44))) | ? [X42,X43] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X42),s('type.closLang.exp',X43))) | ? [X41] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X41))) | ? [X39,X40] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X39),s('type.list.list'('type.closLang.exp'),X40))) | ? [X36,X37,X38] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X36),s('type.closLang.exp',X37),s('type.list.list'('type.closLang.exp'),X38))) | ? [X32,X33,X34,X35] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X32),s('type.option.option'('type.list.list'('type.num.num')),X33),s('type.num.num',X34),s('type.closLang.exp',X35))) | ? [X28,X29,X30,X31] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X28),s('type.option.option'('type.list.list'('type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30),s('type.closLang.exp',X31))) | ? [X26,X27] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X26),s('type.list.list'('type.closLang.exp'),X27)))) & ! [X25] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25))) & ! [X22,X23,X24] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24))) & ! [X20,X21] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21))) & ! [X19] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19))) & ! [X17,X18] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18))) & ! [X16] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16))) & ! [X14,X15] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15))) & ! [X11,X12,X13] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13))) & ! [X7,X8,X9,X10] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) & ! [X3,X4,X5,X6] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6))) & ! [X1,X2] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0] : ((? [X25] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24))) | ? [X20,X21] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21))) | ? [X19] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19))) | ? [X17,X18] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18))) | ? [X16] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16))) | ? [X14,X15] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15))) | ? [X11,X12,X13] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13))) | ? [X7,X8,X9,X10] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X3,X4,X5,X6] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6))) | ? [X1,X2] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2)))) & ! [X50] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X50))) & ! [X47,X48,X49] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X47),s('type.closLang.exp',X48),s('type.closLang.exp',X49))) & ! [X45,X46] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X45),s('type.closLang.exp',X46))) & ! [X44] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X44))) & ! [X42,X43] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X42),s('type.closLang.exp',X43))) & ! [X41] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X41))) & ! [X39,X40] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X39),s('type.list.list'('type.closLang.exp'),X40))) & ! [X36,X37,X38] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X36),s('type.closLang.exp',X37),s('type.list.list'('type.closLang.exp'),X38))) & ! [X32,X33,X34,X35] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X32),s('type.option.option'('type.list.list'('type.num.num')),X33),s('type.num.num',X34),s('type.closLang.exp',X35))) & ! [X28,X29,X30,X31] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X28),s('type.option.option'('type.list.list'('type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30),s('type.closLang.exp',X31))) & ! [X26,X27] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X26),s('type.list.list'('type.closLang.exp'),X27))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ? [X0] : ((? [X25] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24))) | ? [X20,X21] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21))) | ? [X19] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19))) | ? [X17,X18] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18))) | ? [X16] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16))) | ? [X14,X15] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15))) | ? [X11,X12,X13] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13))) | ? [X7,X8,X9,X10] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X3,X4,X5,X6] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6))) | ? [X1,X2] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2)))) & (! [X50] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X50))) & ! [X47,X48,X49] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X47),s('type.closLang.exp',X48),s('type.closLang.exp',X49))) & ! [X45,X46] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X45),s('type.closLang.exp',X46))) & ! [X44] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X44))) & ! [X42,X43] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X42),s('type.closLang.exp',X43))) & ! [X41] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X41))) & ! [X39,X40] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X39),s('type.list.list'('type.closLang.exp'),X40))) & ! [X36,X37,X38] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X36),s('type.closLang.exp',X37),s('type.list.list'('type.closLang.exp'),X38))) & ! [X32,X33,X34,X35] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X32),s('type.option.option'('type.list.list'('type.num.num')),X33),s('type.num.num',X34),s('type.closLang.exp',X35))) & ! [X28,X29,X30,X31] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X28),s('type.option.option'('type.list.list'('type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30),s('type.closLang.exp',X31))) & ! [X26,X27] : s('type.closLang.exp',X0) != s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X26),s('type.list.list'('type.closLang.exp'),X27)))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ((? [X25] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24))) | ? [X20,X21] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21))) | ? [X19] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19))) | ? [X17,X18] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18))) | ? [X16] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16))) | ? [X14,X15] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15))) | ? [X11,X12,X13] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13))) | ? [X7,X8,X9,X10] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X3,X4,X5,X6] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6))) | ? [X1,X2] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2)))) => (? [X50] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X50))) | ? [X47,X48,X49] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X47),s('type.closLang.exp',X48),s('type.closLang.exp',X49))) | ? [X45,X46] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X45),s('type.closLang.exp',X46))) | ? [X44] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X44))) | ? [X42,X43] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X42),s('type.closLang.exp',X43))) | ? [X41] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X41))) | ? [X39,X40] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X39),s('type.list.list'('type.closLang.exp'),X40))) | ? [X36,X37,X38] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X36),s('type.closLang.exp',X37),s('type.list.list'('type.closLang.exp'),X38))) | ? [X32,X33,X34,X35] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X32),s('type.option.option'('type.list.list'('type.num.num')),X33),s('type.num.num',X34),s('type.closLang.exp',X35))) | ? [X28,X29,X30,X31] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X28),s('type.option.option'('type.list.list'('type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30),s('type.closLang.exp',X31))) | ? [X26,X27] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X26),s('type.list.list'('type.closLang.exp'),X27)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X8),s('type.closLang.exp',X9),s('type.closLang.exp',X10))) | ? [X11,X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.closLang.exp',X12))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X12))) | ? [X8,X9] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X8),s('type.closLang.exp',X9))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X12))) | ? [X13,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X13),s('type.list.list'('type.closLang.exp'),X14))) | ? [X15,X16,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X15),s('type.closLang.exp',X16),s('type.list.list'('type.closLang.exp'),X14))) | ? [X17,X18,X19,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X17),s('type.option.option'('type.list.list'('type.num.num')),X18),s('type.num.num',X19),s('type.closLang.exp',X20))) | ? [X21,X22,X23,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X21),s('type.option.option'('type.list.list'('type.num.num')),X22),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X23),s('type.closLang.exp',X20))) | ? [X24,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X24),s('type.list.list'('type.closLang.exp'),X14)))) => (? [X7] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X8),s('type.closLang.exp',X9),s('type.closLang.exp',X10))) | ? [X11,X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.closLang.exp',X12))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X12))) | ? [X8,X9] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X8),s('type.closLang.exp',X9))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X12))) | ? [X13,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X13),s('type.list.list'('type.closLang.exp'),X14))) | ? [X15,X16,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X15),s('type.closLang.exp',X16),s('type.list.list'('type.closLang.exp'),X14))) | ? [X17,X18,X19,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X17),s('type.option.option'('type.list.list'('type.num.num')),X18),s('type.num.num',X19),s('type.closLang.exp',X20))) | ? [X21,X22,X23,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X21),s('type.option.option'('type.list.list'('type.num.num')),X22),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X23),s('type.closLang.exp',X20))) | ? [X24,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X24),s('type.list.list'('type.closLang.exp'),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X8),s('type.closLang.exp',X9),s('type.closLang.exp',X10))) | ? [X11,X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.closLang.exp',X12))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X12))) | ? [X8,X9] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X8),s('type.closLang.exp',X9))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X12))) | ? [X13,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X13),s('type.list.list'('type.closLang.exp'),X14))) | ? [X15,X16,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X15),s('type.closLang.exp',X16),s('type.list.list'('type.closLang.exp'),X14))) | ? [X17,X18,X19,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X17),s('type.option.option'('type.list.list'('type.num.num')),X18),s('type.num.num',X19),s('type.closLang.exp',X20))) | ? [X21,X22,X23,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X21),s('type.option.option'('type.list.list'('type.num.num')),X22),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X23),s('type.closLang.exp',X20))) | ? [X24,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X24),s('type.list.list'('type.closLang.exp'),X14)))) => (? [X7] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X8),s('type.closLang.exp',X9),s('type.closLang.exp',X10))) | ? [X11,X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.closLang.exp',X12))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X12))) | ? [X8,X9] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X8),s('type.closLang.exp',X9))) | ? [X12] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X12))) | ? [X13,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X13),s('type.list.list'('type.closLang.exp'),X14))) | ? [X15,X16,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X15),s('type.closLang.exp',X16),s('type.list.list'('type.closLang.exp'),X14))) | ? [X17,X18,X19,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X17),s('type.option.option'('type.list.list'('type.num.num')),X18),s('type.num.num',X19),s('type.closLang.exp',X20))) | ? [X21,X22,X23,X20] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X21),s('type.option.option'('type.list.list'('type.num.num')),X22),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X23),s('type.closLang.exp',X20))) | ? [X24,X14] : s('type.closLang.exp',X6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X24),s('type.list.list'('type.closLang.exp'),X14)))))),
  file('thm.clos_knownProof.clos_knownProof_74_prove_ltb','thm.clos_knownProof.clos_knownProof_74_prove_ltb')).
fof(f792,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f240,f135])).
fof(f135,plain,(
  ( ! [X21,X20] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f793,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f246,f138])).
fof(f138,plain,(
  ( ! [X16] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f1344,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f238,f134])).
fof(f134,plain,(
  ( ! [X24,X23,X22] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f1816,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f250,f140])).
fof(f140,plain,(
  ( ! [X12,X13,X11] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f1817,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f236,f133])).
fof(f133,plain,(
  ( ! [X25] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f2755,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f254,f142])).
fof(f142,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f2756,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f252,f141])).
fof(f141,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f2757,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f248,f139])).
fof(f139,plain,(
  ( ! [X14,X15] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f2758,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f242,f136])).
fof(f136,plain,(
  ( ! [X19] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f236,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK7))) | $spl0),
  inference(cnf_transformation,[],[f236_D])).
fof(f236_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK7))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f238,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK8),s('type.closLang.exp',sK9),s('type.closLang.exp',sK10))) | $spl2),
  inference(cnf_transformation,[],[f238_D])).
fof(f238_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK8),s('type.closLang.exp',sK9),s('type.closLang.exp',sK10))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f240,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK11),s('type.closLang.exp',sK12))) | $spl4),
  inference(cnf_transformation,[],[f240_D])).
fof(f240_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK11),s('type.closLang.exp',sK12))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f242,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK13))) | $spl6),
  inference(cnf_transformation,[],[f242_D])).
fof(f242_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK13))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f244,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK14),s('type.closLang.exp',sK15))) | $spl8),
  inference(cnf_transformation,[],[f244_D])).
fof(f244_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK14),s('type.closLang.exp',sK15))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f246,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK16))) | $spl10),
  inference(cnf_transformation,[],[f246_D])).
fof(f246_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK16))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f248,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK17),s('type.list.list'('type.closLang.exp'),sK18))) | $spl12),
  inference(cnf_transformation,[],[f248_D])).
fof(f248_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK17),s('type.list.list'('type.closLang.exp'),sK18))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f250,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK19),s('type.closLang.exp',sK20),s('type.list.list'('type.closLang.exp'),sK21))) | $spl14),
  inference(cnf_transformation,[],[f250_D])).
fof(f250_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK19),s('type.closLang.exp',sK20),s('type.list.list'('type.closLang.exp'),sK21))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f252,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK22),s('type.option.option'('type.list.list'('type.num.num')),sK23),s('type.num.num',sK24),s('type.closLang.exp',sK25))) | $spl16),
  inference(cnf_transformation,[],[f252_D])).
fof(f252_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK22),s('type.option.option'('type.list.list'('type.num.num')),sK23),s('type.num.num',sK24),s('type.closLang.exp',sK25))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f254,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),sK26),s('type.option.option'('type.list.list'('type.num.num')),sK27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK28),s('type.closLang.exp',sK29))) | $spl18),
  inference(cnf_transformation,[],[f254_D])).
fof(f254_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),sK26),s('type.option.option'('type.list.list'('type.num.num')),sK27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK28),s('type.closLang.exp',sK29))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f256,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK30),s('type.list.list'('type.closLang.exp'),sK31))) | $spl20),
  inference(cnf_transformation,[],[f256_D])).
fof(f256_D,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK30),s('type.list.list'('type.closLang.exp'),sK31))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f132,plain,(
  s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK30),s('type.list.list'('type.closLang.exp'),sK31))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),sK26),s('type.option.option'('type.list.list'('type.num.num')),sK27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK28),s('type.closLang.exp',sK29))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK22),s('type.option.option'('type.list.list'('type.num.num')),sK23),s('type.num.num',sK24),s('type.closLang.exp',sK25))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK19),s('type.closLang.exp',sK20),s('type.list.list'('type.closLang.exp'),sK21))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK17),s('type.list.list'('type.closLang.exp'),sK18))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK16))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK14),s('type.closLang.exp',sK15))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK13))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK11),s('type.closLang.exp',sK12))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK8),s('type.closLang.exp',sK9),s('type.closLang.exp',sK10))) | s('type.closLang.exp',sK6) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK7)))),
  inference(cnf_transformation,[],[f90])).
fof(f2760,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f244,f137])).
fof(f137,plain,(
  ( ! [X17,X18] : (s('type.closLang.exp',sK6) != s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18)))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 223
% Passive clauses: 1052
% Generated clauses: 2622
% Final active clauses: 223
% Final passive clauses: 754
% Input formulas: 26
% Initial clauses: 102
% 
% Duplicate literals: 56
% Trivial inequalities: 13
% Fw subsumption resolutions: 181
% 
% Simple tautologies: 61
% Equational tautologies: 20
% Forward subsumptions: 1198
% 
% Binary resolution: 1722
% Factoring: 328
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 58
% Split components: 126
% SAT solver clauses: 117
% SAT solver unit clauses: 17
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 58
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 116
% TWLsolver calls for satisfiability: 96
% 
% Memory used [KB]: 1663
% Time elapsed: 0.058 s
% ------------------------------
% ------------------------------
% Success in time 0.049 s
