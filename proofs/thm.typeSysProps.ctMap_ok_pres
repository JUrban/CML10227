Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% (51313)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 72
% Passive clauses: 2333
% Generated clauses: 14319
% Final active clauses: 65
% Final passive clauses: 2180
% Input formulas: 8
% Initial clauses: 12
% 
% Duplicate literals: 970
% Trivial inequalities: 214
% Fw subsumption resolutions: 1887
% Fw demodulations: 1075
% Bw demodulations: 5
% 
% Simple tautologies: 307
% Equational tautologies: 103
% Forward subsumptions: 5555
% 
% Binary resolution: 40
% Forward superposition: 5863
% Backward superposition: 3521
% Self superposition: 316
% Equality factoring: 273
% Equality resolution: 13
% 
% Split clauses: 894
% Split components: 1824
% SAT solver clauses: 1959
% SAT solver unit clauses: 269
% SAT solver binary clauses: 588
% 
% Sat splits: 894
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1953
% TWLsolver calls for satisfiability: 74
% 
% Memory used [KB]: 5884
% Time elapsed: 0.609 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSysProps
% (51340)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 67
% Passive clauses: 340
% Generated clauses: 7789
% Final active clauses: 35
% Final passive clauses: 225
% Input formulas: 8
% Initial clauses: 12
% 
% Duplicate literals: 1083
% Trivial inequalities: 83
% Fw subsumption resolutions: 413
% Fw demodulations: 232
% Bw demodulations: 47
% Condensations: 1393
% 
% Simple tautologies: 138
% Equational tautologies: 58
% Forward subsumptions: 2468
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 52
% Forward superposition: 1633
% Backward superposition: 1667
% Self superposition: 251
% Equality factoring: 206
% Equality resolution: 3
% 
% Split clauses: 190
% Split components: 382
% SAT solver clauses: 930
% SAT solver unit clauses: 19
% SAT solver binary clauses: 86
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 3
% 
% Sat splits: 190
% Sat splitting refutations: 18
% 
% TWLsolver clauses: 929
% TWLsolver calls for satisfiability: 119
% 
% Memory used [KB]: 6140
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSysProps
% (51379)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 443
% Passive clauses: 3333
% Generated clauses: 138097
% Final active clauses: 101
% Final passive clauses: 491
% Input formulas: 8
% Initial clauses: 12
% 
% Duplicate literals: 9934
% Trivial inequalities: 1203
% Fw subsumption resolutions: 12974
% Fw demodulations: 13002
% Bw demodulations: 1869
% Condensations: 21478
% Global subsumptions: 198
% 
% Simple tautologies: 1523
% Equational tautologies: 1747
% Forward subsumptions: 72266
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 81
% 
% Unit resulting resolution: 4082
% Forward superposition: 36864
% Backward superposition: 27428
% Self superposition: 1013
% Equality factoring: 709
% Equality resolution: 71
% 
% Split clauses: 434
% Split components: 916
% SAT solver clauses: 4590
% SAT solver unit clauses: 25
% SAT solver binary clauses: 214
% 
% Sat splits: 434
% Sat splitting refutations: 189
% 
% Memory used [KB]: 58591
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f778,plain,(
  $false),
  inference(subsumption_resolution,[],[f110,f75])).
fof(f75,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))))))),
  inference(subsumption_resolution,[],[f74,f33])).
fof(f33,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.typeSysProps.ctMap_ok_pres',aHL_TRUTH)).
fof(f74,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))))))),
  inference(forward_demodulation,[],[f73,f46])).
fof(f46,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',sK3)))))),
  inference(subsumption_resolution,[],[f43,f32])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.typeSysProps.ctMap_ok_pres',aHL_FALSITY)).
fof(f43,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',sK3)))))),
  inference(superposition,[],[f25,f34])).
fof(f34,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.typeSysProps.ctMap_ok_pres',aHL_BOOL_CASES)).
fof(f25,plain,(
  p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',sK3))))))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  p(s(bool,'const.typeSystem.type_d_7'(s(bool,sK0),s('type.option.option'('type.list.list'('type.string.char')),sK1),s('type.typeSystem.decls',sK2),s('type.typeSystem.type_environment',sK3),s('type.ast.dec',sK4),s('type.typeSystem.decls',sK5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',sK3)))))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7)))) & ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3)))))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7)))) & ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7)))))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3)))))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7))))) & ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3)))))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11,X12,X13] : ((p(s(bool,'const.typeSystem.type_d_7'(s(bool,X6),s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.typeSystem.decls',X8),s('type.typeSystem.type_environment',X9),s('type.ast.dec',X10),s('type.typeSystem.decls',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X9)))))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X13))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11,X12,X13] : ((p(s(bool,'const.typeSystem.type_d_7'(s(bool,X6),s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.typeSystem.decls',X8),s('type.typeSystem.type_environment',X9),s('type.ast.dec',X10),s('type.typeSystem.decls',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X9)))))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X13))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X13)))))))),
  file('thm.typeSysProps.ctMap_ok_pres','thm.typeSysProps.ctMap_ok_pres')).
fof(f73,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6)))))))))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',sK3))))))),
  inference(forward_demodulation,[],[f67,f31])).
fof(f31,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))) = s(X0,happ(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.pair.prod'(X0,X1),X2)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))) = s(X0,happ(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.pair.prod'(X0,X1),X2)))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0,X1] : ! [X2] : s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))) = s(X0,happ(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.pair.prod'(X0,X1),X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X14,X15] : ! [X19] : s(X14,'const.pair.FST_1'(s('type.pair.prod'(X14,X15),X19))) = s(X14,happ(s(fun('type.pair.prod'(X14,X15),X14),'const.pair.FST_0'),s('type.pair.prod'(X14,X15),X19)))),
  file('thm.typeSysProps.ctMap_ok_pres','ARITY_0_1_const.pair.FST')).
fof(f67,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6)))))))))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',sK3))))))),
  inference(resolution,[],[f24,f29])).
fof(f29,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))))))))) | ~p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3))))))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3)))))) | ~p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))) | (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))))))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))))))))))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3)))))) | ~p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))) | (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))))))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))))))))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X3)))))) & p(s(bool,'const.typeSystem.type_d_7'(s(bool,X0),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.typeSystem.decls',X2),s('type.typeSystem.type_environment',X3),s('type.ast.dec',X4),s('type.typeSystem.decls',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))) => (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6)))))))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X6))))))))))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X18,X8,X9,X10,X11,X12] : ((p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'const.typeSystem.type_environment_t_1'(s('type.typeSystem.type_environment',X9)))))) & p(s(bool,'const.typeSystem.type_d_7'(s(bool,X6),s('type.option.option'('type.list.list'('type.string.char')),X18),s('type.typeSystem.decls',X8),s('type.typeSystem.type_environment',X9),s('type.ast.dec',X10),s('type.typeSystem.decls',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12))))) => (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12)))))))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),X12))))))))))))))),
  file('thm.typeSysProps.ctMap_ok_pres','thm.typeSysProps.type_d_ctMap_ok')).
fof(f24,plain,(
  p(s(bool,'const.typeSystem.type_d_7'(s(bool,sK0),s('type.option.option'('type.list.list'('type.string.char')),sK1),s('type.typeSystem.decls',sK2),s('type.typeSystem.type_environment',sK3),s('type.ast.dec',sK4),s('type.typeSystem.decls',sK5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))),
  inference(cnf_transformation,[],[f23])).
fof(f110,plain,(
  ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))))))),
  inference(subsumption_resolution,[],[f109,f33])).
fof(f109,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))))))),
  inference(forward_demodulation,[],[f106,f39])).
fof(f39,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7)))),
  inference(subsumption_resolution,[],[f38,f32])).
fof(f38,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7)))),
  inference(superposition,[],[f26,f34])).
fof(f26,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7))))),
  inference(cnf_transformation,[],[f23])).
fof(f106,plain,(
  ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))))))),
  inference(resolution,[],[f27,f28])).
fof(f28,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))) | p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3))))) | p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : ! [X2,X3] : ((p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X14,X15] : ! [X16,X17] : ((p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X14,X15),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X14,X15),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X14,X15),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'(X14,X15),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16),s('type.finite_map.fmap'('type.pair.prod'(X14,X15),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17)))))))),
  file('thm.typeSysProps.ctMap_ok_pres','thm.typeSysProps.ctMap_ok_merge_imp')).
fof(f27,plain,(
  ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FUNION_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.SND_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t')),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),sK6))))))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK7))))))),
  inference(cnf_transformation,[],[f23])).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 57
% Passive clauses: 221
% Generated clauses: 733
% Final active clauses: 39
% Final passive clauses: 138
% Input formulas: 8
% Initial clauses: 11
% 
% Selected by SInE selection: 7
% SInE iterations: 1
% 
% Duplicate literals: 26
% Trivial inequalities: 1
% Fw subsumption resolutions: 107
% Fw demodulations: 74
% Bw demodulations: 14
% 
% Simple tautologies: 2
% Equational tautologies: 1
% Forward subsumptions: 317
% 
% Binary resolution: 90
% Factoring: 1
% Forward superposition: 248
% Backward superposition: 149
% Self superposition: 5
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 8
% SAT solver unit clauses: 1
% SAT solver binary clauses: 4
% 
% Sat splits: 6
% Sat splitting refutations: 1
% 
% Memory used [KB]: 1791
% Time elapsed: 0.028 s
% ------------------------------
% ------------------------------
% Success in time 11.747 s
