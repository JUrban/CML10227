Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (45988)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 151
% Passive clauses: 2703
% Generated clauses: 21667
% Final active clauses: 149
% Final passive clauses: 2422
% Input formulas: 20
% Initial clauses: 26
% 
% Duplicate literals: 707
% Trivial inequalities: 693
% Fw subsumption resolutions: 1938
% Fw demodulations: 5748
% Bw demodulations: 2
% 
% Simple tautologies: 263
% Equational tautologies: 23
% Forward subsumptions: 8800
% 
% Binary resolution: 171
% Forward superposition: 7284
% Backward superposition: 4825
% Self superposition: 122
% Equality factoring: 55
% Equality resolution: 21
% 
% Split clauses: 282
% Split components: 575
% SAT solver clauses: 770
% SAT solver unit clauses: 13
% SAT solver binary clauses: 225
% 
% Sat splits: 282
% 
% TWLsolver clauses: 770
% TWLsolver calls for satisfiability: 126
% 
% Memory used [KB]: 13432
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f2460,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2459,f2303,f2322,f65,f91,f83,f104])).
fof(f104,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(X0)))),s('type.list.list'('type.ast.dec'),sK3(X0)))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))) ) | $spl22),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(X0)))),s('type.list.list'('type.ast.dec'),sK3(X0)))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f83,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(X0)))),s('type.list.list'('type.ast.dec'),sK3(X0)))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(X0)))),s('type.list.list'('type.ast.dec'),sK3(X0)))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f38])).
fof(f38,plain,(
  ! [X0] : ? [X1,X2] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9] : ? [X7,X8] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X7))),s('type.list.list'('type.ast.dec'),X8))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X9),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  file('thm.source_to_modProof.source_to_modProof_|49|65_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|54_prove_ltb')).
fof(f91,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',sK0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))) ) | $spl0),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',sK0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f65,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',sK0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X1,X2] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',sK0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f51])).
fof(f51,plain,(
  ? [X0] : ! [X1,X2] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0] : ? [X1,X2] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.dec'),X2))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X0),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ? [X7,X8] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X7))),s('type.list.list'('type.ast.dec'),X8))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X6),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ? [X7,X8] : s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X7))),s('type.list.list'('type.ast.dec'),X8))) = s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),'const.ast.top_CASE_3'(s('type.ast.top',X6),s(fun('type.list.list'('type.string.char'),fun('type.option.option'('type.list.list'('type.ast.spec')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))))),'_dst_x00x10_2'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'))),s(fun('type.ast.dec','type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),'_dst_x0x1_2'(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'))),s(fun('type.ast.dec','type.list.list'('type.ast.dec')),'_dst_x1x0_2'(s(fun('type.ast.dec',fun('type.list.list'('type.ast.dec'),'type.list.list'('type.ast.dec'))),'const.list.CONS_0'),s('type.list.list'('type.ast.dec'),'const.list.NIL_0')))))))),
  file('thm.source_to_modProof.source_to_modProof_|49|65_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|65_prove_ltb')).
fof(f2322,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.dec'),X1))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(sK0)))),s('type.list.list'('type.ast.dec'),sK3(sK0))))) ) | $spl464),
  inference(cnf_transformation,[],[f2322_D])).
fof(f2322_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.dec'),X1))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(sK0)))),s('type.list.list'('type.ast.dec'),sK3(sK0))))) ) <=> ~$spl464),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl464])])).
fof(f2303,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.dec'),X1))) != s('type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')),happ(s(fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec'))),happ(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.dec'),'type.pair.prod'('type.option.option'('type.list.list'('type.string.char')),'type.list.list'('type.ast.dec')))),'const.pair.,_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2(sK0)))),s('type.list.list'('type.ast.dec'),sK3(sK0))))) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f91,f104])).
fof(f2459,plain,(
  $false | $spl464),
  inference(equality_resolution,[],[f2322])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 47
% Passive clauses: 256
% Generated clauses: 2368
% Final active clauses: 42
% Final passive clauses: 190
% Input formulas: 20
% Initial clauses: 26
% 
% Duplicate literals: 166
% Trivial inequalities: 49
% Fw subsumption resolutions: 106
% Fw demodulations: 72
% Bw demodulations: 22
% Condensations: 268
% 
% Simple tautologies: 97
% Equational tautologies: 18
% Forward subsumptions: 955
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 20
% Forward superposition: 637
% Backward superposition: 626
% Self superposition: 69
% Equality factoring: 40
% Equality resolution: 11
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 405
% SAT solver unit clauses: 37
% SAT solver binary clauses: 35
% SAT solver learnt clauses: 1
% 
% Sat splits: 7
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 404
% TWLsolver calls for satisfiability: 102
% 
% Memory used [KB]: 4733
% Time elapsed: 0.105 s
% ------------------------------
% ------------------------------
% Success in time 0.711 s
