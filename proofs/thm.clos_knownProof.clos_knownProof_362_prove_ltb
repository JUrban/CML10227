Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f14132,plain,(
  $false),
  inference(equality_resolution,[],[f1336])).
fof(f1336,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),X0) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK2),s('type.list.list'('type.clos_known.val_approx'),sK1),s('type.sptree.spt'('type.clos_known.val_approx'),sK0)))) )),
  inference(superposition,[],[f116,f143])).
fof(f143,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK7(X2,X1,X0)),s(X1,sK8(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK7(X2,X1,X0)),s(X1,sK8(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8])],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X12,X15] : ! [X13] : ? [X48,X49] : s('type.pair.prod'(X12,X15),X13) = s('type.pair.prod'(X12,X15),'const.pair.,_2'(s(X12,X48),s(X15,X49)))),
  file('thm.clos_knownProof.clos_knownProof_362_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f116,plain,(
  ( ! [X4,X3] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK2),s('type.list.list'('type.clos_known.val_approx'),sK1),s('type.sptree.spt'('type.clos_known.val_approx'),sK0)))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK2),s('type.list.list'('type.clos_known.val_approx'),sK1),s('type.sptree.spt'('type.clos_known.val_approx'),sK0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2] : ! [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X0)))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X0)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ? [X9,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X8),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ? [X9,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X8),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))),
  file('thm.clos_knownProof.clos_knownProof_362_prove_ltb','thm.clos_knownProof.clos_knownProof_362_prove_ltb')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 140
% Passive clauses: 1916
% Generated clauses: 13784
% Final active clauses: 140
% Final passive clauses: 1658
% Input formulas: 37
% Initial clauses: 45
% 
% Duplicate literals: 483
% Trivial inequalities: 670
% Fw subsumption resolutions: 1277
% Fw demodulations: 1781
% 
% Simple tautologies: 336
% Equational tautologies: 23
% Forward subsumptions: 6959
% 
% Binary resolution: 26
% Forward superposition: 5542
% Backward superposition: 3711
% Self superposition: 128
% Equality factoring: 56
% Equality resolution: 33
% 
% Split clauses: 164
% Split components: 328
% SAT solver clauses: 456
% SAT solver unit clauses: 18
% SAT solver binary clauses: 103
% 
% Sat splits: 164
% 
% TWLsolver clauses: 456
% TWLsolver calls for satisfiability: 71
% 
% Memory used [KB]: 13176
% Time elapsed: 0.368 s
% ------------------------------
% ------------------------------
% Success in time 0.381 s
