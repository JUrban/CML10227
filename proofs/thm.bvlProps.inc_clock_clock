Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f10175,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f10122])).
fof(f10122,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.num.num',sK1)))),
  inference(superposition,[],[f108,f9913])).
fof(f9913,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f9848,f186])).
fof(f186,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f137,f136])).
fof(f136,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X16,X11] : ! [X12,X17] : s(X11,X12) = s(X11,'const.combin.K_2'(s(X11,X12),s(X16,X17)))),
  file('thm.bvlProps.inc_clock_clock','thm.combin.K_THM')).
fof(f137,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X11,X16] : ! [X18,X19] : s(X11,'const.combin.K_2'(s(X11,X18),s(X16,X19))) = s(X11,happ(s(fun(X16,X11),'const.combin.K_1'(s(X11,X18))),s(X16,X19)))),
  file('thm.bvlProps.inc_clock_clock','ARITY_1_2_const.combin.K')).
fof(f9848,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) )),
  inference(superposition,[],[f123,f132])).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ! [X1,X2] : s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X11] : ! [X13,X8] : s('type.bvlSem.state'(X11),'const.bvlProps.inc_clock_2'(s('type.num.num',X13),s('type.bvlSem.state'(X11),X8))) = s('type.bvlSem.state'(X11),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X11),X8))),s('type.num.num',X13))))),s('type.bvlSem.state'(X11),X8)))),
  file('thm.bvlProps.inc_clock_clock','thm.bvlProps.inc_clock_def')).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8,X14] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X14),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X8))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvlSem.state'(X6),X8)))))),
  file('thm.bvlProps.inc_clock_clock','thm.bvlSem.bvlSem_68_prove_ltb')).
fof(f108,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.num.num',sK1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),'const.bvlProps.inc_clock_2'(s('type.num.num',sK1),s('type.bvlSem.state'(sK0),sK2)))))),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.num.num',sK1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),'const.bvlProps.inc_clock_2'(s('type.num.num',sK1),s('type.bvlSem.state'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f102])).
fof(f102,plain,(
  ? [X0,X1,X2] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X8))),s('type.num.num',X7))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlProps.inc_clock_2'(s('type.num.num',X7),s('type.bvlSem.state'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X8))),s('type.num.num',X7))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlProps.inc_clock_2'(s('type.num.num',X7),s('type.bvlSem.state'(X6),X8)))))),
  file('thm.bvlProps.inc_clock_clock','thm.bvlProps.inc_clock_clock')).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 83
% Passive clauses: 654
% Generated clauses: 9934
% Final active clauses: 81
% Final passive clauses: 468
% Input formulas: 36
% Initial clauses: 38
% 
% Duplicate literals: 420
% Trivial inequalities: 131
% Fw subsumption resolutions: 1017
% Fw demodulations: 852
% 
% Simple tautologies: 129
% Equational tautologies: 22
% Forward subsumptions: 6424
% 
% Binary resolution: 4
% Forward superposition: 3934
% Backward superposition: 3268
% Self superposition: 177
% Equality factoring: 49
% Equality resolution: 14
% 
% Split clauses: 114
% Split components: 228
% SAT solver clauses: 332
% SAT solver unit clauses: 38
% SAT solver binary clauses: 102
% 
% Sat splits: 114
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 332
% TWLsolver calls for satisfiability: 82
% 
% Memory used [KB]: 7675
% Time elapsed: 0.468 s
% ------------------------------
% ------------------------------
% Success in time 0.475 s
