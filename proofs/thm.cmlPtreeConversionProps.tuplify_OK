Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.cmlPtreeConversionProps
% (81787)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 161
% Passive clauses: 3872
% Generated clauses: 28787
% Final active clauses: 161
% Final passive clauses: 3484
% Input formulas: 25
% Initial clauses: 42
% 
% Duplicate literals: 934
% Trivial inequalities: 1019
% Fw subsumption resolutions: 3162
% Fw demodulations: 7093
% 
% Simple tautologies: 634
% Equational tautologies: 46
% Forward subsumptions: 11247
% Fw demodulations to eq. taut.: 22
% 
% Binary resolution: 169
% Factoring: 1
% Forward superposition: 7377
% Backward superposition: 8614
% Self superposition: 161
% Equality factoring: 106
% Equality resolution: 49
% 
% Split clauses: 250
% Split components: 502
% SAT solver clauses: 556
% SAT solver unit clauses: 30
% SAT solver binary clauses: 232
% 
% Sat splits: 250
% 
% TWLsolver clauses: 554
% TWLsolver calls for satisfiability: 76
% 
% Memory used [KB]: 9850
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.cmlPtreeConversionProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.cmlPtreeConversionProps
% SZS output start Proof for thm.cmlPtreeConversionProps
fof(f4373,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4362,f84,f125,f93,f138,f4140,f4142,f83,f127,f106,f145,f4113,f4115,f3983,f3986,f3978,f3979,f3947,f3965,f124,f159])).
fof(f159,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))),s('type.ast.tctor','const.ast.TC_tup_0')))))) ) | $spl50),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))),s('type.ast.tctor','const.ast.TC_tup_0')))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))),s('type.ast.tctor','const.ast.TC_tup_0')))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X2),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))),s('type.ast.tctor','const.ast.TC_tup_0')))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X16,X17,X18] : s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X18),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X17),s('type.list.list'('type.ast.t'),X16))))))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X18),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X17),s('type.list.list'('type.ast.t'),X16))))),s('type.ast.tctor','const.ast.TC_tup_0')))))),
  file('thm.cmlPtreeConversionProps.tuplify_OK','thm.cmlPtreeConversion.tuplify_def|split|2')).
fof(f3965,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X2)))))))) ) | $spl546),
  inference(cnf_transformation,[],[f3965_D])).
fof(f3965_D,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X2)))))))) ) <=> ~$spl546),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl546])])).
fof(f3947,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X2)))))))) ) | ($spl0 | $spl50)),
  inference(superposition,[],[f125,f159])).
fof(f3979,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0)) ) | $spl556),
  inference(cnf_transformation,[],[f3979_D])).
fof(f3979_D,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0)) ) <=> ~$spl556),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl556])])).
fof(f3978,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),X0))))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0)) ) | ($spl22 | $spl546)),
  inference(superposition,[],[f3965,f145])).
fof(f3986,plain,(
  ( ! [X0] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X0))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(X0,'type.ast.t')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0)) ) | $spl558),
  inference(cnf_transformation,[],[f3986_D])).
fof(f3986_D,plain,(
  ( ! [X0] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X0))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(X0,'type.ast.t')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0)) ) <=> ~$spl558),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl558])])).
fof(f3983,plain,(
  ( ! [X0] : (s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X0))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(X0,'type.ast.t')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0)) ) | ($spl22 | $spl556)),
  inference(superposition,[],[f3979,f145])).
fof(f4115,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(sK0,'type.ast.t')) | $spl616),
  inference(cnf_transformation,[],[f4115_D])).
fof(f4115_D,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(sK0,'type.ast.t')) <=> ~$spl616),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl616])])).
fof(f4113,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(sK0,'type.ast.t')) | ($spl3 | $spl558)),
  inference(subsumption_resolution,[],[f4108,f127])).
fof(f4108,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK2(sK0,'type.ast.t')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK0) | $spl558),
  inference(equality_resolution,[],[f3986])).
fof(f145,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK1(X1,X0)),s('type.list.list'(X0),sK2(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl22),
  inference(cnf_transformation,[],[f145_D])).
fof(f145_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK1(X1,X0)),s('type.list.list'(X0),sK2(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f106,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK1(X1,X0)),s('type.list.list'(X0),sK2(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK1(X1,X0)),s('type.list.list'(X0),sK2(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f43])).
fof(f43,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X10] : ! [X19] : (s('type.list.list'(X10),'const.list.NIL_0') = s('type.list.list'(X10),X19) | ? [X20,X7] : s('type.list.list'(X10),X19) = s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X20),s('type.list.list'(X10),X7))))),
  file('thm.cmlPtreeConversionProps.tuplify_OK','thm.list.list_CASES')).
fof(f127,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK0) | $spl3),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK0) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f83,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK0)),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK0) & ! [X1] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f60])).
fof(f60,plain,(
  ? [X0] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X0) & ! [X1] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X0))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X0) => ? [X1] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X0))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ~! [X0] : (~s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X0) => ? [X1] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X0))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (~s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X6) => ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X6))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (~s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X6) => ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),X6))))),
  file('thm.cmlPtreeConversionProps.tuplify_OK','thm.cmlPtreeConversionProps.tuplify_OK')).
fof(f4142,plain,(
  s('type.list.list'('type.ast.t'),sK0) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK1(sK0,'type.ast.t')),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))) | $spl618),
  inference(cnf_transformation,[],[f4142_D])).
fof(f4142_D,plain,(
  s('type.list.list'('type.ast.t'),sK0) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK1(sK0,'type.ast.t')),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))) <=> ~$spl618),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl618])])).
fof(f4140,plain,(
  s('type.list.list'('type.ast.t'),sK0) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK1(sK0,'type.ast.t')),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))) | ($spl3 | $spl22 | $spl616)),
  inference(subsumption_resolution,[],[f4120,f127])).
fof(f4120,plain,(
  s('type.list.list'('type.ast.t'),sK0) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK1(sK0,'type.ast.t')),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK0) | ($spl22 | $spl616)),
  inference(superposition,[],[f145,f4115])).
fof(f138,plain,(
  ( ! [X0] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X0))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))))) ) | $spl10),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  ( ! [X0] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X0))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f93,plain,(
  ( ! [X0] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X0))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X0))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X15] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X15))) = s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X15),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))))),
  file('thm.cmlPtreeConversionProps.tuplify_OK','thm.cmlPtreeConversion.tuplify_def|split|1')).
fof(f125,plain,(
  ( ! [X1] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0)))) ) | $spl0),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  ( ! [X1] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f84,plain,(
  ( ! [X1] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X1))) != s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0)))) )),
  inference(cnf_transformation,[],[f65])).
fof(f4362,plain,(
  $false | ($spl0 | $spl10 | $spl618)),
  inference(subsumption_resolution,[],[f4328,f125])).
fof(f4328,plain,(
  s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),sK0))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK1(sK0,'type.ast.t')))) | ($spl10 | $spl618)),
  inference(superposition,[],[f138,f4142])).
% SZS output end Proof for thm.cmlPtreeConversionProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 66
% Passive clauses: 405
% Generated clauses: 4261
% Final active clauses: 58
% Final passive clauses: 281
% Input formulas: 25
% Initial clauses: 42
% 
% Duplicate literals: 257
% Trivial inequalities: 92
% Fw subsumption resolutions: 318
% Fw demodulations: 316
% Bw demodulations: 64
% Condensations: 428
% Global subsumptions: 5
% 
% Simple tautologies: 125
% Equational tautologies: 36
% Forward subsumptions: 1588
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 95
% Factoring: 1
% Forward superposition: 996
% Backward superposition: 1084
% Self superposition: 73
% Equality factoring: 68
% Equality resolution: 17
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 723
% SAT solver unit clauses: 61
% SAT solver binary clauses: 53
% SAT solver learnt clauses: 11
% 
% Sat splits: 12
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 702
% TWLsolver calls for satisfiability: 222
% 
% Memory used [KB]: 3837
% Time elapsed: 0.210 s
% ------------------------------
% ------------------------------
% Success in time 0.82 s
