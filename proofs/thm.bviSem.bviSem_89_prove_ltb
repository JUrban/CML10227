Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviSem
% (83790)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 965
% Passive clauses: 7612
% Generated clauses: 35695
% Final active clauses: 940
% Final passive clauses: 6270
% Input formulas: 516
% Initial clauses: 872
% 
% Duplicate literals: 206
% Trivial inequalities: 40
% Fw subsumption resolutions: 1532
% Fw demodulations: 3587
% Bw demodulations: 7
% 
% Simple tautologies: 326
% Equational tautologies: 26
% Forward subsumptions: 22180
% Fw demodulations to eq. taut.: 7
% 
% Binary resolution: 5903
% Factoring: 625
% Forward superposition: 14095
% Backward superposition: 8790
% Self superposition: 51
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 399
% Split components: 800
% SAT solver clauses: 543
% SAT solver unit clauses: 19
% SAT solver binary clauses: 54
% 
% Sat splits: 399
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 542
% TWLsolver calls for satisfiability: 349
% 
% Memory used [KB]: 18933
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bviSem
% (83801)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 497
% Passive clauses: 2851
% Generated clauses: 21631
% Final active clauses: 488
% Final passive clauses: 2215
% Input formulas: 516
% Initial clauses: 872
% 
% Duplicate literals: 98
% Trivial inequalities: 74
% Fw subsumption resolutions: 757
% Fw demodulations: 2863
% Bw demodulations: 146
% Condensations: 108
% Global subsumptions: 25
% 
% Simple tautologies: 267
% Equational tautologies: 11
% Forward subsumptions: 11075
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 2069
% Factoring: 262
% Forward superposition: 6630
% Backward superposition: 4663
% Self superposition: 67
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 24
% Split components: 48
% SAT solver clauses: 4234
% SAT solver unit clauses: 1169
% SAT solver binary clauses: 238
% SAT solver learnt clauses: 50
% SAT solver learnt literals: 14
% 
% Sat splits: 24
% 
% TWLsolver clauses: 4134
% TWLsolver calls for satisfiability: 5043
% 
% Memory used [KB]: 50660
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bviSem
% (83819)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1421
% Passive clauses: 12585
% Generated clauses: 193134
% Final active clauses: 1351
% Final passive clauses: 5561
% Input formulas: 516
% Initial clauses: 872
% Discarded non-redundant clauses: 40465
% 
% Duplicate literals: 24
% Trivial inequalities: 97
% Fw subsumption resolutions: 2368
% Fw demodulations: 38846
% Bw demodulations: 1124
% Condensations: 49
% Global subsumptions: 8
% 
% Simple tautologies: 216
% Equational tautologies: 62
% Forward subsumptions: 105577
% Fw demodulations to eq. taut.: 4094
% Bw demodulations to eq. taut.: 42
% 
% Unit resulting resolution: 54360
% Factoring: 2
% Forward superposition: 57540
% Backward superposition: 37582
% Self superposition: 150
% Equality factoring: 2
% Equality resolution: 26
% 
% Split clauses: 29
% Split components: 58
% SAT solver clauses: 14666
% SAT solver unit clauses: 7354
% SAT solver binary clauses: 6008
% 
% Sat splits: 29
% Sat splitting refutations: 2013
% 
% Memory used [KB]: 328651
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 30 next slice time: 30
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bviSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviSem
% SZS output start Proof for thm.bviSem
fof(f1692,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f883,f1216,f1214,f1217,f1219,f1220,f1354,f1221,f1356,f1224,f1355,f1326,f1357,f1353,f1375,f1376,f1404,f1377,f1401,f1378,f1405,f1381,f1406,f1384,f1407,f1385,f1409,f1390,f1410,f1391,f1411,f1412,f1415,f1403,f1414,f1660,f1454,f1213,f1689,f1691])).
fof(f1691,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f1216,f881])).
fof(f881,plain,(
  p(s(bool,sK16))),
  inference(cnf_transformation,[],[f732])).
fof(f732,plain,(
  p(s(bool,sK16)) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15)))))) & (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) | ~p(s(bool,sK16)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16])],[f674])).
fof(f674,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,X3)) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2)))))) & (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))) | ~p(s(bool,X3))))),
  inference(flattening,[],[f673])).
fof(f673,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,X3)) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2)))))) & (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))) | ~p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f519])).
fof(f519,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,X3)) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2)))))) | (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))) & p(s(bool,X3)))))),
  inference(flattening,[],[f518])).
fof(f518,plain,(
  ~! [X0] : ! [X1,X2,X3] : (p(s(bool,X3)) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2)))))) | (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))))) & p(s(bool,X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : (p(s(bool,X9)) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X7),s('type.bviSem.state'(X6),X8))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X8)))))) | (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X8))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X7),s('type.bviSem.state'(X6),X8))))) & p(s(bool,X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : (p(s(bool,X9)) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X7),s('type.bviSem.state'(X6),X8))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X8)))))) | (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X8))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X7),s('type.bviSem.state'(X6),X8))))) & p(s(bool,X9)))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.bviSem.bviSem_89_prove_ltb')).
fof(f1689,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15)))))))) | $spl35),
  inference(cnf_transformation,[],[f1689_D])).
fof(f1689_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15)))))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f1213,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) | $spl0),
  inference(cnf_transformation,[],[f1213_D])).
fof(f1213_D,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1454,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))))))))),
  inference(resolution,[],[f882,f960])).
fof(f960,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f768])).
fof(f768,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) & ((s('type.num.num',X0) != s('type.num.num',X1) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(flattening,[],[f767])).
fof(f767,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))) & ((s('type.num.num',X0) != s('type.num.num',X1) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f548])).
fof(f548,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) <=> (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f325])).
fof(f325,axiom,(
  ! [X46,X18] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) <=> (s('type.num.num',X18) = s('type.num.num',X46) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num',X18))))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.prim_rec.LESS_THM')).
fof(f882,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))))))),
  inference(cnf_transformation,[],[f732])).
fof(f1660,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f1659,f1009])).
fof(f1009,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X2),s('type.bviSem.state'(X0),X1))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f593])).
fof(f593,plain,(
  ! [X0,X1,X2] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X2),s('type.bviSem.state'(X0),X1))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))))))),
  inference(flattening,[],[f592])).
fof(f592,plain,(
  ! [X0] : ! [X1,X2] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X2),s('type.bviSem.state'(X0),X1))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X10,X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X7),s('type.bviSem.state'(X6),X10))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X10))))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.bviSem.bviSem_88_prove_ltb|split|0')).
fof(f1659,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15)))))) | $spl1),
  inference(subsumption_resolution,[],[f1453,f1214])).
fof(f1453,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))))))),
  inference(resolution,[],[f882,f966])).
fof(f966,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f772])).
fof(f772,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(flattening,[],[f771])).
fof(f771,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f550])).
fof(f550,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f460])).
fof(f460,axiom,(
  ! [X46,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num',X18)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num',X46)))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.LESS_OR_EQ')).
fof(f1414,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))) | $spl33),
  inference(cnf_transformation,[],[f1414_D])).
fof(f1414_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f1403,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | $spl17),
  inference(cnf_transformation,[],[f1403_D])).
fof(f1403_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f1415,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))) | $spl1),
  inference(forward_demodulation,[],[f1395,f1031])).
fof(f1031,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  inference(cnf_transformation,[],[f369])).
fof(f369,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.ALT_ZERO')).
fof(f1395,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))) | $spl1),
  inference(superposition,[],[f1214,f1024])).
fof(f1024,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f786])).
fof(f786,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f603])).
fof(f603,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f213])).
fof(f213,axiom,(
  ! [X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X18))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.numeral.numeral_distrib|split|18')).
fof(f1412,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))) | $spl1),
  inference(forward_demodulation,[],[f1394,f1031])).
fof(f1394,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))) | $spl1),
  inference(superposition,[],[f1214,f1022])).
fof(f1022,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f785])).
fof(f785,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f602])).
fof(f602,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f193])).
fof(f193,axiom,(
  ! [X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X18))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.numeral.numeral_distrib|split|17')).
fof(f1411,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) ) | $spl30),
  inference(cnf_transformation,[],[f1411_D])).
fof(f1411_D,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1391,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) ) | $spl1),
  inference(superposition,[],[f1214,f1017])).
fof(f1017,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f783])).
fof(f783,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f782])).
fof(f782,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f599])).
fof(f599,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f471])).
fof(f471,axiom,(
  ! [X46,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X18))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X46) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.ADD_EQ_|48|')).
fof(f1410,plain,(
  ( ! [X23] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X23)))) ) | $spl28),
  inference(cnf_transformation,[],[f1410_D])).
fof(f1410_D,plain,(
  ( ! [X23] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X23)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1390,plain,(
  ( ! [X23] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X23)))) ) | $spl1),
  inference(superposition,[],[f1214,f1016])).
fof(f1016,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f783])).
fof(f1409,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) | $spl26),
  inference(cnf_transformation,[],[f1409_D])).
fof(f1409_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1385,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) | $spl1),
  inference(superposition,[],[f1214,f980])).
fof(f980,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f775])).
fof(f775,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)))),
  inference(nnf_transformation,[],[f565])).
fof(f565,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(flattening,[],[f564])).
fof(f564,plain,(
  ! [X0] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f278])).
fof(f278,axiom,(
  ! [X18] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.NOT_ZERO_LT_ZERO')).
fof(f1407,plain,(
  ( ! [X14] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))))))) ) | $spl24),
  inference(cnf_transformation,[],[f1407_D])).
fof(f1407_D,plain,(
  ( ! [X14] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1384,plain,(
  ( ! [X14] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))))))) ) | $spl1),
  inference(superposition,[],[f1214,f969])).
fof(f969,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f684])).
fof(f684,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(ennf_transformation,[],[f552])).
fof(f552,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(flattening,[],[f551])).
fof(f551,plain,(
  ! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(rectify,[],[f450])).
fof(f450,axiom,(
  ! [X46,X18] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X18)))))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.LESS_ADD_NONZERO')).
fof(f1406,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X11)))) ) | $spl22),
  inference(cnf_transformation,[],[f1406_D])).
fof(f1406_D,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X11)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1381,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X11)))) ) | $spl1),
  inference(superposition,[],[f1214,f963])).
fof(f963,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f770])).
fof(f770,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f769])).
fof(f769,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f549])).
fof(f549,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))))),
  inference(rectify,[],[f372])).
fof(f372,axiom,(
  ! [X18,X46] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',X46))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X46))))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.EXP_EQ_|48|')).
fof(f1405,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X8)) ) | $spl20),
  inference(cnf_transformation,[],[f1405_D])).
fof(f1405_D,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X8)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f1378,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X8)) ) | $spl1),
  inference(superposition,[],[f1214,f959])).
fof(f959,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f766])).
fof(f766,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))))),
  inference(flattening,[],[f765])).
fof(f765,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f547])).
fof(f547,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)))),
  inference(flattening,[],[f546])).
fof(f546,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f274])).
fof(f274,axiom,(
  ! [X16,X25] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num',X25))),s('type.num.num',X25)))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X16) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X25)))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.integer.integer_326_prove_ltb')).
fof(f1401,plain,(
  ( ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X5))),s('type.num.num',X5))))) ) | $spl14),
  inference(cnf_transformation,[],[f1401_D])).
fof(f1401_D,plain,(
  ( ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X5))),s('type.num.num',X5))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1377,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X7))),s('type.num.num',X7))))) ) | $spl1),
  inference(superposition,[],[f1214,f957])).
fof(f957,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f766])).
fof(f1404,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))),s('type.num.num',X6))))) ) | $spl18),
  inference(cnf_transformation,[],[f1404_D])).
fof(f1404_D,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))),s('type.num.num',X6))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1376,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))))),s('type.num.num',X6))))) ) | $spl1),
  inference(superposition,[],[f1214,f955])).
fof(f955,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f764])).
fof(f764,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X1))))))),
  inference(flattening,[],[f763])).
fof(f763,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f545])).
fof(f545,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X1)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)))),
  inference(rectify,[],[f402])).
fof(f402,axiom,(
  ! [X18,X46] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X18))),s('type.num.num',X46)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X46)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.LT_MULT_CANCEL_RBARE|split|0')).
fof(f1375,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))),s('type.num.num',X5))),s('type.num.num',X5))))) ) | $spl1),
  inference(superposition,[],[f1214,f952])).
fof(f952,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f762])).
fof(f762,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(flattening,[],[f761])).
fof(f761,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f544])).
fof(f544,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f401])).
fof(f401,axiom,(
  ! [X18,X46] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X18))),s('type.num.num',X18)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X46)))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.arithmetic.LT_MULT_CANCEL_RBARE|split|1')).
fof(f1353,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,sK16) != s(bool,X1)) ) | $spl4),
  inference(cnf_transformation,[],[f1353_D])).
fof(f1353_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,sK16) != s(bool,X1)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1357,plain,(
  ( ! [X12] : (p(s(bool,X12))) ) | $spl12),
  inference(cnf_transformation,[],[f1357_D])).
fof(f1357_D,plain,(
  ( ! [X12] : (p(s(bool,X12))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1326,plain,(
  ( ! [X215,X214] : (p(s(bool,X214)) | p(s(bool,X215)) | s(bool,sK16) != s(bool,X215)) )),
  inference(resolution,[],[f881,f1205])).
fof(f1205,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f888])).
fof(f888,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f734])).
fof(f734,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f733])).
fof(f733,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f676])).
fof(f676,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f675])).
fof(f675,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f520])).
fof(f520,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X16,X43,X25,X44] : ((s(bool,X16) = s(bool,X43) & (p(s(bool,X43)) => s(bool,X25) = s(bool,X44))) => ((p(s(bool,X16)) => p(s(bool,X25))) <=> (p(s(bool,X43)) => p(s(bool,X44)))))),
  file('thm.bviSem.bviSem_89_prove_ltb','thm.bool.IMP_CONG')).
fof(f1355,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | s(bool,X7) != s(bool,X8)) ) | $spl8),
  inference(cnf_transformation,[],[f1355_D])).
fof(f1355_D,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | s(bool,X7) != s(bool,X8)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1224,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,sK16) != s(bool,X21) | s(bool,X22) != s(bool,X23)) )),
  inference(resolution,[],[f881,f891])).
fof(f891,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f734])).
fof(f1356,plain,(
  ( ! [X13] : (~p(s(bool,X13))) ) | $spl10),
  inference(cnf_transformation,[],[f1356_D])).
fof(f1356_D,plain,(
  ( ! [X13] : (~p(s(bool,X13))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1221,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,sK16) != s(bool,X14)) )),
  inference(resolution,[],[f881,f890])).
fof(f890,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f734])).
fof(f1354,plain,(
  ( ! [X2,X0] : (p(s(bool,X0)) | s(bool,X0) != s(bool,X2)) ) | $spl6),
  inference(cnf_transformation,[],[f1354_D])).
fof(f1354_D,plain,(
  ( ! [X2,X0] : (p(s(bool,X0)) | s(bool,X0) != s(bool,X2)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1220,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,sK16) != s(bool,X10)) )),
  inference(resolution,[],[f881,f889])).
fof(f889,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f734])).
fof(f1219,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,sK16) != s(bool,X6) | s(bool,X7) != s(bool,X8)) )),
  inference(resolution,[],[f881,f887])).
fof(f887,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f734])).
fof(f1217,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,sK16) != s(bool,X1)) )),
  inference(resolution,[],[f881,f885])).
fof(f885,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f734])).
fof(f1214,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) | $spl1),
  inference(cnf_transformation,[],[f1214_D])).
fof(f1214_D,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1216,plain,(
  ~p(s(bool,sK16)) | $spl3),
  inference(cnf_transformation,[],[f1216_D])).
fof(f1216_D,plain,(
  ~p(s(bool,sK16)) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f883,plain,(
  ~p(s(bool,sK16)) | s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),sK15))) != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK13),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK13),sK14),s('type.bviSem.state'(sK13),sK15)))))),
  inference(cnf_transformation,[],[f732])).
% SZS output end Proof for thm.bviSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 255
% Passive clauses: 150
% Generated clauses: 635
% Final active clauses: 254
% Final passive clauses: 111
% Input formulas: 516
% Initial clauses: 324
% 
% Selected by SInE selection: 109
% SInE iterations: 1
% 
% Duplicate literals: 20
% Fw subsumption resolutions: 21
% Fw demodulations: 30
% 
% Simple tautologies: 84
% Equational tautologies: 2
% Forward subsumptions: 47
% 
% Binary resolution: 247
% Forward superposition: 145
% 
% Split clauses: 19
% Split components: 39
% SAT solver clauses: 22
% SAT solver unit clauses: 2
% SAT solver binary clauses: 7
% 
% Sat splits: 19
% Sat splitting refutations: 2
% 
% Memory used [KB]: 2430
% Time elapsed: 0.028 s
% ------------------------------
% ------------------------------
% Success in time 12.01 s
