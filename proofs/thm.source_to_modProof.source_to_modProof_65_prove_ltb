Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (117145)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 565
% Passive clauses: 8679
% Generated clauses: 15276
% Final active clauses: 563
% Final passive clauses: 7769
% Input formulas: 60
% Initial clauses: 225
% 
% Duplicate literals: 238
% Trivial inequalities: 49
% Fw subsumption resolutions: 1043
% Fw demodulations: 70
% Bw demodulations: 1
% 
% Simple tautologies: 202
% Equational tautologies: 61
% Forward subsumptions: 4688
% 
% Binary resolution: 10209
% Factoring: 968
% Forward superposition: 809
% Backward superposition: 1490
% Self superposition: 23
% Equality factoring: 26
% Equality resolution: 26
% 
% Split clauses: 356
% Split components: 716
% SAT solver clauses: 594
% SAT solver unit clauses: 18
% SAT solver binary clauses: 118
% 
% Sat splits: 356
% 
% TWLsolver clauses: 594
% TWLsolver calls for satisfiability: 279
% 
% Memory used [KB]: 8059
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (117168)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 366
% Passive clauses: 2578
% Generated clauses: 8462
% Final active clauses: 362
% Final passive clauses: 2165
% Input formulas: 60
% Initial clauses: 225
% 
% Duplicate literals: 113
% Trivial inequalities: 4
% Fw subsumption resolutions: 397
% Fw demodulations: 55
% Bw demodulations: 49
% Condensations: 108
% Global subsumptions: 19
% 
% Simple tautologies: 197
% Equational tautologies: 12
% Forward subsumptions: 2276
% 
% Binary resolution: 3985
% Factoring: 344
% Forward superposition: 333
% Backward superposition: 227
% Self superposition: 3
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 2951
% SAT solver unit clauses: 236
% SAT solver binary clauses: 93
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 12
% 
% Sat splits: 2
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2875
% TWLsolver calls for satisfiability: 2045
% 
% Memory used [KB]: 11257
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f7569,plain,(
  $false),
  inference(subsumption_resolution,[],[f7568,f7044])).
fof(f7044,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s(fun('type.list.list'('type.string.char'),bool),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X3))))) )),
  inference(unit_resulting_resolution,[],[f312,f311,f531])).
fof(f531,plain,(
  ( ! [X4,X2,X0,X10,X5,X3,X1,X9] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X9))) | s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X9))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK34(X10,X9,X5,X4,X3,X2,X1,X0)))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))))) )),
  inference(cnf_transformation,[],[f309])).
fof(f309,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) & ! [X9,X10] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X9))) | (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X9))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK34(X10,X9,X5,X4,X3,X2,X1,X0)))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK34(X10,X9,X5,X4,X3,X2,X1,X0)),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10)))))))) & (~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK36(X5,X4,X3,X2,X1,X0)))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),sK35(X5,X4,X3,X2,X1,X0)))) & ! [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),sK35(X5,X4,X3,X2,X1,X0)))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK36(X5,X4,X3,X2,X1,X0))))))) | p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK34,sK35,sK36])],[f308])).
fof(f308,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) & ! [X9,X10] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X9))) | ? [X11] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X9))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10)))))))) & (~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | ? [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) & ! [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))))) | p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))))))),
  inference(rectify,[],[f307])).
fof(f307,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) & ! [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) | ? [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))))))) & (~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | ? [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) & ! [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))))) | p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))))))),
  inference(flattening,[],[f306])).
fof(f306,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) & ! [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) | ? [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))))))) & ((~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) | ? [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) & ! [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))))) | p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))))))),
  inference(nnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) <=> (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) & ! [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) | ? [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))))))),
  inference(ennf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) <=> (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s(fun('type.list.list'('type.string.char'),bool),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5)))) & ! [X6,X7] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.string.char'),X6))) => ? [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.list.list'('type.string.char'),X6))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))))))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X14,X9,X10,X11,X12,X13] : (p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) <=> (p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X15,X17] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X15))) => ? [X42] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X42))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X15))) & p(s(bool,'const.source_to_modProof.global_env_inv_flat_4'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X42),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))))))))),
  file('thm.source_to_modProof.source_to_modProof_65_prove_ltb','thm.source_to_modProof.v_rel_eqns|split|10')).
fof(f311,plain,(
  s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK18))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s('type.list.list'('type.string.char'),sK17)))),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK16),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s(fun('type.list.list'('type.string.char'),bool),sK14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK18))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s('type.list.list'('type.string.char'),sK17))) & ! [X8] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.list.list'('type.string.char'),sK17)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f199])).
fof(f199,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s(fun('type.list.list'('type.string.char'),bool),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.list.list'('type.string.char'),X6))) & ! [X8] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X0),s('type.list.list'('type.string.char'),X6))))),
  inference(rectify,[],[f146])).
fof(f146,plain,(
  ? [X3,X4,X5,X6,X7,X8,X9,X11] : (p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X11))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s('type.list.list'('type.string.char'),X9))) & ! [X12] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.list.list'('type.string.char'),X9))))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ? [X3,X4,X5,X6,X7,X8,X9,X11] : ((p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X11))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s('type.list.list'('type.string.char'),X9)))) & ! [X12] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.list.list'('type.string.char'),X9))))),
  inference(ennf_transformation,[],[f62])).
fof(f62,plain,(
  ~! [X3,X4,X5,X6,X7,X8,X9,X11] : ((p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X11))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s('type.list.list'('type.string.char'),X9)))) => ? [X12] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.list.list'('type.string.char'),X9))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : ((p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X15)))) => ? [X18] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X15))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : ((p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X15)))) => ? [X18] : s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X15))))),
  file('thm.source_to_modProof.source_to_modProof_65_prove_ltb','thm.source_to_modProof.source_to_modProof_65_prove_ltb')).
fof(f312,plain,(
  ( ! [X8] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8))) != s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.list.list'('type.string.char'),sK17)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f7568,plain,(
  p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK16),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s(fun('type.list.list'('type.string.char'),bool),sK14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))))),
  inference(unit_resulting_resolution,[],[f556,f1287,f558])).
fof(f558,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f396,f556])).
fof(f396,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f240])).
fof(f240,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f1287,plain,(
  ( ! [X0] : (sP0(X0,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK16),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s(fun('type.list.list'('type.string.char'),bool),sK14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15)))) )),
  inference(unit_resulting_resolution,[],[f310,f397])).
fof(f397,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f241])).
fof(f310,plain,(
  p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK16),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK13),s(fun('type.list.list'('type.string.char'),bool),sK14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))))),
  inference(cnf_transformation,[],[f200])).
fof(f556,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f316,f313])).
fof(f313,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.source_to_modProof.source_to_modProof_65_prove_ltb',aHL_TRUTH)).
fof(f316,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f24])).
fof(f24,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.source_to_modProof.source_to_modProof_65_prove_ltb','thm.bool.NOT_CLAUSES|split|2')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 401
% Passive clauses: 1088
% Generated clauses: 7404
% Final active clauses: 358
% Final passive clauses: 468
% Input formulas: 60
% Initial clauses: 225
% 
% Duplicate literals: 55
% Trivial inequalities: 18
% Fw subsumption resolutions: 404
% Fw demodulations: 610
% Bw demodulations: 179
% Condensations: 308
% Global subsumptions: 14
% 
% Simple tautologies: 81
% Equational tautologies: 78
% Forward subsumptions: 4337
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 3729
% Factoring: 1
% Forward superposition: 733
% Backward superposition: 876
% Self superposition: 25
% Equality factoring: 26
% Equality resolution: 17
% 
% Split clauses: 38
% Split components: 76
% SAT solver clauses: 1552
% SAT solver unit clauses: 900
% SAT solver binary clauses: 303
% 
% Sat splits: 38
% Sat splitting refutations: 372
% 
% Memory used [KB]: 4861
% Time elapsed: 0.251 s
% ------------------------------
% ------------------------------
% Success in time 1.579 s
