Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f1840,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1839,f133,f230,f228,f1838])).
fof(f1838,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f135])).
fof(f135,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.BinomialHeap.tree'(sK6),sK7) != s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(sK6,X3),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK6),X4),s('type.list.list'('type.BinomialHeap.tree'(sK6)),X5)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK6,sK9),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.NIL_0'))) | s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK10),s(sK6,sK11),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK6),sK12),s('type.list.list'('type.BinomialHeap.tree'(sK6)),sK13)))))) & ! [X6,X7] : s('type.BinomialHeap.tree'(sK6),sK7) != s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(sK6,X7),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.NIL_0'))) & ! [X2,X3,X4,X5] : s('type.BinomialHeap.tree'(sK6),sK7) != s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(sK6,X3),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK6),X4),s('type.list.list'('type.BinomialHeap.tree'(sK6)),X5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13])],[f90])).
fof(f90,plain,(
  ? [X0,X1] : ((? [X12,X13] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X12),s(X0,X13),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X9),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X10),s('type.list.list'('type.BinomialHeap.tree'(X0)),X11)))))) & ! [X6,X7] : s('type.BinomialHeap.tree'(X0),X1) != s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) & ! [X2,X3,X4,X5] : s('type.BinomialHeap.tree'(X0),X1) != s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(X0,X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1] : ((? [X6,X7] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X2,X3,X4,X5] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(X0,X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))) & ! [X12,X13] : s('type.BinomialHeap.tree'(X0),X1) != s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X12),s(X0,X13),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) & ! [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X0),X1) != s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X9),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X10),s('type.list.list'('type.BinomialHeap.tree'(X0)),X11))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1] : ((? [X6,X7] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X2,X3,X4,X5] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(X0,X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))) & (! [X12,X13] : s('type.BinomialHeap.tree'(X0),X1) != s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X12),s(X0,X13),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) & ! [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X0),X1) != s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X9),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X10),s('type.list.list'('type.BinomialHeap.tree'(X0)),X11)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : ((? [X6,X7] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X2,X3,X4,X5] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(X0,X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))) => (? [X12,X13] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X12),s(X0,X13),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X9),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X10),s('type.list.list'('type.BinomialHeap.tree'(X0)),X11)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1] : ((? [X6,X7] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X2,X3,X4,X5] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X2),s(X0,X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))) => (? [X12,X13] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X12),s(X0,X13),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X0),X1) = s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X9),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X10),s('type.list.list'('type.BinomialHeap.tree'(X0)),X11)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X11)))))) => (? [X8,X9] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X11)))))) => (? [X8,X9] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0'))) | ? [X8,X9,X10,X11] : s('type.BinomialHeap.tree'(X6),X7) = s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X6,X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X11)))))))),
  file('thm.BinomialHeap.BinomialHeap_|49|3|49|_prove_ltb','thm.BinomialHeap.BinomialHeap_|49|3|49|_prove_ltb')).
fof(f228,plain,(
  s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK6,sK9),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.NIL_0'))) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK6,sK9),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.NIL_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK10),s(sK6,sK11),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK6),sK12),s('type.list.list'('type.BinomialHeap.tree'(sK6)),sK13))))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK10),s(sK6,sK11),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK6),sK12),s('type.list.list'('type.BinomialHeap.tree'(sK6)),sK13))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK10),s(sK6,sK11),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK6),sK12),s('type.list.list'('type.BinomialHeap.tree'(sK6)),sK13))))) | s('type.BinomialHeap.tree'(sK6),sK7) = s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK6,sK9),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f91])).
fof(f1839,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f228,f134])).
fof(f134,plain,(
  ( ! [X6,X7] : (s('type.BinomialHeap.tree'(sK6),sK7) != s('type.BinomialHeap.tree'(sK6),'const.BinomialHeap.Node_3'(s('type.num.num',X6),s(sK6,X7),s('type.list.list'('type.BinomialHeap.tree'(sK6)),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 169
% Passive clauses: 594
% Generated clauses: 1700
% Final active clauses: 169
% Final passive clauses: 368
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 37
% Trivial inequalities: 13
% Fw subsumption resolutions: 128
% 
% Simple tautologies: 58
% Equational tautologies: 11
% Forward subsumptions: 837
% 
% Binary resolution: 1071
% Factoring: 200
% Forward superposition: 76
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 43
% Split components: 87
% SAT solver clauses: 80
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 79
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 1151
% Time elapsed: 0.096 s
% ------------------------------
% ------------------------------
% Success in time 0.098 s
