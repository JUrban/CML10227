Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% (142861)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 140
% Passive clauses: 1134
% Generated clauses: 17510
% Final active clauses: 122
% Final passive clauses: 704
% Input formulas: 49
% Initial clauses: 54
% 
% Duplicate literals: 510
% Trivial inequalities: 258
% Fw subsumption resolutions: 1961
% Fw demodulations: 1282
% Bw demodulations: 10
% 
% Simple tautologies: 281
% Equational tautologies: 23
% Forward subsumptions: 11797
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 20
% Forward superposition: 7071
% Backward superposition: 6069
% Self superposition: 240
% Equality factoring: 54
% Equality resolution: 36
% 
% Split clauses: 172
% Split components: 357
% SAT solver clauses: 482
% SAT solver unit clauses: 47
% SAT solver binary clauses: 198
% 
% Sat splits: 172
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 480
% TWLsolver calls for satisfiability: 100
% 
% Memory used [KB]: 13944
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvlProps
% (142897)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 113
% Passive clauses: 424
% Generated clauses: 18337
% Final active clauses: 108
% Final passive clauses: 302
% Input formulas: 49
% Initial clauses: 54
% 
% Duplicate literals: 764
% Trivial inequalities: 197
% Fw subsumption resolutions: 1422
% Fw demodulations: 1146
% Bw demodulations: 6
% Condensations: 2457
% 
% Simple tautologies: 259
% Equational tautologies: 25
% Forward subsumptions: 10830
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 15
% Forward superposition: 6306
% Backward superposition: 5231
% Self superposition: 211
% Equality factoring: 64
% Equality resolution: 33
% 
% Split clauses: 55
% Split components: 110
% SAT solver clauses: 726
% SAT solver unit clauses: 96
% SAT solver binary clauses: 47
% 
% Sat splits: 55
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 726
% TWLsolver calls for satisfiability: 173
% 
% Memory used [KB]: 16119
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f190197,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f190151])).
fof(f190151,plain,(
  s('type.ffi.ffi_state'(sK0),sK2) != s('type.ffi.ffi_state'(sK0),sK2)),
  inference(superposition,[],[f149,f189226])).
fof(f189226,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ffi.ffi_state'(X4),X7) = s('type.ffi.ffi_state'(X4),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X4),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X4),X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X6),s('type.num.num',X5)))))) )),
  inference(backward_demodulation,[],[f188812,f21017])).
fof(f21017,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ffi.ffi_state'(X4),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X4),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X4),X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X6),s('type.num.num',X5))))) = s('type.ffi.ffi_state'(X4),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X4),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X6))),s('type.bvlSem.state'(X4),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X4),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X7))),s('type.bvlSem.state'(X4),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X4),'const.bool.ARB_0')))))))))))) )),
  inference(superposition,[],[f164,f208])).
fof(f208,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f207,f201])).
fof(f201,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),X2))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),X2))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),X2))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X14,X12] : ! [X13,X15,X8] : s('type.bvlSem.state'(X14),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X15),s('type.bvlSem.state'(X14),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X12),'type.ffi.ffi_state'(X14)),X8),s('type.bvlSem.state'(X12),X13))))) = s('type.bvlSem.state'(X14),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X12),'type.ffi.ffi_state'(X14)),X8),s('type.bvlSem.state'(X12),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X15),s('type.bvlSem.state'(X12),X13)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.bvlSem_88_prove_ltb')).
fof(f207,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(backward_demodulation,[],[f202,f205])).
fof(f205,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f204,f189])).
fof(f189,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),X1))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3] : s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),X1))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),X1))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X12] : ! [X13,X15,X8] : s('type.bvlSem.state'(X12),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X15),s('type.bvlSem.state'(X12),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X8),s('type.bvlSem.state'(X12),X13))))) = s('type.bvlSem.state'(X12),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X8),s('type.bvlSem.state'(X12),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X15),s('type.bvlSem.state'(X12),X13)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.bvlSem_83_prove_ltb')).
fof(f204,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f190,f188])).
fof(f188,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2,X3] : s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X12] : ! [X13,X15,X8] : s('type.bvlSem.state'(X12),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X8),s('type.bvlSem.state'(X12),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X15),s('type.bvlSem.state'(X12),X13))))) = s('type.bvlSem.state'(X12),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X15),s('type.bvlSem.state'(X12),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X8),s('type.bvlSem.state'(X12),X13)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.bvlSem_79_prove_ltb')).
fof(f190,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3] : s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2),s('type.num.num',X3))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X2))),s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X0),'const.bool.ARB_0')))))))))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X6] : ! [X16,X17,X7] : s('type.bvlSem.state'(X6),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X16),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X17),s('type.num.num',X7))) = s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvlSem.state'(X6),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X16))),s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X17))),s('type.bvlSem.state'(X6),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.list.NIL_0'))),s('type.bvlSem.state'(X6),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvlSem.state'(X6),'const.bool.ARB_0')))))))))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.initial_state_def')).
fof(f202,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),X2))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),X2))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),X2))))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X14,X12] : ! [X13,X15,X8] : s('type.bvlSem.state'(X14),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X15),s('type.bvlSem.state'(X14),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X12),'type.ffi.ffi_state'(X14)),X8),s('type.bvlSem.state'(X12),X13))))) = s('type.bvlSem.state'(X14),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X12),'type.ffi.ffi_state'(X14)),X8),s('type.bvlSem.state'(X12),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X15),s('type.bvlSem.state'(X12),X13)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.bvlSem_86_prove_ltb')).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X12] : ! [X13,X8] : s('type.ffi.ffi_state'(X12),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X12),X13))) = s('type.ffi.ffi_state'(X12),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X12),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.state'(X12),X13)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.bvlSem_64_prove_ltb')).
fof(f188812,plain,(
  ( ! [X494,X496,X498,X493,X495,X497] : (s('type.ffi.ffi_state'(X493),X495) = s('type.ffi.ffi_state'(X493),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X493),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X496),s('type.bvlSem.state'(X493),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X497),s('type.bvlSem.state'(X493),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X494),'type.ffi.ffi_state'(X493)),'const.combin.K_1'(s('type.ffi.ffi_state'(X493),X495))),s('type.bvlSem.state'(X494),X498)))))))))) )),
  inference(superposition,[],[f8443,f17584])).
fof(f17584,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.bvlSem.state'(X12),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X17),s('type.bvlSem.state'(X12),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X15),s('type.bvlSem.state'(X12),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X13),'type.ffi.ffi_state'(X12)),X14),s('type.bvlSem.state'(X13),X16))))))) = s('type.bvlSem.state'(X12),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X13),'type.ffi.ffi_state'(X12)),X14),s('type.bvlSem.state'(X13),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X17),s('type.bvlSem.state'(X13),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X15),s('type.bvlSem.state'(X13),X16)))))))) )),
  inference(superposition,[],[f202,f201])).
fof(f8443,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ffi.ffi_state'(X4),X6) = s('type.ffi.ffi_state'(X4),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X6))),s('type.bvlSem.state'(X5),X7)))))) )),
  inference(superposition,[],[f197,f206])).
fof(f206,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f192,f191])).
fof(f191,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X18,X6] : ! [X10,X19] : s(X6,X10) = s(X6,'const.combin.K_2'(s(X6,X10),s(X18,X19)))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.combin.K_THM')).
fof(f192,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6,X18] : ! [X20,X21] : s(X6,'const.combin.K_2'(s(X6,X20),s(X18,X21))) = s(X6,happ(s(fun(X18,X6),'const.combin.K_1'(s(X6,X20))),s(X18,X21)))),
  file('thm.bvlProps.initial_state_simp|split|1','ARITY_1_2_const.combin.K')).
fof(f197,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2,X3] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X14,X12] : ! [X13,X8] : s('type.ffi.ffi_state'(X14),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X14),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X12),'type.ffi.ffi_state'(X14)),X8),s('type.bvlSem.state'(X12),X13))))) = s('type.ffi.ffi_state'(X14),happ(s(fun('type.ffi.ffi_state'(X12),'type.ffi.ffi_state'(X14)),X8),s('type.ffi.ffi_state'(X12),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X12),X13)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlSem.bvlSem_7|48|_prove_ltb')).
fof(f149,plain,(
  s('type.ffi.ffi_state'(sK0),sK2) != s('type.ffi.ffi_state'(sK0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK3),s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  s('type.ffi.ffi_state'(sK0),sK2) != s('type.ffi.ffi_state'(sK0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK3),s('type.num.num',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f140])).
fof(f140,plain,(
  ? [X0,X1,X2,X3] : s('type.ffi.ffi_state'(X0),X2) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X3),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f52])).
fof(f52,plain,(
  ~! [X0,X1,X2,X3] : s('type.ffi.ffi_state'(X0),X2) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X3),s('type.num.num',X1)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.ffi.ffi_state'(X0),X2) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X3),s('type.num.num',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.ffi.ffi_state'(X6),X8) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X8),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X9),s('type.num.num',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.ffi.ffi_state'(X6),X8) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),'const.bvlSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X8),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X9),s('type.num.num',X7)))))),
  file('thm.bvlProps.initial_state_simp|split|1','thm.bvlProps.initial_state_simp|split|1')).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 614
% Passive clauses: 5625
% Generated clauses: 192301
% Final active clauses: 252
% Final passive clauses: 1962
% Input formulas: 49
% Initial clauses: 54
% Discarded non-redundant clauses: 103
% 
% Duplicate literals: 5691
% Trivial inequalities: 1351
% Fw subsumption resolutions: 16022
% Fw demodulations: 21672
% Bw demodulations: 2594
% Condensations: 18555
% Global subsumptions: 136
% 
% Simple tautologies: 1599
% Equational tautologies: 713
% Forward subsumptions: 120228
% Fw demodulations to eq. taut.: 197
% Bw demodulations to eq. taut.: 74
% 
% Unit resulting resolution: 5019
% Forward superposition: 58320
% Backward superposition: 57611
% Self superposition: 1044
% Equality factoring: 284
% Equality resolution: 137
% 
% Split clauses: 288
% Split components: 593
% SAT solver clauses: 6557
% SAT solver unit clauses: 1927
% SAT solver binary clauses: 389
% 
% Sat splits: 288
% Sat splitting refutations: 218
% 
% Memory used [KB]: 148270
% Time elapsed: 7.451 s
% ------------------------------
% ------------------------------
% Success in time 8.79 s
