Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f4034,plain,(
  $false),
  inference(subsumption_resolution,[],[f4033,f61])).
fof(f61,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  inference(flattening,[],[f6])).
fof(f6,negated_conjecture,(
  ~s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  file('thm.clos_knownProof.elist_globals_thm|split|0','thm.clos_knownProof.elist_globals_thm|split|0')).
fof(f4033,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  inference(forward_demodulation,[],[f4023,f89])).
fof(f89,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.list.FOLDR_3'(s(fun(X0,fun(X1,X1)),X2),s(X1,X3),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.list.FOLDR_3'(s(fun(X0,fun(X1,X1)),X2),s(X1,X3),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.list.FOLDR_3'(s(fun(X0,fun(X1,X1)),X2),s(X1,X3),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6,X13] : ! [X14,X16] : s(X13,X16) = s(X13,'const.list.FOLDR_3'(s(fun(X6,fun(X13,X13)),X14),s(X13,X16),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.clos_knownProof.elist_globals_thm|split|0','thm.list.FOLDR|split|0')).
fof(f4023,plain,(
  s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.NIL_0')))),
  inference(superposition,[],[f66,f88])).
fof(f88,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X13] : ! [X14] : s('type.list.list'(X13),'const.list.NIL_0') = s('type.list.list'(X13),'const.list.MAP_2'(s(fun(X6,X13),X14),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.clos_knownProof.elist_globals_thm|split|0','thm.list.MAP|split|0')).
fof(f66,plain,(
  ( ! [X0] : (s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X0))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X0)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X0))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X12] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X12))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X12)))))),
  file('thm.clos_knownProof.elist_globals_thm|split|0','thm.clos_knownProof.elist_globals_def')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 32
% Passive clauses: 677
% Generated clauses: 3806
% Final active clauses: 31
% Final passive clauses: 624
% Input formulas: 20
% Initial clauses: 32
% 
% Duplicate literals: 416
% Trivial inequalities: 55
% Fw subsumption resolutions: 225
% Fw demodulations: 37
% 
% Simple tautologies: 135
% Equational tautologies: 84
% Forward subsumptions: 1550
% 
% Binary resolution: 15
% Forward superposition: 1263
% Backward superposition: 1258
% Self superposition: 248
% Equality factoring: 216
% Equality resolution: 6
% 
% Split clauses: 198
% Split components: 402
% SAT solver clauses: 639
% SAT solver unit clauses: 346
% SAT solver binary clauses: 140
% 
% Sat splits: 198
% 
% TWLsolver clauses: 635
% TWLsolver calls for satisfiability: 24
% 
% Memory used [KB]: 2174
% Time elapsed: 0.110 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
