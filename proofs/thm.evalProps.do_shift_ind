Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% (88374)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 142
% Passive clauses: 2543
% Generated clauses: 16555
% Final active clauses: 140
% Final passive clauses: 2090
% Input formulas: 21
% Initial clauses: 54
% 
% Duplicate literals: 504
% Trivial inequalities: 203
% Fw subsumption resolutions: 2777
% Fw demodulations: 2461
% Bw demodulations: 1
% 
% Simple tautologies: 271
% Equational tautologies: 61
% Forward subsumptions: 7450
% 
% Binary resolution: 126
% Factoring: 1
% Forward superposition: 4712
% Backward superposition: 5215
% Self superposition: 319
% Equality factoring: 162
% Equality resolution: 30
% 
% Split clauses: 218
% Split components: 451
% SAT solver clauses: 564
% SAT solver unit clauses: 11
% SAT solver binary clauses: 70
% 
% Sat splits: 218
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 561
% TWLsolver calls for satisfiability: 134
% 
% Memory used [KB]: 14072
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.evalProps
% (88385)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 158
% Passive clauses: 1481
% Generated clauses: 10435
% Final active clauses: 125
% Final passive clauses: 994
% Input formulas: 21
% Initial clauses: 54
% 
% Duplicate literals: 222
% Trivial inequalities: 47
% Fw subsumption resolutions: 442
% Fw demodulations: 683
% Bw demodulations: 345
% Condensations: 387
% 
% Simple tautologies: 72
% Equational tautologies: 35
% Forward subsumptions: 4741
% Bw demodulations to eq. taut.: 14
% 
% Binary resolution: 164
% Factoring: 3
% Forward superposition: 2723
% Backward superposition: 3411
% Self superposition: 289
% Equality factoring: 62
% Equality resolution: 7
% 
% Split clauses: 16
% Split components: 32
% SAT solver clauses: 2282
% SAT solver unit clauses: 67
% SAT solver binary clauses: 52
% 
% Sat splits: 16
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 2282
% TWLsolver calls for satisfiability: 1808
% 
% Memory used [KB]: 19701
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f12089,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f199,f202,f200,f256,f262,f1028,f1029,f1056,f1054,f1030,f1031,f1057,f260,f1160,f7364,f7333,f7505,f7327,f7326,f7325,f7324,f7323,f7314,f7456,f7312,f7506,f7311,f7507,f7310,f7508,f7309,f7509,f7244,f7820,f7238,f7823,f7237,f7824,f7236,f7825,f7233,f7826,f7232,f7827,f7231,f7828,f7230,f7829,f7229,f7830,f7228,f7831,f7227,f7832,f7226,f7833,f8047,f8049,f8050,f8058,f10170,f10195,f10169,f10196,f7457,f11044,f11046,f11050,f11054,f11067,f11074,f11076,f11079,f11121,f11124,f11125,f11126,f11128,f11129,f11132,f11134,f11146,f11987,f11992,f11996,f12014,f12016,f12019,f12058,f12061,f12062,f12063,f12065,f12068,f12070])).
fof(f12070,plain,(
  $false | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f11991,f90])).
fof(f90,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.evalProps.do_shift_ind',aHL_TRUTH)).
fof(f11991,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f11179,f11573,f131])).
fof(f131,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X20,X21] : ((p(s(bool,X20)) => p(s(bool,X21))) => ((p(s(bool,X21)) => p(s(bool,X20))) => s(bool,X20) = s(bool,X21)))),
  file('thm.evalProps.do_shift_ind','thm.bool.IMP_ANTISYM_AX')).
fof(f11573,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2))))) )),
  inference(subsumption_resolution,[],[f11572,f90])).
fof(f11572,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2))))) )),
  inference(forward_demodulation,[],[f11571,f1948])).
fof(f1948,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size',X2))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X3)))))) )),
  inference(backward_demodulation,[],[f1785,f721])).
fof(f721,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size',X2))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X3)))))) )),
  inference(unit_resulting_resolution,[],[f142,f118])).
fof(f118,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X55] : (s(bool,'T_0') = s(bool,X55) <=> p(s(bool,X55)))),
  file('thm.evalProps.do_shift_ind','thm.bool.EQ_CLAUSES|split|1')).
fof(f142,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X19))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X20),s('type.ast.word_size',X21))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X22))))))) )),
  inference(backward_demodulation,[],[f135,f84])).
fof(f84,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X19))),s('type.num.num',X20))),s('type.ast.word_size',X21))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X22))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X26,X27,X28] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X26))),s('type.num.num',X27))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X28)))))) & ! [X23,X24,X25] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X23))),s('type.num.num',X24))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25)))))) & ! [X19,X20,X21,X22] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X19))),s('type.num.num',X20))),s('type.ast.word_size',X21))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X22)))))) & ! [X15,X16,X17,X18] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X15))),s('type.num.num',X16))),s('type.ast.word_size',X17))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X18)))))) & ! [X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X11))),s('type.num.num',X12))),s('type.ast.word_size',X13))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X8))),s('type.num.num',X9))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10)))))) & ! [X5,X6,X7] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X5))),s('type.num.num',X6))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7)))))) & ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.num.num',sK3))),s('type.ast.word_size',sK4))),s('type.ast.lit',sK5))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f64])).
fof(f64,plain,(
  ? [X0] : (! [X26,X27,X28] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X26))),s('type.num.num',X27))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X28)))))) & ! [X23,X24,X25] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X23))),s('type.num.num',X24))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25)))))) & ! [X19,X20,X21,X22] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X19))),s('type.num.num',X20))),s('type.ast.word_size',X21))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X22)))))) & ! [X15,X16,X17,X18] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X15))),s('type.num.num',X16))),s('type.ast.word_size',X17))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X18)))))) & ! [X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X11))),s('type.num.num',X12))),s('type.ast.word_size',X13))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X8))),s('type.num.num',X9))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10)))))) & ! [X5,X6,X7] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X5))),s('type.num.num',X6))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7)))))) & ? [X1,X2,X3,X4] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X1))),s('type.num.num',X2))),s('type.ast.word_size',X3))),s('type.ast.lit',X4)))))),
  inference(rectify,[],[f51])).
fof(f51,plain,(
  ? [X0] : (! [X22,X23,X24] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X22))),s('type.num.num',X23))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X24)))))) & ! [X19,X20,X21] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X19))),s('type.num.num',X20))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X21)))))) & ! [X15,X16,X17,X18] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X15))),s('type.num.num',X16))),s('type.ast.word_size',X17))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X18)))))) & ! [X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X11))),s('type.num.num',X12))),s('type.ast.word_size',X13))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X14)))))) & ! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size',X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X4))),s('type.num.num',X5))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X1))),s('type.num.num',X2))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) & ? [X25,X26,X27,X28] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X25))),s('type.num.num',X26))),s('type.ast.word_size',X27))),s('type.ast.lit',X28)))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ? [X0] : ((! [X22,X23,X24] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X22))),s('type.num.num',X23))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X24)))))) & ! [X19,X20,X21] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X19))),s('type.num.num',X20))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X21)))))) & ! [X15,X16,X17,X18] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X15))),s('type.num.num',X16))),s('type.ast.word_size',X17))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X18)))))) & ! [X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X11))),s('type.num.num',X12))),s('type.ast.word_size',X13))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X14)))))) & ! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size',X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X4))),s('type.num.num',X5))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X1))),s('type.num.num',X2))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3))))))) & ? [X25,X26,X27,X28] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X25))),s('type.num.num',X26))),s('type.ast.word_size',X27))),s('type.ast.lit',X28)))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ((! [X22,X23,X24] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X22))),s('type.num.num',X23))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X24)))))) & ! [X19,X20,X21] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X19))),s('type.num.num',X20))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X21)))))) & ! [X15,X16,X17,X18] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X15))),s('type.num.num',X16))),s('type.ast.word_size',X17))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X18)))))) & ! [X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X11))),s('type.num.num',X12))),s('type.ast.word_size',X13))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X14)))))) & ! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size',X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X4))),s('type.num.num',X5))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X1))),s('type.num.num',X2))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3))))))) => ! [X25,X26,X27,X28] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X0),s('type.ast.shift',X25))),s('type.num.num',X26))),s('type.ast.word_size',X27))),s('type.ast.lit',X28)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X9)))))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9)))))) & ! [X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X13)))))) & ! [X10,X11,X12,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X14)))))) & ! [X10,X11,X12,X15] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X15)))))) & ! [X10,X11,X16] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X16)))))) & ! [X10,X11,X17] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X17))))))) => ! [X18,X11,X12,X19] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X18))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit',X19)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X9)))))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X7))),s('type.num.num',X8))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9)))))) & ! [X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X13)))))) & ! [X10,X11,X12,X14] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X14)))))) & ! [X10,X11,X12,X15] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X15)))))) & ! [X10,X11,X16] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X16)))))) & ! [X10,X11,X17] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X10))),s('type.num.num',X11))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X17))))))) => ! [X18,X11,X12,X19] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),X6),s('type.ast.shift',X18))),s('type.num.num',X11))),s('type.ast.word_size',X12))),s('type.ast.lit',X19)))))),
  file('thm.evalProps.do_shift_ind','thm.evalProps.do_shift_ind')).
fof(f135,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X43,X44,X45] : ! [X48,X49,X50] : s(X43,happ(s(fun(X45,X43),happ(s(fun(X44,fun(X45,X43)),X48),s(X44,X49))),s(X45,X50))) = s(X43,'const.pair.UNCURRY_2'(s(fun(X44,fun(X45,X43)),X48),s('type.pair.prod'(X44,X45),'const.pair.,_2'(s(X44,X49),s(X45,X50)))))),
  file('thm.evalProps.do_shift_ind','thm.pair.UNCURRY_DEF')).
fof(f1785,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun(X0,X1),'const.pair.UNCURRY_2'(s(fun(X3,fun(X2,fun(X0,X1))),X4),s('type.pair.prod'(X3,X2),'const.pair.,_2'(s(X3,X5),s(X2,X6))))),s(X0,X7))) = s(X1,'const.pair.UNCURRY_2'(s(fun(X2,fun(X0,X1)),happ(s(fun(X3,fun(X2,fun(X0,X1))),X4),s(X3,X5))),s('type.pair.prod'(X2,X0),'const.pair.,_2'(s(X2,X6),s(X0,X7)))))) )),
  inference(superposition,[],[f135,f135])).
fof(f11571,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(subsumption_resolution,[],[f11570,f90])).
fof(f11570,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(forward_demodulation,[],[f11569,f1949])).
fof(f1949,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size',X2))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X3)))))) )),
  inference(backward_demodulation,[],[f1785,f815])).
fof(f815,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size',X2))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X3)))))) )),
  inference(unit_resulting_resolution,[],[f143,f118])).
fof(f143,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X15))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X16),s('type.ast.word_size',X17))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X18))))))) )),
  inference(backward_demodulation,[],[f135,f85])).
fof(f85,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X15))),s('type.num.num',X16))),s('type.ast.word_size',X17))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X18))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f11569,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(subsumption_resolution,[],[f11568,f90])).
fof(f11568,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(forward_demodulation,[],[f11567,f1950])).
fof(f1950,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size',X2))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3)))))) )),
  inference(backward_demodulation,[],[f1785,f909])).
fof(f909,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size',X2))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3)))))) )),
  inference(unit_resulting_resolution,[],[f144,f118])).
fof(f144,plain,(
  ( ! [X14,X12,X13,X11] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X11))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X12),s('type.ast.word_size',X13))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))))))) )),
  inference(backward_demodulation,[],[f135,f86])).
fof(f86,plain,(
  ( ! [X14,X12,X13,X11] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X11))),s('type.num.num',X12))),s('type.ast.word_size',X13))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f11567,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(subsumption_resolution,[],[f11566,f90])).
fof(f11566,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(forward_demodulation,[],[f11565,f1956])).
fof(f1956,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(backward_demodulation,[],[f1785,f1089])).
fof(f1089,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(unit_resulting_resolution,[],[f141,f118])).
fof(f141,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X8))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X9),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))))) )),
  inference(backward_demodulation,[],[f135,f87])).
fof(f87,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X8))),s('type.num.num',X9))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f11565,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(subsumption_resolution,[],[f11502,f90])).
fof(f11502,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0')))))))))) )),
  inference(superposition,[],[f96,f1955])).
fof(f1955,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(backward_demodulation,[],[f1785,f1349])).
fof(f1349,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(unit_resulting_resolution,[],[f140,f118])).
fof(f140,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X23))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X24),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25))))))) )),
  inference(backward_demodulation,[],[f135,f83])).
fof(f83,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X23))),s('type.num.num',X24))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f96,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit',X1)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X0)))))))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X0))))))) | ! [X1] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15])],[f67])).
fof(f67,plain,(
  ! [X0] : (? [X6] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X6)))))) | ? [X5] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X5)))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X4)))))) | ? [X3] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3)))))) | ? [X2] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) | ! [X1] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit',X1)))))),
  inference(rectify,[],[f53])).
fof(f53,plain,(
  ! [X0] : (? [X5] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X5)))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X4)))))) | ? [X3] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3)))))) | ? [X2] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) | ? [X1] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) | ! [X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit',X6)))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ((? [X5] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X5)))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X4)))))) | ? [X3] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3)))))) | ? [X2] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) | ? [X1] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))))))) | ! [X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit',X6)))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : ((! [X5] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X5)))))) & ! [X4] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X4)))))) & ! [X3] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3)))))) & ! [X2] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) & ! [X1] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))))))) => ! [X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),X0),s('type.ast.lit',X6)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ((! [X39] : p(s(bool,happ(s(fun('type.ast.lit',bool),X6),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X39)))))) & ! [X40] : p(s(bool,happ(s(fun('type.ast.lit',bool),X6),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X40)))))) & ! [X41] : p(s(bool,happ(s(fun('type.ast.lit',bool),X6),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X41)))))) & ! [X40] : p(s(bool,happ(s(fun('type.ast.lit',bool),X6),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X40)))))) & ! [X40] : p(s(bool,happ(s(fun('type.ast.lit',bool),X6),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))))))) => ! [X42] : p(s(bool,happ(s(fun('type.ast.lit',bool),X6),s('type.ast.lit',X42)))))),
  file('thm.evalProps.do_shift_ind','thm.ast.lit_induction')).
fof(f11179,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | ($spl3 | $spl5)),
  inference(backward_demodulation,[],[f11163,f8100])).
fof(f8100,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',sK4))),s('type.ast.lit',sK5)))),
  inference(forward_demodulation,[],[f255,f1785])).
fof(f255,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',sK4))))),s('type.ast.lit',sK5)))),
  inference(unit_resulting_resolution,[],[f137,f117])).
fof(f117,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f137,plain,(
  ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',sK4))))),s('type.ast.lit',sK5))))),
  inference(backward_demodulation,[],[f135,f89])).
fof(f89,plain,(
  ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.num.num',sK3))),s('type.ast.word_size',sK4))),s('type.ast.lit',sK5))))),
  inference(cnf_transformation,[],[f65])).
fof(f11163,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK4) | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f202,f259,f196])).
fof(f196,plain,(
  ( ! [X0,X1] : (s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f94,f94])).
fof(f94,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X54] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X54) | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X54))),
  file('thm.evalProps.do_shift_ind','thm.ast.word_size_nchotomy')).
fof(f259,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK4) | $spl5),
  inference(cnf_transformation,[],[f259_D])).
fof(f259_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK4) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f12068,plain,(
  $false | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f11995,f90])).
fof(f11995,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f11179,f11573,f131])).
fof(f12065,plain,(
  $false | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f12064,f164])).
fof(f164,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f91,f117])).
fof(f91,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.evalProps.do_shift_ind',aHL_FALSITY)).
fof(f12064,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl5)),
  inference(backward_demodulation,[],[f12008,f11240])).
fof(f11240,plain,(
  s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f135,f11179,f8862])).
fof(f8862,plain,(
  ( ! [X33,X31] : (s(bool,X31) != s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f8861,f90])).
fof(f8861,plain,(
  ( ! [X33,X31] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,X31)) )),
  inference(forward_demodulation,[],[f8697,f166])).
fof(f166,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(unit_resulting_resolution,[],[f92,f118])).
fof(f92,plain,(
  ( ! [X0] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0'))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0'))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X44] : p(s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),'const.relation.EMPTY_REL_0'))))),
  file('thm.evalProps.do_shift_ind','thm.relation.WF_EMPTY_REL')).
fof(f8697,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.relation.WF_1'(s(fun(X32,fun(X32,bool)),'const.relation.EMPTY_REL_0')))) | s(bool,X31) != s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f177,f8097])).
fof(f8097,plain,(
  ( ! [X169,X168] : (s(bool,X168) = s(bool,'const.relation.WF_1'(s(fun(X169,fun(X169,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'F_0') = s(bool,X168)) )),
  inference(subsumption_resolution,[],[f7126,f90])).
fof(f7126,plain,(
  ( ! [X169,X168] : (~p(s(bool,'T_0')) | s(bool,X168) = s(bool,'const.relation.WF_1'(s(fun(X169,fun(X169,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'F_0') = s(bool,X168)) )),
  inference(superposition,[],[f91,f1474])).
fof(f1474,plain,(
  ( ! [X50,X51,X49] : (s(bool,X50) = s(bool,'const.relation.WF_1'(s(fun(X49,fun(X49,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) )),
  inference(subsumption_resolution,[],[f1447,f90])).
fof(f1447,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | s(bool,X50) = s(bool,'const.relation.WF_1'(s(fun(X49,fun(X49,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f506,f166])).
fof(f506,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f352,f90])).
fof(f352,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f131,f175])).
fof(f175,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f93,f93])).
fof(f93,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.evalProps.do_shift_ind',aHL_BOOL_CASES)).
fof(f177,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f121,f93])).
fof(f121,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X55] : (s(bool,'F_0') = s(bool,X55) <=> ~p(s(bool,X55)))),
  file('thm.evalProps.do_shift_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f12008,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',X2)))))) )),
  inference(unit_resulting_resolution,[],[f135,f11573,f177])).
fof(f12063,plain,(
  $false | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f12011,f164])).
fof(f12011,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f164,f11179,f11573,f506])).
fof(f12062,plain,(
  $false | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f12013,f164])).
fof(f12013,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f164,f11179,f11573,f506])).
fof(f12061,plain,(
  $false | $spl7),
  inference(subsumption_resolution,[],[f12060,f164])).
fof(f12060,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl7),
  inference(backward_demodulation,[],[f12017,f11154])).
fof(f11154,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | $spl7),
  inference(global_subsumption,[],[f89,f88,f87,f86,f85,f84,f83,f82,f90,f92,f93,f94,f95,f97,f106,f105,f104,f103,f102,f101,f100,f99,f98,f118,f117,f131,f128,f132,f133,f134,f135,f137,f138,f139,f141,f142,f143,f144,f164,f166,f175,f177,f196,f199,f211,f241,f255,f254,f256,f262,f284,f506,f507,f533,f702,f721,f730,f763,f808,f815,f824,f857,f902,f909,f918,f951,f996,f1003,f1004,f1028,f1029,f1030,f1031,f1058,f1090,f660,f662,f650,f652,f1089,f714,f701,f700,f664,f654,f163,f140,f116,f115,f114,f113,f112,f111,f110,f109,f108,f107,f1244,f1245,f1308,f1349,f1350,f1389,f1471,f1472,f1473,f1474,f1475,f1542,f1543,f1588,f1590,f1593,f1595,f1597,f1603,f1605,f1607,f1728,f1785,f1934,f1935,f1944,f1945,f1946,f1947,f1948,f1949,f1950,f1955,f1956,f1850,f1856,f1858,f1860,f2097,f2215,f2220,f2267,f2268,f2320,f2321,f2322,f2327,f2374,f2375,f2427,f2428,f2429,f2434,f2482,f2483,f2536,f2537,f2581,f2653,f2708,f2709,f2715,f2788,f2844,f2845,f2924,f2937,f2939,f2941,f2964,f3045,f3129,f3209,f3272,f3273,f3279,f3360,f3666,f3938,f4031,f4032,f4051,f4143,f4144,f4198,f4199,f4200,f4207,f4261,f4262,f4269,f4270,f4322,f4323,f4324,f4331,f4383,f4384,f4552,f4544,f4633,f4794,f5088,f5608,f5995,f6038,f6075,f6153,f6217,f6218,f6236,f6237,f6296,f6297,f6330,f6444,f6507,f6508,f7364,f7333,f7327,f7325,f6684,f6685,f7314,f7311,f7554,f7555,f7244,f7240,f7238,f7237,f7236,f7233,f7232,f7231,f7230,f7229,f7228,f7227,f7226,f7836,f7068,f7221,f7169,f8097,f4467,f655,f657,f7067,f7168,f645,f647,f7066,f7167,f6705,f6652,f4519,f4483,f3933,f1506,f1478,f1476,f6717,f6682,f4540,f4504,f3937,f3032,f2934,f2932,f3918,f3920,f3916,f6295,f1975,f4116,f1939,f1953,f1954,f1951,f1952,f6301,f6303,f6317,f96,f6318,f125,f3910,f3911,f3930,f3906,f6718,f6683,f4541,f4505,f1985,f1853,f1851,f3908,f3934,f3038,f2966,f2547,f2546,f2539,f2538,f1886,f1861,f1703,f1702,f136,f127,f1598,f1600,f7062,f7163,f4684,f4683,f4662,f4063,f4062,f3909,f2936,f1943,f1936,f1855,f1602,f1592,f1480,f659,f649,f122,f121,f91,f8415,f8831,f8832,f8833,f8671,f8672,f8852,f8862,f8877,f8880,f8881,f8882,f8963,f8970,f8971,f8972,f8973,f8975,f8976,f8977,f8978,f8979,f8980,f8981,f8982,f8983,f8984,f8985,f8986,f8987,f8988,f8989,f8990,f9018,f9049,f9070,f9071,f9120,f9151,f9172,f9173,f9318,f9321,f9322,f9323,f9422,f9423,f9424,f9916,f9533,f9536,f9537,f9538,f10097,f10118,f10119,f10170,f10169,f10145,f10166,f10167,f10254,f10312,f10348,f10368,f10369,f10447,f10652,f10692,f10654,f10655,f10693,f10698,f10927,f10928,f10937,f11013,f11022,f11025,f11026,f11077,f11068,f11084,f11085,f11153,f8100,f8101,f8102,f10221])).
fof(f10221,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4)),
  inference(forward_demodulation,[],[f1032,f1785])).
fof(f1032,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4)),
  inference(superposition,[],[f254,f94])).
fof(f8102,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',sK4))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f1058,f1785])).
fof(f8101,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',sK4))),s('type.ast.lit',sK5)))),
  inference(forward_demodulation,[],[f254,f1785])).
fof(f11153,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,X76) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X73),s('type.num.num',X74))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X75))) | s(bool,'F_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f11115,f91])).
fof(f11115,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,'F_0')) | s(bool,X76) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X73),s('type.num.num',X74))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X75))) | s(bool,'F_0') = s(bool,X76)) )),
  inference(superposition,[],[f11022,f8671])).
fof(f11085,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit',X3)))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(superposition,[],[f11022,f196])).
fof(f11084,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X1))))) )),
  inference(superposition,[],[f11022,f132])).
fof(f11068,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',X2)))))) )),
  inference(unit_resulting_resolution,[],[f135,f11022,f177])).
fof(f11077,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) )),
  inference(unit_resulting_resolution,[],[f164,f11022,f8852])).
fof(f11026,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X59) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X56),s('type.num.num',X57))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X58))))) | s(bool,X59) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f10963,f90])).
fof(f10963,plain,(
  ( ! [X59,X57,X60,X58,X56] : (~p(s(bool,'T_0')) | s(bool,X59) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X56),s('type.num.num',X57))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X58))))) | s(bool,X59) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f506,f1946])).
fof(f11025,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,X47) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X44),s('type.num.num',X45))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X46))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f10960,f90])).
fof(f10960,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'T_0')) | s(bool,X47) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X44),s('type.num.num',X45))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X46))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f177,f1946])).
fof(f11022,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2))))) )),
  inference(subsumption_resolution,[],[f11021,f90])).
fof(f11021,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2))))) )),
  inference(forward_demodulation,[],[f11020,f1948])).
fof(f11020,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(subsumption_resolution,[],[f11019,f90])).
fof(f11019,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(forward_demodulation,[],[f11018,f1949])).
fof(f11018,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(subsumption_resolution,[],[f11017,f90])).
fof(f11017,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(forward_demodulation,[],[f11016,f1950])).
fof(f11016,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(subsumption_resolution,[],[f11015,f90])).
fof(f11015,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(forward_demodulation,[],[f11014,f1947])).
fof(f11014,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(subsumption_resolution,[],[f10949,f90])).
fof(f10949,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X2)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0')))))))))) )),
  inference(superposition,[],[f96,f1946])).
fof(f11013,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X45) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X42),s('type.num.num',X43))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X44))))) | s(bool,'F_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f10945,f164])).
fof(f10945,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X45) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X42),s('type.num.num',X43))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X44))))) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f1946,f8671])).
fof(f10937,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',X0))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK9(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK8(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK7(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK6(X0))))) )),
  inference(superposition,[],[f1946,f95])).
fof(f10928,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(superposition,[],[f1946,f196])).
fof(f10927,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) )),
  inference(superposition,[],[f1946,f132])).
fof(f10698,plain,(
  ( ! [X61,X59,X57,X62,X60] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X57)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X57)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X57)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X57)))))),s('type.ast.lit',sK57(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X57)))))),s('type.ast.lit',sK54(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X57)))))),s('type.ast.lit',sK51(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X57)))))),s('type.ast.lit',sK48(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X57)))))),s('type.ast.lit',sK45(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X57)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X57)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X57)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X57)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X57)))))),s('type.ast.lit',sK30(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X57)))))),s('type.ast.lit',sK27(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X57)))))),s('type.ast.lit',sK24(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X57)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X57)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X57))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X59),s('type.ast.word_size',X60))))),s('type.ast.lit',X61))),s('type.ast.lit',X62)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X57)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X57))))))) )),
  inference(subsumption_resolution,[],[f10697,f90])).
fof(f10697,plain,(
  ( ! [X61,X59,X57,X62,X60] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X57)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X57)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X57)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X57)))))),s('type.ast.lit',sK57(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X57)))))),s('type.ast.lit',sK54(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X57)))))),s('type.ast.lit',sK51(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X57)))))),s('type.ast.lit',sK48(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X57)))))),s('type.ast.lit',sK45(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X57)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X57)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X57)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X57)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X57)))))),s('type.ast.lit',sK30(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X57)))))),s('type.ast.lit',sK27(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X57)))))),s('type.ast.lit',sK24(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X57)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X57)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X57))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X59),s('type.ast.word_size',X60))))),s('type.ast.lit',X61))),s('type.ast.lit',X62)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X57)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X57))))))) )),
  inference(forward_demodulation,[],[f10670,f166])).
fof(f10670,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.relation.WF_1'(s(fun(X58,fun(X58,bool)),'const.relation.EMPTY_REL_0')))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X57)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X57)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X57)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X57)))))),s('type.ast.lit',sK57(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X57)))))),s('type.ast.lit',sK54(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X57)))))),s('type.ast.lit',sK51(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X57)))))),s('type.ast.lit',sK48(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X57)))))),s('type.ast.lit',sK45(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X57)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X57)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X57)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X57)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X57)))))),s('type.ast.lit',sK30(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X57)))))),s('type.ast.lit',sK27(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X57)))))),s('type.ast.lit',sK24(X57))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X57)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X57))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X57)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X57)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X57))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X59),s('type.ast.word_size',X60))))),s('type.ast.lit',X61))),s('type.ast.lit',X62)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X57),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X57)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X57)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X57))))))) )),
  inference(superposition,[],[f1975,f8097])).
fof(f10693,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X5)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X5)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X5)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X5)))))),s('type.ast.lit',sK57(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X5)))))),s('type.ast.lit',sK54(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X5)))))),s('type.ast.lit',sK51(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X5)))))),s('type.ast.lit',sK48(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X5)))))),s('type.ast.lit',sK45(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X5)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X5)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X5)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X5)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X5)))))),s('type.ast.lit',sK30(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X5)))))),s('type.ast.lit',sK27(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X5)))))),s('type.ast.lit',sK24(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X5)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X5)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X5))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X6),s('type.ast.word_size',X7))))),s('type.ast.lit',X8))),s('type.ast.lit',X9)))) | s(bool,X10) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X5)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X5)))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f10662,f90])).
fof(f10662,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X5)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X5)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X5)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X5)))))),s('type.ast.lit',sK57(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X5)))))),s('type.ast.lit',sK54(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X5)))))),s('type.ast.lit',sK51(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X5)))))),s('type.ast.lit',sK48(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X5)))))),s('type.ast.lit',sK45(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X5)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X5)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X5)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X5)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X5)))))),s('type.ast.lit',sK30(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X5)))))),s('type.ast.lit',sK27(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X5)))))),s('type.ast.lit',sK24(X5))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X5)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X5))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X5)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X5)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X5))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X6),s('type.ast.word_size',X7))))),s('type.ast.lit',X8))),s('type.ast.lit',X9)))) | s(bool,X10) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X5),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X5)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X5)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X5)))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f1975,f175])).
fof(f10655,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X1)),s('type.ast.word_size',X0))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X1)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X1)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X1)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X1)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X1)))))),s('type.ast.lit',sK57(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X1)))))),s('type.ast.lit',sK54(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X1)))))),s('type.ast.lit',sK51(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X1)))))),s('type.ast.lit',sK48(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X1)))))),s('type.ast.lit',sK45(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X1)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X1)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X1)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X1)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X1)))))),s('type.ast.lit',sK30(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X1)))))),s('type.ast.lit',sK27(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X1)))))),s('type.ast.lit',sK24(X1))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X1)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X1)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X1))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X1)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X1)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X1))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X1),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X2),s('type.ast.word_size',X3))))),s('type.ast.lit',X4))),s('type.ast.lit',X5)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f1975,f94])).
fof(f10654,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s(X17,X20))),s(X18,X21))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK57('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK54('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK51('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK48('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK45('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK30('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK27('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit',sK24('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21)))))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18('const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X17,fun(X18,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X19),s('type.pair.prod'(X17,X18),'const.pair.,_2'(s(X17,X20),s(X18,X21))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X22),s('type.ast.word_size',X23))))),s('type.ast.lit',X24))),s('type.ast.lit',X25))))) )),
  inference(superposition,[],[f1975,f135])).
fof(f10692,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))))) )),
  inference(forward_demodulation,[],[f10691,f134])).
fof(f10691,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10690,f134])).
fof(f10690,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10689,f134])).
fof(f10689,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10688,f134])).
fof(f10688,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10687,f134])).
fof(f10687,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10686,f134])).
fof(f10686,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10685,f134])).
fof(f10685,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10684,f134])).
fof(f10684,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10683,f134])).
fof(f10683,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10682,f134])).
fof(f10682,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10681,f134])).
fof(f10681,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10680,f134])).
fof(f10680,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10679,f134])).
fof(f10679,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10678,f134])).
fof(f10678,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10677,f134])).
fof(f10677,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10676,f134])).
fof(f10676,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10675,f134])).
fof(f10675,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(forward_demodulation,[],[f10653,f134])).
fof(f10653,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK57(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK54(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK51(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK48(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK45(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK30(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK27(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit',sK24(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),fun('type.pair.prod'(X9,X10),fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),'const.pair.UNCURRY_0'),s(fun(X9,fun(X10,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X11))),s('type.pair.prod'(X9,X10),X12))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X13),s('type.ast.word_size',X14))))),s('type.ast.lit',X15))),s('type.ast.lit',X16))))) )),
  inference(superposition,[],[f1975,f134])).
fof(f10652,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),'const.pair.UNCURRY_2'(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK57(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK54(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK51(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK48(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK45(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK30(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK27(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit',sK24(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),happ(s(fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))))),happ(s(fun(X1,fun(X0,fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))))),X2),s(X1,X3))),s(X0,X4))),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X5),s('type.ast.word_size',X6))))),s('type.ast.lit',X7))),s('type.ast.lit',X8))))) )),
  inference(superposition,[],[f1975,f135])).
fof(f10447,plain,(
  ( ! [X30,X32] : (p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit',X32)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X30))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X30))))))) )),
  inference(subsumption_resolution,[],[f10446,f90])).
fof(f10446,plain,(
  ( ! [X30,X32] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit',X32)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X30))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X30))))))) )),
  inference(forward_demodulation,[],[f10433,f166])).
fof(f10433,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'const.relation.WF_1'(s(fun(X31,fun(X31,bool)),'const.relation.EMPTY_REL_0')))) | p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit',X32)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X30))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X30))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),X30),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X30))))))) )),
  inference(superposition,[],[f96,f8097])).
fof(f10369,plain,(
  ( ! [X167,X165,X163,X166,X164,X162] : (s(bool,'T_0') != s(bool,happ(s(fun(X163,bool),happ(s(fun(X162,fun(X163,bool)),X164),s(X162,X165))),s(X163,X166))) | s(bool,X167) = s(bool,'const.pair.UNCURRY_2'(s(fun(X162,fun(X163,bool)),X164),s('type.pair.prod'(X162,X163),'const.pair.,_2'(s(X162,X165),s(X163,X166))))) | s(bool,'F_0') = s(bool,X167)) )),
  inference(superposition,[],[f9423,f135])).
fof(f10368,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,'T_0') != s(bool,'const.pair.UNCURRY_2'(s(fun(X157,fun(X158,bool)),X159),s('type.pair.prod'(X157,X158),X160))) | s(bool,X161) = s(bool,happ(s(fun('type.pair.prod'(X157,X158),bool),happ(s(fun(fun(X157,fun(X158,bool)),fun('type.pair.prod'(X157,X158),bool)),'const.pair.UNCURRY_0'),s(fun(X157,fun(X158,bool)),X159))),s('type.pair.prod'(X157,X158),X160))) | s(bool,'F_0') = s(bool,X161)) )),
  inference(superposition,[],[f9423,f134])).
fof(f10348,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun(X77,fun(X77,bool)),X78))) | s(bool,X79) = s(bool,happ(s(fun(fun(X77,fun(X77,bool)),bool),'const.relation.WF_0'),s(fun(X77,fun(X77,bool)),X78))) | s(bool,'F_0') = s(bool,X79)) )),
  inference(superposition,[],[f9423,f125])).
fof(f10312,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.relation.WF_1'(s(fun(X4,fun(X4,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f9423,f1474])).
fof(f10254,plain,(
  ( ! [X61,X64,X60,X63] : (~p(s(bool,happ(s(fun(X60,bool),happ(s(fun(X60,fun(X60,bool)),X61),s(X60,X63))),s(X60,sK124(X64,X61,X60))))) | p(s(bool,happ(s(fun(X60,bool),X64),s(X60,X63)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X60,fun(X60,bool)),X61)))) )),
  inference(subsumption_resolution,[],[f10253,f90])).
fof(f10253,plain,(
  ( ! [X61,X64,X60,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X60,bool),happ(s(fun(X60,fun(X60,bool)),X61),s(X60,X63))),s(X60,sK124(X64,X61,X60))))) | p(s(bool,happ(s(fun(X60,bool),X64),s(X60,X63)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X60,fun(X60,bool)),X61)))) )),
  inference(forward_demodulation,[],[f10242,f166])).
fof(f10242,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,'const.relation.WF_1'(s(fun(X62,fun(X62,bool)),'const.relation.EMPTY_REL_0')))) | ~p(s(bool,happ(s(fun(X60,bool),happ(s(fun(X60,fun(X60,bool)),X61),s(X60,X63))),s(X60,sK124(X64,X61,X60))))) | p(s(bool,happ(s(fun(X60,bool),X64),s(X60,X63)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X60,fun(X60,bool)),X61)))) )),
  inference(superposition,[],[f136,f8097])).
fof(f10167,plain,(
  ( ! [X167,X165,X163,X166,X164,X162] : (s(bool,X167) != s(bool,happ(s(fun(X163,bool),happ(s(fun(X162,fun(X163,bool)),X164),s(X162,X165))),s(X163,X166))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X162,fun(X163,bool)),X164),s('type.pair.prod'(X162,X163),'const.pair.,_2'(s(X162,X165),s(X163,X166))))) | s(bool,'F_0') = s(bool,X167)) )),
  inference(superposition,[],[f8862,f135])).
fof(f10166,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,X161) != s(bool,'const.pair.UNCURRY_2'(s(fun(X157,fun(X158,bool)),X159),s('type.pair.prod'(X157,X158),X160))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X157,X158),bool),happ(s(fun(fun(X157,fun(X158,bool)),fun('type.pair.prod'(X157,X158),bool)),'const.pair.UNCURRY_0'),s(fun(X157,fun(X158,bool)),X159))),s('type.pair.prod'(X157,X158),X160))) | s(bool,'F_0') = s(bool,X161)) )),
  inference(superposition,[],[f8862,f134])).
fof(f10145,plain,(
  ( ! [X76,X77,X75] : (s(bool,X77) != s(bool,'const.relation.WF_1'(s(fun(X75,fun(X75,bool)),X76))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X75,fun(X75,bool)),bool),'const.relation.WF_0'),s(fun(X75,fun(X75,bool)),X76))) | s(bool,'F_0') = s(bool,X77)) )),
  inference(superposition,[],[f8862,f125])).
fof(f10119,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (s(bool,X169) != s(bool,happ(s(fun(X165,bool),happ(s(fun(X164,fun(X165,bool)),X166),s(X164,X167))),s(X165,X168))) | s(bool,'T_0') = s(bool,X169) | s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X164,fun(X165,bool)),X166),s('type.pair.prod'(X164,X165),'const.pair.,_2'(s(X164,X167),s(X165,X168)))))) )),
  inference(superposition,[],[f8862,f135])).
fof(f10118,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s(bool,X163) != s(bool,'const.pair.UNCURRY_2'(s(fun(X159,fun(X160,bool)),X161),s('type.pair.prod'(X159,X160),X162))) | s(bool,'T_0') = s(bool,X163) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(X159,X160),bool),happ(s(fun(fun(X159,fun(X160,bool)),fun('type.pair.prod'(X159,X160),bool)),'const.pair.UNCURRY_0'),s(fun(X159,fun(X160,bool)),X161))),s('type.pair.prod'(X159,X160),X162)))) )),
  inference(superposition,[],[f8862,f134])).
fof(f10097,plain,(
  ( ! [X78,X79,X77] : (s(bool,X79) != s(bool,'const.relation.WF_1'(s(fun(X77,fun(X77,bool)),X78))) | s(bool,'T_0') = s(bool,X79) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X77,fun(X77,bool)),bool),'const.relation.WF_0'),s(fun(X77,fun(X77,bool)),X78)))) )),
  inference(superposition,[],[f8862,f125])).
fof(f9538,plain,(
  ( ! [X341,X339,X340,X342] : (s(X341,f(s(bool,'F_0'))) != s(X341,g(s(bool,'F_0'))) | s(fun(bool,X341),X339) = s(fun(bool,X341),X340) | s(bool,X342) = s(bool,sK127(X339,X340,X341,bool)) | s(bool,'F_0') = s(bool,X342)) )),
  inference(superposition,[],[f133,f8671])).
fof(f9537,plain,(
  ( ! [X337,X336,X338] : (s('type.pair.prod'(X337,bool),X336) = s('type.pair.prod'(X337,bool),'const.pair.,_2'(s(X337,sK125(X336,bool,X337)),s(bool,'F_0'))) | s(bool,X338) = s(bool,sK126(X336,bool,X337)) | s(bool,'F_0') = s(bool,X338)) )),
  inference(superposition,[],[f132,f8671])).
fof(f9536,plain,(
  ( ! [X333,X335,X334] : (s('type.pair.prod'(bool,X334),X333) = s('type.pair.prod'(bool,X334),'const.pair.,_2'(s(bool,'F_0'),s(X334,sK126(X333,X334,bool)))) | s(bool,X335) = s(bool,sK125(X333,X334,bool)) | s(bool,'F_0') = s(bool,X335)) )),
  inference(superposition,[],[f132,f8671])).
fof(f9533,plain,(
  ( ! [X313,X315,X316,X314] : (s(bool,'F_0') != s(bool,f(s(X313,sK127(X314,X315,bool,X313)))) | s(fun(X313,bool),X314) = s(fun(X313,bool),X315) | s(bool,X316) = s(bool,g(s(X313,sK127(X314,X315,bool,X313)))) | s(bool,'F_0') = s(bool,X316)) )),
  inference(superposition,[],[f133,f8671])).
fof(f9916,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f9453,f91])).
fof(f9453,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f128,f8671])).
fof(f9424,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X10) != s(bool,X11) | s(bool,'T_0') = s(bool,X12) | s(bool,X11) = s(bool,X12) | s(bool,X10) = s(bool,X13) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f4552,f8671])).
fof(f9423,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f164,f8671])).
fof(f9422,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,X6) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f121,f8671])).
fof(f9323,plain,(
  ( ! [X360,X362,X361,X363] : (s(X362,f(s(bool,X363))) != s(X362,g(s(bool,X363))) | s(fun(bool,X362),X360) = s(fun(bool,X362),X361) | s(bool,'F_0') = s(bool,X363) | s(bool,'F_0') = s(bool,sK127(X360,X361,X362,bool))) )),
  inference(superposition,[],[f133,f8671])).
fof(f9322,plain,(
  ( ! [X358,X357,X359] : (s('type.pair.prod'(X358,bool),X357) = s('type.pair.prod'(X358,bool),'const.pair.,_2'(s(X358,sK125(X357,bool,X358)),s(bool,X359))) | s(bool,'F_0') = s(bool,X359) | s(bool,'F_0') = s(bool,sK126(X357,bool,X358))) )),
  inference(superposition,[],[f132,f8671])).
fof(f9321,plain,(
  ( ! [X356,X354,X355] : (s('type.pair.prod'(bool,X355),X354) = s('type.pair.prod'(bool,X355),'const.pair.,_2'(s(bool,X356),s(X355,sK126(X354,X355,bool)))) | s(bool,'F_0') = s(bool,X356) | s(bool,'F_0') = s(bool,sK125(X354,X355,bool))) )),
  inference(superposition,[],[f132,f8671])).
fof(f9318,plain,(
  ( ! [X333,X335,X334,X336] : (s(bool,X336) != s(bool,f(s(X333,sK127(X334,X335,bool,X333)))) | s(fun(X333,bool),X334) = s(fun(X333,bool),X335) | s(bool,'F_0') = s(bool,X336) | s(bool,'F_0') = s(bool,g(s(X333,sK127(X334,X335,bool,X333))))) )),
  inference(superposition,[],[f133,f8671])).
fof(f9173,plain,(
  ( ! [X154,X152,X151,X149,X153,X150] : (s(bool,'F_0') = s(bool,happ(s(fun(X150,bool),happ(s(fun(X149,fun(X150,bool)),X151),s(X149,X152))),s(X150,X153))) | s(bool,X154) = s(bool,'const.pair.UNCURRY_2'(s(fun(X149,fun(X150,bool)),X151),s('type.pair.prod'(X149,X150),'const.pair.,_2'(s(X149,X152),s(X150,X153))))) | s(bool,'F_0') = s(bool,X154)) )),
  inference(superposition,[],[f8671,f135])).
fof(f9172,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X144,fun(X145,bool)),X146),s('type.pair.prod'(X144,X145),X147))) | s(bool,X148) = s(bool,happ(s(fun('type.pair.prod'(X144,X145),bool),happ(s(fun(fun(X144,fun(X145,bool)),fun('type.pair.prod'(X144,X145),bool)),'const.pair.UNCURRY_0'),s(fun(X144,fun(X145,bool)),X146))),s('type.pair.prod'(X144,X145),X147))) | s(bool,'F_0') = s(bool,X148)) )),
  inference(superposition,[],[f8671,f134])).
fof(f9151,plain,(
  ( ! [X64,X62,X63] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X62,fun(X62,bool)),X63))) | s(bool,X64) = s(bool,happ(s(fun(fun(X62,fun(X62,bool)),bool),'const.relation.WF_0'),s(fun(X62,fun(X62,bool)),X63))) | s(bool,'F_0') = s(bool,X64)) )),
  inference(superposition,[],[f8671,f125])).
fof(f9120,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f8671,f8671])).
fof(f9071,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (s(bool,X169) = s(bool,happ(s(fun(X165,bool),happ(s(fun(X164,fun(X165,bool)),X166),s(X164,X167))),s(X165,X168))) | s(bool,'F_0') = s(bool,X169) | s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X164,fun(X165,bool)),X166),s('type.pair.prod'(X164,X165),'const.pair.,_2'(s(X164,X167),s(X165,X168)))))) )),
  inference(superposition,[],[f8671,f135])).
fof(f9070,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s(bool,X163) = s(bool,'const.pair.UNCURRY_2'(s(fun(X159,fun(X160,bool)),X161),s('type.pair.prod'(X159,X160),X162))) | s(bool,'F_0') = s(bool,X163) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(X159,X160),bool),happ(s(fun(fun(X159,fun(X160,bool)),fun('type.pair.prod'(X159,X160),bool)),'const.pair.UNCURRY_0'),s(fun(X159,fun(X160,bool)),X161))),s('type.pair.prod'(X159,X160),X162)))) )),
  inference(superposition,[],[f8671,f134])).
fof(f9049,plain,(
  ( ! [X78,X79,X77] : (s(bool,X79) = s(bool,'const.relation.WF_1'(s(fun(X77,fun(X77,bool)),X78))) | s(bool,'F_0') = s(bool,X79) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X77,fun(X77,bool)),bool),'const.relation.WF_0'),s(fun(X77,fun(X77,bool)),X78)))) )),
  inference(superposition,[],[f8671,f125])).
fof(f9018,plain,(
  ( ! [X68,X64,X67,X65] : (~p(s(bool,happ(s(fun(X64,bool),X67),s(X64,sK124(X67,X65,X64))))) | p(s(bool,happ(s(fun(X64,bool),X67),s(X64,X68)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X64,fun(X64,bool)),X65)))) )),
  inference(subsumption_resolution,[],[f9017,f90])).
fof(f9017,plain,(
  ( ! [X68,X64,X67,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X64,bool),X67),s(X64,sK124(X67,X65,X64))))) | p(s(bool,happ(s(fun(X64,bool),X67),s(X64,X68)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X64,fun(X64,bool)),X65)))) )),
  inference(forward_demodulation,[],[f9010,f166])).
fof(f9010,plain,(
  ( ! [X68,X66,X64,X67,X65] : (~p(s(bool,'const.relation.WF_1'(s(fun(X66,fun(X66,bool)),'const.relation.EMPTY_REL_0')))) | ~p(s(bool,happ(s(fun(X64,bool),X67),s(X64,sK124(X67,X65,X64))))) | p(s(bool,happ(s(fun(X64,bool),X67),s(X64,X68)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X64,fun(X64,bool)),X65)))) )),
  inference(superposition,[],[f127,f8097])).
fof(f8990,plain,(
  ( ! [X127,X128,X126] : (s(bool,X128) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X126))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X127))))))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f8948,f90])).
fof(f8948,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,'T_0')) | s(bool,X128) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X126))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X127))))))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(superposition,[],[f8852,f6330])).
fof(f8989,plain,(
  ( ! [X125,X123,X124] : (s(bool,X125) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X123))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X124))))))) | s(bool,'F_0') = s(bool,X125)) )),
  inference(subsumption_resolution,[],[f8947,f90])).
fof(f8947,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,'T_0')) | s(bool,X125) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X123))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X124))))))) | s(bool,'F_0') = s(bool,X125)) )),
  inference(superposition,[],[f8852,f6038])).
fof(f8988,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,X122) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X119))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X120),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X121))))))) | s(bool,'F_0') = s(bool,X122)) )),
  inference(subsumption_resolution,[],[f8946,f90])).
fof(f8946,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,'T_0')) | s(bool,X122) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X119))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X120),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X121))))))) | s(bool,'F_0') = s(bool,X122)) )),
  inference(superposition,[],[f8852,f3129])).
fof(f8987,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,X118) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X115))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X116),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X117))))))) | s(bool,'F_0') = s(bool,X118)) )),
  inference(subsumption_resolution,[],[f8945,f90])).
fof(f8945,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'T_0')) | s(bool,X118) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X115))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X116),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X117))))))) | s(bool,'F_0') = s(bool,X118)) )),
  inference(superposition,[],[f8852,f2715])).
fof(f8986,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,X114) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X111))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X112),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X113))))))) | s(bool,'F_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f8944,f90])).
fof(f8944,plain,(
  ( ! [X111,X114,X112,X113] : (~p(s(bool,'T_0')) | s(bool,X114) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X111))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X112),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X113))))))) | s(bool,'F_0') = s(bool,X114)) )),
  inference(superposition,[],[f8852,f2581])).
fof(f8985,plain,(
  ( ! [X109,X110,X108] : (s(bool,X110) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X108))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X109))))) | s(bool,'F_0') = s(bool,X110)) )),
  inference(subsumption_resolution,[],[f8943,f90])).
fof(f8943,plain,(
  ( ! [X109,X110,X108] : (~p(s(bool,'T_0')) | s(bool,X110) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X108))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X109))))) | s(bool,'F_0') = s(bool,X110)) )),
  inference(superposition,[],[f8852,f4269])).
fof(f8984,plain,(
  ( ! [X107,X105,X106] : (s(bool,X107) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X105))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X106))))) | s(bool,'F_0') = s(bool,X107)) )),
  inference(subsumption_resolution,[],[f8942,f90])).
fof(f8942,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,'T_0')) | s(bool,X107) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X105))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X106))))) | s(bool,'F_0') = s(bool,X107)) )),
  inference(superposition,[],[f8852,f4143])).
fof(f8983,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,X104) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X101))),s('type.ast.word_size',X102))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X103))))) | s(bool,'F_0') = s(bool,X104)) )),
  inference(subsumption_resolution,[],[f8941,f90])).
fof(f8941,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,'T_0')) | s(bool,X104) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X101))),s('type.ast.word_size',X102))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X103))))) | s(bool,'F_0') = s(bool,X104)) )),
  inference(superposition,[],[f8852,f2434])).
fof(f8982,plain,(
  ( ! [X99,X97,X100,X98] : (s(bool,X100) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X97))),s('type.ast.word_size',X98))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X99))))) | s(bool,'F_0') = s(bool,X100)) )),
  inference(subsumption_resolution,[],[f8940,f90])).
fof(f8940,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,'T_0')) | s(bool,X100) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X97))),s('type.ast.word_size',X98))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X99))))) | s(bool,'F_0') = s(bool,X100)) )),
  inference(superposition,[],[f8852,f2327])).
fof(f8981,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X96) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X93))),s('type.ast.word_size',X94))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X95))))) | s(bool,'F_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f8939,f90])).
fof(f8939,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'T_0')) | s(bool,X96) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X93))),s('type.ast.word_size',X94))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X95))))) | s(bool,'F_0') = s(bool,X96)) )),
  inference(superposition,[],[f8852,f2220])).
fof(f8980,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X92) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X89))),s('type.ast.word_size',X90))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X91))))) | s(bool,'F_0') = s(bool,X92) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X90)) )),
  inference(subsumption_resolution,[],[f8938,f90])).
fof(f8938,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'T_0')) | s(bool,X92) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X89))),s('type.ast.word_size',X90))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X91))))) | s(bool,'F_0') = s(bool,X92) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X90)) )),
  inference(superposition,[],[f8852,f4331])).
fof(f8979,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,X86) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X82),s('type.num.num',X83))))),s('type.ast.word_size',X84))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X85))))) | s(bool,'F_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f8936,f90])).
fof(f8936,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~p(s(bool,'T_0')) | s(bool,X86) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X82),s('type.num.num',X83))))),s('type.ast.word_size',X84))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X85))))) | s(bool,'F_0') = s(bool,X86)) )),
  inference(superposition,[],[f8852,f1950])).
fof(f8978,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X81) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X77),s('type.num.num',X78))))),s('type.ast.word_size',X79))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X80))))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f8935,f90])).
fof(f8935,plain,(
  ( ! [X80,X78,X81,X79,X77] : (~p(s(bool,'T_0')) | s(bool,X81) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X77),s('type.num.num',X78))))),s('type.ast.word_size',X79))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X80))))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(superposition,[],[f8852,f1949])).
fof(f8977,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,X76) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X72),s('type.num.num',X73))))),s('type.ast.word_size',X74))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X75))))) | s(bool,'F_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f8934,f90])).
fof(f8934,plain,(
  ( ! [X76,X74,X72,X75,X73] : (~p(s(bool,'T_0')) | s(bool,X76) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X72),s('type.num.num',X73))))),s('type.ast.word_size',X74))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X75))))) | s(bool,'F_0') = s(bool,X76)) )),
  inference(superposition,[],[f8852,f1948])).
fof(f8976,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,X71) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X70))))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(subsumption_resolution,[],[f8933,f90])).
fof(f8933,plain,(
  ( ! [X70,X68,X71,X69] : (~p(s(bool,'T_0')) | s(bool,X71) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X70))))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f8852,f1956])).
fof(f8975,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,X67) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X64),s('type.num.num',X65))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X66))))) | s(bool,'F_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f8932,f90])).
fof(f8932,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,'T_0')) | s(bool,X67) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X64),s('type.num.num',X65))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X66))))) | s(bool,'F_0') = s(bool,X67)) )),
  inference(superposition,[],[f8852,f1947])).
fof(f8973,plain,(
  ( ! [X59,X60] : (s(bool,X60) = s(bool,happ(s(fun(fun(X59,fun(X59,bool)),bool),'const.relation.WF_0'),s(fun(X59,fun(X59,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'F_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f8930,f90])).
fof(f8930,plain,(
  ( ! [X59,X60] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,happ(s(fun(fun(X59,fun(X59,bool)),bool),'const.relation.WF_0'),s(fun(X59,fun(X59,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'F_0') = s(bool,X60)) )),
  inference(superposition,[],[f8852,f1475])).
fof(f8972,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,X58) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X55))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X56))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X57))))) | s(bool,'F_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f8929,f90])).
fof(f8929,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | s(bool,X58) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X55))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X56))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X57))))) | s(bool,'F_0') = s(bool,X58)) )),
  inference(superposition,[],[f8852,f951])).
fof(f8971,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X54) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X51))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X52))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X53))))) | s(bool,'F_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f8928,f90])).
fof(f8928,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | s(bool,X54) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X51))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X52))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X53))))) | s(bool,'F_0') = s(bool,X54)) )),
  inference(superposition,[],[f8852,f857])).
fof(f8970,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,X50) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X47))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X48))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X49))))) | s(bool,'F_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f8927,f90])).
fof(f8927,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | s(bool,X50) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X47))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X48))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X49))))) | s(bool,'F_0') = s(bool,X50)) )),
  inference(superposition,[],[f8852,f763])).
fof(f8963,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X28) = s(bool,'const.relation.WF_1'(s(fun(X29,fun(X29,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X26) = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f8920,f90])).
fof(f8920,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X28) = s(bool,'const.relation.WF_1'(s(fun(X29,fun(X29,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X26) = s(bool,X28)) )),
  inference(superposition,[],[f8852,f1474])).
fof(f8882,plain,(
  ( ! [X333,X332,X334] : (s(X334,f(s(bool,'T_0'))) != s(X334,g(s(bool,'T_0'))) | s(fun(bool,X334),X332) = s(fun(bool,X334),X333) | s(bool,'F_0') = s(bool,sK127(X332,X333,X334,bool))) )),
  inference(forward_demodulation,[],[f8766,f166])).
fof(f8766,plain,(
  ( ! [X333,X335,X332,X334] : (s(X334,f(s(bool,'const.relation.WF_1'(s(fun(X335,fun(X335,bool)),'const.relation.EMPTY_REL_0'))))) != s(X334,g(s(bool,'const.relation.WF_1'(s(fun(X335,fun(X335,bool)),'const.relation.EMPTY_REL_0'))))) | s(fun(bool,X334),X332) = s(fun(bool,X334),X333) | s(bool,'F_0') = s(bool,sK127(X332,X333,X334,bool))) )),
  inference(superposition,[],[f133,f8097])).
fof(f8881,plain,(
  ( ! [X329,X330] : (s('type.pair.prod'(X330,bool),X329) = s('type.pair.prod'(X330,bool),'const.pair.,_2'(s(X330,sK125(X329,bool,X330)),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK126(X329,bool,X330))) )),
  inference(forward_demodulation,[],[f8765,f166])).
fof(f8765,plain,(
  ( ! [X329,X331,X330] : (s('type.pair.prod'(X330,bool),X329) = s('type.pair.prod'(X330,bool),'const.pair.,_2'(s(X330,sK125(X329,bool,X330)),s(bool,'const.relation.WF_1'(s(fun(X331,fun(X331,bool)),'const.relation.EMPTY_REL_0'))))) | s(bool,'F_0') = s(bool,sK126(X329,bool,X330))) )),
  inference(superposition,[],[f132,f8097])).
fof(f8880,plain,(
  ( ! [X327,X326] : (s('type.pair.prod'(bool,X327),X326) = s('type.pair.prod'(bool,X327),'const.pair.,_2'(s(bool,'T_0'),s(X327,sK126(X326,X327,bool)))) | s(bool,'F_0') = s(bool,sK125(X326,X327,bool))) )),
  inference(forward_demodulation,[],[f8764,f166])).
fof(f8764,plain,(
  ( ! [X327,X326,X328] : (s('type.pair.prod'(bool,X327),X326) = s('type.pair.prod'(bool,X327),'const.pair.,_2'(s(bool,'const.relation.WF_1'(s(fun(X328,fun(X328,bool)),'const.relation.EMPTY_REL_0'))),s(X327,sK126(X326,X327,bool)))) | s(bool,'F_0') = s(bool,sK125(X326,X327,bool))) )),
  inference(superposition,[],[f132,f8097])).
fof(f8877,plain,(
  ( ! [X306,X305,X307] : (s(bool,'T_0') != s(bool,f(s(X305,sK127(X306,X307,bool,X305)))) | s(fun(X305,bool),X306) = s(fun(X305,bool),X307) | s(bool,'F_0') = s(bool,g(s(X305,sK127(X306,X307,bool,X305))))) )),
  inference(forward_demodulation,[],[f8761,f166])).
fof(f8761,plain,(
  ( ! [X308,X306,X305,X307] : (s(bool,'const.relation.WF_1'(s(fun(X308,fun(X308,bool)),'const.relation.EMPTY_REL_0'))) != s(bool,f(s(X305,sK127(X306,X307,bool,X305)))) | s(fun(X305,bool),X306) = s(fun(X305,bool),X307) | s(bool,'F_0') = s(bool,g(s(X305,sK127(X306,X307,bool,X305))))) )),
  inference(superposition,[],[f133,f8097])).
fof(f8852,plain,(
  ( ! [X18,X16] : (~p(s(bool,X18)) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f8851,f90])).
fof(f8851,plain,(
  ( ! [X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X18)) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X16)) )),
  inference(forward_demodulation,[],[f8692,f166])).
fof(f8692,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.relation.WF_1'(s(fun(X17,fun(X17,bool)),'const.relation.EMPTY_REL_0')))) | ~p(s(bool,X18)) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X16)) )),
  inference(superposition,[],[f131,f8097])).
fof(f8672,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f8097,f1474])).
fof(f8671,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f8097,f8097])).
fof(f8833,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s(bool,'T_0') = s(bool,happ(s(fun(X145,bool),happ(s(fun(X144,fun(X145,bool)),X146),s(X144,X147))),s(X145,X148))) | s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X144,fun(X145,bool)),X146),s('type.pair.prod'(X144,X145),'const.pair.,_2'(s(X144,X147),s(X145,X148)))))) )),
  inference(forward_demodulation,[],[f8670,f166])).
fof(f8670,plain,(
  ( ! [X146,X144,X149,X147,X145,X148] : (s(bool,'const.relation.WF_1'(s(fun(X149,fun(X149,bool)),'const.relation.EMPTY_REL_0'))) = s(bool,happ(s(fun(X145,bool),happ(s(fun(X144,fun(X145,bool)),X146),s(X144,X147))),s(X145,X148))) | s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X144,fun(X145,bool)),X146),s('type.pair.prod'(X144,X145),'const.pair.,_2'(s(X144,X147),s(X145,X148)))))) )),
  inference(superposition,[],[f8097,f135])).
fof(f8832,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X139,fun(X140,bool)),X141),s('type.pair.prod'(X139,X140),X142))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(X139,X140),bool),happ(s(fun(fun(X139,fun(X140,bool)),fun('type.pair.prod'(X139,X140),bool)),'const.pair.UNCURRY_0'),s(fun(X139,fun(X140,bool)),X141))),s('type.pair.prod'(X139,X140),X142)))) )),
  inference(forward_demodulation,[],[f8669,f166])).
fof(f8669,plain,(
  ( ! [X142,X140,X143,X141,X139] : (s(bool,'const.relation.WF_1'(s(fun(X143,fun(X143,bool)),'const.relation.EMPTY_REL_0'))) = s(bool,'const.pair.UNCURRY_2'(s(fun(X139,fun(X140,bool)),X141),s('type.pair.prod'(X139,X140),X142))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(X139,X140),bool),happ(s(fun(fun(X139,fun(X140,bool)),fun('type.pair.prod'(X139,X140),bool)),'const.pair.UNCURRY_0'),s(fun(X139,fun(X140,bool)),X141))),s('type.pair.prod'(X139,X140),X142)))) )),
  inference(superposition,[],[f8097,f134])).
fof(f8831,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,'const.relation.WF_1'(s(fun(X57,fun(X57,bool)),X58))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,fun(X57,bool)),bool),'const.relation.WF_0'),s(fun(X57,fun(X57,bool)),X58)))) )),
  inference(forward_demodulation,[],[f8648,f166])).
fof(f8648,plain,(
  ( ! [X59,X57,X58] : (s(bool,'const.relation.WF_1'(s(fun(X59,fun(X59,bool)),'const.relation.EMPTY_REL_0'))) = s(bool,'const.relation.WF_1'(s(fun(X57,fun(X57,bool)),X58))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,fun(X57,bool)),bool),'const.relation.WF_0'),s(fun(X57,fun(X57,bool)),X58)))) )),
  inference(superposition,[],[f8097,f125])).
fof(f8415,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.relation.WF_1'(s(fun(X2,fun(X2,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X3) = s(bool,'const.relation.WF_1'(s(fun(X4,fun(X4,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f7836,f1474])).
fof(f122,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f76])).
fof(f649,plain,(
  ( ! [X12,X13] : (s('type.pair.prod'(bool,X13),X12) = s('type.pair.prod'(bool,X13),'const.pair.,_2'(s(bool,'F_0'),s(X13,sK126(X12,X13,bool)))) | s(bool,'T_0') = s(bool,sK125(X12,X13,bool))) )),
  inference(superposition,[],[f132,f93])).
fof(f659,plain,(
  ( ! [X12,X13] : (s('type.pair.prod'(X13,bool),X12) = s('type.pair.prod'(X13,bool),'const.pair.,_2'(s(X13,sK125(X12,bool,X13)),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK126(X12,bool,X13))) )),
  inference(superposition,[],[f132,f93])).
fof(f1480,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun(X14,fun(X14,bool)),X15))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X14,fun(X14,bool)),bool),'const.relation.WF_0'),s(fun(X14,fun(X14,bool)),X15)))) )),
  inference(superposition,[],[f125,f93])).
fof(f1592,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK127(X16,X17,X18,bool))) )),
  inference(superposition,[],[f133,f93])).
fof(f1602,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK127(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK127(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f133,f93])).
fof(f1855,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'F_0') = s(bool,happ(s(fun(X31,bool),happ(s(fun(X30,fun(X31,bool)),X32),s(X30,X33))),s(X31,X34))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X30,fun(X31,bool)),X32),s('type.pair.prod'(X30,X31),'const.pair.,_2'(s(X30,X33),s(X31,X34)))))) )),
  inference(superposition,[],[f135,f93])).
fof(f1936,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl7),
  inference(backward_demodulation,[],[f1785,f1308])).
fof(f1943,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | $spl7),
  inference(backward_demodulation,[],[f1785,f700])).
fof(f2936,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X30,fun(X31,bool)),X32),s('type.pair.prod'(X30,X31),X33))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X30,X31),bool),happ(s(fun(fun(X30,fun(X31,bool)),fun('type.pair.prod'(X30,X31),bool)),'const.pair.UNCURRY_0'),s(fun(X30,fun(X31,bool)),X32))),s('type.pair.prod'(X30,X31),X33)))) )),
  inference(superposition,[],[f134,f93])).
fof(f3909,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'T_0') = s(bool,sK124(X0,'const.relation.EMPTY_REL_0',bool))) )),
  inference(superposition,[],[f1702,f93])).
fof(f4062,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X17,fun(X18,'type.ast.word_size')),X19),s('type.pair.prod'(X17,X18),X20))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',happ(s(fun('type.pair.prod'(X17,X18),'type.ast.word_size'),happ(s(fun(fun(X17,fun(X18,'type.ast.word_size')),fun('type.pair.prod'(X17,X18),'type.ast.word_size')),'const.pair.UNCURRY_0'),s(fun(X17,fun(X18,'type.ast.word_size')),X19))),s('type.pair.prod'(X17,X18),X20)))) ) | $spl7),
  inference(superposition,[],[f1936,f134])).
fof(f4063,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',happ(s(fun(X22,'type.ast.word_size'),happ(s(fun(X21,fun(X22,'type.ast.word_size')),X23),s(X21,X24))),s(X22,X25))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X21,fun(X22,'type.ast.word_size')),X23),s('type.pair.prod'(X21,X22),'const.pair.,_2'(s(X21,X24),s(X22,X25)))))) ) | $spl7),
  inference(superposition,[],[f1936,f135])).
fof(f4662,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') != s(bool,'const.relation.WF_1'(s(fun(X34,fun(X34,bool)),X35))) | s(bool,'T_0') = s(bool,X36) | s(bool,X36) = s(bool,happ(s(fun(fun(X34,fun(X34,bool)),bool),'const.relation.WF_0'),s(fun(X34,fun(X34,bool)),X35)))) )),
  inference(superposition,[],[f4552,f125])).
fof(f4683,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,'F_0') != s(bool,'const.pair.UNCURRY_2'(s(fun(X107,fun(X108,bool)),X109),s('type.pair.prod'(X107,X108),X110))) | s(bool,'T_0') = s(bool,X111) | s(bool,X111) = s(bool,happ(s(fun('type.pair.prod'(X107,X108),bool),happ(s(fun(fun(X107,fun(X108,bool)),fun('type.pair.prod'(X107,X108),bool)),'const.pair.UNCURRY_0'),s(fun(X107,fun(X108,bool)),X109))),s('type.pair.prod'(X107,X108),X110)))) )),
  inference(superposition,[],[f4552,f134])).
fof(f4684,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,'F_0') != s(bool,happ(s(fun(X113,bool),happ(s(fun(X112,fun(X113,bool)),X114),s(X112,X115))),s(X113,X116))) | s(bool,'T_0') = s(bool,X117) | s(bool,X117) = s(bool,'const.pair.UNCURRY_2'(s(fun(X112,fun(X113,bool)),X114),s('type.pair.prod'(X112,X113),'const.pair.,_2'(s(X112,X115),s(X113,X116)))))) )),
  inference(superposition,[],[f4552,f135])).
fof(f7163,plain,(
  ( ! [X383,X385,X382,X384,X381] : (s(bool,'T_0') != s(bool,f(s(X381,sK127(X382,X383,bool,X381)))) | s(fun(X381,bool),X382) = s(fun(X381,bool),X383) | s(bool,X384) = s(bool,'const.relation.WF_1'(s(fun(X385,fun(X385,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X384) = s(bool,g(s(X381,sK127(X382,X383,bool,X381))))) )),
  inference(superposition,[],[f133,f1474])).
fof(f7062,plain,(
  ( ! [X441,X438,X440,X437,X439] : (s(bool,X440) != s(bool,f(s(X437,sK127(X438,X439,bool,X437)))) | s(fun(X437,bool),X438) = s(fun(X437,bool),X439) | s(bool,X440) = s(bool,'const.relation.WF_1'(s(fun(X441,fun(X441,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,g(s(X437,sK127(X438,X439,bool,X437))))) )),
  inference(superposition,[],[f133,f1474])).
fof(f1600,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK127(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK127(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f133,f175])).
fof(f1598,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK127(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK127(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f133,f175])).
fof(f127,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK124(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK124(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK124(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK124])],[f78])).
fof(f78,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X44] : ! [X53] : (p(s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),X53)))) => ! [X6] : (! [X49] : (! [X50] : (p(s(bool,happ(s(fun(X44,bool),happ(s(fun(X44,fun(X44,bool)),X53),s(X44,X50))),s(X44,X49)))) => p(s(bool,happ(s(fun(X44,bool),X6),s(X44,X50))))) => p(s(bool,happ(s(fun(X44,bool),X6),s(X44,X49))))) => ! [X49] : p(s(bool,happ(s(fun(X44,bool),X6),s(X44,X49))))))),
  file('thm.evalProps.do_shift_ind','thm.relation.WF_INDUCTION_THM')).
fof(f136,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X3)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X3),s(X0,X2))),s(X0,sK124(X1,X3,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(condensation,[],[f126])).
fof(f126,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK124(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f1702,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK124(X1,'const.relation.EMPTY_REL_0',X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(subsumption_resolution,[],[f1696,f90])).
fof(f1696,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK124(X1,'const.relation.EMPTY_REL_0',X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(superposition,[],[f127,f166])).
fof(f1703,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X5),s(X3,sK124(X5,X4,X3))))) | p(s(bool,happ(s(fun(X3,bool),X5),s(X3,X6)))) | s(bool,X7) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),X4))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1697,f90])).
fof(f1697,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X3,bool),X5),s(X3,sK124(X5,X4,X3))))) | p(s(bool,happ(s(fun(X3,bool),X5),s(X3,X6)))) | s(bool,X7) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),X4))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f127,f175])).
fof(f1861,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.relation.WF_1'(s(fun(X85,fun(X85,bool)),'const.pair.UNCURRY_2'(s(fun(X87,fun(X86,fun(X85,fun(X85,bool)))),X88),s('type.pair.prod'(X87,X86),'const.pair.,_2'(s(X87,X89),s(X86,X90)))))))) | ~p(s(bool,happ(s(fun(X85,bool),X91),s(X85,sK124(X91,happ(s(fun(X86,fun(X85,fun(X85,bool))),happ(s(fun(X87,fun(X86,fun(X85,fun(X85,bool)))),X88),s(X87,X89))),s(X86,X90)),X85))))) | p(s(bool,happ(s(fun(X85,bool),X91),s(X85,X92))))) )),
  inference(superposition,[],[f127,f135])).
fof(f1886,plain,(
  ( ! [X103,X101,X107,X105,X102,X100,X106,X104] : (~p(s(bool,'const.relation.WF_1'(s(fun(X100,fun(X100,bool)),happ(s(fun(X102,fun(X100,fun(X100,bool))),happ(s(fun(X101,fun(X102,fun(X100,fun(X100,bool)))),X103),s(X101,X104))),s(X102,X105)))))) | ~p(s(bool,happ(s(fun(X100,bool),X106),s(X100,sK124(X106,'const.pair.UNCURRY_2'(s(fun(X101,fun(X102,fun(X100,fun(X100,bool)))),X103),s('type.pair.prod'(X101,X102),'const.pair.,_2'(s(X101,X104),s(X102,X105)))),X100))))) | p(s(bool,happ(s(fun(X100,bool),X106),s(X100,X107))))) )),
  inference(superposition,[],[f127,f135])).
fof(f2538,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),'const.pair.UNCURRY_2'(s(fun(X2,fun(X1,fun(X0,fun(X0,bool)))),X3),s('type.pair.prod'(X2,X1),'const.pair.,_2'(s(X2,X4),s(X1,X5)))))))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),happ(s(fun(X1,fun(X0,fun(X0,bool))),happ(s(fun(X2,fun(X1,fun(X0,fun(X0,bool)))),X3),s(X2,X4))),s(X1,X5))),s(X0,X6))),s(X0,sK124(X7,happ(s(fun(X1,fun(X0,fun(X0,bool))),happ(s(fun(X2,fun(X1,fun(X0,fun(X0,bool)))),X3),s(X2,X4))),s(X1,X5)),X0))))) | p(s(bool,happ(s(fun(X0,bool),X7),s(X0,X6))))) )),
  inference(superposition,[],[f136,f135])).
fof(f2539,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (~p(s(bool,'const.relation.WF_1'(s(fun(X8,fun(X8,bool)),happ(s(fun(X10,fun(X8,fun(X8,bool))),happ(s(fun(X9,fun(X10,fun(X8,fun(X8,bool)))),X11),s(X9,X12))),s(X10,X13)))))) | ~p(s(bool,happ(s(fun(X8,bool),happ(s(fun(X8,fun(X8,bool)),'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun(X8,fun(X8,bool)))),X11),s('type.pair.prod'(X9,X10),'const.pair.,_2'(s(X9,X12),s(X10,X13))))),s(X8,X14))),s(X8,sK124(X15,'const.pair.UNCURRY_2'(s(fun(X9,fun(X10,fun(X8,fun(X8,bool)))),X11),s('type.pair.prod'(X9,X10),'const.pair.,_2'(s(X9,X12),s(X10,X13)))),X8))))) | p(s(bool,happ(s(fun(X8,bool),X15),s(X8,X14))))) )),
  inference(superposition,[],[f136,f135])).
fof(f2546,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0'),s(X0,X1))),s(X0,sK124(X2,'const.relation.EMPTY_REL_0',X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1))))) )),
  inference(subsumption_resolution,[],[f2540,f90])).
fof(f2540,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0'),s(X0,X1))),s(X0,sK124(X2,'const.relation.EMPTY_REL_0',X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1))))) )),
  inference(superposition,[],[f136,f166])).
fof(f2547,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),happ(s(fun(X3,fun(X3,bool)),X4),s(X3,X5))),s(X3,sK124(X6,X4,X3))))) | p(s(bool,happ(s(fun(X3,bool),X6),s(X3,X5)))) | s(bool,X7) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),X4))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f2541,f90])).
fof(f2541,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X3,bool),happ(s(fun(X3,fun(X3,bool)),X4),s(X3,X5))),s(X3,sK124(X6,X4,X3))))) | p(s(bool,happ(s(fun(X3,bool),X6),s(X3,X5)))) | s(bool,X7) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),X4))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f136,f175])).
fof(f2966,plain,(
  ( ! [X146,X144,X142,X147,X145,X143,X141] : (~p(s(bool,'const.relation.WF_1'(s(fun(X141,fun(X141,bool)),'const.pair.UNCURRY_2'(s(fun(X142,fun(X143,fun(X141,fun(X141,bool)))),X144),s('type.pair.prod'(X142,X143),X145)))))) | ~p(s(bool,happ(s(fun(X141,bool),X146),s(X141,sK124(X146,happ(s(fun('type.pair.prod'(X142,X143),fun(X141,fun(X141,bool))),happ(s(fun(fun(X142,fun(X143,fun(X141,fun(X141,bool)))),fun('type.pair.prod'(X142,X143),fun(X141,fun(X141,bool)))),'const.pair.UNCURRY_0'),s(fun(X142,fun(X143,fun(X141,fun(X141,bool)))),X144))),s('type.pair.prod'(X142,X143),X145)),X141))))) | p(s(bool,happ(s(fun(X141,bool),X146),s(X141,X147))))) )),
  inference(superposition,[],[f127,f134])).
fof(f3038,plain,(
  ( ! [X134,X140,X138,X136,X135,X139,X137] : (~p(s(bool,happ(s(fun(X134,bool),happ(s(fun(X134,fun(X134,bool)),'const.pair.UNCURRY_2'(s(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),X137),s('type.pair.prod'(X135,X136),X138))),s(X134,X139))),s(X134,sK124(X140,happ(s(fun('type.pair.prod'(X135,X136),fun(X134,fun(X134,bool))),happ(s(fun(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),fun('type.pair.prod'(X135,X136),fun(X134,fun(X134,bool)))),'const.pair.UNCURRY_0'),s(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),X137))),s('type.pair.prod'(X135,X136),X138)),X134))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X134,fun(X134,bool)),'const.pair.UNCURRY_2'(s(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),X137),s('type.pair.prod'(X135,X136),X138)))))) | p(s(bool,happ(s(fun(X134,bool),X140),s(X134,X139))))) )),
  inference(forward_demodulation,[],[f2965,f134])).
fof(f2965,plain,(
  ( ! [X134,X140,X138,X136,X135,X139,X137] : (~p(s(bool,'const.relation.WF_1'(s(fun(X134,fun(X134,bool)),'const.pair.UNCURRY_2'(s(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),X137),s('type.pair.prod'(X135,X136),X138)))))) | ~p(s(bool,happ(s(fun(X134,bool),happ(s(fun(X134,fun(X134,bool)),happ(s(fun('type.pair.prod'(X135,X136),fun(X134,fun(X134,bool))),happ(s(fun(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),fun('type.pair.prod'(X135,X136),fun(X134,fun(X134,bool)))),'const.pair.UNCURRY_0'),s(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),X137))),s('type.pair.prod'(X135,X136),X138))),s(X134,X139))),s(X134,sK124(X140,happ(s(fun('type.pair.prod'(X135,X136),fun(X134,fun(X134,bool))),happ(s(fun(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),fun('type.pair.prod'(X135,X136),fun(X134,fun(X134,bool)))),'const.pair.UNCURRY_0'),s(fun(X135,fun(X136,fun(X134,fun(X134,bool)))),X137))),s('type.pair.prod'(X135,X136),X138)),X134))))) | p(s(bool,happ(s(fun(X134,bool),X140),s(X134,X139))))) )),
  inference(superposition,[],[f136,f134])).
fof(f3934,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X5,bool),X6),s(X5,sK124(X6,'const.relation.EMPTY_REL_0',X5)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f3923,f90])).
fof(f3923,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X5,bool),X6),s(X5,sK124(X6,'const.relation.EMPTY_REL_0',X5)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1702,f175])).
fof(f3908,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (~p(s(bool,happ(s(fun(X13,bool),happ(s(fun(X15,fun(X13,bool)),happ(s(fun(X14,fun(X15,fun(X13,bool))),X16),s(X14,X17))),s(X15,X18))),s(X13,sK124('const.pair.UNCURRY_2'(s(fun(X14,fun(X15,fun(X13,bool))),X16),s('type.pair.prod'(X14,X15),'const.pair.,_2'(s(X14,X17),s(X15,X18)))),'const.relation.EMPTY_REL_0',X13))))) | p(s(bool,happ(s(fun(X13,bool),'const.pair.UNCURRY_2'(s(fun(X14,fun(X15,fun(X13,bool))),X16),s('type.pair.prod'(X14,X15),'const.pair.,_2'(s(X14,X17),s(X15,X18))))),s(X13,X19))))) )),
  inference(superposition,[],[f1702,f135])).
fof(f1851,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),X8),s(X6,X9))),s(X7,X10))) | s(bool,X11) = s(bool,'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,bool)),X8),s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X9),s(X7,X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f135,f175])).
fof(f1853,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s(bool,X23) = s(bool,happ(s(fun(X19,bool),happ(s(fun(X18,fun(X19,bool)),X20),s(X18,X21))),s(X19,X22))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X18,fun(X19,bool)),X20),s('type.pair.prod'(X18,X19),'const.pair.,_2'(s(X18,X21),s(X19,X22))))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f135,f175])).
fof(f1985,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(bool,'T_0') != s(bool,happ(s(fun(X80,bool),happ(s(fun(X79,fun(X80,bool)),X81),s(X79,X82))),s(X80,X83))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X79,fun(X80,bool)),X81),s('type.pair.prod'(X79,X80),'const.pair.,_2'(s(X79,X82),s(X80,X83)))))) )),
  inference(forward_demodulation,[],[f1883,f166])).
fof(f1883,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (s(bool,'const.relation.WF_1'(s(fun(X84,fun(X84,bool)),'const.relation.EMPTY_REL_0'))) != s(bool,happ(s(fun(X80,bool),happ(s(fun(X79,fun(X80,bool)),X81),s(X79,X82))),s(X80,X83))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X79,fun(X80,bool)),X81),s('type.pair.prod'(X79,X80),'const.pair.,_2'(s(X79,X82),s(X80,X83)))))) )),
  inference(superposition,[],[f241,f135])).
fof(f4505,plain,(
  ( ! [X156,X154,X152,X151,X157,X155,X153] : (s(bool,X156) != s(bool,happ(s(fun(X152,bool),happ(s(fun(X151,fun(X152,bool)),X153),s(X151,X154))),s(X152,X155))) | s(bool,'T_0') = s(bool,X156) | s(bool,X157) = s(bool,'const.pair.UNCURRY_2'(s(fun(X151,fun(X152,bool)),X153),s('type.pair.prod'(X151,X152),'const.pair.,_2'(s(X151,X154),s(X152,X155))))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f507,f135])).
fof(f4541,plain,(
  ( ! [X152,X151,X149,X147,X153,X150,X148] : (s(bool,X152) != s(bool,happ(s(fun(X148,bool),happ(s(fun(X147,fun(X148,bool)),X149),s(X147,X150))),s(X148,X151))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X147,fun(X148,bool)),X149),s('type.pair.prod'(X147,X148),'const.pair.,_2'(s(X147,X150),s(X148,X151))))) | s(bool,X152) = s(bool,X153) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f507,f135])).
fof(f6683,plain,(
  ( ! [X212,X210,X215,X213,X211,X209,X214] : (s(bool,X214) = s(bool,happ(s(fun(X210,bool),happ(s(fun(X209,fun(X210,bool)),X211),s(X209,X212))),s(X210,X213))) | s(bool,X214) = s(bool,'const.relation.WF_1'(s(fun(X215,fun(X215,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X209,fun(X210,bool)),X211),s('type.pair.prod'(X209,X210),'const.pair.,_2'(s(X209,X212),s(X210,X213)))))) )),
  inference(superposition,[],[f1474,f135])).
fof(f6718,plain,(
  ( ! [X156,X154,X152,X151,X157,X155,X153] : (s(bool,'T_0') = s(bool,happ(s(fun(X152,bool),happ(s(fun(X151,fun(X152,bool)),X153),s(X151,X154))),s(X152,X155))) | s(bool,X156) = s(bool,'const.relation.WF_1'(s(fun(X157,fun(X157,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X156) = s(bool,'const.pair.UNCURRY_2'(s(fun(X151,fun(X152,bool)),X153),s('type.pair.prod'(X151,X152),'const.pair.,_2'(s(X151,X154),s(X152,X155)))))) )),
  inference(superposition,[],[f1474,f135])).
fof(f3906,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),'const.pair.UNCURRY_2'(s(fun(X2,fun(X1,fun(X0,bool))),X3),s('type.pair.prod'(X2,X1),'const.pair.,_2'(s(X2,X4),s(X1,X5))))),s(X0,sK124(happ(s(fun(X1,fun(X0,bool)),happ(s(fun(X2,fun(X1,fun(X0,bool))),X3),s(X2,X4))),s(X1,X5)),'const.relation.EMPTY_REL_0',X0))))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun(X2,fun(X1,fun(X0,bool))),X3),s(X2,X4))),s(X1,X5))),s(X0,X6))))) )),
  inference(superposition,[],[f1702,f135])).
fof(f3930,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.pair.UNCURRY_2'(s(fun(X8,fun(X9,fun(X7,bool))),X10),s('type.pair.prod'(X8,X9),X11))),s(X7,X12)))) | ~p(s(bool,happ(s(fun(X7,bool),'const.pair.UNCURRY_2'(s(fun(X8,fun(X9,fun(X7,bool))),X10),s('type.pair.prod'(X8,X9),X11))),s(X7,sK124(happ(s(fun('type.pair.prod'(X8,X9),fun(X7,bool)),happ(s(fun(fun(X8,fun(X9,fun(X7,bool))),fun('type.pair.prod'(X8,X9),fun(X7,bool))),'const.pair.UNCURRY_0'),s(fun(X8,fun(X9,fun(X7,bool))),X10))),s('type.pair.prod'(X8,X9),X11)),'const.relation.EMPTY_REL_0',X7)))))) )),
  inference(forward_demodulation,[],[f3907,f134])).
fof(f3907,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.pair.UNCURRY_2'(s(fun(X8,fun(X9,fun(X7,bool))),X10),s('type.pair.prod'(X8,X9),X11))),s(X7,sK124(happ(s(fun('type.pair.prod'(X8,X9),fun(X7,bool)),happ(s(fun(fun(X8,fun(X9,fun(X7,bool))),fun('type.pair.prod'(X8,X9),fun(X7,bool))),'const.pair.UNCURRY_0'),s(fun(X8,fun(X9,fun(X7,bool))),X10))),s('type.pair.prod'(X8,X9),X11)),'const.relation.EMPTY_REL_0',X7))))) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.pair.prod'(X8,X9),fun(X7,bool)),happ(s(fun(fun(X8,fun(X9,fun(X7,bool))),fun('type.pair.prod'(X8,X9),fun(X7,bool))),'const.pair.UNCURRY_0'),s(fun(X8,fun(X9,fun(X7,bool))),X10))),s('type.pair.prod'(X8,X9),X11))),s(X7,X12))))) )),
  inference(superposition,[],[f1702,f134])).
fof(f3911,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X7)))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,sK124(X5,'const.relation.EMPTY_REL_0',bool))) )),
  inference(superposition,[],[f1702,f175])).
fof(f3910,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X3)))) | s(bool,X4) = s(bool,sK124(X2,'const.relation.EMPTY_REL_0',bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1702,f175])).
fof(f125,plain,(
  ( ! [X0,X1] : (s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))) = s(bool,happ(s(fun(fun(X0,fun(X0,bool)),bool),'const.relation.WF_0'),s(fun(X0,fun(X0,bool)),X1)))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))) = s(bool,happ(s(fun(fun(X0,fun(X0,bool)),bool),'const.relation.WF_0'),s(fun(X0,fun(X0,bool)),X1)))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1] : s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))) = s(bool,happ(s(fun(fun(X0,fun(X0,bool)),bool),'const.relation.WF_0'),s(fun(X0,fun(X0,bool)),X1)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X44] : ! [X46] : s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),X46))) = s(bool,happ(s(fun(fun(X44,fun(X44,bool)),bool),'const.relation.WF_0'),s(fun(X44,fun(X44,bool)),X46)))),
  file('thm.evalProps.do_shift_ind','ARITY_0_1_const.relation.WF')).
fof(f6318,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit',X3)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X2))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X2))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X2))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X2))))))) | s(bool,X4) = s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X2)))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f6305,f90])).
fof(f6305,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit',X3)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(X2))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(X2))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(X2))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(X2))))))) | s(bool,X4) = s(bool,happ(s(fun('type.ast.lit',bool),X2),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(X2)))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f96,f175])).
fof(f6317,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit',X10)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9)))))))))) )),
  inference(forward_demodulation,[],[f6316,f134])).
fof(f6316,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit',X10)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9)))))))))) )),
  inference(forward_demodulation,[],[f6315,f134])).
fof(f6315,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit',X10)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9)))))))))) )),
  inference(forward_demodulation,[],[f6314,f134])).
fof(f6314,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit',X10)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9)))))))))) )),
  inference(forward_demodulation,[],[f6313,f134])).
fof(f6313,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit',X10)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9)))))))))) )),
  inference(forward_demodulation,[],[f6302,f134])).
fof(f6302,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit',X10)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool)),happ(s(fun(fun(X6,fun(X7,fun('type.ast.lit',bool))),fun('type.pair.prod'(X6,X7),fun('type.ast.lit',bool))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X7,fun('type.ast.lit',bool))),X8))),s('type.pair.prod'(X6,X7),X9)))))))))) )),
  inference(superposition,[],[f96,f134])).
fof(f6303,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun(X12,fun('type.ast.lit',bool)),happ(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s(X11,X14))),s(X12,X15))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15('const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))),s('type.ast.lit',X16)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14('const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13('const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12('const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11('const.pair.UNCURRY_2'(s(fun(X11,fun(X12,fun('type.ast.lit',bool))),X13),s('type.pair.prod'(X11,X12),'const.pair.,_2'(s(X11,X14),s(X12,X15)))))))))))) )),
  inference(superposition,[],[f96,f135])).
fof(f6301,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK15(happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))),s('type.ast.lit',X5)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK14(happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK13(happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK12(happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK11(happ(s(fun(X0,fun('type.ast.lit',bool)),happ(s(fun(X1,fun(X0,fun('type.ast.lit',bool))),X2),s(X1,X3))),s(X0,X4)))))))))) )),
  inference(superposition,[],[f96,f135])).
fof(f1952,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3)))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(backward_demodulation,[],[f1785,f1090])).
fof(f1951,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3)))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(backward_demodulation,[],[f1785,f1004])).
fof(f1954,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(backward_demodulation,[],[f1785,f1350])).
fof(f1953,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(backward_demodulation,[],[f1785,f1245])).
fof(f1939,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl7),
  inference(backward_demodulation,[],[f1785,f702])).
fof(f4116,plain,(
  ( ! [X10,X9] : (p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X9))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X9)) ) | $spl7),
  inference(subsumption_resolution,[],[f4082,f91])).
fof(f4082,plain,(
  ( ! [X10,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X9))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X9)) ) | $spl7),
  inference(superposition,[],[f128,f1936])).
fof(f1975,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK67(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4))))) )),
  inference(forward_demodulation,[],[f1974,f1785])).
fof(f1974,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK64(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1973,f1785])).
fof(f1973,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK61(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1972,f1785])).
fof(f1972,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK58(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1971,f1785])).
fof(f1971,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK55(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1970,f1785])).
fof(f1970,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK52(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1969,f1785])).
fof(f1969,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK49(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1968,f1785])).
fof(f1968,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK46(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1967,f1785])).
fof(f1967,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK43(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1966,f1785])).
fof(f1966,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK40(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1965,f1785])).
fof(f1965,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK37(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1964,f1785])).
fof(f1964,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK34(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1963,f1785])).
fof(f1963,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK31(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1962,f1785])).
fof(f1962,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK28(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1961,f1785])).
fof(f1961,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK25(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1960,f1785])).
fof(f1960,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK22(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1959,f1785])).
fof(f1959,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK19(X0)),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1958,f1785])).
fof(f1958,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',sK16(X0)),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(forward_demodulation,[],[f1957,f1785])).
fof(f1957,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.pair.prod'('type.ast.opw','type.ast.word_size'),'const.pair.,_2'(s('type.ast.opw',X1),s('type.ast.word_size',X2))))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0)))))))) )),
  inference(backward_demodulation,[],[f1785,f163])).
fof(f6295,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,X39)) | s(bool,X39) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X36))),s('type.ast.word_size',X37))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X37)) )),
  inference(subsumption_resolution,[],[f6256,f90])).
fof(f6256,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | s(bool,X39) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X36))),s('type.ast.word_size',X37))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X37)) )),
  inference(superposition,[],[f131,f4331])).
fof(f3916,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun('type.ast.word_size',bool),X18),s('type.ast.word_size','const.ast.W8_0')))) | p(s(bool,happ(s(fun('type.ast.word_size',bool),X18),s('type.ast.word_size',X19)))) | s('type.ast.word_size',X20) = s('type.ast.word_size',sK124(X18,'const.relation.EMPTY_REL_0','type.ast.word_size')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X20)) )),
  inference(superposition,[],[f1702,f196])).
fof(f3920,plain,(
  ( ! [X30,X31] : (~p(s(bool,happ(s(fun('type.ast.word_size',bool),X30),s('type.ast.word_size','const.ast.W64_0')))) | p(s(bool,happ(s(fun('type.ast.word_size',bool),X30),s('type.ast.word_size',X31)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK124(X30,'const.relation.EMPTY_REL_0','type.ast.word_size'))) )),
  inference(superposition,[],[f1702,f94])).
fof(f3918,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun('type.ast.word_size',bool),X24),s('type.ast.word_size',X25)))) | p(s(bool,happ(s(fun('type.ast.word_size',bool),X24),s('type.ast.word_size',X26)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK124(X24,'const.relation.EMPTY_REL_0','type.ast.word_size')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X25)) )),
  inference(superposition,[],[f1702,f196])).
fof(f2932,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X10,fun(X11,bool)),X12),s('type.pair.prod'(X10,X11),X13))) | s(bool,X14) = s(bool,happ(s(fun('type.pair.prod'(X10,X11),bool),happ(s(fun(fun(X10,fun(X11,bool)),fun('type.pair.prod'(X10,X11),bool)),'const.pair.UNCURRY_0'),s(fun(X10,fun(X11,bool)),X12))),s('type.pair.prod'(X10,X11),X13))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f134,f175])).
fof(f2934,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,X24) = s(bool,'const.pair.UNCURRY_2'(s(fun(X20,fun(X21,bool)),X22),s('type.pair.prod'(X20,X21),X23))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X20,X21),bool),happ(s(fun(fun(X20,fun(X21,bool)),fun('type.pair.prod'(X20,X21),bool)),'const.pair.UNCURRY_0'),s(fun(X20,fun(X21,bool)),X22))),s('type.pair.prod'(X20,X21),X23))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f134,f175])).
fof(f3032,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,'T_0') != s(bool,'const.pair.UNCURRY_2'(s(fun(X88,fun(X89,bool)),X90),s('type.pair.prod'(X88,X89),X91))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X88,X89),bool),happ(s(fun(fun(X88,fun(X89,bool)),fun('type.pair.prod'(X88,X89),bool)),'const.pair.UNCURRY_0'),s(fun(X88,fun(X89,bool)),X90))),s('type.pair.prod'(X88,X89),X91)))) )),
  inference(forward_demodulation,[],[f2958,f166])).
fof(f2958,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,'const.relation.WF_1'(s(fun(X92,fun(X92,bool)),'const.relation.EMPTY_REL_0'))) != s(bool,'const.pair.UNCURRY_2'(s(fun(X88,fun(X89,bool)),X90),s('type.pair.prod'(X88,X89),X91))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X88,X89),bool),happ(s(fun(fun(X88,fun(X89,bool)),fun('type.pair.prod'(X88,X89),bool)),'const.pair.UNCURRY_0'),s(fun(X88,fun(X89,bool)),X90))),s('type.pair.prod'(X88,X89),X91)))) )),
  inference(superposition,[],[f241,f134])).
fof(f3937,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,'const.pair.UNCURRY_2'(s(fun(X31,fun(X32,bool)),X33),s('type.pair.prod'(X31,X32),X34)))) | ~p(s(bool,'const.pair.UNCURRY_2'(s(fun(X31,fun(X32,bool)),X33),s('type.pair.prod'(X31,X32),sK124(happ(s(fun(fun(X31,fun(X32,bool)),fun('type.pair.prod'(X31,X32),bool)),'const.pair.UNCURRY_0'),s(fun(X31,fun(X32,bool)),X33)),'const.relation.EMPTY_REL_0','type.pair.prod'(X31,X32))))))) )),
  inference(forward_demodulation,[],[f3929,f134])).
fof(f3929,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'const.pair.UNCURRY_2'(s(fun(X31,fun(X32,bool)),X33),s('type.pair.prod'(X31,X32),sK124(happ(s(fun(fun(X31,fun(X32,bool)),fun('type.pair.prod'(X31,X32),bool)),'const.pair.UNCURRY_0'),s(fun(X31,fun(X32,bool)),X33)),'const.relation.EMPTY_REL_0','type.pair.prod'(X31,X32)))))) | p(s(bool,happ(s(fun('type.pair.prod'(X31,X32),bool),happ(s(fun(fun(X31,fun(X32,bool)),fun('type.pair.prod'(X31,X32),bool)),'const.pair.UNCURRY_0'),s(fun(X31,fun(X32,bool)),X33))),s('type.pair.prod'(X31,X32),X34))))) )),
  inference(superposition,[],[f1702,f134])).
fof(f4504,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (s(bool,X149) != s(bool,'const.pair.UNCURRY_2'(s(fun(X145,fun(X146,bool)),X147),s('type.pair.prod'(X145,X146),X148))) | s(bool,'T_0') = s(bool,X149) | s(bool,X150) = s(bool,happ(s(fun('type.pair.prod'(X145,X146),bool),happ(s(fun(fun(X145,fun(X146,bool)),fun('type.pair.prod'(X145,X146),bool)),'const.pair.UNCURRY_0'),s(fun(X145,fun(X146,bool)),X147))),s('type.pair.prod'(X145,X146),X148))) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f507,f134])).
fof(f4540,plain,(
  ( ! [X146,X144,X142,X145,X143,X141] : (s(bool,X145) != s(bool,'const.pair.UNCURRY_2'(s(fun(X141,fun(X142,bool)),X143),s('type.pair.prod'(X141,X142),X144))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X141,X142),bool),happ(s(fun(fun(X141,fun(X142,bool)),fun('type.pair.prod'(X141,X142),bool)),'const.pair.UNCURRY_0'),s(fun(X141,fun(X142,bool)),X143))),s('type.pair.prod'(X141,X142),X144))) | s(bool,X145) = s(bool,X146) | s(bool,'T_0') = s(bool,X146)) )),
  inference(superposition,[],[f507,f134])).
fof(f6682,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (s(bool,X207) = s(bool,'const.pair.UNCURRY_2'(s(fun(X203,fun(X204,bool)),X205),s('type.pair.prod'(X203,X204),X206))) | s(bool,X207) = s(bool,'const.relation.WF_1'(s(fun(X208,fun(X208,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(X203,X204),bool),happ(s(fun(fun(X203,fun(X204,bool)),fun('type.pair.prod'(X203,X204),bool)),'const.pair.UNCURRY_0'),s(fun(X203,fun(X204,bool)),X205))),s('type.pair.prod'(X203,X204),X206)))) )),
  inference(superposition,[],[f1474,f134])).
fof(f6717,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun(X145,fun(X146,bool)),X147),s('type.pair.prod'(X145,X146),X148))) | s(bool,X149) = s(bool,'const.relation.WF_1'(s(fun(X150,fun(X150,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X149) = s(bool,happ(s(fun('type.pair.prod'(X145,X146),bool),happ(s(fun(fun(X145,fun(X146,bool)),fun('type.pair.prod'(X145,X146),bool)),'const.pair.UNCURRY_0'),s(fun(X145,fun(X146,bool)),X147))),s('type.pair.prod'(X145,X146),X148)))) )),
  inference(superposition,[],[f1474,f134])).
fof(f1476,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,'const.relation.WF_1'(s(fun(X2,fun(X2,bool)),X3))) | s(bool,X4) = s(bool,happ(s(fun(fun(X2,fun(X2,bool)),bool),'const.relation.WF_0'),s(fun(X2,fun(X2,bool)),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f125,f175])).
fof(f1478,plain,(
  ( ! [X10,X8,X9] : (s(bool,X10) = s(bool,'const.relation.WF_1'(s(fun(X8,fun(X8,bool)),X9))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X8,fun(X8,bool)),bool),'const.relation.WF_0'),s(fun(X8,fun(X8,bool)),X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f125,f175])).
fof(f1506,plain,(
  ( ! [X37,X38] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun(X37,fun(X37,bool)),X38))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X37,fun(X37,bool)),bool),'const.relation.WF_0'),s(fun(X37,fun(X37,bool)),X38)))) )),
  inference(forward_demodulation,[],[f1495,f166])).
fof(f1495,plain,(
  ( ! [X39,X37,X38] : (s(bool,'const.relation.WF_1'(s(fun(X39,fun(X39,bool)),'const.relation.EMPTY_REL_0'))) != s(bool,'const.relation.WF_1'(s(fun(X37,fun(X37,bool)),X38))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X37,fun(X37,bool)),bool),'const.relation.WF_0'),s(fun(X37,fun(X37,bool)),X38)))) )),
  inference(superposition,[],[f241,f125])).
fof(f3933,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),sK124('const.relation.WF_0','const.relation.EMPTY_REL_0',fun(X0,fun(X0,bool)))))))) )),
  inference(forward_demodulation,[],[f3921,f125])).
fof(f3921,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),sK124('const.relation.WF_0','const.relation.EMPTY_REL_0',fun(X0,fun(X0,bool))))))) | p(s(bool,happ(s(fun(fun(X0,fun(X0,bool)),bool),'const.relation.WF_0'),s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(superposition,[],[f1702,f125])).
fof(f4483,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X53) != s(bool,'const.relation.WF_1'(s(fun(X51,fun(X51,bool)),X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,happ(s(fun(fun(X51,fun(X51,bool)),bool),'const.relation.WF_0'),s(fun(X51,fun(X51,bool)),X52))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f507,f125])).
fof(f4519,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,X49) != s(bool,'const.relation.WF_1'(s(fun(X47,fun(X47,bool)),X48))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X47,fun(X47,bool)),bool),'const.relation.WF_0'),s(fun(X47,fun(X47,bool)),X48))) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f507,f125])).
fof(f6652,plain,(
  ( ! [X80,X78,X81,X79] : (s(bool,X80) = s(bool,'const.relation.WF_1'(s(fun(X78,fun(X78,bool)),X79))) | s(bool,X80) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X78,fun(X78,bool)),bool),'const.relation.WF_0'),s(fun(X78,fun(X78,bool)),X79)))) )),
  inference(superposition,[],[f1474,f125])).
fof(f6705,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,'T_0') = s(bool,'const.relation.WF_1'(s(fun(X56,fun(X56,bool)),X57))) | s(bool,X58) = s(bool,'const.relation.WF_1'(s(fun(X59,fun(X59,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X58) = s(bool,happ(s(fun(fun(X56,fun(X56,bool)),bool),'const.relation.WF_0'),s(fun(X56,fun(X56,bool)),X57)))) )),
  inference(superposition,[],[f1474,f125])).
fof(f7167,plain,(
  ( ! [X408,X410,X409,X411] : (s('type.pair.prod'(bool,X409),X408) = s('type.pair.prod'(bool,X409),'const.pair.,_2'(s(bool,'T_0'),s(X409,sK126(X408,X409,bool)))) | s(bool,X410) = s(bool,'const.relation.WF_1'(s(fun(X411,fun(X411,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X410) = s(bool,sK125(X408,X409,bool))) )),
  inference(superposition,[],[f132,f1474])).
fof(f7066,plain,(
  ( ! [X466,X465,X467,X468] : (s('type.pair.prod'(bool,X466),X465) = s('type.pair.prod'(bool,X466),'const.pair.,_2'(s(bool,X467),s(X466,sK126(X465,X466,bool)))) | s(bool,X467) = s(bool,'const.relation.WF_1'(s(fun(X468,fun(X468,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,sK125(X465,X466,bool))) )),
  inference(superposition,[],[f132,f1474])).
fof(f647,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'(bool,X7),X6) = s('type.pair.prod'(bool,X7),'const.pair.,_2'(s(bool,X8),s(X7,sK126(X6,X7,bool)))) | s(bool,'T_0') = s(bool,sK125(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f132,f175])).
fof(f645,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(bool,X1),X0) = s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'T_0'),s(X1,sK126(X0,X1,bool)))) | s(bool,X2) = s(bool,sK125(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f132,f175])).
fof(f7168,plain,(
  ( ! [X412,X414,X413,X415] : (s('type.pair.prod'(X413,bool),X412) = s('type.pair.prod'(X413,bool),'const.pair.,_2'(s(X413,sK125(X412,bool,X413)),s(bool,'T_0'))) | s(bool,X414) = s(bool,'const.relation.WF_1'(s(fun(X415,fun(X415,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X414) = s(bool,sK126(X412,bool,X413))) )),
  inference(superposition,[],[f132,f1474])).
fof(f7067,plain,(
  ( ! [X472,X469,X471,X470] : (s('type.pair.prod'(X470,bool),X469) = s('type.pair.prod'(X470,bool),'const.pair.,_2'(s(X470,sK125(X469,bool,X470)),s(bool,X471))) | s(bool,X471) = s(bool,'const.relation.WF_1'(s(fun(X472,fun(X472,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,sK126(X469,bool,X470))) )),
  inference(superposition,[],[f132,f1474])).
fof(f657,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'(X7,bool),X6) = s('type.pair.prod'(X7,bool),'const.pair.,_2'(s(X7,sK125(X6,bool,X7)),s(bool,X8))) | s(bool,'T_0') = s(bool,sK126(X6,bool,X7)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f132,f175])).
fof(f655,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X1,bool),X0) = s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,sK125(X0,bool,X1)),s(bool,'T_0'))) | s(bool,X2) = s(bool,sK126(X0,bool,X1)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f132,f175])).
fof(f4467,plain,(
  s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | $spl7),
  inference(unit_resulting_resolution,[],[f164,f135,f1944,f507])).
fof(f7169,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(X418,f(s(bool,'T_0'))) != s(X418,g(s(bool,'T_0'))) | s(fun(bool,X418),X416) = s(fun(bool,X418),X417) | s(bool,X419) = s(bool,'const.relation.WF_1'(s(fun(X420,fun(X420,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X419) = s(bool,sK127(X416,X417,X418,bool))) )),
  inference(superposition,[],[f133,f1474])).
fof(f7221,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X1) = s(bool,X2)) )),
  inference(condensation,[],[f7220])).
fof(f7220,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X66) != s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,'const.relation.WF_1'(s(fun(X70,fun(X70,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X66) = s(bool,X69)) )),
  inference(duplicate_literal_removal,[],[f7084])).
fof(f7084,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X66) != s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,'const.relation.WF_1'(s(fun(X70,fun(X70,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X66) = s(bool,X69)) )),
  inference(superposition,[],[f507,f1474])).
fof(f7068,plain,(
  ( ! [X476,X474,X475,X477,X473] : (s(X475,f(s(bool,X476))) != s(X475,g(s(bool,X476))) | s(fun(bool,X475),X473) = s(fun(bool,X475),X474) | s(bool,X476) = s(bool,'const.relation.WF_1'(s(fun(X477,fun(X477,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,sK127(X473,X474,X475,bool))) )),
  inference(superposition,[],[f133,f1474])).
fof(f7836,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,X179) | s(bool,X179) = s(bool,'const.relation.WF_1'(s(fun(X180,fun(X180,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(subsumption_resolution,[],[f7003,f164])).
fof(f7003,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,X179) | s(bool,X179) = s(bool,'const.relation.WF_1'(s(fun(X180,fun(X180,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f164,f1474])).
fof(f7240,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(condensation,[],[f7239])).
fof(f7239,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,X61) != s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,X61) = s(bool,'const.relation.WF_1'(s(fun(X64,fun(X64,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6979])).
fof(f6979,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,X61) != s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,X61) = s(bool,'const.relation.WF_1'(s(fun(X64,fun(X64,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f507,f1474])).
fof(f7555,plain,(
  ( ! [X90,X91,X89] : (s(bool,X90) = s(bool,'const.relation.WF_1'(s(fun(X91,fun(X91,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X90) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X89))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X89)) ) | $spl7),
  inference(subsumption_resolution,[],[f6710,f164])).
fof(f6710,plain,(
  ( ! [X90,X91,X89] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X90) = s(bool,'const.relation.WF_1'(s(fun(X91,fun(X91,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X90) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X89))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X89)) ) | $spl7),
  inference(superposition,[],[f1474,f1936])).
fof(f7554,plain,(
  ( ! [X88,X87] : (s(bool,X87) = s(bool,'const.relation.WF_1'(s(fun(X88,fun(X88,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X87) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5)))) ) | $spl7),
  inference(subsumption_resolution,[],[f6709,f164])).
fof(f6709,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X87) = s(bool,'const.relation.WF_1'(s(fun(X88,fun(X88,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X87) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5)))) ) | $spl7),
  inference(superposition,[],[f1474,f1943])).
fof(f6685,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,X6) = s(bool,X7) | s(bool,X8) = s(bool,'const.relation.WF_1'(s(fun(X9,fun(X9,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X7) = s(bool,X8) | s(bool,X6) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f1474,f175])).
fof(f6684,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.relation.WF_1'(s(fun(X3,fun(X3,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X4) = s(bool,'const.relation.WF_1'(s(fun(X5,fun(X5,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X0) = s(bool,X4)) )),
  inference(superposition,[],[f1474,f1474])).
fof(f6508,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X40) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X38))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X39))))))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f6474,f90])).
fof(f6474,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,'T_0')) | s(bool,X40) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X38))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X39))))))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f506,f6330])).
fof(f6507,plain,(
  ( ! [X30,X31,X29] : (s(bool,X31) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X29))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X30))))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f6471,f90])).
fof(f6471,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X29))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X30))))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f177,f6330])).
fof(f6444,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f6330,f94])).
fof(f6330,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))))) )),
  inference(unit_resulting_resolution,[],[f135,f4383])).
fof(f6297,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X69) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X66))),s('type.ast.word_size',X67))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))))) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X67)) )),
  inference(subsumption_resolution,[],[f6262,f90])).
fof(f6262,plain,(
  ( ! [X70,X68,X66,X69,X67] : (~p(s(bool,'T_0')) | s(bool,X69) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X66))),s('type.ast.word_size',X67))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))))) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X67)) )),
  inference(superposition,[],[f506,f4331])).
fof(f6296,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X54))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X56))))) | s(bool,'T_0') = s(bool,X57) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X55)) )),
  inference(subsumption_resolution,[],[f6259,f90])).
fof(f6259,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,'T_0')) | s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X54))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X56))))) | s(bool,'T_0') = s(bool,X57) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X55)) )),
  inference(superposition,[],[f177,f4331])).
fof(f6237,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X46))),s('type.ast.word_size',happ(s(fun(X42,'type.ast.word_size'),happ(s(fun(X41,fun(X42,'type.ast.word_size')),X43),s(X41,X44))),s(X42,X45))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X47))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X41,fun(X42,'type.ast.word_size')),X43),s('type.pair.prod'(X41,X42),'const.pair.,_2'(s(X41,X44),s(X42,X45)))))) )),
  inference(superposition,[],[f4331,f135])).
fof(f6236,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X39))),s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X35,fun(X36,'type.ast.word_size')),X37),s('type.pair.prod'(X35,X36),X38))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X40))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',happ(s(fun('type.pair.prod'(X35,X36),'type.ast.word_size'),happ(s(fun(fun(X35,fun(X36,'type.ast.word_size')),fun('type.pair.prod'(X35,X36),'type.ast.word_size')),'const.pair.UNCURRY_0'),s(fun(X35,fun(X36,'type.ast.word_size')),X37))),s('type.pair.prod'(X35,X36),X38)))) )),
  inference(superposition,[],[f4331,f134])).
fof(f6218,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X40) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X38))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X39))))))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f6183,f90])).
fof(f6183,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,'T_0')) | s(bool,X40) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X38))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X39))))))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f506,f6038])).
fof(f6217,plain,(
  ( ! [X30,X31,X29] : (s(bool,X31) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X29))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X30))))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f6180,f90])).
fof(f6180,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X29))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X30))))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f177,f6038])).
fof(f6153,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X0),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X3) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X3)) )),
  inference(superposition,[],[f6038,f196])).
fof(f6075,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X1) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X2))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) | s(bool,'T_0') = s(bool,X1) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(superposition,[],[f4261,f196])).
fof(f6038,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))))) )),
  inference(unit_resulting_resolution,[],[f135,f4261])).
fof(f5995,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f115])).
fof(f5608,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f114])).
fof(f5088,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f105])).
fof(f4794,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f104])).
fof(f4633,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f113])).
fof(f4544,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,X0) = s(bool,X1)) ) | $spl7),
  inference(condensation,[],[f4543])).
fof(f4543,plain,(
  ( ! [X24,X23,X22] : (s(bool,X23) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X22) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl7),
  inference(duplicate_literal_removal,[],[f4512])).
fof(f4512,plain,(
  ( ! [X24,X23,X22] : (s(bool,X23) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X22) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X22)) ) | $spl7),
  inference(superposition,[],[f507,f1945])).
fof(f4552,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f4551])).
fof(f4551,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f4506])).
fof(f4506,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f507,f93])).
fof(f4384,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X42))))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f4358,f90])).
fof(f4358,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X42))))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f506,f4269])).
fof(f4383,plain,(
  ( ! [X33,X34,X32] : (s(bool,X34) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X32))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f4355,f90])).
fof(f4355,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X34) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X32))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f177,f4269])).
fof(f4331,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X1))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f4269,f94])).
fof(f4324,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f112])).
fof(f4323,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X56) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X55))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f4297,f90])).
fof(f4297,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X56) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X55))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f506,f1956])).
fof(f4322,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X41),s('type.num.num',X42))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f4294,f90])).
fof(f4294,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X41),s('type.num.num',X42))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f1956])).
fof(f4270,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f1956,f94])).
fof(f4269,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) )),
  inference(superposition,[],[f1956,f132])).
fof(f4262,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X42))))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f4234,f90])).
fof(f4234,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X42))))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f506,f4143])).
fof(f4261,plain,(
  ( ! [X33,X34,X32] : (s(bool,X34) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X32))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f4231,f90])).
fof(f4231,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X34) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X32))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f177,f4143])).
fof(f4207,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X1))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X3) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X3)) )),
  inference(superposition,[],[f4143,f196])).
fof(f4200,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f111])).
fof(f4199,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X56) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X55))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f4171,f90])).
fof(f4171,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X56) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X55))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f506,f1947])).
fof(f4198,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X41),s('type.num.num',X42))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f4168,f90])).
fof(f4168,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X41),s('type.num.num',X42))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f1947])).
fof(f4144,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X1),s('type.num.num',X2))))),s('type.ast.word_size',X0))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(superposition,[],[f1947,f196])).
fof(f4143,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) )),
  inference(superposition,[],[f1947,f132])).
fof(f4051,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f103])).
fof(f4032,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',happ(s(fun(X22,'type.ast.word_size'),happ(s(fun(X21,fun(X22,'type.ast.word_size')),X23),s(X21,X24))),s(X22,X25))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X21,fun(X22,'type.ast.word_size')),X23),s('type.pair.prod'(X21,X22),'const.pair.,_2'(s(X21,X24),s(X22,X25)))))) ) | $spl7),
  inference(superposition,[],[f1935,f135])).
fof(f4031,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X17,fun(X18,'type.ast.word_size')),X19),s('type.pair.prod'(X17,X18),X20))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',happ(s(fun('type.pair.prod'(X17,X18),'type.ast.word_size'),happ(s(fun(fun(X17,fun(X18,'type.ast.word_size')),fun('type.pair.prod'(X17,X18),'type.ast.word_size')),'const.pair.UNCURRY_0'),s(fun(X17,fun(X18,'type.ast.word_size')),X19))),s('type.pair.prod'(X17,X18),X20)))) ) | $spl7),
  inference(superposition,[],[f1935,f134])).
fof(f3938,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f106])).
fof(f3666,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f102])).
fof(f3360,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f101])).
fof(f3279,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.ast.word_size','type.ast.lit'),bool),happ(s(fun(fun('type.ast.word_size',fun('type.ast.lit',bool)),fun('type.pair.prod'('type.ast.word_size','type.ast.lit'),bool)),'const.pair.UNCURRY_0'),s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X1),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))))) )),
  inference(unit_resulting_resolution,[],[f134,f3272])).
fof(f3273,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X56) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X53))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X54),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X55))))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f3247,f90])).
fof(f3247,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X56) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X53))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X54),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X55))))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f506,f3129])).
fof(f3272,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X42),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X43))))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f3244,f90])).
fof(f3244,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X42),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X43))))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f3129])).
fof(f3209,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f110])).
fof(f3129,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X1),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))))) )),
  inference(unit_resulting_resolution,[],[f135,f2536])).
fof(f3045,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.ast.word_size','type.ast.lit'),bool),happ(s(fun(fun('type.ast.word_size',fun('type.ast.lit',bool)),fun('type.pair.prod'('type.ast.word_size','type.ast.lit'),bool)),'const.pair.UNCURRY_0'),s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X1),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))))) )),
  inference(unit_resulting_resolution,[],[f134,f2844])).
fof(f2964,plain,(
  ( ! [X127,X132,X130,X128,X133,X131,X129] : (s(X128,happ(s(fun(X127,X128),'const.pair.UNCURRY_2'(s(fun(X129,fun(X130,fun(X127,X128))),X131),s('type.pair.prod'(X129,X130),X132))),s(X127,X133))) = s(X128,'const.pair.UNCURRY_2'(s(fun('type.pair.prod'(X129,X130),fun(X127,X128)),happ(s(fun(fun(X129,fun(X130,fun(X127,X128))),fun('type.pair.prod'(X129,X130),fun(X127,X128))),'const.pair.UNCURRY_0'),s(fun(X129,fun(X130,fun(X127,X128))),X131))),s('type.pair.prod'('type.pair.prod'(X129,X130),X127),'const.pair.,_2'(s('type.pair.prod'(X129,X130),X132),s(X127,X133)))))) )),
  inference(superposition,[],[f135,f134])).
fof(f2941,plain,(
  ( ! [X57,X54,X56,X55] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X54,fun(X55,'type.ast.word_size')),X56),s('type.pair.prod'(X54,X55),X57))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',happ(s(fun('type.pair.prod'(X54,X55),'type.ast.word_size'),happ(s(fun(fun(X54,fun(X55,'type.ast.word_size')),fun('type.pair.prod'(X54,X55),'type.ast.word_size')),'const.pair.UNCURRY_0'),s(fun(X54,fun(X55,'type.ast.word_size')),X56))),s('type.pair.prod'(X54,X55),X57)))) )),
  inference(superposition,[],[f134,f94])).
fof(f2939,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s('type.ast.word_size',X48) = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X44,fun(X45,'type.ast.word_size')),X46),s('type.pair.prod'(X44,X45),X47))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',happ(s(fun('type.pair.prod'(X44,X45),'type.ast.word_size'),happ(s(fun(fun(X44,fun(X45,'type.ast.word_size')),fun('type.pair.prod'(X44,X45),'type.ast.word_size')),'const.pair.UNCURRY_0'),s(fun(X44,fun(X45,'type.ast.word_size')),X46))),s('type.pair.prod'(X44,X45),X47))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X48)) )),
  inference(superposition,[],[f134,f196])).
fof(f2937,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X34,fun(X35,'type.ast.word_size')),X36),s('type.pair.prod'(X34,X35),X37))) | s('type.ast.word_size',X38) = s('type.ast.word_size',happ(s(fun('type.pair.prod'(X34,X35),'type.ast.word_size'),happ(s(fun(fun(X34,fun(X35,'type.ast.word_size')),fun('type.pair.prod'(X34,X35),'type.ast.word_size')),'const.pair.UNCURRY_0'),s(fun(X34,fun(X35,'type.ast.word_size')),X36))),s('type.pair.prod'(X34,X35),X37))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X38)) )),
  inference(superposition,[],[f134,f196])).
fof(f2924,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.ast.word_size','type.ast.lit'),bool),happ(s(fun(fun('type.ast.word_size',fun('type.ast.lit',bool)),fun('type.pair.prod'('type.ast.word_size','type.ast.lit'),bool)),'const.pair.UNCURRY_0'),s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X1),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))))) )),
  inference(unit_resulting_resolution,[],[f134,f2708])).
fof(f2845,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X56) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X53))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X54),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X55))))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2822,f90])).
fof(f2822,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X56) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X53))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X54),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X55))))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f506,f2715])).
fof(f2844,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X42),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f2819,f90])).
fof(f2819,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X42),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f2715])).
fof(f2788,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f109])).
fof(f2715,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X1),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))))) )),
  inference(unit_resulting_resolution,[],[f135,f2427])).
fof(f2709,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X56) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X53))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X54),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X55))))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2687,f90])).
fof(f2687,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X56) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X53))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X54),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X55))))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f506,f2581])).
fof(f2708,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X42),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X43))))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f2684,f90])).
fof(f2684,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X41))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X42),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X43))))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f2581])).
fof(f2653,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f100])).
fof(f2581,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X1),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))))) )),
  inference(unit_resulting_resolution,[],[f135,f2320])).
fof(f2537,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X60) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X57))),s('type.ast.word_size',X58))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X59))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f2517,f90])).
fof(f2517,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X57))),s('type.ast.word_size',X58))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X59))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f506,f2434])).
fof(f2536,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X48) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X45))),s('type.ast.word_size',X46))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f2514,f90])).
fof(f2514,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X48) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X45))),s('type.ast.word_size',X46))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f177,f2434])).
fof(f2483,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(bool,X72) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size',X70))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X71))))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f2463,f90])).
fof(f2463,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size',X70))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X71))))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f506,f1950])).
fof(f2482,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X56))))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2460,f90])).
fof(f2460,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X56))))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f177,f1950])).
fof(f2434,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size',X1))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))) )),
  inference(superposition,[],[f1950,f132])).
fof(f2429,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f108])).
fof(f2428,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X60) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X57))),s('type.ast.word_size',X58))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X59))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f2408,f90])).
fof(f2408,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X57))),s('type.ast.word_size',X58))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X59))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f506,f2327])).
fof(f2427,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X48) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X45))),s('type.ast.word_size',X46))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f2405,f90])).
fof(f2405,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X48) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X45))),s('type.ast.word_size',X46))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f177,f2327])).
fof(f2375,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(bool,X72) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size',X70))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X71))))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f2355,f90])).
fof(f2355,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size',X70))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X71))))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f506,f1949])).
fof(f2374,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X56))))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2352,f90])).
fof(f2352,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X56))))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f177,f1949])).
fof(f2327,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size',X1))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) )),
  inference(superposition,[],[f1949,f132])).
fof(f2322,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f107])).
fof(f2321,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X60) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X57))),s('type.ast.word_size',X58))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X59))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f2301,f90])).
fof(f2301,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X57))),s('type.ast.word_size',X58))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X59))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f506,f2220])).
fof(f2320,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X48) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X45))),s('type.ast.word_size',X46))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f2298,f90])).
fof(f2298,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X48) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X45))),s('type.ast.word_size',X46))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f177,f2220])).
fof(f2268,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(bool,X72) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size',X70))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X71))))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f2248,f90])).
fof(f2248,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X68),s('type.num.num',X69))))),s('type.ast.word_size',X70))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X71))))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f506,f1948])).
fof(f2267,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X56))))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2245,f90])).
fof(f2245,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X57) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X53),s('type.num.num',X54))))),s('type.ast.word_size',X55))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X56))))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f177,f1948])).
fof(f2220,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X0))),s('type.ast.word_size',X1))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f1948,f132])).
fof(f2215,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f99])).
fof(f2097,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.pair.,_2'(s('type.ast.opw',sK125('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw')),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),sK126('const.pair.,_2'(s('type.ast.opw',X0),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1))),s('type.ast.lit',X2)))))),'type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'type.ast.opw'))))) )),
  inference(unit_resulting_resolution,[],[f132,f98])).
fof(f1860,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',happ(s(fun(X60,'type.ast.word_size'),happ(s(fun(X59,fun(X60,'type.ast.word_size')),X61),s(X59,X62))),s(X60,X63))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X59,fun(X60,'type.ast.word_size')),X61),s('type.pair.prod'(X59,X60),'const.pair.,_2'(s(X59,X62),s(X60,X63)))))) )),
  inference(superposition,[],[f135,f94])).
fof(f1858,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s('type.ast.word_size',X52) = s('type.ast.word_size',happ(s(fun(X48,'type.ast.word_size'),happ(s(fun(X47,fun(X48,'type.ast.word_size')),X49),s(X47,X50))),s(X48,X51))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X47,fun(X48,'type.ast.word_size')),X49),s('type.pair.prod'(X47,X48),'const.pair.,_2'(s(X47,X50),s(X48,X51))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X52)) )),
  inference(superposition,[],[f135,f196])).
fof(f1856,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',happ(s(fun(X36,'type.ast.word_size'),happ(s(fun(X35,fun(X36,'type.ast.word_size')),X37),s(X35,X38))),s(X36,X39))) | s('type.ast.word_size',X40) = s('type.ast.word_size','const.pair.UNCURRY_2'(s(fun(X35,fun(X36,'type.ast.word_size')),X37),s('type.pair.prod'(X35,X36),'const.pair.,_2'(s(X35,X38),s(X36,X39))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X40)) )),
  inference(superposition,[],[f135,f196])).
fof(f1850,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X3,'const.pair.UNCURRY_2'(s(fun(X0,fun(X1,X3)),X4),s('type.pair.prod'(X0,X1),X2))) = s(X3,happ(s(fun(X1,X3),happ(s(fun(X0,fun(X1,X3)),X4),s(X0,sK125(X2,X1,X0)))),s(X1,sK126(X2,X1,X0))))) )),
  inference(superposition,[],[f135,f132])).
fof(f1947,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(backward_demodulation,[],[f1785,f1003])).
fof(f1946,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(backward_demodulation,[],[f1785,f1244])).
fof(f1945,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(backward_demodulation,[],[f1785,f714])).
fof(f1944,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | $spl7),
  inference(backward_demodulation,[],[f1785,f701])).
fof(f1935,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl7),
  inference(backward_demodulation,[],[f1785,f1389])).
fof(f1934,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl7),
  inference(backward_demodulation,[],[f1785,f1728])).
fof(f1728,plain,(
  ( ! [X0,X1] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0) | s(bool,X1) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X1)) ) | $spl7),
  inference(subsumption_resolution,[],[f1716,f90])).
fof(f1716,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0) | s(bool,X1) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X1)) ) | $spl7),
  inference(superposition,[],[f702,f175])).
fof(f1607,plain,(
  ( ! [X37,X35,X36] : (s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',f(s(X35,sK127(X36,X37,'type.ast.word_size',X35)))) | s(fun(X35,'type.ast.word_size'),X36) = s(fun(X35,'type.ast.word_size'),X37) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',g(s(X35,sK127(X36,X37,'type.ast.word_size',X35))))) )),
  inference(superposition,[],[f133,f94])).
fof(f1605,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.ast.word_size',X30) != s('type.ast.word_size',f(s(X27,sK127(X28,X29,'type.ast.word_size',X27)))) | s(fun(X27,'type.ast.word_size'),X28) = s(fun(X27,'type.ast.word_size'),X29) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',g(s(X27,sK127(X28,X29,'type.ast.word_size',X27)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X30)) )),
  inference(superposition,[],[f133,f196])).
fof(f1603,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',f(s(X19,sK127(X20,X21,'type.ast.word_size',X19)))) | s(fun(X19,'type.ast.word_size'),X20) = s(fun(X19,'type.ast.word_size'),X21) | s('type.ast.word_size',X22) = s('type.ast.word_size',g(s(X19,sK127(X20,X21,'type.ast.word_size',X19)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X22)) )),
  inference(superposition,[],[f133,f196])).
fof(f1597,plain,(
  ( ! [X37,X35,X36] : (s(X37,f(s('type.ast.word_size','const.ast.W64_0'))) != s(X37,g(s('type.ast.word_size','const.ast.W64_0'))) | s(fun('type.ast.word_size',X37),X35) = s(fun('type.ast.word_size',X37),X36) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK127(X35,X36,X37,'type.ast.word_size'))) )),
  inference(superposition,[],[f133,f94])).
fof(f1595,plain,(
  ( ! [X30,X28,X29,X27] : (s(X29,f(s('type.ast.word_size',X30))) != s(X29,g(s('type.ast.word_size',X30))) | s(fun('type.ast.word_size',X29),X27) = s(fun('type.ast.word_size',X29),X28) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK127(X27,X28,X29,'type.ast.word_size')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X30)) )),
  inference(superposition,[],[f133,f196])).
fof(f1593,plain,(
  ( ! [X21,X19,X22,X20] : (s(X21,f(s('type.ast.word_size','const.ast.W8_0'))) != s(X21,g(s('type.ast.word_size','const.ast.W8_0'))) | s(fun('type.ast.word_size',X21),X19) = s(fun('type.ast.word_size',X21),X20) | s('type.ast.word_size',X22) = s('type.ast.word_size',sK127(X19,X20,X21,'type.ast.word_size')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X22)) )),
  inference(superposition,[],[f133,f196])).
fof(f1590,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK127(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f133,f175])).
fof(f1588,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK127(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f133,f175])).
fof(f1543,plain,(
  ( ! [X26,X24,X25] : (s(bool,X25) = s(bool,happ(s(fun(fun(X24,fun(X24,bool)),bool),'const.relation.WF_0'),s(fun(X24,fun(X24,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f1528,f90])).
fof(f1528,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X25) = s(bool,happ(s(fun(fun(X24,fun(X24,bool)),bool),'const.relation.WF_0'),s(fun(X24,fun(X24,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f506,f1475])).
fof(f1542,plain,(
  ( ! [X19,X18] : (s(bool,X19) != s(bool,happ(s(fun(fun(X18,fun(X18,bool)),bool),'const.relation.WF_0'),s(fun(X18,fun(X18,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f1525,f90])).
fof(f1525,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,happ(s(fun(fun(X18,fun(X18,bool)),bool),'const.relation.WF_0'),s(fun(X18,fun(X18,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f177,f1475])).
fof(f1475,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,fun(X0,bool)),bool),'const.relation.WF_0'),s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(unit_resulting_resolution,[],[f125,f241])).
fof(f1473,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X40))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X41))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X42))))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f1444,f90])).
fof(f1444,plain,(
  ( ! [X43,X41,X44,X42,X40] : (~p(s(bool,'T_0')) | s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X40))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X41))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X42))))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f506,f951])).
fof(f1472,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,X38) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X35))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X36))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X37))))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(subsumption_resolution,[],[f1443,f90])).
fof(f1443,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,'T_0')) | s(bool,X38) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X35))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X36))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X37))))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f506,f857])).
fof(f1471,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,X33) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X30))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X31))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X32))))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f1442,f90])).
fof(f1442,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X33) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X30))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X31))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X32))))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f506,f763])).
fof(f1389,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl7),
  inference(superposition,[],[f701,f94])).
fof(f1350,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X2),s('type.ast.word_size',X0))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f140,f94])).
fof(f1308,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl7),
  inference(superposition,[],[f700,f94])).
fof(f1245,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X2),s('type.ast.word_size',X0))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(superposition,[],[f139,f196])).
fof(f1244,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(unit_resulting_resolution,[],[f139,f118])).
fof(f107,plain,(
  ( ! [X26,X0,X27,X25] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))),s('type.ast.lit',X27)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : (~sP0(X0) | (! [X52,X53,X54] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X53))),s('type.ast.lit',X54))))))) & ! [X49,X50,X51] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X50))),s('type.ast.lit',X51))))))) & ! [X46,X47,X48] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))),s('type.ast.lit',X48))))))) & ! [X43,X44,X45] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X44))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X45))))))))) & ! [X40,X41,X42] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X41))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X42))))))))) & ! [X37,X38,X39] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X39))))))))) & ! [X34,X35,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36))))))))) & ! [X31,X32,X33] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X33))))))))) & ! [X28,X29,X30] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))),s('type.ast.lit',X30))))))) & ! [X25,X26,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))),s('type.ast.lit',X27))))))) & ! [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X23))),s('type.ast.lit',X24))))))) & ! [X19,X20,X21] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X20))),s('type.ast.lit',X21))))))) & ! [X16,X17,X18] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X17))),s('type.ast.lit',X18))))))) & ! [X13,X14,X15] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X15))))))))) & ! [X10,X11,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X12))))))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))))))) & ! [X4,X5,X6] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6))))))))) & ! [X1,X2,X3] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))))))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0] : (~sP0(X0) | (! [X52,X53,X54] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X53))),s('type.ast.lit',X54))))))) & ! [X49,X50,X51] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X50))),s('type.ast.lit',X51))))))) & ! [X46,X47,X48] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))),s('type.ast.lit',X48))))))) & ! [X43,X44,X45] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X44))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X45))))))))) & ! [X40,X41,X42] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X41))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X42))))))))) & ! [X37,X38,X39] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X39))))))))) & ! [X34,X35,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36))))))))) & ! [X31,X32,X33] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X33))))))))) & ! [X28,X29,X30] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))),s('type.ast.lit',X30))))))) & ! [X25,X26,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))),s('type.ast.lit',X27))))))) & ! [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X23))),s('type.ast.lit',X24))))))) & ! [X19,X20,X21] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X20))),s('type.ast.lit',X21))))))) & ! [X16,X17,X18] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X17))),s('type.ast.lit',X18))))))) & ! [X13,X14,X15] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X15))))))))) & ! [X10,X11,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X12))))))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))))))) & ! [X4,X5,X6] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6))))))))) & ! [X1,X2,X3] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f108,plain,(
  ( ! [X24,X0,X23,X22] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X23))),s('type.ast.lit',X24)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f109,plain,(
  ( ! [X0,X21,X19,X20] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X20))),s('type.ast.lit',X21)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f110,plain,(
  ( ! [X0,X17,X18,X16] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X17))),s('type.ast.lit',X18)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f111,plain,(
  ( ! [X0,X14,X15,X13] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X15)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f112,plain,(
  ( ! [X0,X12,X10,X11] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X12)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f113,plain,(
  ( ! [X0,X8,X7,X9] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f114,plain,(
  ( ! [X6,X4,X0,X5] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f115,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f116,plain,(
  ( ! [X0] : (sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK118(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK119(X0)))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK120(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK115(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK116(X0)))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK117(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK112(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK113(X0)))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK114(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK109(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK110(X0)))),s('type.ast.lit',sK111(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK106(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK107(X0)))),s('type.ast.lit',sK108(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK103(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK104(X0)))),s('type.ast.lit',sK105(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK100(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK101(X0)))),s('type.ast.lit',sK102(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK97(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK98(X0)))),s('type.ast.lit',sK99(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK94(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK95(X0)))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK96(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK91(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK92(X0)))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK93(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK88(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK89(X0)))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK90(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK85(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK86(X0)))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK87(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK82(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK83(X0)))),s('type.ast.lit',sK84(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK79(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK80(X0)))),s('type.ast.lit',sK81(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK76(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK77(X0)))),s('type.ast.lit',sK78(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK73(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK74(X0)))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK75(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK70(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK71(X0)))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK72(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK121(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK122(X0)))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK123(X0))))))))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : (sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK70(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK71(X0)))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK72(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK73(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK74(X0)))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK75(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK76(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK77(X0)))),s('type.ast.lit',sK78(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK79(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK80(X0)))),s('type.ast.lit',sK81(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK82(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK83(X0)))),s('type.ast.lit',sK84(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK85(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK86(X0)))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK87(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK88(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK89(X0)))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK90(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK91(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK92(X0)))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK93(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK94(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK95(X0)))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK96(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK97(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK98(X0)))),s('type.ast.lit',sK99(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK100(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK101(X0)))),s('type.ast.lit',sK102(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK103(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK104(X0)))),s('type.ast.lit',sK105(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK106(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK107(X0)))),s('type.ast.lit',sK108(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK109(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK110(X0)))),s('type.ast.lit',sK111(X0)))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK112(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK113(X0)))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK114(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK115(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK116(X0)))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK117(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK118(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK119(X0)))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK120(X0)))))))))) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',sK121(X0)),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK122(X0)))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK123(X0)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK70,sK71,sK72,sK73,sK74,sK75,sK76,sK77,sK78,sK79,sK80,sK81,sK82,sK83,sK84,sK85,sK86,sK87,sK88,sK89,sK90,sK91,sK92,sK93,sK94,sK95,sK96,sK97,sK98,sK99,sK100,sK101,sK102,sK103,sK104,sK105,sK106,sK107,sK108,sK109,sK110,sK111,sK112,sK113,sK114,sK115,sK116,sK117,sK118,sK119,sK120,sK121,sK122,sK123])],[f72])).
fof(f72,plain,(
  ! [X0] : (sP0(X0) | ? [X52,X53,X54] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X53))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X54))))))))) | ? [X49,X50,X51] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X50))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X51))))))))) | ? [X46,X47,X48] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X47))),s('type.ast.lit',X48))))))) | ? [X43,X44,X45] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X44))),s('type.ast.lit',X45))))))) | ? [X40,X41,X42] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X41))),s('type.ast.lit',X42))))))) | ? [X37,X38,X39] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X39))))))))) | ? [X34,X35,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36))))))))) | ? [X31,X32,X33] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33))))))))) | ? [X28,X29,X30] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X29))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X30))))))))) | ? [X25,X26,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))),s('type.ast.lit',X27))))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X23))),s('type.ast.lit',X24))))))) | ? [X19,X20,X21] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X20))),s('type.ast.lit',X21))))))) | ? [X16,X17,X18] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X17))),s('type.ast.lit',X18))))))) | ? [X13,X14,X15] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X14))),s('type.ast.lit',X15))))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X12))))))))) | ? [X7,X8,X9] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9))))))))) | ? [X4,X5,X6] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X6))))))))) | ? [X1,X2,X3] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))))))))),
  inference(rectify,[],[f63])).
fof(f63,plain,(
  ! [X0] : (sP0(X0) | ? [X106,X107,X108] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X106),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X107))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X108))))))))) | ? [X103,X104,X105] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X103),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X104))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X105))))))))) | ? [X100,X101,X102] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X100),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X101))),s('type.ast.lit',X102))))))) | ? [X97,X98,X99] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X97),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X98))),s('type.ast.lit',X99))))))) | ? [X94,X95,X96] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X94),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X95))),s('type.ast.lit',X96))))))) | ? [X91,X92,X93] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X91),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X92))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X93))))))))) | ? [X88,X89,X90] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X88),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X89))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X90))))))))) | ? [X85,X86,X87] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X85),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X86))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X87))))))))) | ? [X82,X83,X84] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X82),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X83))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X84))))))))) | ? [X79,X80,X81] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X79),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X80))),s('type.ast.lit',X81))))))) | ? [X76,X77,X78] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X76),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X77))),s('type.ast.lit',X78))))))) | ? [X73,X74,X75] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X73),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X74))),s('type.ast.lit',X75))))))) | ? [X70,X71,X72] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X70),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X71))),s('type.ast.lit',X72))))))) | ? [X67,X68,X69] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X67),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))),s('type.ast.lit',X69))))))) | ? [X64,X65,X66] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X64),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X65))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X66))))))))) | ? [X61,X62,X63] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X61),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X62))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X63))))))))) | ? [X58,X59,X60] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X58),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X59))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X60))))))))) | ? [X55,X56,X57] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X55),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X56))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X57))))))))))),
  inference(definition_folding,[],[f57,f62])).
fof(f57,plain,(
  ! [X0] : ((! [X52,X53,X54] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X53))),s('type.ast.lit',X54))))))) & ! [X49,X50,X51] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X50))),s('type.ast.lit',X51))))))) & ! [X46,X47,X48] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))),s('type.ast.lit',X48))))))) & ! [X43,X44,X45] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X44))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X45))))))))) & ! [X40,X41,X42] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X41))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X42))))))))) & ! [X37,X38,X39] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X39))))))))) & ! [X34,X35,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36))))))))) & ! [X31,X32,X33] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X33))))))))) & ! [X28,X29,X30] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))),s('type.ast.lit',X30))))))) & ! [X25,X26,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))),s('type.ast.lit',X27))))))) & ! [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X23))),s('type.ast.lit',X24))))))) & ! [X19,X20,X21] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X20))),s('type.ast.lit',X21))))))) & ! [X16,X17,X18] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X17))),s('type.ast.lit',X18))))))) & ! [X13,X14,X15] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X15))))))))) & ! [X10,X11,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X12))))))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))))))) & ! [X4,X5,X6] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6))))))))) & ! [X1,X2,X3] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))))))) | ? [X106,X107,X108] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X106),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X107))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X108))))))))) | ? [X103,X104,X105] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X103),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X104))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X105))))))))) | ? [X100,X101,X102] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X100),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X101))),s('type.ast.lit',X102))))))) | ? [X97,X98,X99] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X97),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X98))),s('type.ast.lit',X99))))))) | ? [X94,X95,X96] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X94),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X95))),s('type.ast.lit',X96))))))) | ? [X91,X92,X93] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X91),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X92))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X93))))))))) | ? [X88,X89,X90] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X88),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X89))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X90))))))))) | ? [X85,X86,X87] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X85),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X86))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X87))))))))) | ? [X82,X83,X84] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X82),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X83))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X84))))))))) | ? [X79,X80,X81] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X79),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X80))),s('type.ast.lit',X81))))))) | ? [X76,X77,X78] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X76),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X77))),s('type.ast.lit',X78))))))) | ? [X73,X74,X75] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X73),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X74))),s('type.ast.lit',X75))))))) | ? [X70,X71,X72] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X70),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X71))),s('type.ast.lit',X72))))))) | ? [X67,X68,X69] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X67),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))),s('type.ast.lit',X69))))))) | ? [X64,X65,X66] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X64),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X65))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X66))))))))) | ? [X61,X62,X63] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X61),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X62))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X63))))))))) | ? [X58,X59,X60] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X58),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X59))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X60))))))))) | ? [X55,X56,X57] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X55),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X56))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X57))))))))))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((! [X52,X53,X54] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X53))),s('type.ast.lit',X54))))))) & ! [X49,X50,X51] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X50))),s('type.ast.lit',X51))))))) & ! [X46,X47,X48] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))),s('type.ast.lit',X48))))))) & ! [X43,X44,X45] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X44))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X45))))))))) & ! [X40,X41,X42] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X41))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X42))))))))) & ! [X37,X38,X39] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X39))))))))) & ! [X34,X35,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36))))))))) & ! [X31,X32,X33] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X33))))))))) & ! [X28,X29,X30] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))),s('type.ast.lit',X30))))))) & ! [X25,X26,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))),s('type.ast.lit',X27))))))) & ! [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X23))),s('type.ast.lit',X24))))))) & ! [X19,X20,X21] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X20))),s('type.ast.lit',X21))))))) & ! [X16,X17,X18] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X17))),s('type.ast.lit',X18))))))) & ! [X13,X14,X15] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X15))))))))) & ! [X10,X11,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X12))))))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))))))) & ! [X4,X5,X6] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6))))))))) & ! [X1,X2,X3] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))))))) | (? [X106,X107,X108] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X106),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X107))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X108))))))))) | ? [X103,X104,X105] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X103),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X104))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X105))))))))) | ? [X100,X101,X102] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X100),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X101))),s('type.ast.lit',X102))))))) | ? [X97,X98,X99] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X97),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X98))),s('type.ast.lit',X99))))))) | ? [X94,X95,X96] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X94),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X95))),s('type.ast.lit',X96))))))) | ? [X91,X92,X93] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X91),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X92))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X93))))))))) | ? [X88,X89,X90] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X88),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X89))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X90))))))))) | ? [X85,X86,X87] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X85),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X86))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X87))))))))) | ? [X82,X83,X84] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X82),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X83))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X84))))))))) | ? [X79,X80,X81] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X79),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X80))),s('type.ast.lit',X81))))))) | ? [X76,X77,X78] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X76),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X77))),s('type.ast.lit',X78))))))) | ? [X73,X74,X75] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X73),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X74))),s('type.ast.lit',X75))))))) | ? [X70,X71,X72] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X70),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X71))),s('type.ast.lit',X72))))))) | ? [X67,X68,X69] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X67),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))),s('type.ast.lit',X69))))))) | ? [X64,X65,X66] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X64),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X65))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X66))))))))) | ? [X61,X62,X63] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X61),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X62))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X63))))))))) | ? [X58,X59,X60] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X58),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X59))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X60))))))))) | ? [X55,X56,X57] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X55),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X56))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X57)))))))))))),
  inference(ennf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : ((? [X52,X53,X54] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X53))),s('type.ast.lit',X54))))))) | ? [X49,X50,X51] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X50))),s('type.ast.lit',X51))))))) | ? [X46,X47,X48] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))),s('type.ast.lit',X48))))))) | ? [X43,X44,X45] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X44))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X45))))))))) | ? [X40,X41,X42] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X41))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X42))))))))) | ? [X37,X38,X39] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X39))))))))) | ? [X34,X35,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36))))))))) | ? [X31,X32,X33] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X33))))))))) | ? [X28,X29,X30] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))),s('type.ast.lit',X30))))))) | ? [X25,X26,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X25),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))),s('type.ast.lit',X27))))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X23))),s('type.ast.lit',X24))))))) | ? [X19,X20,X21] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X19),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X20))),s('type.ast.lit',X21))))))) | ? [X16,X17,X18] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X16),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X17))),s('type.ast.lit',X18))))))) | ? [X13,X14,X15] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X13),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X15))))))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X10),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X12))))))))) | ? [X7,X8,X9] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X7),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))))))) | ? [X4,X5,X6] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X4),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6))))))))) | ? [X1,X2,X3] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X1),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))))))) => (? [X106,X107,X108] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X106),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X107))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X108))))))))) | ? [X103,X104,X105] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X103),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X104))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X105))))))))) | ? [X100,X101,X102] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X100),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X101))),s('type.ast.lit',X102))))))) | ? [X97,X98,X99] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X97),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X98))),s('type.ast.lit',X99))))))) | ? [X94,X95,X96] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X94),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X95))),s('type.ast.lit',X96))))))) | ? [X91,X92,X93] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X91),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X92))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X93))))))))) | ? [X88,X89,X90] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X88),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X89))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X90))))))))) | ? [X85,X86,X87] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X85),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X86))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X87))))))))) | ? [X82,X83,X84] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X82),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X83))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X84))))))))) | ? [X79,X80,X81] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X79),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X80))),s('type.ast.lit',X81))))))) | ? [X76,X77,X78] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X76),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X77))),s('type.ast.lit',X78))))))) | ? [X73,X74,X75] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X73),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X74))),s('type.ast.lit',X75))))))) | ? [X70,X71,X72] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X70),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X71))),s('type.ast.lit',X72))))))) | ? [X67,X68,X69] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X67),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))),s('type.ast.lit',X69))))))) | ? [X64,X65,X66] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X64),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X65))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X66))))))))) | ? [X61,X62,X63] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X61),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X62))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X63))))))))) | ? [X58,X59,X60] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X58),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X59))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X60))))))))) | ? [X55,X56,X57] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X55),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X56))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X57)))))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X54] : ((? [X22,X25,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X25))),s('type.ast.lit',X12))))))) | ? [X22,X13,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13))),s('type.ast.lit',X12))))))) | ? [X22,X14,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))),s('type.ast.lit',X12))))))) | ? [X22,X15,X26] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))))))))) | ? [X22,X15,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X27))))))))) | ? [X22,X15,X28] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X28))))))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X23))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X24))))))))) | ? [X22,X15,X29] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))))))))) | ? [X22,X16,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X16))),s('type.ast.lit',X12))))))) | ? [X22,X30,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X30))),s('type.ast.lit',X12))))))) | ? [X22,X31,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X31))),s('type.ast.lit',X12))))))) | ? [X22,X32,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X32))),s('type.ast.lit',X12))))))) | ? [X22,X33,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))),s('type.ast.lit',X12))))))) | ? [X22,X34,X35] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35))))))))) | ? [X22,X34,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36))))))))) | ? [X22,X34,X37] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X37))))))))) | ? [X22,X34,X38] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))))))) => (? [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X23))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X24))))))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24))))))))) | ? [X22,X25,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X25))),s('type.ast.lit',X12))))))) | ? [X22,X13,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13))),s('type.ast.lit',X12))))))) | ? [X22,X14,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))),s('type.ast.lit',X12))))))) | ? [X22,X15,X26] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))))))))) | ? [X22,X15,X27] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X27))))))))) | ? [X22,X15,X28] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X28))))))))) | ? [X22,X15,X29] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))))))))) | ? [X22,X16,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X16))),s('type.ast.lit',X12))))))) | ? [X22,X30,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X30))),s('type.ast.lit',X12))))))) | ? [X22,X31,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X31))),s('type.ast.lit',X12))))))) | ? [X22,X32,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X32))),s('type.ast.lit',X12))))))) | ? [X22,X33,X12] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))),s('type.ast.lit',X12))))))) | ? [X22,X34,X35] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35))))))))) | ? [X22,X34,X36] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36))))))))) | ? [X22,X34,X37] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X37))))))))) | ? [X22,X34,X38] : s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X54) = s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X22),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38)))))))))))),
  file('thm.evalProps.do_shift_ind','thm.evalProps.evalProps_8_prove_ltb')).
fof(f163,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4))))) )),
  inference(forward_demodulation,[],[f162,f135])).
fof(f162,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f161,f135])).
fof(f161,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f160,f135])).
fof(f160,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f159,f135])).
fof(f159,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f158,f135])).
fof(f158,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f157,f135])).
fof(f157,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f156,f135])).
fof(f156,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f155,f135])).
fof(f155,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f154,f135])).
fof(f154,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f153,f135])).
fof(f153,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f152,f135])).
fof(f152,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f151,f135])).
fof(f151,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f150,f135])).
fof(f150,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f149,f135])).
fof(f149,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f148,f135])).
fof(f148,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f147,f135])).
fof(f147,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f146,f135])).
fof(f146,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(forward_demodulation,[],[f145,f135])).
fof(f145,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X2),s('type.ast.lit',X3))))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(backward_demodulation,[],[f135,f97])).
fof(f654,plain,(
  ( ! [X26,X27] : (s('type.pair.prod'('type.ast.word_size',X27),X26) = s('type.pair.prod'('type.ast.word_size',X27),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s(X27,sK126(X26,X27,'type.ast.word_size')))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK125(X26,X27,'type.ast.word_size'))) )),
  inference(superposition,[],[f132,f94])).
fof(f664,plain,(
  ( ! [X26,X27] : (s('type.pair.prod'(X27,'type.ast.word_size'),X26) = s('type.pair.prod'(X27,'type.ast.word_size'),'const.pair.,_2'(s(X27,sK125(X26,'type.ast.word_size',X27)),s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK126(X26,'type.ast.word_size',X27))) )),
  inference(superposition,[],[f132,f94])).
fof(f700,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5))) | $spl7),
  inference(unit_resulting_resolution,[],[f262,f122])).
fof(f701,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5))) | $spl7),
  inference(unit_resulting_resolution,[],[f262,f117])).
fof(f714,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(subsumption_resolution,[],[f708,f90])).
fof(f708,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(superposition,[],[f262,f175])).
fof(f652,plain,(
  ( ! [X21,X22,X20] : (s('type.pair.prod'('type.ast.word_size',X21),X20) = s('type.pair.prod'('type.ast.word_size',X21),'const.pair.,_2'(s('type.ast.word_size',X22),s(X21,sK126(X20,X21,'type.ast.word_size')))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK125(X20,X21,'type.ast.word_size')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X22)) )),
  inference(superposition,[],[f132,f196])).
fof(f650,plain,(
  ( ! [X14,X15,X16] : (s('type.pair.prod'('type.ast.word_size',X15),X14) = s('type.pair.prod'('type.ast.word_size',X15),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s(X15,sK126(X14,X15,'type.ast.word_size')))) | s('type.ast.word_size',X16) = s('type.ast.word_size',sK125(X14,X15,'type.ast.word_size')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X16)) )),
  inference(superposition,[],[f132,f196])).
fof(f662,plain,(
  ( ! [X21,X22,X20] : (s('type.pair.prod'(X21,'type.ast.word_size'),X20) = s('type.pair.prod'(X21,'type.ast.word_size'),'const.pair.,_2'(s(X21,sK125(X20,'type.ast.word_size',X21)),s('type.ast.word_size',X22))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK126(X20,'type.ast.word_size',X21)) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X22)) )),
  inference(superposition,[],[f132,f196])).
fof(f660,plain,(
  ( ! [X14,X15,X16] : (s('type.pair.prod'(X15,'type.ast.word_size'),X14) = s('type.pair.prod'(X15,'type.ast.word_size'),'const.pair.,_2'(s(X15,sK125(X14,'type.ast.word_size',X15)),s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.word_size',X16) = s('type.ast.word_size',sK126(X14,'type.ast.word_size',X15)) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X16)) )),
  inference(superposition,[],[f132,f196])).
fof(f1090,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X2),s('type.ast.word_size',X0))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3)))))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f141,f94])).
fof(f1058,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',sK4))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f1033,f164])).
fof(f1033,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',sK4))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f254,f175])).
fof(f1004,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X2),s('type.ast.word_size',X0))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3)))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X4)) )),
  inference(superposition,[],[f138,f196])).
fof(f1003,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X1),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(unit_resulting_resolution,[],[f138,f118])).
fof(f996,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X41))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X42))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f982,f90])).
fof(f982,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X41))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X42))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f951])).
fof(f951,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X1))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))) )),
  inference(unit_resulting_resolution,[],[f918,f118])).
fof(f918,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X0))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2))))))) )),
  inference(superposition,[],[f144,f132])).
fof(f902,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X41))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X42))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f888,f90])).
fof(f888,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X41))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X42))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f857])).
fof(f857,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X1))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) )),
  inference(unit_resulting_resolution,[],[f824,f118])).
fof(f824,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X0))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2))))))) )),
  inference(superposition,[],[f143,f132])).
fof(f808,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X41))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X42))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f794,f90])).
fof(f794,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X41))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X42))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X43))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f763])).
fof(f763,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X0))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X1))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))) )),
  inference(unit_resulting_resolution,[],[f730,f118])).
fof(f730,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X1))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X0))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2))))))) )),
  inference(superposition,[],[f142,f132])).
fof(f702,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl7),
  inference(superposition,[],[f262,f94])).
fof(f533,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size',X1) = s('type.ast.word_size',X2) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2) | s('type.ast.word_size',X0) = s('type.ast.word_size',X3) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X3)) )),
  inference(superposition,[],[f196,f196])).
fof(f507,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f353,f90])).
fof(f353,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f177,f175])).
fof(f284,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f175,f175])).
fof(f254,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',sK4))))),s('type.ast.lit',sK5)))),
  inference(unit_resulting_resolution,[],[f137,f122])).
fof(f241,plain,(
  ( ! [X4,X5] : (s(bool,X5) != s(bool,'const.relation.WF_1'(s(fun(X4,fun(X4,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f240,f90])).
fof(f240,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) != s(bool,'const.relation.WF_1'(s(fun(X4,fun(X4,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f177,f166])).
fof(f211,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f208,f91])).
fof(f208,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f128,f93])).
fof(f139,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X5))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X6),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))))))) )),
  inference(backward_demodulation,[],[f135,f88])).
fof(f138,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X26))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',X27),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X28))))))) )),
  inference(backward_demodulation,[],[f135,f82])).
fof(f134,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),X4))) = s(X0,happ(s(fun('type.pair.prod'(X1,X2),X0),happ(s(fun(fun(X1,fun(X2,X0)),fun('type.pair.prod'(X1,X2),X0)),'const.pair.UNCURRY_0'),s(fun(X1,fun(X2,X0)),X3))),s('type.pair.prod'(X1,X2),X4)))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),X4))) = s(X0,happ(s(fun('type.pair.prod'(X1,X2),X0),happ(s(fun(fun(X1,fun(X2,X0)),fun('type.pair.prod'(X1,X2),X0)),'const.pair.UNCURRY_0'),s(fun(X1,fun(X2,X0)),X3))),s('type.pair.prod'(X1,X2),X4)))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),X4))) = s(X0,happ(s(fun('type.pair.prod'(X1,X2),X0),happ(s(fun(fun(X1,fun(X2,X0)),fun('type.pair.prod'(X1,X2),X0)),'const.pair.UNCURRY_0'),s(fun(X1,fun(X2,X0)),X3))),s('type.pair.prod'(X1,X2),X4)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X43,X44,X45] : ! [X46,X47] : s(X43,'const.pair.UNCURRY_2'(s(fun(X44,fun(X45,X43)),X46),s('type.pair.prod'(X44,X45),X47))) = s(X43,happ(s(fun('type.pair.prod'(X44,X45),X43),happ(s(fun(fun(X44,fun(X45,X43)),fun('type.pair.prod'(X44,X45),X43)),'const.pair.UNCURRY_0'),s(fun(X44,fun(X45,X43)),X46))),s('type.pair.prod'(X44,X45),X47)))),
  file('thm.evalProps.do_shift_ind','ARITY_0_2_const.pair.UNCURRY')).
fof(f133,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK127(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK127(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK127(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK127(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK127])],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.evalProps.do_shift_ind',aHL_EXT)).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK125(X2,X1,X0)),s(X1,sK126(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK125(X2,X1,X0)),s(X1,sK126(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK125,sK126])],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X44,X45] : ! [X49] : ? [X51,X52] : s('type.pair.prod'(X44,X45),X49) = s('type.pair.prod'(X44,X45),'const.pair.,_2'(s(X44,X51),s(X45,X52)))),
  file('thm.evalProps.do_shift_ind','thm.pair.ABS_PAIR_THM')).
fof(f128,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f60])).
fof(f98,plain,(
  ( ! [X0,X54,X52,X53] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X52),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X53))),s('type.ast.lit',X54)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f99,plain,(
  ( ! [X0,X50,X51,X49] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X49),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X50))),s('type.ast.lit',X51)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f100,plain,(
  ( ! [X0,X47,X48,X46] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X46),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X47))),s('type.ast.lit',X48)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f101,plain,(
  ( ! [X0,X45,X43,X44] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X43),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X44))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X45)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f102,plain,(
  ( ! [X0,X41,X42,X40] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X40),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X41))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X42)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f103,plain,(
  ( ! [X39,X37,X0,X38] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X37),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X39)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f104,plain,(
  ( ! [X35,X0,X36,X34] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X34),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f105,plain,(
  ( ! [X33,X0,X31,X32] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X31),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X33)))))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f106,plain,(
  ( ! [X30,X28,X0,X29] : (~sP0(X0) | s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),X0) != s('type.pair.prod'('type.ast.opw','type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit'))),'const.pair.,_2'(s('type.ast.opw',X28),s('type.pair.prod'('type.ast.word_size','type.pair.prod'('type.ast.lit','type.ast.lit')),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.pair.prod'('type.ast.lit','type.ast.lit'),'const.pair.,_2'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))),s('type.ast.lit',X30)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f97,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.ast.word_size',X2))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0)))))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK16(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK18(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK19(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK22(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK23(X0)))))),s('type.ast.lit',sK24(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK25(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK26(X0)))))),s('type.ast.lit',sK27(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK28(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK29(X0)))))),s('type.ast.lit',sK30(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK31(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK32(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK33(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK34(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK35(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK36(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK37(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK38(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK39(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK40(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK41(X0)))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK42(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK43(X0)))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK44(X0)))))),s('type.ast.lit',sK45(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK46(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK47(X0)))))),s('type.ast.lit',sK48(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK49(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK50(X0)))))),s('type.ast.lit',sK51(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK52(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK53(X0)))))),s('type.ast.lit',sK54(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK55(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK56(X0)))))),s('type.ast.lit',sK57(X0))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK58(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK59(X0)))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK60(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK61(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK62(X0)))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK63(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK64(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK65(X0)))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK66(X0))))))) | ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',sK67(X0)))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK68(X0)))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK69(X0))))))) | ! [X1,X2,X3,X4] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.ast.word_size',X2))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38,sK39,sK40,sK41,sK42,sK43,sK44,sK45,sK46,sK47,sK48,sK49,sK50,sK51,sK52,sK53,sK54,sK55,sK56,sK57,sK58,sK59,sK60,sK61,sK62,sK63,sK64,sK65,sK66,sK67,sK68,sK69])],[f69])).
fof(f69,plain,(
  ! [X0] : (? [X56,X57,X58] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X56))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X57))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X58)))))) | ? [X53,X54,X55] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X53))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X54))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X55)))))) | ? [X50,X51,X52] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X50))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X51))))),s('type.ast.lit',X52)))) | ? [X47,X48,X49] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X47))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X48))))),s('type.ast.lit',X49)))) | ? [X44,X45,X46] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X44))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X45))))),s('type.ast.lit',X46)))) | ? [X41,X42,X43] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X41))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X42))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X43)))))) | ? [X38,X39,X40] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X38))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X39))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X40)))))) | ? [X35,X36,X37] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X35))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X36))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X37)))))) | ? [X32,X33,X34] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X32))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34)))))) | ? [X29,X30,X31] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X29))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X30))))),s('type.ast.lit',X31)))) | ? [X26,X27,X28] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X26))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X27))))),s('type.ast.lit',X28)))) | ? [X23,X24,X25] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X23))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X24))))),s('type.ast.lit',X25)))) | ? [X20,X21,X22] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X20))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X21))))),s('type.ast.lit',X22)))) | ? [X17,X18,X19] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X17))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X18))))),s('type.ast.lit',X19)))) | ? [X14,X15,X16] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X14))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X16)))))) | ? [X11,X12,X13] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X11))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13)))))) | ? [X8,X9,X10] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X8))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10)))))) | ? [X5,X6,X7] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X5))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X7)))))) | ! [X1,X2,X3,X4] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.ast.word_size',X2))),s('type.ast.lit',X3))),s('type.ast.lit',X4)))))),
  inference(rectify,[],[f55])).
fof(f55,plain,(
  ! [X0] : (? [X52,X53,X54] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X52))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X53))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X54)))))) | ? [X49,X50,X51] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X49))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X50))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X51)))))) | ? [X46,X47,X48] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X46))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X47))))),s('type.ast.lit',X48)))) | ? [X43,X44,X45] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X43))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X44))))),s('type.ast.lit',X45)))) | ? [X40,X41,X42] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X40))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X41))))),s('type.ast.lit',X42)))) | ? [X37,X38,X39] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X37))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X39)))))) | ? [X34,X35,X36] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X34))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36)))))) | ? [X31,X32,X33] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X31))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33)))))) | ? [X28,X29,X30] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X28))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X29))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X30)))))) | ? [X25,X26,X27] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X25))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))))),s('type.ast.lit',X27)))) | ? [X22,X23,X24] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X23))))),s('type.ast.lit',X24)))) | ? [X19,X20,X21] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X19))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X20))))),s('type.ast.lit',X21)))) | ? [X16,X17,X18] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X16))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X17))))),s('type.ast.lit',X18)))) | ? [X13,X14,X15] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X13))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X14))))),s('type.ast.lit',X15)))) | ? [X10,X11,X12] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X10))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X12)))))) | ? [X7,X8,X9] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X7))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9)))))) | ? [X4,X5,X6] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X4))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X6)))))) | ? [X1,X2,X3] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3)))))) | ! [X55,X56,X57,X58] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X55))),s('type.ast.word_size',X56))),s('type.ast.lit',X57))),s('type.ast.lit',X58)))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((? [X52,X53,X54] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X52))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X53))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X54)))))) | ? [X49,X50,X51] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X49))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X50))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X51)))))) | ? [X46,X47,X48] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X46))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X47))))),s('type.ast.lit',X48)))) | ? [X43,X44,X45] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X43))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X44))))),s('type.ast.lit',X45)))) | ? [X40,X41,X42] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X40))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X41))))),s('type.ast.lit',X42)))) | ? [X37,X38,X39] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X37))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X39)))))) | ? [X34,X35,X36] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X34))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36)))))) | ? [X31,X32,X33] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X31))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33)))))) | ? [X28,X29,X30] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X28))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X29))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X30)))))) | ? [X25,X26,X27] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X25))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))))),s('type.ast.lit',X27)))) | ? [X22,X23,X24] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X23))))),s('type.ast.lit',X24)))) | ? [X19,X20,X21] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X19))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X20))))),s('type.ast.lit',X21)))) | ? [X16,X17,X18] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X16))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X17))))),s('type.ast.lit',X18)))) | ? [X13,X14,X15] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X13))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X14))))),s('type.ast.lit',X15)))) | ? [X10,X11,X12] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X10))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X12)))))) | ? [X7,X8,X9] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X7))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9)))))) | ? [X4,X5,X6] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X4))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X6)))))) | ? [X1,X2,X3] : ~p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))))) | ! [X55,X56,X57,X58] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X55))),s('type.ast.word_size',X56))),s('type.ast.lit',X57))),s('type.ast.lit',X58)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : ((! [X52,X53,X54] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X52))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X53))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X54)))))) & ! [X49,X50,X51] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X49))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X50))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X51)))))) & ! [X46,X47,X48] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X46))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X47))))),s('type.ast.lit',X48)))) & ! [X43,X44,X45] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X43))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X44))))),s('type.ast.lit',X45)))) & ! [X40,X41,X42] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X40))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X41))))),s('type.ast.lit',X42)))) & ! [X37,X38,X39] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X37))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X39)))))) & ! [X34,X35,X36] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X34))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X35))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36)))))) & ! [X31,X32,X33] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X31))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33)))))) & ! [X28,X29,X30] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X28))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X29))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X30)))))) & ! [X25,X26,X27] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X25))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))))),s('type.ast.lit',X27)))) & ! [X22,X23,X24] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X23))))),s('type.ast.lit',X24)))) & ! [X19,X20,X21] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X19))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X20))))),s('type.ast.lit',X21)))) & ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X16))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X17))))),s('type.ast.lit',X18)))) & ! [X13,X14,X15] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X13))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X14))))),s('type.ast.lit',X15)))) & ! [X10,X11,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X10))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X12)))))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X7))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X4))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X6)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X1))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))))) => ! [X55,X56,X57,X58] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X0),s('type.ast.opw',X55))),s('type.ast.word_size',X56))),s('type.ast.lit',X57))),s('type.ast.lit',X58)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ((! [X22,X23,X24] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X23))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X24)))))) & ! [X22,X23,X24] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) & ! [X22,X25,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X25))))),s('type.ast.lit',X12)))) & ! [X22,X13,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13))))),s('type.ast.lit',X12)))) & ! [X22,X14,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))))),s('type.ast.lit',X12)))) & ! [X22,X15,X26] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26)))))) & ! [X22,X15,X27] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X27)))))) & ! [X22,X15,X28] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X28)))))) & ! [X22,X15,X29] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X15))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))))) & ! [X22,X16,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X16))))),s('type.ast.lit',X12)))) & ! [X22,X30,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X30))))),s('type.ast.lit',X12)))) & ! [X22,X31,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X31))))),s('type.ast.lit',X12)))) & ! [X22,X32,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X32))))),s('type.ast.lit',X12)))) & ! [X22,X33,X12] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X33))))),s('type.ast.lit',X12)))) & ! [X22,X34,X35] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35)))))) & ! [X22,X34,X36] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X36)))))) & ! [X22,X34,X37] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X37)))))) & ! [X22,X34,X38] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X22))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X34))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X38))))))) => ! [X18,X11,X12,X19] : p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.lit',fun('type.ast.lit',bool)),happ(s(fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool))),happ(s(fun('type.ast.opw',fun('type.ast.word_size',fun('type.ast.lit',fun('type.ast.lit',bool)))),X6),s('type.ast.opw',X18))),s('type.ast.word_size',X11))),s('type.ast.lit',X12))),s('type.ast.lit',X19)))))),
  file('thm.evalProps.do_shift_ind','thm.evalProps.do_word_op_ind')).
fof(f95,plain,(
  ( ! [X0] : (s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK10(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK9(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK8(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK7(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK6(X0))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0] : (s('type.ast.lit',X0) = s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK6(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK7(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK8(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK9(X0)))) | s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK10(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10])],[f27])).
fof(f27,plain,(
  ! [X0] : (? [X5] : s('type.ast.lit',X0) = s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X5))) | ? [X4] : s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X4))) | ? [X3] : s('type.ast.lit',X0) = s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3))) | ? [X2] : s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))) | ? [X1] : s('type.ast.lit',X0) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X56] : (? [X39] : s('type.ast.lit',X56) = s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X39))) | ? [X40] : s('type.ast.lit',X56) = s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X40))) | ? [X41] : s('type.ast.lit',X56) = s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X41))) | ? [X40] : s('type.ast.lit',X56) = s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X40))) | ? [X40] : s('type.ast.lit',X56) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))))),
  file('thm.evalProps.do_shift_ind','thm.ast.lit_nchotomy')).
fof(f82,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X26))),s('type.num.num',X27))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X28))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f88,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),happ(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X5))),s('type.num.num',X6))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f12017,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',X0),s('type.num.num',X1))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',X2)))) )),
  inference(unit_resulting_resolution,[],[f164,f11573,f8852])).
fof(f12058,plain,(
  $false | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f12018,f164])).
fof(f12018,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f11179,f11573,f8852])).
fof(f12019,plain,(
  $false | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f164,f11179,f11573,f8852])).
fof(f12016,plain,(
  $false | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f11179,f11179,f11179,f11573,f506])).
fof(f12014,plain,(
  $false | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f164,f164,f11179,f11573,f506])).
fof(f11996,plain,(
  $false | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f90,f11179,f11573,f131])).
fof(f11992,plain,(
  $false | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f90,f11179,f11573,f131])).
fof(f11987,plain,(
  $false | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f11179,f11573,f118])).
fof(f11146,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f11099,f91])).
fof(f11099,plain,(
  p(s(bool,'F_0')) | $spl10),
  inference(superposition,[],[f11022,f8099])).
fof(f8099,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | $spl10),
  inference(forward_demodulation,[],[f1056,f1785])).
fof(f11134,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f11049,f90])).
fof(f11049,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f10225,f11022,f131])).
fof(f10225,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | $spl4),
  inference(backward_demodulation,[],[f10222,f8100])).
fof(f10222,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4) | $spl4),
  inference(global_subsumption,[],[f89,f88,f87,f86,f85,f84,f83,f82,f90,f92,f93,f94,f95,f97,f106,f105,f104,f103,f102,f101,f100,f99,f98,f118,f117,f131,f128,f132,f133,f134,f135,f137,f138,f139,f141,f142,f143,f144,f164,f166,f175,f177,f196,f199,f211,f241,f255,f254,f256,f284,f506,f507,f533,f721,f730,f763,f808,f815,f824,f857,f902,f909,f918,f951,f996,f1003,f1004,f1028,f1029,f1030,f1031,f1058,f260,f1066,f1067,f1068,f1090,f660,f662,f650,f652,f1089,f664,f654,f163,f140,f116,f115,f114,f113,f112,f111,f110,f109,f108,f107,f1202,f1244,f1245,f1285,f1349,f1350,f1471,f1472,f1473,f1474,f1475,f1542,f1543,f1588,f1590,f1593,f1595,f1597,f1603,f1605,f1607,f1785,f1937,f1938,f1940,f1941,f1942,f1946,f1947,f1948,f1949,f1950,f1955,f1956,f1850,f1856,f1858,f1860,f2097,f2215,f2220,f2267,f2268,f2320,f2321,f2322,f2327,f2374,f2375,f2427,f2428,f2429,f2434,f2482,f2483,f2536,f2537,f2581,f2653,f2708,f2709,f2715,f2788,f2844,f2845,f2924,f2937,f2939,f2941,f2964,f3045,f3129,f3209,f3272,f3273,f3279,f3360,f3457,f3666,f3938,f4051,f4143,f4144,f4198,f4199,f4200,f4207,f4261,f4262,f4269,f4270,f4322,f4323,f4324,f4331,f4383,f4384,f4457,f4552,f4546,f4633,f4714,f4767,f4768,f4794,f5022,f5088,f5357,f5505,f5608,f5995,f6038,f6075,f6153,f6217,f6218,f6236,f6237,f6296,f6297,f6330,f6444,f6507,f6508,f7364,f7333,f7327,f7326,f7324,f7528,f6684,f6685,f7314,f7312,f7553,f7310,f7556,f7244,f7240,f7238,f7237,f7236,f7233,f7232,f7231,f7230,f7229,f7228,f7227,f7226,f7836,f7068,f7221,f7169,f8097,f655,f657,f7067,f7168,f645,f647,f7066,f7167,f6705,f6652,f4519,f4483,f3933,f1506,f1478,f1476,f6717,f6682,f4540,f4504,f3937,f3032,f2934,f2932,f3918,f3920,f3916,f6295,f1975,f1953,f1954,f1951,f1952,f6301,f6303,f6317,f96,f6318,f125,f3910,f3911,f3930,f3906,f6718,f6683,f4541,f4505,f1985,f1853,f1851,f3908,f3934,f3038,f2966,f2547,f2546,f2539,f2538,f1886,f1861,f1703,f1702,f136,f127,f1598,f1600,f7062,f7163,f4684,f4683,f4662,f3909,f2936,f1855,f1602,f1592,f1480,f659,f649,f122,f121,f91,f8415,f8831,f8832,f8833,f8671,f8672,f8852,f8862,f8877,f8880,f8881,f8882,f8963,f8970,f8971,f8972,f8973,f8975,f8976,f8977,f8978,f8979,f8980,f8981,f8982,f8983,f8984,f8985,f8986,f8987,f8988,f8989,f8990,f9018,f9049,f9070,f9071,f9120,f9151,f9172,f9173,f9318,f9321,f9322,f9323,f9422,f9423,f9424,f9916,f9533,f9536,f9537,f9538,f10097,f10118,f10119,f10170,f10145,f10166,f10167,f8100,f8101,f8102,f10221])).
fof(f7556,plain,(
  ( ! [X125,X124] : (s(bool,X124) = s(bool,'const.relation.WF_1'(s(fun(X125,fun(X125,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X124) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f6712,f164])).
fof(f6712,plain,(
  ( ! [X125,X124] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X124) = s(bool,'const.relation.WF_1'(s(fun(X125,fun(X125,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X124) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5)))))) ) | $spl4),
  inference(superposition,[],[f1474,f4457])).
fof(f7553,plain,(
  ( ! [X83,X82] : (s(bool,X82) = s(bool,'const.relation.WF_1'(s(fun(X83,fun(X83,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X82) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5)))) ) | $spl4),
  inference(subsumption_resolution,[],[f6707,f164])).
fof(f6707,plain,(
  ( ! [X83,X82] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X82) = s(bool,'const.relation.WF_1'(s(fun(X83,fun(X83,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X82) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5)))) ) | $spl4),
  inference(superposition,[],[f1474,f1941])).
fof(f7528,plain,(
  ( ! [X116,X117] : (s(bool,'F_0') = s(bool,X116) | s(bool,X116) = s(bool,'const.relation.WF_1'(s(fun(X117,fun(X117,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl4),
  inference(subsumption_resolution,[],[f6660,f1940])).
fof(f6660,plain,(
  ( ! [X116,X117] : (s(bool,'F_0') = s(bool,X116) | s(bool,X116) = s(bool,'const.relation.WF_1'(s(fun(X117,fun(X117,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5)))) ) | $spl4),
  inference(superposition,[],[f1474,f1941])).
fof(f5505,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,X0) = s(bool,X1)) ) | $spl4),
  inference(condensation,[],[f5504])).
fof(f5504,plain,(
  ( ! [X30,X28,X29] : (s(bool,X29) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f5390])).
fof(f5390,plain,(
  ( ! [X30,X28,X29] : (s(bool,X29) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,X28)) ) | $spl4),
  inference(superposition,[],[f507,f4767])).
fof(f5357,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X0),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X1) | s('type.ast.word_size',X0) = s('type.ast.word_size',X2) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) ) | $spl4),
  inference(superposition,[],[f4767,f196])).
fof(f5022,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X0),s('type.ast.lit',sK5))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) ) | $spl4),
  inference(superposition,[],[f4768,f196])).
fof(f4768,plain,(
  s(bool,'T_0') != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | $spl4),
  inference(subsumption_resolution,[],[f4727,f91])).
fof(f4727,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | $spl4),
  inference(superposition,[],[f117,f4457])).
fof(f4767,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(subsumption_resolution,[],[f4720,f164])).
fof(f4720,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(superposition,[],[f4457,f175])).
fof(f4714,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X0),s('type.ast.lit',sK5))))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) ) | $spl4),
  inference(superposition,[],[f4457,f196])).
fof(f4546,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,X0) = s(bool,X1)) ) | $spl4),
  inference(condensation,[],[f4545])).
fof(f4545,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f4511])).
fof(f4511,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X19)) ) | $spl4),
  inference(superposition,[],[f507,f1942])).
fof(f4457,plain,(
  s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | $spl4),
  inference(unit_resulting_resolution,[],[f164,f135,f1940,f507])).
fof(f3457,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X1) | s('type.ast.word_size',X0) = s('type.ast.word_size',X2) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) ) | $spl4),
  inference(superposition,[],[f1942,f196])).
fof(f1942,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(backward_demodulation,[],[f1785,f1066])).
fof(f1941,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | $spl4),
  inference(backward_demodulation,[],[f1785,f1067])).
fof(f1940,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | $spl4),
  inference(backward_demodulation,[],[f1785,f1068])).
fof(f1938,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) ) | $spl4),
  inference(backward_demodulation,[],[f1785,f1202])).
fof(f1937,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size',X0))),s('type.ast.lit',sK5))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) ) | $spl4),
  inference(backward_demodulation,[],[f1785,f1285])).
fof(f1285,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) ) | $spl4),
  inference(superposition,[],[f1068,f196])).
fof(f1202,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X0))))),s('type.ast.lit',sK5))) | s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) ) | $spl4),
  inference(superposition,[],[f1067,f196])).
fof(f1068,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) | $spl4),
  inference(backward_demodulation,[],[f260,f255])).
fof(f1067,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) | $spl4),
  inference(backward_demodulation,[],[f260,f254])).
fof(f1066,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(backward_demodulation,[],[f260,f1058])).
fof(f11132,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f11053,f90])).
fof(f11053,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f10225,f11022,f131])).
fof(f11129,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f11066,f164])).
fof(f11066,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl10),
  inference(unit_resulting_resolution,[],[f8099,f11022,f177])).
fof(f11128,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f11127,f164])).
fof(f11127,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl4),
  inference(backward_demodulation,[],[f11068,f10553])).
fof(f10553,plain,(
  s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | $spl4),
  inference(unit_resulting_resolution,[],[f135,f10225,f8862])).
fof(f11126,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f11071,f164])).
fof(f11071,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f164,f10225,f11022,f506])).
fof(f11125,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f11073,f164])).
fof(f11073,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f164,f10225,f11022,f506])).
fof(f11124,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f11123,f164])).
fof(f11123,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl10),
  inference(backward_demodulation,[],[f11077,f8099])).
fof(f11121,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f11078,f164])).
fof(f11078,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f10225,f11022,f8852])).
fof(f11079,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f164,f10225,f11022,f8852])).
fof(f11076,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f10225,f10225,f10225,f11022,f506])).
fof(f11074,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f164,f164,f10225,f11022,f506])).
fof(f11067,plain,(
  $false | $spl10),
  inference(unit_resulting_resolution,[],[f164,f8099,f11022,f177])).
fof(f11054,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f90,f10225,f11022,f131])).
fof(f11050,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f90,f10225,f11022,f131])).
fof(f11046,plain,(
  $false | $spl10),
  inference(unit_resulting_resolution,[],[f8099,f11022,f121])).
fof(f11044,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f10225,f11022,f118])).
fof(f7457,plain,(
  ( ! [X35] : (s(bool,'T_0') = s(bool,X35)) ) | $spl16),
  inference(cnf_transformation,[],[f7457_D])).
fof(f7457_D,plain,(
  ( ! [X35] : (s(bool,'T_0') = s(bool,X35)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f10196,plain,(
  ( ! [X31] : (s(bool,X31) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'F_0') = s(bool,X31)) ) | $spl54),
  inference(cnf_transformation,[],[f10196_D])).
fof(f10196_D,plain,(
  ( ! [X31] : (s(bool,X31) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'F_0') = s(bool,X31)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f10169,plain,(
  ( ! [X30,X31] : (s(bool,X31) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X31)) ) | $spl7),
  inference(duplicate_literal_removal,[],[f10129])).
fof(f10129,plain,(
  ( ! [X30,X31] : (s(bool,X31) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X30)) ) | $spl7),
  inference(superposition,[],[f8862,f1945])).
fof(f10195,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X23) = s(bool,'const.relation.WF_1'(s(fun(X25,fun(X25,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'F_0') = s(bool,X24)) ) | $spl52),
  inference(cnf_transformation,[],[f10195_D])).
fof(f10195_D,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X23) = s(bool,'const.relation.WF_1'(s(fun(X25,fun(X25,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'F_0') = s(bool,X24)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f10170,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,X23) != s(bool,X24) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X24) | s(bool,X23) = s(bool,'const.relation.WF_1'(s(fun(X25,fun(X25,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f10127])).
fof(f10127,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,X23) != s(bool,X24) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X24) | s(bool,X23) = s(bool,'const.relation.WF_1'(s(fun(X25,fun(X25,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f8862,f1474])).
fof(f8058,plain,(
  $false | ($spl7 | $spl16)),
  inference(global_subsumption,[],[f8057,f89,f88,f87,f86,f85,f84,f83,f82,f90,f91,f92,f93,f94,f95,f96,f97,f106,f105,f104,f103,f102,f101,f100,f99,f98,f118,f117,f122,f121,f125,f127,f136,f131,f128,f132,f133,f134,f135,f137,f138,f139,f141,f142,f143,f144,f164,f166,f175,f177,f196,f199,f211,f241,f255,f254,f256,f284,f506,f507,f533,f645,f647,f649,f655,f657,f659,f721,f730,f763,f808,f815,f824,f857,f902,f909,f918,f951,f996,f1003,f1004,f1028,f1029,f1030,f1031,f1058,f1090,f660,f662,f650,f652,f1089,f664,f654,f163,f140,f116,f115,f114,f113,f112,f111,f110,f109,f108,f107,f1244,f1245,f1349,f1350,f1471,f1472,f1473,f1474,f1475,f1476,f1478,f1480,f1506,f1542,f1543,f1588,f1590,f1592,f1593,f1595,f1597,f1598,f1600,f1602,f1603,f1605,f1607,f1702,f1703,f1785,f1946,f1947,f1948,f1949,f1950,f1951,f1952,f1953,f1954,f1955,f1956,f1975,f1850,f1851,f1853,f1855,f1856,f1858,f1860,f1861,f1985,f1886,f2097,f2215,f2220,f2267,f2268,f2320,f2321,f2322,f2327,f2374,f2375,f2427,f2428,f2429,f2434,f2482,f2483,f2536,f2537,f2538,f2539,f2546,f2547,f2581,f2653,f2708,f2709,f2715,f2788,f2844,f2845,f2924,f2932,f2934,f2936,f2937,f2939,f2941,f3032,f2964,f3038,f2966,f3045,f3129,f3209,f3272,f3273,f3279,f3360,f3666,f3906,f3930,f3908,f3909,f3910,f3911,f3916,f3918,f3920,f3933,f3934,f3937,f3938,f4051,f4143,f4144,f4198,f4199,f4200,f4207,f4261,f4262,f4269,f4270,f4322,f4323,f4324,f4331,f4383,f4384,f4483,f4504,f4505,f4552,f4519,f4540,f4541,f4633,f4662,f4683,f4684,f4794,f5088,f5608,f5995,f6038,f6075,f6153,f6217,f6218,f6236,f6237,f6295,f6296,f6297,f6301,f6317,f6303,f6318,f6330,f6444,f6507,f6508,f7364,f7333,f7327,f6652,f6682,f6683,f6684,f6685,f7314,f6705,f6717,f6718,f7244,f7240,f7238,f7237,f7236,f7233,f7232,f7231,f7230,f7229,f7228,f7227,f7226,f7836,f7062,f7066,f7067,f7068,f7221,f7163,f7167,f7168,f7169,f7457,f8048,f8046])).
fof(f8046,plain,(
  ( ! [X383,X385,X382,X384,X381] : (s(fun(X381,bool),X382) = s(fun(X381,bool),X383) | s(bool,X384) = s(bool,'const.relation.WF_1'(s(fun(X385,fun(X385,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X384) = s(bool,g(s(X381,sK127(X382,X383,bool,X381))))) ) | $spl16),
  inference(trivial_inequality_removal,[],[f7972])).
fof(f7972,plain,(
  ( ! [X383,X385,X382,X384,X381] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X381,bool),X382) = s(fun(X381,bool),X383) | s(bool,X384) = s(bool,'const.relation.WF_1'(s(fun(X385,fun(X385,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X384) = s(bool,g(s(X381,sK127(X382,X383,bool,X381))))) ) | $spl16),
  inference(backward_demodulation,[],[f7457,f7163])).
fof(f8048,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f7944,f7457])).
fof(f7944,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f7457,f121])).
fof(f8057,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | ($spl7 | $spl16)),
  inference(subsumption_resolution,[],[f8009,f90])).
fof(f8009,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | ($spl7 | $spl16)),
  inference(backward_demodulation,[],[f7457,f1939])).
fof(f8050,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f89,f88,f87,f86,f85,f84,f83,f82,f90,f91,f92,f93,f94,f95,f96,f97,f106,f105,f104,f103,f102,f101,f100,f99,f98,f118,f117,f122,f121,f125,f127,f136,f131,f128,f132,f133,f134,f135,f137,f138,f139,f141,f142,f143,f144,f164,f166,f175,f177,f196,f199,f211,f241,f255,f254,f256,f284,f506,f507,f533,f645,f647,f649,f655,f657,f659,f721,f730,f763,f808,f815,f824,f857,f902,f909,f918,f951,f996,f1003,f1004,f1028,f1029,f1030,f1031,f1058,f1090,f660,f662,f650,f652,f1089,f664,f654,f163,f140,f116,f115,f114,f113,f112,f111,f110,f109,f108,f107,f1244,f1245,f1349,f1350,f1471,f1472,f1473,f1474,f1475,f1476,f1478,f1480,f1506,f1542,f1543,f1588,f1590,f1592,f1593,f1595,f1597,f1598,f1600,f1602,f1603,f1605,f1607,f1702,f1703,f1785,f1946,f1947,f1948,f1949,f1950,f1951,f1952,f1953,f1954,f1955,f1956,f1975,f1850,f1851,f1853,f1855,f1856,f1858,f1860,f1861,f1985,f1886,f2097,f2215,f2220,f2267,f2268,f2320,f2321,f2322,f2327,f2374,f2375,f2427,f2428,f2429,f2434,f2482,f2483,f2536,f2537,f2538,f2539,f2546,f2547,f2581,f2653,f2708,f2709,f2715,f2788,f2844,f2845,f2924,f2932,f2934,f2936,f2937,f2939,f2941,f3032,f2964,f3038,f2966,f3045,f3129,f3209,f3272,f3273,f3279,f3360,f3666,f3906,f3930,f3908,f3909,f3910,f3911,f3916,f3918,f3920,f3933,f3934,f3937,f3938,f4051,f4143,f4144,f4198,f4199,f4200,f4207,f4261,f4262,f4269,f4270,f4322,f4323,f4324,f4331,f4383,f4384,f4483,f4504,f4505,f4552,f4519,f4540,f4541,f4633,f4662,f4683,f4684,f4794,f5088,f5608,f5995,f6038,f6075,f6153,f6217,f6218,f6236,f6237,f6295,f6296,f6297,f6301,f6317,f6303,f6318,f6330,f6444,f6507,f6508,f7364,f7333,f7327,f6652,f6682,f6683,f6684,f6685,f7314,f6705,f6717,f6718,f7244,f7240,f7238,f7237,f7236,f7233,f7232,f7231,f7230,f7229,f7228,f7227,f7226,f7836,f7062,f7066,f7067,f7068,f7221,f7163,f7167,f7168,f7169,f7457,f8048,f8046])).
fof(f8049,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f89,f88,f87,f86,f85,f84,f83,f82,f90,f91,f92,f93,f94,f95,f96,f97,f106,f105,f104,f103,f102,f101,f100,f99,f98,f118,f117,f122,f121,f125,f127,f136,f131,f128,f132,f133,f134,f135,f137,f138,f139,f141,f142,f143,f144,f164,f166,f175,f177,f196,f199,f211,f241,f255,f254,f256,f284,f506,f507,f533,f645,f647,f649,f655,f657,f659,f721,f730,f763,f808,f815,f824,f857,f902,f909,f918,f951,f996,f1003,f1004,f1028,f1029,f1030,f1031,f1058,f1090,f660,f662,f650,f652,f1089,f664,f654,f163,f140,f116,f115,f114,f113,f112,f111,f110,f109,f108,f107,f1244,f1245,f1349,f1350,f1471,f1472,f1473,f1474,f1475,f1476,f1478,f1480,f1506,f1542,f1543,f1588,f1590,f1592,f1593,f1595,f1597,f1598,f1600,f1602,f1603,f1605,f1607,f1702,f1703,f1785,f1946,f1947,f1948,f1949,f1950,f1951,f1952,f1953,f1954,f1955,f1956,f1975,f1850,f1851,f1853,f1855,f1856,f1858,f1860,f1861,f1985,f1886,f2097,f2215,f2220,f2267,f2268,f2320,f2321,f2322,f2327,f2374,f2375,f2427,f2428,f2429,f2434,f2482,f2483,f2536,f2537,f2538,f2539,f2546,f2547,f2581,f2653,f2708,f2709,f2715,f2788,f2844,f2845,f2924,f2932,f2934,f2936,f2937,f2939,f2941,f3032,f2964,f3038,f2966,f3045,f3129,f3209,f3272,f3273,f3279,f3360,f3666,f3906,f3930,f3908,f3909,f3910,f3911,f3916,f3918,f3920,f3933,f3934,f3937,f3938,f4051,f4143,f4144,f4198,f4199,f4200,f4207,f4261,f4262,f4269,f4270,f4322,f4323,f4324,f4331,f4383,f4384,f4483,f4504,f4505,f4552,f4519,f4540,f4541,f4633,f4662,f4683,f4684,f4794,f5088,f5608,f5995,f6038,f6075,f6153,f6217,f6218,f6236,f6237,f6295,f6296,f6297,f6301,f6317,f6303,f6318,f6330,f6444,f6507,f6508,f7364,f7333,f7327,f6652,f6682,f6683,f6684,f6685,f7314,f6705,f6717,f6718,f7244,f7240,f7238,f7237,f7236,f7233,f7232,f7231,f7230,f7229,f7228,f7227,f7226,f7836,f7062,f7066,f7067,f7068,f7221,f7163,f7167,f7168,f7169,f7457,f8048])).
fof(f8047,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f7943,f90])).
fof(f7943,plain,(
  ~p(s(bool,'T_0')) | $spl16),
  inference(backward_demodulation,[],[f7457,f91])).
fof(f7833,plain,(
  ( ! [X138,X136,X139,X137] : (s(bool,X136) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X137))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X138))))) | s(bool,X136) = s(bool,'const.relation.WF_1'(s(fun(X139,fun(X139,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl50),
  inference(cnf_transformation,[],[f7833_D])).
fof(f7833_D,plain,(
  ( ! [X138,X136,X139,X137] : (s(bool,X136) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X137))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X138))))) | s(bool,X136) = s(bool,'const.relation.WF_1'(s(fun(X139,fun(X139,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f7226,plain,(
  ( ! [X138,X136,X135,X139,X137] : (s(bool,X136) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X137))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X138))))) | s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,'const.relation.WF_1'(s(fun(X139,fun(X139,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6993])).
fof(f6993,plain,(
  ( ! [X138,X136,X135,X139,X137] : (s(bool,X136) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X137))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X138))))) | s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,'const.relation.WF_1'(s(fun(X139,fun(X139,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f4383,f1474])).
fof(f7832,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X131) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X132))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X133))))) | s(bool,X131) = s(bool,'const.relation.WF_1'(s(fun(X134,fun(X134,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl48),
  inference(cnf_transformation,[],[f7832_D])).
fof(f7832_D,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X131) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X132))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X133))))) | s(bool,X131) = s(bool,'const.relation.WF_1'(s(fun(X134,fun(X134,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f7227,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X131) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X132))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X133))))) | s(bool,'T_0') = s(bool,X130) | s(bool,X131) = s(bool,'const.relation.WF_1'(s(fun(X134,fun(X134,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6992])).
fof(f6992,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X131) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X132))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X133))))) | s(bool,'T_0') = s(bool,X130) | s(bool,X131) = s(bool,'const.relation.WF_1'(s(fun(X134,fun(X134,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f4261,f1474])).
fof(f7831,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s(bool,X125) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X126))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X127),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X128))))))) | s(bool,X125) = s(bool,'const.relation.WF_1'(s(fun(X129,fun(X129,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl46),
  inference(cnf_transformation,[],[f7831_D])).
fof(f7831_D,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s(bool,X125) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X126))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X127),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X128))))))) | s(bool,X125) = s(bool,'const.relation.WF_1'(s(fun(X129,fun(X129,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f7228,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(bool,X125) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X126))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X127),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X128))))))) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.relation.WF_1'(s(fun(X129,fun(X129,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6991])).
fof(f6991,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(bool,X125) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X126))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X127),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X128))))))) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.relation.WF_1'(s(fun(X129,fun(X129,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f3272,f1474])).
fof(f7830,plain,(
  ( ! [X123,X121,X122,X120,X119] : (s(bool,X119) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X120))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X121),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X122))))))) | s(bool,X119) = s(bool,'const.relation.WF_1'(s(fun(X123,fun(X123,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl44),
  inference(cnf_transformation,[],[f7830_D])).
fof(f7830_D,plain,(
  ( ! [X123,X121,X122,X120,X119] : (s(bool,X119) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X120))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X121),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X122))))))) | s(bool,X119) = s(bool,'const.relation.WF_1'(s(fun(X123,fun(X123,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f7229,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,X119) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X120))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X121),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X122))))))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.relation.WF_1'(s(fun(X123,fun(X123,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6990])).
fof(f6990,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,X119) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X120))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X121),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X122))))))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.relation.WF_1'(s(fun(X123,fun(X123,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f2844,f1474])).
fof(f7829,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,X113) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X114))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X115),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X116))))))) | s(bool,X113) = s(bool,'const.relation.WF_1'(s(fun(X117,fun(X117,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl42),
  inference(cnf_transformation,[],[f7829_D])).
fof(f7829_D,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,X113) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X114))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X115),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X116))))))) | s(bool,X113) = s(bool,'const.relation.WF_1'(s(fun(X117,fun(X117,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f7230,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,X113) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X114))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X115),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X116))))))) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,'const.relation.WF_1'(s(fun(X117,fun(X117,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6989])).
fof(f6989,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,X113) != s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X114))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X115),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X116))))))) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,'const.relation.WF_1'(s(fun(X117,fun(X117,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f2708,f1474])).
fof(f7828,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,X107) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X108))),s('type.ast.word_size',X109))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X110))))) | s(bool,X107) = s(bool,'const.relation.WF_1'(s(fun(X111,fun(X111,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl40),
  inference(cnf_transformation,[],[f7828_D])).
fof(f7828_D,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,X107) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X108))),s('type.ast.word_size',X109))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X110))))) | s(bool,X107) = s(bool,'const.relation.WF_1'(s(fun(X111,fun(X111,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f7231,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (s(bool,X107) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X108))),s('type.ast.word_size',X109))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X110))))) | s(bool,'T_0') = s(bool,X106) | s(bool,X107) = s(bool,'const.relation.WF_1'(s(fun(X111,fun(X111,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6988])).
fof(f6988,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (s(bool,X107) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X108))),s('type.ast.word_size',X109))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X110))))) | s(bool,'T_0') = s(bool,X106) | s(bool,X107) = s(bool,'const.relation.WF_1'(s(fun(X111,fun(X111,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f2536,f1474])).
fof(f7827,plain,(
  ( ! [X103,X101,X105,X102,X104] : (s(bool,X101) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X102))),s('type.ast.word_size',X103))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X104))))) | s(bool,X101) = s(bool,'const.relation.WF_1'(s(fun(X105,fun(X105,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl38),
  inference(cnf_transformation,[],[f7827_D])).
fof(f7827_D,plain,(
  ( ! [X103,X101,X105,X102,X104] : (s(bool,X101) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X102))),s('type.ast.word_size',X103))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X104))))) | s(bool,X101) = s(bool,'const.relation.WF_1'(s(fun(X105,fun(X105,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f7232,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (s(bool,X101) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X102))),s('type.ast.word_size',X103))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X104))))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,'const.relation.WF_1'(s(fun(X105,fun(X105,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6987])).
fof(f6987,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (s(bool,X101) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X102))),s('type.ast.word_size',X103))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X104))))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,'const.relation.WF_1'(s(fun(X105,fun(X105,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f2427,f1474])).
fof(f7826,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X96))),s('type.ast.word_size',X97))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X98))))) | s(bool,X95) = s(bool,'const.relation.WF_1'(s(fun(X99,fun(X99,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl36),
  inference(cnf_transformation,[],[f7826_D])).
fof(f7826_D,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X96))),s('type.ast.word_size',X97))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X98))))) | s(bool,X95) = s(bool,'const.relation.WF_1'(s(fun(X99,fun(X99,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f7233,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X96))),s('type.ast.word_size',X97))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X98))))) | s(bool,'T_0') = s(bool,X94) | s(bool,X95) = s(bool,'const.relation.WF_1'(s(fun(X99,fun(X99,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6986])).
fof(f6986,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),X96))),s('type.ast.word_size',X97))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X98))))) | s(bool,'T_0') = s(bool,X94) | s(bool,X95) = s(bool,'const.relation.WF_1'(s(fun(X99,fun(X99,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2320,f1474])).
fof(f7825,plain,(
  ( ! [X87,X85,X83,X86,X84] : (s(bool,X83) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X84))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X85))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X86))))) | s(bool,X83) = s(bool,'const.relation.WF_1'(s(fun(X87,fun(X87,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl34),
  inference(cnf_transformation,[],[f7825_D])).
fof(f7825_D,plain,(
  ( ! [X87,X85,X83,X86,X84] : (s(bool,X83) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X84))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X85))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X86))))) | s(bool,X83) = s(bool,'const.relation.WF_1'(s(fun(X87,fun(X87,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f7236,plain,(
  ( ! [X87,X85,X83,X86,X84,X82] : (s(bool,X83) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X84))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X85))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X86))))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,'const.relation.WF_1'(s(fun(X87,fun(X87,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6983])).
fof(f6983,plain,(
  ( ! [X87,X85,X83,X86,X84,X82] : (s(bool,X83) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X84))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X85))),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X86))))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,'const.relation.WF_1'(s(fun(X87,fun(X87,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f996,f1474])).
fof(f7824,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X77) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X78))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X79))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X80))))) | s(bool,X77) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl32),
  inference(cnf_transformation,[],[f7824_D])).
fof(f7824_D,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X77) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X78))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X79))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X80))))) | s(bool,X77) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f7237,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,X77) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X78))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X79))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X80))))) | s(bool,'T_0') = s(bool,X76) | s(bool,X77) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6982])).
fof(f6982,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,X77) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X78))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X79))),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X80))))) | s(bool,'T_0') = s(bool,X76) | s(bool,X77) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f902,f1474])).
fof(f7823,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X72))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X73))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X74))))) | s(bool,X71) = s(bool,'const.relation.WF_1'(s(fun(X75,fun(X75,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl30),
  inference(cnf_transformation,[],[f7823_D])).
fof(f7823_D,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X72))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X73))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X74))))) | s(bool,X71) = s(bool,'const.relation.WF_1'(s(fun(X75,fun(X75,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f7238,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X72))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X73))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X74))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.relation.WF_1'(s(fun(X75,fun(X75,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6981])).
fof(f6981,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',X72))),s('type.pair.prod'('type.num.num','type.ast.word_size'),X73))),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X74))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.relation.WF_1'(s(fun(X75,fun(X75,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f808,f1474])).
fof(f7820,plain,(
  ( ! [X54,X52,X53] : (s(bool,X52) != s(bool,'const.relation.WF_1'(s(fun(X53,fun(X53,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X52) = s(bool,'const.relation.WF_1'(s(fun(X54,fun(X54,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl28),
  inference(cnf_transformation,[],[f7820_D])).
fof(f7820_D,plain,(
  ( ! [X54,X52,X53] : (s(bool,X52) != s(bool,'const.relation.WF_1'(s(fun(X53,fun(X53,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X52) = s(bool,'const.relation.WF_1'(s(fun(X54,fun(X54,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f7244,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) != s(bool,'const.relation.WF_1'(s(fun(X53,fun(X53,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X51) | s(bool,X52) = s(bool,'const.relation.WF_1'(s(fun(X54,fun(X54,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6977])).
fof(f6977,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) != s(bool,'const.relation.WF_1'(s(fun(X53,fun(X53,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X51) | s(bool,X52) = s(bool,'const.relation.WF_1'(s(fun(X54,fun(X54,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f241,f1474])).
fof(f7509,plain,(
  ( ! [X50,X49] : (s(bool,X49) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,X49) = s(bool,'const.relation.WF_1'(s(fun(X50,fun(X50,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f7509_D])).
fof(f7509_D,plain,(
  ( ! [X50,X49] : (s(bool,X49) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,X49) = s(bool,'const.relation.WF_1'(s(fun(X50,fun(X50,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f7309,plain,(
  ( ! [X127,X128,X126] : (s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.relation.WF_1'(s(fun(X128,fun(X128,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X127) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5)))))) ) | ($spl4 | $spl7)),
  inference(duplicate_literal_removal,[],[f6713])).
fof(f6713,plain,(
  ( ! [X127,X128,X126] : (s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.relation.WF_1'(s(fun(X128,fun(X128,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X127) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X126)) ) | ($spl4 | $spl7)),
  inference(superposition,[],[f1474,f4854])).
fof(f4854,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl7)),
  inference(subsumption_resolution,[],[f4809,f164])).
fof(f4809,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl7)),
  inference(superposition,[],[f4557,f175])).
fof(f4557,plain,(
  s(bool,'F_0') = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | ($spl4 | $spl7)),
  inference(forward_demodulation,[],[f4468,f1941])).
fof(f4468,plain,(
  s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | ($spl4 | $spl7)),
  inference(unit_resulting_resolution,[],[f1940,f135,f1944,f507])).
fof(f7508,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,X46) = s(bool,'const.relation.WF_1'(s(fun(X47,fun(X47,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl24),
  inference(cnf_transformation,[],[f7508_D])).
fof(f7508_D,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,X46) = s(bool,'const.relation.WF_1'(s(fun(X47,fun(X47,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f7310,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,X121) | s(bool,X122) = s(bool,'const.relation.WF_1'(s(fun(X123,fun(X123,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X122) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5)))))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f6711])).
fof(f6711,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,X121) | s(bool,X122) = s(bool,'const.relation.WF_1'(s(fun(X123,fun(X123,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X122) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,'T_0') = s(bool,X121)) ) | $spl4),
  inference(superposition,[],[f1474,f4767])).
fof(f7507,plain,(
  ( ! [X43,X44] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,X43) = s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl22),
  inference(cnf_transformation,[],[f7507_D])).
fof(f7507_D,plain,(
  ( ! [X43,X44] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,X43) = s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f7311,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.relation.WF_1'(s(fun(X86,fun(X86,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X85) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5)))) ) | $spl7),
  inference(duplicate_literal_removal,[],[f6708])).
fof(f6708,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.relation.WF_1'(s(fun(X86,fun(X86,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X85) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X84)) ) | $spl7),
  inference(superposition,[],[f1474,f1945])).
fof(f7506,plain,(
  ( ! [X41,X40] : (s(bool,X40) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,X40) = s(bool,'const.relation.WF_1'(s(fun(X41,fun(X41,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl20),
  inference(cnf_transformation,[],[f7506_D])).
fof(f7506_D,plain,(
  ( ! [X41,X40] : (s(bool,X40) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,X40) = s(bool,'const.relation.WF_1'(s(fun(X41,fun(X41,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f7312,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') = s(bool,X79) | s(bool,X80) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X80) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5)))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f6706])).
fof(f6706,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') = s(bool,X79) | s(bool,X80) = s(bool,'const.relation.WF_1'(s(fun(X81,fun(X81,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X80) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,'T_0') = s(bool,X79)) ) | $spl4),
  inference(superposition,[],[f1474,f1942])).
fof(f7456,plain,(
  ( ! [X37,X38,X36,X34] : (s(bool,X34) = s(bool,'const.relation.WF_1'(s(fun(X36,fun(X36,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X34) = s(bool,X37) | s(bool,X37) = s(bool,'const.relation.WF_1'(s(fun(X38,fun(X38,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl14),
  inference(cnf_transformation,[],[f7456_D])).
fof(f7456_D,plain,(
  ( ! [X37,X38,X36,X34] : (s(bool,X34) = s(bool,'const.relation.WF_1'(s(fun(X36,fun(X36,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X34) = s(bool,X37) | s(bool,X37) = s(bool,'const.relation.WF_1'(s(fun(X38,fun(X38,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f7314,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,'const.relation.WF_1'(s(fun(X21,fun(X21,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X18) = s(bool,X20) | s(bool,X18) = s(bool,'const.relation.WF_1'(s(fun(X22,fun(X22,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6698])).
fof(f6698,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,'const.relation.WF_1'(s(fun(X21,fun(X21,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X18) = s(bool,X20) | s(bool,X18) = s(bool,'const.relation.WF_1'(s(fun(X22,fun(X22,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1474,f1474])).
fof(f7323,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,X49) = s(bool,'const.relation.WF_1'(s(fun(X50,fun(X50,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X48)) ) | ($spl4 | $spl7)),
  inference(duplicate_literal_removal,[],[f6644])).
fof(f6644,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit',sK5))))) | s(bool,X49) = s(bool,'const.relation.WF_1'(s(fun(X50,fun(X50,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl4 | $spl7)),
  inference(superposition,[],[f1474,f4854])).
fof(f7324,plain,(
  ( ! [X47,X45,X46] : (s(bool,X46) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,X46) = s(bool,'const.relation.WF_1'(s(fun(X47,fun(X47,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X45)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f6643])).
fof(f6643,plain,(
  ( ! [X47,X45,X46] : (s(bool,X46) = s(bool,'const.pair.UNCURRY_2'(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit',sK5))))) | s(bool,X46) = s(bool,'const.relation.WF_1'(s(fun(X47,fun(X47,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl4),
  inference(superposition,[],[f1474,f4767])).
fof(f7325,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,X43) = s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X42)) ) | $spl7),
  inference(duplicate_literal_removal,[],[f6642])).
fof(f6642,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W64_0'))),s('type.ast.lit',sK5))) | s(bool,X43) = s(bool,'const.relation.WF_1'(s(fun(X44,fun(X44,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | $spl7),
  inference(superposition,[],[f1474,f1945])).
fof(f7326,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,X40) = s(bool,'const.relation.WF_1'(s(fun(X41,fun(X41,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X39)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f6641])).
fof(f6641,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) = s(bool,happ(s(fun('type.ast.lit',bool),happ(s(fun('type.ast.word_size',fun('type.ast.lit',bool)),'const.pair.UNCURRY_2'(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.pair.prod'('type.ast.shift','type.num.num'),'const.pair.,_2'(s('type.ast.shift',sK2),s('type.num.num',sK3))))),s('type.ast.word_size','const.ast.W8_0'))),s('type.ast.lit',sK5))) | s(bool,X40) = s(bool,'const.relation.WF_1'(s(fun(X41,fun(X41,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl4),
  inference(superposition,[],[f1474,f1942])).
fof(f7327,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,'const.relation.WF_1'(s(fun(X32,fun(X32,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.relation.WF_1'(s(fun(X33,fun(X33,bool)),'const.relation.EMPTY_REL_0')))) )),
  inference(duplicate_literal_removal,[],[f6639])).
fof(f6639,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,'const.relation.WF_1'(s(fun(X32,fun(X32,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.relation.WF_1'(s(fun(X33,fun(X33,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f1474,f1474])).
fof(f7505,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.relation.WF_1'(s(fun(X2,fun(X2,bool)),'const.relation.EMPTY_REL_0')))) ) | $spl18),
  inference(cnf_transformation,[],[f7505_D])).
fof(f7505_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.relation.WF_1'(s(fun(X2,fun(X2,bool)),'const.relation.EMPTY_REL_0')))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7333,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.relation.WF_1'(s(fun(X2,fun(X2,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f6632])).
fof(f6632,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.relation.WF_1'(s(fun(X2,fun(X2,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1474,f93])).
fof(f7364,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,'const.relation.WF_1'(s(fun(X36,fun(X36,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X37) = s(bool,'const.relation.WF_1'(s(fun(X38,fun(X38,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X34) = s(bool,X37)) )),
  inference(duplicate_literal_removal,[],[f6588])).
fof(f6588,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,'const.relation.WF_1'(s(fun(X36,fun(X36,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,'T_0') = s(bool,X35) | s(bool,X37) = s(bool,'const.relation.WF_1'(s(fun(X38,fun(X38,bool)),'const.relation.EMPTY_REL_0'))) | s(bool,X34) = s(bool,X37)) )),
  inference(superposition,[],[f1474,f1474])).
fof(f1160,plain,(
  $false | ($spl3 | $spl4 | $spl8)),
  inference(subsumption_resolution,[],[f1159,f202])).
fof(f1159,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.ast.W64_0') | ($spl3 | $spl4 | $spl8)),
  inference(forward_demodulation,[],[f1108,f260])).
fof(f1108,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK4) | ($spl3 | $spl8)),
  inference(unit_resulting_resolution,[],[f202,f1054])).
fof(f260,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4) | $spl4),
  inference(cnf_transformation,[],[f260_D])).
fof(f260_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1057,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X2))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) ) | $spl12),
  inference(cnf_transformation,[],[f1057_D])).
fof(f1057_D,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X2))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1031,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X3))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X3) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4)) )),
  inference(superposition,[],[f254,f196])).
fof(f1030,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size',X2))))),s('type.ast.lit',sK5))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) )),
  inference(superposition,[],[f254,f196])).
fof(f1054,plain,(
  ( ! [X0] : (s('type.ast.word_size',sK4) = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) | $spl8),
  inference(cnf_transformation,[],[f1054_D])).
fof(f1054_D,plain,(
  ( ! [X0] : (s('type.ast.word_size',sK4) = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1056,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) | $spl10),
  inference(cnf_transformation,[],[f1056_D])).
fof(f1056_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1029,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) | s('type.ast.word_size',sK4) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1)) )),
  inference(superposition,[],[f254,f196])).
fof(f1028,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W8_0'))))),s('type.ast.lit',sK5))) | s('type.ast.word_size',sK4) = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f254,f196])).
fof(f262,plain,(
  ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5)))) | $spl7),
  inference(cnf_transformation,[],[f262_D])).
fof(f262_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5)))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f256,plain,(
  ~p(s(bool,happ(s(fun('type.ast.lit',bool),'const.pair.UNCURRY_2'(s(fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool))),happ(s(fun('type.ast.shift',fun('type.num.num',fun('type.ast.word_size',fun('type.ast.lit',bool)))),sK1),s('type.ast.shift',sK2))),s('type.pair.prod'('type.num.num','type.ast.word_size'),'const.pair.,_2'(s('type.num.num',sK3),s('type.ast.word_size','const.ast.W64_0'))))),s('type.ast.lit',sK5)))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK4)),
  inference(superposition,[],[f137,f94])).
fof(f200,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0)) ) | $spl0),
  inference(cnf_transformation,[],[f200_D])).
fof(f200_D,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f202,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W64_0') | $spl3),
  inference(cnf_transformation,[],[f202_D])).
fof(f202_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W64_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f199,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W64_0') | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0)) )),
  inference(equality_factoring,[],[f94])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 157
% Passive clauses: 628
% Generated clauses: 12011
% Final active clauses: 97
% Final passive clauses: 281
% Input formulas: 21
% Initial clauses: 54
% 
% Duplicate literals: 756
% Trivial inequalities: 144
% Fw subsumption resolutions: 898
% Fw demodulations: 1316
% Bw demodulations: 177
% Condensations: 1150
% Global subsumptions: 5
% 
% Simple tautologies: 252
% Equational tautologies: 292
% Forward subsumptions: 6511
% Bw demodulations to eq. taut.: 12
% 
% Unit resulting resolution: 1341
% Factoring: 1
% Forward superposition: 2899
% Backward superposition: 2844
% Self superposition: 119
% Equality factoring: 112
% Equality resolution: 19
% 
% Split clauses: 32
% Split components: 64
% SAT solver clauses: 734
% SAT solver unit clauses: 125
% SAT solver binary clauses: 217
% 
% Sat splits: 32
% Sat splitting refutations: 35
% 
% Memory used [KB]: 11513
% Time elapsed: 0.597 s
% ------------------------------
% ------------------------------
% Success in time 1.951 s
