Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (143663)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 380
% Passive clauses: 3480
% Generated clauses: 16553
% Final active clauses: 374
% Final passive clauses: 2931
% Input formulas: 68
% Initial clauses: 164
% 
% Duplicate literals: 218
% Trivial inequalities: 16
% Fw subsumption resolutions: 765
% Fw demodulations: 3448
% Bw demodulations: 6
% 
% Simple tautologies: 324
% Equational tautologies: 27
% Forward subsumptions: 8308
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 3784
% Factoring: 10
% Forward superposition: 3266
% Backward superposition: 4676
% Self superposition: 133
% Equality factoring: 30
% Equality resolution: 5
% 
% Split clauses: 86
% Split components: 173
% SAT solver clauses: 133
% SAT solver unit clauses: 12
% SAT solver binary clauses: 45
% 
% Sat splits: 86
% 
% TWLsolver clauses: 133
% TWLsolver calls for satisfiability: 63
% 
% Memory used [KB]: 21620
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (143685)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 179
% Passive clauses: 1380
% Generated clauses: 10390
% Final active clauses: 173
% Final passive clauses: 1173
% Input formulas: 68
% Initial clauses: 164
% 
% Duplicate literals: 128
% Trivial inequalities: 17
% Fw subsumption resolutions: 212
% Fw demodulations: 1239
% Bw demodulations: 32
% Condensations: 312
% Global subsumptions: 13
% 
% Simple tautologies: 168
% Equational tautologies: 24
% Forward subsumptions: 4863
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 436
% Factoring: 4
% Forward superposition: 2841
% Backward superposition: 3398
% Self superposition: 134
% Equality factoring: 30
% Equality resolution: 7
% 
% Split clauses: 15
% Split components: 30
% SAT solver clauses: 2185
% SAT solver unit clauses: 190
% SAT solver binary clauses: 74
% SAT solver learnt clauses: 26
% SAT solver learnt literals: 10
% 
% Sat splits: 15
% 
% TWLsolver clauses: 2133
% TWLsolver calls for satisfiability: 1082
% 
% Memory used [KB]: 26609
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f10379,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f375,f289])).
fof(f289,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.patSem.state'(sK7),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK7),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(sK7),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))),s('type.patSem.state'(sK7),sK8),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))),s('type.exhLang.exp',sK11))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))),s('type.list.list'('type.exhLang.exp'),sK9)))))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.patSem.state'(sK7),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK7),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(sK7),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))),s('type.patSem.state'(sK7),sK8),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))),s('type.exhLang.exp',sK11))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))),s('type.list.list'('type.exhLang.exp'),sK9)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9,sK10,sK11])],[f182])).
fof(f182,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.exhLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.list.list'('type.exhLang.exp'),X2)))))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.exhLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.list.list'('type.exhLang.exp'),X2)))))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.exhLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.list.list'('type.exhLang.exp'),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X12))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.exhLang.exp',X10))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.list.list'('type.exhLang.exp'),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X12))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.exhLang.exp',X10))),s('type.list.list'('type.patLang.exp'),'const.exh_to_pat.compile_exps_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.list.list'('type.exhLang.exp'),X8)))))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|27_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49|27_prove_ltb')).
fof(f375,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK18(X2,X1,X0)),s(X1,sK19(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f261])).
fof(f261,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK18(X2,X1,X0)),s(X1,sK19(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19])],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X18,X19] : ! [X21] : ? [X42,X45] : s('type.pair.prod'(X18,X19),X21) = s('type.pair.prod'(X18,X19),'const.pair.,_2'(s(X18,X42),s(X19,X45)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|27_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 200
% Passive clauses: 1913
% Generated clauses: 10128
% Final active clauses: 198
% Final passive clauses: 1699
% Input formulas: 68
% Initial clauses: 164
% 
% Duplicate literals: 5
% Trivial inequalities: 2
% Fw subsumption resolutions: 5
% Fw demodulations: 2800
% Bw demodulations: 16
% Condensations: 16
% 
% Simple tautologies: 52
% Equational tautologies: 15
% Forward subsumptions: 4230
% Fw demodulations to eq. taut.: 1048
% 
% Unit resulting resolution: 3220
% Factoring: 1
% Forward superposition: 1685
% Backward superposition: 2111
% Self superposition: 99
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 1919
% SAT solver unit clauses: 1283
% SAT solver binary clauses: 468
% 
% Sat splits: 2
% 
% Memory used [KB]: 21875
% Time elapsed: 0.686 s
% ------------------------------
% ------------------------------
% Success in time 2.02 s
