Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% (73738)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 144
% Passive clauses: 2677
% Generated clauses: 16323
% Final active clauses: 131
% Final passive clauses: 2432
% Input formulas: 21
% Initial clauses: 47
% 
% Duplicate literals: 611
% Trivial inequalities: 394
% Fw subsumption resolutions: 1923
% Fw demodulations: 2535
% Bw demodulations: 12
% 
% Simple tautologies: 374
% Equational tautologies: 26
% Forward subsumptions: 6889
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 271
% Forward superposition: 5473
% Backward superposition: 4872
% Self superposition: 147
% Equality factoring: 47
% Equality resolution: 38
% 
% Split clauses: 560
% Split components: 1138
% SAT solver clauses: 989
% SAT solver unit clauses: 9
% SAT solver binary clauses: 72
% 
% Sat splits: 560
% 
% TWLsolver clauses: 988
% TWLsolver calls for satisfiability: 139
% 
% Memory used [KB]: 12665
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f1460,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1459,f83,f147,f1436,f1445,f82,f149,f108,f160])).
fof(f160,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X4))),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X5))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X1)))) ) | $spl12),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X4))),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X5))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X1)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f108,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X4))),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X5)))))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X4))),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X5))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X1))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X4))),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X5))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X1))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X4))),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X5))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X1))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X12,X9,X13,X14,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X14))),s('type.closSem.state'(X6),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X12),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X13),s('type.closSem.state'(X6),X11))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X12))))),
  file('thm.closProps.evaluate_length_imp','thm.closProps.evaluate_IMP_LENGTH')).
fof(f149,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK5),s('type.closSem.state'(sK0),sK3))))))) | $spl2),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK5),s('type.closSem.state'(sK0),sK3))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f82,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK5),s('type.closSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK5),s('type.closSem.state'(sK0),sK3))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f51])).
fof(f51,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X1))),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X5),s('type.closSem.state'(X0),X3))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X4))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X1))),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X5),s('type.closSem.state'(X0),X3))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X4))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X1))),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X5),s('type.closSem.state'(X0),X3))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X7))),s('type.closSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X10),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X6),X9))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X7))),s('type.closSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X10),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X6),X9))))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X10))))),
  file('thm.closProps.evaluate_length_imp','thm.closProps.evaluate_length_imp')).
fof(f1445,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X0))),s('type.closSem.state'(sK0),X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X0)))) ) | $spl344),
  inference(cnf_transformation,[],[f1445_D])).
fof(f1445_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X0))),s('type.closSem.state'(sK0),X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X0)))) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f1436,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),sK1))),s('type.closSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),X0))),s('type.closSem.state'(sK0),X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X0)))) ) | ($spl2 | $spl12)),
  inference(superposition,[],[f160,f149])).
fof(f147,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4))) | $spl1),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4)))),
  inference(cnf_transformation,[],[f63])).
fof(f1459,plain,(
  $false | ($spl1 | $spl344)),
  inference(subsumption_resolution,[],[f1454,f147])).
fof(f1454,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK4))) | $spl344),
  inference(equality_resolution,[],[f1445])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 33
% Passive clauses: 172
% Generated clauses: 1348
% Final active clauses: 32
% Final passive clauses: 136
% Input formulas: 21
% Initial clauses: 47
% 
% Duplicate literals: 73
% Trivial inequalities: 25
% Fw subsumption resolutions: 65
% Fw demodulations: 67
% Bw demodulations: 2
% Condensations: 129
% Global subsumptions: 4
% 
% Simple tautologies: 49
% Equational tautologies: 15
% Forward subsumptions: 476
% 
% Binary resolution: 25
% Forward superposition: 413
% Backward superposition: 246
% Self superposition: 49
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 323
% SAT solver unit clauses: 56
% SAT solver binary clauses: 19
% SAT solver learnt clauses: 9
% 
% Sat splits: 8
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 306
% TWLsolver calls for satisfiability: 170
% 
% Memory used [KB]: 2814
% Time elapsed: 0.057 s
% ------------------------------
% ------------------------------
% Success in time 0.68 s
