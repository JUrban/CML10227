Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.decSem
% (1167)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 201
% Passive clauses: 2568
% Generated clauses: 23480
% Final active clauses: 162
% Final passive clauses: 1994
% Input formulas: 47
% Initial clauses: 93
% 
% Duplicate literals: 756
% Trivial inequalities: 661
% Fw subsumption resolutions: 2287
% Fw demodulations: 2326
% Bw demodulations: 30
% 
% Simple tautologies: 463
% Equational tautologies: 30
% Forward subsumptions: 13505
% 
% Binary resolution: 186
% Forward superposition: 8980
% Backward superposition: 7671
% Self superposition: 211
% Equality factoring: 56
% Equality resolution: 60
% 
% Split clauses: 454
% Split components: 923
% SAT solver clauses: 931
% SAT solver unit clauses: 19
% SAT solver binary clauses: 176
% 
% Sat splits: 454
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 928
% TWLsolver calls for satisfiability: 120
% 
% Memory used [KB]: 15351
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.decSem
% (1194)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 115
% Passive clauses: 603
% Generated clauses: 17294
% Final active clauses: 104
% Final passive clauses: 444
% Input formulas: 47
% Initial clauses: 93
% 
% Duplicate literals: 628
% Trivial inequalities: 244
% Fw subsumption resolutions: 1340
% Fw demodulations: 1736
% Bw demodulations: 47
% Condensations: 1608
% Global subsumptions: 8
% 
% Simple tautologies: 201
% Equational tautologies: 29
% Forward subsumptions: 9474
% 
% Binary resolution: 52
% Forward superposition: 5812
% Backward superposition: 4808
% Self superposition: 222
% Equality factoring: 51
% Equality resolution: 27
% 
% Split clauses: 224
% Split components: 451
% SAT solver clauses: 1426
% SAT solver unit clauses: 118
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 16
% 
% Sat splits: 224
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1394
% TWLsolver calls for satisfiability: 424
% 
% Memory used [KB]: 13944
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.decSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.decSem
% SZS output start Proof for thm.decSem
fof(f397601,plain,(
  $false),
  inference(subsumption_resolution,[],[f397600,f52805])).
fof(f52805,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3)))))),
  inference(unit_resulting_resolution,[],[f171,f40579,f40580,f40581,f236])).
fof(f236,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))) | s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2] : ((s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))) & (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))) | s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2)))),
  inference(flattening,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2] : ((s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))) & ((s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))) | s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0] : ! [X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X20] : ! [X23,X24] : (s('type.decSem.state'(X20),X23) = s('type.decSem.state'(X20),X24) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X20),X23))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X20),X24))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X20),X23))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X20),X24))) & s('type.ffi.ffi_state'(X20),'const.decSem.state_ffi_1'(s('type.decSem.state'(X20),X23))) = s('type.ffi.ffi_state'(X20),'const.decSem.state_ffi_1'(s('type.decSem.state'(X20),X24))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X20),X23))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X20),X24)))))),
  file('thm.decSem.check_clock_id','thm.decSem.state_component_equality')).
fof(f40581,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),'const.decSem.check_clock_2'(s('type.decSem.state'(X0),X1),s('type.decSem.state'(X2),X3)))))) )),
  inference(forward_demodulation,[],[f39855,f219])).
fof(f219,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X20] : ! [X9,X21] : s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X20),X9))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X20),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X21),s('type.decSem.state'(X20),X9)))))),
  file('thm.decSem.check_clock_id','thm.decSem.decSem_25_prove_ltb')).
fof(f39855,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),'const.decSem.check_clock_2'(s('type.decSem.state'(X0),X1),s('type.decSem.state'(X2),X3))))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X2),X3))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X2),X3))))))),s('type.decSem.state'(X0),X1)))))) )),
  inference(unit_resulting_resolution,[],[f247,f235])).
fof(f235,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f247,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.decSem.state'(X1),'const.decSem.check_clock_2'(s('type.decSem.state'(X1),X2),s('type.decSem.state'(X0),X3))) = s('type.decSem.state'(X1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3))))))),s('type.decSem.state'(X1),X2)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2,X3] : s('type.decSem.state'(X1),'const.decSem.check_clock_2'(s('type.decSem.state'(X1),X2),s('type.decSem.state'(X0),X3))) = s('type.decSem.state'(X1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3))))))),s('type.decSem.state'(X1),X2)))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.decSem.state'(X1),'const.decSem.check_clock_2'(s('type.decSem.state'(X1),X2),s('type.decSem.state'(X0),X3))) = s('type.decSem.state'(X1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3))))))),s('type.decSem.state'(X1),X2)))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6,X7] : ! [X8,X9] : s('type.decSem.state'(X7),'const.decSem.check_clock_2'(s('type.decSem.state'(X7),X8),s('type.decSem.state'(X6),X9))) = s('type.decSem.state'(X7),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X7),X8))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X9))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X7),X8))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X9))))))),s('type.decSem.state'(X7),X8)))),
  file('thm.decSem.check_clock_id','thm.decSem.check_clock_def')).
fof(f40580,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),'const.decSem.check_clock_2'(s('type.decSem.state'(X0),X1),s('type.decSem.state'(X2),X3)))))) )),
  inference(forward_demodulation,[],[f39856,f221])).
fof(f221,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(flattening,[],[f81])).
fof(f81,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X20] : ! [X9,X21] : s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X20),X9))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X20),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X21),s('type.decSem.state'(X20),X9)))))),
  file('thm.decSem.check_clock_id','thm.decSem.decSem_|49|9_prove_ltb')).
fof(f39856,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),'const.decSem.check_clock_2'(s('type.decSem.state'(X0),X1),s('type.decSem.state'(X2),X3))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X2),X3))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X2),X3))))))),s('type.decSem.state'(X0),X1)))))) )),
  inference(unit_resulting_resolution,[],[f247,f233])).
fof(f233,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f40579,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),'const.decSem.check_clock_2'(s('type.decSem.state'(X0),X1),s('type.decSem.state'(X2),X3)))))) )),
  inference(forward_demodulation,[],[f39857,f218])).
fof(f218,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X20] : ! [X9,X21] : s('type.ffi.ffi_state'(X20),'const.decSem.state_ffi_1'(s('type.decSem.state'(X20),X9))) = s('type.ffi.ffi_state'(X20),'const.decSem.state_ffi_1'(s('type.decSem.state'(X20),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X21),s('type.decSem.state'(X20),X9)))))),
  file('thm.decSem.check_clock_id','thm.decSem.decSem_22_prove_ltb')).
fof(f39857,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),'const.decSem.check_clock_2'(s('type.decSem.state'(X0),X1),s('type.decSem.state'(X2),X3))))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X2),X3))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X2),X3))))))),s('type.decSem.state'(X0),X1)))))) )),
  inference(unit_resulting_resolution,[],[f247,f234])).
fof(f234,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f171,plain,(
  s('type.decSem.state'(sK1),sK2) != s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3)))),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK3)))))) & s('type.decSem.state'(sK1),sK2) != s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f123])).
fof(f123,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3)))))) & s('type.decSem.state'(X1),X2) != s('type.decSem.state'(X1),'const.decSem.check_clock_2'(s('type.decSem.state'(X1),X2),s('type.decSem.state'(X0),X3))))),
  inference(ennf_transformation,[],[f50])).
fof(f50,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3)))))) => s('type.decSem.state'(X1),X2) = s('type.decSem.state'(X1),'const.decSem.check_clock_2'(s('type.decSem.state'(X1),X2),s('type.decSem.state'(X0),X3))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X1),X2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X3)))))) => s('type.decSem.state'(X1),X2) = s('type.decSem.state'(X1),'const.decSem.check_clock_2'(s('type.decSem.state'(X1),X2),s('type.decSem.state'(X0),X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X7),X8))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X9)))))) => s('type.decSem.state'(X7),X8) = s('type.decSem.state'(X7),'const.decSem.check_clock_2'(s('type.decSem.state'(X7),X8),s('type.decSem.state'(X6),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X7),X8))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X9)))))) => s('type.decSem.state'(X7),X8) = s('type.decSem.state'(X7),'const.decSem.check_clock_2'(s('type.decSem.state'(X7),X8),s('type.decSem.state'(X6),X9))))),
  file('thm.decSem.check_clock_id','thm.decSem.check_clock_id')).
fof(f397600,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3)))))),
  inference(forward_demodulation,[],[f396528,f281])).
fof(f281,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f242,f241])).
fof(f241,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6,X7] : ! [X11,X12] : s(X7,X11) = s(X7,'const.combin.K_2'(s(X7,X11),s(X6,X12)))),
  file('thm.decSem.check_clock_id','thm.combin.K_THM')).
fof(f242,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X7,X6] : ! [X25,X26] : s(X7,'const.combin.K_2'(s(X7,X25),s(X6,X26))) = s(X7,happ(s(fun(X6,X7),'const.combin.K_1'(s(X7,X25))),s(X6,X26)))),
  file('thm.decSem.check_clock_id','ARITY_1_2_const.combin.K')).
fof(f396528,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f225,f41022])).
fof(f41022,plain,(
  s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3))) = s('type.decSem.state'(sK1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))))),s('type.decSem.state'(sK1),sK2)))),
  inference(forward_demodulation,[],[f40068,f216])).
fof(f216,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X7] : ! [X13,X14] : s(X7,X13) = s(X7,'const.bool.COND_3'(s(bool,'T_0'),s(X7,X13),s(X7,X14)))),
  file('thm.decSem.check_clock_id','thm.bool.COND_CLAUSES|split|0')).
fof(f40068,plain,(
  s('type.decSem.state'(sK1),'const.decSem.check_clock_2'(s('type.decSem.state'(sK1),sK2),s('type.decSem.state'(sK0),sK3))) = s('type.decSem.state'(sK1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK3))))))),s('type.decSem.state'(sK1),sK2)))),
  inference(superposition,[],[f247,f284])).
fof(f284,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK3)))))),
  inference(unit_resulting_resolution,[],[f170,f177])).
fof(f177,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.decSem.check_clock_id','thm.bool.EQ_CLAUSES|split|0')).
fof(f170,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK1),sK2))),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK3))))))),
  inference(cnf_transformation,[],[f136])).
fof(f225,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X20] : ! [X9,X21] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X21),s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X20),X9))))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X20),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X21),s('type.decSem.state'(X20),X9)))))),
  file('thm.decSem.check_clock_id','thm.decSem.decSem_28_prove_ltb')).
% SZS output end Proof for thm.decSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 197
% Passive clauses: 1120
% Generated clauses: 397470
% Final active clauses: 127
% Final passive clauses: 458
% Input formulas: 47
% Initial clauses: 93
% Discarded non-redundant clauses: 8143
% 
% Duplicate literals: 646
% Trivial inequalities: 368
% Fw subsumption resolutions: 2008
% Fw demodulations: 265144
% Bw demodulations: 242
% Condensations: 1804
% Global subsumptions: 13
% 
% Simple tautologies: 325
% Equational tautologies: 122
% Forward subsumptions: 73123
% Fw demodulations to eq. taut.: 44605
% 
% Unit resulting resolution: 109437
% Forward superposition: 9294
% Backward superposition: 7779
% Self superposition: 262
% Equality factoring: 38
% Equality resolution: 61
% 
% Split clauses: 60
% Split components: 127
% SAT solver clauses: 1286
% SAT solver unit clauses: 122
% SAT solver binary clauses: 172
% 
% Sat splits: 60
% Sat splitting refutations: 31
% 
% Memory used [KB]: 123580
% Time elapsed: 9.498 s
% ------------------------------
% ------------------------------
% Success in time 10.821 s
