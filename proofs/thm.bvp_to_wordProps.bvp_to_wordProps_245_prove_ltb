Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f434,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f433,f380,f31,f50,f32,f52,f48,f33,f53,f51,f49,f403])).
fof(f403,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f393,f383])).
fof(f383,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl5),
  inference(forward_demodulation,[],[f53,f304])).
fof(f304,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f291,f38])).
fof(f38,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.ODD_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.ODD_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X10] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X10))) = s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.ODD_0'),s('type.num.num',X10)))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb','ARITY_0_1_const.arithmetic.ODD')).
fof(f291,plain,(
  ( ! [X0] : (s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.ODD_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f42,f36])).
fof(f36,plain,(
  s(fun('type.num.num',bool),'const.arithmetic.ODD_0') = s(fun('type.num.num',bool),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f8])).
fof(f8,axiom,(
  s(fun('type.num.num',bool),'const.arithmetic.ODD_0') = s(fun('type.num.num',bool),'const.bit.BIT_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb','thm.bit.BIT|48|_ODD')).
fof(f42,plain,(
  ( ! [X0,X1] : (s(bool,'const.bit.BIT_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),'const.bit.BIT_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : s(bool,'const.bit.BIT_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),'const.bit.BIT_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X10,X11] : s(bool,'const.bit.BIT_2'(s('type.num.num',X10),s('type.num.num',X11))) = s(bool,happ(s(fun('type.num.num',bool),'const.bit.BIT_1'(s('type.num.num',X10))),s('type.num.num',X11)))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb','ARITY_1_2_const.bit.BIT')).
fof(f393,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl0),
  inference(resolution,[],[f384,f44])).
fof(f44,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))))) & (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))))) & ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X6] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) <=> (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb','thm.arithmetic.ODD_MULT')).
fof(f384,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | $spl0),
  inference(forward_demodulation,[],[f48,f304])).
fof(f49,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | $spl1),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f51,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl3),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f53,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | $spl5),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f33,plain,(
  ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))))) & (~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f25])).
fof(f25,plain,(
  ? [X0,X1] : ((p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))) & (~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ? [X0,X1] : ((p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))) & (~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | (~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | ~p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ? [X0,X1] : (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))))) <~> (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1] : (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))))) <=> (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) <=> (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) <=> (p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) & p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb')).
fof(f48,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | $spl0),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f52,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | $spl4),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f32,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))))))),
  inference(cnf_transformation,[],[f26])).
fof(f50,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl2),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f31,plain,(
  p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | p(s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))))))),
  inference(cnf_transformation,[],[f26])).
fof(f380,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f379,f307])).
fof(f307,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | $spl1),
  inference(backward_demodulation,[],[f304,f49])).
fof(f379,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | ($spl2 | $spl4)),
  inference(subsumption_resolution,[],[f372,f34])).
fof(f34,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f9])).
fof(f9,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb','thm.bool.TRUTH')).
fof(f372,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0)))))) | ($spl2 | $spl4)),
  inference(superposition,[],[f366,f309])).
fof(f309,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | $spl4),
  inference(superposition,[],[f304,f63])).
fof(f63,plain,(
  s(bool,'T_0') = s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | $spl4),
  inference(subsumption_resolution,[],[f59,f37])).
fof(f37,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb',aHL_FALSITY)).
fof(f59,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | $spl4),
  inference(superposition,[],[f52,f39])).
fof(f39,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_245_prove_ltb',aHL_BOOL_CASES)).
fof(f366,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X0))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f359,f34])).
fof(f359,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X0))))))) ) | $spl2),
  inference(superposition,[],[f45,f308])).
fof(f308,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))) | $spl2),
  inference(superposition,[],[f304,f62])).
fof(f62,plain,(
  s(bool,'T_0') = s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl2),
  inference(subsumption_resolution,[],[f58,f37])).
fof(f58,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.bit.BIT_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl2),
  inference(superposition,[],[f50,f39])).
fof(f45,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f433,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f394,f412])).
fof(f412,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | $spl3),
  inference(forward_demodulation,[],[f51,f304])).
fof(f394,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | $spl0),
  inference(resolution,[],[f384,f43])).
fof(f43,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f29])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 113
% Generated clauses: 392
% Final active clauses: 17
% Final passive clauses: 53
% Input formulas: 11
% Initial clauses: 16
% 
% Duplicate literals: 53
% Trivial inequalities: 3
% Fw subsumption resolutions: 35
% Fw demodulations: 12
% Bw demodulations: 5
% 
% Simple tautologies: 16
% Equational tautologies: 15
% Forward subsumptions: 141
% 
% Binary resolution: 20
% Forward superposition: 99
% Backward superposition: 84
% Self superposition: 24
% Equality factoring: 26
% 
% Split clauses: 8
% Split components: 17
% SAT solver clauses: 17
% SAT solver unit clauses: 1
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 8
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 15
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.011 s
% ------------------------------
% ------------------------------
% Success in time 0.004 s
