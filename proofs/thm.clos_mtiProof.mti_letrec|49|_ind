Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_mtiProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_mtiProof
% SZS output start Proof for thm.clos_mtiProof
fof(f8076,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8064,f6625,f6645,f6643,f6641,f6639,f6637,f6635,f6633,f6631,f6629,f6627,f6964,f7790,f7846,f6792,f467,f465,f456,f454,f445,f442,f7734,f6788,f7663,f7603,f7473,f7498,f7537,f7563,f6912,f6861,f6795,f6652,f6681])).
fof(f6681,plain,(
  ( ! [X41] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp',sK3))))))) ) | $spl272),
  inference(cnf_transformation,[],[f6681_D])).
fof(f6681_D,plain,(
  ( ! [X41] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp',sK3))))))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f6652,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3))))))) ) | $spl262),
  inference(superposition,[],[f70,f6639])).
fof(f70,plain,(
  ( ! [X26,X24,X25] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X24),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X25),s('type.list.list'('type.closLang.exp'),X26))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X43,X44,X45] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X43),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X44),s('type.closLang.exp',X45)))))))) & ! [X41,X42] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X42)))))))) & ! [X37,X38,X39,X40] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X37),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X38),s('type.closLang.exp',X39),s('type.closLang.exp',X40)))))))) & ! [X34,X35,X36] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X34),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X35),s('type.closLang.exp',X36)))))))) & ! [X32,X33] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X33)))))))) & ! [X29,X30,X31] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X29),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X30),s('type.closLang.exp',X31)))))))) & ! [X27,X28] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X27),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X28)))))))) & ! [X24,X25,X26] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X24),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X25),s('type.list.list'('type.closLang.exp'),X26)))))))) & ! [X20,X21,X22,X23] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X20),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X21),s('type.closLang.exp',X22),s('type.list.list'('type.closLang.exp'),X23)))))))) & ! [X16,X17,X18,X19] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X17))),s('type.num.num',X18),s('type.closLang.exp',X19)))))))) & ! [X11,X12,X13,X14,X15] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X11),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X12))),s('type.option.option'('type.list.list'('type.num.num')),X13),s('type.num.num',X14),s('type.closLang.exp',X15)))))))) & ! [X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.closLang.exp',X10)))))))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X4),s('type.list.list'('type.closLang.exp'),X5)))))))) & ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK2),s('type.closLang.exp',sK3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f48])).
fof(f48,plain,(
  ? [X0] : (! [X43,X44,X45] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X43),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X44),s('type.closLang.exp',X45)))))))) & ! [X41,X42] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X42)))))))) & ! [X37,X38,X39,X40] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X37),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X38),s('type.closLang.exp',X39),s('type.closLang.exp',X40)))))))) & ! [X34,X35,X36] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X34),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X35),s('type.closLang.exp',X36)))))))) & ! [X32,X33] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X33)))))))) & ! [X29,X30,X31] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X29),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X30),s('type.closLang.exp',X31)))))))) & ! [X27,X28] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X27),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X28)))))))) & ! [X24,X25,X26] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X24),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X25),s('type.list.list'('type.closLang.exp'),X26)))))))) & ! [X20,X21,X22,X23] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X20),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X21),s('type.closLang.exp',X22),s('type.list.list'('type.closLang.exp'),X23)))))))) & ! [X16,X17,X18,X19] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X17))),s('type.num.num',X18),s('type.closLang.exp',X19)))))))) & ! [X11,X12,X13,X14,X15] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X11),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X12))),s('type.option.option'('type.list.list'('type.num.num')),X13),s('type.num.num',X14),s('type.closLang.exp',X15)))))))) & ! [X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.closLang.exp',X10)))))))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X4),s('type.list.list'('type.closLang.exp'),X5)))))))) & ? [X1,X2] : ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',X2)))))))),
  inference(rectify,[],[f41])).
fof(f41,plain,(
  ? [X0] : (! [X41,X42,X43] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X42),s('type.closLang.exp',X43)))))))) & ! [X39,X40] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X39),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X40)))))))) & ! [X35,X36,X37,X38] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X35),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X36),s('type.closLang.exp',X37),s('type.closLang.exp',X38)))))))) & ! [X32,X33,X34] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X33),s('type.closLang.exp',X34)))))))) & ! [X30,X31] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X30),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X31)))))))) & ! [X27,X28,X29] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X27),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X28),s('type.closLang.exp',X29)))))))) & ! [X25,X26] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X25),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X26)))))))) & ! [X22,X23,X24] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X22),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X23),s('type.list.list'('type.closLang.exp'),X24)))))))) & ! [X18,X19,X20,X21] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X18),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X19),s('type.closLang.exp',X20),s('type.list.list'('type.closLang.exp'),X21)))))))) & ! [X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X15))),s('type.num.num',X16),s('type.closLang.exp',X17)))))))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))),s('type.option.option'('type.list.list'('type.num.num')),X11),s('type.num.num',X12),s('type.closLang.exp',X13)))))))) & ! [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X4),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X5),s('type.option.option'('type.list.list'('type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7),s('type.closLang.exp',X8)))))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X2),s('type.list.list'('type.closLang.exp'),X3)))))))) & ? [X44,X45] : ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',X45)))))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ? [X0] : ((! [X41,X42,X43] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X42),s('type.closLang.exp',X43)))))))) & ! [X39,X40] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X39),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X40)))))))) & ! [X35,X36,X37,X38] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X35),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X36),s('type.closLang.exp',X37),s('type.closLang.exp',X38)))))))) & ! [X32,X33,X34] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X33),s('type.closLang.exp',X34)))))))) & ! [X30,X31] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X30),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X31)))))))) & ! [X27,X28,X29] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X27),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X28),s('type.closLang.exp',X29)))))))) & ! [X25,X26] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X25),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X26)))))))) & ! [X22,X23,X24] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X22),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X23),s('type.list.list'('type.closLang.exp'),X24)))))))) & ! [X18,X19,X20,X21] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X18),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X19),s('type.closLang.exp',X20),s('type.list.list'('type.closLang.exp'),X21)))))))) & ! [X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X15))),s('type.num.num',X16),s('type.closLang.exp',X17)))))))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))),s('type.option.option'('type.list.list'('type.num.num')),X11),s('type.num.num',X12),s('type.closLang.exp',X13)))))))) & ! [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X4),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X5),s('type.option.option'('type.list.list'('type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7),s('type.closLang.exp',X8)))))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X2),s('type.list.list'('type.closLang.exp'),X3))))))))) & ? [X44,X45] : ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',X45)))))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0] : ((! [X41,X42,X43] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X42),s('type.closLang.exp',X43)))))))) & ! [X39,X40] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X39),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X40)))))))) & ! [X35,X36,X37,X38] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X35),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X36),s('type.closLang.exp',X37),s('type.closLang.exp',X38)))))))) & ! [X32,X33,X34] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X33),s('type.closLang.exp',X34)))))))) & ! [X30,X31] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X30),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X31)))))))) & ! [X27,X28,X29] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X27),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X28),s('type.closLang.exp',X29)))))))) & ! [X25,X26] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X25),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X26)))))))) & ! [X22,X23,X24] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X22),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X23),s('type.list.list'('type.closLang.exp'),X24)))))))) & ! [X18,X19,X20,X21] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X18),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X19),s('type.closLang.exp',X20),s('type.list.list'('type.closLang.exp'),X21)))))))) & ! [X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X15))),s('type.num.num',X16),s('type.closLang.exp',X17)))))))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))),s('type.option.option'('type.list.list'('type.num.num')),X11),s('type.num.num',X12),s('type.closLang.exp',X13)))))))) & ! [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X4),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X5),s('type.option.option'('type.list.list'('type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7),s('type.closLang.exp',X8)))))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X2),s('type.list.list'('type.closLang.exp'),X3))))))))) => ! [X44,X45] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X0),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',X45)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X8),s('type.closLang.exp',X9)))))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X11)))))))) & ! [X10,X12,X13,X14] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X12),s('type.closLang.exp',X13),s('type.closLang.exp',X14)))))))) & ! [X10,X15,X16] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X15),s('type.closLang.exp',X16)))))))) & ! [X10,X17] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X17)))))))) & ! [X10,X18,X19] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X18),s('type.closLang.exp',X19)))))))) & ! [X10,X20] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X20)))))))) & ! [X10,X21,X22] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X21),s('type.list.list'('type.closLang.exp'),X22)))))))) & ! [X10,X23,X24,X25] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X23),s('type.closLang.exp',X24),s('type.list.list'('type.closLang.exp'),X25)))))))) & ! [X10,X26,X27,X28] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X26))),s('type.num.num',X27),s('type.closLang.exp',X28)))))))) & ! [X10,X29,X30,X27,X28] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X29))),s('type.option.option'('type.list.list'('type.num.num')),X30),s('type.num.num',X27),s('type.closLang.exp',X28)))))))) & ! [X10,X31,X32,X33,X34] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X31),s('type.option.option'('type.list.list'('type.num.num')),X32),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X33),s('type.closLang.exp',X34)))))))) & ! [X10,X35,X36] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X35),s('type.list.list'('type.closLang.exp'),X36))))))))) => ! [X10,X37] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X37)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X8),s('type.closLang.exp',X9)))))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X11)))))))) & ! [X10,X12,X13,X14] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X12),s('type.closLang.exp',X13),s('type.closLang.exp',X14)))))))) & ! [X10,X15,X16] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X15),s('type.closLang.exp',X16)))))))) & ! [X10,X17] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X17)))))))) & ! [X10,X18,X19] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X18),s('type.closLang.exp',X19)))))))) & ! [X10,X20] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X20)))))))) & ! [X10,X21,X22] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X21),s('type.list.list'('type.closLang.exp'),X22)))))))) & ! [X10,X23,X24,X25] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X23),s('type.closLang.exp',X24),s('type.list.list'('type.closLang.exp'),X25)))))))) & ! [X10,X26,X27,X28] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X26))),s('type.num.num',X27),s('type.closLang.exp',X28)))))))) & ! [X10,X29,X30,X27,X28] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X29))),s('type.option.option'('type.list.list'('type.num.num')),X30),s('type.num.num',X27),s('type.closLang.exp',X28)))))))) & ! [X10,X31,X32,X33,X34] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X31),s('type.option.option'('type.list.list'('type.num.num')),X32),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X33),s('type.closLang.exp',X34)))))))) & ! [X10,X35,X36] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X35),s('type.list.list'('type.closLang.exp'),X36))))))))) => ! [X10,X37] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),X6),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X37)))))))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind','thm.clos_mtiProof.mti_letrec|49|_ind')).
fof(f6795,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3))))))) ) | $spl252),
  inference(superposition,[],[f65,f6629])).
fof(f65,plain,(
  ( ! [X39,X37,X38,X40] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X37),s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X38),s('type.closLang.exp',X39),s('type.closLang.exp',X40))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f6861,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3))))))) ) | $spl264),
  inference(superposition,[],[f71,f6641])).
fof(f71,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X20),s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X21),s('type.closLang.exp',X22),s('type.list.list'('type.closLang.exp'),X23))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f6912,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3))))))) ) | $spl268),
  inference(superposition,[],[f75,f6645])).
fof(f75,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X4),s('type.list.list'('type.closLang.exp'),X5))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f7563,plain,(
  s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)) | $spl400),
  inference(cnf_transformation,[],[f7563_D])).
fof(f7563_D,plain,(
  s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)) <=> ~$spl400),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl400])])).
fof(f7537,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3)))))) | s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3))) ) | ($spl266 | $spl378)),
  inference(superposition,[],[f2100,f7530])).
fof(f7530,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)),s('type.num.num',sK21(sK3)),s('type.closLang.exp',sK22(sK3)))) | ($spl266 | $spl378)),
  inference(backward_demodulation,[],[f7498,f6643])).
fof(f2100,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),X0),s('type.num.num',X2),s('type.closLang.exp',X3)))))))) | s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.num.num')),X0)) )),
  inference(superposition,[],[f72,f106])).
fof(f106,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK72(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK72(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK72])],[f33])).
fof(f33,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X47] : ! [X48] : (s('type.option.option'(X47),'const.option.NONE_0') = s('type.option.option'(X47),X48) | ? [X49] : s('type.option.option'(X47),X48) = s('type.option.option'(X47),'const.option.SOME_1'(s(X47,X49))))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind','thm.option.option_nchotomy')).
fof(f72,plain,(
  ( ! [X19,X17,X18,X16] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.SOME_1'(s('type.list.list'('type.num.num'),X17))),s('type.num.num',X18),s('type.closLang.exp',X19))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f7498,plain,(
  s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),sK19(sK3)) | $spl378),
  inference(cnf_transformation,[],[f7498_D])).
fof(f7498_D,plain,(
  s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),sK19(sK3)) <=> ~$spl378),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl378])])).
fof(f7473,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3)))))) | s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),sK19(sK3))) ) | $spl266),
  inference(superposition,[],[f1965,f6643])).
fof(f1965,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X0),s('type.option.option'('type.list.list'('type.num.num')),X2),s('type.num.num',X3),s('type.closLang.exp',X4)))))))) | s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),X0)) )),
  inference(superposition,[],[f73,f106])).
fof(f73,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X11),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X12))),s('type.option.option'('type.list.list'('type.num.num')),X13),s('type.num.num',X14),s('type.closLang.exp',X15))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f7603,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK3))))))) ) | ($spl266 | $spl378 | $spl400)),
  inference(superposition,[],[f63,f7595])).
fof(f7595,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',sK21(sK3)),s('type.closLang.exp',sK22(sK3)))) | ($spl266 | $spl378 | $spl400)),
  inference(backward_demodulation,[],[f7563,f7530])).
fof(f63,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X43),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X44),s('type.closLang.exp',X45))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f7663,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK3))))))) ) | $spl258),
  inference(superposition,[],[f68,f6635])).
fof(f68,plain,(
  ( ! [X30,X31,X29] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X29),s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X30),s('type.closLang.exp',X31))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f6788,plain,(
  $false | $spl272),
  inference(subsumption_resolution,[],[f6781,f79])).
fof(f79,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind',aHL_FALSITY)).
fof(f6781,plain,(
  p(s(bool,'F_0')) | $spl272),
  inference(superposition,[],[f6681,f148])).
fof(f148,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK2),s('type.closLang.exp',sK3)))))),
  inference(resolution,[],[f76,f102])).
fof(f102,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X38] : (s(bool,'F_0') = s(bool,X38) <=> ~p(s(bool,X38)))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f76,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK2),s('type.closLang.exp',sK3))))))),
  inference(cnf_transformation,[],[f49])).
fof(f7734,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK3))))))) ) | $spl254),
  inference(superposition,[],[f66,f6631])).
fof(f66,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X34),s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X35),s('type.closLang.exp',X36))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f442,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X7)))))))) ) | $spl0),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X7)))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f445,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X13)))))))) )),
  inference(subsumption_resolution,[],[f440,f79])).
fof(f440,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X13)))))))) )),
  inference(superposition,[],[f64,f81])).
fof(f81,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind',aHL_BOOL_CASES)).
fof(f64,plain,(
  ( ! [X41,X42] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X41),s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X42))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f454,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X7)))))))) ) | $spl4),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X7)))))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f456,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X13)))))))) )),
  inference(subsumption_resolution,[],[f452,f79])).
fof(f452,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X13)))))))) )),
  inference(superposition,[],[f67,f81])).
fof(f67,plain,(
  ( ! [X33,X32] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X33))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f465,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X7)))))))) ) | $spl6),
  inference(cnf_transformation,[],[f465_D])).
fof(f465_D,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X7)))))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f467,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X13)))))))) )),
  inference(subsumption_resolution,[],[f463,f79])).
fof(f463,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X13)))))))) )),
  inference(superposition,[],[f69,f81])).
fof(f69,plain,(
  ( ! [X28,X27] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X27),s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X28))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f6792,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',sK3)))))) ) | $spl294),
  inference(cnf_transformation,[],[f6792_D])).
fof(f6792_D,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',sK3)))))) ) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f7846,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK3)))))) ) | ($spl6 | $spl260)),
  inference(superposition,[],[f465,f6637])).
fof(f7790,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK3)))))) ) | ($spl4 | $spl256)),
  inference(superposition,[],[f454,f6633])).
fof(f6964,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK3)))))) ) | ($spl0 | $spl250)),
  inference(superposition,[],[f442,f6627])).
fof(f6627,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(sK3)))) | $spl250),
  inference(cnf_transformation,[],[f6627_D])).
fof(f6627_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(sK3)))) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f6629,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(sK3)),s('type.closLang.exp',sK6(sK3)),s('type.closLang.exp',sK7(sK3)))) | $spl252),
  inference(cnf_transformation,[],[f6629_D])).
fof(f6629_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(sK3)),s('type.closLang.exp',sK6(sK3)),s('type.closLang.exp',sK7(sK3)))) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f6631,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(sK3)),s('type.closLang.exp',sK9(sK3)))) | $spl254),
  inference(cnf_transformation,[],[f6631_D])).
fof(f6631_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(sK3)),s('type.closLang.exp',sK9(sK3)))) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f6633,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(sK3)))) | $spl256),
  inference(cnf_transformation,[],[f6633_D])).
fof(f6633_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(sK3)))) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f6635,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(sK3)),s('type.closLang.exp',sK12(sK3)))) | $spl258),
  inference(cnf_transformation,[],[f6635_D])).
fof(f6635_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(sK3)),s('type.closLang.exp',sK12(sK3)))) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f6637,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(sK3)))) | $spl260),
  inference(cnf_transformation,[],[f6637_D])).
fof(f6637_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(sK3)))) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f6639,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(sK3)),s('type.list.list'('type.closLang.exp'),sK15(sK3)))) | $spl262),
  inference(cnf_transformation,[],[f6639_D])).
fof(f6639_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(sK3)),s('type.list.list'('type.closLang.exp'),sK15(sK3)))) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f6641,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(sK3)),s('type.closLang.exp',sK17(sK3)),s('type.list.list'('type.closLang.exp'),sK18(sK3)))) | $spl264),
  inference(cnf_transformation,[],[f6641_D])).
fof(f6641_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(sK3)),s('type.closLang.exp',sK17(sK3)),s('type.list.list'('type.closLang.exp'),sK18(sK3)))) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f6643,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(sK3)),s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)),s('type.num.num',sK21(sK3)),s('type.closLang.exp',sK22(sK3)))) | $spl266),
  inference(cnf_transformation,[],[f6643_D])).
fof(f6643_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(sK3)),s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)),s('type.num.num',sK21(sK3)),s('type.closLang.exp',sK22(sK3)))) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f6645,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(sK3)),s('type.list.list'('type.closLang.exp'),sK28(sK3)))) | $spl268),
  inference(cnf_transformation,[],[f6645_D])).
fof(f6645_D,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(sK3)),s('type.list.list'('type.closLang.exp'),sK28(sK3)))) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f6625,plain,(
  s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(sK3)),s('type.list.list'('type.closLang.exp'),sK28(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(sK3)),s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)),s('type.num.num',sK21(sK3)),s('type.closLang.exp',sK22(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(sK3)),s('type.closLang.exp',sK17(sK3)),s('type.list.list'('type.closLang.exp'),sK18(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(sK3)),s('type.list.list'('type.closLang.exp'),sK15(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(sK3)),s('type.closLang.exp',sK12(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(sK3)),s('type.closLang.exp',sK9(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(sK3)),s('type.closLang.exp',sK6(sK3)),s('type.closLang.exp',sK7(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(sK3))))),
  inference(subsumption_resolution,[],[f6615,f79])).
fof(f6615,plain,(
  p(s(bool,'F_0')) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(sK3)),s('type.list.list'('type.closLang.exp'),sK28(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(sK3)),s('type.option.option'('type.list.list'('type.num.num')),sK20(sK3)),s('type.num.num',sK21(sK3)),s('type.closLang.exp',sK22(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(sK3)),s('type.closLang.exp',sK17(sK3)),s('type.list.list'('type.closLang.exp'),sK18(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(sK3)),s('type.list.list'('type.closLang.exp'),sK15(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(sK3)),s('type.closLang.exp',sK12(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(sK3)),s('type.closLang.exp',sK9(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(sK3)),s('type.closLang.exp',sK6(sK3)),s('type.closLang.exp',sK7(sK3)))) | s('type.closLang.exp',sK3) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(sK3))))),
  inference(superposition,[],[f2359,f148])).
fof(f2359,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',X0)))))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(X0)),s('type.list.list'('type.closLang.exp'),sK28(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(X0)),s('type.option.option'('type.list.list'('type.num.num')),sK20(X0)),s('type.num.num',sK21(X0)),s('type.closLang.exp',sK22(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(X0)),s('type.closLang.exp',sK17(X0)),s('type.list.list'('type.closLang.exp'),sK18(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(X0)),s('type.list.list'('type.closLang.exp'),sK15(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(X0)),s('type.closLang.exp',sK12(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(X0)),s('type.closLang.exp',sK9(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(X0)),s('type.closLang.exp',sK6(X0)),s('type.closLang.exp',sK7(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(X0))))) )),
  inference(superposition,[],[f74,f82])).
fof(f82,plain,(
  ( ! [X0] : (s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),sK23(X0)),s('type.option.option'('type.list.list'('type.num.num')),sK24(X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK25(X0)),s('type.closLang.exp',sK26(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(X0)),s('type.list.list'('type.closLang.exp'),sK28(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(X0)),s('type.option.option'('type.list.list'('type.num.num')),sK20(X0)),s('type.num.num',sK21(X0)),s('type.closLang.exp',sK22(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(X0)),s('type.closLang.exp',sK17(X0)),s('type.list.list'('type.closLang.exp'),sK18(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(X0)),s('type.list.list'('type.closLang.exp'),sK15(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(X0)),s('type.closLang.exp',sK12(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(X0)),s('type.closLang.exp',sK9(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(X0)),s('type.closLang.exp',sK6(X0)),s('type.closLang.exp',sK7(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(X0))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',sK4(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',sK5(X0)),s('type.closLang.exp',sK6(X0)),s('type.closLang.exp',sK7(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK8(X0)),s('type.closLang.exp',sK9(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',sK10(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',sK11(X0)),s('type.closLang.exp',sK12(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',sK13(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',sK14(X0)),s('type.list.list'('type.closLang.exp'),sK15(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK16(X0)),s('type.closLang.exp',sK17(X0)),s('type.list.list'('type.closLang.exp'),sK18(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),sK19(X0)),s('type.option.option'('type.list.list'('type.num.num')),sK20(X0)),s('type.num.num',sK21(X0)),s('type.closLang.exp',sK22(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),sK23(X0)),s('type.option.option'('type.list.list'('type.num.num')),sK24(X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK25(X0)),s('type.closLang.exp',sK26(X0)))) | s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',sK27(X0)),s('type.list.list'('type.closLang.exp'),sK28(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28])],[f22])).
fof(f22,plain,(
  ! [X0] : (? [X25] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X22),s('type.closLang.exp',X23),s('type.closLang.exp',X24))) | ? [X20,X21] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X20),s('type.closLang.exp',X21))) | ? [X19] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X19))) | ? [X17,X18] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X17),s('type.closLang.exp',X18))) | ? [X16] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X16))) | ? [X14,X15] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X14),s('type.list.list'('type.closLang.exp'),X15))) | ? [X11,X12,X13] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X11),s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X13))) | ? [X7,X8,X9,X10] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X3,X4,X5,X6] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X3),s('type.option.option'('type.list.list'('type.num.num')),X4),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.closLang.exp',X6))) | ? [X1,X2] : s('type.closLang.exp',X0) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X2))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X39] : (? [X8] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Var_1'(s('type.num.num',X8))) | ? [X40,X41,X42] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.If_3'(s('type.closLang.exp',X40),s('type.closLang.exp',X41),s('type.closLang.exp',X42))) | ? [X43,X40] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X43),s('type.closLang.exp',X40))) | ? [X40] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Raise_1'(s('type.closLang.exp',X40))) | ? [X40,X41] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X40),s('type.closLang.exp',X41))) | ? [X40] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Tick_1'(s('type.closLang.exp',X40))) | ? [X8,X43] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Call_2'(s('type.num.num',X8),s('type.list.list'('type.closLang.exp'),X43))) | ? [X44,X40,X43] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X44),s('type.closLang.exp',X40),s('type.list.list'('type.closLang.exp'),X43))) | ? [X45,X44,X8,X40] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),X45),s('type.option.option'('type.list.list'('type.num.num')),X44),s('type.num.num',X8),s('type.closLang.exp',X40))) | ? [X45,X44,X43,X40] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X45),s('type.option.option'('type.list.list'('type.num.num')),X44),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X43),s('type.closLang.exp',X40))) | ? [X44,X43] : s('type.closLang.exp',X39) = s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X44),s('type.list.list'('type.closLang.exp'),X43))))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind','thm.closLang.exp_nchotomy')).
fof(f74,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp','const.closLang.Letrec_4'(s('type.option.option'('type.num.num'),X7),s('type.option.option'('type.list.list'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.closLang.exp',X10))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f8064,plain,(
  $false | $spl294),
  inference(trivial_inequality_removal,[],[f8014])).
fof(f8014,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl294),
  inference(superposition,[],[f149,f6792])).
fof(f149,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),sK1),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK2),s('type.closLang.exp',sK3)))))),
  inference(resolution,[],[f76,f97])).
fof(f97,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X38] : (s(bool,'T_0') = s(bool,X38) <=> p(s(bool,X38)))),
  file('thm.clos_mtiProof.mti_letrec|49|_ind','thm.bool.EQ_CLAUSES|split|0')).
% SZS output end Proof for thm.clos_mtiProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 217
% Passive clauses: 2097
% Generated clauses: 7654
% Final active clauses: 184
% Final passive clauses: 1654
% Input formulas: 17
% Initial clauses: 48
% 
% Duplicate literals: 305
% Trivial inequalities: 75
% Fw subsumption resolutions: 608
% Fw demodulations: 446
% Bw demodulations: 20
% 
% Simple tautologies: 174
% Equational tautologies: 21
% Forward subsumptions: 3843
% 
% Binary resolution: 107
% Forward superposition: 3320
% Backward superposition: 2328
% Self superposition: 216
% Equality factoring: 37
% Equality resolution: 28
% 
% Split clauses: 193
% Split components: 526
% SAT solver clauses: 300
% SAT solver unit clauses: 41
% SAT solver binary clauses: 83
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 2
% 
% Sat splits: 193
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 296
% TWLsolver calls for satisfiability: 91
% 
% Memory used [KB]: 8571
% Time elapsed: 0.218 s
% ------------------------------
% ------------------------------
% Success in time 0.22 s
