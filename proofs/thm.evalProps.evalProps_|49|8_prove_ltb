Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f4419,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4418,f223,f415,f413,f411,f409,f407,f405,f403,f4416,f4165,f3978,f3977,f3740,f4417])).
fof(f4417,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f413,f230])).
fof(f230,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK14),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK16),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK15))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK18),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK17))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK19))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK20))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK22)))))) & ! [X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))) & ! [X9] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) & ! [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X7),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X8))))) & ! [X5,X6] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X5),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X6))))) & ! [X3,X4] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X3),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X4))))) & ! [X2] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) & ! [X1] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X19,X20] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X20),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X19))))) | ? [X17,X18] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X18),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X17))))) | ? [X15,X16] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X16),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X15))))) | ? [X14] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X14))))) | ? [X13] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X13))))) | ? [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11)))))) & ! [X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))) & ! [X9] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) & ! [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X7),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X8))))) & ! [X5,X6] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X5),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X6))))) & ! [X3,X4] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X3),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X4))))) & ! [X2] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) & ! [X1] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X9,X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X10),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X9))))) | ? [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X7))))) | ? [X5,X6] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X6),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X5))))) | ? [X4] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X4))))) | ? [X3] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) | ? [X2] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))) | ? [X1] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) & ! [X20] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X20))))) & ! [X19] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X19))))) & ! [X17,X18] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X17),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X18))))) & ! [X15,X16] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X15),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X16))))) & ! [X13,X14] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X13),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))))) & ! [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) & ! [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X9,X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X10),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X9))))) | ? [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X7))))) | ? [X5,X6] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X6),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X5))))) | ? [X4] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X4))))) | ? [X3] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) | ? [X2] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))) | ? [X1] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) & (! [X20] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X20))))) & ! [X19] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X19))))) & ! [X17,X18] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X17),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X18))))) & ! [X15,X16] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X15),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X16))))) & ! [X13,X14] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X13),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))))) & ! [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) & ! [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11)))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X9,X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X10),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X9))))) | ? [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X7))))) | ? [X5,X6] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X6),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X5))))) | ? [X4] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X4))))) | ? [X3] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) | ? [X2] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))) | ? [X1] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) => (? [X20] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X20))))) | ? [X19] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X19))))) | ? [X17,X18] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X17),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X18))))) | ? [X15,X16] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X15),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X16))))) | ? [X13,X14] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X13),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X14))))) | ? [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X0) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X9,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9))))) | ? [X10,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) | ? [X13] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11)))))) => (? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))))) | ? [X8,X7] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X8,X9] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9))))) | ? [X8,X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10))))) | ? [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) | ? [X13] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X9,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9))))) | ? [X10,X8] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) | ? [X13] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11)))))) => (? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X11] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))))) | ? [X8,X7] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X8,X9] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X9))))) | ? [X8,X10] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X8),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10))))) | ? [X12] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12))))) | ? [X13] : s('type.pair.prod'('type.ast.word_size','type.ast.lit'),X6) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13)))))))),
  file('thm.evalProps.evalProps_|49|8_prove_ltb','thm.evalProps.evalProps_|49|8_prove_ltb')).
fof(f3740,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f403,f226])).
fof(f226,plain,(
  ( ! [X8,X7] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X7),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X8)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3977,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f407,f228])).
fof(f228,plain,(
  ( ! [X4,X3] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X3),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X4)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3978,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f405,f227])).
fof(f227,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',X5),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X6)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4165,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f411,f229])).
fof(f229,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4416,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f415,f225])).
fof(f225,plain,(
  ( ! [X9] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f403,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK14),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13))))) | $spl0),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK14),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f405,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK16),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK15))))) | $spl2),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK16),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK15))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f407,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK18),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK17))))) | $spl4),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK18),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK17))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f409,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK19))))) | $spl6),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK19))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f411,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK20))))) | $spl8),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK20))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f413,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21))))) | $spl10),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f415,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK22))))) | $spl12),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK22))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f223,plain,(
  s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK22))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK21))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W64_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK20))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK19))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK18),s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK17))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK16),s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK15))))) | s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) = s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size',sK14),s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13)))))),
  inference(cnf_transformation,[],[f138])).
fof(f4418,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f409,f224])).
fof(f224,plain,(
  ( ! [X10] : (s('type.pair.prod'('type.ast.word_size','type.ast.lit'),sK12) != s('type.pair.prod'('type.ast.word_size','type.ast.lit'),'const.pair.,_2'(s('type.ast.word_size','const.ast.W8_0'),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10)))))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 354
% Passive clauses: 1311
% Generated clauses: 4189
% Final active clauses: 354
% Final passive clauses: 797
% Input formulas: 37
% Initial clauses: 175
% 
% Duplicate literals: 153
% Trivial inequalities: 15
% Fw subsumption resolutions: 297
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2232
% 
% Binary resolution: 2548
% Factoring: 766
% Forward superposition: 116
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 95
% Split components: 196
% SAT solver clauses: 176
% SAT solver unit clauses: 13
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 95
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 175
% TWLsolver calls for satisfiability: 147
% 
% Memory used [KB]: 2174
% Time elapsed: 0.150 s
% ------------------------------
% ------------------------------
% Success in time 0.15 s
