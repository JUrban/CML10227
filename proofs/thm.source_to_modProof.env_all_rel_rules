Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (520)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 142
% Passive clauses: 1642
% Generated clauses: 11104
% Final active clauses: 134
% Final passive clauses: 1381
% Input formulas: 21
% Initial clauses: 384
% 
% Duplicate literals: 739
% Trivial inequalities: 115
% Fw subsumption resolutions: 1405
% Fw demodulations: 61
% Bw demodulations: 4
% 
% Simple tautologies: 283
% Equational tautologies: 131
% Forward subsumptions: 3750
% 
% Binary resolution: 96
% Forward superposition: 3790
% Backward superposition: 3541
% Self superposition: 468
% Equality factoring: 410
% Equality resolution: 17
% 
% Split clauses: 550
% Split components: 1109
% SAT solver clauses: 1515
% SAT solver unit clauses: 258
% SAT solver binary clauses: 498
% 
% Sat splits: 550
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1507
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 6012
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (582)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 200
% Passive clauses: 1030
% Generated clauses: 23334
% Final active clauses: 183
% Final passive clauses: 387
% Input formulas: 21
% Initial clauses: 384
% 
% Duplicate literals: 1712
% Trivial inequalities: 27
% Fw subsumption resolutions: 2255
% Fw demodulations: 4329
% Bw demodulations: 448
% Condensations: 1592
% Global subsumptions: 4
% 
% Simple tautologies: 245
% Equational tautologies: 19
% Forward subsumptions: 11188
% Bw demodulations to eq. taut.: 9
% 
% Binary resolution: 62
% Forward superposition: 7564
% Backward superposition: 3764
% Self superposition: 114
% Equality factoring: 36
% Equality resolution: 9
% 
% Split clauses: 17
% Split components: 44
% SAT solver clauses: 1125
% SAT solver unit clauses: 377
% SAT solver binary clauses: 153
% SAT solver learnt clauses: 8
% 
% Sat splits: 17
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1109
% TWLsolver calls for satisfiability: 7608
% 
% Memory used [KB]: 14967
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (660)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 199
% Passive clauses: 2317
% Generated clauses: 35477
% Final active clauses: 105
% Final passive clauses: 523
% Input formulas: 21
% Initial clauses: 384
% Discarded non-redundant clauses: 18
% 
% Duplicate literals: 3034
% Trivial inequalities: 223
% Fw subsumption resolutions: 2283
% Fw demodulations: 1790
% Bw demodulations: 1113
% Condensations: 5523
% Global subsumptions: 166
% 
% Simple tautologies: 423
% Equational tautologies: 1866
% Forward subsumptions: 17706
% Bw demodulations to eq. taut.: 9
% 
% Unit resulting resolution: 4575
% Forward superposition: 7984
% Backward superposition: 5235
% Self superposition: 447
% Equality factoring: 394
% Equality resolution: 21
% 
% Split clauses: 108
% Split components: 217
% SAT solver clauses: 2878
% SAT solver unit clauses: 24
% SAT solver binary clauses: 510
% 
% Sat splits: 108
% Sat splitting refutations: 177
% 
% Memory used [KB]: 20724
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f32502,plain,(
  $false),
  inference(subsumption_resolution,[],[f32501,f507])).
fof(f507,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.source_to_modProof.env_all_rel_rules',aHL_FALSITY)).
fof(f32501,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f32500,f1023])).
fof(f1023,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37)))),
  inference(subsumption_resolution,[],[f1007,f508])).
fof(f508,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f20])).
fof(f20,axiom,(
  p(s(bool,'T_0'))),
  file('thm.source_to_modProof.env_all_rel_rules','thm.bool.TRUTH')).
fof(f1007,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37)))),
  inference(superposition,[],[f224,f510])).
fof(f510,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.source_to_modProof.env_all_rel_rules',aHL_BOOL_CASES)).
fof(f224,plain,(
  ~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37))))),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK37) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s(fun('type.list.list'('type.string.char'),bool),sK37),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK36)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK36))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))) & ~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK31,sK32,sK33,sK34,sK35,sK36,sK37])],[f45])).
fof(f45,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))) & ~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X5),s(fun('type.list.list'('type.string.char'),bool),X6)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ((s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3)))) & ~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X5),s(fun('type.list.list'('type.string.char'),bool),X6)))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ((s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3)))) => p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X5),s(fun('type.list.list'('type.string.char'),bool),X6)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11,X12] : ((s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9)))) => p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.modSem.environment',X11),s(fun('type.list.list'('type.string.char'),bool),X12)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11,X12] : ((s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9)))) => p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.modSem.environment',X11),s(fun('type.list.list'('type.string.char'),bool),X12)))))),
  file('thm.source_to_modProof.env_all_rel_rules','thm.source_to_modProof.env_all_rel_rules')).
fof(f32500,plain,(
  p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37))))),
  inference(subsumption_resolution,[],[f32492,f507])).
fof(f32492,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37))))),
  inference(trivial_inequality_removal,[],[f32489])).
fof(f32489,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.modSem.environment',sK36),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))),
  inference(superposition,[],[f8269,f6712])).
fof(f6712,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(sK37,sK36,'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)),sK33,sK32,sK31)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))))),s('type.modSem.environment',sK36))),s(fun('type.list.list'('type.string.char'),bool),sK37)))),
  inference(subsumption_resolution,[],[f6700,f508])).
fof(f6700,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(sK37,sK36,'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)),sK33,sK32,sK31)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))))),s('type.modSem.environment',sK36))),s(fun('type.list.list'('type.string.char'),bool),sK37)))),
  inference(superposition,[],[f978,f510])).
fof(f978,plain,(
  ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(sK37,sK36,'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)),sK33,sK32,sK31)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))))),s('type.modSem.environment',sK36))),s(fun('type.list.list'('type.string.char'),bool),sK37))))),
  inference(resolution,[],[f224,f232])).
fof(f232,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | ! [X15] : (((s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK41(X15,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK44(X15,X5,X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK45(X15,X5,X4,X3,X2,X1,X0)))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK44(X15,X5,X4,X3,X2,X1,X0)))) & s(fun('type.list.list'('type.string.char'),bool),sK43(X15,X5,X4,X3,X2,X1,X0)) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK44(X15,X5,X4,X3,X2,X1,X0)))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK38(X15,X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK39(X15,X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK40(X15,X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK44(X15,X5,X4,X3,X2,X1,X0)))),s(fun('type.list.list'('type.string.char'),bool),sK43(X15,X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK45(X15,X5,X4,X3,X2,X1,X0))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK38(X15,X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK44(X15,X5,X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK42(X15,X5,X4,X3,X2,X1,X0))))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK42(X15,X5,X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK44(X15,X5,X4,X3,X2,X1,X0))))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),sK38(X15,X5,X4,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK39(X15,X5,X4,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK40(X15,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK41(X15,X5,X4,X3,X2,X1,X0)))),s('type.modSem.environment',sK42(X15,X5,X4,X3,X2,X1,X0)))),s(fun('type.list.list'('type.string.char'),bool),sK43(X15,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5)))))) & ((! [X7,X8,X9,X10,X11,X12] : (! [X13,X14] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) | s(fun('type.list.list'('type.string.char'),bool),X12) != s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12))))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5))))) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK38,sK39,sK40,sK41,sK42,sK43,sK44,sK45,sK46])],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | ! [X15] : (? [X16,X17,X18,X19,X20,X21] : (? [X22,X23] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X19) = s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22))) & s(fun('type.list.list'('type.string.char'),bool),X21) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X16),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22))),s(fun('type.list.list'('type.string.char'),bool),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X16),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X20)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X20))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22)))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X19))),s('type.modSem.environment',X20))),s(fun('type.list.list'('type.string.char'),bool),X21))))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5)))))) & (? [X6] : (! [X7,X8,X9,X10,X11,X12] : (! [X13,X14] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) | s(fun('type.list.list'('type.string.char'),bool),X12) != s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12))))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5))))) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5))))))),
  inference(rectify,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | ! [X6] : (? [X7,X8,X9,X10,X11,X12] : (? [X13,X14] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) = s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) & s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12))))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5)))))) & (? [X6] : (! [X7,X8,X9,X10,X11,X12] : (! [X13,X14] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) | s(fun('type.list.list'('type.string.char'),bool),X12) != s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12))))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5))))) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5))))))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) <=> ! [X6] : (? [X7,X8,X9,X10,X11,X12] : (? [X13,X14] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) = s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) & s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) & ~p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12))))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) <=> ! [X6] : (! [X7,X8,X9,X10,X11,X12] : (? [X13,X14] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) = s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) & s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) => p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12))))) => p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3))),s('type.modSem.environment',X4))),s(fun('type.list.list'('type.string.char'),bool),X5))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X13,X14,X15,X16,X17] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X13),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X14),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X15),s('type.modSem.environment',X16),s(fun('type.list.list'('type.string.char'),bool),X17)))) <=> ! [X18] : (! [X19,X20,X21,X22,X23,X24] : (? [X9,X10] : (s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22) = s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))) & s(fun('type.list.list'('type.string.char'),bool),X24) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X19),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X20),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s(fun('type.list.list'('type.string.char'),bool),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X23)))))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X23))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9)))) => p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X18),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X20))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X21))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22))),s('type.modSem.environment',X23))),s(fun('type.list.list'('type.string.char'),bool),X24))))) => p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),X18),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X14))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X15))),s('type.modSem.environment',X16))),s(fun('type.list.list'('type.string.char'),bool),X17))))))),
  file('thm.source_to_modProof.env_all_rel_rules','thm.source_to_modProof.env_all_rel_def')).
fof(f8269,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6))),s('type.modSem.environment',sK36))),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))) )),
  inference(subsumption_resolution,[],[f8268,f508])).
fof(f8268,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6))),s('type.modSem.environment',sK36))),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))) )),
  inference(forward_demodulation,[],[f8267,f559])).
fof(f559,plain,(
  s(bool,'T_0') = s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK36)))))),
  inference(subsumption_resolution,[],[f535,f507])).
fof(f535,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK36)))))),
  inference(superposition,[],[f222,f510])).
fof(f222,plain,(
  p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK36))))))),
  inference(cnf_transformation,[],[f101])).
fof(f8267,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6))),s('type.modSem.environment',sK36))),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK36)))))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))) )),
  inference(equality_resolution,[],[f900])).
fof(f900,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK36))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X7))) | p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6))),s('type.modSem.environment',X7))),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X7)))))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))) )),
  inference(forward_demodulation,[],[f899,f223])).
fof(f223,plain,(
  s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK36))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))),
  inference(cnf_transformation,[],[f101])).
fof(f899,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6))),s('type.modSem.environment',X7))),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X7)))))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))) )),
  inference(subsumption_resolution,[],[f884,f220])).
fof(f220,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK37) = s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))))))),
  inference(cnf_transformation,[],[f101])).
fof(f884,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),sK31))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6))),s('type.modSem.environment',X7))),s(fun('type.list.list'('type.string.char'),bool),sK37)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X7)))))) | s(fun('type.list.list'('type.string.char'),bool),sK37) != s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))))))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34)))) )),
  inference(resolution,[],[f221,f231])).
fof(f231,plain,(
  ( ! [X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.source_to_modProof.env_all_rel_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.modSem.environment',X4),s(fun('type.list.list'('type.string.char'),bool),X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'('type.string.char'),bool),bool),happ(s(fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)),happ(s(fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),fun('type.modSem.environment',fun(fun('type.list.list'('type.string.char'),bool),bool)))))),sK46(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10))),s('type.modSem.environment',X11))),s(fun('type.list.list'('type.string.char'),bool),X12)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X11)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14)))) | s(fun('type.list.list'('type.string.char'),bool),X12) != s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))) | s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10) != s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X14))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))) )),
  inference(cnf_transformation,[],[f104])).
fof(f221,plain,(
  p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),sK31),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK32),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK34))),s(fun('type.list.list'('type.string.char'),bool),sK37),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK35))))),
  inference(cnf_transformation,[],[f101])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1253
% Passive clauses: 11322
% Generated clauses: 31945
% Final active clauses: 1084
% Final passive clauses: 8229
% Input formulas: 21
% Initial clauses: 291
% 
% Selected by SInE selection: 19
% SInE iterations: 1
% 
% Duplicate literals: 430
% Trivial inequalities: 1369
% Fw subsumption resolutions: 1148
% Fw demodulations: 2225
% Bw demodulations: 38
% 
% Simple tautologies: 547
% Forward subsumptions: 14789
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 6517
% Factoring: 1
% Forward superposition: 15597
% Backward superposition: 4342
% Self superposition: 8
% Equality factoring: 10
% Equality resolution: 105
% 
% Split clauses: 344
% Split components: 699
% SAT solver clauses: 348
% SAT solver unit clauses: 2
% SAT solver binary clauses: 157
% 
% Sat splits: 344
% Sat splitting refutations: 3
% 
% Memory used [KB]: 37739
% Time elapsed: 2.446 s
% ------------------------------
% ------------------------------
% Success in time 14.22 s
