Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closSem
% (5037)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 166
% Passive clauses: 3785
% Generated clauses: 19895
% Final active clauses: 158
% Final passive clauses: 3447
% Input formulas: 69
% Initial clauses: 140
% 
% Duplicate literals: 673
% Trivial inequalities: 484
% Fw subsumption resolutions: 2117
% Fw demodulations: 3124
% Bw demodulations: 6
% 
% Simple tautologies: 441
% Equational tautologies: 51
% Forward subsumptions: 8862
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 428
% Factoring: 1
% Forward superposition: 6616
% Backward superposition: 5959
% Self superposition: 153
% Equality factoring: 88
% Equality resolution: 37
% 
% Split clauses: 233
% Split components: 474
% SAT solver clauses: 531
% SAT solver unit clauses: 14
% SAT solver binary clauses: 107
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 233
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 530
% TWLsolver calls for satisfiability: 161
% 
% Memory used [KB]: 15735
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closSem
% (5054)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 125
% Passive clauses: 1276
% Generated clauses: 12389
% Final active clauses: 117
% Final passive clauses: 1113
% Input formulas: 69
% Initial clauses: 140
% 
% Duplicate literals: 385
% Trivial inequalities: 326
% Fw subsumption resolutions: 761
% Fw demodulations: 1600
% Bw demodulations: 38
% Condensations: 675
% Global subsumptions: 8
% 
% Simple tautologies: 235
% Equational tautologies: 41
% Forward subsumptions: 5036
% 
% Binary resolution: 171
% Factoring: 1
% Forward superposition: 3826
% Backward superposition: 2976
% Self superposition: 103
% Equality factoring: 57
% Equality resolution: 29
% 
% Split clauses: 47
% Split components: 94
% SAT solver clauses: 2024
% SAT solver unit clauses: 151
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 18
% SAT solver learnt literals: 2
% 
% Sat splits: 47
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1990
% TWLsolver calls for satisfiability: 558
% 
% Memory used [KB]: 17398
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.closSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closSem
% SZS output start Proof for thm.closSem
fof(f35690,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f255,f416,f414,f254,f415,f413,f418,f1428,f1429,f1420,f1433,f1431,f1679,f1682,f1681,f1680,f1995,f2002,f1998,f4227,f4233,f4234,f4236,f4238,f4242,f4244,f4248,f4250,f4253,f4255,f4257,f4259,f4261,f4263,f4265,f4267,f4269,f4271,f4273,f4292,f4320,f4325,f4418,f4420,f4422,f4424,f4516,f4518,f4519,f4976,f4977,f4984,f4985,f6926,f6933,f6927,f6973,f9597,f9660,f10245,f10247,f10254,f10255,f10258,f10261,f10463,f10465,f10467,f10469,f10473,f10475,f10477,f10479,f10481,f10483,f10485,f10487,f10489,f10491,f10493,f10495,f10497,f10499,f10501,f10503,f15115,f15179,f16227,f16292,f20820,f1996,f20819,f2003,f20821,f23479,f23439,f23430,f23586,f23334,f24148,f24423,f14180,f6990,f24426,f6988,f24425,f33967,f33924,f33914,f34111,f33805,f34731,f9659,f35029,f35573,f35591])).
fof(f35591,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f35590,f416])).
fof(f35590,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) | $spl0),
  inference(forward_demodulation,[],[f35343,f303])).
fof(f303,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X25] : ! [X27] : s(X25,X27) = s(X25,happ(s(fun(X25,X25),'_i_0_0'),s(X25,X27)))),
  file('thm.closSem.v_|49||49||split|1','_i0_ax')).
fof(f35343,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_i_0_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) | $spl0),
  inference(superposition,[],[f303,f26060])).
fof(f26060,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X1),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) = s(X0,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X1),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f25744,f323])).
fof(f323,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9] : ! [X6,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_case_def|split|1')).
fof(f25744,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X1),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X1),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X3),s(fun('type.num.num',X0),X4),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X6)))) ) | $spl0),
  inference(superposition,[],[f323,f413])).
fof(f35573,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f35572,f416])).
fof(f35572,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) | $spl0),
  inference(forward_demodulation,[],[f35317,f303])).
fof(f35317,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_i_0_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) | $spl0),
  inference(superposition,[],[f26060,f303])).
fof(f35029,plain,(
  $false | ($spl28 | $spl31)),
  inference(subsumption_resolution,[],[f6989,f35028])).
fof(f35028,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | $spl28),
  inference(global_subsumption,[],[f255,f254,f256,f259,f260,f261,f262,f263,f264,f266,f265,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f481,f790,f823,f824,f825,f826,f827,f828,f829,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f3285,f3286,f3664,f3665,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4030,f4228,f4520,f3905,f4965,f4975,f4979,f4983,f5495,f5684,f5733,f5735,f5736,f5737,f5739,f5740,f5741,f5975,f5977,f5978,f5979,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6026,f6027,f6037,f6184,f6186,f6198,f6200,f6262,f6264,f6276,f6278,f6562,f6926,f6933,f7017,f7015,f7009,f7212,f7219,f7246,f7244,f7238,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7303,f7304,f7305,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7338,f7339,f7349,f7350,f7351,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7486,f7590,f7660,f7661,f8411,f8635,f8640,f8803,f8808,f9597,f8353,f7604,f6268,f6266,f8352,f7603,f6190,f6188,f8366,f7617,f6269,f6267,f8365,f7616,f6191,f6189,f4201,f4002,f391,f355,f354,f353,f349,f348,f5976,f5734,f2004,f1545,f1543,f4963,f4962,f4960,f4959,f4958,f4957,f4956,f4955,f3904,f3944,f3747,f8375,f8362,f7626,f7613,f7336,f7302,f4168,f4158,f3969,f3959,f3742,f4964,f3720,f3718,f3713,f3712,f3710,f3707,f3706,f3676,f1575,f5800,f5801,f6183,f6261,f3680,f2201,f3807,f3806,f3740,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f903,f821,f820,f819,f818,f817,f816,f312,f1980,f2498,f6177,f6176,f6173,f6138,f5822,f6259,f6260,f6181,f6182,f6263,f6185,f2502,f7125,f6934,f6905,f3741,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f6922,f6918,f6915,f6829,f6828,f6903,f6139,f8666,f8685,f8682,f8657,f8656,f8689,f6218,f8694,f8691,f8690,f8688,f8687,f8686,f8684,f8683,f8653,f8652,f8651,f8650,f8649,f8648,f8647,f8646,f8645,f8644,f8643,f8642,f8641,f6904,f6256,f6255,f6252,f6234,f6232,f6227,f6226,f6224,f6221,f6220,f6217,f6216,f6155,f6153,f6148,f6147,f6145,f6142,f6141,f347,f344,f9319,f9318,f9316,f9315,f9314,f9313,f9312,f9311,f9310,f9309,f9308,f9307,f9291,f9282,f9281,f9278,f9277,f9276,f9275,f9274,f9273,f9272,f9271,f9270,f9269,f9268,f9267,f9266,f9041,f9040,f9038,f9037,f9036,f9035,f9034,f9033,f9032,f9031,f9030,f9029,f9013,f9004,f9003,f9000,f8999,f8998,f8997,f8996,f8995,f8994,f8993,f8992,f8991,f8990,f8989,f8988,f8693,f7117,f7111,f7110,f7109,f7108,f7107,f7106,f7105,f7104,f7103,f7102,f7100,f7073,f7064,f7063,f6928,f6924,f6923,f6921,f6920,f6919,f6917,f6916,f6838,f3925,f3850,f3805,f3738,f2001,f346,f345,f315,f314,f311,f7124,f7076,f7075,f5980,f5738,f4961,f2166,f2164,f3296,f3297,f9375,f9374,f9373,f9371,f9370,f9369,f9367,f9364,f7353,f7352,f7337,f7307,f7306,f7116,f7074,f6385,f6337,f6244,f6243,f6240,f6239,f6238,f6237,f6236,f6235,f6233,f6223,f6222,f6165,f6164,f6161,f6160,f6159,f6158,f6157,f6156,f6154,f6144,f6143,f6025,f6008,f5902,f5855,f5699,f5690,f5606,f5603,f5602,f5601,f5600,f5599,f5598,f5501,f5418,f5415,f5414,f5413,f5412,f5411,f5410,f4987,f4982,f4974,f3728,f3727,f3724,f3723,f3722,f3721,f3719,f3709,f3708,f3663,f3660,f3584,f3583,f3582,f3581,f3580,f3579,f3578,f3577,f3493,f3418,f3417,f3416,f3415,f3414,f3413,f3412,f3411,f3295,f3284,f2577,f2576,f2575,f2574,f2573,f2572,f2571,f2570,f2569,f2552,f2551,f2550,f2549,f2548,f2547,f2546,f2545,f2544,f2192,f2168,f1625,f1623,f1571,f1547,f1401,f1400,f1398,f1396,f1395,f1394,f1393,f1392,f1391,f882,f730,f673,f620,f527,f500,f459,f270,f269,f258,f14879,f14882,f14884,f14885,f14886,f14888,f14889,f14890,f15115,f15870,f15871,f15872,f15873,f15874,f15875,f15876,f15877,f15878,f15879,f15880,f15881,f15882,f15913,f15914,f15885,f15886,f15915,f15916,f15917,f15918,f15919,f15920,f15921,f15922,f15895,f15924,f15925,f16509,f16510,f16511,f16512,f16513,f16514,f16515,f16516,f16517,f16518,f16519,f16520,f16687,f16691,f16692,f16701,f16873,f16913,f16916,f16918,f16919,f16920,f16922,f16923,f16924,f17029,f17031,f16998,f16999,f17033,f17035,f17037,f17039,f17041,f17043,f17045,f17047,f17008,f17048,f17026,f17027,f17095,f17098,f17100,f17101,f17102,f17104,f17105,f17106,f17614,f17615,f17618,f17625,f17633,f17731,f17732,f17924,f17925,f17926,f17927,f17928,f18033,f18034,f18039,f18040,f18041,f18042,f18043,f18044,f18046,f18047,f18048,f18049,f18050,f18051,f18052,f18053,f18054,f18055,f18056,f18057,f18058,f18059,f18060,f18062,f18063,f18064,f18065,f18066,f18067,f18090,f18091,f18092,f18093,f18094,f18095,f18097,f18098,f18099,f18100,f18101,f18102,f18103,f18104,f18105,f18106,f18107,f18108,f18109,f18110,f18111,f18113,f18114,f18115,f18116,f18117,f18118,f18123,f18125,f18126,f18635,f18638,f18640,f18641,f18642,f18644,f18645,f18646,f18836,f18837,f18838,f18855,f18856,f18857,f19011,f18874,f19012,f19013,f18893,f18894,f19025,f18896,f18897,f18903,f18904,f18916,f18921,f18922,f18936,f18942,f19055,f19056,f18945,f19060,f19061,f19062,f18951,f19063,f18953,f19064,f18955,f19065,f18957,f19072,f19073,f18978,f18988,f19343,f19344,f19347,f19354,f19362,f19369,f19370,f19371,f19372,f19373,f19374,f19375,f19376,f19377,f19378,f19379,f19380,f19381,f19382,f19383,f19384,f19385,f19672,f19467,f19468,f19469,f19470,f19471,f19486,f19487,f19673,f19674,f19490,f19491,f19492,f19509,f19510,f19511,f19544,f19545,f19546,f19563,f19564,f19706,f19566,f19567,f19573,f19574,f19586,f19591,f19592,f19612,f19736,f19737,f19615,f19741,f19742,f19743,f19621,f19744,f19623,f19745,f19625,f19746,f19627,f19753,f19754,f19648,f19659,f19822,f19823,f19824,f19825,f19826,f19827,f19828,f19829,f19830,f19831,f19834,f19986,f19992,f20027,f20135,f20136,f20137,f20138,f20139,f20140,f20141,f20142,f20143,f20144,f20147,f20315,f20321,f20378,f20323,f20324,f20380,f20382,f20327,f20328,f20384,f20386,f20388,f20390,f20392,f20394,f20396,f20398,f20400,f20338,f20402,f20340,f20341,f20404,f20406,f20344,f20345,f20408,f20410,f20412,f20414,f20416,f20418,f20420,f20422,f20424,f20355,f20425,f20511,f20512,f20513,f20514,f20515,f20516,f20517,f20518,f20519,f20520,f20523,f20557,f20778,f20784,f20820,f20822,f20823,f20819,f20955,f20956,f20957,f21009,f21010,f21011,f21012,f21013,f21140,f21015,f21016,f21022,f21023,f21035,f21040,f21041,f21058,f21170,f21171,f21061,f21175,f21176,f21177,f21071,f21178,f21073,f21179,f21075,f21180,f21077,f21187,f21188,f21194,f21196,f21097,f21101,f21112,f21565,f21566,f21567,f21619,f21620,f21621,f21622,f21623,f21756,f21625,f21626,f21632,f21633,f21645,f21650,f21651,f21668,f21786,f21787,f21671,f21791,f21792,f21793,f21687,f21794,f21689,f21795,f21691,f21796,f21693,f21803,f21804,f21810,f21812,f21713,f21717,f21729,f21984,f21985,f21986,f21987,f21988,f21995,f21999,f22000,f22004,f22006,f22007,f22010,f22014,f22017,f22020,f21919,f21920,f21932,f23479,f23439,f22290,f22291,f23430,f23917,f23334,f24330,f6988,f24428,f24429,f24432,f24433,f24445,f24447,f24448,f24451,f24452,f24464,f24513,f24514,f24555,f24553,f24543,f24759,f24760,f24880,f24881,f25157,f25158,f25159,f25209,f25210,f25211,f25212,f25213,f25355,f25216,f25217,f25223,f25224,f25236,f25241,f25242,f25255,f25382,f25383,f25258,f25387,f25388,f25389,f25280,f25390,f25282,f25391,f25284,f25392,f25286,f25399,f25400,f25406,f25408,f25308,f25312,f25326,f25557,f25871,f25872,f25873,f25923,f25924,f25925,f25926,f25927,f26080,f25930,f25931,f25937,f25938,f25950,f25955,f25956,f25971,f26109,f26110,f25974,f26114,f26115,f26116,f26002,f26117,f26004,f26118,f26006,f26119,f26008,f26126,f26127,f26133,f26135,f26030,f26034,f26049,f27239,f27240,f27392,f27393,f27398,f27544,f27545,f27546,f27547,f27548,f27549,f27550,f27551,f27552,f27553,f27554,f27555,f27556,f27557,f27558,f27559,f27560,f27561,f27562,f27563,f27564,f27565,f27586,f27587,f27588,f27678,f27701,f27702,f27703,f27704,f27740,f27741,f27742,f27759,f27760,f27761,f27762,f27763,f27939,f27766,f27767,f27773,f27774,f27786,f27791,f27792,f27809,f27970,f27971,f27812,f27975,f27976,f27977,f27846,f27978,f27848,f27979,f27850,f27980,f27852,f27987,f27988,f27994,f27996,f27874,f27879,f27895,f28142,f28143,f28146,f28153,f28154,f28162,f28163,f28570,f28571,f28572,f28625,f28626,f28627,f28628,f28629,f28800,f28632,f28633,f28639,f28640,f28652,f28657,f28658,f28675,f28831,f28832,f28678,f28836,f28837,f28838,f28713,f28839,f28715,f28840,f28717,f28841,f28719,f28848,f28849,f28855,f28857,f28741,f28742,f28747,f28764,f29132,f29133,f30838,f31263,f31846,f31847,f31848,f31903,f31905,f31906,f31907,f31908,f31909,f32099,f31912,f31913,f31919,f31920,f31932,f31937,f31938,f31960,f32133,f32134,f31963,f32138,f32139,f32140,f32004,f32141,f32006,f32142,f32008,f32143,f32010,f32150,f32151,f32157,f32159,f32032,f32033,f32038,f32056,f32279,f32280,f32281,f32282,f32283,f32284,f32285,f32286,f32287,f32288,f32289,f32290,f32291,f32292,f32293,f32294,f32295,f32296,f32297,f32298,f32299,f30879])).
fof(f30879,plain,(
  ( ! [X0,X1] : (p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | ~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X1)) ) | $spl28),
  inference(forward_demodulation,[],[f30878,f303])).
fof(f30878,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl28),
  inference(subsumption_resolution,[],[f30877,f434])).
fof(f30877,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl28),
  inference(forward_demodulation,[],[f30255,f303])).
fof(f30255,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl28),
  inference(condensation,[],[f29430])).
fof(f29430,plain,(
  ( ! [X167,X165,X166] : (~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X165)))) | ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X166)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,X165) = s(bool,X167) | s(bool,'T_0') = s(bool,X167)) ) | $spl28),
  inference(superposition,[],[f315,f24881])).
fof(f32299,plain,(
  ( ! [X290,X289,X291] : (s(bool,'F_0') != s(bool,X289) | s(bool,X291) = s(bool,sK4(X289,X290,bool)) | s(bool,'T_0') = s(bool,X291) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X290)))) ) | $spl28),
  inference(superposition,[],[f30838,f823])).
fof(f32298,plain,(
  ( ! [X288,X287,X286] : (s(bool,'F_0') != s(bool,X287) | s(bool,X288) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X286),'const.sum.INL_1'(s(bool,X287))))) | s(bool,'T_0') = s(bool,X288)) ) | $spl28),
  inference(superposition,[],[f30838,f336])).
fof(f32297,plain,(
  ( ! [X285,X283,X284] : (s(bool,'F_0') != s(bool,X284) | s(bool,X285) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X283,bool),'const.sum.INR_1'(s(bool,X284))))) | s(bool,'T_0') = s(bool,X285)) ) | $spl28),
  inference(superposition,[],[f30838,f337])).
fof(f32296,plain,(
  ( ! [X280,X282,X279,X281] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),X280),s('type.num.num',X281))) | s(bool,X282) = s(bool,'const.ind_type.FCONS_3'(s(bool,X279),s(fun('type.num.num',bool),X280),s('type.num.num','const.num.SUC_1'(s('type.num.num',X281))))) | s(bool,'T_0') = s(bool,X282)) ) | $spl28),
  inference(superposition,[],[f30838,f318])).
fof(f32295,plain,(
  ( ! [X277,X276,X278] : (s(bool,'F_0') != s(bool,X276) | s(bool,X278) = s(bool,'const.ind_type.FCONS_3'(s(bool,X276),s(fun('type.num.num',bool),X277),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X278)) ) | $spl28),
  inference(superposition,[],[f30838,f310])).
fof(f32294,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,'F_0') != s(bool,X273) | s(bool,X275) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X272),'const.pair.,_2'(s(bool,X273),s(X272,X274))))) | s(bool,'T_0') = s(bool,X275)) ) | $spl28),
  inference(superposition,[],[f30838,f341])).
fof(f32293,plain,(
  ( ! [X269,X271,X268,X270] : (s(bool,'F_0') != s(bool,X270) | s(bool,X271) = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X268,bool),'const.pair.,_2'(s(X268,X269),s(bool,X270))))) | s(bool,'T_0') = s(bool,X271)) ) | $spl28),
  inference(superposition,[],[f30838,f340])).
fof(f32292,plain,(
  ( ! [X261,X263,X257,X259,X265,X267,X260,X262,X256,X258,X264,X266] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X266),s('type.option.option'('type.num.num'),X256))),s('type.list.list'('type.closSem.v'),X257))),s('type.list.list'('type.closSem.v'),X258))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X259))),s('type.num.num',X260))) | s(bool,X267) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X256),s('type.list.list'('type.closSem.v'),X257),s('type.list.list'('type.closSem.v'),X258),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X259),s('type.num.num',X260))),s(fun('type.integer.int',bool),X261),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X262),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X263),s(fun('type.num.num',bool),X264),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X265),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X266))) | s(bool,'T_0') = s(bool,X267)) ) | $spl28),
  inference(superposition,[],[f30838,f326])).
fof(f32291,plain,(
  ( ! [X255,X253,X251,X249,X246,X244,X254,X252,X250,X248,X247,X245] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X253),s('type.option.option'('type.num.num'),X244))),s('type.list.list'('type.closSem.v'),X245))),s('type.list.list'('type.closSem.v'),X246))),s('type.num.num',X247))),s('type.closLang.exp',X248))) | s(bool,X255) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X244),s('type.list.list'('type.closSem.v'),X245),s('type.list.list'('type.closSem.v'),X246),s('type.num.num',X247),s('type.closLang.exp',X248))),s(fun('type.integer.int',bool),X249),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X250),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X251),s(fun('type.num.num',bool),X252),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X253),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X254))) | s(bool,'T_0') = s(bool,X255)) ) | $spl28),
  inference(superposition,[],[f30838,f325])).
fof(f32290,plain,(
  ( ! [X243,X241,X239,X237,X235,X242,X240,X238,X236] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X239),s('type.num.num',X235))),s('type.list.list'('type.closSem.v'),X236))) | s(bool,X243) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X235),s('type.list.list'('type.closSem.v'),X236))),s(fun('type.integer.int',bool),X237),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X238),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X239),s(fun('type.num.num',bool),X240),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X241),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X242))) | s(bool,'T_0') = s(bool,X243)) ) | $spl28),
  inference(superposition,[],[f30838,f324])).
fof(f32289,plain,(
  ( ! [X231,X229,X227,X233,X230,X228,X234,X232] : (s(bool,'F_0') != s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X229),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X227))) | s(bool,X234) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X227))),s(fun('type.integer.int',bool),X228),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X229),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X230),s(fun('type.num.num',bool),X231),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X232),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X233))) | s(bool,'T_0') = s(bool,X234)) ) | $spl28),
  inference(superposition,[],[f30838,f323])).
fof(f32288,plain,(
  ( ! [X222,X220,X225,X219,X223,X221,X226,X224] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),X223),s('type.num.num',X219))) | s(bool,X226) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X219))),s(fun('type.integer.int',bool),X220),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X221),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X222),s(fun('type.num.num',bool),X223),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X224),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X225))) | s(bool,'T_0') = s(bool,X226)) ) | $spl28),
  inference(superposition,[],[f30838,f322])).
fof(f32287,plain,(
  ( ! [X212,X218,X216,X215,X213,X211,X217,X214] : (s(bool,'F_0') != s(bool,happ(s(fun('type.integer.int',bool),X212),s('type.integer.int',X211))) | s(bool,X218) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X211))),s(fun('type.integer.int',bool),X212),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X213),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X214),s(fun('type.num.num',bool),X215),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X216),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X217))) | s(bool,'T_0') = s(bool,X218)) ) | $spl28),
  inference(superposition,[],[f30838,f321])).
fof(f32286,plain,(
  ( ! [X210,X208,X209] : (s(bool,'F_0') != s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X208),X209))) | s(bool,X210) = s(bool,happ(s(fun('type.pair.prod'(bool,X208),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X208),X209))) | s(bool,'T_0') = s(bool,X210)) ) | $spl28),
  inference(superposition,[],[f30838,f338])).
fof(f32285,plain,(
  ( ! [X206,X204,X207,X205] : (s(bool,'F_0') != s(bool,X206) | s(bool,X207) = s(bool,happ(s(fun('type.list.list'(X204),bool),sK16(X205,X206,X204,bool)),s('type.list.list'(X204),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X207)) ) | $spl28),
  inference(superposition,[],[f30838,f356])).
fof(f32284,plain,(
  ( ! [X202,X200,X203,X201] : (s(bool,'F_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X200),s(fun('type.num.num',bool),X201),s('type.num.num',X202))) | s(bool,X203) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X200))),s(fun('type.num.num',bool),X201))),s('type.num.num',X202))) | s(bool,'T_0') = s(bool,X203)) ) | $spl28),
  inference(superposition,[],[f30838,f320])).
fof(f32283,plain,(
  ( ! [X198,X196,X194,X199,X197,X195] : (s(bool,'F_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X194),bool),sK7(X195,X194,bool)),s('type.ind_type.recspace'(X194),'const.ind_type.CONSTR_3'(s('type.num.num',X196),s(X194,X197),s(fun('type.num.num','type.ind_type.recspace'(X194)),X198))))) | s(bool,X199) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X194)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X194,fun(fun('type.num.num','type.ind_type.recspace'(X194)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X194,fun(fun('type.num.num','type.ind_type.recspace'(X194)),fun(fun('type.num.num',bool),bool)))),X195),s('type.num.num',X196))),s(X194,X197))),s(fun('type.num.num','type.ind_type.recspace'(X194)),X198))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X194),bool),sK7(X195,X194,bool)),s(fun('type.num.num','type.ind_type.recspace'(X194)),X198))))) | s(bool,'T_0') = s(bool,X199)) ) | $spl28),
  inference(superposition,[],[f30838,f339])).
fof(f32282,plain,(
  ( ! [X191,X189,X192,X190,X188,X193] : (s(bool,'F_0') != s(bool,happ(s(fun(X189,bool),X190),s(X189,happ(s(fun(X188,X189),X191),s(X188,X192))))) | s(bool,X193) = s(bool,happ(s(fun(X188,bool),'_dst_x0x1_2'(s(fun(X189,bool),X190),s(fun(X188,X189),X191))),s(X188,X192))) | s(bool,'T_0') = s(bool,X193)) ) | $spl28),
  inference(superposition,[],[f30838,f365])).
fof(f32281,plain,(
  ( ! [X187,X185,X182,X186,X184,X183] : (s(bool,'F_0') != s(bool,happ(s(fun(X184,bool),'_dst_x0x1_2'(s(fun(X182,bool),X183),s(fun(X184,X182),X185))),s(X184,X186))) | s(bool,X187) = s(bool,happ(s(fun(X182,bool),X183),s(X182,happ(s(fun(X184,X182),X185),s(X184,X186))))) | s(bool,'T_0') = s(bool,X187)) ) | $spl28),
  inference(superposition,[],[f30838,f365])).
fof(f32280,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(X176),bool),sK16(X177,X180,X176,bool)),s('type.list.list'(X176),'const.list.CONS_2'(s(X176,X178),s('type.list.list'(X176),X179))))) | s(bool,X181) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X176),fun(bool,bool)),happ(s(fun(X176,fun('type.list.list'(X176),fun(bool,bool))),X177),s(X176,X178))),s('type.list.list'(X176),X179))),s(bool,happ(s(fun('type.list.list'(X176),bool),sK16(X177,X180,X176,bool)),s('type.list.list'(X176),X179))))) | s(bool,'T_0') = s(bool,X181)) ) | $spl28),
  inference(superposition,[],[f30838,f357])).
fof(f32279,plain,(
  ( ! [X175,X174] : (s(bool,'F_0') != s(bool,X174) | s(bool,X175) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X174))) | s(bool,'T_0') = s(bool,X175)) ) | $spl28),
  inference(superposition,[],[f30838,f303])).
fof(f32056,plain,(
  ( ! [X2668,X2670,X2666,X2676,X2672,X2674,X2669,X2671,X2667,X2677,X2673,X2675] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X2677))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.num.num','type.integer.int'),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X2676),s('type.option.option'('type.num.num'),X2666))),s('type.list.list'('type.closSem.v'),X2667))),s('type.list.list'('type.closSem.v'),X2668))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2669))),s('type.num.num',X2670))))) | s('type.integer.int',X2677) = s('type.integer.int','const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2666),s('type.list.list'('type.closSem.v'),X2667),s('type.list.list'('type.closSem.v'),X2668),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2669),s('type.num.num',X2670))),s(fun('type.integer.int','type.integer.int'),X2671),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X2672),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X2673),s(fun('type.num.num','type.integer.int'),X2674),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X2675),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X2676)))) )),
  inference(superposition,[],[f332,f326])).
fof(f32038,plain,(
  ( ! [X2417,X2412,X2414,X2408,X2410,X2406,X2416,X2413,X2415,X2409,X2411,X2407] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2417))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X2416),s('type.option.option'('type.num.num'),X2406))),s('type.list.list'('type.closSem.v'),X2407))),s('type.list.list'('type.closSem.v'),X2408))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2409))),s('type.num.num',X2410))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2417) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2406),s('type.list.list'('type.closSem.v'),X2407),s('type.list.list'('type.closSem.v'),X2408),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2409),s('type.num.num',X2410))),s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2411),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2412),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X2413),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2414),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X2415),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X2416)))) )),
  inference(superposition,[],[f334,f326])).
fof(f32033,plain,(
  ( ! [X2334,X2348,X2344,X2346,X2340,X2342,X2336,X2338,X2333,X2335,X2345,X2347,X2341,X2343,X2337,X2339] : (s(X2334,happ(s(fun('type.ind_type.recspace'(X2333),X2334),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2335),s('type.list.list'('type.closSem.v'),X2336),s('type.list.list'('type.closSem.v'),X2337),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2338),s('type.num.num',X2339))),s(fun('type.integer.int',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),X2340),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),X2341),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334)))))),X2342),s(fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),X2343),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))))))),X2344),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))))))),X2345)),X2333,X2334)),s('type.ind_type.recspace'(X2333),'const.ind_type.CONSTR_3'(s('type.num.num',X2346),s(X2333,X2347),s(fun('type.num.num','type.ind_type.recspace'(X2333)),X2348))))) = s(X2334,happ(s(fun(fun('type.num.num',X2334),X2334),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334)),happ(s(fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))),happ(s(fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334)))),happ(s(fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334)))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334)))))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))))))),X2345),s('type.option.option'('type.num.num'),X2335))),s('type.list.list'('type.closSem.v'),X2336))),s('type.list.list'('type.closSem.v'),X2337))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2338))),s('type.num.num',X2339))),s('type.num.num',X2346))),s(X2333,X2347))),s(fun('type.num.num','type.ind_type.recspace'(X2333)),X2348))),s(fun('type.num.num',X2334),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X2333),X2334),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2335),s('type.list.list'('type.closSem.v'),X2336),s('type.list.list'('type.closSem.v'),X2337),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2338),s('type.num.num',X2339))),s(fun('type.integer.int',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),X2340),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),X2341),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334)))))),X2342),s(fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))),X2343),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))))))),X2344),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2333,fun(fun('type.num.num','type.ind_type.recspace'(X2333)),fun(fun('type.num.num',X2334),X2334))))))))),X2345)),X2333,X2334)),s(fun('type.num.num','type.ind_type.recspace'(X2333)),X2348)))))) )),
  inference(superposition,[],[f339,f326])).
fof(f32032,plain,(
  ( ! [X2324,X2326,X2320,X2322,X2328,X2330,X2332,X2317,X2319,X2331,X2325,X2327,X2321,X2323,X2329,X2318] : (s(X2318,happ(s(fun('type.list.list'(X2317),X2318),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2319),s('type.list.list'('type.closSem.v'),X2320),s('type.list.list'('type.closSem.v'),X2321),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2322),s('type.num.num',X2323))),s(fun('type.integer.int',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),X2324),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),X2325),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318))))),X2326),s(fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),X2327),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))))))),X2328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))))))),X2329)),X2330,X2317,X2318)),s('type.list.list'(X2317),'const.list.CONS_2'(s(X2317,X2331),s('type.list.list'(X2317),X2332))))) = s(X2318,happ(s(fun(X2318,X2318),happ(s(fun('type.list.list'(X2317),fun(X2318,X2318)),happ(s(fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318))),happ(s(fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318))))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))))))),X2329),s('type.option.option'('type.num.num'),X2319))),s('type.list.list'('type.closSem.v'),X2320))),s('type.list.list'('type.closSem.v'),X2321))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2322))),s('type.num.num',X2323))),s(X2317,X2331))),s('type.list.list'(X2317),X2332))),s(X2318,happ(s(fun('type.list.list'(X2317),X2318),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2319),s('type.list.list'('type.closSem.v'),X2320),s('type.list.list'('type.closSem.v'),X2321),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2322),s('type.num.num',X2323))),s(fun('type.integer.int',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),X2324),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),X2325),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318))))),X2326),s(fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))),X2327),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))))))),X2328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2317,fun('type.list.list'(X2317),fun(X2318,X2318)))))))),X2329)),X2330,X2317,X2318)),s('type.list.list'(X2317),X2332)))))) )),
  inference(superposition,[],[f357,f326])).
fof(f32159,plain,(
  ( ! [X2200,X2198,X2196,X2194,X2192,X2190,X2188,X2201,X2199,X2197,X2195,X2193,X2191,X2189] : (s(X2188,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)) != s(X2188,happ(s(fun(X2189,X2188),X2201),s(X2189,happ(s(fun(X2188,X2189),happ(s(fun('type.num.num',fun(X2188,X2189)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200),s('type.option.option'('type.num.num'),X2190))),s('type.list.list'('type.closSem.v'),X2191))),s('type.list.list'('type.closSem.v'),X2192))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193))),s('type.num.num',X2194))),s(X2188,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)))))) | s(X2189,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)) != s(X2189,happ(s(fun(X2188,X2189),happ(s(fun('type.num.num',fun(X2188,X2189)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200),s('type.option.option'('type.num.num'),X2190))),s('type.list.list'('type.closSem.v'),X2191))),s('type.list.list'('type.closSem.v'),X2192))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193))),s('type.num.num',X2194))),s(X2188,happ(s(fun(X2189,X2188),X2201),s(X2189,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X2189,X2188),X2201),s(fun(X2188,X2189),happ(s(fun('type.num.num',fun(X2188,X2189)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200),s('type.option.option'('type.num.num'),X2190))),s('type.list.list'('type.closSem.v'),X2191))),s('type.list.list'('type.closSem.v'),X2192))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193))),s('type.num.num',X2194))))))) )),
  inference(forward_demodulation,[],[f32158,f326])).
fof(f32158,plain,(
  ( ! [X2200,X2198,X2196,X2194,X2192,X2190,X2188,X2201,X2199,X2197,X2195,X2193,X2191,X2189] : (s(X2189,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)) != s(X2189,happ(s(fun(X2188,X2189),happ(s(fun('type.num.num',fun(X2188,X2189)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200),s('type.option.option'('type.num.num'),X2190))),s('type.list.list'('type.closSem.v'),X2191))),s('type.list.list'('type.closSem.v'),X2192))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193))),s('type.num.num',X2194))),s(X2188,happ(s(fun(X2189,X2188),X2201),s(X2189,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X2189,X2188),X2201),s(fun(X2188,X2189),happ(s(fun('type.num.num',fun(X2188,X2189)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200),s('type.option.option'('type.num.num'),X2190))),s('type.list.list'('type.closSem.v'),X2191))),s('type.list.list'('type.closSem.v'),X2192))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193))),s('type.num.num',X2194)))))) | s(X2188,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)) != s(X2188,happ(s(fun(X2189,X2188),X2201),s(X2189,happ(s(fun(X2188,X2189),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200))),s(X2188,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188))))))) )),
  inference(forward_demodulation,[],[f32024,f326])).
fof(f32024,plain,(
  ( ! [X2200,X2198,X2196,X2194,X2192,X2190,X2188,X2201,X2199,X2197,X2195,X2193,X2191,X2189] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X2189,X2188),X2201),s(fun(X2188,X2189),happ(s(fun('type.num.num',fun(X2188,X2189)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200),s('type.option.option'('type.num.num'),X2190))),s('type.list.list'('type.closSem.v'),X2191))),s('type.list.list'('type.closSem.v'),X2192))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193))),s('type.num.num',X2194)))))) | s(X2189,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)) != s(X2189,happ(s(fun(X2188,X2189),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200))),s(X2188,happ(s(fun(X2189,X2188),X2201),s(X2189,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)))))) | s(X2188,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188)) != s(X2188,happ(s(fun(X2189,X2188),X2201),s(X2189,happ(s(fun(X2188,X2189),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200))),s(X2188,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2190),s('type.list.list'('type.closSem.v'),X2191),s('type.list.list'('type.closSem.v'),X2192),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2193),s('type.num.num',X2194))),s(fun('type.integer.int',fun(X2188,X2189)),X2195),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2188,X2189)),X2196),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2188,X2189))),X2197),s(fun('type.num.num',fun(X2188,X2189)),X2198),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2188,X2189)))))),X2199),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2188,X2189)))))),X2200)),X2201,X2189,X2188))))))) )),
  inference(superposition,[],[f355,f326])).
fof(f32157,plain,(
  ( ! [X2175,X2177,X2186,X2184,X2182,X2180,X2178,X2176,X2174,X2187,X2185,X2183,X2181,X2179] : (s(X2175,sK14(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)) != s(X2175,happ(s(fun(X2174,X2175),happ(s(fun('type.num.num',fun(X2174,X2175)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186),s('type.option.option'('type.num.num'),X2176))),s('type.list.list'('type.closSem.v'),X2177))),s('type.list.list'('type.closSem.v'),X2178))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179))),s('type.num.num',X2180))),s(X2174,happ(s(fun(X2175,X2174),X2187),s(X2175,sK14(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)))))) | s(X2174,sK15(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)) != s(X2174,happ(s(fun(X2175,X2174),X2187),s(X2175,happ(s(fun(X2174,X2175),happ(s(fun('type.num.num',fun(X2174,X2175)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186),s('type.option.option'('type.num.num'),X2176))),s('type.list.list'('type.closSem.v'),X2177))),s('type.list.list'('type.closSem.v'),X2178))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179))),s('type.num.num',X2180))),s(X2174,sK15(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X2174,X2175),happ(s(fun('type.num.num',fun(X2174,X2175)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186),s('type.option.option'('type.num.num'),X2176))),s('type.list.list'('type.closSem.v'),X2177))),s('type.list.list'('type.closSem.v'),X2178))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179))),s('type.num.num',X2180))),s(fun(X2175,X2174),X2187))))) )),
  inference(forward_demodulation,[],[f32156,f326])).
fof(f32156,plain,(
  ( ! [X2177,X2175,X2186,X2184,X2182,X2180,X2178,X2174,X2176,X2187,X2185,X2183,X2181,X2179] : (s(X2174,sK15(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)) != s(X2174,happ(s(fun(X2175,X2174),X2187),s(X2175,happ(s(fun(X2174,X2175),happ(s(fun('type.num.num',fun(X2174,X2175)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186),s('type.option.option'('type.num.num'),X2176))),s('type.list.list'('type.closSem.v'),X2177))),s('type.list.list'('type.closSem.v'),X2178))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179))),s('type.num.num',X2180))),s(X2174,sK15(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X2174,X2175),happ(s(fun('type.num.num',fun(X2174,X2175)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186),s('type.option.option'('type.num.num'),X2176))),s('type.list.list'('type.closSem.v'),X2177))),s('type.list.list'('type.closSem.v'),X2178))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179))),s('type.num.num',X2180))),s(fun(X2175,X2174),X2187)))) | s(X2175,sK14(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)) != s(X2175,happ(s(fun(X2174,X2175),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186))),s(X2174,happ(s(fun(X2175,X2174),X2187),s(X2175,sK14(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175))))))) )),
  inference(forward_demodulation,[],[f32023,f326])).
fof(f32023,plain,(
  ( ! [X2175,X2177,X2186,X2184,X2182,X2180,X2178,X2174,X2176,X2187,X2185,X2183,X2181,X2179] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X2174,X2175),happ(s(fun('type.num.num',fun(X2174,X2175)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186),s('type.option.option'('type.num.num'),X2176))),s('type.list.list'('type.closSem.v'),X2177))),s('type.list.list'('type.closSem.v'),X2178))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179))),s('type.num.num',X2180))),s(fun(X2175,X2174),X2187)))) | s(X2174,sK15(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)) != s(X2174,happ(s(fun(X2175,X2174),X2187),s(X2175,happ(s(fun(X2174,X2175),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186))),s(X2174,sK15(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)))))) | s(X2175,sK14(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175)) != s(X2175,happ(s(fun(X2174,X2175),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186))),s(X2174,happ(s(fun(X2175,X2174),X2187),s(X2175,sK14(X2187,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2176),s('type.list.list'('type.closSem.v'),X2177),s('type.list.list'('type.closSem.v'),X2178),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2179),s('type.num.num',X2180))),s(fun('type.integer.int',fun(X2174,X2175)),X2181),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2174,X2175)),X2182),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2174,X2175))),X2183),s(fun('type.num.num',fun(X2174,X2175)),X2184),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2174,X2175)))))),X2185),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2174,X2175)))))),X2186)),X2174,X2175))))))) )),
  inference(superposition,[],[f355,f326])).
fof(f32151,plain,(
  ( ! [X2109,X2107,X2105,X2103,X2101,X2111,X2112,X2108,X2106,X2104,X2102,X2100,X2110,X2113] : (s(fun(X2100,X2101),X2113) = s(fun(X2100,X2101),happ(s(fun('type.num.num',fun(X2100,X2101)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112),s('type.option.option'('type.num.num'),X2102))),s('type.list.list'('type.closSem.v'),X2103))),s('type.list.list'('type.closSem.v'),X2104))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105))),s('type.num.num',X2106))) | s(X2101,happ(s(fun(X2100,X2101),X2113),s(X2100,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2102),s('type.list.list'('type.closSem.v'),X2103),s('type.list.list'('type.closSem.v'),X2104),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105),s('type.num.num',X2106))),s(fun('type.integer.int',fun(X2100,X2101)),X2107),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2100,X2101)),X2108),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2100,X2101))),X2109),s(fun('type.num.num',fun(X2100,X2101)),X2110),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2100,X2101)))))),X2111),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112)),X2113,X2100,X2101)))) != s(X2101,happ(s(fun(X2100,X2101),happ(s(fun('type.num.num',fun(X2100,X2101)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112),s('type.option.option'('type.num.num'),X2102))),s('type.list.list'('type.closSem.v'),X2103))),s('type.list.list'('type.closSem.v'),X2104))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105))),s('type.num.num',X2106))),s(X2100,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2102),s('type.list.list'('type.closSem.v'),X2103),s('type.list.list'('type.closSem.v'),X2104),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105),s('type.num.num',X2106))),s(fun('type.integer.int',fun(X2100,X2101)),X2107),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2100,X2101)),X2108),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2100,X2101))),X2109),s(fun('type.num.num',fun(X2100,X2101)),X2110),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2100,X2101)))))),X2111),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112)),X2113,X2100,X2101))))) )),
  inference(forward_demodulation,[],[f32018,f326])).
fof(f32018,plain,(
  ( ! [X2109,X2107,X2105,X2103,X2101,X2111,X2110,X2108,X2106,X2104,X2102,X2100,X2112,X2113] : (s(X2101,happ(s(fun(X2100,X2101),X2113),s(X2100,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2102),s('type.list.list'('type.closSem.v'),X2103),s('type.list.list'('type.closSem.v'),X2104),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105),s('type.num.num',X2106))),s(fun('type.integer.int',fun(X2100,X2101)),X2107),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2100,X2101)),X2108),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2100,X2101))),X2109),s(fun('type.num.num',fun(X2100,X2101)),X2110),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2100,X2101)))))),X2111),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112)),X2113,X2100,X2101)))) != s(X2101,happ(s(fun(X2100,X2101),happ(s(fun('type.num.num',fun(X2100,X2101)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112),s('type.option.option'('type.num.num'),X2102))),s('type.list.list'('type.closSem.v'),X2103))),s('type.list.list'('type.closSem.v'),X2104))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105))),s('type.num.num',X2106))),s(X2100,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2102),s('type.list.list'('type.closSem.v'),X2103),s('type.list.list'('type.closSem.v'),X2104),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105),s('type.num.num',X2106))),s(fun('type.integer.int',fun(X2100,X2101)),X2107),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2100,X2101)),X2108),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2100,X2101))),X2109),s(fun('type.num.num',fun(X2100,X2101)),X2110),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2100,X2101)))))),X2111),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112)),X2113,X2100,X2101)))) | s(fun(X2100,X2101),X2113) = s(fun(X2100,X2101),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2102),s('type.list.list'('type.closSem.v'),X2103),s('type.list.list'('type.closSem.v'),X2104),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2105),s('type.num.num',X2106))),s(fun('type.integer.int',fun(X2100,X2101)),X2107),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2100,X2101)),X2108),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2100,X2101))),X2109),s(fun('type.num.num',fun(X2100,X2101)),X2110),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2100,X2101)))))),X2111),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2100,X2101)))))),X2112)))) )),
  inference(superposition,[],[f352,f326])).
fof(f32150,plain,(
  ( ! [X2099,X2097,X2095,X2093,X2091,X2089,X2087,X2098,X2096,X2094,X2092,X2090,X2088,X2086] : (s(fun(X2086,X2087),X2099) = s(fun(X2086,X2087),happ(s(fun('type.num.num',fun(X2086,X2087)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098),s('type.option.option'('type.num.num'),X2088))),s('type.list.list'('type.closSem.v'),X2089))),s('type.list.list'('type.closSem.v'),X2090))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091))),s('type.num.num',X2092))) | s(X2087,happ(s(fun(X2086,X2087),X2099),s(X2086,sK13(X2099,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2088),s('type.list.list'('type.closSem.v'),X2089),s('type.list.list'('type.closSem.v'),X2090),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091),s('type.num.num',X2092))),s(fun('type.integer.int',fun(X2086,X2087)),X2093),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2086,X2087)),X2094),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2086,X2087))),X2095),s(fun('type.num.num',fun(X2086,X2087)),X2096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2086,X2087)))))),X2097),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098)),X2086,X2087)))) != s(X2087,happ(s(fun(X2086,X2087),happ(s(fun('type.num.num',fun(X2086,X2087)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098),s('type.option.option'('type.num.num'),X2088))),s('type.list.list'('type.closSem.v'),X2089))),s('type.list.list'('type.closSem.v'),X2090))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091))),s('type.num.num',X2092))),s(X2086,sK13(X2099,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2088),s('type.list.list'('type.closSem.v'),X2089),s('type.list.list'('type.closSem.v'),X2090),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091),s('type.num.num',X2092))),s(fun('type.integer.int',fun(X2086,X2087)),X2093),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2086,X2087)),X2094),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2086,X2087))),X2095),s(fun('type.num.num',fun(X2086,X2087)),X2096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2086,X2087)))))),X2097),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098)),X2086,X2087))))) )),
  inference(forward_demodulation,[],[f32017,f326])).
fof(f32017,plain,(
  ( ! [X2099,X2097,X2095,X2093,X2091,X2089,X2087,X2098,X2096,X2094,X2092,X2090,X2088,X2086] : (s(X2087,happ(s(fun(X2086,X2087),X2099),s(X2086,sK13(X2099,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2088),s('type.list.list'('type.closSem.v'),X2089),s('type.list.list'('type.closSem.v'),X2090),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091),s('type.num.num',X2092))),s(fun('type.integer.int',fun(X2086,X2087)),X2093),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2086,X2087)),X2094),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2086,X2087))),X2095),s(fun('type.num.num',fun(X2086,X2087)),X2096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2086,X2087)))))),X2097),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098)),X2086,X2087)))) != s(X2087,happ(s(fun(X2086,X2087),happ(s(fun('type.num.num',fun(X2086,X2087)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098),s('type.option.option'('type.num.num'),X2088))),s('type.list.list'('type.closSem.v'),X2089))),s('type.list.list'('type.closSem.v'),X2090))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091))),s('type.num.num',X2092))),s(X2086,sK13(X2099,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2088),s('type.list.list'('type.closSem.v'),X2089),s('type.list.list'('type.closSem.v'),X2090),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091),s('type.num.num',X2092))),s(fun('type.integer.int',fun(X2086,X2087)),X2093),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2086,X2087)),X2094),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2086,X2087))),X2095),s(fun('type.num.num',fun(X2086,X2087)),X2096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2086,X2087)))))),X2097),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098)),X2086,X2087)))) | s(fun(X2086,X2087),X2099) = s(fun(X2086,X2087),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X2088),s('type.list.list'('type.closSem.v'),X2089),s('type.list.list'('type.closSem.v'),X2090),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2091),s('type.num.num',X2092))),s(fun('type.integer.int',fun(X2086,X2087)),X2093),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2086,X2087)),X2094),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2086,X2087))),X2095),s(fun('type.num.num',fun(X2086,X2087)),X2096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2086,X2087)))))),X2097),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2086,X2087)))))),X2098)))) )),
  inference(superposition,[],[f352,f326])).
fof(f32010,plain,(
  ( ! [X1981,X1979,X1977,X1990,X1988,X1986,X1984,X1982,X1980,X1978,X1976,X1991,X1989,X1987,X1985,X1983] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1976,X1977),happ(s(fun('type.num.num',fun(X1976,X1977)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1976,X1977))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1976,X1977)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1976,X1977))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1976,X1977)))))),X1988),s('type.option.option'('type.num.num'),X1978))),s('type.list.list'('type.closSem.v'),X1979))),s('type.list.list'('type.closSem.v'),X1980))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1981))),s('type.num.num',X1982))),s(fun(X1977,X1976),X1989)))) | ~p(s(bool,happ(s(fun(X1976,bool),X1990),s(X1976,happ(s(fun(X1977,X1976),X1989),s(X1977,X1991)))))) | p(s(bool,happ(s(fun(X1976,bool),X1990),s(X1976,sK11(X1990,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1978),s('type.list.list'('type.closSem.v'),X1979),s('type.list.list'('type.closSem.v'),X1980),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1981),s('type.num.num',X1982))),s(fun('type.integer.int',fun(X1976,X1977)),X1983),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1976,X1977)),X1984),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1976,X1977))),X1985),s(fun('type.num.num',fun(X1976,X1977)),X1986),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1976,X1977)))))),X1987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1976,X1977)))))),X1988)),X1989,X1977,X1976)))))) )),
  inference(superposition,[],[f347,f326])).
fof(f32143,plain,(
  ( ! [X1975,X1973,X1971,X1969,X1967,X1965,X1963,X1961,X1974,X1972,X1970,X1968,X1966,X1964,X1962,X1960] : (~p(s(bool,happ(s(fun(X1961,bool),X1974),s(X1961,happ(s(fun(X1960,X1961),happ(s(fun('type.num.num',fun(X1960,X1961)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))))),X1972),s('type.option.option'('type.num.num'),X1962))),s('type.list.list'('type.closSem.v'),X1963))),s('type.list.list'('type.closSem.v'),X1964))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1965))),s('type.num.num',X1966))),s(X1960,X1975)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1961,X1960),X1973),s(fun(X1960,X1961),happ(s(fun('type.num.num',fun(X1960,X1961)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))))),X1972),s('type.option.option'('type.num.num'),X1962))),s('type.list.list'('type.closSem.v'),X1963))),s('type.list.list'('type.closSem.v'),X1964))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1965))),s('type.num.num',X1966)))))) | p(s(bool,happ(s(fun(X1961,bool),X1974),s(X1961,sK11(X1974,X1973,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1962),s('type.list.list'('type.closSem.v'),X1963),s('type.list.list'('type.closSem.v'),X1964),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1965),s('type.num.num',X1966))),s(fun('type.integer.int',fun(X1960,X1961)),X1967),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1960,X1961)),X1968),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1960,X1961))),X1969),s(fun('type.num.num',fun(X1960,X1961)),X1970),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1960,X1961)))))),X1971),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))))),X1972)),X1960,X1961)))))) )),
  inference(forward_demodulation,[],[f32009,f326])).
fof(f32009,plain,(
  ( ! [X1975,X1973,X1971,X1969,X1967,X1965,X1963,X1961,X1974,X1972,X1970,X1968,X1966,X1964,X1962,X1960] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1961,X1960),X1973),s(fun(X1960,X1961),happ(s(fun('type.num.num',fun(X1960,X1961)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))))),X1972),s('type.option.option'('type.num.num'),X1962))),s('type.list.list'('type.closSem.v'),X1963))),s('type.list.list'('type.closSem.v'),X1964))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1965))),s('type.num.num',X1966)))))) | ~p(s(bool,happ(s(fun(X1961,bool),X1974),s(X1961,happ(s(fun(X1960,X1961),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1962),s('type.list.list'('type.closSem.v'),X1963),s('type.list.list'('type.closSem.v'),X1964),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1965),s('type.num.num',X1966))),s(fun('type.integer.int',fun(X1960,X1961)),X1967),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1960,X1961)),X1968),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1960,X1961))),X1969),s(fun('type.num.num',fun(X1960,X1961)),X1970),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1960,X1961)))))),X1971),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))))),X1972))),s(X1960,X1975)))))) | p(s(bool,happ(s(fun(X1961,bool),X1974),s(X1961,sK11(X1974,X1973,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1962),s('type.list.list'('type.closSem.v'),X1963),s('type.list.list'('type.closSem.v'),X1964),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1965),s('type.num.num',X1966))),s(fun('type.integer.int',fun(X1960,X1961)),X1967),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1960,X1961)),X1968),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1960,X1961))),X1969),s(fun('type.num.num',fun(X1960,X1961)),X1970),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1960,X1961)))))),X1971),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1960,X1961)))))),X1972)),X1960,X1961)))))) )),
  inference(superposition,[],[f347,f326])).
fof(f32008,plain,(
  ( ! [X1948,X1946,X1944,X1959,X1957,X1955,X1953,X1951,X1949,X1947,X1945,X1958,X1956,X1954,X1952,X1950] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1944,X1945),happ(s(fun('type.num.num',fun(X1944,X1945)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1944,X1945))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1944,X1945)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1944,X1945))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1944,X1945)))))),X1956),s('type.option.option'('type.num.num'),X1946))),s('type.list.list'('type.closSem.v'),X1947))),s('type.list.list'('type.closSem.v'),X1948))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1949))),s('type.num.num',X1950))),s(fun(X1945,X1944),X1957)))) | ~p(s(bool,happ(s(fun(X1944,bool),X1958),s(X1944,X1959)))) | p(s(bool,happ(s(fun(X1944,bool),X1958),s(X1944,happ(s(fun(X1945,X1944),X1957),s(X1945,sK10(X1958,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1946),s('type.list.list'('type.closSem.v'),X1947),s('type.list.list'('type.closSem.v'),X1948),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1949),s('type.num.num',X1950))),s(fun('type.integer.int',fun(X1944,X1945)),X1951),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1944,X1945)),X1952),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1944,X1945))),X1953),s(fun('type.num.num',fun(X1944,X1945)),X1954),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1944,X1945)))))),X1955),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1944,X1945)))))),X1956)),X1957,X1945,X1944)))))))) )),
  inference(superposition,[],[f346,f326])).
fof(f32142,plain,(
  ( ! [X1942,X1940,X1938,X1936,X1934,X1932,X1930,X1928,X1943,X1941,X1939,X1937,X1935,X1933,X1931,X1929] : (p(s(bool,happ(s(fun(X1929,bool),X1942),s(X1929,happ(s(fun(X1928,X1929),happ(s(fun('type.num.num',fun(X1928,X1929)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))))),X1940),s('type.option.option'('type.num.num'),X1930))),s('type.list.list'('type.closSem.v'),X1931))),s('type.list.list'('type.closSem.v'),X1932))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1933))),s('type.num.num',X1934))),s(X1928,sK10(X1942,X1941,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1930),s('type.list.list'('type.closSem.v'),X1931),s('type.list.list'('type.closSem.v'),X1932),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1933),s('type.num.num',X1934))),s(fun('type.integer.int',fun(X1928,X1929)),X1935),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1928,X1929)),X1936),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1928,X1929))),X1937),s(fun('type.num.num',fun(X1928,X1929)),X1938),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1928,X1929)))))),X1939),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))))),X1940)),X1928,X1929))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1929,X1928),X1941),s(fun(X1928,X1929),happ(s(fun('type.num.num',fun(X1928,X1929)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))))),X1940),s('type.option.option'('type.num.num'),X1930))),s('type.list.list'('type.closSem.v'),X1931))),s('type.list.list'('type.closSem.v'),X1932))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1933))),s('type.num.num',X1934)))))) | ~p(s(bool,happ(s(fun(X1929,bool),X1942),s(X1929,X1943))))) )),
  inference(forward_demodulation,[],[f32007,f326])).
fof(f32007,plain,(
  ( ! [X1942,X1940,X1938,X1936,X1934,X1932,X1930,X1928,X1943,X1941,X1939,X1937,X1935,X1933,X1931,X1929] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1929,X1928),X1941),s(fun(X1928,X1929),happ(s(fun('type.num.num',fun(X1928,X1929)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))))),X1940),s('type.option.option'('type.num.num'),X1930))),s('type.list.list'('type.closSem.v'),X1931))),s('type.list.list'('type.closSem.v'),X1932))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1933))),s('type.num.num',X1934)))))) | ~p(s(bool,happ(s(fun(X1929,bool),X1942),s(X1929,X1943)))) | p(s(bool,happ(s(fun(X1929,bool),X1942),s(X1929,happ(s(fun(X1928,X1929),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1930),s('type.list.list'('type.closSem.v'),X1931),s('type.list.list'('type.closSem.v'),X1932),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1933),s('type.num.num',X1934))),s(fun('type.integer.int',fun(X1928,X1929)),X1935),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1928,X1929)),X1936),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1928,X1929))),X1937),s(fun('type.num.num',fun(X1928,X1929)),X1938),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1928,X1929)))))),X1939),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))))),X1940))),s(X1928,sK10(X1942,X1941,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1930),s('type.list.list'('type.closSem.v'),X1931),s('type.list.list'('type.closSem.v'),X1932),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1933),s('type.num.num',X1934))),s(fun('type.integer.int',fun(X1928,X1929)),X1935),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1928,X1929)),X1936),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1928,X1929))),X1937),s(fun('type.num.num',fun(X1928,X1929)),X1938),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1928,X1929)))))),X1939),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1928,X1929)))))),X1940)),X1928,X1929)))))))) )),
  inference(superposition,[],[f346,f326])).
fof(f32006,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1926,X1924,X1922,X1920,X1918,X1916,X1914,X1912,X1927,X1925,X1923,X1921] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1912,X1913),happ(s(fun('type.num.num',fun(X1912,X1913)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1912,X1913))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1912,X1913)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1912,X1913))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1912,X1913)))))),X1924),s('type.option.option'('type.num.num'),X1914))),s('type.list.list'('type.closSem.v'),X1915))),s('type.list.list'('type.closSem.v'),X1916))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1917))),s('type.num.num',X1918))),s(fun(X1913,X1912),X1925)))) | ~p(s(bool,happ(s(fun(X1912,bool),X1926),s(X1912,happ(s(fun(X1913,X1912),X1925),s(X1913,sK9(X1926,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1914),s('type.list.list'('type.closSem.v'),X1915),s('type.list.list'('type.closSem.v'),X1916),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1917),s('type.num.num',X1918))),s(fun('type.integer.int',fun(X1912,X1913)),X1919),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1912,X1913)),X1920),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1912,X1913))),X1921),s(fun('type.num.num',fun(X1912,X1913)),X1922),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1912,X1913)))))),X1923),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1912,X1913)))))),X1924)),X1925,X1913,X1912))))))) | p(s(bool,happ(s(fun(X1912,bool),X1926),s(X1912,X1927))))) )),
  inference(superposition,[],[f345,f326])).
fof(f32141,plain,(
  ( ! [X1911,X1909,X1907,X1905,X1903,X1901,X1899,X1897,X1910,X1908,X1906,X1904,X1902,X1900,X1898,X1896] : (~p(s(bool,happ(s(fun(X1897,bool),X1910),s(X1897,happ(s(fun(X1896,X1897),happ(s(fun('type.num.num',fun(X1896,X1897)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))))),X1908),s('type.option.option'('type.num.num'),X1898))),s('type.list.list'('type.closSem.v'),X1899))),s('type.list.list'('type.closSem.v'),X1900))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1901))),s('type.num.num',X1902))),s(X1896,sK9(X1910,X1909,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.list.list'('type.closSem.v'),X1900),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1901),s('type.num.num',X1902))),s(fun('type.integer.int',fun(X1896,X1897)),X1903),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1896,X1897)),X1904),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1896,X1897))),X1905),s(fun('type.num.num',fun(X1896,X1897)),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1896,X1897)))))),X1907),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))))),X1908)),X1896,X1897))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1897,X1896),X1909),s(fun(X1896,X1897),happ(s(fun('type.num.num',fun(X1896,X1897)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))))),X1908),s('type.option.option'('type.num.num'),X1898))),s('type.list.list'('type.closSem.v'),X1899))),s('type.list.list'('type.closSem.v'),X1900))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1901))),s('type.num.num',X1902)))))) | p(s(bool,happ(s(fun(X1897,bool),X1910),s(X1897,X1911))))) )),
  inference(forward_demodulation,[],[f32005,f326])).
fof(f32005,plain,(
  ( ! [X1911,X1909,X1907,X1905,X1903,X1901,X1899,X1897,X1910,X1908,X1906,X1904,X1902,X1900,X1898,X1896] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1897,X1896),X1909),s(fun(X1896,X1897),happ(s(fun('type.num.num',fun(X1896,X1897)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))))),X1908),s('type.option.option'('type.num.num'),X1898))),s('type.list.list'('type.closSem.v'),X1899))),s('type.list.list'('type.closSem.v'),X1900))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1901))),s('type.num.num',X1902)))))) | ~p(s(bool,happ(s(fun(X1897,bool),X1910),s(X1897,happ(s(fun(X1896,X1897),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.list.list'('type.closSem.v'),X1900),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1901),s('type.num.num',X1902))),s(fun('type.integer.int',fun(X1896,X1897)),X1903),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1896,X1897)),X1904),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1896,X1897))),X1905),s(fun('type.num.num',fun(X1896,X1897)),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1896,X1897)))))),X1907),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))))),X1908))),s(X1896,sK9(X1910,X1909,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.list.list'('type.closSem.v'),X1900),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1901),s('type.num.num',X1902))),s(fun('type.integer.int',fun(X1896,X1897)),X1903),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1896,X1897)),X1904),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1896,X1897))),X1905),s(fun('type.num.num',fun(X1896,X1897)),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1896,X1897)))))),X1907),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1896,X1897)))))),X1908)),X1896,X1897))))))) | p(s(bool,happ(s(fun(X1897,bool),X1910),s(X1897,X1911))))) )),
  inference(superposition,[],[f345,f326])).
fof(f32004,plain,(
  ( ! [X1886,X1884,X1882,X1880,X1895,X1893,X1891,X1889,X1887,X1885,X1883,X1881,X1894,X1892,X1890,X1888] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1880,X1881),happ(s(fun('type.num.num',fun(X1880,X1881)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1880,X1881))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1880,X1881)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1880,X1881))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1880,X1881)))))),X1892),s('type.option.option'('type.num.num'),X1882))),s('type.list.list'('type.closSem.v'),X1883))),s('type.list.list'('type.closSem.v'),X1884))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1885))),s('type.num.num',X1886))),s(fun(X1881,X1880),X1893)))) | ~p(s(bool,happ(s(fun(X1880,bool),X1894),s(X1880,sK8(X1894,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1882),s('type.list.list'('type.closSem.v'),X1883),s('type.list.list'('type.closSem.v'),X1884),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1885),s('type.num.num',X1886))),s(fun('type.integer.int',fun(X1880,X1881)),X1887),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1880,X1881)),X1888),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1880,X1881))),X1889),s(fun('type.num.num',fun(X1880,X1881)),X1890),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1880,X1881)))))),X1891),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1880,X1881)))))),X1892)),X1893,X1881,X1880))))) | p(s(bool,happ(s(fun(X1880,bool),X1894),s(X1880,happ(s(fun(X1881,X1880),X1893),s(X1881,X1895))))))) )),
  inference(superposition,[],[f344,f326])).
fof(f32140,plain,(
  ( ! [X1878,X1876,X1874,X1872,X1870,X1868,X1866,X1864,X1879,X1877,X1875,X1873,X1871,X1869,X1867,X1865] : (p(s(bool,happ(s(fun(X1865,bool),X1878),s(X1865,happ(s(fun(X1864,X1865),happ(s(fun('type.num.num',fun(X1864,X1865)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))))),X1876),s('type.option.option'('type.num.num'),X1866))),s('type.list.list'('type.closSem.v'),X1867))),s('type.list.list'('type.closSem.v'),X1868))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1869))),s('type.num.num',X1870))),s(X1864,X1879)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1865,X1864),X1877),s(fun(X1864,X1865),happ(s(fun('type.num.num',fun(X1864,X1865)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))))),X1876),s('type.option.option'('type.num.num'),X1866))),s('type.list.list'('type.closSem.v'),X1867))),s('type.list.list'('type.closSem.v'),X1868))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1869))),s('type.num.num',X1870)))))) | ~p(s(bool,happ(s(fun(X1865,bool),X1878),s(X1865,sK8(X1878,X1877,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1866),s('type.list.list'('type.closSem.v'),X1867),s('type.list.list'('type.closSem.v'),X1868),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1869),s('type.num.num',X1870))),s(fun('type.integer.int',fun(X1864,X1865)),X1871),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1864,X1865)),X1872),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1864,X1865))),X1873),s(fun('type.num.num',fun(X1864,X1865)),X1874),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1864,X1865)))))),X1875),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))))),X1876)),X1864,X1865)))))) )),
  inference(forward_demodulation,[],[f32003,f326])).
fof(f32003,plain,(
  ( ! [X1878,X1876,X1874,X1872,X1870,X1868,X1866,X1864,X1879,X1877,X1875,X1873,X1871,X1869,X1867,X1865] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1865,X1864),X1877),s(fun(X1864,X1865),happ(s(fun('type.num.num',fun(X1864,X1865)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))))),X1876),s('type.option.option'('type.num.num'),X1866))),s('type.list.list'('type.closSem.v'),X1867))),s('type.list.list'('type.closSem.v'),X1868))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1869))),s('type.num.num',X1870)))))) | ~p(s(bool,happ(s(fun(X1865,bool),X1878),s(X1865,sK8(X1878,X1877,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1866),s('type.list.list'('type.closSem.v'),X1867),s('type.list.list'('type.closSem.v'),X1868),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1869),s('type.num.num',X1870))),s(fun('type.integer.int',fun(X1864,X1865)),X1871),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1864,X1865)),X1872),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1864,X1865))),X1873),s(fun('type.num.num',fun(X1864,X1865)),X1874),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1864,X1865)))))),X1875),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))))),X1876)),X1864,X1865))))) | p(s(bool,happ(s(fun(X1865,bool),X1878),s(X1865,happ(s(fun(X1864,X1865),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1866),s('type.list.list'('type.closSem.v'),X1867),s('type.list.list'('type.closSem.v'),X1868),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1869),s('type.num.num',X1870))),s(fun('type.integer.int',fun(X1864,X1865)),X1871),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1864,X1865)),X1872),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1864,X1865))),X1873),s(fun('type.num.num',fun(X1864,X1865)),X1874),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1864,X1865)))))),X1875),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1864,X1865)))))),X1876))),s(X1864,X1879))))))) )),
  inference(superposition,[],[f344,f326])).
fof(f32139,plain,(
  ( ! [X1663,X1664,X1666,X1668,X1670,X1672,X1662,X1665,X1667,X1669,X1671,X1673] : (~p(s(bool,happ(s(fun('type.list.list'(X1662),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1662),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))))),X1673),s('type.option.option'('type.num.num'),X1663))),s('type.list.list'('type.closSem.v'),X1664))),s('type.list.list'('type.closSem.v'),X1665))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1666))),s('type.num.num',X1667))),s('type.list.list'(X1662),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X1662),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1662),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))))),X1673),s('type.option.option'('type.num.num'),X1663))),s('type.list.list'('type.closSem.v'),X1664))),s('type.list.list'('type.closSem.v'),X1665))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1666))),s('type.num.num',X1667))),s('type.list.list'(X1662),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1663),s('type.list.list'('type.closSem.v'),X1664),s('type.list.list'('type.closSem.v'),X1665),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1666),s('type.num.num',X1667))),s(fun('type.integer.int',fun('type.list.list'(X1662),bool)),X1668),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1662),bool)),X1669),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1662),bool))),X1670),s(fun('type.num.num',fun('type.list.list'(X1662),bool)),X1671),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1662),bool)))))),X1672),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))))),X1673)),X1662)))))) )),
  inference(forward_demodulation,[],[f31992,f326])).
fof(f31992,plain,(
  ( ! [X1663,X1664,X1666,X1668,X1670,X1672,X1662,X1665,X1667,X1669,X1671,X1673] : (p(s(bool,happ(s(fun('type.list.list'(X1662),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1662),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))))),X1673),s('type.option.option'('type.num.num'),X1663))),s('type.list.list'('type.closSem.v'),X1664))),s('type.list.list'('type.closSem.v'),X1665))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1666))),s('type.num.num',X1667))),s('type.list.list'(X1662),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1663),s('type.list.list'('type.closSem.v'),X1664),s('type.list.list'('type.closSem.v'),X1665),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1666),s('type.num.num',X1667))),s(fun('type.integer.int',fun('type.list.list'(X1662),bool)),X1668),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1662),bool)),X1669),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1662),bool))),X1670),s(fun('type.num.num',fun('type.list.list'(X1662),bool)),X1671),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1662),bool)))))),X1672),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))))),X1673)),X1662))))) | ~p(s(bool,happ(s(fun('type.list.list'(X1662),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1663),s('type.list.list'('type.closSem.v'),X1664),s('type.list.list'('type.closSem.v'),X1665),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1666),s('type.num.num',X1667))),s(fun('type.integer.int',fun('type.list.list'(X1662),bool)),X1668),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1662),bool)),X1669),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1662),bool))),X1670),s(fun('type.num.num',fun('type.list.list'(X1662),bool)),X1671),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1662),bool)))))),X1672),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1662),bool)))))),X1673))),s('type.list.list'(X1662),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f326])).
fof(f32138,plain,(
  ( ! [X1650,X1652,X1654,X1656,X1658,X1660,X1649,X1651,X1653,X1655,X1657,X1659,X1661] : (p(s(bool,happ(s(fun('type.list.list'(X1649),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1649),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660),s('type.option.option'('type.num.num'),X1650))),s('type.list.list'('type.closSem.v'),X1651))),s('type.list.list'('type.closSem.v'),X1652))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653))),s('type.num.num',X1654))),s('type.list.list'(X1649),X1661)))) | ~p(s(bool,happ(s(fun('type.list.list'(X1649),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1649),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660),s('type.option.option'('type.num.num'),X1650))),s('type.list.list'('type.closSem.v'),X1651))),s('type.list.list'('type.closSem.v'),X1652))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653))),s('type.num.num',X1654))),s('type.list.list'(X1649),'const.list.CONS_2'(s(X1649,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660)),X1649)),s('type.list.list'(X1649),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660)),X1649))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X1649),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1649),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660),s('type.option.option'('type.num.num'),X1650))),s('type.list.list'('type.closSem.v'),X1651))),s('type.list.list'('type.closSem.v'),X1652))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653))),s('type.num.num',X1654))),s('type.list.list'(X1649),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f32137,f326])).
fof(f32137,plain,(
  ( ! [X1650,X1652,X1654,X1656,X1658,X1660,X1649,X1651,X1653,X1655,X1657,X1659,X1661] : (~p(s(bool,happ(s(fun('type.list.list'(X1649),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1649),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660),s('type.option.option'('type.num.num'),X1650))),s('type.list.list'('type.closSem.v'),X1651))),s('type.list.list'('type.closSem.v'),X1652))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653))),s('type.num.num',X1654))),s('type.list.list'(X1649),'const.list.CONS_2'(s(X1649,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660)),X1649)),s('type.list.list'(X1649),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660)),X1649))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X1649),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1649),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660),s('type.option.option'('type.num.num'),X1650))),s('type.list.list'('type.closSem.v'),X1651))),s('type.list.list'('type.closSem.v'),X1652))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653))),s('type.num.num',X1654))),s('type.list.list'(X1649),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X1649),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660))),s('type.list.list'(X1649),X1661))))) )),
  inference(forward_demodulation,[],[f31991,f326])).
fof(f31991,plain,(
  ( ! [X1650,X1652,X1654,X1656,X1658,X1660,X1649,X1651,X1653,X1655,X1657,X1659,X1661] : (~p(s(bool,happ(s(fun('type.list.list'(X1649),bool),happ(s(fun('type.num.num',fun('type.list.list'(X1649),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660),s('type.option.option'('type.num.num'),X1650))),s('type.list.list'('type.closSem.v'),X1651))),s('type.list.list'('type.closSem.v'),X1652))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653))),s('type.num.num',X1654))),s('type.list.list'(X1649),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X1649),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660))),s('type.list.list'(X1649),'const.list.CONS_2'(s(X1649,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660)),X1649)),s('type.list.list'(X1649),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660)),X1649))))))) | p(s(bool,happ(s(fun('type.list.list'(X1649),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1650),s('type.list.list'('type.closSem.v'),X1651),s('type.list.list'('type.closSem.v'),X1652),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1653),s('type.num.num',X1654))),s(fun('type.integer.int',fun('type.list.list'(X1649),bool)),X1655),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1649),bool)),X1656),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1649),bool))),X1657),s(fun('type.num.num',fun('type.list.list'(X1649),bool)),X1658),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1649),bool)))))),X1659),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1649),bool)))))),X1660))),s('type.list.list'(X1649),X1661))))) )),
  inference(superposition,[],[f305,f326])).
fof(f31963,plain,(
  ( ! [X1170,X1168,X1163,X1161,X1167,X1165,X1159,X1171,X1169,X1162,X1160,X1166,X1164] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1159,bool),happ(s(fun('type.num.num',fun(X1159,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1159,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1159,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1159,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1159,bool)))))),X1170),s('type.option.option'('type.num.num'),X1160))),s('type.list.list'('type.closSem.v'),X1161))),s('type.list.list'('type.closSem.v'),X1162))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1163))),s('type.num.num',X1164))))) | s(X1159,X1171) = s(X1159,sK4(X1171,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1160),s('type.list.list'('type.closSem.v'),X1161),s('type.list.list'('type.closSem.v'),X1162),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1163),s('type.num.num',X1164))),s(fun('type.integer.int',fun(X1159,bool)),X1165),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1159,bool)),X1166),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1159,bool))),X1167),s(fun('type.num.num',fun(X1159,bool)),X1168),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1159,bool)))))),X1169),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1159,bool)))))),X1170)),X1159))) )),
  inference(superposition,[],[f823,f326])).
fof(f32134,plain,(
  ( ! [X1151,X1149,X1155,X1153,X1157,X1146,X1150,X1148,X1154,X1152,X1158,X1156,X1147,X1145] : (p(s(bool,happ(s(fun(X1145,bool),happ(s(fun('type.num.num',fun(X1145,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156),s('type.option.option'('type.num.num'),X1146))),s('type.list.list'('type.closSem.v'),X1147))),s('type.list.list'('type.closSem.v'),X1148))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149))),s('type.num.num',X1150))),s(X1145,sK6(X1157,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1146),s('type.list.list'('type.closSem.v'),X1147),s('type.list.list'('type.closSem.v'),X1148),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149),s('type.num.num',X1150))),s(fun('type.integer.int',fun(X1145,bool)),X1151),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1145,bool)),X1152),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1145,bool))),X1153),s(fun('type.num.num',fun(X1145,bool)),X1154),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1145,bool)))))),X1155),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156)),X1145))))) | ~p(s(bool,happ(s(fun(X1145,bool),happ(s(fun('type.num.num',fun(X1145,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156),s('type.option.option'('type.num.num'),X1146))),s('type.list.list'('type.closSem.v'),X1147))),s('type.list.list'('type.closSem.v'),X1148))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149))),s('type.num.num',X1150))),s(X1145,sK5(X1157,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1146),s('type.list.list'('type.closSem.v'),X1147),s('type.list.list'('type.closSem.v'),X1148),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149),s('type.num.num',X1150))),s(fun('type.integer.int',fun(X1145,bool)),X1151),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1145,bool)),X1152),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1145,bool))),X1153),s(fun('type.num.num',fun(X1145,bool)),X1154),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1145,bool)))))),X1155),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156)),X1145))))) | ~p(s(bool,happ(s(fun(X1145,bool),X1157),s(X1145,X1158))))) )),
  inference(forward_demodulation,[],[f31962,f326])).
fof(f31962,plain,(
  ( ! [X1151,X1149,X1155,X1153,X1157,X1146,X1150,X1148,X1154,X1152,X1158,X1156,X1147,X1145] : (~p(s(bool,happ(s(fun(X1145,bool),happ(s(fun('type.num.num',fun(X1145,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156),s('type.option.option'('type.num.num'),X1146))),s('type.list.list'('type.closSem.v'),X1147))),s('type.list.list'('type.closSem.v'),X1148))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149))),s('type.num.num',X1150))),s(X1145,sK5(X1157,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1146),s('type.list.list'('type.closSem.v'),X1147),s('type.list.list'('type.closSem.v'),X1148),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149),s('type.num.num',X1150))),s(fun('type.integer.int',fun(X1145,bool)),X1151),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1145,bool)),X1152),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1145,bool))),X1153),s(fun('type.num.num',fun(X1145,bool)),X1154),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1145,bool)))))),X1155),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156)),X1145))))) | ~p(s(bool,happ(s(fun(X1145,bool),X1157),s(X1145,X1158)))) | p(s(bool,happ(s(fun(X1145,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1146),s('type.list.list'('type.closSem.v'),X1147),s('type.list.list'('type.closSem.v'),X1148),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149),s('type.num.num',X1150))),s(fun('type.integer.int',fun(X1145,bool)),X1151),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1145,bool)),X1152),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1145,bool))),X1153),s(fun('type.num.num',fun(X1145,bool)),X1154),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1145,bool)))))),X1155),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156))),s(X1145,sK6(X1157,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1146),s('type.list.list'('type.closSem.v'),X1147),s('type.list.list'('type.closSem.v'),X1148),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1149),s('type.num.num',X1150))),s(fun('type.integer.int',fun(X1145,bool)),X1151),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1145,bool)),X1152),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1145,bool))),X1153),s(fun('type.num.num',fun(X1145,bool)),X1154),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1145,bool)))))),X1155),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1145,bool)))))),X1156)),X1145)))))) )),
  inference(superposition,[],[f315,f326])).
fof(f32133,plain,(
  ( ! [X1139,X1137,X1143,X1141,X1134,X1132,X1144,X1138,X1136,X1142,X1131,X1140,X1135,X1133] : (p(s(bool,happ(s(fun(X1131,bool),happ(s(fun('type.num.num',fun(X1131,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142),s('type.option.option'('type.num.num'),X1132))),s('type.list.list'('type.closSem.v'),X1133))),s('type.list.list'('type.closSem.v'),X1134))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135))),s('type.num.num',X1136))),s(X1131,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1132),s('type.list.list'('type.closSem.v'),X1133),s('type.list.list'('type.closSem.v'),X1134),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135),s('type.num.num',X1136))),s(fun('type.integer.int',fun(X1131,bool)),X1137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,bool)),X1138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,bool))),X1139),s(fun('type.num.num',fun(X1131,bool)),X1140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,bool)))))),X1141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142)),X1144,X1131))))) | ~p(s(bool,happ(s(fun(X1131,bool),happ(s(fun('type.num.num',fun(X1131,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142),s('type.option.option'('type.num.num'),X1132))),s('type.list.list'('type.closSem.v'),X1133))),s('type.list.list'('type.closSem.v'),X1134))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135))),s('type.num.num',X1136))),s(X1131,X1143)))) | p(s(bool,happ(s(fun(X1131,bool),X1144),s(X1131,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1132),s('type.list.list'('type.closSem.v'),X1133),s('type.list.list'('type.closSem.v'),X1134),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135),s('type.num.num',X1136))),s(fun('type.integer.int',fun(X1131,bool)),X1137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,bool)),X1138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,bool))),X1139),s(fun('type.num.num',fun(X1131,bool)),X1140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,bool)))))),X1141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142)),X1144,X1131)))))) )),
  inference(forward_demodulation,[],[f31961,f326])).
fof(f31961,plain,(
  ( ! [X1139,X1137,X1143,X1141,X1134,X1132,X1144,X1138,X1136,X1142,X1131,X1140,X1135,X1133] : (~p(s(bool,happ(s(fun(X1131,bool),happ(s(fun('type.num.num',fun(X1131,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142),s('type.option.option'('type.num.num'),X1132))),s('type.list.list'('type.closSem.v'),X1133))),s('type.list.list'('type.closSem.v'),X1134))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135))),s('type.num.num',X1136))),s(X1131,X1143)))) | p(s(bool,happ(s(fun(X1131,bool),X1144),s(X1131,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1132),s('type.list.list'('type.closSem.v'),X1133),s('type.list.list'('type.closSem.v'),X1134),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135),s('type.num.num',X1136))),s(fun('type.integer.int',fun(X1131,bool)),X1137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,bool)),X1138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,bool))),X1139),s(fun('type.num.num',fun(X1131,bool)),X1140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,bool)))))),X1141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142)),X1144,X1131))))) | p(s(bool,happ(s(fun(X1131,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1132),s('type.list.list'('type.closSem.v'),X1133),s('type.list.list'('type.closSem.v'),X1134),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135),s('type.num.num',X1136))),s(fun('type.integer.int',fun(X1131,bool)),X1137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,bool)),X1138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,bool))),X1139),s(fun('type.num.num',fun(X1131,bool)),X1140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,bool)))))),X1141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142))),s(X1131,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1132),s('type.list.list'('type.closSem.v'),X1133),s('type.list.list'('type.closSem.v'),X1134),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1135),s('type.num.num',X1136))),s(fun('type.integer.int',fun(X1131,bool)),X1137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,bool)),X1138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,bool))),X1139),s(fun('type.num.num',fun(X1131,bool)),X1140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,bool)))))),X1141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,bool)))))),X1142)),X1144,X1131)))))) )),
  inference(superposition,[],[f314,f326])).
fof(f31960,plain,(
  ( ! [X1118,X1130,X1128,X1122,X1120,X1126,X1124,X1119,X1129,X1123,X1121,X1127,X1125] : (p(s(bool,'|dollar|exists_1'(s(fun(X1118,bool),happ(s(fun('type.num.num',fun(X1118,bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1118,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1118,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1118,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1118,bool)))))),X1129),s('type.option.option'('type.num.num'),X1119))),s('type.list.list'('type.closSem.v'),X1120))),s('type.list.list'('type.closSem.v'),X1121))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1122))),s('type.num.num',X1123)))))) | s(X1118,X1130) = s(X1118,sK4(X1130,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1119),s('type.list.list'('type.closSem.v'),X1120),s('type.list.list'('type.closSem.v'),X1121),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1122),s('type.num.num',X1123))),s(fun('type.integer.int',fun(X1118,bool)),X1124),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1118,bool)),X1125),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1118,bool))),X1126),s(fun('type.num.num',fun(X1118,bool)),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1118,bool)))))),X1128),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1118,bool)))))),X1129)),X1118))) )),
  inference(superposition,[],[f312,f326])).
fof(f31938,plain,(
  ( ! [X872,X866,X864,X870,X868,X863,X873,X867,X865,X871,X869,X862] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X873),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X872),s('type.option.option'('type.num.num'),X862))),s('type.list.list'('type.closSem.v'),X863))),s('type.list.list'('type.closSem.v'),X864))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X865))),s('type.num.num',X866))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X862),s('type.list.list'('type.closSem.v'),X863),s('type.list.list'('type.closSem.v'),X864),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X865),s('type.num.num',X866))),s(fun('type.integer.int',bool),X867),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X868),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X869),s(fun('type.num.num',bool),X870),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X871),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X872)))) )),
  inference(superposition,[],[f5684,f326])).
fof(f31937,plain,(
  ( ! [X860,X850,X854,X852,X859,X857,X861,X851,X855,X853,X858,X856] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X861,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X860),s('type.option.option'('type.num.num'),X850))),s('type.list.list'('type.closSem.v'),X851))),s('type.list.list'('type.closSem.v'),X852))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X853))),s('type.num.num',X854))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X850),s('type.list.list'('type.closSem.v'),X851),s('type.list.list'('type.closSem.v'),X852),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X853),s('type.num.num',X854))),s(fun('type.integer.int',bool),X855),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X856),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X857),s(fun('type.num.num',bool),X858),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X859),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X860)))) )),
  inference(superposition,[],[f5495,f326])).
fof(f31932,plain,(
  ( ! [X798,X796,X790,X788,X795,X793,X799,X797,X787,X791,X789,X794,X792] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X797),s('type.option.option'('type.num.num'),X787))),s('type.list.list'('type.closSem.v'),X788))),s('type.list.list'('type.closSem.v'),X789))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X790))),s('type.num.num',X791)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X798),bool),sK16(X799,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X787),s('type.list.list'('type.closSem.v'),X788),s('type.list.list'('type.closSem.v'),X789),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X790),s('type.num.num',X791))),s(fun('type.integer.int',bool),X792),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X793),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X794),s(fun('type.num.num',bool),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X796),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X797)),X798,bool))))) )),
  inference(superposition,[],[f3944,f326])).
fof(f31920,plain,(
  ( ! [X656,X658,X652,X654,X648,X650,X657,X653,X655,X649,X651,X647] : (s(bool,X658) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X657),s('type.option.option'('type.num.num'),X647))),s('type.list.list'('type.closSem.v'),X648))),s('type.list.list'('type.closSem.v'),X649))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X650))),s('type.num.num',X651))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X647),s('type.list.list'('type.closSem.v'),X648),s('type.list.list'('type.closSem.v'),X649),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X650),s('type.num.num',X651))),s(fun('type.integer.int',bool),X652),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X653),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X654),s(fun('type.num.num',bool),X655),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X656),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X657))) | s(bool,'T_0') = s(bool,X658)) )),
  inference(superposition,[],[f1683,f326])).
fof(f31919,plain,(
  ( ! [X639,X635,X644,X646,X640,X642,X636,X638,X645,X641,X643,X637] : (s(bool,X646) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X645),s('type.option.option'('type.num.num'),X635))),s('type.list.list'('type.closSem.v'),X636))),s('type.list.list'('type.closSem.v'),X637))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X638))),s('type.num.num',X639))) | s(bool,'F_0') = s(bool,X646) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X635),s('type.list.list'('type.closSem.v'),X636),s('type.list.list'('type.closSem.v'),X637),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X638),s('type.num.num',X639))),s(fun('type.integer.int',bool),X640),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X641),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X642),s(fun('type.num.num',bool),X643),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X644),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X645)))) )),
  inference(superposition,[],[f1683,f326])).
fof(f31913,plain,(
  ( ! [X573,X575,X569,X571,X565,X567,X576,X572,X574,X568,X570,X566] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X576),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X575),s('type.option.option'('type.num.num'),X565))),s('type.list.list'('type.closSem.v'),X566))),s('type.list.list'('type.closSem.v'),X567))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X568))),s('type.num.num',X569))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X565),s('type.list.list'('type.closSem.v'),X566),s('type.list.list'('type.closSem.v'),X567),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X568),s('type.num.num',X569))),s(fun('type.integer.int',bool),X570),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X571),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X572),s(fun('type.num.num',bool),X573),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X574),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X575)))) )),
  inference(superposition,[],[f1396,f326])).
fof(f31912,plain,(
  ( ! [X561,X563,X557,X559,X553,X555,X564,X560,X562,X556,X558,X554] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X564,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X563),s('type.option.option'('type.num.num'),X553))),s('type.list.list'('type.closSem.v'),X554))),s('type.list.list'('type.closSem.v'),X555))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X556))),s('type.num.num',X557))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X553),s('type.list.list'('type.closSem.v'),X554),s('type.list.list'('type.closSem.v'),X555),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X556),s('type.num.num',X557))),s(fun('type.integer.int',bool),X558),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X559),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X560),s(fun('type.num.num',bool),X561),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X562),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X563)))) )),
  inference(superposition,[],[f1395,f326])).
fof(f32099,plain,(
  ( ! [X536,X538,X532,X534,X528,X530,X537,X533,X535,X529,X531] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X538),s('type.option.option'('type.num.num'),X528))),s('type.list.list'('type.closSem.v'),X529))),s('type.list.list'('type.closSem.v'),X530))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X531))),s('type.num.num',X532))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X528),s('type.list.list'('type.closSem.v'),X529),s('type.list.list'('type.closSem.v'),X530),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X531),s('type.num.num',X532))),s(fun('type.integer.int',bool),X533),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X534),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X535),s(fun('type.num.num',bool),X536),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X537),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X538)))) )),
  inference(forward_demodulation,[],[f31910,f427])).
fof(f31910,plain,(
  ( ! [X536,X538,X532,X534,X528,X530,X537,X539,X533,X535,X529,X531] : (s(bool,'const.ind_type.ISO_2'(s(fun(X539,X539),'_i_0_0'),s(fun(X539,X539),'_i_0_0'))) != s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X538),s('type.option.option'('type.num.num'),X528))),s('type.list.list'('type.closSem.v'),X529))),s('type.list.list'('type.closSem.v'),X530))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X531))),s('type.num.num',X532))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X528),s('type.list.list'('type.closSem.v'),X529),s('type.list.list'('type.closSem.v'),X530),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X531),s('type.num.num',X532))),s(fun('type.integer.int',bool),X533),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X534),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X535),s(fun('type.num.num',bool),X536),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X537),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X538)))) )),
  inference(superposition,[],[f790,f326])).
fof(f31909,plain,(
  ( ! [X524,X526,X520,X522,X516,X518,X525,X527,X521,X523,X517,X519,X515] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X526),'const.pair.,_2'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X525),s('type.option.option'('type.num.num'),X515))),s('type.list.list'('type.closSem.v'),X516))),s('type.list.list'('type.closSem.v'),X517))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X518))),s('type.num.num',X519))),s(X526,X527))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X515),s('type.list.list'('type.closSem.v'),X516),s('type.list.list'('type.closSem.v'),X517),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X518),s('type.num.num',X519))),s(fun('type.integer.int',bool),X520),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X521),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X522),s(fun('type.num.num',bool),X523),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X524),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X525)))) )),
  inference(superposition,[],[f730,f326])).
fof(f31908,plain,(
  ( ! [X509,X511,X505,X507,X502,X512,X514,X508,X510,X504,X506,X513,X503] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X513,bool),'const.pair.,_2'(s(X513,X514),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X512),s('type.option.option'('type.num.num'),X502))),s('type.list.list'('type.closSem.v'),X503))),s('type.list.list'('type.closSem.v'),X504))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X505))),s('type.num.num',X506))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X502),s('type.list.list'('type.closSem.v'),X503),s('type.list.list'('type.closSem.v'),X504),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X505),s('type.num.num',X506))),s(fun('type.integer.int',bool),X507),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X508),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X509),s(fun('type.num.num',bool),X510),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X512)))) )),
  inference(superposition,[],[f673,f326])).
fof(f31907,plain,(
  ( ! [X499,X492,X494,X490,X500,X496,X498,X493,X495,X491,X501,X497] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X500),s('type.option.option'('type.num.num'),X490))),s('type.list.list'('type.closSem.v'),X491))),s('type.list.list'('type.closSem.v'),X492))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X493))),s('type.num.num',X494))),s(fun('type.num.num',bool),X501),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X490),s('type.list.list'('type.closSem.v'),X491),s('type.list.list'('type.closSem.v'),X492),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X493),s('type.num.num',X494))),s(fun('type.integer.int',bool),X495),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X496),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X497),s(fun('type.num.num',bool),X498),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X499),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X500)))) )),
  inference(superposition,[],[f620,f326])).
fof(f31906,plain,(
  ( ! [X478,X484,X486,X480,X482,X488,X479,X485,X487,X481,X483,X489] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X489,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X488),s('type.option.option'('type.num.num'),X478))),s('type.list.list'('type.closSem.v'),X479))),s('type.list.list'('type.closSem.v'),X480))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X481))),s('type.num.num',X482))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X478),s('type.list.list'('type.closSem.v'),X479),s('type.list.list'('type.closSem.v'),X480),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X481),s('type.num.num',X482))),s(fun('type.integer.int',bool),X483),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X484),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X485),s(fun('type.num.num',bool),X486),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X487),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X488)))) )),
  inference(superposition,[],[f527,f326])).
fof(f31905,plain,(
  ( ! [X466,X476,X472,X474,X469,X471,X467,X477,X475,X473,X468,X470] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X477),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X476),s('type.option.option'('type.num.num'),X466))),s('type.list.list'('type.closSem.v'),X467))),s('type.list.list'('type.closSem.v'),X468))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X469))),s('type.num.num',X470))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X466),s('type.list.list'('type.closSem.v'),X467),s('type.list.list'('type.closSem.v'),X468),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X469),s('type.num.num',X470))),s(fun('type.integer.int',bool),X471),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X472),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X473),s(fun('type.num.num',bool),X474),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X475),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X476)))) )),
  inference(superposition,[],[f500,f326])).
fof(f31903,plain,(
  ( ! [X445,X447,X443,X453,X449,X451,X444,X446,X452,X448,X450] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X453),s('type.option.option'('type.num.num'),X443))),s('type.list.list'('type.closSem.v'),X444))),s('type.list.list'('type.closSem.v'),X445))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X446))),s('type.num.num',X447))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X443),s('type.list.list'('type.closSem.v'),X444),s('type.list.list'('type.closSem.v'),X445),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X446),s('type.num.num',X447))),s(fun('type.integer.int',bool),X448),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X449),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X450),s(fun('type.num.num',bool),X451),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X452),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X453)))) )),
  inference(superposition,[],[f459,f326])).
fof(f31848,plain,(
  ( ! [X39,X37,X35,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(bool,X46) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X45),s('type.option.option'('type.num.num'),X35))),s('type.list.list'('type.closSem.v'),X36))),s('type.list.list'('type.closSem.v'),X37))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X38))),s('type.num.num',X39))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X35),s('type.list.list'('type.closSem.v'),X36),s('type.list.list'('type.closSem.v'),X37),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X38),s('type.num.num',X39))),s(fun('type.integer.int',bool),X40),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X41),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X42),s(fun('type.num.num',bool),X43),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X44),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X45)))) )),
  inference(superposition,[],[f326,f432])).
fof(f31847,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X33),s('type.option.option'('type.num.num'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.list.list'('type.closSem.v'),X25))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X26))),s('type.num.num',X27))) | s(bool,X34) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X26),s('type.num.num',X27))),s(fun('type.integer.int',bool),X28),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X29),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X30),s(fun('type.num.num',bool),X31),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X32),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X33))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f326,f432])).
fof(f31846,plain,(
  ( ! [X14,X12,X21,X19,X17,X15,X13,X22,X20,X18,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X22),s('type.option.option'('type.num.num'),X12))),s('type.list.list'('type.closSem.v'),X13))),s('type.list.list'('type.closSem.v'),X14))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15))),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X12),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15),s('type.num.num',X16))),s(fun('type.integer.int',bool),X17),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X18),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X19),s(fun('type.num.num',bool),X20),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X21),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X22)))) )),
  inference(superposition,[],[f326,f264])).
fof(f31263,plain,(
  ( ! [X30,X31,X32] : (s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X30) = s(bool,X32)) ) | $spl28),
  inference(subsumption_resolution,[],[f29938,f256])).
fof(f29938,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X30) = s(bool,X32)) ) | $spl28),
  inference(superposition,[],[f434,f24881])).
fof(f30838,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(subsumption_resolution,[],[f30837,f256])).
fof(f30837,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(forward_demodulation,[],[f29389,f24553])).
fof(f29389,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,X14) | ~p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(superposition,[],[f269,f24881])).
fof(f29133,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(superposition,[],[f24881,f432])).
fof(f29132,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X0) = s(bool,X3)) ) | $spl28),
  inference(superposition,[],[f24881,f24881])).
fof(f28764,plain,(
  ( ! [X2462,X2456,X2458,X2454,X2464,X2461,X2463,X2457,X2459,X2453,X2455,X2460] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X2464))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.closLang.exp','type.integer.int'),happ(s(fun('type.num.num',fun('type.closLang.exp','type.integer.int')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X2462),s('type.option.option'('type.num.num'),X2453))),s('type.list.list'('type.closSem.v'),X2454))),s('type.list.list'('type.closSem.v'),X2455))),s('type.num.num',X2456))),s('type.closLang.exp',X2457))))) | s('type.integer.int',X2464) = s('type.integer.int','const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X2453),s('type.list.list'('type.closSem.v'),X2454),s('type.list.list'('type.closSem.v'),X2455),s('type.num.num',X2456),s('type.closLang.exp',X2457))),s(fun('type.integer.int','type.integer.int'),X2458),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X2459),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X2460),s(fun('type.num.num','type.integer.int'),X2461),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X2462),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X2463)))) )),
  inference(superposition,[],[f332,f325])).
fof(f28747,plain,(
  ( ! [X2225,X2223,X2221,X2219,X2217,X2215,X2226,X2224,X2222,X2220,X2218,X2216] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2226))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),happ(s(fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X2224),s('type.option.option'('type.num.num'),X2215))),s('type.list.list'('type.closSem.v'),X2216))),s('type.list.list'('type.closSem.v'),X2217))),s('type.num.num',X2218))),s('type.closLang.exp',X2219))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2226) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X2215),s('type.list.list'('type.closSem.v'),X2216),s('type.list.list'('type.closSem.v'),X2217),s('type.num.num',X2218),s('type.closLang.exp',X2219))),s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2220),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2221),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X2222),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2223),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X2224),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X2225)))) )),
  inference(superposition,[],[f334,f325])).
fof(f28742,plain,(
  ( ! [X2142,X2144,X2157,X2155,X2153,X2151,X2149,X2147,X2143,X2145,X2156,X2154,X2152,X2150,X2148,X2146] : (s(X2143,happ(s(fun('type.ind_type.recspace'(X2142),X2143),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X2144),s('type.list.list'('type.closSem.v'),X2145),s('type.list.list'('type.closSem.v'),X2146),s('type.num.num',X2147),s('type.closLang.exp',X2148))),s(fun('type.integer.int',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),X2149),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),X2150),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143)))))),X2151),s(fun('type.num.num',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),X2152),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))))))),X2153),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))))))),X2154)),X2142,X2143)),s('type.ind_type.recspace'(X2142),'const.ind_type.CONSTR_3'(s('type.num.num',X2155),s(X2142,X2156),s(fun('type.num.num','type.ind_type.recspace'(X2142)),X2157))))) = s(X2143,happ(s(fun(fun('type.num.num',X2143),X2143),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143)),happ(s(fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))),happ(s(fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143)))),happ(s(fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143)))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143)))))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))))))),X2153),s('type.option.option'('type.num.num'),X2144))),s('type.list.list'('type.closSem.v'),X2145))),s('type.list.list'('type.closSem.v'),X2146))),s('type.num.num',X2147))),s('type.closLang.exp',X2148))),s('type.num.num',X2155))),s(X2142,X2156))),s(fun('type.num.num','type.ind_type.recspace'(X2142)),X2157))),s(fun('type.num.num',X2143),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X2142),X2143),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X2144),s('type.list.list'('type.closSem.v'),X2145),s('type.list.list'('type.closSem.v'),X2146),s('type.num.num',X2147),s('type.closLang.exp',X2148))),s(fun('type.integer.int',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),X2149),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),X2150),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143)))))),X2151),s(fun('type.num.num',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))),X2152),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))))))),X2153),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X2142,fun(fun('type.num.num','type.ind_type.recspace'(X2142)),fun(fun('type.num.num',X2143),X2143))))))))),X2154)),X2142,X2143)),s(fun('type.num.num','type.ind_type.recspace'(X2142)),X2157)))))) )),
  inference(superposition,[],[f339,f325])).
fof(f28741,plain,(
  ( ! [X2140,X2138,X2136,X2134,X2132,X2130,X2128,X2126,X2141,X2139,X2137,X2135,X2133,X2131,X2129,X2127] : (s(X2127,happ(s(fun('type.list.list'(X2126),X2127),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X2128),s('type.list.list'('type.closSem.v'),X2129),s('type.list.list'('type.closSem.v'),X2130),s('type.num.num',X2131),s('type.closLang.exp',X2132))),s(fun('type.integer.int',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),X2133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),X2134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127))))),X2135),s(fun('type.num.num',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),X2136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))))))),X2137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))))))),X2138)),X2139,X2126,X2127)),s('type.list.list'(X2126),'const.list.CONS_2'(s(X2126,X2140),s('type.list.list'(X2126),X2141))))) = s(X2127,happ(s(fun(X2127,X2127),happ(s(fun('type.list.list'(X2126),fun(X2127,X2127)),happ(s(fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127))),happ(s(fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127))))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))))))),X2137),s('type.option.option'('type.num.num'),X2128))),s('type.list.list'('type.closSem.v'),X2129))),s('type.list.list'('type.closSem.v'),X2130))),s('type.num.num',X2131))),s('type.closLang.exp',X2132))),s(X2126,X2140))),s('type.list.list'(X2126),X2141))),s(X2127,happ(s(fun('type.list.list'(X2126),X2127),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X2128),s('type.list.list'('type.closSem.v'),X2129),s('type.list.list'('type.closSem.v'),X2130),s('type.num.num',X2131),s('type.closLang.exp',X2132))),s(fun('type.integer.int',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),X2133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),X2134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127))))),X2135),s(fun('type.num.num',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))),X2136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))))))),X2137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X2126,fun('type.list.list'(X2126),fun(X2127,X2127)))))))),X2138)),X2139,X2126,X2127)),s('type.list.list'(X2126),X2141)))))) )),
  inference(superposition,[],[f357,f325])).
fof(f28857,plain,(
  ( ! [X2008,X2006,X2004,X2002,X2000,X1998,X2010,X2009,X2007,X2005,X2003,X2001,X1999,X1997] : (s(X1997,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)) != s(X1997,happ(s(fun(X1998,X1997),X2010),s(X1998,happ(s(fun(X1997,X1998),happ(s(fun('type.closLang.exp',fun(X1997,X1998)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s('type.option.option'('type.num.num'),X1999))),s('type.list.list'('type.closSem.v'),X2000))),s('type.list.list'('type.closSem.v'),X2001))),s('type.num.num',X2002))),s('type.closLang.exp',X2003))),s(X1997,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)))))) | s(X1998,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)) != s(X1998,happ(s(fun(X1997,X1998),happ(s(fun('type.closLang.exp',fun(X1997,X1998)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s('type.option.option'('type.num.num'),X1999))),s('type.list.list'('type.closSem.v'),X2000))),s('type.list.list'('type.closSem.v'),X2001))),s('type.num.num',X2002))),s('type.closLang.exp',X2003))),s(X1997,happ(s(fun(X1998,X1997),X2010),s(X1998,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1998,X1997),X2010),s(fun(X1997,X1998),happ(s(fun('type.closLang.exp',fun(X1997,X1998)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s('type.option.option'('type.num.num'),X1999))),s('type.list.list'('type.closSem.v'),X2000))),s('type.list.list'('type.closSem.v'),X2001))),s('type.num.num',X2002))),s('type.closLang.exp',X2003))))))) )),
  inference(forward_demodulation,[],[f28856,f325])).
fof(f28856,plain,(
  ( ! [X2008,X2006,X2004,X2002,X2000,X1998,X2010,X2009,X2007,X2005,X2003,X2001,X1999,X1997] : (s(X1998,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)) != s(X1998,happ(s(fun(X1997,X1998),happ(s(fun('type.closLang.exp',fun(X1997,X1998)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s('type.option.option'('type.num.num'),X1999))),s('type.list.list'('type.closSem.v'),X2000))),s('type.list.list'('type.closSem.v'),X2001))),s('type.num.num',X2002))),s('type.closLang.exp',X2003))),s(X1997,happ(s(fun(X1998,X1997),X2010),s(X1998,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1998,X1997),X2010),s(fun(X1997,X1998),happ(s(fun('type.closLang.exp',fun(X1997,X1998)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s('type.option.option'('type.num.num'),X1999))),s('type.list.list'('type.closSem.v'),X2000))),s('type.list.list'('type.closSem.v'),X2001))),s('type.num.num',X2002))),s('type.closLang.exp',X2003)))))) | s(X1997,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)) != s(X1997,happ(s(fun(X1998,X1997),X2010),s(X1998,happ(s(fun(X1997,X1998),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009))),s(X1997,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997))))))) )),
  inference(forward_demodulation,[],[f28733,f325])).
fof(f28733,plain,(
  ( ! [X2008,X2006,X2004,X2010,X2000,X1998,X2002,X2009,X2007,X2005,X2003,X2001,X1999,X1997] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1998,X1997),X2010),s(fun(X1997,X1998),happ(s(fun('type.closLang.exp',fun(X1997,X1998)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s('type.option.option'('type.num.num'),X1999))),s('type.list.list'('type.closSem.v'),X2000))),s('type.list.list'('type.closSem.v'),X2001))),s('type.num.num',X2002))),s('type.closLang.exp',X2003)))))) | s(X1998,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)) != s(X1998,happ(s(fun(X1997,X1998),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009))),s(X1997,happ(s(fun(X1998,X1997),X2010),s(X1998,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)))))) | s(X1997,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997)) != s(X1997,happ(s(fun(X1998,X1997),X2010),s(X1998,happ(s(fun(X1997,X1998),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009))),s(X1997,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1999),s('type.list.list'('type.closSem.v'),X2000),s('type.list.list'('type.closSem.v'),X2001),s('type.num.num',X2002),s('type.closLang.exp',X2003))),s(fun('type.integer.int',fun(X1997,X1998)),X2004),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1997,X1998)),X2005),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1997,X1998))),X2006),s(fun('type.num.num',fun(X1997,X1998)),X2007),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1997,X1998)))))),X2008),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1997,X1998)))))),X2009)),X2010,X1998,X1997))))))) )),
  inference(superposition,[],[f355,f325])).
fof(f28855,plain,(
  ( ! [X1996,X1994,X1992,X1990,X1988,X1986,X1984,X1995,X1993,X1991,X1989,X1987,X1985,X1983] : (s(X1984,sK14(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)) != s(X1984,happ(s(fun(X1983,X1984),happ(s(fun('type.closLang.exp',fun(X1983,X1984)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s('type.option.option'('type.num.num'),X1985))),s('type.list.list'('type.closSem.v'),X1986))),s('type.list.list'('type.closSem.v'),X1987))),s('type.num.num',X1988))),s('type.closLang.exp',X1989))),s(X1983,happ(s(fun(X1984,X1983),X1996),s(X1984,sK14(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)))))) | s(X1983,sK15(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)) != s(X1983,happ(s(fun(X1984,X1983),X1996),s(X1984,happ(s(fun(X1983,X1984),happ(s(fun('type.closLang.exp',fun(X1983,X1984)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s('type.option.option'('type.num.num'),X1985))),s('type.list.list'('type.closSem.v'),X1986))),s('type.list.list'('type.closSem.v'),X1987))),s('type.num.num',X1988))),s('type.closLang.exp',X1989))),s(X1983,sK15(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1983,X1984),happ(s(fun('type.closLang.exp',fun(X1983,X1984)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s('type.option.option'('type.num.num'),X1985))),s('type.list.list'('type.closSem.v'),X1986))),s('type.list.list'('type.closSem.v'),X1987))),s('type.num.num',X1988))),s('type.closLang.exp',X1989))),s(fun(X1984,X1983),X1996))))) )),
  inference(forward_demodulation,[],[f28854,f325])).
fof(f28854,plain,(
  ( ! [X1996,X1994,X1992,X1990,X1988,X1986,X1984,X1995,X1993,X1991,X1989,X1987,X1985,X1983] : (s(X1983,sK15(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)) != s(X1983,happ(s(fun(X1984,X1983),X1996),s(X1984,happ(s(fun(X1983,X1984),happ(s(fun('type.closLang.exp',fun(X1983,X1984)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s('type.option.option'('type.num.num'),X1985))),s('type.list.list'('type.closSem.v'),X1986))),s('type.list.list'('type.closSem.v'),X1987))),s('type.num.num',X1988))),s('type.closLang.exp',X1989))),s(X1983,sK15(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1983,X1984),happ(s(fun('type.closLang.exp',fun(X1983,X1984)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s('type.option.option'('type.num.num'),X1985))),s('type.list.list'('type.closSem.v'),X1986))),s('type.list.list'('type.closSem.v'),X1987))),s('type.num.num',X1988))),s('type.closLang.exp',X1989))),s(fun(X1984,X1983),X1996)))) | s(X1984,sK14(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)) != s(X1984,happ(s(fun(X1983,X1984),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995))),s(X1983,happ(s(fun(X1984,X1983),X1996),s(X1984,sK14(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984))))))) )),
  inference(forward_demodulation,[],[f28732,f325])).
fof(f28732,plain,(
  ( ! [X1996,X1994,X1992,X1990,X1988,X1986,X1984,X1995,X1993,X1991,X1989,X1987,X1985,X1983] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1983,X1984),happ(s(fun('type.closLang.exp',fun(X1983,X1984)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s('type.option.option'('type.num.num'),X1985))),s('type.list.list'('type.closSem.v'),X1986))),s('type.list.list'('type.closSem.v'),X1987))),s('type.num.num',X1988))),s('type.closLang.exp',X1989))),s(fun(X1984,X1983),X1996)))) | s(X1983,sK15(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)) != s(X1983,happ(s(fun(X1984,X1983),X1996),s(X1984,happ(s(fun(X1983,X1984),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995))),s(X1983,sK15(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)))))) | s(X1984,sK14(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984)) != s(X1984,happ(s(fun(X1983,X1984),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995))),s(X1983,happ(s(fun(X1984,X1983),X1996),s(X1984,sK14(X1996,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1985),s('type.list.list'('type.closSem.v'),X1986),s('type.list.list'('type.closSem.v'),X1987),s('type.num.num',X1988),s('type.closLang.exp',X1989))),s(fun('type.integer.int',fun(X1983,X1984)),X1990),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1983,X1984)),X1991),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1983,X1984))),X1992),s(fun('type.num.num',fun(X1983,X1984)),X1993),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1983,X1984)))))),X1994),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1983,X1984)))))),X1995)),X1983,X1984))))))) )),
  inference(superposition,[],[f355,f325])).
fof(f28849,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1911,X1909,X1922,X1920,X1918,X1916,X1914,X1912,X1910,X1921] : (s(fun(X1909,X1910),X1922) = s(fun(X1909,X1910),happ(s(fun('type.closLang.exp',fun(X1909,X1910)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s('type.option.option'('type.num.num'),X1911))),s('type.list.list'('type.closSem.v'),X1912))),s('type.list.list'('type.closSem.v'),X1913))),s('type.num.num',X1914))),s('type.closLang.exp',X1915))) | s(X1910,happ(s(fun(X1909,X1910),X1922),s(X1909,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1911),s('type.list.list'('type.closSem.v'),X1912),s('type.list.list'('type.closSem.v'),X1913),s('type.num.num',X1914),s('type.closLang.exp',X1915))),s(fun('type.integer.int',fun(X1909,X1910)),X1916),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1909,X1910)),X1917),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1909,X1910))),X1918),s(fun('type.num.num',fun(X1909,X1910)),X1919),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1909,X1910)))))),X1921)),X1922,X1909,X1910)))) != s(X1910,happ(s(fun(X1909,X1910),happ(s(fun('type.closLang.exp',fun(X1909,X1910)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s('type.option.option'('type.num.num'),X1911))),s('type.list.list'('type.closSem.v'),X1912))),s('type.list.list'('type.closSem.v'),X1913))),s('type.num.num',X1914))),s('type.closLang.exp',X1915))),s(X1909,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1911),s('type.list.list'('type.closSem.v'),X1912),s('type.list.list'('type.closSem.v'),X1913),s('type.num.num',X1914),s('type.closLang.exp',X1915))),s(fun('type.integer.int',fun(X1909,X1910)),X1916),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1909,X1910)),X1917),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1909,X1910))),X1918),s(fun('type.num.num',fun(X1909,X1910)),X1919),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1909,X1910)))))),X1921)),X1922,X1909,X1910))))) )),
  inference(forward_demodulation,[],[f28727,f325])).
fof(f28727,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1911,X1909,X1922,X1920,X1918,X1916,X1914,X1912,X1910,X1921] : (s(X1910,happ(s(fun(X1909,X1910),X1922),s(X1909,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1911),s('type.list.list'('type.closSem.v'),X1912),s('type.list.list'('type.closSem.v'),X1913),s('type.num.num',X1914),s('type.closLang.exp',X1915))),s(fun('type.integer.int',fun(X1909,X1910)),X1916),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1909,X1910)),X1917),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1909,X1910))),X1918),s(fun('type.num.num',fun(X1909,X1910)),X1919),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1909,X1910)))))),X1921)),X1922,X1909,X1910)))) != s(X1910,happ(s(fun(X1909,X1910),happ(s(fun('type.closLang.exp',fun(X1909,X1910)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s('type.option.option'('type.num.num'),X1911))),s('type.list.list'('type.closSem.v'),X1912))),s('type.list.list'('type.closSem.v'),X1913))),s('type.num.num',X1914))),s('type.closLang.exp',X1915))),s(X1909,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1911),s('type.list.list'('type.closSem.v'),X1912),s('type.list.list'('type.closSem.v'),X1913),s('type.num.num',X1914),s('type.closLang.exp',X1915))),s(fun('type.integer.int',fun(X1909,X1910)),X1916),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1909,X1910)),X1917),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1909,X1910))),X1918),s(fun('type.num.num',fun(X1909,X1910)),X1919),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1909,X1910)))))),X1921)),X1922,X1909,X1910)))) | s(fun(X1909,X1910),X1922) = s(fun(X1909,X1910),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1911),s('type.list.list'('type.closSem.v'),X1912),s('type.list.list'('type.closSem.v'),X1913),s('type.num.num',X1914),s('type.closLang.exp',X1915))),s(fun('type.integer.int',fun(X1909,X1910)),X1916),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1909,X1910)),X1917),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1909,X1910))),X1918),s(fun('type.num.num',fun(X1909,X1910)),X1919),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1909,X1910)))))),X1920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1909,X1910)))))),X1921)))) )),
  inference(superposition,[],[f352,f325])).
fof(f28848,plain,(
  ( ! [X1907,X1905,X1903,X1901,X1899,X1897,X1895,X1908,X1906,X1904,X1902,X1900,X1898,X1896] : (s(fun(X1895,X1896),X1908) = s(fun(X1895,X1896),happ(s(fun('type.closLang.exp',fun(X1895,X1896)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s('type.option.option'('type.num.num'),X1897))),s('type.list.list'('type.closSem.v'),X1898))),s('type.list.list'('type.closSem.v'),X1899))),s('type.num.num',X1900))),s('type.closLang.exp',X1901))) | s(X1896,happ(s(fun(X1895,X1896),X1908),s(X1895,sK13(X1908,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1897),s('type.list.list'('type.closSem.v'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.num.num',X1900),s('type.closLang.exp',X1901))),s(fun('type.integer.int',fun(X1895,X1896)),X1902),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1895,X1896)),X1903),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1895,X1896))),X1904),s(fun('type.num.num',fun(X1895,X1896)),X1905),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1895,X1896)))))),X1907)),X1895,X1896)))) != s(X1896,happ(s(fun(X1895,X1896),happ(s(fun('type.closLang.exp',fun(X1895,X1896)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s('type.option.option'('type.num.num'),X1897))),s('type.list.list'('type.closSem.v'),X1898))),s('type.list.list'('type.closSem.v'),X1899))),s('type.num.num',X1900))),s('type.closLang.exp',X1901))),s(X1895,sK13(X1908,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1897),s('type.list.list'('type.closSem.v'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.num.num',X1900),s('type.closLang.exp',X1901))),s(fun('type.integer.int',fun(X1895,X1896)),X1902),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1895,X1896)),X1903),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1895,X1896))),X1904),s(fun('type.num.num',fun(X1895,X1896)),X1905),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1895,X1896)))))),X1907)),X1895,X1896))))) )),
  inference(forward_demodulation,[],[f28726,f325])).
fof(f28726,plain,(
  ( ! [X1907,X1905,X1903,X1901,X1899,X1897,X1895,X1908,X1906,X1904,X1902,X1900,X1898,X1896] : (s(X1896,happ(s(fun(X1895,X1896),X1908),s(X1895,sK13(X1908,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1897),s('type.list.list'('type.closSem.v'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.num.num',X1900),s('type.closLang.exp',X1901))),s(fun('type.integer.int',fun(X1895,X1896)),X1902),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1895,X1896)),X1903),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1895,X1896))),X1904),s(fun('type.num.num',fun(X1895,X1896)),X1905),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1895,X1896)))))),X1907)),X1895,X1896)))) != s(X1896,happ(s(fun(X1895,X1896),happ(s(fun('type.closLang.exp',fun(X1895,X1896)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s('type.option.option'('type.num.num'),X1897))),s('type.list.list'('type.closSem.v'),X1898))),s('type.list.list'('type.closSem.v'),X1899))),s('type.num.num',X1900))),s('type.closLang.exp',X1901))),s(X1895,sK13(X1908,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1897),s('type.list.list'('type.closSem.v'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.num.num',X1900),s('type.closLang.exp',X1901))),s(fun('type.integer.int',fun(X1895,X1896)),X1902),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1895,X1896)),X1903),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1895,X1896))),X1904),s(fun('type.num.num',fun(X1895,X1896)),X1905),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1895,X1896)))))),X1907)),X1895,X1896)))) | s(fun(X1895,X1896),X1908) = s(fun(X1895,X1896),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1897),s('type.list.list'('type.closSem.v'),X1898),s('type.list.list'('type.closSem.v'),X1899),s('type.num.num',X1900),s('type.closLang.exp',X1901))),s(fun('type.integer.int',fun(X1895,X1896)),X1902),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1895,X1896)),X1903),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1895,X1896))),X1904),s(fun('type.num.num',fun(X1895,X1896)),X1905),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1895,X1896)))))),X1906),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1895,X1896)))))),X1907)))) )),
  inference(superposition,[],[f352,f325])).
fof(f28719,plain,(
  ( ! [X1787,X1789,X1791,X1793,X1795,X1797,X1800,X1798,X1796,X1794,X1786,X1788,X1790,X1792,X1799,X1785] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1785,X1786),happ(s(fun('type.closLang.exp',fun(X1785,X1786)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1785,X1786))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1785,X1786)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1785,X1786))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1785,X1786)))))),X1796),s('type.option.option'('type.num.num'),X1787))),s('type.list.list'('type.closSem.v'),X1788))),s('type.list.list'('type.closSem.v'),X1789))),s('type.num.num',X1790))),s('type.closLang.exp',X1791))),s(fun(X1786,X1785),X1798)))) | ~p(s(bool,happ(s(fun(X1785,bool),X1799),s(X1785,happ(s(fun(X1786,X1785),X1798),s(X1786,X1800)))))) | p(s(bool,happ(s(fun(X1785,bool),X1799),s(X1785,sK11(X1799,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1787),s('type.list.list'('type.closSem.v'),X1788),s('type.list.list'('type.closSem.v'),X1789),s('type.num.num',X1790),s('type.closLang.exp',X1791))),s(fun('type.integer.int',fun(X1785,X1786)),X1792),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1785,X1786)),X1793),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1785,X1786))),X1794),s(fun('type.num.num',fun(X1785,X1786)),X1795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1785,X1786)))))),X1796),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1785,X1786)))))),X1797)),X1798,X1786,X1785)))))) )),
  inference(superposition,[],[f347,f325])).
fof(f28841,plain,(
  ( ! [X1769,X1771,X1773,X1775,X1776,X1778,X1780,X1782,X1784,X1770,X1772,X1774,X1777,X1779,X1783,X1781] : (~p(s(bool,happ(s(fun(X1770,bool),X1783),s(X1770,happ(s(fun(X1769,X1770),happ(s(fun('type.closLang.exp',fun(X1769,X1770)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))))),X1780),s('type.option.option'('type.num.num'),X1771))),s('type.list.list'('type.closSem.v'),X1772))),s('type.list.list'('type.closSem.v'),X1773))),s('type.num.num',X1774))),s('type.closLang.exp',X1775))),s(X1769,X1784)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1770,X1769),X1782),s(fun(X1769,X1770),happ(s(fun('type.closLang.exp',fun(X1769,X1770)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))))),X1780),s('type.option.option'('type.num.num'),X1771))),s('type.list.list'('type.closSem.v'),X1772))),s('type.list.list'('type.closSem.v'),X1773))),s('type.num.num',X1774))),s('type.closLang.exp',X1775)))))) | p(s(bool,happ(s(fun(X1770,bool),X1783),s(X1770,sK11(X1783,X1782,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1771),s('type.list.list'('type.closSem.v'),X1772),s('type.list.list'('type.closSem.v'),X1773),s('type.num.num',X1774),s('type.closLang.exp',X1775))),s(fun('type.integer.int',fun(X1769,X1770)),X1776),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1769,X1770)),X1777),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1769,X1770))),X1778),s(fun('type.num.num',fun(X1769,X1770)),X1779),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))))),X1780),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1769,X1770)))))),X1781)),X1769,X1770)))))) )),
  inference(forward_demodulation,[],[f28718,f325])).
fof(f28718,plain,(
  ( ! [X1769,X1771,X1773,X1775,X1776,X1778,X1780,X1782,X1784,X1770,X1772,X1774,X1777,X1779,X1783,X1781] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1770,X1769),X1782),s(fun(X1769,X1770),happ(s(fun('type.closLang.exp',fun(X1769,X1770)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))))),X1780),s('type.option.option'('type.num.num'),X1771))),s('type.list.list'('type.closSem.v'),X1772))),s('type.list.list'('type.closSem.v'),X1773))),s('type.num.num',X1774))),s('type.closLang.exp',X1775)))))) | ~p(s(bool,happ(s(fun(X1770,bool),X1783),s(X1770,happ(s(fun(X1769,X1770),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1771),s('type.list.list'('type.closSem.v'),X1772),s('type.list.list'('type.closSem.v'),X1773),s('type.num.num',X1774),s('type.closLang.exp',X1775))),s(fun('type.integer.int',fun(X1769,X1770)),X1776),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1769,X1770)),X1777),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1769,X1770))),X1778),s(fun('type.num.num',fun(X1769,X1770)),X1779),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))))),X1780),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1769,X1770)))))),X1781))),s(X1769,X1784)))))) | p(s(bool,happ(s(fun(X1770,bool),X1783),s(X1770,sK11(X1783,X1782,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1771),s('type.list.list'('type.closSem.v'),X1772),s('type.list.list'('type.closSem.v'),X1773),s('type.num.num',X1774),s('type.closLang.exp',X1775))),s(fun('type.integer.int',fun(X1769,X1770)),X1776),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1769,X1770)),X1777),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1769,X1770))),X1778),s(fun('type.num.num',fun(X1769,X1770)),X1779),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1769,X1770)))))),X1780),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1769,X1770)))))),X1781)),X1769,X1770)))))) )),
  inference(superposition,[],[f347,f325])).
fof(f28717,plain,(
  ( ! [X1754,X1756,X1758,X1761,X1763,X1765,X1767,X1753,X1755,X1757,X1759,X1760,X1762,X1764,X1766,X1768] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1753,X1754),happ(s(fun('type.closLang.exp',fun(X1753,X1754)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1753,X1754))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1753,X1754)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1753,X1754))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1753,X1754)))))),X1764),s('type.option.option'('type.num.num'),X1755))),s('type.list.list'('type.closSem.v'),X1756))),s('type.list.list'('type.closSem.v'),X1757))),s('type.num.num',X1758))),s('type.closLang.exp',X1759))),s(fun(X1754,X1753),X1766)))) | ~p(s(bool,happ(s(fun(X1753,bool),X1767),s(X1753,X1768)))) | p(s(bool,happ(s(fun(X1753,bool),X1767),s(X1753,happ(s(fun(X1754,X1753),X1766),s(X1754,sK10(X1767,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1755),s('type.list.list'('type.closSem.v'),X1756),s('type.list.list'('type.closSem.v'),X1757),s('type.num.num',X1758),s('type.closLang.exp',X1759))),s(fun('type.integer.int',fun(X1753,X1754)),X1760),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1753,X1754)),X1761),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1753,X1754))),X1762),s(fun('type.num.num',fun(X1753,X1754)),X1763),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1753,X1754)))))),X1764),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1753,X1754)))))),X1765)),X1766,X1754,X1753)))))))) )),
  inference(superposition,[],[f346,f325])).
fof(f28840,plain,(
  ( ! [X1738,X1740,X1742,X1745,X1747,X1751,X1749,X1737,X1739,X1741,X1743,X1744,X1746,X1748,X1750,X1752] : (p(s(bool,happ(s(fun(X1738,bool),X1751),s(X1738,happ(s(fun(X1737,X1738),happ(s(fun('type.closLang.exp',fun(X1737,X1738)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))))),X1748),s('type.option.option'('type.num.num'),X1739))),s('type.list.list'('type.closSem.v'),X1740))),s('type.list.list'('type.closSem.v'),X1741))),s('type.num.num',X1742))),s('type.closLang.exp',X1743))),s(X1737,sK10(X1751,X1750,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1739),s('type.list.list'('type.closSem.v'),X1740),s('type.list.list'('type.closSem.v'),X1741),s('type.num.num',X1742),s('type.closLang.exp',X1743))),s(fun('type.integer.int',fun(X1737,X1738)),X1744),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1737,X1738)),X1745),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1737,X1738))),X1746),s(fun('type.num.num',fun(X1737,X1738)),X1747),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))))),X1748),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1737,X1738)))))),X1749)),X1737,X1738))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1738,X1737),X1750),s(fun(X1737,X1738),happ(s(fun('type.closLang.exp',fun(X1737,X1738)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))))),X1748),s('type.option.option'('type.num.num'),X1739))),s('type.list.list'('type.closSem.v'),X1740))),s('type.list.list'('type.closSem.v'),X1741))),s('type.num.num',X1742))),s('type.closLang.exp',X1743)))))) | ~p(s(bool,happ(s(fun(X1738,bool),X1751),s(X1738,X1752))))) )),
  inference(forward_demodulation,[],[f28716,f325])).
fof(f28716,plain,(
  ( ! [X1738,X1740,X1742,X1745,X1747,X1751,X1749,X1737,X1739,X1741,X1743,X1744,X1746,X1748,X1750,X1752] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1738,X1737),X1750),s(fun(X1737,X1738),happ(s(fun('type.closLang.exp',fun(X1737,X1738)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))))),X1748),s('type.option.option'('type.num.num'),X1739))),s('type.list.list'('type.closSem.v'),X1740))),s('type.list.list'('type.closSem.v'),X1741))),s('type.num.num',X1742))),s('type.closLang.exp',X1743)))))) | ~p(s(bool,happ(s(fun(X1738,bool),X1751),s(X1738,X1752)))) | p(s(bool,happ(s(fun(X1738,bool),X1751),s(X1738,happ(s(fun(X1737,X1738),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1739),s('type.list.list'('type.closSem.v'),X1740),s('type.list.list'('type.closSem.v'),X1741),s('type.num.num',X1742),s('type.closLang.exp',X1743))),s(fun('type.integer.int',fun(X1737,X1738)),X1744),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1737,X1738)),X1745),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1737,X1738))),X1746),s(fun('type.num.num',fun(X1737,X1738)),X1747),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))))),X1748),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1737,X1738)))))),X1749))),s(X1737,sK10(X1751,X1750,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1739),s('type.list.list'('type.closSem.v'),X1740),s('type.list.list'('type.closSem.v'),X1741),s('type.num.num',X1742),s('type.closLang.exp',X1743))),s(fun('type.integer.int',fun(X1737,X1738)),X1744),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1737,X1738)),X1745),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1737,X1738))),X1746),s(fun('type.num.num',fun(X1737,X1738)),X1747),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1737,X1738)))))),X1748),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1737,X1738)))))),X1749)),X1737,X1738)))))))) )),
  inference(superposition,[],[f346,f325])).
fof(f28715,plain,(
  ( ! [X1725,X1727,X1728,X1730,X1732,X1734,X1736,X1722,X1724,X1726,X1729,X1731,X1733,X1735,X1721,X1723] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1721,X1722),happ(s(fun('type.closLang.exp',fun(X1721,X1722)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1721,X1722))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1721,X1722)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1721,X1722))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1721,X1722)))))),X1732),s('type.option.option'('type.num.num'),X1723))),s('type.list.list'('type.closSem.v'),X1724))),s('type.list.list'('type.closSem.v'),X1725))),s('type.num.num',X1726))),s('type.closLang.exp',X1727))),s(fun(X1722,X1721),X1734)))) | ~p(s(bool,happ(s(fun(X1721,bool),X1735),s(X1721,happ(s(fun(X1722,X1721),X1734),s(X1722,sK9(X1735,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1723),s('type.list.list'('type.closSem.v'),X1724),s('type.list.list'('type.closSem.v'),X1725),s('type.num.num',X1726),s('type.closLang.exp',X1727))),s(fun('type.integer.int',fun(X1721,X1722)),X1728),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1721,X1722)),X1729),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1721,X1722))),X1730),s(fun('type.num.num',fun(X1721,X1722)),X1731),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1721,X1722)))))),X1732),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1721,X1722)))))),X1733)),X1734,X1722,X1721))))))) | p(s(bool,happ(s(fun(X1721,bool),X1735),s(X1721,X1736))))) )),
  inference(superposition,[],[f345,f325])).
fof(f28839,plain,(
  ( ! [X1705,X1707,X1709,X1711,X1712,X1714,X1716,X1718,X1720,X1706,X1708,X1710,X1713,X1715,X1719,X1717] : (~p(s(bool,happ(s(fun(X1706,bool),X1719),s(X1706,happ(s(fun(X1705,X1706),happ(s(fun('type.closLang.exp',fun(X1705,X1706)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))))),X1716),s('type.option.option'('type.num.num'),X1707))),s('type.list.list'('type.closSem.v'),X1708))),s('type.list.list'('type.closSem.v'),X1709))),s('type.num.num',X1710))),s('type.closLang.exp',X1711))),s(X1705,sK9(X1719,X1718,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1707),s('type.list.list'('type.closSem.v'),X1708),s('type.list.list'('type.closSem.v'),X1709),s('type.num.num',X1710),s('type.closLang.exp',X1711))),s(fun('type.integer.int',fun(X1705,X1706)),X1712),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1705,X1706)),X1713),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1705,X1706))),X1714),s(fun('type.num.num',fun(X1705,X1706)),X1715),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))))),X1716),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1705,X1706)))))),X1717)),X1705,X1706))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1706,X1705),X1718),s(fun(X1705,X1706),happ(s(fun('type.closLang.exp',fun(X1705,X1706)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))))),X1716),s('type.option.option'('type.num.num'),X1707))),s('type.list.list'('type.closSem.v'),X1708))),s('type.list.list'('type.closSem.v'),X1709))),s('type.num.num',X1710))),s('type.closLang.exp',X1711)))))) | p(s(bool,happ(s(fun(X1706,bool),X1719),s(X1706,X1720))))) )),
  inference(forward_demodulation,[],[f28714,f325])).
fof(f28714,plain,(
  ( ! [X1705,X1707,X1709,X1711,X1712,X1714,X1716,X1718,X1720,X1706,X1708,X1710,X1713,X1715,X1719,X1717] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1706,X1705),X1718),s(fun(X1705,X1706),happ(s(fun('type.closLang.exp',fun(X1705,X1706)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))))),X1716),s('type.option.option'('type.num.num'),X1707))),s('type.list.list'('type.closSem.v'),X1708))),s('type.list.list'('type.closSem.v'),X1709))),s('type.num.num',X1710))),s('type.closLang.exp',X1711)))))) | ~p(s(bool,happ(s(fun(X1706,bool),X1719),s(X1706,happ(s(fun(X1705,X1706),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1707),s('type.list.list'('type.closSem.v'),X1708),s('type.list.list'('type.closSem.v'),X1709),s('type.num.num',X1710),s('type.closLang.exp',X1711))),s(fun('type.integer.int',fun(X1705,X1706)),X1712),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1705,X1706)),X1713),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1705,X1706))),X1714),s(fun('type.num.num',fun(X1705,X1706)),X1715),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))))),X1716),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1705,X1706)))))),X1717))),s(X1705,sK9(X1719,X1718,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1707),s('type.list.list'('type.closSem.v'),X1708),s('type.list.list'('type.closSem.v'),X1709),s('type.num.num',X1710),s('type.closLang.exp',X1711))),s(fun('type.integer.int',fun(X1705,X1706)),X1712),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1705,X1706)),X1713),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1705,X1706))),X1714),s(fun('type.num.num',fun(X1705,X1706)),X1715),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1705,X1706)))))),X1716),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1705,X1706)))))),X1717)),X1705,X1706))))))) | p(s(bool,happ(s(fun(X1706,bool),X1719),s(X1706,X1720))))) )),
  inference(superposition,[],[f345,f325])).
fof(f28713,plain,(
  ( ! [X1692,X1694,X1697,X1699,X1701,X1703,X1689,X1691,X1693,X1695,X1696,X1698,X1700,X1702,X1704,X1690] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1689,X1690),happ(s(fun('type.closLang.exp',fun(X1689,X1690)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1689,X1690))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1689,X1690)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1689,X1690))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1689,X1690)))))),X1700),s('type.option.option'('type.num.num'),X1691))),s('type.list.list'('type.closSem.v'),X1692))),s('type.list.list'('type.closSem.v'),X1693))),s('type.num.num',X1694))),s('type.closLang.exp',X1695))),s(fun(X1690,X1689),X1702)))) | ~p(s(bool,happ(s(fun(X1689,bool),X1703),s(X1689,sK8(X1703,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1691),s('type.list.list'('type.closSem.v'),X1692),s('type.list.list'('type.closSem.v'),X1693),s('type.num.num',X1694),s('type.closLang.exp',X1695))),s(fun('type.integer.int',fun(X1689,X1690)),X1696),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1689,X1690)),X1697),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1689,X1690))),X1698),s(fun('type.num.num',fun(X1689,X1690)),X1699),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1689,X1690)))))),X1700),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1689,X1690)))))),X1701)),X1702,X1690,X1689))))) | p(s(bool,happ(s(fun(X1689,bool),X1703),s(X1689,happ(s(fun(X1690,X1689),X1702),s(X1690,X1704))))))) )),
  inference(superposition,[],[f344,f325])).
fof(f28838,plain,(
  ( ! [X1674,X1676,X1678,X1681,X1683,X1687,X1685,X1673,X1675,X1677,X1679,X1680,X1682,X1684,X1686,X1688] : (p(s(bool,happ(s(fun(X1674,bool),X1687),s(X1674,happ(s(fun(X1673,X1674),happ(s(fun('type.closLang.exp',fun(X1673,X1674)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))))),X1684),s('type.option.option'('type.num.num'),X1675))),s('type.list.list'('type.closSem.v'),X1676))),s('type.list.list'('type.closSem.v'),X1677))),s('type.num.num',X1678))),s('type.closLang.exp',X1679))),s(X1673,X1688)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1674,X1673),X1686),s(fun(X1673,X1674),happ(s(fun('type.closLang.exp',fun(X1673,X1674)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))))),X1684),s('type.option.option'('type.num.num'),X1675))),s('type.list.list'('type.closSem.v'),X1676))),s('type.list.list'('type.closSem.v'),X1677))),s('type.num.num',X1678))),s('type.closLang.exp',X1679)))))) | ~p(s(bool,happ(s(fun(X1674,bool),X1687),s(X1674,sK8(X1687,X1686,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1675),s('type.list.list'('type.closSem.v'),X1676),s('type.list.list'('type.closSem.v'),X1677),s('type.num.num',X1678),s('type.closLang.exp',X1679))),s(fun('type.integer.int',fun(X1673,X1674)),X1680),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1673,X1674)),X1681),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1673,X1674))),X1682),s(fun('type.num.num',fun(X1673,X1674)),X1683),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))))),X1684),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1673,X1674)))))),X1685)),X1673,X1674)))))) )),
  inference(forward_demodulation,[],[f28712,f325])).
fof(f28712,plain,(
  ( ! [X1674,X1676,X1678,X1681,X1683,X1687,X1685,X1673,X1675,X1677,X1679,X1680,X1682,X1684,X1686,X1688] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1674,X1673),X1686),s(fun(X1673,X1674),happ(s(fun('type.closLang.exp',fun(X1673,X1674)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))))),X1684),s('type.option.option'('type.num.num'),X1675))),s('type.list.list'('type.closSem.v'),X1676))),s('type.list.list'('type.closSem.v'),X1677))),s('type.num.num',X1678))),s('type.closLang.exp',X1679)))))) | ~p(s(bool,happ(s(fun(X1674,bool),X1687),s(X1674,sK8(X1687,X1686,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1675),s('type.list.list'('type.closSem.v'),X1676),s('type.list.list'('type.closSem.v'),X1677),s('type.num.num',X1678),s('type.closLang.exp',X1679))),s(fun('type.integer.int',fun(X1673,X1674)),X1680),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1673,X1674)),X1681),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1673,X1674))),X1682),s(fun('type.num.num',fun(X1673,X1674)),X1683),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))))),X1684),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1673,X1674)))))),X1685)),X1673,X1674))))) | p(s(bool,happ(s(fun(X1674,bool),X1687),s(X1674,happ(s(fun(X1673,X1674),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1675),s('type.list.list'('type.closSem.v'),X1676),s('type.list.list'('type.closSem.v'),X1677),s('type.num.num',X1678),s('type.closLang.exp',X1679))),s(fun('type.integer.int',fun(X1673,X1674)),X1680),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1673,X1674)),X1681),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1673,X1674))),X1682),s(fun('type.num.num',fun(X1673,X1674)),X1683),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1673,X1674)))))),X1684),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1673,X1674)))))),X1685))),s(X1673,X1688))))))) )),
  inference(superposition,[],[f344,f325])).
fof(f28837,plain,(
  ( ! [X1521,X1523,X1525,X1515,X1517,X1519,X1520,X1522,X1524,X1526,X1516,X1518] : (~p(s(bool,happ(s(fun('type.list.list'(X1515),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1515),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))))),X1525),s('type.option.option'('type.num.num'),X1516))),s('type.list.list'('type.closSem.v'),X1517))),s('type.list.list'('type.closSem.v'),X1518))),s('type.num.num',X1519))),s('type.closLang.exp',X1520))),s('type.list.list'(X1515),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X1515),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1515),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))))),X1525),s('type.option.option'('type.num.num'),X1516))),s('type.list.list'('type.closSem.v'),X1517))),s('type.list.list'('type.closSem.v'),X1518))),s('type.num.num',X1519))),s('type.closLang.exp',X1520))),s('type.list.list'(X1515),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1516),s('type.list.list'('type.closSem.v'),X1517),s('type.list.list'('type.closSem.v'),X1518),s('type.num.num',X1519),s('type.closLang.exp',X1520))),s(fun('type.integer.int',fun('type.list.list'(X1515),bool)),X1521),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1515),bool)),X1522),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1515),bool))),X1523),s(fun('type.num.num',fun('type.list.list'(X1515),bool)),X1524),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))))),X1525),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1515),bool)))))),X1526)),X1515)))))) )),
  inference(forward_demodulation,[],[f28703,f325])).
fof(f28703,plain,(
  ( ! [X1521,X1523,X1525,X1515,X1517,X1519,X1520,X1522,X1524,X1526,X1516,X1518] : (p(s(bool,happ(s(fun('type.list.list'(X1515),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1515),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))))),X1525),s('type.option.option'('type.num.num'),X1516))),s('type.list.list'('type.closSem.v'),X1517))),s('type.list.list'('type.closSem.v'),X1518))),s('type.num.num',X1519))),s('type.closLang.exp',X1520))),s('type.list.list'(X1515),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1516),s('type.list.list'('type.closSem.v'),X1517),s('type.list.list'('type.closSem.v'),X1518),s('type.num.num',X1519),s('type.closLang.exp',X1520))),s(fun('type.integer.int',fun('type.list.list'(X1515),bool)),X1521),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1515),bool)),X1522),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1515),bool))),X1523),s(fun('type.num.num',fun('type.list.list'(X1515),bool)),X1524),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))))),X1525),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1515),bool)))))),X1526)),X1515))))) | ~p(s(bool,happ(s(fun('type.list.list'(X1515),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1516),s('type.list.list'('type.closSem.v'),X1517),s('type.list.list'('type.closSem.v'),X1518),s('type.num.num',X1519),s('type.closLang.exp',X1520))),s(fun('type.integer.int',fun('type.list.list'(X1515),bool)),X1521),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1515),bool)),X1522),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1515),bool))),X1523),s(fun('type.num.num',fun('type.list.list'(X1515),bool)),X1524),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1515),bool)))))),X1525),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1515),bool)))))),X1526))),s('type.list.list'(X1515),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f325])).
fof(f28836,plain,(
  ( ! [X1502,X1513,X1505,X1507,X1509,X1511,X1503,X1512,X1514,X1504,X1506,X1508,X1510] : (p(s(bool,happ(s(fun('type.list.list'(X1502),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1502),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s('type.option.option'('type.num.num'),X1503))),s('type.list.list'('type.closSem.v'),X1504))),s('type.list.list'('type.closSem.v'),X1505))),s('type.num.num',X1506))),s('type.closLang.exp',X1507))),s('type.list.list'(X1502),X1514)))) | ~p(s(bool,happ(s(fun('type.list.list'(X1502),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1502),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s('type.option.option'('type.num.num'),X1503))),s('type.list.list'('type.closSem.v'),X1504))),s('type.list.list'('type.closSem.v'),X1505))),s('type.num.num',X1506))),s('type.closLang.exp',X1507))),s('type.list.list'(X1502),'const.list.CONS_2'(s(X1502,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513)),X1502)),s('type.list.list'(X1502),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513)),X1502))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X1502),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1502),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s('type.option.option'('type.num.num'),X1503))),s('type.list.list'('type.closSem.v'),X1504))),s('type.list.list'('type.closSem.v'),X1505))),s('type.num.num',X1506))),s('type.closLang.exp',X1507))),s('type.list.list'(X1502),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f28835,f325])).
fof(f28835,plain,(
  ( ! [X1502,X1513,X1505,X1507,X1509,X1511,X1503,X1512,X1514,X1504,X1506,X1508,X1510] : (~p(s(bool,happ(s(fun('type.list.list'(X1502),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1502),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s('type.option.option'('type.num.num'),X1503))),s('type.list.list'('type.closSem.v'),X1504))),s('type.list.list'('type.closSem.v'),X1505))),s('type.num.num',X1506))),s('type.closLang.exp',X1507))),s('type.list.list'(X1502),'const.list.CONS_2'(s(X1502,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513)),X1502)),s('type.list.list'(X1502),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513)),X1502))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X1502),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1502),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s('type.option.option'('type.num.num'),X1503))),s('type.list.list'('type.closSem.v'),X1504))),s('type.list.list'('type.closSem.v'),X1505))),s('type.num.num',X1506))),s('type.closLang.exp',X1507))),s('type.list.list'(X1502),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X1502),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513))),s('type.list.list'(X1502),X1514))))) )),
  inference(forward_demodulation,[],[f28702,f325])).
fof(f28702,plain,(
  ( ! [X1502,X1513,X1505,X1507,X1509,X1511,X1503,X1512,X1514,X1504,X1506,X1508,X1510] : (~p(s(bool,happ(s(fun('type.list.list'(X1502),bool),happ(s(fun('type.closLang.exp',fun('type.list.list'(X1502),bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s('type.option.option'('type.num.num'),X1503))),s('type.list.list'('type.closSem.v'),X1504))),s('type.list.list'('type.closSem.v'),X1505))),s('type.num.num',X1506))),s('type.closLang.exp',X1507))),s('type.list.list'(X1502),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X1502),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513))),s('type.list.list'(X1502),'const.list.CONS_2'(s(X1502,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513)),X1502)),s('type.list.list'(X1502),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513)),X1502))))))) | p(s(bool,happ(s(fun('type.list.list'(X1502),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1503),s('type.list.list'('type.closSem.v'),X1504),s('type.list.list'('type.closSem.v'),X1505),s('type.num.num',X1506),s('type.closLang.exp',X1507))),s(fun('type.integer.int',fun('type.list.list'(X1502),bool)),X1508),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X1502),bool)),X1509),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X1502),bool))),X1510),s(fun('type.num.num',fun('type.list.list'(X1502),bool)),X1511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X1502),bool)))))),X1512),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X1502),bool)))))),X1513))),s('type.list.list'(X1502),X1514))))) )),
  inference(superposition,[],[f305,f325])).
fof(f28678,plain,(
  ( ! [X1112,X1106,X1104,X1110,X1108,X1103,X1101,X1107,X1105,X1111,X1109,X1102,X1100] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1100,bool),happ(s(fun('type.closLang.exp',fun(X1100,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1100,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1100,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1100,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1100,bool)))))),X1110),s('type.option.option'('type.num.num'),X1101))),s('type.list.list'('type.closSem.v'),X1102))),s('type.list.list'('type.closSem.v'),X1103))),s('type.num.num',X1104))),s('type.closLang.exp',X1105))))) | s(X1100,X1112) = s(X1100,sK4(X1112,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1101),s('type.list.list'('type.closSem.v'),X1102),s('type.list.list'('type.closSem.v'),X1103),s('type.num.num',X1104),s('type.closLang.exp',X1105))),s(fun('type.integer.int',fun(X1100,bool)),X1106),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1100,bool)),X1107),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1100,bool))),X1108),s(fun('type.num.num',fun(X1100,bool)),X1109),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1100,bool)))))),X1110),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1100,bool)))))),X1111)),X1100))) )),
  inference(superposition,[],[f823,f325])).
fof(f28832,plain,(
  ( ! [X1087,X1099,X1097,X1091,X1089,X1095,X1093,X1086,X1098,X1096,X1090,X1088,X1094,X1092] : (p(s(bool,happ(s(fun(X1086,bool),happ(s(fun('type.closLang.exp',fun(X1086,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s('type.option.option'('type.num.num'),X1087))),s('type.list.list'('type.closSem.v'),X1088))),s('type.list.list'('type.closSem.v'),X1089))),s('type.num.num',X1090))),s('type.closLang.exp',X1091))),s(X1086,sK6(X1098,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1087),s('type.list.list'('type.closSem.v'),X1088),s('type.list.list'('type.closSem.v'),X1089),s('type.num.num',X1090),s('type.closLang.exp',X1091))),s(fun('type.integer.int',fun(X1086,bool)),X1092),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,bool)),X1093),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,bool))),X1094),s(fun('type.num.num',fun(X1086,bool)),X1095),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,bool)))))),X1097)),X1086))))) | ~p(s(bool,happ(s(fun(X1086,bool),happ(s(fun('type.closLang.exp',fun(X1086,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s('type.option.option'('type.num.num'),X1087))),s('type.list.list'('type.closSem.v'),X1088))),s('type.list.list'('type.closSem.v'),X1089))),s('type.num.num',X1090))),s('type.closLang.exp',X1091))),s(X1086,sK5(X1098,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1087),s('type.list.list'('type.closSem.v'),X1088),s('type.list.list'('type.closSem.v'),X1089),s('type.num.num',X1090),s('type.closLang.exp',X1091))),s(fun('type.integer.int',fun(X1086,bool)),X1092),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,bool)),X1093),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,bool))),X1094),s(fun('type.num.num',fun(X1086,bool)),X1095),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,bool)))))),X1097)),X1086))))) | ~p(s(bool,happ(s(fun(X1086,bool),X1098),s(X1086,X1099))))) )),
  inference(forward_demodulation,[],[f28677,f325])).
fof(f28677,plain,(
  ( ! [X1087,X1099,X1097,X1091,X1089,X1095,X1093,X1086,X1098,X1096,X1090,X1088,X1094,X1092] : (~p(s(bool,happ(s(fun(X1086,bool),happ(s(fun('type.closLang.exp',fun(X1086,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s('type.option.option'('type.num.num'),X1087))),s('type.list.list'('type.closSem.v'),X1088))),s('type.list.list'('type.closSem.v'),X1089))),s('type.num.num',X1090))),s('type.closLang.exp',X1091))),s(X1086,sK5(X1098,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1087),s('type.list.list'('type.closSem.v'),X1088),s('type.list.list'('type.closSem.v'),X1089),s('type.num.num',X1090),s('type.closLang.exp',X1091))),s(fun('type.integer.int',fun(X1086,bool)),X1092),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,bool)),X1093),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,bool))),X1094),s(fun('type.num.num',fun(X1086,bool)),X1095),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,bool)))))),X1097)),X1086))))) | ~p(s(bool,happ(s(fun(X1086,bool),X1098),s(X1086,X1099)))) | p(s(bool,happ(s(fun(X1086,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1087),s('type.list.list'('type.closSem.v'),X1088),s('type.list.list'('type.closSem.v'),X1089),s('type.num.num',X1090),s('type.closLang.exp',X1091))),s(fun('type.integer.int',fun(X1086,bool)),X1092),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,bool)),X1093),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,bool))),X1094),s(fun('type.num.num',fun(X1086,bool)),X1095),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,bool)))))),X1097))),s(X1086,sK6(X1098,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1087),s('type.list.list'('type.closSem.v'),X1088),s('type.list.list'('type.closSem.v'),X1089),s('type.num.num',X1090),s('type.closLang.exp',X1091))),s(fun('type.integer.int',fun(X1086,bool)),X1092),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,bool)),X1093),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,bool))),X1094),s(fun('type.num.num',fun(X1086,bool)),X1095),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,bool)))))),X1096),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,bool)))))),X1097)),X1086)))))) )),
  inference(superposition,[],[f315,f325])).
fof(f28831,plain,(
  ( ! [X1081,X1085,X1075,X1073,X1079,X1077,X1082,X1080,X1084,X1074,X1072,X1078,X1076,X1083] : (p(s(bool,happ(s(fun(X1072,bool),happ(s(fun('type.closLang.exp',fun(X1072,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s('type.option.option'('type.num.num'),X1073))),s('type.list.list'('type.closSem.v'),X1074))),s('type.list.list'('type.closSem.v'),X1075))),s('type.num.num',X1076))),s('type.closLang.exp',X1077))),s(X1072,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1073),s('type.list.list'('type.closSem.v'),X1074),s('type.list.list'('type.closSem.v'),X1075),s('type.num.num',X1076),s('type.closLang.exp',X1077))),s(fun('type.integer.int',fun(X1072,bool)),X1078),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1072,bool)),X1079),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1072,bool))),X1080),s(fun('type.num.num',fun(X1072,bool)),X1081),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1072,bool)))))),X1083)),X1085,X1072))))) | ~p(s(bool,happ(s(fun(X1072,bool),happ(s(fun('type.closLang.exp',fun(X1072,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s('type.option.option'('type.num.num'),X1073))),s('type.list.list'('type.closSem.v'),X1074))),s('type.list.list'('type.closSem.v'),X1075))),s('type.num.num',X1076))),s('type.closLang.exp',X1077))),s(X1072,X1084)))) | p(s(bool,happ(s(fun(X1072,bool),X1085),s(X1072,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1073),s('type.list.list'('type.closSem.v'),X1074),s('type.list.list'('type.closSem.v'),X1075),s('type.num.num',X1076),s('type.closLang.exp',X1077))),s(fun('type.integer.int',fun(X1072,bool)),X1078),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1072,bool)),X1079),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1072,bool))),X1080),s(fun('type.num.num',fun(X1072,bool)),X1081),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1072,bool)))))),X1083)),X1085,X1072)))))) )),
  inference(forward_demodulation,[],[f28676,f325])).
fof(f28676,plain,(
  ( ! [X1081,X1085,X1075,X1073,X1079,X1077,X1082,X1080,X1084,X1074,X1072,X1078,X1076,X1083] : (~p(s(bool,happ(s(fun(X1072,bool),happ(s(fun('type.closLang.exp',fun(X1072,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s('type.option.option'('type.num.num'),X1073))),s('type.list.list'('type.closSem.v'),X1074))),s('type.list.list'('type.closSem.v'),X1075))),s('type.num.num',X1076))),s('type.closLang.exp',X1077))),s(X1072,X1084)))) | p(s(bool,happ(s(fun(X1072,bool),X1085),s(X1072,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1073),s('type.list.list'('type.closSem.v'),X1074),s('type.list.list'('type.closSem.v'),X1075),s('type.num.num',X1076),s('type.closLang.exp',X1077))),s(fun('type.integer.int',fun(X1072,bool)),X1078),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1072,bool)),X1079),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1072,bool))),X1080),s(fun('type.num.num',fun(X1072,bool)),X1081),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1072,bool)))))),X1083)),X1085,X1072))))) | p(s(bool,happ(s(fun(X1072,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1073),s('type.list.list'('type.closSem.v'),X1074),s('type.list.list'('type.closSem.v'),X1075),s('type.num.num',X1076),s('type.closLang.exp',X1077))),s(fun('type.integer.int',fun(X1072,bool)),X1078),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1072,bool)),X1079),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1072,bool))),X1080),s(fun('type.num.num',fun(X1072,bool)),X1081),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1072,bool)))))),X1083))),s(X1072,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1073),s('type.list.list'('type.closSem.v'),X1074),s('type.list.list'('type.closSem.v'),X1075),s('type.num.num',X1076),s('type.closLang.exp',X1077))),s(fun('type.integer.int',fun(X1072,bool)),X1078),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1072,bool)),X1079),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1072,bool))),X1080),s(fun('type.num.num',fun(X1072,bool)),X1081),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1072,bool)))))),X1082),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1072,bool)))))),X1083)),X1085,X1072)))))) )),
  inference(superposition,[],[f314,f325])).
fof(f28675,plain,(
  ( ! [X1066,X1064,X1070,X1068,X1062,X1060,X1067,X1065,X1071,X1069,X1059,X1063,X1061] : (p(s(bool,'|dollar|exists_1'(s(fun(X1059,bool),happ(s(fun('type.closLang.exp',fun(X1059,bool)),happ(s(fun('type.num.num',fun('type.closLang.exp',fun(X1059,bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,bool)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,bool))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,bool)))))),X1069),s('type.option.option'('type.num.num'),X1060))),s('type.list.list'('type.closSem.v'),X1061))),s('type.list.list'('type.closSem.v'),X1062))),s('type.num.num',X1063))),s('type.closLang.exp',X1064)))))) | s(X1059,X1071) = s(X1059,sK4(X1071,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1060),s('type.list.list'('type.closSem.v'),X1061),s('type.list.list'('type.closSem.v'),X1062),s('type.num.num',X1063),s('type.closLang.exp',X1064))),s(fun('type.integer.int',fun(X1059,bool)),X1065),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,bool)),X1066),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1059,bool))),X1067),s(fun('type.num.num',fun(X1059,bool)),X1068),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,bool)))))),X1069),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1059,bool)))))),X1070)),X1059))) )),
  inference(superposition,[],[f312,f325])).
fof(f28658,plain,(
  ( ! [X872,X866,X864,X870,X868,X863,X873,X867,X865,X871,X869,X862] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X873),'const.sum.INL_1'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X871),s('type.option.option'('type.num.num'),X862))),s('type.list.list'('type.closSem.v'),X863))),s('type.list.list'('type.closSem.v'),X864))),s('type.num.num',X865))),s('type.closLang.exp',X866))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X862),s('type.list.list'('type.closSem.v'),X863),s('type.list.list'('type.closSem.v'),X864),s('type.num.num',X865),s('type.closLang.exp',X866))),s(fun('type.integer.int',bool),X867),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X868),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X869),s(fun('type.num.num',bool),X870),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X871),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X872)))) )),
  inference(superposition,[],[f5684,f325])).
fof(f28657,plain,(
  ( ! [X860,X850,X854,X852,X859,X857,X861,X851,X855,X853,X858,X856] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X861,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X859),s('type.option.option'('type.num.num'),X850))),s('type.list.list'('type.closSem.v'),X851))),s('type.list.list'('type.closSem.v'),X852))),s('type.num.num',X853))),s('type.closLang.exp',X854))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X850),s('type.list.list'('type.closSem.v'),X851),s('type.list.list'('type.closSem.v'),X852),s('type.num.num',X853),s('type.closLang.exp',X854))),s(fun('type.integer.int',bool),X855),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X856),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X857),s(fun('type.num.num',bool),X858),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X859),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X860)))) )),
  inference(superposition,[],[f5495,f325])).
fof(f28652,plain,(
  ( ! [X798,X796,X790,X788,X795,X793,X799,X797,X787,X791,X789,X794,X792] : (~p(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X796),s('type.option.option'('type.num.num'),X787))),s('type.list.list'('type.closSem.v'),X788))),s('type.list.list'('type.closSem.v'),X789))),s('type.num.num',X790))),s('type.closLang.exp',X791)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X798),bool),sK16(X799,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X787),s('type.list.list'('type.closSem.v'),X788),s('type.list.list'('type.closSem.v'),X789),s('type.num.num',X790),s('type.closLang.exp',X791))),s(fun('type.integer.int',bool),X792),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X793),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X794),s(fun('type.num.num',bool),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X796),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X797)),X798,bool))))) )),
  inference(superposition,[],[f3944,f325])).
fof(f28640,plain,(
  ( ! [X656,X658,X652,X654,X648,X650,X657,X653,X655,X649,X651,X647] : (s(bool,X658) != s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X656),s('type.option.option'('type.num.num'),X647))),s('type.list.list'('type.closSem.v'),X648))),s('type.list.list'('type.closSem.v'),X649))),s('type.num.num',X650))),s('type.closLang.exp',X651))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X647),s('type.list.list'('type.closSem.v'),X648),s('type.list.list'('type.closSem.v'),X649),s('type.num.num',X650),s('type.closLang.exp',X651))),s(fun('type.integer.int',bool),X652),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X653),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X654),s(fun('type.num.num',bool),X655),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X656),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X657))) | s(bool,'T_0') = s(bool,X658)) )),
  inference(superposition,[],[f1683,f325])).
fof(f28639,plain,(
  ( ! [X639,X635,X644,X646,X640,X642,X636,X638,X645,X641,X643,X637] : (s(bool,X646) != s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X644),s('type.option.option'('type.num.num'),X635))),s('type.list.list'('type.closSem.v'),X636))),s('type.list.list'('type.closSem.v'),X637))),s('type.num.num',X638))),s('type.closLang.exp',X639))) | s(bool,'F_0') = s(bool,X646) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X635),s('type.list.list'('type.closSem.v'),X636),s('type.list.list'('type.closSem.v'),X637),s('type.num.num',X638),s('type.closLang.exp',X639))),s(fun('type.integer.int',bool),X640),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X641),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X642),s(fun('type.num.num',bool),X643),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X644),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X645)))) )),
  inference(superposition,[],[f1683,f325])).
fof(f28633,plain,(
  ( ! [X573,X575,X569,X571,X565,X567,X576,X572,X574,X568,X570,X566] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X576),'const.sum.INL_1'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X574),s('type.option.option'('type.num.num'),X565))),s('type.list.list'('type.closSem.v'),X566))),s('type.list.list'('type.closSem.v'),X567))),s('type.num.num',X568))),s('type.closLang.exp',X569))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X565),s('type.list.list'('type.closSem.v'),X566),s('type.list.list'('type.closSem.v'),X567),s('type.num.num',X568),s('type.closLang.exp',X569))),s(fun('type.integer.int',bool),X570),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X571),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X572),s(fun('type.num.num',bool),X573),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X574),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X575)))) )),
  inference(superposition,[],[f1396,f325])).
fof(f28632,plain,(
  ( ! [X561,X563,X557,X559,X553,X555,X564,X560,X562,X556,X558,X554] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X564,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X562),s('type.option.option'('type.num.num'),X553))),s('type.list.list'('type.closSem.v'),X554))),s('type.list.list'('type.closSem.v'),X555))),s('type.num.num',X556))),s('type.closLang.exp',X557))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X553),s('type.list.list'('type.closSem.v'),X554),s('type.list.list'('type.closSem.v'),X555),s('type.num.num',X556),s('type.closLang.exp',X557))),s(fun('type.integer.int',bool),X558),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X559),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X560),s(fun('type.num.num',bool),X561),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X562),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X563)))) )),
  inference(superposition,[],[f1395,f325])).
fof(f28800,plain,(
  ( ! [X536,X538,X532,X534,X528,X530,X537,X533,X535,X529,X531] : (s(bool,'T_0') != s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X537),s('type.option.option'('type.num.num'),X528))),s('type.list.list'('type.closSem.v'),X529))),s('type.list.list'('type.closSem.v'),X530))),s('type.num.num',X531))),s('type.closLang.exp',X532))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X528),s('type.list.list'('type.closSem.v'),X529),s('type.list.list'('type.closSem.v'),X530),s('type.num.num',X531),s('type.closLang.exp',X532))),s(fun('type.integer.int',bool),X533),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X534),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X535),s(fun('type.num.num',bool),X536),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X537),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X538)))) )),
  inference(forward_demodulation,[],[f28630,f427])).
fof(f28630,plain,(
  ( ! [X536,X538,X532,X534,X528,X530,X537,X539,X533,X535,X529,X531] : (s(bool,'const.ind_type.ISO_2'(s(fun(X539,X539),'_i_0_0'),s(fun(X539,X539),'_i_0_0'))) != s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X537),s('type.option.option'('type.num.num'),X528))),s('type.list.list'('type.closSem.v'),X529))),s('type.list.list'('type.closSem.v'),X530))),s('type.num.num',X531))),s('type.closLang.exp',X532))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X528),s('type.list.list'('type.closSem.v'),X529),s('type.list.list'('type.closSem.v'),X530),s('type.num.num',X531),s('type.closLang.exp',X532))),s(fun('type.integer.int',bool),X533),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X534),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X535),s(fun('type.num.num',bool),X536),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X537),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X538)))) )),
  inference(superposition,[],[f790,f325])).
fof(f28629,plain,(
  ( ! [X524,X526,X520,X522,X516,X518,X525,X527,X521,X523,X517,X519,X515] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X526),'const.pair.,_2'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X524),s('type.option.option'('type.num.num'),X515))),s('type.list.list'('type.closSem.v'),X516))),s('type.list.list'('type.closSem.v'),X517))),s('type.num.num',X518))),s('type.closLang.exp',X519))),s(X526,X527))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X515),s('type.list.list'('type.closSem.v'),X516),s('type.list.list'('type.closSem.v'),X517),s('type.num.num',X518),s('type.closLang.exp',X519))),s(fun('type.integer.int',bool),X520),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X521),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X522),s(fun('type.num.num',bool),X523),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X524),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X525)))) )),
  inference(superposition,[],[f730,f325])).
fof(f28628,plain,(
  ( ! [X509,X511,X505,X507,X502,X512,X514,X508,X510,X504,X506,X513,X503] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X513,bool),'const.pair.,_2'(s(X513,X514),s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X511),s('type.option.option'('type.num.num'),X502))),s('type.list.list'('type.closSem.v'),X503))),s('type.list.list'('type.closSem.v'),X504))),s('type.num.num',X505))),s('type.closLang.exp',X506))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X502),s('type.list.list'('type.closSem.v'),X503),s('type.list.list'('type.closSem.v'),X504),s('type.num.num',X505),s('type.closLang.exp',X506))),s(fun('type.integer.int',bool),X507),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X508),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X509),s(fun('type.num.num',bool),X510),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X511),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X512)))) )),
  inference(superposition,[],[f673,f325])).
fof(f28627,plain,(
  ( ! [X499,X492,X494,X490,X500,X496,X498,X493,X495,X491,X501,X497] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X499),s('type.option.option'('type.num.num'),X490))),s('type.list.list'('type.closSem.v'),X491))),s('type.list.list'('type.closSem.v'),X492))),s('type.num.num',X493))),s('type.closLang.exp',X494))),s(fun('type.num.num',bool),X501),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X490),s('type.list.list'('type.closSem.v'),X491),s('type.list.list'('type.closSem.v'),X492),s('type.num.num',X493),s('type.closLang.exp',X494))),s(fun('type.integer.int',bool),X495),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X496),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X497),s(fun('type.num.num',bool),X498),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X499),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X500)))) )),
  inference(superposition,[],[f620,f325])).
fof(f28626,plain,(
  ( ! [X478,X484,X486,X480,X482,X488,X479,X485,X487,X481,X483,X489] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X489,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X487),s('type.option.option'('type.num.num'),X478))),s('type.list.list'('type.closSem.v'),X479))),s('type.list.list'('type.closSem.v'),X480))),s('type.num.num',X481))),s('type.closLang.exp',X482))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X478),s('type.list.list'('type.closSem.v'),X479),s('type.list.list'('type.closSem.v'),X480),s('type.num.num',X481),s('type.closLang.exp',X482))),s(fun('type.integer.int',bool),X483),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X484),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X485),s(fun('type.num.num',bool),X486),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X487),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X488)))) )),
  inference(superposition,[],[f527,f325])).
fof(f28625,plain,(
  ( ! [X466,X476,X472,X474,X469,X471,X475,X477,X467,X473,X468,X470] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X477),'const.sum.INL_1'(s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X475),s('type.option.option'('type.num.num'),X466))),s('type.list.list'('type.closSem.v'),X467))),s('type.list.list'('type.closSem.v'),X468))),s('type.num.num',X469))),s('type.closLang.exp',X470))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X466),s('type.list.list'('type.closSem.v'),X467),s('type.list.list'('type.closSem.v'),X468),s('type.num.num',X469),s('type.closLang.exp',X470))),s(fun('type.integer.int',bool),X471),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X472),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X473),s(fun('type.num.num',bool),X474),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X475),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X476)))) )),
  inference(superposition,[],[f500,f325])).
fof(f28572,plain,(
  ( ! [X39,X37,X35,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(bool,X46) = s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X44),s('type.option.option'('type.num.num'),X35))),s('type.list.list'('type.closSem.v'),X36))),s('type.list.list'('type.closSem.v'),X37))),s('type.num.num',X38))),s('type.closLang.exp',X39))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X35),s('type.list.list'('type.closSem.v'),X36),s('type.list.list'('type.closSem.v'),X37),s('type.num.num',X38),s('type.closLang.exp',X39))),s(fun('type.integer.int',bool),X40),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X41),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X42),s(fun('type.num.num',bool),X43),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X44),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X45)))) )),
  inference(superposition,[],[f325,f432])).
fof(f28571,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X32),s('type.option.option'('type.num.num'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.list.list'('type.closSem.v'),X25))),s('type.num.num',X26))),s('type.closLang.exp',X27))) | s(bool,X34) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.num.num',X26),s('type.closLang.exp',X27))),s(fun('type.integer.int',bool),X28),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X29),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X30),s(fun('type.num.num',bool),X31),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X32),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X33))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f325,f432])).
fof(f28570,plain,(
  ( ! [X14,X12,X21,X19,X17,X15,X13,X22,X20,X18,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.closLang.exp',bool),happ(s(fun('type.num.num',fun('type.closLang.exp',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X21),s('type.option.option'('type.num.num'),X12))),s('type.list.list'('type.closSem.v'),X13))),s('type.list.list'('type.closSem.v'),X14))),s('type.num.num',X15))),s('type.closLang.exp',X16))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X12),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14),s('type.num.num',X15),s('type.closLang.exp',X16))),s(fun('type.integer.int',bool),X17),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X18),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X19),s(fun('type.num.num',bool),X20),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X21),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X22)))) )),
  inference(superposition,[],[f325,f264])).
fof(f28163,plain,(
  ( ! [X187,X188,X186] : (s(bool,happ(s(fun('type.list.list'(X186),bool),sK16(X187,'T_0',X186,bool)),s('type.list.list'(X186),'const.list.CONS_2'(s(X186,X188),s('type.list.list'(X186),'const.list.NIL_0'))))) = s(bool,happ(s(fun('type.list.list'(X186),bool),sK16(X187,sK5('_i_0_0','_i_0_0',bool),X186,bool)),s('type.list.list'(X186),'const.list.CONS_2'(s(X186,X188),s('type.list.list'(X186),'const.list.NIL_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f28096,f19486])).
fof(f28096,plain,(
  ( ! [X187,X188,X186] : (s(bool,happ(s(fun('type.list.list'(X186),bool),sK16(X187,sK5('_i_0_0','_i_0_0',bool),X186,bool)),s('type.list.list'(X186),'const.list.CONS_2'(s(X186,X188),s('type.list.list'(X186),'const.list.NIL_0'))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X186),fun(bool,bool)),happ(s(fun(X186,fun('type.list.list'(X186),fun(bool,bool))),X187),s(X186,X188))),s('type.list.list'(X186),'const.list.NIL_0'))),s(bool,'T_0')))) ) | $spl28),
  inference(superposition,[],[f357,f24543])).
fof(f28162,plain,(
  ( ! [X130,X128,X131,X129] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X130),bool),sK16(X131,happ(s(fun('type.list.list'(X128),bool),sK16(X129,sK5('_i_0_0','_i_0_0',bool),X128,bool)),s('type.list.list'(X128),'const.list.NIL_0')),X130,bool))))) ) | $spl28),
  inference(subsumption_resolution,[],[f28075,f256])).
fof(f28075,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X130),bool),sK16(X131,happ(s(fun('type.list.list'(X128),bool),sK16(X129,sK5('_i_0_0','_i_0_0',bool),X128,bool)),s('type.list.list'(X128),'const.list.NIL_0')),X130,bool))))) ) | $spl28),
  inference(superposition,[],[f3944,f24543])).
fof(f28154,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,X72) = s(bool,happ(s(fun('type.list.list'(X70),bool),sK16(X71,sK5('_i_0_0','_i_0_0',bool),X70,bool)),s('type.list.list'(X70),'const.list.NIL_0'))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl28),
  inference(subsumption_resolution,[],[f28054,f256])).
fof(f28054,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,happ(s(fun('type.list.list'(X70),bool),sK16(X71,sK5('_i_0_0','_i_0_0',bool),X70,bool)),s('type.list.list'(X70),'const.list.NIL_0'))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl28),
  inference(superposition,[],[f1330,f24543])).
fof(f28153,plain,(
  ( ! [X43,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.list.list'(X42),bool),sK16(X43,sK5('_i_0_0','_i_0_0',bool),X42,bool)),s('type.list.list'(X42),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X44)) ) | $spl28),
  inference(subsumption_resolution,[],[f28045,f256])).
fof(f28045,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.list.list'(X42),bool),sK16(X43,sK5('_i_0_0','_i_0_0',bool),X42,bool)),s('type.list.list'(X42),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X44)) ) | $spl28),
  inference(superposition,[],[f434,f24543])).
fof(f28146,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)),s('type.list.list'(X8),'const.min.@_1'(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)))))))) ) | $spl28),
  inference(subsumption_resolution,[],[f28033,f256])).
fof(f28033,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)),s('type.list.list'(X8),'const.min.@_1'(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)))))))) ) | $spl28),
  inference(superposition,[],[f311,f24543])).
fof(f28143,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'(X3),bool),X5),s('type.list.list'(X3),sK6(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3)))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool)),s('type.list.list'(X3),sK5(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3))))))) ) | $spl28),
  inference(subsumption_resolution,[],[f28031,f256])).
fof(f28031,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),X5),s('type.list.list'(X3),sK6(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3)))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool)),s('type.list.list'(X3),sK5(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3))))))) ) | $spl28),
  inference(superposition,[],[f314,f24543])).
fof(f28142,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0)),s('type.list.list'(X0),sK2(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),X2))))) ) | $spl28),
  inference(subsumption_resolution,[],[f28030,f256])).
fof(f28030,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0)),s('type.list.list'(X0),sK2(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),X2))))) ) | $spl28),
  inference(superposition,[],[f305,f24543])).
fof(f27895,plain,(
  ( ! [X1397,X1399,X1400,X1396,X1398,X1401] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1401))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.ind_type.recspace'(X1396),'type.integer.int'),sK7(X1397,X1396,'type.integer.int')),s('type.ind_type.recspace'(X1396),'const.ind_type.CONSTR_3'(s('type.num.num',X1398),s(X1396,X1399),s(fun('type.num.num','type.ind_type.recspace'(X1396)),X1400))))))) | s('type.integer.int',X1401) = s('type.integer.int',happ(s(fun(fun('type.num.num','type.integer.int'),'type.integer.int'),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1396)),fun(fun('type.num.num','type.integer.int'),'type.integer.int')),happ(s(fun(X1396,fun(fun('type.num.num','type.ind_type.recspace'(X1396)),fun(fun('type.num.num','type.integer.int'),'type.integer.int'))),happ(s(fun('type.num.num',fun(X1396,fun(fun('type.num.num','type.ind_type.recspace'(X1396)),fun(fun('type.num.num','type.integer.int'),'type.integer.int')))),X1397),s('type.num.num',X1398))),s(X1396,X1399))),s(fun('type.num.num','type.ind_type.recspace'(X1396)),X1400))),s(fun('type.num.num','type.integer.int'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1396),'type.integer.int'),sK7(X1397,X1396,'type.integer.int')),s(fun('type.num.num','type.ind_type.recspace'(X1396)),X1400)))))) )),
  inference(superposition,[],[f332,f339])).
fof(f27879,plain,(
  ( ! [X1275,X1273,X1271,X1274,X1272,X1270] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1275))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.ind_type.recspace'(X1270),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),sK7(X1271,X1270,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),s('type.ind_type.recspace'(X1270),'const.ind_type.CONSTR_3'(s('type.num.num',X1272),s(X1270,X1273),s(fun('type.num.num','type.ind_type.recspace'(X1270)),X1274))))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1275) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1270)),fun(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),happ(s(fun(X1270,fun(fun('type.num.num','type.ind_type.recspace'(X1270)),fun(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))),happ(s(fun('type.num.num',fun(X1270,fun(fun('type.num.num','type.ind_type.recspace'(X1270)),fun(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))))),X1271),s('type.num.num',X1272))),s(X1270,X1273))),s(fun('type.num.num','type.ind_type.recspace'(X1270)),X1274))),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1270),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),sK7(X1271,X1270,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),s(fun('type.num.num','type.ind_type.recspace'(X1270)),X1274)))))) )),
  inference(superposition,[],[f334,f339])).
fof(f27874,plain,(
  ( ! [X1234,X1232,X1236,X1227,X1231,X1229,X1235,X1233,X1230,X1228] : (s(X1228,happ(s(fun('type.list.list'(X1227),X1228),sK16(happ(s(fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1229)),fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))),happ(s(fun(X1229,fun(fun('type.num.num','type.ind_type.recspace'(X1229)),fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))))),happ(s(fun('type.num.num',fun(X1229,fun(fun('type.num.num','type.ind_type.recspace'(X1229)),fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))))),X1230),s('type.num.num',X1231))),s(X1229,X1232))),s(fun('type.num.num','type.ind_type.recspace'(X1229)),X1233))),s(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1229),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),sK7(X1230,X1229,fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))),s(fun('type.num.num','type.ind_type.recspace'(X1229)),X1233)))),X1234,X1227,X1228)),s('type.list.list'(X1227),'const.list.CONS_2'(s(X1227,X1235),s('type.list.list'(X1227),X1236))))) = s(X1228,happ(s(fun(X1228,X1228),happ(s(fun('type.list.list'(X1227),fun(X1228,X1228)),happ(s(fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))),happ(s(fun('type.ind_type.recspace'(X1229),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),sK7(X1230,X1229,fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))),s('type.ind_type.recspace'(X1229),'const.ind_type.CONSTR_3'(s('type.num.num',X1231),s(X1229,X1232),s(fun('type.num.num','type.ind_type.recspace'(X1229)),X1233))))),s(X1227,X1235))),s('type.list.list'(X1227),X1236))),s(X1228,happ(s(fun('type.list.list'(X1227),X1228),sK16(happ(s(fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1229)),fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))),happ(s(fun(X1229,fun(fun('type.num.num','type.ind_type.recspace'(X1229)),fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))))),happ(s(fun('type.num.num',fun(X1229,fun(fun('type.num.num','type.ind_type.recspace'(X1229)),fun(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))))),X1230),s('type.num.num',X1231))),s(X1229,X1232))),s(fun('type.num.num','type.ind_type.recspace'(X1229)),X1233))),s(fun('type.num.num',fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1229),fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228)))),sK7(X1230,X1229,fun(X1227,fun('type.list.list'(X1227),fun(X1228,X1228))))),s(fun('type.num.num','type.ind_type.recspace'(X1229)),X1233)))),X1234,X1227,X1228)),s('type.list.list'(X1227),X1236)))))) )),
  inference(superposition,[],[f357,f339])).
fof(f27996,plain,(
  ( ! [X1151,X1149,X1153,X1146,X1150,X1148,X1152,X1147] : (s(X1146,sK14(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)) != s(X1146,happ(s(fun(X1147,X1146),X1153),s(X1147,happ(s(fun(X1146,X1147),happ(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s('type.ind_type.recspace'(X1148),'const.ind_type.CONSTR_3'(s('type.num.num',X1150),s(X1148,X1151),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))),s(X1146,sK14(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)))))) | s(X1147,sK15(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)) != s(X1147,happ(s(fun(X1146,X1147),happ(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s('type.ind_type.recspace'(X1148),'const.ind_type.CONSTR_3'(s('type.num.num',X1150),s(X1148,X1151),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))),s(X1146,happ(s(fun(X1147,X1146),X1153),s(X1147,sK15(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1147,X1146),X1153),s(fun(X1146,X1147),happ(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s('type.ind_type.recspace'(X1148),'const.ind_type.CONSTR_3'(s('type.num.num',X1150),s(X1148,X1151),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))))))) )),
  inference(forward_demodulation,[],[f27995,f339])).
fof(f27995,plain,(
  ( ! [X1151,X1149,X1153,X1146,X1150,X1148,X1152,X1147] : (s(X1147,sK15(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)) != s(X1147,happ(s(fun(X1146,X1147),happ(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s('type.ind_type.recspace'(X1148),'const.ind_type.CONSTR_3'(s('type.num.num',X1150),s(X1148,X1151),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))),s(X1146,happ(s(fun(X1147,X1146),X1153),s(X1147,sK15(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1147,X1146),X1153),s(fun(X1146,X1147),happ(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s('type.ind_type.recspace'(X1148),'const.ind_type.CONSTR_3'(s('type.num.num',X1150),s(X1148,X1151),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))))))) | s(X1146,sK14(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)) != s(X1146,happ(s(fun(X1147,X1146),X1153),s(X1147,happ(s(fun(X1146,X1147),happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))),s(X1146,sK14(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146))))))) )),
  inference(forward_demodulation,[],[f27866,f339])).
fof(f27866,plain,(
  ( ! [X1151,X1149,X1153,X1146,X1150,X1148,X1152,X1147] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1147,X1146),X1153),s(fun(X1146,X1147),happ(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s('type.ind_type.recspace'(X1148),'const.ind_type.CONSTR_3'(s('type.num.num',X1150),s(X1148,X1151),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))))))) | s(X1147,sK15(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)) != s(X1147,happ(s(fun(X1146,X1147),happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))),s(X1146,happ(s(fun(X1147,X1146),X1153),s(X1147,sK15(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)))))) | s(X1146,sK14(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146)) != s(X1146,happ(s(fun(X1147,X1146),X1153),s(X1147,happ(s(fun(X1146,X1147),happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))))),s(X1146,sK14(happ(s(fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))),happ(s(fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147)))),happ(s(fun('type.num.num',fun(X1148,fun(fun('type.num.num','type.ind_type.recspace'(X1148)),fun(fun('type.num.num',fun(X1146,X1147)),fun(X1146,X1147))))),X1149),s('type.num.num',X1150))),s(X1148,X1151))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152))),s(fun('type.num.num',fun(X1146,X1147)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1148),fun(X1146,X1147)),sK7(X1149,X1148,fun(X1146,X1147))),s(fun('type.num.num','type.ind_type.recspace'(X1148)),X1152)))),X1153,X1147,X1146))))))) )),
  inference(superposition,[],[f355,f339])).
fof(f27994,plain,(
  ( ! [X1139,X1143,X1141,X1144,X1138,X1142,X1140,X1145] : (s(X1139,sK14(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)) != s(X1139,happ(s(fun(X1138,X1139),happ(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s('type.ind_type.recspace'(X1140),'const.ind_type.CONSTR_3'(s('type.num.num',X1142),s(X1140,X1143),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(X1138,happ(s(fun(X1139,X1138),X1145),s(X1139,sK14(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)))))) | s(X1138,sK15(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)) != s(X1138,happ(s(fun(X1139,X1138),X1145),s(X1139,happ(s(fun(X1138,X1139),happ(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s('type.ind_type.recspace'(X1140),'const.ind_type.CONSTR_3'(s('type.num.num',X1142),s(X1140,X1143),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(X1138,sK15(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1138,X1139),happ(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s('type.ind_type.recspace'(X1140),'const.ind_type.CONSTR_3'(s('type.num.num',X1142),s(X1140,X1143),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(fun(X1139,X1138),X1145))))) )),
  inference(forward_demodulation,[],[f27993,f339])).
fof(f27993,plain,(
  ( ! [X1139,X1143,X1141,X1144,X1138,X1142,X1140,X1145] : (s(X1138,sK15(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)) != s(X1138,happ(s(fun(X1139,X1138),X1145),s(X1139,happ(s(fun(X1138,X1139),happ(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s('type.ind_type.recspace'(X1140),'const.ind_type.CONSTR_3'(s('type.num.num',X1142),s(X1140,X1143),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(X1138,sK15(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1138,X1139),happ(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s('type.ind_type.recspace'(X1140),'const.ind_type.CONSTR_3'(s('type.num.num',X1142),s(X1140,X1143),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(fun(X1139,X1138),X1145)))) | s(X1139,sK14(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)) != s(X1139,happ(s(fun(X1138,X1139),happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(X1138,happ(s(fun(X1139,X1138),X1145),s(X1139,sK14(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139))))))) )),
  inference(forward_demodulation,[],[f27865,f339])).
fof(f27865,plain,(
  ( ! [X1139,X1143,X1141,X1144,X1138,X1142,X1140,X1145] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1138,X1139),happ(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s('type.ind_type.recspace'(X1140),'const.ind_type.CONSTR_3'(s('type.num.num',X1142),s(X1140,X1143),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(fun(X1139,X1138),X1145)))) | s(X1138,sK15(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)) != s(X1138,happ(s(fun(X1139,X1138),X1145),s(X1139,happ(s(fun(X1138,X1139),happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(X1138,sK15(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)))))) | s(X1139,sK14(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139)) != s(X1139,happ(s(fun(X1138,X1139),happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))))),s(X1138,happ(s(fun(X1139,X1138),X1145),s(X1139,sK14(X1145,happ(s(fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))),happ(s(fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139)))),happ(s(fun('type.num.num',fun(X1140,fun(fun('type.num.num','type.ind_type.recspace'(X1140)),fun(fun('type.num.num',fun(X1138,X1139)),fun(X1138,X1139))))),X1141),s('type.num.num',X1142))),s(X1140,X1143))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144))),s(fun('type.num.num',fun(X1138,X1139)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1140),fun(X1138,X1139)),sK7(X1141,X1140,fun(X1138,X1139))),s(fun('type.num.num','type.ind_type.recspace'(X1140)),X1144)))),X1138,X1139))))))) )),
  inference(superposition,[],[f355,f339])).
fof(f27988,plain,(
  ( ! [X1099,X1097,X1101,X1095,X1098,X1096,X1100,X1094] : (s(fun(X1094,X1095),X1101) = s(fun(X1094,X1095),happ(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s('type.ind_type.recspace'(X1096),'const.ind_type.CONSTR_3'(s('type.num.num',X1098),s(X1096,X1099),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))))) | s(X1095,happ(s(fun(X1094,X1095),X1101),s(X1094,sK13(happ(s(fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))),happ(s(fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)))),happ(s(fun('type.num.num',fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))))),X1097),s('type.num.num',X1098))),s(X1096,X1099))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))),s(fun('type.num.num',fun(X1094,X1095)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100)))),X1101,X1094,X1095)))) != s(X1095,happ(s(fun(X1094,X1095),happ(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s('type.ind_type.recspace'(X1096),'const.ind_type.CONSTR_3'(s('type.num.num',X1098),s(X1096,X1099),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))))),s(X1094,sK13(happ(s(fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))),happ(s(fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)))),happ(s(fun('type.num.num',fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))))),X1097),s('type.num.num',X1098))),s(X1096,X1099))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))),s(fun('type.num.num',fun(X1094,X1095)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100)))),X1101,X1094,X1095))))) )),
  inference(forward_demodulation,[],[f27860,f339])).
fof(f27860,plain,(
  ( ! [X1099,X1097,X1101,X1095,X1098,X1096,X1100,X1094] : (s(X1095,happ(s(fun(X1094,X1095),X1101),s(X1094,sK13(happ(s(fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))),happ(s(fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)))),happ(s(fun('type.num.num',fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))))),X1097),s('type.num.num',X1098))),s(X1096,X1099))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))),s(fun('type.num.num',fun(X1094,X1095)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100)))),X1101,X1094,X1095)))) != s(X1095,happ(s(fun(X1094,X1095),happ(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s('type.ind_type.recspace'(X1096),'const.ind_type.CONSTR_3'(s('type.num.num',X1098),s(X1096,X1099),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))))),s(X1094,sK13(happ(s(fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))),happ(s(fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)))),happ(s(fun('type.num.num',fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))))),X1097),s('type.num.num',X1098))),s(X1096,X1099))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))),s(fun('type.num.num',fun(X1094,X1095)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100)))),X1101,X1094,X1095)))) | s(fun(X1094,X1095),X1101) = s(fun(X1094,X1095),happ(s(fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))),happ(s(fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095)))),happ(s(fun('type.num.num',fun(X1096,fun(fun('type.num.num','type.ind_type.recspace'(X1096)),fun(fun('type.num.num',fun(X1094,X1095)),fun(X1094,X1095))))),X1097),s('type.num.num',X1098))),s(X1096,X1099))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100))),s(fun('type.num.num',fun(X1094,X1095)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1096),fun(X1094,X1095)),sK7(X1097,X1096,fun(X1094,X1095))),s(fun('type.num.num','type.ind_type.recspace'(X1096)),X1100)))))) )),
  inference(superposition,[],[f352,f339])).
fof(f27987,plain,(
  ( ! [X1087,X1091,X1089,X1093,X1086,X1090,X1088,X1092] : (s(fun(X1086,X1087),X1093) = s(fun(X1086,X1087),happ(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s('type.ind_type.recspace'(X1088),'const.ind_type.CONSTR_3'(s('type.num.num',X1090),s(X1088,X1091),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))))) | s(X1087,happ(s(fun(X1086,X1087),X1093),s(X1086,sK13(X1093,happ(s(fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))),happ(s(fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)))),happ(s(fun('type.num.num',fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))))),X1089),s('type.num.num',X1090))),s(X1088,X1091))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))),s(fun('type.num.num',fun(X1086,X1087)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092)))),X1086,X1087)))) != s(X1087,happ(s(fun(X1086,X1087),happ(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s('type.ind_type.recspace'(X1088),'const.ind_type.CONSTR_3'(s('type.num.num',X1090),s(X1088,X1091),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))))),s(X1086,sK13(X1093,happ(s(fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))),happ(s(fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)))),happ(s(fun('type.num.num',fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))))),X1089),s('type.num.num',X1090))),s(X1088,X1091))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))),s(fun('type.num.num',fun(X1086,X1087)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092)))),X1086,X1087))))) )),
  inference(forward_demodulation,[],[f27859,f339])).
fof(f27859,plain,(
  ( ! [X1087,X1091,X1089,X1093,X1086,X1090,X1088,X1092] : (s(X1087,happ(s(fun(X1086,X1087),X1093),s(X1086,sK13(X1093,happ(s(fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))),happ(s(fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)))),happ(s(fun('type.num.num',fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))))),X1089),s('type.num.num',X1090))),s(X1088,X1091))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))),s(fun('type.num.num',fun(X1086,X1087)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092)))),X1086,X1087)))) != s(X1087,happ(s(fun(X1086,X1087),happ(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s('type.ind_type.recspace'(X1088),'const.ind_type.CONSTR_3'(s('type.num.num',X1090),s(X1088,X1091),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))))),s(X1086,sK13(X1093,happ(s(fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))),happ(s(fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)))),happ(s(fun('type.num.num',fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))))),X1089),s('type.num.num',X1090))),s(X1088,X1091))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))),s(fun('type.num.num',fun(X1086,X1087)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092)))),X1086,X1087)))) | s(fun(X1086,X1087),X1093) = s(fun(X1086,X1087),happ(s(fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))),happ(s(fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087)))),happ(s(fun('type.num.num',fun(X1088,fun(fun('type.num.num','type.ind_type.recspace'(X1088)),fun(fun('type.num.num',fun(X1086,X1087)),fun(X1086,X1087))))),X1089),s('type.num.num',X1090))),s(X1088,X1091))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092))),s(fun('type.num.num',fun(X1086,X1087)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1088),fun(X1086,X1087)),sK7(X1089,X1088,fun(X1086,X1087))),s(fun('type.num.num','type.ind_type.recspace'(X1088)),X1092)))))) )),
  inference(superposition,[],[f352,f339])).
fof(f27852,plain,(
  ( ! [X1019,X1023,X1021,X1027,X1025,X1018,X1022,X1020,X1026,X1024] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1018,X1019),happ(s(fun('type.ind_type.recspace'(X1020),fun(X1018,X1019)),sK7(X1021,X1020,fun(X1018,X1019))),s('type.ind_type.recspace'(X1020),'const.ind_type.CONSTR_3'(s('type.num.num',X1022),s(X1020,X1023),s(fun('type.num.num','type.ind_type.recspace'(X1020)),X1024))))),s(fun(X1019,X1018),X1025)))) | ~p(s(bool,happ(s(fun(X1018,bool),X1026),s(X1018,happ(s(fun(X1019,X1018),X1025),s(X1019,X1027)))))) | p(s(bool,happ(s(fun(X1018,bool),X1026),s(X1018,sK11(X1026,happ(s(fun(fun('type.num.num',fun(X1018,X1019)),fun(X1018,X1019)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1020)),fun(fun('type.num.num',fun(X1018,X1019)),fun(X1018,X1019))),happ(s(fun(X1020,fun(fun('type.num.num','type.ind_type.recspace'(X1020)),fun(fun('type.num.num',fun(X1018,X1019)),fun(X1018,X1019)))),happ(s(fun('type.num.num',fun(X1020,fun(fun('type.num.num','type.ind_type.recspace'(X1020)),fun(fun('type.num.num',fun(X1018,X1019)),fun(X1018,X1019))))),X1021),s('type.num.num',X1022))),s(X1020,X1023))),s(fun('type.num.num','type.ind_type.recspace'(X1020)),X1024))),s(fun('type.num.num',fun(X1018,X1019)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1020),fun(X1018,X1019)),sK7(X1021,X1020,fun(X1018,X1019))),s(fun('type.num.num','type.ind_type.recspace'(X1020)),X1024)))),X1025,X1019,X1018)))))) )),
  inference(superposition,[],[f347,f339])).
fof(f27980,plain,(
  ( ! [X1017,X1011,X1009,X1015,X1013,X1016,X1010,X1008,X1014,X1012] : (~p(s(bool,happ(s(fun(X1009,bool),X1016),s(X1009,happ(s(fun(X1008,X1009),happ(s(fun('type.ind_type.recspace'(X1010),fun(X1008,X1009)),sK7(X1011,X1010,fun(X1008,X1009))),s('type.ind_type.recspace'(X1010),'const.ind_type.CONSTR_3'(s('type.num.num',X1012),s(X1010,X1013),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014))))),s(X1008,X1017)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1009,X1008),X1015),s(fun(X1008,X1009),happ(s(fun('type.ind_type.recspace'(X1010),fun(X1008,X1009)),sK7(X1011,X1010,fun(X1008,X1009))),s('type.ind_type.recspace'(X1010),'const.ind_type.CONSTR_3'(s('type.num.num',X1012),s(X1010,X1013),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014)))))))) | p(s(bool,happ(s(fun(X1009,bool),X1016),s(X1009,sK11(X1016,X1015,happ(s(fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009))),happ(s(fun(X1010,fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009)))),happ(s(fun('type.num.num',fun(X1010,fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009))))),X1011),s('type.num.num',X1012))),s(X1010,X1013))),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014))),s(fun('type.num.num',fun(X1008,X1009)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1010),fun(X1008,X1009)),sK7(X1011,X1010,fun(X1008,X1009))),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014)))),X1008,X1009)))))) )),
  inference(forward_demodulation,[],[f27851,f339])).
fof(f27851,plain,(
  ( ! [X1017,X1011,X1009,X1015,X1013,X1016,X1010,X1008,X1014,X1012] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1009,X1008),X1015),s(fun(X1008,X1009),happ(s(fun('type.ind_type.recspace'(X1010),fun(X1008,X1009)),sK7(X1011,X1010,fun(X1008,X1009))),s('type.ind_type.recspace'(X1010),'const.ind_type.CONSTR_3'(s('type.num.num',X1012),s(X1010,X1013),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014)))))))) | ~p(s(bool,happ(s(fun(X1009,bool),X1016),s(X1009,happ(s(fun(X1008,X1009),happ(s(fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009))),happ(s(fun(X1010,fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009)))),happ(s(fun('type.num.num',fun(X1010,fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009))))),X1011),s('type.num.num',X1012))),s(X1010,X1013))),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014))),s(fun('type.num.num',fun(X1008,X1009)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1010),fun(X1008,X1009)),sK7(X1011,X1010,fun(X1008,X1009))),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014))))),s(X1008,X1017)))))) | p(s(bool,happ(s(fun(X1009,bool),X1016),s(X1009,sK11(X1016,X1015,happ(s(fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009))),happ(s(fun(X1010,fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009)))),happ(s(fun('type.num.num',fun(X1010,fun(fun('type.num.num','type.ind_type.recspace'(X1010)),fun(fun('type.num.num',fun(X1008,X1009)),fun(X1008,X1009))))),X1011),s('type.num.num',X1012))),s(X1010,X1013))),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014))),s(fun('type.num.num',fun(X1008,X1009)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1010),fun(X1008,X1009)),sK7(X1011,X1010,fun(X1008,X1009))),s(fun('type.num.num','type.ind_type.recspace'(X1010)),X1014)))),X1008,X1009)))))) )),
  inference(superposition,[],[f347,f339])).
fof(f27850,plain,(
  ( ! [X1002,X1000,X1006,X1004,X998,X1003,X1001,X1007,X1005,X999] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X998,X999),happ(s(fun('type.ind_type.recspace'(X1000),fun(X998,X999)),sK7(X1001,X1000,fun(X998,X999))),s('type.ind_type.recspace'(X1000),'const.ind_type.CONSTR_3'(s('type.num.num',X1002),s(X1000,X1003),s(fun('type.num.num','type.ind_type.recspace'(X1000)),X1004))))),s(fun(X999,X998),X1005)))) | ~p(s(bool,happ(s(fun(X998,bool),X1006),s(X998,X1007)))) | p(s(bool,happ(s(fun(X998,bool),X1006),s(X998,happ(s(fun(X999,X998),X1005),s(X999,sK10(X1006,happ(s(fun(fun('type.num.num',fun(X998,X999)),fun(X998,X999)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1000)),fun(fun('type.num.num',fun(X998,X999)),fun(X998,X999))),happ(s(fun(X1000,fun(fun('type.num.num','type.ind_type.recspace'(X1000)),fun(fun('type.num.num',fun(X998,X999)),fun(X998,X999)))),happ(s(fun('type.num.num',fun(X1000,fun(fun('type.num.num','type.ind_type.recspace'(X1000)),fun(fun('type.num.num',fun(X998,X999)),fun(X998,X999))))),X1001),s('type.num.num',X1002))),s(X1000,X1003))),s(fun('type.num.num','type.ind_type.recspace'(X1000)),X1004))),s(fun('type.num.num',fun(X998,X999)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1000),fun(X998,X999)),sK7(X1001,X1000,fun(X998,X999))),s(fun('type.num.num','type.ind_type.recspace'(X1000)),X1004)))),X1005,X999,X998)))))))) )),
  inference(superposition,[],[f346,f339])).
fof(f27979,plain,(
  ( ! [X990,X988,X994,X992,X996,X991,X989,X995,X993,X997] : (p(s(bool,happ(s(fun(X989,bool),X996),s(X989,happ(s(fun(X988,X989),happ(s(fun('type.ind_type.recspace'(X990),fun(X988,X989)),sK7(X991,X990,fun(X988,X989))),s('type.ind_type.recspace'(X990),'const.ind_type.CONSTR_3'(s('type.num.num',X992),s(X990,X993),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994))))),s(X988,sK10(X996,X995,happ(s(fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989))),happ(s(fun(X990,fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989)))),happ(s(fun('type.num.num',fun(X990,fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989))))),X991),s('type.num.num',X992))),s(X990,X993))),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994))),s(fun('type.num.num',fun(X988,X989)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X990),fun(X988,X989)),sK7(X991,X990,fun(X988,X989))),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994)))),X988,X989))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X989,X988),X995),s(fun(X988,X989),happ(s(fun('type.ind_type.recspace'(X990),fun(X988,X989)),sK7(X991,X990,fun(X988,X989))),s('type.ind_type.recspace'(X990),'const.ind_type.CONSTR_3'(s('type.num.num',X992),s(X990,X993),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994)))))))) | ~p(s(bool,happ(s(fun(X989,bool),X996),s(X989,X997))))) )),
  inference(forward_demodulation,[],[f27849,f339])).
fof(f27849,plain,(
  ( ! [X990,X988,X994,X992,X996,X991,X989,X995,X993,X997] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X989,X988),X995),s(fun(X988,X989),happ(s(fun('type.ind_type.recspace'(X990),fun(X988,X989)),sK7(X991,X990,fun(X988,X989))),s('type.ind_type.recspace'(X990),'const.ind_type.CONSTR_3'(s('type.num.num',X992),s(X990,X993),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994)))))))) | ~p(s(bool,happ(s(fun(X989,bool),X996),s(X989,X997)))) | p(s(bool,happ(s(fun(X989,bool),X996),s(X989,happ(s(fun(X988,X989),happ(s(fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989))),happ(s(fun(X990,fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989)))),happ(s(fun('type.num.num',fun(X990,fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989))))),X991),s('type.num.num',X992))),s(X990,X993))),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994))),s(fun('type.num.num',fun(X988,X989)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X990),fun(X988,X989)),sK7(X991,X990,fun(X988,X989))),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994))))),s(X988,sK10(X996,X995,happ(s(fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989))),happ(s(fun(X990,fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989)))),happ(s(fun('type.num.num',fun(X990,fun(fun('type.num.num','type.ind_type.recspace'(X990)),fun(fun('type.num.num',fun(X988,X989)),fun(X988,X989))))),X991),s('type.num.num',X992))),s(X990,X993))),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994))),s(fun('type.num.num',fun(X988,X989)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X990),fun(X988,X989)),sK7(X991,X990,fun(X988,X989))),s(fun('type.num.num','type.ind_type.recspace'(X990)),X994)))),X988,X989)))))))) )),
  inference(superposition,[],[f346,f339])).
fof(f27848,plain,(
  ( ! [X984,X978,X982,X980,X987,X985,X979,X983,X981,X986] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X978,X979),happ(s(fun('type.ind_type.recspace'(X980),fun(X978,X979)),sK7(X981,X980,fun(X978,X979))),s('type.ind_type.recspace'(X980),'const.ind_type.CONSTR_3'(s('type.num.num',X982),s(X980,X983),s(fun('type.num.num','type.ind_type.recspace'(X980)),X984))))),s(fun(X979,X978),X985)))) | ~p(s(bool,happ(s(fun(X978,bool),X986),s(X978,happ(s(fun(X979,X978),X985),s(X979,sK9(X986,happ(s(fun(fun('type.num.num',fun(X978,X979)),fun(X978,X979)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X980)),fun(fun('type.num.num',fun(X978,X979)),fun(X978,X979))),happ(s(fun(X980,fun(fun('type.num.num','type.ind_type.recspace'(X980)),fun(fun('type.num.num',fun(X978,X979)),fun(X978,X979)))),happ(s(fun('type.num.num',fun(X980,fun(fun('type.num.num','type.ind_type.recspace'(X980)),fun(fun('type.num.num',fun(X978,X979)),fun(X978,X979))))),X981),s('type.num.num',X982))),s(X980,X983))),s(fun('type.num.num','type.ind_type.recspace'(X980)),X984))),s(fun('type.num.num',fun(X978,X979)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X980),fun(X978,X979)),sK7(X981,X980,fun(X978,X979))),s(fun('type.num.num','type.ind_type.recspace'(X980)),X984)))),X985,X979,X978))))))) | p(s(bool,happ(s(fun(X978,bool),X986),s(X978,X987))))) )),
  inference(superposition,[],[f345,f339])).
fof(f27978,plain,(
  ( ! [X976,X971,X969,X975,X973,X977,X970,X968,X974,X972] : (~p(s(bool,happ(s(fun(X969,bool),X976),s(X969,happ(s(fun(X968,X969),happ(s(fun('type.ind_type.recspace'(X970),fun(X968,X969)),sK7(X971,X970,fun(X968,X969))),s('type.ind_type.recspace'(X970),'const.ind_type.CONSTR_3'(s('type.num.num',X972),s(X970,X973),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974))))),s(X968,sK9(X976,X975,happ(s(fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969))),happ(s(fun(X970,fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969)))),happ(s(fun('type.num.num',fun(X970,fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969))))),X971),s('type.num.num',X972))),s(X970,X973))),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974))),s(fun('type.num.num',fun(X968,X969)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X970),fun(X968,X969)),sK7(X971,X970,fun(X968,X969))),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974)))),X968,X969))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X969,X968),X975),s(fun(X968,X969),happ(s(fun('type.ind_type.recspace'(X970),fun(X968,X969)),sK7(X971,X970,fun(X968,X969))),s('type.ind_type.recspace'(X970),'const.ind_type.CONSTR_3'(s('type.num.num',X972),s(X970,X973),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974)))))))) | p(s(bool,happ(s(fun(X969,bool),X976),s(X969,X977))))) )),
  inference(forward_demodulation,[],[f27847,f339])).
fof(f27847,plain,(
  ( ! [X976,X971,X969,X975,X973,X977,X970,X968,X974,X972] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X969,X968),X975),s(fun(X968,X969),happ(s(fun('type.ind_type.recspace'(X970),fun(X968,X969)),sK7(X971,X970,fun(X968,X969))),s('type.ind_type.recspace'(X970),'const.ind_type.CONSTR_3'(s('type.num.num',X972),s(X970,X973),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974)))))))) | ~p(s(bool,happ(s(fun(X969,bool),X976),s(X969,happ(s(fun(X968,X969),happ(s(fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969))),happ(s(fun(X970,fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969)))),happ(s(fun('type.num.num',fun(X970,fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969))))),X971),s('type.num.num',X972))),s(X970,X973))),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974))),s(fun('type.num.num',fun(X968,X969)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X970),fun(X968,X969)),sK7(X971,X970,fun(X968,X969))),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974))))),s(X968,sK9(X976,X975,happ(s(fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969))),happ(s(fun(X970,fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969)))),happ(s(fun('type.num.num',fun(X970,fun(fun('type.num.num','type.ind_type.recspace'(X970)),fun(fun('type.num.num',fun(X968,X969)),fun(X968,X969))))),X971),s('type.num.num',X972))),s(X970,X973))),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974))),s(fun('type.num.num',fun(X968,X969)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X970),fun(X968,X969)),sK7(X971,X970,fun(X968,X969))),s(fun('type.num.num','type.ind_type.recspace'(X970)),X974)))),X968,X969))))))) | p(s(bool,happ(s(fun(X969,bool),X976),s(X969,X977))))) )),
  inference(superposition,[],[f345,f339])).
fof(f27846,plain,(
  ( ! [X963,X961,X967,X958,X965,X962,X960,X966,X964,X959] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X958,X959),happ(s(fun('type.ind_type.recspace'(X960),fun(X958,X959)),sK7(X961,X960,fun(X958,X959))),s('type.ind_type.recspace'(X960),'const.ind_type.CONSTR_3'(s('type.num.num',X962),s(X960,X963),s(fun('type.num.num','type.ind_type.recspace'(X960)),X964))))),s(fun(X959,X958),X965)))) | ~p(s(bool,happ(s(fun(X958,bool),X966),s(X958,sK8(X966,happ(s(fun(fun('type.num.num',fun(X958,X959)),fun(X958,X959)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X960)),fun(fun('type.num.num',fun(X958,X959)),fun(X958,X959))),happ(s(fun(X960,fun(fun('type.num.num','type.ind_type.recspace'(X960)),fun(fun('type.num.num',fun(X958,X959)),fun(X958,X959)))),happ(s(fun('type.num.num',fun(X960,fun(fun('type.num.num','type.ind_type.recspace'(X960)),fun(fun('type.num.num',fun(X958,X959)),fun(X958,X959))))),X961),s('type.num.num',X962))),s(X960,X963))),s(fun('type.num.num','type.ind_type.recspace'(X960)),X964))),s(fun('type.num.num',fun(X958,X959)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X960),fun(X958,X959)),sK7(X961,X960,fun(X958,X959))),s(fun('type.num.num','type.ind_type.recspace'(X960)),X964)))),X965,X959,X958))))) | p(s(bool,happ(s(fun(X958,bool),X966),s(X958,happ(s(fun(X959,X958),X965),s(X959,X967))))))) )),
  inference(superposition,[],[f344,f339])).
fof(f27977,plain,(
  ( ! [X957,X951,X949,X954,X952,X956,X950,X948,X955,X953] : (p(s(bool,happ(s(fun(X949,bool),X956),s(X949,happ(s(fun(X948,X949),happ(s(fun('type.ind_type.recspace'(X950),fun(X948,X949)),sK7(X951,X950,fun(X948,X949))),s('type.ind_type.recspace'(X950),'const.ind_type.CONSTR_3'(s('type.num.num',X952),s(X950,X953),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954))))),s(X948,X957)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X949,X948),X955),s(fun(X948,X949),happ(s(fun('type.ind_type.recspace'(X950),fun(X948,X949)),sK7(X951,X950,fun(X948,X949))),s('type.ind_type.recspace'(X950),'const.ind_type.CONSTR_3'(s('type.num.num',X952),s(X950,X953),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954)))))))) | ~p(s(bool,happ(s(fun(X949,bool),X956),s(X949,sK8(X956,X955,happ(s(fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949))),happ(s(fun(X950,fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949)))),happ(s(fun('type.num.num',fun(X950,fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949))))),X951),s('type.num.num',X952))),s(X950,X953))),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954))),s(fun('type.num.num',fun(X948,X949)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X950),fun(X948,X949)),sK7(X951,X950,fun(X948,X949))),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954)))),X948,X949)))))) )),
  inference(forward_demodulation,[],[f27845,f339])).
fof(f27845,plain,(
  ( ! [X957,X951,X949,X954,X952,X956,X950,X948,X955,X953] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X949,X948),X955),s(fun(X948,X949),happ(s(fun('type.ind_type.recspace'(X950),fun(X948,X949)),sK7(X951,X950,fun(X948,X949))),s('type.ind_type.recspace'(X950),'const.ind_type.CONSTR_3'(s('type.num.num',X952),s(X950,X953),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954)))))))) | ~p(s(bool,happ(s(fun(X949,bool),X956),s(X949,sK8(X956,X955,happ(s(fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949))),happ(s(fun(X950,fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949)))),happ(s(fun('type.num.num',fun(X950,fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949))))),X951),s('type.num.num',X952))),s(X950,X953))),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954))),s(fun('type.num.num',fun(X948,X949)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X950),fun(X948,X949)),sK7(X951,X950,fun(X948,X949))),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954)))),X948,X949))))) | p(s(bool,happ(s(fun(X949,bool),X956),s(X949,happ(s(fun(X948,X949),happ(s(fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949))),happ(s(fun(X950,fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949)))),happ(s(fun('type.num.num',fun(X950,fun(fun('type.num.num','type.ind_type.recspace'(X950)),fun(fun('type.num.num',fun(X948,X949)),fun(X948,X949))))),X951),s('type.num.num',X952))),s(X950,X953))),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954))),s(fun('type.num.num',fun(X948,X949)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X950),fun(X948,X949)),sK7(X951,X950,fun(X948,X949))),s(fun('type.num.num','type.ind_type.recspace'(X950)),X954))))),s(X948,X957))))))) )),
  inference(superposition,[],[f344,f339])).
fof(f27976,plain,(
  ( ! [X848,X847,X845,X849,X846,X844] : (~p(s(bool,happ(s(fun('type.list.list'(X844),bool),happ(s(fun('type.ind_type.recspace'(X845),fun('type.list.list'(X844),bool)),sK7(X846,X845,fun('type.list.list'(X844),bool))),s('type.ind_type.recspace'(X845),'const.ind_type.CONSTR_3'(s('type.num.num',X847),s(X845,X848),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))))),s('type.list.list'(X844),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X844),bool),happ(s(fun('type.ind_type.recspace'(X845),fun('type.list.list'(X844),bool)),sK7(X846,X845,fun('type.list.list'(X844),bool))),s('type.ind_type.recspace'(X845),'const.ind_type.CONSTR_3'(s('type.num.num',X847),s(X845,X848),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))))),s('type.list.list'(X844),sK2(happ(s(fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool))),happ(s(fun(X845,fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool)))),happ(s(fun('type.num.num',fun(X845,fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool))))),X846),s('type.num.num',X847))),s(X845,X848))),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))),s(fun('type.num.num',fun('type.list.list'(X844),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X845),fun('type.list.list'(X844),bool)),sK7(X846,X845,fun('type.list.list'(X844),bool))),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849)))),X844)))))) )),
  inference(forward_demodulation,[],[f27836,f339])).
fof(f27836,plain,(
  ( ! [X848,X847,X845,X849,X846,X844] : (p(s(bool,happ(s(fun('type.list.list'(X844),bool),happ(s(fun('type.ind_type.recspace'(X845),fun('type.list.list'(X844),bool)),sK7(X846,X845,fun('type.list.list'(X844),bool))),s('type.ind_type.recspace'(X845),'const.ind_type.CONSTR_3'(s('type.num.num',X847),s(X845,X848),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))))),s('type.list.list'(X844),sK2(happ(s(fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool))),happ(s(fun(X845,fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool)))),happ(s(fun('type.num.num',fun(X845,fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool))))),X846),s('type.num.num',X847))),s(X845,X848))),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))),s(fun('type.num.num',fun('type.list.list'(X844),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X845),fun('type.list.list'(X844),bool)),sK7(X846,X845,fun('type.list.list'(X844),bool))),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849)))),X844))))) | ~p(s(bool,happ(s(fun('type.list.list'(X844),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool))),happ(s(fun(X845,fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool)))),happ(s(fun('type.num.num',fun(X845,fun(fun('type.num.num','type.ind_type.recspace'(X845)),fun(fun('type.num.num',fun('type.list.list'(X844),bool)),fun('type.list.list'(X844),bool))))),X846),s('type.num.num',X847))),s(X845,X848))),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))),s(fun('type.num.num',fun('type.list.list'(X844),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X845),fun('type.list.list'(X844),bool)),sK7(X846,X845,fun('type.list.list'(X844),bool))),s(fun('type.num.num','type.ind_type.recspace'(X845)),X849))))),s('type.list.list'(X844),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f339])).
fof(f27975,plain,(
  ( ! [X843,X841,X839,X837,X842,X840,X838] : (p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s('type.ind_type.recspace'(X838),'const.ind_type.CONSTR_3'(s('type.num.num',X840),s(X838,X841),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),X843)))) | ~p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s('type.ind_type.recspace'(X838),'const.ind_type.CONSTR_3'(s('type.num.num',X840),s(X838,X841),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),'const.list.CONS_2'(s(X837,sK3(happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842)))),X837)),s('type.list.list'(X837),sK2(happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842)))),X837))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s('type.ind_type.recspace'(X838),'const.ind_type.CONSTR_3'(s('type.num.num',X840),s(X838,X841),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f27974,f339])).
fof(f27974,plain,(
  ( ! [X843,X841,X839,X837,X842,X840,X838] : (~p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s('type.ind_type.recspace'(X838),'const.ind_type.CONSTR_3'(s('type.num.num',X840),s(X838,X841),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),'const.list.CONS_2'(s(X837,sK3(happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842)))),X837)),s('type.list.list'(X837),sK2(happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842)))),X837))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s('type.ind_type.recspace'(X838),'const.ind_type.CONSTR_3'(s('type.num.num',X840),s(X838,X841),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),X843))))) )),
  inference(forward_demodulation,[],[f27835,f339])).
fof(f27835,plain,(
  ( ! [X843,X841,X839,X837,X842,X840,X838] : (~p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s('type.ind_type.recspace'(X838),'const.ind_type.CONSTR_3'(s('type.num.num',X840),s(X838,X841),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),'const.list.CONS_2'(s(X837,sK3(happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842)))),X837)),s('type.list.list'(X837),sK2(happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842)))),X837))))))) | p(s(bool,happ(s(fun('type.list.list'(X837),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))),happ(s(fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool)))),happ(s(fun('type.num.num',fun(X838,fun(fun('type.num.num','type.ind_type.recspace'(X838)),fun(fun('type.num.num',fun('type.list.list'(X837),bool)),fun('type.list.list'(X837),bool))))),X839),s('type.num.num',X840))),s(X838,X841))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))),s(fun('type.num.num',fun('type.list.list'(X837),bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X838),fun('type.list.list'(X837),bool)),sK7(X839,X838,fun('type.list.list'(X837),bool))),s(fun('type.num.num','type.ind_type.recspace'(X838)),X842))))),s('type.list.list'(X837),X843))))) )),
  inference(superposition,[],[f305,f339])).
fof(f27812,plain,(
  ( ! [X592,X594,X590,X593,X595,X589,X591] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X589,bool),happ(s(fun('type.ind_type.recspace'(X590),fun(X589,bool)),sK7(X591,X590,fun(X589,bool))),s('type.ind_type.recspace'(X590),'const.ind_type.CONSTR_3'(s('type.num.num',X592),s(X590,X593),s(fun('type.num.num','type.ind_type.recspace'(X590)),X594))))))) | s(X589,X595) = s(X589,sK4(X595,happ(s(fun(fun('type.num.num',fun(X589,bool)),fun(X589,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X590)),fun(fun('type.num.num',fun(X589,bool)),fun(X589,bool))),happ(s(fun(X590,fun(fun('type.num.num','type.ind_type.recspace'(X590)),fun(fun('type.num.num',fun(X589,bool)),fun(X589,bool)))),happ(s(fun('type.num.num',fun(X590,fun(fun('type.num.num','type.ind_type.recspace'(X590)),fun(fun('type.num.num',fun(X589,bool)),fun(X589,bool))))),X591),s('type.num.num',X592))),s(X590,X593))),s(fun('type.num.num','type.ind_type.recspace'(X590)),X594))),s(fun('type.num.num',fun(X589,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X590),fun(X589,bool)),sK7(X591,X590,fun(X589,bool))),s(fun('type.num.num','type.ind_type.recspace'(X590)),X594)))),X589))) )),
  inference(superposition,[],[f823,f339])).
fof(f27971,plain,(
  ( ! [X588,X584,X586,X582,X585,X587,X581,X583] : (p(s(bool,happ(s(fun(X581,bool),happ(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s('type.ind_type.recspace'(X582),'const.ind_type.CONSTR_3'(s('type.num.num',X584),s(X582,X585),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))))),s(X581,sK6(X587,happ(s(fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))),happ(s(fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)))),happ(s(fun('type.num.num',fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))))),X583),s('type.num.num',X584))),s(X582,X585))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))),s(fun('type.num.num',fun(X581,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586)))),X581))))) | ~p(s(bool,happ(s(fun(X581,bool),happ(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s('type.ind_type.recspace'(X582),'const.ind_type.CONSTR_3'(s('type.num.num',X584),s(X582,X585),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))))),s(X581,sK5(X587,happ(s(fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))),happ(s(fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)))),happ(s(fun('type.num.num',fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))))),X583),s('type.num.num',X584))),s(X582,X585))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))),s(fun('type.num.num',fun(X581,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586)))),X581))))) | ~p(s(bool,happ(s(fun(X581,bool),X587),s(X581,X588))))) )),
  inference(forward_demodulation,[],[f27811,f339])).
fof(f27811,plain,(
  ( ! [X588,X584,X586,X582,X585,X587,X581,X583] : (~p(s(bool,happ(s(fun(X581,bool),happ(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s('type.ind_type.recspace'(X582),'const.ind_type.CONSTR_3'(s('type.num.num',X584),s(X582,X585),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))))),s(X581,sK5(X587,happ(s(fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))),happ(s(fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)))),happ(s(fun('type.num.num',fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))))),X583),s('type.num.num',X584))),s(X582,X585))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))),s(fun('type.num.num',fun(X581,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586)))),X581))))) | ~p(s(bool,happ(s(fun(X581,bool),X587),s(X581,X588)))) | p(s(bool,happ(s(fun(X581,bool),happ(s(fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))),happ(s(fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)))),happ(s(fun('type.num.num',fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))))),X583),s('type.num.num',X584))),s(X582,X585))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))),s(fun('type.num.num',fun(X581,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))))),s(X581,sK6(X587,happ(s(fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))),happ(s(fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool)))),happ(s(fun('type.num.num',fun(X582,fun(fun('type.num.num','type.ind_type.recspace'(X582)),fun(fun('type.num.num',fun(X581,bool)),fun(X581,bool))))),X583),s('type.num.num',X584))),s(X582,X585))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586))),s(fun('type.num.num',fun(X581,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X582),fun(X581,bool)),sK7(X583,X582,fun(X581,bool))),s(fun('type.num.num','type.ind_type.recspace'(X582)),X586)))),X581)))))) )),
  inference(superposition,[],[f315,f339])).
fof(f27970,plain,(
  ( ! [X573,X575,X580,X576,X578,X574,X577,X579] : (p(s(bool,happ(s(fun(X573,bool),happ(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s('type.ind_type.recspace'(X574),'const.ind_type.CONSTR_3'(s('type.num.num',X576),s(X574,X577),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))))),s(X573,sK5(happ(s(fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))),happ(s(fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)))),happ(s(fun('type.num.num',fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))))),X575),s('type.num.num',X576))),s(X574,X577))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))),s(fun('type.num.num',fun(X573,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578)))),X580,X573))))) | ~p(s(bool,happ(s(fun(X573,bool),happ(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s('type.ind_type.recspace'(X574),'const.ind_type.CONSTR_3'(s('type.num.num',X576),s(X574,X577),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))))),s(X573,X579)))) | p(s(bool,happ(s(fun(X573,bool),X580),s(X573,sK6(happ(s(fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))),happ(s(fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)))),happ(s(fun('type.num.num',fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))))),X575),s('type.num.num',X576))),s(X574,X577))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))),s(fun('type.num.num',fun(X573,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578)))),X580,X573)))))) )),
  inference(forward_demodulation,[],[f27810,f339])).
fof(f27810,plain,(
  ( ! [X573,X575,X580,X576,X578,X574,X577,X579] : (~p(s(bool,happ(s(fun(X573,bool),happ(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s('type.ind_type.recspace'(X574),'const.ind_type.CONSTR_3'(s('type.num.num',X576),s(X574,X577),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))))),s(X573,X579)))) | p(s(bool,happ(s(fun(X573,bool),X580),s(X573,sK6(happ(s(fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))),happ(s(fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)))),happ(s(fun('type.num.num',fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))))),X575),s('type.num.num',X576))),s(X574,X577))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))),s(fun('type.num.num',fun(X573,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578)))),X580,X573))))) | p(s(bool,happ(s(fun(X573,bool),happ(s(fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))),happ(s(fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)))),happ(s(fun('type.num.num',fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))))),X575),s('type.num.num',X576))),s(X574,X577))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))),s(fun('type.num.num',fun(X573,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))))),s(X573,sK5(happ(s(fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))),happ(s(fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool)))),happ(s(fun('type.num.num',fun(X574,fun(fun('type.num.num','type.ind_type.recspace'(X574)),fun(fun('type.num.num',fun(X573,bool)),fun(X573,bool))))),X575),s('type.num.num',X576))),s(X574,X577))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578))),s(fun('type.num.num',fun(X573,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X574),fun(X573,bool)),sK7(X575,X574,fun(X573,bool))),s(fun('type.num.num','type.ind_type.recspace'(X574)),X578)))),X580,X573)))))) )),
  inference(superposition,[],[f314,f339])).
fof(f27809,plain,(
  ( ! [X569,X571,X567,X572,X568,X570,X566] : (p(s(bool,'|dollar|exists_1'(s(fun(X566,bool),happ(s(fun('type.ind_type.recspace'(X567),fun(X566,bool)),sK7(X568,X567,fun(X566,bool))),s('type.ind_type.recspace'(X567),'const.ind_type.CONSTR_3'(s('type.num.num',X569),s(X567,X570),s(fun('type.num.num','type.ind_type.recspace'(X567)),X571)))))))) | s(X566,X572) = s(X566,sK4(X572,happ(s(fun(fun('type.num.num',fun(X566,bool)),fun(X566,bool)),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X567)),fun(fun('type.num.num',fun(X566,bool)),fun(X566,bool))),happ(s(fun(X567,fun(fun('type.num.num','type.ind_type.recspace'(X567)),fun(fun('type.num.num',fun(X566,bool)),fun(X566,bool)))),happ(s(fun('type.num.num',fun(X567,fun(fun('type.num.num','type.ind_type.recspace'(X567)),fun(fun('type.num.num',fun(X566,bool)),fun(X566,bool))))),X568),s('type.num.num',X569))),s(X567,X570))),s(fun('type.num.num','type.ind_type.recspace'(X567)),X571))),s(fun('type.num.num',fun(X566,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X567),fun(X566,bool)),sK7(X568,X567,fun(X566,bool))),s(fun('type.num.num','type.ind_type.recspace'(X567)),X571)))),X566))) )),
  inference(superposition,[],[f312,f339])).
fof(f27792,plain,(
  ( ! [X466,X463,X465,X467,X462,X464] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X467),'const.sum.INL_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X462),bool),sK7(X463,X462,bool)),s('type.ind_type.recspace'(X462),'const.ind_type.CONSTR_3'(s('type.num.num',X464),s(X462,X465),s(fun('type.num.num','type.ind_type.recspace'(X462)),X466))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X462)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X462,fun(fun('type.num.num','type.ind_type.recspace'(X462)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X462,fun(fun('type.num.num','type.ind_type.recspace'(X462)),fun(fun('type.num.num',bool),bool)))),X463),s('type.num.num',X464))),s(X462,X465))),s(fun('type.num.num','type.ind_type.recspace'(X462)),X466))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X462),bool),sK7(X463,X462,bool)),s(fun('type.num.num','type.ind_type.recspace'(X462)),X466)))))) )),
  inference(superposition,[],[f5684,f339])).
fof(f27791,plain,(
  ( ! [X461,X457,X459,X460,X456,X458] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X461,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X456),bool),sK7(X457,X456,bool)),s('type.ind_type.recspace'(X456),'const.ind_type.CONSTR_3'(s('type.num.num',X458),s(X456,X459),s(fun('type.num.num','type.ind_type.recspace'(X456)),X460))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X456)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X456,fun(fun('type.num.num','type.ind_type.recspace'(X456)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X456,fun(fun('type.num.num','type.ind_type.recspace'(X456)),fun(fun('type.num.num',bool),bool)))),X457),s('type.num.num',X458))),s(X456,X459))),s(fun('type.num.num','type.ind_type.recspace'(X456)),X460))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X456),bool),sK7(X457,X456,bool)),s(fun('type.num.num','type.ind_type.recspace'(X456)),X460)))))) )),
  inference(superposition,[],[f5495,f339])).
fof(f27786,plain,(
  ( ! [X428,X424,X426,X423,X429,X425,X427] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X423),bool),sK7(X424,X423,bool)),s('type.ind_type.recspace'(X423),'const.ind_type.CONSTR_3'(s('type.num.num',X425),s(X423,X426),s(fun('type.num.num','type.ind_type.recspace'(X423)),X427)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X428),bool),sK16(X429,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X423)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X423,fun(fun('type.num.num','type.ind_type.recspace'(X423)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X423,fun(fun('type.num.num','type.ind_type.recspace'(X423)),fun(fun('type.num.num',bool),bool)))),X424),s('type.num.num',X425))),s(X423,X426))),s(fun('type.num.num','type.ind_type.recspace'(X423)),X427))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X423),bool),sK7(X424,X423,bool)),s(fun('type.num.num','type.ind_type.recspace'(X423)),X427)))),X428,bool))))) )),
  inference(superposition,[],[f3944,f339])).
fof(f27774,plain,(
  ( ! [X356,X358,X360,X357,X359,X355] : (s(bool,X360) != s(bool,happ(s(fun('type.ind_type.recspace'(X355),bool),sK7(X356,X355,bool)),s('type.ind_type.recspace'(X355),'const.ind_type.CONSTR_3'(s('type.num.num',X357),s(X355,X358),s(fun('type.num.num','type.ind_type.recspace'(X355)),X359))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X355)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X355,fun(fun('type.num.num','type.ind_type.recspace'(X355)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X355,fun(fun('type.num.num','type.ind_type.recspace'(X355)),fun(fun('type.num.num',bool),bool)))),X356),s('type.num.num',X357))),s(X355,X358))),s(fun('type.num.num','type.ind_type.recspace'(X355)),X359))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X355),bool),sK7(X356,X355,bool)),s(fun('type.num.num','type.ind_type.recspace'(X355)),X359))))) | s(bool,'T_0') = s(bool,X360)) )),
  inference(superposition,[],[f1683,f339])).
fof(f27773,plain,(
  ( ! [X350,X352,X354,X349,X351,X353] : (s(bool,X354) != s(bool,happ(s(fun('type.ind_type.recspace'(X349),bool),sK7(X350,X349,bool)),s('type.ind_type.recspace'(X349),'const.ind_type.CONSTR_3'(s('type.num.num',X351),s(X349,X352),s(fun('type.num.num','type.ind_type.recspace'(X349)),X353))))) | s(bool,'F_0') = s(bool,X354) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X349)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X349,fun(fun('type.num.num','type.ind_type.recspace'(X349)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X349,fun(fun('type.num.num','type.ind_type.recspace'(X349)),fun(fun('type.num.num',bool),bool)))),X350),s('type.num.num',X351))),s(X349,X352))),s(fun('type.num.num','type.ind_type.recspace'(X349)),X353))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X349),bool),sK7(X350,X349,bool)),s(fun('type.num.num','type.ind_type.recspace'(X349)),X353)))))) )),
  inference(superposition,[],[f1683,f339])).
fof(f27767,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X320),'const.sum.INL_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X315),bool),sK7(X316,X315,bool)),s('type.ind_type.recspace'(X315),'const.ind_type.CONSTR_3'(s('type.num.num',X317),s(X315,X318),s(fun('type.num.num','type.ind_type.recspace'(X315)),X319))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X315)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X315,fun(fun('type.num.num','type.ind_type.recspace'(X315)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X315,fun(fun('type.num.num','type.ind_type.recspace'(X315)),fun(fun('type.num.num',bool),bool)))),X316),s('type.num.num',X317))),s(X315,X318))),s(fun('type.num.num','type.ind_type.recspace'(X315)),X319))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X315),bool),sK7(X316,X315,bool)),s(fun('type.num.num','type.ind_type.recspace'(X315)),X319)))))) )),
  inference(superposition,[],[f1396,f339])).
fof(f27766,plain,(
  ( ! [X313,X310,X312,X314,X309,X311] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X314,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X309),bool),sK7(X310,X309,bool)),s('type.ind_type.recspace'(X309),'const.ind_type.CONSTR_3'(s('type.num.num',X311),s(X309,X312),s(fun('type.num.num','type.ind_type.recspace'(X309)),X313))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X309)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X309,fun(fun('type.num.num','type.ind_type.recspace'(X309)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X309,fun(fun('type.num.num','type.ind_type.recspace'(X309)),fun(fun('type.num.num',bool),bool)))),X310),s('type.num.num',X311))),s(X309,X312))),s(fun('type.num.num','type.ind_type.recspace'(X309)),X313))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X309),bool),sK7(X310,X309,bool)),s(fun('type.num.num','type.ind_type.recspace'(X309)),X313)))))) )),
  inference(superposition,[],[f1395,f339])).
fof(f27939,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X296),bool),sK7(X297,X296,bool)),s('type.ind_type.recspace'(X296),'const.ind_type.CONSTR_3'(s('type.num.num',X298),s(X296,X299),s(fun('type.num.num','type.ind_type.recspace'(X296)),X300))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X296)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X296,fun(fun('type.num.num','type.ind_type.recspace'(X296)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X296,fun(fun('type.num.num','type.ind_type.recspace'(X296)),fun(fun('type.num.num',bool),bool)))),X297),s('type.num.num',X298))),s(X296,X299))),s(fun('type.num.num','type.ind_type.recspace'(X296)),X300))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X296),bool),sK7(X297,X296,bool)),s(fun('type.num.num','type.ind_type.recspace'(X296)),X300)))))) )),
  inference(forward_demodulation,[],[f27764,f427])).
fof(f27764,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (s(bool,'const.ind_type.ISO_2'(s(fun(X301,X301),'_i_0_0'),s(fun(X301,X301),'_i_0_0'))) != s(bool,happ(s(fun('type.ind_type.recspace'(X296),bool),sK7(X297,X296,bool)),s('type.ind_type.recspace'(X296),'const.ind_type.CONSTR_3'(s('type.num.num',X298),s(X296,X299),s(fun('type.num.num','type.ind_type.recspace'(X296)),X300))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X296)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X296,fun(fun('type.num.num','type.ind_type.recspace'(X296)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X296,fun(fun('type.num.num','type.ind_type.recspace'(X296)),fun(fun('type.num.num',bool),bool)))),X297),s('type.num.num',X298))),s(X296,X299))),s(fun('type.num.num','type.ind_type.recspace'(X296)),X300))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X296),bool),sK7(X297,X296,bool)),s(fun('type.num.num','type.ind_type.recspace'(X296)),X300)))))) )),
  inference(superposition,[],[f790,f339])).
fof(f27763,plain,(
  ( ! [X292,X294,X290,X293,X295,X289,X291] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X294),'const.pair.,_2'(s(bool,happ(s(fun('type.ind_type.recspace'(X289),bool),sK7(X290,X289,bool)),s('type.ind_type.recspace'(X289),'const.ind_type.CONSTR_3'(s('type.num.num',X291),s(X289,X292),s(fun('type.num.num','type.ind_type.recspace'(X289)),X293))))),s(X294,X295))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X289)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X289,fun(fun('type.num.num','type.ind_type.recspace'(X289)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X289,fun(fun('type.num.num','type.ind_type.recspace'(X289)),fun(fun('type.num.num',bool),bool)))),X290),s('type.num.num',X291))),s(X289,X292))),s(fun('type.num.num','type.ind_type.recspace'(X289)),X293))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X289),bool),sK7(X290,X289,bool)),s(fun('type.num.num','type.ind_type.recspace'(X289)),X293)))))) )),
  inference(superposition,[],[f730,f339])).
fof(f27762,plain,(
  ( ! [X282,X288,X285,X287,X283,X284,X286] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X287,bool),'const.pair.,_2'(s(X287,X288),s(bool,happ(s(fun('type.ind_type.recspace'(X282),bool),sK7(X283,X282,bool)),s('type.ind_type.recspace'(X282),'const.ind_type.CONSTR_3'(s('type.num.num',X284),s(X282,X285),s(fun('type.num.num','type.ind_type.recspace'(X282)),X286))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',bool),bool)))),X283),s('type.num.num',X284))),s(X282,X285))),s(fun('type.num.num','type.ind_type.recspace'(X282)),X286))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X282),bool),sK7(X283,X282,bool)),s(fun('type.num.num','type.ind_type.recspace'(X282)),X286)))))) )),
  inference(superposition,[],[f673,f339])).
fof(f27761,plain,(
  ( ! [X280,X277,X279,X281,X276,X278] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.ind_type.recspace'(X276),bool),sK7(X277,X276,bool)),s('type.ind_type.recspace'(X276),'const.ind_type.CONSTR_3'(s('type.num.num',X278),s(X276,X279),s(fun('type.num.num','type.ind_type.recspace'(X276)),X280))))),s(fun('type.num.num',bool),X281),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X276)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X276,fun(fun('type.num.num','type.ind_type.recspace'(X276)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X276,fun(fun('type.num.num','type.ind_type.recspace'(X276)),fun(fun('type.num.num',bool),bool)))),X277),s('type.num.num',X278))),s(X276,X279))),s(fun('type.num.num','type.ind_type.recspace'(X276)),X280))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X276),bool),sK7(X277,X276,bool)),s(fun('type.num.num','type.ind_type.recspace'(X276)),X280)))))) )),
  inference(superposition,[],[f620,f339])).
fof(f27760,plain,(
  ( ! [X271,X273,X275,X270,X272,X274] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X275,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X270),bool),sK7(X271,X270,bool)),s('type.ind_type.recspace'(X270),'const.ind_type.CONSTR_3'(s('type.num.num',X272),s(X270,X273),s(fun('type.num.num','type.ind_type.recspace'(X270)),X274))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',bool),bool)))),X271),s('type.num.num',X272))),s(X270,X273))),s(fun('type.num.num','type.ind_type.recspace'(X270)),X274))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X270),bool),sK7(X271,X270,bool)),s(fun('type.num.num','type.ind_type.recspace'(X270)),X274)))))) )),
  inference(superposition,[],[f527,f339])).
fof(f27759,plain,(
  ( ! [X269,X265,X267,X268,X264,X266] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X269),'const.sum.INL_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X264),bool),sK7(X265,X264,bool)),s('type.ind_type.recspace'(X264),'const.ind_type.CONSTR_3'(s('type.num.num',X266),s(X264,X267),s(fun('type.num.num','type.ind_type.recspace'(X264)),X268))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X264)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X264,fun(fun('type.num.num','type.ind_type.recspace'(X264)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X264,fun(fun('type.num.num','type.ind_type.recspace'(X264)),fun(fun('type.num.num',bool),bool)))),X265),s('type.num.num',X266))),s(X264,X267))),s(fun('type.num.num','type.ind_type.recspace'(X264)),X268))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X264),bool),sK7(X265,X264,bool)),s(fun('type.num.num','type.ind_type.recspace'(X264)),X268)))))) )),
  inference(superposition,[],[f500,f339])).
fof(f27742,plain,(
  ( ! [X173,X171,X169,X172,X170] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X169),bool),sK7(X170,X169,bool)),s('type.ind_type.recspace'(X169),'const.ind_type.CONSTR_3'(s('type.num.num',X171),s(X169,X172),s(fun('type.num.num','type.ind_type.recspace'(X169)),X173)))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',bool),bool)))),X170),s('type.num.num',X171))),s(X169,X172))),s(fun('type.num.num','type.ind_type.recspace'(X169)),X173))),s(fun('type.num.num',bool),'const.min.@_1'(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',bool),bool)))),X170),s('type.num.num',X171))),s(X169,X172))),s(fun('type.num.num','type.ind_type.recspace'(X169)),X173))))))))) )),
  inference(superposition,[],[f311,f339])).
fof(f27741,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X164),bool),sK7(X165,X164,bool)),s('type.ind_type.recspace'(X164),'const.ind_type.CONSTR_3'(s('type.num.num',X166),s(X164,X167),s(fun('type.num.num','type.ind_type.recspace'(X164)),X168)))))) | p(s(bool,'|dollar|exists_1'(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X164,fun(fun('type.num.num','type.ind_type.recspace'(X164)),fun(fun('type.num.num',bool),bool)))),X165),s('type.num.num',X166))),s(X164,X167))),s(fun('type.num.num','type.ind_type.recspace'(X164)),X168))))))) )),
  inference(superposition,[],[f3805,f339])).
fof(f27740,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X158),bool),sK7(X159,X158,bool)),s('type.ind_type.recspace'(X158),'const.ind_type.CONSTR_3'(s('type.num.num',X160),s(X158,X161),s(fun('type.num.num','type.ind_type.recspace'(X158)),X162)))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),X163),s(fun('type.num.num',bool),sK6(happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X158,fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X158,fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool)))),X159),s('type.num.num',X160))),s(X158,X161))),s(fun('type.num.num','type.ind_type.recspace'(X158)),X162)),X163,fun('type.num.num',bool)))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X158,fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X158,fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool)))),X159),s('type.num.num',X160))),s(X158,X161))),s(fun('type.num.num','type.ind_type.recspace'(X158)),X162))),s(fun('type.num.num',bool),sK5(happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X158,fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X158,fun(fun('type.num.num','type.ind_type.recspace'(X158)),fun(fun('type.num.num',bool),bool)))),X159),s('type.num.num',X160))),s(X158,X161))),s(fun('type.num.num','type.ind_type.recspace'(X158)),X162)),X163,fun('type.num.num',bool))))))) )),
  inference(superposition,[],[f314,f339])).
fof(f27704,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,X22) = s(bool,happ(s(fun('type.ind_type.recspace'(X17),bool),sK7(X18,X17,bool)),s('type.ind_type.recspace'(X17),'const.ind_type.CONSTR_3'(s('type.num.num',X19),s(X17,X20),s(fun('type.num.num','type.ind_type.recspace'(X17)),X21))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X17,fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X17,fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool)))),X18),s('type.num.num',X19))),s(X17,X20))),s(fun('type.num.num','type.ind_type.recspace'(X17)),X21))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X17),bool),sK7(X18,X17,bool)),s(fun('type.num.num','type.ind_type.recspace'(X17)),X21)))))) )),
  inference(superposition,[],[f339,f432])).
fof(f27703,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X11),bool),sK7(X12,X11,bool)),s('type.ind_type.recspace'(X11),'const.ind_type.CONSTR_3'(s('type.num.num',X13),s(X11,X14),s(fun('type.num.num','type.ind_type.recspace'(X11)),X15))))) | s(bool,X16) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X11)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X11,fun(fun('type.num.num','type.ind_type.recspace'(X11)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X11,fun(fun('type.num.num','type.ind_type.recspace'(X11)),fun(fun('type.num.num',bool),bool)))),X12),s('type.num.num',X13))),s(X11,X14))),s(fun('type.num.num','type.ind_type.recspace'(X11)),X15))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X11),bool),sK7(X12,X11,bool)),s(fun('type.num.num','type.ind_type.recspace'(X11)),X15))))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f339,f432])).
fof(f27702,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X6),bool),sK7(X7,X6,bool)),s('type.ind_type.recspace'(X6),'const.ind_type.CONSTR_3'(s('type.num.num',X8),s(X6,X9),s(fun('type.num.num','type.ind_type.recspace'(X6)),X10))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun(fun('type.num.num',bool),bool)),happ(s(fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun(fun('type.num.num',bool),bool)))),X7),s('type.num.num',X8))),s(X6,X9))),s(fun('type.num.num','type.ind_type.recspace'(X6)),X10))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X6),bool),sK7(X7,X6,bool)),s(fun('type.num.num','type.ind_type.recspace'(X6)),X10)))))) )),
  inference(superposition,[],[f339,f264])).
fof(f27701,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X6),s(X1,X7),s(fun('type.num.num','type.ind_type.recspace'(X1)),happ(s(fun(X3,fun('type.num.num','type.ind_type.recspace'(X1))),X4),s(X3,X5))))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X6))),s(X1,X7))),s(fun('type.num.num','type.ind_type.recspace'(X1)),happ(s(fun(X3,fun('type.num.num','type.ind_type.recspace'(X1))),X4),s(X3,X5))))),s(fun('type.num.num',X0),happ(s(fun(X3,fun('type.num.num',X0)),'_dst_x00x11_2'(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s(fun(X3,fun('type.num.num','type.ind_type.recspace'(X1))),X4))),s(X3,X5)))))) )),
  inference(superposition,[],[f339,f390])).
fof(f27678,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X3),s(X1,X4),s(fun('type.num.num','type.ind_type.recspace'(X1)),happ(s(fun(X5,fun('type.num.num','type.ind_type.recspace'(X1))),X6),s(X5,X7))))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(X5,fun(fun('type.num.num',X0),X0)),'_dst_x0x1_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X3))),s(X1,X4))),s(fun(X5,fun('type.num.num','type.ind_type.recspace'(X1))),X6))),s(X5,X7))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),happ(s(fun(X5,fun('type.num.num','type.ind_type.recspace'(X1))),X6),s(X5,X7)))))))) )),
  inference(superposition,[],[f339,f365])).
fof(f27588,plain,(
  ( ! [X28,X26,X24,X23,X21,X27,X25,X22] : (s(X22,happ(s(fun('type.ind_type.recspace'(X21),X22),sK7('_dst_x0x1_2'(s(fun(X23,fun(X21,fun(fun('type.num.num','type.ind_type.recspace'(X21)),fun(fun('type.num.num',X22),X22)))),X24),s(fun('type.num.num',X23),X25)),X21,X22)),s('type.ind_type.recspace'(X21),'const.ind_type.CONSTR_3'(s('type.num.num',X26),s(X21,X27),s(fun('type.num.num','type.ind_type.recspace'(X21)),X28))))) = s(X22,happ(s(fun(fun('type.num.num',X22),X22),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X21)),fun(fun('type.num.num',X22),X22)),happ(s(fun(X21,fun(fun('type.num.num','type.ind_type.recspace'(X21)),fun(fun('type.num.num',X22),X22))),happ(s(fun(X23,fun(X21,fun(fun('type.num.num','type.ind_type.recspace'(X21)),fun(fun('type.num.num',X22),X22)))),X24),s(X23,happ(s(fun('type.num.num',X23),X25),s('type.num.num',X26))))),s(X21,X27))),s(fun('type.num.num','type.ind_type.recspace'(X21)),X28))),s(fun('type.num.num',X22),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X21),X22),sK7('_dst_x0x1_2'(s(fun(X23,fun(X21,fun(fun('type.num.num','type.ind_type.recspace'(X21)),fun(fun('type.num.num',X22),X22)))),X24),s(fun('type.num.num',X23),X25)),X21,X22)),s(fun('type.num.num','type.ind_type.recspace'(X21)),X28)))))) )),
  inference(superposition,[],[f339,f365])).
fof(f27587,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(X9,happ(s(fun('type.ind_type.recspace'(X8),X9),sK7(happ(s(fun(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))))),happ(s(fun(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),fun(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))))),'const.ind_type.FCONS_0'),s(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),X10))),s(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),X11)),X8,X9)),s('type.ind_type.recspace'(X8),'const.ind_type.CONSTR_3'(s('type.num.num',X12),s(X8,X13),s(fun('type.num.num','type.ind_type.recspace'(X8)),X14))))) = s(X9,happ(s(fun(fun('type.num.num',X9),X9),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)),happ(s(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),'const.ind_type.FCONS_3'(s(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),X10),s(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),X11),s('type.num.num',X12))),s(X8,X13))),s(fun('type.num.num','type.ind_type.recspace'(X8)),X14))),s(fun('type.num.num',X9),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X8),X9),sK7(happ(s(fun(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))))),happ(s(fun(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),fun(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))))),'const.ind_type.FCONS_0'),s(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),X10))),s(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),X11)),X8,X9)),s(fun('type.num.num','type.ind_type.recspace'(X8)),X14)))))) )),
  inference(superposition,[],[f339,f320])).
fof(f27586,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun('type.ind_type.recspace'(X0),X1),sK7('_dst_x00x11_2'(s(fun(X2,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),X3),s(fun('type.num.num',fun(X0,X2)),X4)),X0,X1)),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X5),s(X0,X6),s(fun('type.num.num','type.ind_type.recspace'(X0)),X7))))) = s(X1,happ(s(fun(fun('type.num.num',X1),X1),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),'_dst_x0x1_2'(s(fun(X2,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),X3),s(fun(X0,X2),happ(s(fun('type.num.num',fun(X0,X2)),X4),s('type.num.num',X5))))),s(X0,X6))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X7))),s(fun('type.num.num',X1),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),X1),sK7('_dst_x00x11_2'(s(fun(X2,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),X3),s(fun('type.num.num',fun(X0,X2)),X4)),X0,X1)),s(fun('type.num.num','type.ind_type.recspace'(X0)),X7)))))) )),
  inference(superposition,[],[f339,f390])).
fof(f27565,plain,(
  ( ! [X191,X196,X194,X192,X197,X195,X193] : (s(X192,happ(s(fun('type.ind_type.recspace'(X191),X192),sK7(sK4(X193,X194,fun('type.num.num',fun(X191,fun(fun('type.num.num','type.ind_type.recspace'(X191)),fun(fun('type.num.num',X192),X192))))),X191,X192)),s('type.ind_type.recspace'(X191),'const.ind_type.CONSTR_3'(s('type.num.num',X195),s(X191,X196),s(fun('type.num.num','type.ind_type.recspace'(X191)),X197))))) = s(X192,happ(s(fun(fun('type.num.num',X192),X192),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X191)),fun(fun('type.num.num',X192),X192)),happ(s(fun(X191,fun(fun('type.num.num','type.ind_type.recspace'(X191)),fun(fun('type.num.num',X192),X192))),happ(s(fun('type.num.num',fun(X191,fun(fun('type.num.num','type.ind_type.recspace'(X191)),fun(fun('type.num.num',X192),X192)))),X193),s('type.num.num',X195))),s(X191,X196))),s(fun('type.num.num','type.ind_type.recspace'(X191)),X197))),s(fun('type.num.num',X192),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X191),X192),sK7(sK4(X193,X194,fun('type.num.num',fun(X191,fun(fun('type.num.num','type.ind_type.recspace'(X191)),fun(fun('type.num.num',X192),X192))))),X191,X192)),s(fun('type.num.num','type.ind_type.recspace'(X191)),X197))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun('type.num.num',fun(X191,fun(fun('type.num.num','type.ind_type.recspace'(X191)),fun(fun('type.num.num',X192),X192)))),bool),X194)))) )),
  inference(superposition,[],[f339,f823])).
fof(f27564,plain,(
  ( ! [X189,X187,X185,X190,X188,X186,X184] : (s(X185,happ(s(fun('type.ind_type.recspace'(X184),X185),sK7('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)))),X186),'const.sum.INL_1'(s(fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)))),X187)))),X184,X185)),s('type.ind_type.recspace'(X184),'const.ind_type.CONSTR_3'(s('type.num.num',X188),s(X184,X189),s(fun('type.num.num','type.ind_type.recspace'(X184)),X190))))) = s(X185,happ(s(fun(fun('type.num.num',X185),X185),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)),happ(s(fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185))),happ(s(fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)))),X187),s('type.num.num',X188))),s(X184,X189))),s(fun('type.num.num','type.ind_type.recspace'(X184)),X190))),s(fun('type.num.num',X185),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X184),X185),sK7('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)))),X186),'const.sum.INL_1'(s(fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)))),X187)))),X184,X185)),s(fun('type.num.num','type.ind_type.recspace'(X184)),X190)))))) )),
  inference(superposition,[],[f339,f336])).
fof(f27563,plain,(
  ( ! [X177,X182,X180,X178,X183,X181,X179] : (s(X178,happ(s(fun('type.ind_type.recspace'(X177),X178),sK7('const.sum.OUTR_1'(s('type.sum.sum'(X179,fun('type.num.num',fun(X177,fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178))))),'const.sum.INR_1'(s(fun('type.num.num',fun(X177,fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178)))),X180)))),X177,X178)),s('type.ind_type.recspace'(X177),'const.ind_type.CONSTR_3'(s('type.num.num',X181),s(X177,X182),s(fun('type.num.num','type.ind_type.recspace'(X177)),X183))))) = s(X178,happ(s(fun(fun('type.num.num',X178),X178),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178)),happ(s(fun(X177,fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178))),happ(s(fun('type.num.num',fun(X177,fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178)))),X180),s('type.num.num',X181))),s(X177,X182))),s(fun('type.num.num','type.ind_type.recspace'(X177)),X183))),s(fun('type.num.num',X178),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X177),X178),sK7('const.sum.OUTR_1'(s('type.sum.sum'(X179,fun('type.num.num',fun(X177,fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178))))),'const.sum.INR_1'(s(fun('type.num.num',fun(X177,fun(fun('type.num.num','type.ind_type.recspace'(X177)),fun(fun('type.num.num',X178),X178)))),X180)))),X177,X178)),s(fun('type.num.num','type.ind_type.recspace'(X177)),X183)))))) )),
  inference(superposition,[],[f339,f337])).
fof(f27562,plain,(
  ( ! [X175,X173,X171,X169,X176,X174,X172,X170] : (s(X170,happ(s(fun('type.ind_type.recspace'(X169),X170),sK7('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170)))),X171),s(fun('type.num.num',fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170))))),X172),s('type.num.num','const.num.SUC_1'(s('type.num.num',X173)))),X169,X170)),s('type.ind_type.recspace'(X169),'const.ind_type.CONSTR_3'(s('type.num.num',X174),s(X169,X175),s(fun('type.num.num','type.ind_type.recspace'(X169)),X176))))) = s(X170,happ(s(fun(fun('type.num.num',X170),X170),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170)),happ(s(fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170))),happ(s(fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170)))),happ(s(fun('type.num.num',fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170))))),X172),s('type.num.num',X173))),s('type.num.num',X174))),s(X169,X175))),s(fun('type.num.num','type.ind_type.recspace'(X169)),X176))),s(fun('type.num.num',X170),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X169),X170),sK7('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170)))),X171),s(fun('type.num.num',fun('type.num.num',fun(X169,fun(fun('type.num.num','type.ind_type.recspace'(X169)),fun(fun('type.num.num',X170),X170))))),X172),s('type.num.num','const.num.SUC_1'(s('type.num.num',X173)))),X169,X170)),s(fun('type.num.num','type.ind_type.recspace'(X169)),X176)))))) )),
  inference(superposition,[],[f339,f318])).
fof(f27561,plain,(
  ( ! [X167,X165,X163,X166,X164,X162,X168] : (s(X163,happ(s(fun('type.ind_type.recspace'(X162),X163),sK7('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163)))),X164),s(fun('type.num.num',fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),X165),s('type.num.num','const.num.|48|_0')),X162,X163)),s('type.ind_type.recspace'(X162),'const.ind_type.CONSTR_3'(s('type.num.num',X166),s(X162,X167),s(fun('type.num.num','type.ind_type.recspace'(X162)),X168))))) = s(X163,happ(s(fun(fun('type.num.num',X163),X163),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163)),happ(s(fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))),happ(s(fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163)))),X164),s('type.num.num',X166))),s(X162,X167))),s(fun('type.num.num','type.ind_type.recspace'(X162)),X168))),s(fun('type.num.num',X163),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X162),X163),sK7('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163)))),X164),s(fun('type.num.num',fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),X165),s('type.num.num','const.num.|48|_0')),X162,X163)),s(fun('type.num.num','type.ind_type.recspace'(X162)),X168)))))) )),
  inference(superposition,[],[f339,f310])).
fof(f27560,plain,(
  ( ! [X158,X156,X154,X161,X159,X157,X155,X160] : (s(X155,happ(s(fun('type.ind_type.recspace'(X154),X155),sK7('const.pair.FST_1'(s('type.pair.prod'(fun('type.num.num',fun(X154,fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155)))),X156),'const.pair.,_2'(s(fun('type.num.num',fun(X154,fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155)))),X157),s(X156,X158)))),X154,X155)),s('type.ind_type.recspace'(X154),'const.ind_type.CONSTR_3'(s('type.num.num',X159),s(X154,X160),s(fun('type.num.num','type.ind_type.recspace'(X154)),X161))))) = s(X155,happ(s(fun(fun('type.num.num',X155),X155),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155)),happ(s(fun(X154,fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155))),happ(s(fun('type.num.num',fun(X154,fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155)))),X157),s('type.num.num',X159))),s(X154,X160))),s(fun('type.num.num','type.ind_type.recspace'(X154)),X161))),s(fun('type.num.num',X155),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X154),X155),sK7('const.pair.FST_1'(s('type.pair.prod'(fun('type.num.num',fun(X154,fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155)))),X156),'const.pair.,_2'(s(fun('type.num.num',fun(X154,fun(fun('type.num.num','type.ind_type.recspace'(X154)),fun(fun('type.num.num',X155),X155)))),X157),s(X156,X158)))),X154,X155)),s(fun('type.num.num','type.ind_type.recspace'(X154)),X161)))))) )),
  inference(superposition,[],[f339,f341])).
fof(f27559,plain,(
  ( ! [X146,X152,X151,X149,X147,X153,X150,X148] : (s(X147,happ(s(fun('type.ind_type.recspace'(X146),X147),sK7('const.pair.SND_1'(s('type.pair.prod'(X148,fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),'const.pair.,_2'(s(X148,X149),s(fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))),X150)))),X146,X147)),s('type.ind_type.recspace'(X146),'const.ind_type.CONSTR_3'(s('type.num.num',X151),s(X146,X152),s(fun('type.num.num','type.ind_type.recspace'(X146)),X153))))) = s(X147,happ(s(fun(fun('type.num.num',X147),X147),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)),happ(s(fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))),happ(s(fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))),X150),s('type.num.num',X151))),s(X146,X152))),s(fun('type.num.num','type.ind_type.recspace'(X146)),X153))),s(fun('type.num.num',X147),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X146),X147),sK7('const.pair.SND_1'(s('type.pair.prod'(X148,fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147))))),'const.pair.,_2'(s(X148,X149),s(fun('type.num.num',fun(X146,fun(fun('type.num.num','type.ind_type.recspace'(X146)),fun(fun('type.num.num',X147),X147)))),X150)))),X146,X147)),s(fun('type.num.num','type.ind_type.recspace'(X146)),X153)))))) )),
  inference(superposition,[],[f339,f340])).
fof(f27558,plain,(
  ( ! [X144,X134,X142,X140,X138,X136,X145,X135,X133,X143,X141,X139,X137] : (s(X134,happ(s(fun('type.ind_type.recspace'(X133),X134),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X135),s('type.list.list'('type.closSem.v'),X136))),s(fun('type.integer.int',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),X137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),X138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134)))))),X139),s(fun('type.num.num',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),X140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))))))),X141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))))))),X142)),X133,X134)),s('type.ind_type.recspace'(X133),'const.ind_type.CONSTR_3'(s('type.num.num',X143),s(X133,X144),s(fun('type.num.num','type.ind_type.recspace'(X133)),X145))))) = s(X134,happ(s(fun(fun('type.num.num',X134),X134),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134)),happ(s(fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))),happ(s(fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134)))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134)))))),X139),s('type.num.num',X135))),s('type.list.list'('type.closSem.v'),X136))),s('type.num.num',X143))),s(X133,X144))),s(fun('type.num.num','type.ind_type.recspace'(X133)),X145))),s(fun('type.num.num',X134),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X133),X134),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X135),s('type.list.list'('type.closSem.v'),X136))),s(fun('type.integer.int',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),X137),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),X138),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134)))))),X139),s(fun('type.num.num',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))),X140),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))))))),X141),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X133,fun(fun('type.num.num','type.ind_type.recspace'(X133)),fun(fun('type.num.num',X134),X134))))))))),X142)),X133,X134)),s(fun('type.num.num','type.ind_type.recspace'(X133)),X145)))))) )),
  inference(superposition,[],[f339,f324])).
fof(f27557,plain,(
  ( ! [X127,X125,X123,X121,X132,X130,X128,X126,X124,X122,X131,X129] : (s(X122,happ(s(fun('type.ind_type.recspace'(X121),X122),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X123))),s(fun('type.integer.int',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X124),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X125),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122)))))),X126),s(fun('type.num.num',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))))))),X128),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))))))),X129)),X121,X122)),s('type.ind_type.recspace'(X121),'const.ind_type.CONSTR_3'(s('type.num.num',X130),s(X121,X131),s(fun('type.num.num','type.ind_type.recspace'(X121)),X132))))) = s(X122,happ(s(fun(fun('type.num.num',X122),X122),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122)),happ(s(fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))),happ(s(fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122)))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X125),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X123))),s('type.num.num',X130))),s(X121,X131))),s(fun('type.num.num','type.ind_type.recspace'(X121)),X132))),s(fun('type.num.num',X122),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X121),X122),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X123))),s(fun('type.integer.int',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X124),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X125),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122)))))),X126),s(fun('type.num.num',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))),X127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))))))),X128),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X121,fun(fun('type.num.num','type.ind_type.recspace'(X121)),fun(fun('type.num.num',X122),X122))))))))),X129)),X121,X122)),s(fun('type.num.num','type.ind_type.recspace'(X121)),X132)))))) )),
  inference(superposition,[],[f339,f323])).
fof(f27556,plain,(
  ( ! [X111,X109,X118,X116,X114,X112,X120,X110,X119,X117,X115,X113] : (s(X110,happ(s(fun('type.ind_type.recspace'(X109),X110),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X111))),s(fun('type.integer.int',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X112),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X113),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110)))))),X114),s(fun('type.num.num',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X115),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))))))),X116),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))))))),X117)),X109,X110)),s('type.ind_type.recspace'(X109),'const.ind_type.CONSTR_3'(s('type.num.num',X118),s(X109,X119),s(fun('type.num.num','type.ind_type.recspace'(X109)),X120))))) = s(X110,happ(s(fun(fun('type.num.num',X110),X110),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110)),happ(s(fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))),happ(s(fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110)))),happ(s(fun('type.num.num',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X115),s('type.num.num',X111))),s('type.num.num',X118))),s(X109,X119))),s(fun('type.num.num','type.ind_type.recspace'(X109)),X120))),s(fun('type.num.num',X110),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X109),X110),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X111))),s(fun('type.integer.int',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X112),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X113),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110)))))),X114),s(fun('type.num.num',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X115),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))))))),X116),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))))))),X117)),X109,X110)),s(fun('type.num.num','type.ind_type.recspace'(X109)),X120)))))) )),
  inference(superposition,[],[f339,f322])).
fof(f27555,plain,(
  ( ! [X103,X101,X99,X97,X107,X105,X102,X100,X98,X108,X106,X104] : (s(X98,happ(s(fun('type.ind_type.recspace'(X97),X98),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X99))),s(fun('type.integer.int',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X100),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X101),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98)))))),X102),s(fun('type.num.num',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X103),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))))))),X104),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))))))),X105)),X97,X98)),s('type.ind_type.recspace'(X97),'const.ind_type.CONSTR_3'(s('type.num.num',X106),s(X97,X107),s(fun('type.num.num','type.ind_type.recspace'(X97)),X108))))) = s(X98,happ(s(fun(fun('type.num.num',X98),X98),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98)),happ(s(fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))),happ(s(fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98)))),happ(s(fun('type.integer.int',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X100),s('type.integer.int',X99))),s('type.num.num',X106))),s(X97,X107))),s(fun('type.num.num','type.ind_type.recspace'(X97)),X108))),s(fun('type.num.num',X98),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X97),X98),sK7('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X99))),s(fun('type.integer.int',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X100),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X101),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98)))))),X102),s(fun('type.num.num',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))),X103),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))))))),X104),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.num.num',fun(X97,fun(fun('type.num.num','type.ind_type.recspace'(X97)),fun(fun('type.num.num',X98),X98))))))))),X105)),X97,X98)),s(fun('type.num.num','type.ind_type.recspace'(X97)),X108)))))) )),
  inference(superposition,[],[f339,f321])).
fof(f27554,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X96] : (s(X91,happ(s(fun('type.ind_type.recspace'(X90),X91),sK7(happ(s(fun('type.pair.prod'(fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)))),X92),fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91))))),'const.pair.FST_0'),s('type.pair.prod'(fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)))),X92),X93)),X90,X91)),s('type.ind_type.recspace'(X90),'const.ind_type.CONSTR_3'(s('type.num.num',X94),s(X90,X95),s(fun('type.num.num','type.ind_type.recspace'(X90)),X96))))) = s(X91,happ(s(fun(fun('type.num.num',X91),X91),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)),happ(s(fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91))),happ(s(fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)))),'const.pair.FST_1'(s('type.pair.prod'(fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)))),X92),X93))),s('type.num.num',X94))),s(X90,X95))),s(fun('type.num.num','type.ind_type.recspace'(X90)),X96))),s(fun('type.num.num',X91),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X90),X91),sK7(happ(s(fun('type.pair.prod'(fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)))),X92),fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91))))),'const.pair.FST_0'),s('type.pair.prod'(fun('type.num.num',fun(X90,fun(fun('type.num.num','type.ind_type.recspace'(X90)),fun(fun('type.num.num',X91),X91)))),X92),X93)),X90,X91)),s(fun('type.num.num','type.ind_type.recspace'(X90)),X96)))))) )),
  inference(superposition,[],[f339,f338])).
fof(f27553,plain,(
  ( ! [X88,X87,X85,X83,X89,X86,X84,X82] : (s(X83,happ(s(fun('type.ind_type.recspace'(X82),X83),sK7(happ(s(fun('type.list.list'(X84),fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))))),sK16(X85,X86,X84,fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83)))))),s('type.list.list'(X84),'const.list.NIL_0')),X82,X83)),s('type.ind_type.recspace'(X82),'const.ind_type.CONSTR_3'(s('type.num.num',X87),s(X82,X88),s(fun('type.num.num','type.ind_type.recspace'(X82)),X89))))) = s(X83,happ(s(fun(fun('type.num.num',X83),X83),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83)),happ(s(fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))),happ(s(fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83)))),X86),s('type.num.num',X87))),s(X82,X88))),s(fun('type.num.num','type.ind_type.recspace'(X82)),X89))),s(fun('type.num.num',X83),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X82),X83),sK7(happ(s(fun('type.list.list'(X84),fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))))),sK16(X85,X86,X84,fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83)))))),s('type.list.list'(X84),'const.list.NIL_0')),X82,X83)),s(fun('type.num.num','type.ind_type.recspace'(X82)),X89)))))) )),
  inference(superposition,[],[f339,f356])).
fof(f27552,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (s(X75,happ(s(fun('type.ind_type.recspace'(X74),X75),sK7(happ(s(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))))),happ(s(fun(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),fun(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),X76))),s(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),X77))),s('type.num.num',X78)),X74,X75)),s('type.ind_type.recspace'(X74),'const.ind_type.CONSTR_3'(s('type.num.num',X79),s(X74,X80),s(fun('type.num.num','type.ind_type.recspace'(X74)),X81))))) = s(X75,happ(s(fun(fun('type.num.num',X75),X75),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)),happ(s(fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))),happ(s(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),'const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),X76),s(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),X77),s('type.num.num',X78))),s('type.num.num',X79))),s(X74,X80))),s(fun('type.num.num','type.ind_type.recspace'(X74)),X81))),s(fun('type.num.num',X75),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X74),X75),sK7(happ(s(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))))),happ(s(fun(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),fun(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75)))),X76))),s(fun('type.num.num',fun('type.num.num',fun(X74,fun(fun('type.num.num','type.ind_type.recspace'(X74)),fun(fun('type.num.num',X75),X75))))),X77))),s('type.num.num',X78)),X74,X75)),s(fun('type.num.num','type.ind_type.recspace'(X74)),X81)))))) )),
  inference(superposition,[],[f339,f320])).
fof(f27551,plain,(
  ( ! [X70,X68,X66,X64,X72,X71,X69,X67,X65,X73] : (s(X65,happ(s(fun('type.ind_type.recspace'(X64),X65),sK7(happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))),happ(s(fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))))),happ(s(fun('type.num.num',fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))))),X67),s('type.num.num',X68))),s(X66,X69))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X70))),s(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X66),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),sK7(X67,X66,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X70)))),X64,X65)),s('type.ind_type.recspace'(X64),'const.ind_type.CONSTR_3'(s('type.num.num',X71),s(X64,X72),s(fun('type.num.num','type.ind_type.recspace'(X64)),X73))))) = s(X65,happ(s(fun(fun('type.num.num',X65),X65),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)),happ(s(fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))),happ(s(fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))),happ(s(fun('type.ind_type.recspace'(X66),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),sK7(X67,X66,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))),s('type.ind_type.recspace'(X66),'const.ind_type.CONSTR_3'(s('type.num.num',X68),s(X66,X69),s(fun('type.num.num','type.ind_type.recspace'(X66)),X70))))),s('type.num.num',X71))),s(X64,X72))),s(fun('type.num.num','type.ind_type.recspace'(X64)),X73))),s(fun('type.num.num',X65),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X64),X65),sK7(happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))),happ(s(fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))))),happ(s(fun('type.num.num',fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))))),X67),s('type.num.num',X68))),s(X66,X69))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X70))),s(fun('type.num.num',fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X66),fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65))))),sK7(X67,X66,fun('type.num.num',fun(X64,fun(fun('type.num.num','type.ind_type.recspace'(X64)),fun(fun('type.num.num',X65),X65)))))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X70)))),X64,X65)),s(fun('type.num.num','type.ind_type.recspace'(X64)),X73)))))) )),
  inference(superposition,[],[f339,f339])).
fof(f27550,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55,X63] : (s(X55,happ(s(fun('type.ind_type.recspace'(X54),X55),sK7(happ(s(fun(X56,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),'_dst_x0x1_2'(s(fun(X57,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),X58),s(fun(X56,X57),X59))),s(X56,X60)),X54,X55)),s('type.ind_type.recspace'(X54),'const.ind_type.CONSTR_3'(s('type.num.num',X61),s(X54,X62),s(fun('type.num.num','type.ind_type.recspace'(X54)),X63))))) = s(X55,happ(s(fun(fun('type.num.num',X55),X55),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55)),happ(s(fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))),happ(s(fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55)))),happ(s(fun(X57,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),X58),s(X57,happ(s(fun(X56,X57),X59),s(X56,X60))))),s('type.num.num',X61))),s(X54,X62))),s(fun('type.num.num','type.ind_type.recspace'(X54)),X63))),s(fun('type.num.num',X55),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X54),X55),sK7(happ(s(fun(X56,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),'_dst_x0x1_2'(s(fun(X57,fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',X55),X55))))),X58),s(fun(X56,X57),X59))),s(X56,X60)),X54,X55)),s(fun('type.num.num','type.ind_type.recspace'(X54)),X63)))))) )),
  inference(superposition,[],[f339,f365])).
fof(f27549,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X44,X53,X51,X49] : (s(X45,happ(s(fun('type.ind_type.recspace'(X44),X45),sK7(happ(s(fun(X46,fun('type.num.num',fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45))))),X47),s(X46,happ(s(fun(X48,X46),X49),s(X48,X50)))),X44,X45)),s('type.ind_type.recspace'(X44),'const.ind_type.CONSTR_3'(s('type.num.num',X51),s(X44,X52),s(fun('type.num.num','type.ind_type.recspace'(X44)),X53))))) = s(X45,happ(s(fun(fun('type.num.num',X45),X45),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45)),happ(s(fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45))),happ(s(fun('type.num.num',fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45)))),happ(s(fun(X48,fun('type.num.num',fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45))))),'_dst_x0x1_2'(s(fun(X46,fun('type.num.num',fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45))))),X47),s(fun(X48,X46),X49))),s(X48,X50))),s('type.num.num',X51))),s(X44,X52))),s(fun('type.num.num','type.ind_type.recspace'(X44)),X53))),s(fun('type.num.num',X45),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X44),X45),sK7(happ(s(fun(X46,fun('type.num.num',fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X45),X45))))),X47),s(X46,happ(s(fun(X48,X46),X49),s(X48,X50)))),X44,X45)),s(fun('type.num.num','type.ind_type.recspace'(X44)),X53)))))) )),
  inference(superposition,[],[f339,f365])).
fof(f27548,plain,(
  ( ! [X39,X37,X35,X43,X41,X38,X36,X34,X42,X40] : (s(X35,happ(s(fun('type.ind_type.recspace'(X34),X35),sK7(happ(s(fun(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))),happ(s(fun('type.list.list'(X36),fun(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))))),happ(s(fun(X36,fun('type.list.list'(X36),fun(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))))),X37),s(X36,X38))),s('type.list.list'(X36),X39))),s(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),happ(s(fun('type.list.list'(X36),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))),sK16(X37,X40,X36,fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))))),s('type.list.list'(X36),X39)))),X34,X35)),s('type.ind_type.recspace'(X34),'const.ind_type.CONSTR_3'(s('type.num.num',X41),s(X34,X42),s(fun('type.num.num','type.ind_type.recspace'(X34)),X43))))) = s(X35,happ(s(fun(fun('type.num.num',X35),X35),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)),happ(s(fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))),happ(s(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),happ(s(fun('type.list.list'(X36),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))),sK16(X37,X40,X36,fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))))),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,X38),s('type.list.list'(X36),X39))))),s('type.num.num',X41))),s(X34,X42))),s(fun('type.num.num','type.ind_type.recspace'(X34)),X43))),s(fun('type.num.num',X35),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X34),X35),sK7(happ(s(fun(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))),happ(s(fun('type.list.list'(X36),fun(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))))),happ(s(fun(X36,fun('type.list.list'(X36),fun(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))))),X37),s(X36,X38))),s('type.list.list'(X36),X39))),s(fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))),happ(s(fun('type.list.list'(X36),fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35))))),sK16(X37,X40,X36,fun('type.num.num',fun(X34,fun(fun('type.num.num','type.ind_type.recspace'(X34)),fun(fun('type.num.num',X35),X35)))))),s('type.list.list'(X36),X39)))),X34,X35)),s(fun('type.num.num','type.ind_type.recspace'(X34)),X43)))))) )),
  inference(superposition,[],[f339,f357])).
fof(f27547,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(X29,happ(s(fun('type.ind_type.recspace'(X28),X29),sK7(happ(s(fun(fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29)))),fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29))))),'_i_0_0'),s(fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29)))),X30)),X28,X29)),s('type.ind_type.recspace'(X28),'const.ind_type.CONSTR_3'(s('type.num.num',X31),s(X28,X32),s(fun('type.num.num','type.ind_type.recspace'(X28)),X33))))) = s(X29,happ(s(fun(fun('type.num.num',X29),X29),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29)),happ(s(fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29))),happ(s(fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29)))),X30),s('type.num.num',X31))),s(X28,X32))),s(fun('type.num.num','type.ind_type.recspace'(X28)),X33))),s(fun('type.num.num',X29),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X28),X29),sK7(happ(s(fun(fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29)))),fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29))))),'_i_0_0'),s(fun('type.num.num',fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X28)),fun(fun('type.num.num',X29),X29)))),X30)),X28,X29)),s(fun('type.num.num','type.ind_type.recspace'(X28)),X33)))))) )),
  inference(superposition,[],[f339,f303])).
fof(f27546,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20,X18] : (s(X19,happ(s(fun('type.ind_type.recspace'(X18),X19),sK7('_dst_x0x1_2'(s(fun(X20,fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19)))),X21),s(fun('type.num.num',X20),happ(s(fun(X22,fun('type.num.num',X20)),X23),s(X22,X24)))),X18,X19)),s('type.ind_type.recspace'(X18),'const.ind_type.CONSTR_3'(s('type.num.num',X25),s(X18,X26),s(fun('type.num.num','type.ind_type.recspace'(X18)),X27))))) = s(X19,happ(s(fun(fun('type.num.num',X19),X19),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19)),happ(s(fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19))),happ(s(fun('type.num.num',fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19)))),happ(s(fun(X22,fun('type.num.num',fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19))))),'_dst_x00x11_2'(s(fun(X20,fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19)))),X21),s(fun(X22,fun('type.num.num',X20)),X23))),s(X22,X24))),s('type.num.num',X25))),s(X18,X26))),s(fun('type.num.num','type.ind_type.recspace'(X18)),X27))),s(fun('type.num.num',X19),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X18),X19),sK7('_dst_x0x1_2'(s(fun(X20,fun(X18,fun(fun('type.num.num','type.ind_type.recspace'(X18)),fun(fun('type.num.num',X19),X19)))),X21),s(fun('type.num.num',X20),happ(s(fun(X22,fun('type.num.num',X20)),X23),s(X22,X24)))),X18,X19)),s(fun('type.num.num','type.ind_type.recspace'(X18)),X27)))))) )),
  inference(superposition,[],[f339,f390])).
fof(f27545,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X9,happ(s(fun('type.ind_type.recspace'(X8),X9),sK7(happ(s(fun(X10,fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))))),'_dst_x00x11_2'(s(fun(X11,fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),X12),s(fun(X10,fun('type.num.num',X11)),X13))),s(X10,X14)),X8,X9)),s('type.ind_type.recspace'(X8),'const.ind_type.CONSTR_3'(s('type.num.num',X15),s(X8,X16),s(fun('type.num.num','type.ind_type.recspace'(X8)),X17))))) = s(X9,happ(s(fun(fun('type.num.num',X9),X9),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)),happ(s(fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))),happ(s(fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),'_dst_x0x1_2'(s(fun(X11,fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),X12),s(fun('type.num.num',X11),happ(s(fun(X10,fun('type.num.num',X11)),X13),s(X10,X14))))),s('type.num.num',X15))),s(X8,X16))),s(fun('type.num.num','type.ind_type.recspace'(X8)),X17))),s(fun('type.num.num',X9),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X8),X9),sK7(happ(s(fun(X10,fun('type.num.num',fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9))))),'_dst_x00x11_2'(s(fun(X11,fun(X8,fun(fun('type.num.num','type.ind_type.recspace'(X8)),fun(fun('type.num.num',X9),X9)))),X12),s(fun(X10,fun('type.num.num',X11)),X13))),s(X10,X14)),X8,X9)),s(fun('type.num.num','type.ind_type.recspace'(X8)),X17)))))) )),
  inference(superposition,[],[f339,f390])).
fof(f27544,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun('type.ind_type.recspace'(X0),X1),sK7(happ(s(fun(fun(X2,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),'_dstsel_0_x01_1'(s(fun('type.num.num',X2),X3))),s(fun(X2,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),X4)),X0,X1)),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X5),s(X0,X6),s(fun('type.num.num','type.ind_type.recspace'(X0)),X7))))) = s(X1,happ(s(fun(fun('type.num.num',X1),X1),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),happ(s(fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),'_dst_x0x1_2'(s(fun(X2,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),X4),s(fun('type.num.num',X2),X3))),s('type.num.num',X5))),s(X0,X6))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X7))),s(fun('type.num.num',X1),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),X1),sK7(happ(s(fun(fun(X2,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),'_dstsel_0_x01_1'(s(fun('type.num.num',X2),X3))),s(fun(X2,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),X4)),X0,X1)),s(fun('type.num.num','type.ind_type.recspace'(X0)),X7)))))) )),
  inference(superposition,[],[f339,f364])).
fof(f27398,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X132),bool),sK16(X133,'|dollar|exists_1'(s(fun('type.list.list'(X130),bool),sK16(X131,sK5('_i_0_0','_i_0_0',bool),X130,bool))),X132,bool))))) ) | $spl28),
  inference(subsumption_resolution,[],[f27330,f256])).
fof(f27330,plain,(
  ( ! [X132,X130,X133,X131] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X132),bool),sK16(X133,'|dollar|exists_1'(s(fun('type.list.list'(X130),bool),sK16(X131,sK5('_i_0_0','_i_0_0',bool),X130,bool))),X132,bool))))) ) | $spl28),
  inference(superposition,[],[f3944,f24555])).
fof(f27393,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X74) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X72),bool),sK16(X73,sK5('_i_0_0','_i_0_0',bool),X72,bool)))) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl28),
  inference(subsumption_resolution,[],[f27309,f256])).
fof(f27309,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,'T_0')) | s(bool,X74) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X72),bool),sK16(X73,sK5('_i_0_0','_i_0_0',bool),X72,bool)))) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl28),
  inference(superposition,[],[f1330,f24555])).
fof(f27392,plain,(
  ( ! [X45,X46,X44] : (s(bool,X46) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X44),bool),sK16(X45,sK5('_i_0_0','_i_0_0',bool),X44,bool)))) | s(bool,'T_0') = s(bool,X46)) ) | $spl28),
  inference(subsumption_resolution,[],[f27300,f256])).
fof(f27300,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'T_0')) | s(bool,X46) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X44),bool),sK16(X45,sK5('_i_0_0','_i_0_0',bool),X44,bool)))) | s(bool,'T_0') = s(bool,X46)) ) | $spl28),
  inference(superposition,[],[f434,f24555])).
fof(f27240,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),X23),s('type.num.num',sK13(happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.list.list'('type.closSem.v'),X21))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X22)),X23,'type.num.num','type.closSem.v')))) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X19),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X21),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X22),s('type.num.num',sK13(happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.list.list'('type.closSem.v'),X21))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X22)),X23,'type.num.num','type.closSem.v')))) | s(fun('type.num.num','type.closSem.v'),X23) = s(fun('type.num.num','type.closSem.v'),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.list.list'('type.closSem.v'),X21))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X22)))) )),
  inference(superposition,[],[f352,f393])).
fof(f27239,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),X18),s('type.num.num',sK13(X18,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.list.list'('type.closSem.v'),X16))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17)),'type.num.num','type.closSem.v')))) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.num.num',sK13(X18,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.list.list'('type.closSem.v'),X16))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17)),'type.num.num','type.closSem.v')))) | s(fun('type.num.num','type.closSem.v'),X18) = s(fun('type.num.num','type.closSem.v'),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.list.list'('type.closSem.v'),X16))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17)))) )),
  inference(superposition,[],[f352,f393])).
fof(f26049,plain,(
  ( ! [X1583,X1584,X1586,X1588,X1582,X1585,X1589,X1587] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1589))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X1584),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1582))))) | s('type.integer.int',X1589) = s('type.integer.int','const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1582))),s(fun('type.integer.int','type.integer.int'),X1583),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X1584),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X1585),s(fun('type.num.num','type.integer.int'),X1586),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X1587),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X1588)))) )),
  inference(superposition,[],[f332,f323])).
fof(f26034,plain,(
  ( ! [X1436,X1438,X1441,X1435,X1437,X1439,X1440,X1442] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1442))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1437),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1435))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1442) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1435))),s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1436),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1437),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X1438),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1439),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1440),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1441)))) )),
  inference(superposition,[],[f334,f323])).
fof(f26030,plain,(
  ( ! [X1407,X1397,X1399,X1400,X1402,X1404,X1406,X1396,X1398,X1401,X1403,X1405] : (s(X1397,happ(s(fun('type.list.list'(X1396),X1397),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1398))),s(fun('type.integer.int',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1399),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1400),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397))))),X1401),s(fun('type.num.num',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1402),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))))))),X1403),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))))))),X1404)),X1405,X1396,X1397)),s('type.list.list'(X1396),'const.list.CONS_2'(s(X1396,X1406),s('type.list.list'(X1396),X1407))))) = s(X1397,happ(s(fun(X1397,X1397),happ(s(fun('type.list.list'(X1396),fun(X1397,X1397)),happ(s(fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1400),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1398))),s(X1396,X1406))),s('type.list.list'(X1396),X1407))),s(X1397,happ(s(fun('type.list.list'(X1396),X1397),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1398))),s(fun('type.integer.int',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1399),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1400),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397))))),X1401),s(fun('type.num.num',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))),X1402),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))))))),X1403),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1396,fun('type.list.list'(X1396),fun(X1397,X1397)))))))),X1404)),X1405,X1396,X1397)),s('type.list.list'(X1396),X1407)))))) )),
  inference(superposition,[],[f357,f323])).
fof(f26135,plain,(
  ( ! [X1300,X1302,X1305,X1307,X1299,X1301,X1303,X1304,X1306,X1308] : (s(X1299,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)) != s(X1299,happ(s(fun(X1300,X1299),X1308),s(X1300,happ(s(fun(X1299,X1300),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(X1299,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)))))) | s(X1300,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)) != s(X1300,happ(s(fun(X1299,X1300),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(X1299,happ(s(fun(X1300,X1299),X1308),s(X1300,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1300,X1299),X1308),s(fun(X1299,X1300),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))))))) )),
  inference(forward_demodulation,[],[f26134,f323])).
fof(f26134,plain,(
  ( ! [X1300,X1302,X1305,X1307,X1299,X1301,X1303,X1304,X1306,X1308] : (s(X1300,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)) != s(X1300,happ(s(fun(X1299,X1300),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(X1299,happ(s(fun(X1300,X1299),X1308),s(X1300,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1300,X1299),X1308),s(fun(X1299,X1300),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301)))))) | s(X1299,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)) != s(X1299,happ(s(fun(X1300,X1299),X1308),s(X1300,happ(s(fun(X1299,X1300),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307))),s(X1299,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299))))))) )),
  inference(forward_demodulation,[],[f26022,f323])).
fof(f26022,plain,(
  ( ! [X1300,X1302,X1305,X1307,X1299,X1301,X1303,X1304,X1306,X1308] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1300,X1299),X1308),s(fun(X1299,X1300),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301)))))) | s(X1300,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)) != s(X1300,happ(s(fun(X1299,X1300),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307))),s(X1299,happ(s(fun(X1300,X1299),X1308),s(X1300,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)))))) | s(X1299,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299)) != s(X1299,happ(s(fun(X1300,X1299),X1308),s(X1300,happ(s(fun(X1299,X1300),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307))),s(X1299,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1301))),s(fun('type.integer.int',fun(X1299,X1300)),X1302),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1299,X1300)),X1303),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1299,X1300))),X1304),s(fun('type.num.num',fun(X1299,X1300)),X1305),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1299,X1300)))))),X1306),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1299,X1300)))))),X1307)),X1308,X1300,X1299))))))) )),
  inference(superposition,[],[f355,f323])).
fof(f26133,plain,(
  ( ! [X1296,X1298,X1290,X1292,X1294,X1297,X1289,X1291,X1293,X1295] : (s(X1290,sK14(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)) != s(X1290,happ(s(fun(X1289,X1290),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(X1289,happ(s(fun(X1290,X1289),X1298),s(X1290,sK14(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)))))) | s(X1289,sK15(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)) != s(X1289,happ(s(fun(X1290,X1289),X1298),s(X1290,happ(s(fun(X1289,X1290),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(X1289,sK15(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1289,X1290),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun(X1290,X1289),X1298))))) )),
  inference(forward_demodulation,[],[f26132,f323])).
fof(f26132,plain,(
  ( ! [X1296,X1298,X1290,X1292,X1294,X1297,X1289,X1291,X1293,X1295] : (s(X1289,sK15(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)) != s(X1289,happ(s(fun(X1290,X1289),X1298),s(X1290,happ(s(fun(X1289,X1290),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(X1289,sK15(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1289,X1290),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun(X1290,X1289),X1298)))) | s(X1290,sK14(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)) != s(X1290,happ(s(fun(X1289,X1290),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297))),s(X1289,happ(s(fun(X1290,X1289),X1298),s(X1290,sK14(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290))))))) )),
  inference(forward_demodulation,[],[f26021,f323])).
fof(f26021,plain,(
  ( ! [X1296,X1298,X1290,X1292,X1294,X1297,X1289,X1291,X1293,X1295] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1289,X1290),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun(X1290,X1289),X1298)))) | s(X1289,sK15(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)) != s(X1289,happ(s(fun(X1290,X1289),X1298),s(X1290,happ(s(fun(X1289,X1290),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297))),s(X1289,sK15(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)))))) | s(X1290,sK14(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290)) != s(X1290,happ(s(fun(X1289,X1290),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297))),s(X1289,happ(s(fun(X1290,X1289),X1298),s(X1290,sK14(X1298,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1291))),s(fun('type.integer.int',fun(X1289,X1290)),X1292),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1289,X1290)),X1293),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1289,X1290))),X1294),s(fun('type.num.num',fun(X1289,X1290)),X1295),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1289,X1290)))))),X1296),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1289,X1290)))))),X1297)),X1289,X1290))))))) )),
  inference(superposition,[],[f355,f323])).
fof(f26127,plain,(
  ( ! [X1242,X1240,X1238,X1236,X1244,X1235,X1241,X1239,X1237,X1243] : (s(fun(X1235,X1236),X1244) = s(fun(X1235,X1236),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))) | s(X1236,happ(s(fun(X1235,X1236),X1244),s(X1235,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(fun('type.integer.int',fun(X1235,X1236)),X1238),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1235,X1236))),X1240),s(fun('type.num.num',fun(X1235,X1236)),X1241),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1235,X1236)))))),X1242),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1235,X1236)))))),X1243)),X1244,X1235,X1236)))) != s(X1236,happ(s(fun(X1235,X1236),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(X1235,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(fun('type.integer.int',fun(X1235,X1236)),X1238),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1235,X1236))),X1240),s(fun('type.num.num',fun(X1235,X1236)),X1241),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1235,X1236)))))),X1242),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1235,X1236)))))),X1243)),X1244,X1235,X1236))))) )),
  inference(forward_demodulation,[],[f26016,f323])).
fof(f26016,plain,(
  ( ! [X1242,X1240,X1238,X1236,X1244,X1235,X1241,X1239,X1237,X1243] : (s(X1236,happ(s(fun(X1235,X1236),X1244),s(X1235,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(fun('type.integer.int',fun(X1235,X1236)),X1238),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1235,X1236))),X1240),s(fun('type.num.num',fun(X1235,X1236)),X1241),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1235,X1236)))))),X1242),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1235,X1236)))))),X1243)),X1244,X1235,X1236)))) != s(X1236,happ(s(fun(X1235,X1236),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(X1235,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(fun('type.integer.int',fun(X1235,X1236)),X1238),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1235,X1236))),X1240),s(fun('type.num.num',fun(X1235,X1236)),X1241),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1235,X1236)))))),X1242),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1235,X1236)))))),X1243)),X1244,X1235,X1236)))) | s(fun(X1235,X1236),X1244) = s(fun(X1235,X1236),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1237))),s(fun('type.integer.int',fun(X1235,X1236)),X1238),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1235,X1236)),X1239),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1235,X1236))),X1240),s(fun('type.num.num',fun(X1235,X1236)),X1241),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1235,X1236)))))),X1242),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1235,X1236)))))),X1243)))) )),
  inference(superposition,[],[f352,f323])).
fof(f26126,plain,(
  ( ! [X1234,X1232,X1227,X1225,X1231,X1229,X1233,X1226,X1230,X1228] : (s(fun(X1225,X1226),X1234) = s(fun(X1225,X1226),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))) | s(X1226,happ(s(fun(X1225,X1226),X1234),s(X1225,sK13(X1234,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(fun('type.integer.int',fun(X1225,X1226)),X1228),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1225,X1226))),X1230),s(fun('type.num.num',fun(X1225,X1226)),X1231),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1225,X1226)))))),X1232),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1225,X1226)))))),X1233)),X1225,X1226)))) != s(X1226,happ(s(fun(X1225,X1226),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(X1225,sK13(X1234,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(fun('type.integer.int',fun(X1225,X1226)),X1228),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1225,X1226))),X1230),s(fun('type.num.num',fun(X1225,X1226)),X1231),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1225,X1226)))))),X1232),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1225,X1226)))))),X1233)),X1225,X1226))))) )),
  inference(forward_demodulation,[],[f26015,f323])).
fof(f26015,plain,(
  ( ! [X1234,X1232,X1227,X1225,X1231,X1229,X1233,X1226,X1230,X1228] : (s(X1226,happ(s(fun(X1225,X1226),X1234),s(X1225,sK13(X1234,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(fun('type.integer.int',fun(X1225,X1226)),X1228),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1225,X1226))),X1230),s(fun('type.num.num',fun(X1225,X1226)),X1231),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1225,X1226)))))),X1232),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1225,X1226)))))),X1233)),X1225,X1226)))) != s(X1226,happ(s(fun(X1225,X1226),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(X1225,sK13(X1234,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(fun('type.integer.int',fun(X1225,X1226)),X1228),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1225,X1226))),X1230),s(fun('type.num.num',fun(X1225,X1226)),X1231),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1225,X1226)))))),X1232),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1225,X1226)))))),X1233)),X1225,X1226)))) | s(fun(X1225,X1226),X1234) = s(fun(X1225,X1226),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1227))),s(fun('type.integer.int',fun(X1225,X1226)),X1228),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1225,X1226)),X1229),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1225,X1226))),X1230),s(fun('type.num.num',fun(X1225,X1226)),X1231),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1225,X1226)))))),X1232),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1225,X1226)))))),X1233)))) )),
  inference(superposition,[],[f352,f323])).
fof(f26008,plain,(
  ( ! [X1151,X1149,X1143,X1153,X1146,X1144,X1150,X1148,X1154,X1152,X1147,X1145] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1143,X1144),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1143,X1144)),X1147),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1145))),s(fun(X1144,X1143),X1152)))) | ~p(s(bool,happ(s(fun(X1143,bool),X1153),s(X1143,happ(s(fun(X1144,X1143),X1152),s(X1144,X1154)))))) | p(s(bool,happ(s(fun(X1143,bool),X1153),s(X1143,sK11(X1153,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1145))),s(fun('type.integer.int',fun(X1143,X1144)),X1146),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1143,X1144)),X1147),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1143,X1144))),X1148),s(fun('type.num.num',fun(X1143,X1144)),X1149),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1143,X1144)))))),X1150),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1143,X1144)))))),X1151)),X1152,X1144,X1143)))))) )),
  inference(superposition,[],[f347,f323])).
fof(f26119,plain,(
  ( ! [X1139,X1137,X1141,X1134,X1132,X1138,X1136,X1142,X1131,X1140,X1135,X1133] : (~p(s(bool,happ(s(fun(X1132,bool),X1141),s(X1132,happ(s(fun(X1131,X1132),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,X1132)),X1135),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1133))),s(X1131,X1142)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1132,X1131),X1140),s(fun(X1131,X1132),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,X1132)),X1135),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1133)))))) | p(s(bool,happ(s(fun(X1132,bool),X1141),s(X1132,sK11(X1141,X1140,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1133))),s(fun('type.integer.int',fun(X1131,X1132)),X1134),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,X1132)),X1135),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,X1132))),X1136),s(fun('type.num.num',fun(X1131,X1132)),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,X1132)))))),X1138),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,X1132)))))),X1139)),X1131,X1132)))))) )),
  inference(forward_demodulation,[],[f26007,f323])).
fof(f26007,plain,(
  ( ! [X1139,X1137,X1141,X1134,X1132,X1138,X1136,X1142,X1131,X1140,X1135,X1133] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1132,X1131),X1140),s(fun(X1131,X1132),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,X1132)),X1135),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1133)))))) | ~p(s(bool,happ(s(fun(X1132,bool),X1141),s(X1132,happ(s(fun(X1131,X1132),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1133))),s(fun('type.integer.int',fun(X1131,X1132)),X1134),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,X1132)),X1135),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,X1132))),X1136),s(fun('type.num.num',fun(X1131,X1132)),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,X1132)))))),X1138),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,X1132)))))),X1139))),s(X1131,X1142)))))) | p(s(bool,happ(s(fun(X1132,bool),X1141),s(X1132,sK11(X1141,X1140,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1133))),s(fun('type.integer.int',fun(X1131,X1132)),X1134),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1131,X1132)),X1135),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1131,X1132))),X1136),s(fun('type.num.num',fun(X1131,X1132)),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1131,X1132)))))),X1138),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1131,X1132)))))),X1139)),X1131,X1132)))))) )),
  inference(superposition,[],[f347,f323])).
fof(f26006,plain,(
  ( ! [X1130,X1128,X1122,X1120,X1126,X1124,X1119,X1129,X1123,X1121,X1127,X1125] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1119,X1120),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1119,X1120)),X1123),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1121))),s(fun(X1120,X1119),X1128)))) | ~p(s(bool,happ(s(fun(X1119,bool),X1129),s(X1119,X1130)))) | p(s(bool,happ(s(fun(X1119,bool),X1129),s(X1119,happ(s(fun(X1120,X1119),X1128),s(X1120,sK10(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1121))),s(fun('type.integer.int',fun(X1119,X1120)),X1122),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1119,X1120)),X1123),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1119,X1120))),X1124),s(fun('type.num.num',fun(X1119,X1120)),X1125),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1119,X1120)))))),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1119,X1120)))))),X1127)),X1128,X1120,X1119)))))))) )),
  inference(superposition,[],[f346,f323])).
fof(f26118,plain,(
  ( ! [X1112,X1118,X1116,X1110,X1108,X1115,X1113,X1117,X1107,X1111,X1109,X1114] : (p(s(bool,happ(s(fun(X1108,bool),X1117),s(X1108,happ(s(fun(X1107,X1108),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1107,X1108)),X1111),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1109))),s(X1107,sK10(X1117,X1116,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1109))),s(fun('type.integer.int',fun(X1107,X1108)),X1110),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1107,X1108)),X1111),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1107,X1108))),X1112),s(fun('type.num.num',fun(X1107,X1108)),X1113),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1107,X1108)))))),X1114),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1107,X1108)))))),X1115)),X1107,X1108))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1108,X1107),X1116),s(fun(X1107,X1108),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1107,X1108)),X1111),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1109)))))) | ~p(s(bool,happ(s(fun(X1108,bool),X1117),s(X1108,X1118))))) )),
  inference(forward_demodulation,[],[f26005,f323])).
fof(f26005,plain,(
  ( ! [X1112,X1118,X1116,X1110,X1108,X1115,X1113,X1117,X1107,X1111,X1109,X1114] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1108,X1107),X1116),s(fun(X1107,X1108),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1107,X1108)),X1111),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1109)))))) | ~p(s(bool,happ(s(fun(X1108,bool),X1117),s(X1108,X1118)))) | p(s(bool,happ(s(fun(X1108,bool),X1117),s(X1108,happ(s(fun(X1107,X1108),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1109))),s(fun('type.integer.int',fun(X1107,X1108)),X1110),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1107,X1108)),X1111),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1107,X1108))),X1112),s(fun('type.num.num',fun(X1107,X1108)),X1113),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1107,X1108)))))),X1114),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1107,X1108)))))),X1115))),s(X1107,sK10(X1117,X1116,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1109))),s(fun('type.integer.int',fun(X1107,X1108)),X1110),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1107,X1108)),X1111),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1107,X1108))),X1112),s(fun('type.num.num',fun(X1107,X1108)),X1113),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1107,X1108)))))),X1114),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1107,X1108)))))),X1115)),X1107,X1108)))))))) )),
  inference(superposition,[],[f346,f323])).
fof(f26004,plain,(
  ( ! [X1106,X1104,X1099,X1097,X1103,X1101,X1095,X1105,X1098,X1096,X1102,X1100] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1095,X1096),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1095,X1096)),X1099),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1097))),s(fun(X1096,X1095),X1104)))) | ~p(s(bool,happ(s(fun(X1095,bool),X1105),s(X1095,happ(s(fun(X1096,X1095),X1104),s(X1096,sK9(X1105,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1097))),s(fun('type.integer.int',fun(X1095,X1096)),X1098),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1095,X1096)),X1099),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1095,X1096))),X1100),s(fun('type.num.num',fun(X1095,X1096)),X1101),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1095,X1096)))))),X1102),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1095,X1096)))))),X1103)),X1104,X1096,X1095))))))) | p(s(bool,happ(s(fun(X1095,bool),X1105),s(X1095,X1106))))) )),
  inference(superposition,[],[f345,f323])).
fof(f26117,plain,(
  ( ! [X1087,X1085,X1091,X1089,X1093,X1086,X1084,X1090,X1088,X1094,X1092,X1083] : (~p(s(bool,happ(s(fun(X1084,bool),X1093),s(X1084,happ(s(fun(X1083,X1084),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1083,X1084)),X1087),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1085))),s(X1083,sK9(X1093,X1092,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1085))),s(fun('type.integer.int',fun(X1083,X1084)),X1086),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1083,X1084)),X1087),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1083,X1084))),X1088),s(fun('type.num.num',fun(X1083,X1084)),X1089),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1083,X1084)))))),X1090),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1083,X1084)))))),X1091)),X1083,X1084))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1084,X1083),X1092),s(fun(X1083,X1084),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1083,X1084)),X1087),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1085)))))) | p(s(bool,happ(s(fun(X1084,bool),X1093),s(X1084,X1094))))) )),
  inference(forward_demodulation,[],[f26003,f323])).
fof(f26003,plain,(
  ( ! [X1087,X1085,X1091,X1089,X1093,X1086,X1084,X1090,X1088,X1094,X1092,X1083] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1084,X1083),X1092),s(fun(X1083,X1084),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1083,X1084)),X1087),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1085)))))) | ~p(s(bool,happ(s(fun(X1084,bool),X1093),s(X1084,happ(s(fun(X1083,X1084),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1085))),s(fun('type.integer.int',fun(X1083,X1084)),X1086),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1083,X1084)),X1087),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1083,X1084))),X1088),s(fun('type.num.num',fun(X1083,X1084)),X1089),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1083,X1084)))))),X1090),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1083,X1084)))))),X1091))),s(X1083,sK9(X1093,X1092,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1085))),s(fun('type.integer.int',fun(X1083,X1084)),X1086),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1083,X1084)),X1087),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1083,X1084))),X1088),s(fun('type.num.num',fun(X1083,X1084)),X1089),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1083,X1084)))))),X1090),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1083,X1084)))))),X1091)),X1083,X1084))))))) | p(s(bool,happ(s(fun(X1084,bool),X1093),s(X1084,X1094))))) )),
  inference(superposition,[],[f345,f323])).
fof(f26002,plain,(
  ( ! [X1081,X1075,X1073,X1079,X1077,X1082,X1080,X1074,X1072,X1078,X1076,X1071] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1071,X1072),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1071,X1072)),X1075),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1073))),s(fun(X1072,X1071),X1080)))) | ~p(s(bool,happ(s(fun(X1071,bool),X1081),s(X1071,sK8(X1081,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1073))),s(fun('type.integer.int',fun(X1071,X1072)),X1074),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1071,X1072)),X1075),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1071,X1072))),X1076),s(fun('type.num.num',fun(X1071,X1072)),X1077),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1071,X1072)))))),X1078),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1071,X1072)))))),X1079)),X1080,X1072,X1071))))) | p(s(bool,happ(s(fun(X1071,bool),X1081),s(X1071,happ(s(fun(X1072,X1071),X1080),s(X1072,X1082))))))) )),
  inference(superposition,[],[f344,f323])).
fof(f26116,plain,(
  ( ! [X1066,X1064,X1070,X1068,X1062,X1060,X1067,X1065,X1069,X1059,X1063,X1061] : (p(s(bool,happ(s(fun(X1060,bool),X1069),s(X1060,happ(s(fun(X1059,X1060),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,X1060)),X1063),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1061))),s(X1059,X1070)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1060,X1059),X1068),s(fun(X1059,X1060),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,X1060)),X1063),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1061)))))) | ~p(s(bool,happ(s(fun(X1060,bool),X1069),s(X1060,sK8(X1069,X1068,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1061))),s(fun('type.integer.int',fun(X1059,X1060)),X1062),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,X1060)),X1063),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1059,X1060))),X1064),s(fun('type.num.num',fun(X1059,X1060)),X1065),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,X1060)))))),X1066),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1059,X1060)))))),X1067)),X1059,X1060)))))) )),
  inference(forward_demodulation,[],[f26001,f323])).
fof(f26001,plain,(
  ( ! [X1066,X1064,X1070,X1068,X1062,X1060,X1067,X1065,X1069,X1059,X1063,X1061] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1060,X1059),X1068),s(fun(X1059,X1060),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,X1060)),X1063),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1061)))))) | ~p(s(bool,happ(s(fun(X1060,bool),X1069),s(X1060,sK8(X1069,X1068,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1061))),s(fun('type.integer.int',fun(X1059,X1060)),X1062),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,X1060)),X1063),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1059,X1060))),X1064),s(fun('type.num.num',fun(X1059,X1060)),X1065),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,X1060)))))),X1066),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1059,X1060)))))),X1067)),X1059,X1060))))) | p(s(bool,happ(s(fun(X1060,bool),X1069),s(X1060,happ(s(fun(X1059,X1060),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1061))),s(fun('type.integer.int',fun(X1059,X1060)),X1062),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1059,X1060)),X1063),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1059,X1060))),X1064),s(fun('type.num.num',fun(X1059,X1060)),X1065),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1059,X1060)))))),X1066),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1059,X1060)))))),X1067))),s(X1059,X1070))))))) )),
  inference(superposition,[],[f344,f323])).
fof(f26115,plain,(
  ( ! [X971,X969,X967,X965,X970,X968,X972,X966] : (~p(s(bool,happ(s(fun('type.list.list'(X965),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X965),bool)),X968),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X966))),s('type.list.list'(X965),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X965),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X965),bool)),X968),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X966))),s('type.list.list'(X965),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X966))),s(fun('type.integer.int',fun('type.list.list'(X965),bool)),X967),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X965),bool)),X968),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X965),bool))),X969),s(fun('type.num.num',fun('type.list.list'(X965),bool)),X970),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X965),bool)))))),X971),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X965),bool)))))),X972)),X965)))))) )),
  inference(forward_demodulation,[],[f25994,f323])).
fof(f25994,plain,(
  ( ! [X971,X969,X967,X965,X970,X968,X972,X966] : (p(s(bool,happ(s(fun('type.list.list'(X965),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X965),bool)),X968),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X966))),s('type.list.list'(X965),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X966))),s(fun('type.integer.int',fun('type.list.list'(X965),bool)),X967),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X965),bool)),X968),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X965),bool))),X969),s(fun('type.num.num',fun('type.list.list'(X965),bool)),X970),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X965),bool)))))),X971),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X965),bool)))))),X972)),X965))))) | ~p(s(bool,happ(s(fun('type.list.list'(X965),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X966))),s(fun('type.integer.int',fun('type.list.list'(X965),bool)),X967),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X965),bool)),X968),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X965),bool))),X969),s(fun('type.num.num',fun('type.list.list'(X965),bool)),X970),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X965),bool)))))),X971),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X965),bool)))))),X972))),s('type.list.list'(X965),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f323])).
fof(f26114,plain,(
  ( ! [X957,X963,X961,X958,X956,X962,X960,X964,X959] : (p(s(bool,happ(s(fun('type.list.list'(X956),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s('type.list.list'(X956),X964)))) | ~p(s(bool,happ(s(fun('type.list.list'(X956),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s('type.list.list'(X956),'const.list.CONS_2'(s(X956,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963)),X956)),s('type.list.list'(X956),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963)),X956))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X956),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s('type.list.list'(X956),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f26113,f323])).
fof(f26113,plain,(
  ( ! [X957,X963,X961,X958,X956,X962,X960,X964,X959] : (~p(s(bool,happ(s(fun('type.list.list'(X956),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s('type.list.list'(X956),'const.list.CONS_2'(s(X956,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963)),X956)),s('type.list.list'(X956),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963)),X956))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X956),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s('type.list.list'(X956),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X956),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963))),s('type.list.list'(X956),X964))))) )),
  inference(forward_demodulation,[],[f25993,f323])).
fof(f25993,plain,(
  ( ! [X957,X963,X961,X958,X956,X962,X960,X964,X959] : (~p(s(bool,happ(s(fun('type.list.list'(X956),bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s('type.list.list'(X956),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X956),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963))),s('type.list.list'(X956),'const.list.CONS_2'(s(X956,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963)),X956)),s('type.list.list'(X956),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963)),X956))))))) | p(s(bool,happ(s(fun('type.list.list'(X956),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X957))),s(fun('type.integer.int',fun('type.list.list'(X956),bool)),X958),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X956),bool)),X959),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X956),bool))),X960),s(fun('type.num.num',fun('type.list.list'(X956),bool)),X961),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X956),bool)))))),X962),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X956),bool)))))),X963))),s('type.list.list'(X956),X964))))) )),
  inference(superposition,[],[f305,f323])).
fof(f25974,plain,(
  ( ! [X724,X726,X720,X722,X718,X725,X721,X723,X719] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X718,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X718,bool)),X721),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X719))))) | s(X718,X726) = s(X718,sK4(X726,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X719))),s(fun('type.integer.int',fun(X718,bool)),X720),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X718,bool)),X721),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X718,bool))),X722),s(fun('type.num.num',fun(X718,bool)),X723),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X718,bool)))))),X724),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X718,bool)))))),X725)),X718))) )),
  inference(superposition,[],[f823,f323])).
fof(f26110,plain,(
  ( ! [X716,X712,X714,X708,X710,X717,X713,X715,X709,X711] : (p(s(bool,happ(s(fun(X708,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(X708,sK6(X716,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(fun('type.integer.int',fun(X708,bool)),X710),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X708,bool))),X712),s(fun('type.num.num',fun(X708,bool)),X713),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X708,bool)))))),X714),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X708,bool)))))),X715)),X708))))) | ~p(s(bool,happ(s(fun(X708,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(X708,sK5(X716,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(fun('type.integer.int',fun(X708,bool)),X710),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X708,bool))),X712),s(fun('type.num.num',fun(X708,bool)),X713),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X708,bool)))))),X714),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X708,bool)))))),X715)),X708))))) | ~p(s(bool,happ(s(fun(X708,bool),X716),s(X708,X717))))) )),
  inference(forward_demodulation,[],[f25973,f323])).
fof(f25973,plain,(
  ( ! [X716,X712,X714,X708,X710,X717,X713,X715,X709,X711] : (~p(s(bool,happ(s(fun(X708,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(X708,sK5(X716,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(fun('type.integer.int',fun(X708,bool)),X710),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X708,bool))),X712),s(fun('type.num.num',fun(X708,bool)),X713),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X708,bool)))))),X714),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X708,bool)))))),X715)),X708))))) | ~p(s(bool,happ(s(fun(X708,bool),X716),s(X708,X717)))) | p(s(bool,happ(s(fun(X708,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(fun('type.integer.int',fun(X708,bool)),X710),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X708,bool))),X712),s(fun('type.num.num',fun(X708,bool)),X713),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X708,bool)))))),X714),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X708,bool)))))),X715))),s(X708,sK6(X716,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X709))),s(fun('type.integer.int',fun(X708,bool)),X710),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X708,bool)),X711),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X708,bool))),X712),s(fun('type.num.num',fun(X708,bool)),X713),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X708,bool)))))),X714),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X708,bool)))))),X715)),X708)))))) )),
  inference(superposition,[],[f315,f323])).
fof(f26109,plain,(
  ( ! [X705,X699,X707,X700,X702,X704,X698,X706,X701,X703] : (p(s(bool,happ(s(fun(X698,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(X698,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(fun('type.integer.int',fun(X698,bool)),X700),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X698,bool))),X702),s(fun('type.num.num',fun(X698,bool)),X703),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X698,bool)))))),X704),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X698,bool)))))),X705)),X707,X698))))) | ~p(s(bool,happ(s(fun(X698,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(X698,X706)))) | p(s(bool,happ(s(fun(X698,bool),X707),s(X698,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(fun('type.integer.int',fun(X698,bool)),X700),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X698,bool))),X702),s(fun('type.num.num',fun(X698,bool)),X703),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X698,bool)))))),X704),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X698,bool)))))),X705)),X707,X698)))))) )),
  inference(forward_demodulation,[],[f25972,f323])).
fof(f25972,plain,(
  ( ! [X707,X699,X705,X700,X702,X706,X698,X704,X701,X703] : (~p(s(bool,happ(s(fun(X698,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(X698,X706)))) | p(s(bool,happ(s(fun(X698,bool),X707),s(X698,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(fun('type.integer.int',fun(X698,bool)),X700),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X698,bool))),X702),s(fun('type.num.num',fun(X698,bool)),X703),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X698,bool)))))),X704),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X698,bool)))))),X705)),X707,X698))))) | p(s(bool,happ(s(fun(X698,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(fun('type.integer.int',fun(X698,bool)),X700),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X698,bool))),X702),s(fun('type.num.num',fun(X698,bool)),X703),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X698,bool)))))),X704),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X698,bool)))))),X705))),s(X698,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X699))),s(fun('type.integer.int',fun(X698,bool)),X700),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X698,bool)),X701),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X698,bool))),X702),s(fun('type.num.num',fun(X698,bool)),X703),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X698,bool)))))),X704),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X698,bool)))))),X705)),X707,X698)))))) )),
  inference(superposition,[],[f314,f323])).
fof(f25971,plain,(
  ( ! [X697,X693,X695,X689,X691,X696,X692,X694,X690] : (p(s(bool,'|dollar|exists_1'(s(fun(X689,bool),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X689,bool)),X692),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X690)))))) | s(X689,X697) = s(X689,sK4(X697,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X690))),s(fun('type.integer.int',fun(X689,bool)),X691),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X689,bool)),X692),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X689,bool))),X693),s(fun('type.num.num',fun(X689,bool)),X694),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X689,bool)))))),X695),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X689,bool)))))),X696)),X689))) )),
  inference(superposition,[],[f312,f323])).
fof(f25956,plain,(
  ( ! [X575,X580,X576,X578,X574,X581,X577,X579] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X581),'const.sum.INL_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X576),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X574))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X574))),s(fun('type.integer.int',bool),X575),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X576),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X577),s(fun('type.num.num',bool),X578),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X579),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X580)))) )),
  inference(superposition,[],[f5684,f323])).
fof(f25955,plain,(
  ( ! [X573,X569,X571,X567,X572,X568,X570,X566] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X573,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X568),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X566))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X566))),s(fun('type.integer.int',bool),X567),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X568),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X569),s(fun('type.num.num',bool),X570),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X571),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X572)))) )),
  inference(superposition,[],[f5495,f323])).
fof(f25950,plain,(
  ( ! [X528,X530,X524,X526,X529,X531,X525,X527,X523] : (~p(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X525),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X523)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X530),bool),sK16(X531,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X523))),s(fun('type.integer.int',bool),X524),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X525),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X526),s(fun('type.num.num',bool),X527),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X528),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X529)),X530,bool))))) )),
  inference(superposition,[],[f3944,f323])).
fof(f25938,plain,(
  ( ! [X436,X438,X432,X434,X431,X437,X433,X435] : (s(bool,X438) != s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X433),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X431))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X431))),s(fun('type.integer.int',bool),X432),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X433),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X434),s(fun('type.num.num',bool),X435),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X436),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X437))) | s(bool,'T_0') = s(bool,X438)) )),
  inference(superposition,[],[f1683,f323])).
fof(f25937,plain,(
  ( ! [X428,X430,X424,X426,X423,X429,X425,X427] : (s(bool,X430) != s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X425),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X423))) | s(bool,'F_0') = s(bool,X430) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X423))),s(fun('type.integer.int',bool),X424),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X425),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X426),s(fun('type.num.num',bool),X427),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X428),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X429)))) )),
  inference(superposition,[],[f1683,f323])).
fof(f25931,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X384,X381] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X384),'const.sum.INL_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X379),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X377))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X377))),s(fun('type.integer.int',bool),X378),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X379),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X380),s(fun('type.num.num',bool),X381),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X382),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X383)))) )),
  inference(superposition,[],[f1396,f323])).
fof(f25930,plain,(
  ( ! [X372,X374,X370,X376,X373,X375,X369,X371] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X376,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X371),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X369))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X369))),s(fun('type.integer.int',bool),X370),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X371),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X372),s(fun('type.num.num',bool),X373),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X374),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X375)))) )),
  inference(superposition,[],[f1395,f323])).
fof(f26080,plain,(
  ( ! [X356,X358,X352,X354,X357,X353,X355] : (s(bool,'T_0') != s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X352))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X352))),s(fun('type.integer.int',bool),X353),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X355),s(fun('type.num.num',bool),X356),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X357),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X358)))) )),
  inference(forward_demodulation,[],[f25928,f427])).
fof(f25928,plain,(
  ( ! [X356,X358,X352,X354,X357,X359,X353,X355] : (s(bool,'const.ind_type.ISO_2'(s(fun(X359,X359),'_i_0_0'),s(fun(X359,X359),'_i_0_0'))) != s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X352))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X352))),s(fun('type.integer.int',bool),X353),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X355),s(fun('type.num.num',bool),X356),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X357),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X358)))) )),
  inference(superposition,[],[f790,f323])).
fof(f25927,plain,(
  ( ! [X350,X344,X346,X343,X349,X351,X345,X347,X348] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X350),'const.pair.,_2'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X345),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X343))),s(X350,X351))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X343))),s(fun('type.integer.int',bool),X344),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X345),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X346),s(fun('type.num.num',bool),X347),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X348),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X349)))) )),
  inference(superposition,[],[f730,f323])).
fof(f25926,plain,(
  ( ! [X335,X341,X337,X339,X334,X340,X342,X336,X338] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X341,bool),'const.pair.,_2'(s(X341,X342),s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X336),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X334))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X334))),s(fun('type.integer.int',bool),X335),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X336),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X337),s(fun('type.num.num',bool),X338),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X339),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X340)))) )),
  inference(superposition,[],[f673,f323])).
fof(f25925,plain,(
  ( ! [X327,X333,X329,X331,X326,X332,X328,X330] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X328),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X326))),s(fun('type.num.num',bool),X333),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X326))),s(fun('type.integer.int',bool),X327),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X328),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X329),s(fun('type.num.num',bool),X330),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X331),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X332)))) )),
  inference(superposition,[],[f620,f323])).
fof(f25924,plain,(
  ( ! [X325,X321,X323,X318,X324,X320,X322,X319] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X325,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X320),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X318))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X318))),s(fun('type.integer.int',bool),X319),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X320),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X321),s(fun('type.num.num',bool),X322),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X323),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X324)))) )),
  inference(superposition,[],[f527,f323])).
fof(f25923,plain,(
  ( ! [X313,X315,X310,X316,X312,X314,X311,X317] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X317),'const.sum.INL_1'(s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X312),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X310))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X310))),s(fun('type.integer.int',bool),X311),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X312),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X313),s(fun('type.num.num',bool),X314),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X315),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X316)))) )),
  inference(superposition,[],[f500,f323])).
fof(f25873,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X25),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))),s(fun('type.integer.int',bool),X24),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X25),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X26),s(fun('type.num.num',bool),X27),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X28),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X29)))) )),
  inference(superposition,[],[f323,f432])).
fof(f25872,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X17),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15))) | s(bool,X22) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15))),s(fun('type.integer.int',bool),X16),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X17),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X18),s(fun('type.num.num',bool),X19),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X20),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f323,f432])).
fof(f25871,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X10),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))),s(fun('type.integer.int',bool),X9),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X10),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X11),s(fun('type.num.num',bool),X12),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X14)))) )),
  inference(superposition,[],[f323,f264])).
fof(f25557,plain,(
  ( ! [X147,X148] : (s(bool,'T_0') != s(bool,X147) | s(bool,'T_0') = s(bool,sK4(X147,X148,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X148)))) ) | $spl28),
  inference(forward_demodulation,[],[f25490,f24553])).
fof(f25490,plain,(
  ( ! [X147,X148] : (s(bool,X147) != s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,sK4(X147,X148,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X148)))) ) | $spl28),
  inference(superposition,[],[f24880,f823])).
fof(f25326,plain,(
  ( ! [X1617,X1619,X1621,X1623,X1615,X1616,X1618,X1620,X1622] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1623))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.list.list'('type.closSem.v'),'type.integer.int'),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X1619),s('type.num.num',X1615))),s('type.list.list'('type.closSem.v'),X1616))))) | s('type.integer.int',X1623) = s('type.integer.int','const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1615),s('type.list.list'('type.closSem.v'),X1616))),s(fun('type.integer.int','type.integer.int'),X1617),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X1618),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X1619),s(fun('type.num.num','type.integer.int'),X1620),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X1621),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X1622)))) )),
  inference(superposition,[],[f332,f324])).
fof(f25312,plain,(
  ( ! [X1472,X1474,X1476,X1478,X1473,X1475,X1477,X1479,X1471] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1479))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X1475),s('type.num.num',X1471))),s('type.list.list'('type.closSem.v'),X1472))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1479) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1471),s('type.list.list'('type.closSem.v'),X1472))),s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1473),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1474),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X1475),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1476),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1477),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1478)))) )),
  inference(superposition,[],[f334,f324])).
fof(f25308,plain,(
  ( ! [X1434,X1428,X1430,X1436,X1426,X1438,X1433,X1427,X1429,X1431,X1435,X1437,X1432] : (s(X1427,happ(s(fun('type.list.list'(X1426),X1427),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1428),s('type.list.list'('type.closSem.v'),X1429))),s(fun('type.integer.int',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),X1430),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),X1431),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427))))),X1432),s(fun('type.num.num',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),X1433),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))))))),X1434),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))))))),X1435)),X1436,X1426,X1427)),s('type.list.list'(X1426),'const.list.CONS_2'(s(X1426,X1437),s('type.list.list'(X1426),X1438))))) = s(X1427,happ(s(fun(X1427,X1427),happ(s(fun('type.list.list'(X1426),fun(X1427,X1427)),happ(s(fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427))),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427))))),X1432),s('type.num.num',X1428))),s('type.list.list'('type.closSem.v'),X1429))),s(X1426,X1437))),s('type.list.list'(X1426),X1438))),s(X1427,happ(s(fun('type.list.list'(X1426),X1427),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1428),s('type.list.list'('type.closSem.v'),X1429))),s(fun('type.integer.int',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),X1430),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),X1431),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427))))),X1432),s(fun('type.num.num',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))),X1433),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))))))),X1434),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1426,fun('type.list.list'(X1426),fun(X1427,X1427)))))))),X1435)),X1436,X1426,X1427)),s('type.list.list'(X1426),X1438)))))) )),
  inference(superposition,[],[f357,f324])).
fof(f25408,plain,(
  ( ! [X1329,X1331,X1321,X1323,X1325,X1327,X1328,X1330,X1322,X1324,X1326] : (s(X1321,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)) != s(X1321,happ(s(fun(X1322,X1321),X1331),s(X1322,happ(s(fun(X1321,X1322),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1321,X1322)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s('type.num.num',X1323))),s('type.list.list'('type.closSem.v'),X1324))),s(X1321,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)))))) | s(X1322,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)) != s(X1322,happ(s(fun(X1321,X1322),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1321,X1322)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s('type.num.num',X1323))),s('type.list.list'('type.closSem.v'),X1324))),s(X1321,happ(s(fun(X1322,X1321),X1331),s(X1322,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1322,X1321),X1331),s(fun(X1321,X1322),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1321,X1322)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s('type.num.num',X1323))),s('type.list.list'('type.closSem.v'),X1324))))))) )),
  inference(forward_demodulation,[],[f25407,f324])).
fof(f25407,plain,(
  ( ! [X1329,X1331,X1321,X1323,X1325,X1327,X1328,X1330,X1322,X1324,X1326] : (s(X1322,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)) != s(X1322,happ(s(fun(X1321,X1322),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1321,X1322)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s('type.num.num',X1323))),s('type.list.list'('type.closSem.v'),X1324))),s(X1321,happ(s(fun(X1322,X1321),X1331),s(X1322,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1322,X1321),X1331),s(fun(X1321,X1322),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1321,X1322)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s('type.num.num',X1323))),s('type.list.list'('type.closSem.v'),X1324)))))) | s(X1321,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)) != s(X1321,happ(s(fun(X1322,X1321),X1331),s(X1322,happ(s(fun(X1321,X1322),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330))),s(X1321,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321))))))) )),
  inference(forward_demodulation,[],[f25300,f324])).
fof(f25300,plain,(
  ( ! [X1329,X1331,X1321,X1323,X1325,X1327,X1328,X1330,X1322,X1324,X1326] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1322,X1321),X1331),s(fun(X1321,X1322),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1321,X1322)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s('type.num.num',X1323))),s('type.list.list'('type.closSem.v'),X1324)))))) | s(X1322,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)) != s(X1322,happ(s(fun(X1321,X1322),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330))),s(X1321,happ(s(fun(X1322,X1321),X1331),s(X1322,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)))))) | s(X1321,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321)) != s(X1321,happ(s(fun(X1322,X1321),X1331),s(X1322,happ(s(fun(X1321,X1322),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330))),s(X1321,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1323),s('type.list.list'('type.closSem.v'),X1324))),s(fun('type.integer.int',fun(X1321,X1322)),X1325),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1321,X1322)),X1326),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1321,X1322))),X1327),s(fun('type.num.num',fun(X1321,X1322)),X1328),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1321,X1322)))))),X1329),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1321,X1322)))))),X1330)),X1331,X1322,X1321))))))) )),
  inference(superposition,[],[f355,f324])).
fof(f25406,plain,(
  ( ! [X1310,X1313,X1315,X1317,X1319,X1311,X1320,X1312,X1314,X1316,X1318] : (s(X1311,sK14(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)) != s(X1311,happ(s(fun(X1310,X1311),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1310,X1311)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s('type.num.num',X1312))),s('type.list.list'('type.closSem.v'),X1313))),s(X1310,happ(s(fun(X1311,X1310),X1320),s(X1311,sK14(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)))))) | s(X1310,sK15(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)) != s(X1310,happ(s(fun(X1311,X1310),X1320),s(X1311,happ(s(fun(X1310,X1311),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1310,X1311)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s('type.num.num',X1312))),s('type.list.list'('type.closSem.v'),X1313))),s(X1310,sK15(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1310,X1311),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1310,X1311)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s('type.num.num',X1312))),s('type.list.list'('type.closSem.v'),X1313))),s(fun(X1311,X1310),X1320))))) )),
  inference(forward_demodulation,[],[f25405,f324])).
fof(f25405,plain,(
  ( ! [X1310,X1313,X1315,X1317,X1319,X1311,X1320,X1312,X1314,X1316,X1318] : (s(X1310,sK15(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)) != s(X1310,happ(s(fun(X1311,X1310),X1320),s(X1311,happ(s(fun(X1310,X1311),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1310,X1311)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s('type.num.num',X1312))),s('type.list.list'('type.closSem.v'),X1313))),s(X1310,sK15(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1310,X1311),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1310,X1311)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s('type.num.num',X1312))),s('type.list.list'('type.closSem.v'),X1313))),s(fun(X1311,X1310),X1320)))) | s(X1311,sK14(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)) != s(X1311,happ(s(fun(X1310,X1311),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319))),s(X1310,happ(s(fun(X1311,X1310),X1320),s(X1311,sK14(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311))))))) )),
  inference(forward_demodulation,[],[f25299,f324])).
fof(f25299,plain,(
  ( ! [X1310,X1313,X1315,X1317,X1319,X1311,X1320,X1312,X1314,X1316,X1318] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1310,X1311),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1310,X1311)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s('type.num.num',X1312))),s('type.list.list'('type.closSem.v'),X1313))),s(fun(X1311,X1310),X1320)))) | s(X1310,sK15(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)) != s(X1310,happ(s(fun(X1311,X1310),X1320),s(X1311,happ(s(fun(X1310,X1311),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319))),s(X1310,sK15(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)))))) | s(X1311,sK14(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311)) != s(X1311,happ(s(fun(X1310,X1311),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319))),s(X1310,happ(s(fun(X1311,X1310),X1320),s(X1311,sK14(X1320,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1312),s('type.list.list'('type.closSem.v'),X1313))),s(fun('type.integer.int',fun(X1310,X1311)),X1314),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1310,X1311)),X1315),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1310,X1311))),X1316),s(fun('type.num.num',fun(X1310,X1311)),X1317),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1310,X1311)))))),X1318),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1310,X1311)))))),X1319)),X1310,X1311))))))) )),
  inference(superposition,[],[f355,f324])).
fof(f25400,plain,(
  ( ! [X1258,X1256,X1260,X1254,X1252,X1259,X1257,X1261,X1251,X1255,X1253] : (s(fun(X1251,X1252),X1261) = s(fun(X1251,X1252),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1251,X1252)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s('type.num.num',X1253))),s('type.list.list'('type.closSem.v'),X1254))) | s(X1252,happ(s(fun(X1251,X1252),X1261),s(X1251,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1253),s('type.list.list'('type.closSem.v'),X1254))),s(fun('type.integer.int',fun(X1251,X1252)),X1255),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1251,X1252)),X1256),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s(fun('type.num.num',fun(X1251,X1252)),X1258),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1251,X1252)))))),X1259),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1251,X1252)))))),X1260)),X1261,X1251,X1252)))) != s(X1252,happ(s(fun(X1251,X1252),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1251,X1252)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s('type.num.num',X1253))),s('type.list.list'('type.closSem.v'),X1254))),s(X1251,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1253),s('type.list.list'('type.closSem.v'),X1254))),s(fun('type.integer.int',fun(X1251,X1252)),X1255),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1251,X1252)),X1256),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s(fun('type.num.num',fun(X1251,X1252)),X1258),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1251,X1252)))))),X1259),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1251,X1252)))))),X1260)),X1261,X1251,X1252))))) )),
  inference(forward_demodulation,[],[f25294,f324])).
fof(f25294,plain,(
  ( ! [X1258,X1256,X1260,X1254,X1252,X1259,X1257,X1261,X1251,X1255,X1253] : (s(X1252,happ(s(fun(X1251,X1252),X1261),s(X1251,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1253),s('type.list.list'('type.closSem.v'),X1254))),s(fun('type.integer.int',fun(X1251,X1252)),X1255),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1251,X1252)),X1256),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s(fun('type.num.num',fun(X1251,X1252)),X1258),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1251,X1252)))))),X1259),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1251,X1252)))))),X1260)),X1261,X1251,X1252)))) != s(X1252,happ(s(fun(X1251,X1252),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1251,X1252)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s('type.num.num',X1253))),s('type.list.list'('type.closSem.v'),X1254))),s(X1251,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1253),s('type.list.list'('type.closSem.v'),X1254))),s(fun('type.integer.int',fun(X1251,X1252)),X1255),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1251,X1252)),X1256),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s(fun('type.num.num',fun(X1251,X1252)),X1258),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1251,X1252)))))),X1259),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1251,X1252)))))),X1260)),X1261,X1251,X1252)))) | s(fun(X1251,X1252),X1261) = s(fun(X1251,X1252),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1253),s('type.list.list'('type.closSem.v'),X1254))),s(fun('type.integer.int',fun(X1251,X1252)),X1255),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1251,X1252)),X1256),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1251,X1252))),X1257),s(fun('type.num.num',fun(X1251,X1252)),X1258),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1251,X1252)))))),X1259),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1251,X1252)))))),X1260)))) )),
  inference(superposition,[],[f352,f324])).
fof(f25399,plain,(
  ( ! [X1242,X1240,X1246,X1244,X1250,X1248,X1243,X1241,X1247,X1245,X1249] : (s(fun(X1240,X1241),X1250) = s(fun(X1240,X1241),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1240,X1241)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s('type.num.num',X1242))),s('type.list.list'('type.closSem.v'),X1243))) | s(X1241,happ(s(fun(X1240,X1241),X1250),s(X1240,sK13(X1250,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1242),s('type.list.list'('type.closSem.v'),X1243))),s(fun('type.integer.int',fun(X1240,X1241)),X1244),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1240,X1241)),X1245),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s(fun('type.num.num',fun(X1240,X1241)),X1247),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1240,X1241)))))),X1248),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1240,X1241)))))),X1249)),X1240,X1241)))) != s(X1241,happ(s(fun(X1240,X1241),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1240,X1241)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s('type.num.num',X1242))),s('type.list.list'('type.closSem.v'),X1243))),s(X1240,sK13(X1250,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1242),s('type.list.list'('type.closSem.v'),X1243))),s(fun('type.integer.int',fun(X1240,X1241)),X1244),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1240,X1241)),X1245),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s(fun('type.num.num',fun(X1240,X1241)),X1247),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1240,X1241)))))),X1248),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1240,X1241)))))),X1249)),X1240,X1241))))) )),
  inference(forward_demodulation,[],[f25293,f324])).
fof(f25293,plain,(
  ( ! [X1242,X1240,X1246,X1244,X1250,X1248,X1243,X1241,X1247,X1245,X1249] : (s(X1241,happ(s(fun(X1240,X1241),X1250),s(X1240,sK13(X1250,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1242),s('type.list.list'('type.closSem.v'),X1243))),s(fun('type.integer.int',fun(X1240,X1241)),X1244),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1240,X1241)),X1245),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s(fun('type.num.num',fun(X1240,X1241)),X1247),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1240,X1241)))))),X1248),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1240,X1241)))))),X1249)),X1240,X1241)))) != s(X1241,happ(s(fun(X1240,X1241),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1240,X1241)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s('type.num.num',X1242))),s('type.list.list'('type.closSem.v'),X1243))),s(X1240,sK13(X1250,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1242),s('type.list.list'('type.closSem.v'),X1243))),s(fun('type.integer.int',fun(X1240,X1241)),X1244),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1240,X1241)),X1245),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s(fun('type.num.num',fun(X1240,X1241)),X1247),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1240,X1241)))))),X1248),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1240,X1241)))))),X1249)),X1240,X1241)))) | s(fun(X1240,X1241),X1250) = s(fun(X1240,X1241),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1242),s('type.list.list'('type.closSem.v'),X1243))),s(fun('type.integer.int',fun(X1240,X1241)),X1244),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1240,X1241)),X1245),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1240,X1241))),X1246),s(fun('type.num.num',fun(X1240,X1241)),X1247),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1240,X1241)))))),X1248),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1240,X1241)))))),X1249)))) )),
  inference(superposition,[],[f352,f324])).
fof(f25286,plain,(
  ( ! [X1151,X1163,X1161,X1155,X1153,X1159,X1157,X1162,X1160,X1154,X1152,X1158,X1156] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1151,X1152),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1151,X1152)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1151,X1152))),X1157),s('type.num.num',X1153))),s('type.list.list'('type.closSem.v'),X1154))),s(fun(X1152,X1151),X1161)))) | ~p(s(bool,happ(s(fun(X1151,bool),X1162),s(X1151,happ(s(fun(X1152,X1151),X1161),s(X1152,X1163)))))) | p(s(bool,happ(s(fun(X1151,bool),X1162),s(X1151,sK11(X1162,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1153),s('type.list.list'('type.closSem.v'),X1154))),s(fun('type.integer.int',fun(X1151,X1152)),X1155),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1151,X1152)),X1156),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1151,X1152))),X1157),s(fun('type.num.num',fun(X1151,X1152)),X1158),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1151,X1152)))))),X1159),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1151,X1152)))))),X1160)),X1161,X1152,X1151)))))) )),
  inference(superposition,[],[f347,f324])).
fof(f25392,plain,(
  ( ! [X1149,X1139,X1143,X1141,X1146,X1144,X1150,X1148,X1138,X1142,X1140,X1147,X1145] : (~p(s(bool,happ(s(fun(X1139,bool),X1149),s(X1139,happ(s(fun(X1138,X1139),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1138,X1139)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1138,X1139))),X1144),s('type.num.num',X1140))),s('type.list.list'('type.closSem.v'),X1141))),s(X1138,X1150)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1139,X1138),X1148),s(fun(X1138,X1139),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1138,X1139)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1138,X1139))),X1144),s('type.num.num',X1140))),s('type.list.list'('type.closSem.v'),X1141)))))) | p(s(bool,happ(s(fun(X1139,bool),X1149),s(X1139,sK11(X1149,X1148,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1140),s('type.list.list'('type.closSem.v'),X1141))),s(fun('type.integer.int',fun(X1138,X1139)),X1142),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1138,X1139)),X1143),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1138,X1139))),X1144),s(fun('type.num.num',fun(X1138,X1139)),X1145),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1138,X1139)))))),X1146),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1138,X1139)))))),X1147)),X1138,X1139)))))) )),
  inference(forward_demodulation,[],[f25285,f324])).
fof(f25285,plain,(
  ( ! [X1149,X1139,X1143,X1141,X1146,X1144,X1150,X1148,X1138,X1142,X1140,X1147,X1145] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1139,X1138),X1148),s(fun(X1138,X1139),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1138,X1139)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1138,X1139))),X1144),s('type.num.num',X1140))),s('type.list.list'('type.closSem.v'),X1141)))))) | ~p(s(bool,happ(s(fun(X1139,bool),X1149),s(X1139,happ(s(fun(X1138,X1139),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1140),s('type.list.list'('type.closSem.v'),X1141))),s(fun('type.integer.int',fun(X1138,X1139)),X1142),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1138,X1139)),X1143),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1138,X1139))),X1144),s(fun('type.num.num',fun(X1138,X1139)),X1145),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1138,X1139)))))),X1146),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1138,X1139)))))),X1147))),s(X1138,X1150)))))) | p(s(bool,happ(s(fun(X1139,bool),X1149),s(X1139,sK11(X1149,X1148,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1140),s('type.list.list'('type.closSem.v'),X1141))),s(fun('type.integer.int',fun(X1138,X1139)),X1142),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1138,X1139)),X1143),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1138,X1139))),X1144),s(fun('type.num.num',fun(X1138,X1139)),X1145),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1138,X1139)))))),X1146),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1138,X1139)))))),X1147)),X1138,X1139)))))) )),
  inference(superposition,[],[f347,f324])).
fof(f25284,plain,(
  ( ! [X1137,X1130,X1128,X1134,X1132,X1126,X1136,X1131,X1129,X1135,X1133,X1127,X1125] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1125,X1126),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1125,X1126)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1125,X1126))),X1131),s('type.num.num',X1127))),s('type.list.list'('type.closSem.v'),X1128))),s(fun(X1126,X1125),X1135)))) | ~p(s(bool,happ(s(fun(X1125,bool),X1136),s(X1125,X1137)))) | p(s(bool,happ(s(fun(X1125,bool),X1136),s(X1125,happ(s(fun(X1126,X1125),X1135),s(X1126,sK10(X1136,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1127),s('type.list.list'('type.closSem.v'),X1128))),s(fun('type.integer.int',fun(X1125,X1126)),X1129),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1125,X1126)),X1130),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1125,X1126))),X1131),s(fun('type.num.num',fun(X1125,X1126)),X1132),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1125,X1126)))))),X1133),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1125,X1126)))))),X1134)),X1135,X1126,X1125)))))))) )),
  inference(superposition,[],[f346,f324])).
fof(f25391,plain,(
  ( ! [X1112,X1118,X1116,X1122,X1120,X1124,X1115,X1113,X1119,X1117,X1123,X1121,X1114] : (p(s(bool,happ(s(fun(X1113,bool),X1123),s(X1113,happ(s(fun(X1112,X1113),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1112,X1113)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1112,X1113))),X1118),s('type.num.num',X1114))),s('type.list.list'('type.closSem.v'),X1115))),s(X1112,sK10(X1123,X1122,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1114),s('type.list.list'('type.closSem.v'),X1115))),s(fun('type.integer.int',fun(X1112,X1113)),X1116),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1112,X1113)),X1117),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1112,X1113))),X1118),s(fun('type.num.num',fun(X1112,X1113)),X1119),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1112,X1113)))))),X1120),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1112,X1113)))))),X1121)),X1112,X1113))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1113,X1112),X1122),s(fun(X1112,X1113),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1112,X1113)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1112,X1113))),X1118),s('type.num.num',X1114))),s('type.list.list'('type.closSem.v'),X1115)))))) | ~p(s(bool,happ(s(fun(X1113,bool),X1123),s(X1113,X1124))))) )),
  inference(forward_demodulation,[],[f25283,f324])).
fof(f25283,plain,(
  ( ! [X1112,X1118,X1116,X1122,X1120,X1124,X1115,X1113,X1119,X1117,X1123,X1121,X1114] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1113,X1112),X1122),s(fun(X1112,X1113),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1112,X1113)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1112,X1113))),X1118),s('type.num.num',X1114))),s('type.list.list'('type.closSem.v'),X1115)))))) | ~p(s(bool,happ(s(fun(X1113,bool),X1123),s(X1113,X1124)))) | p(s(bool,happ(s(fun(X1113,bool),X1123),s(X1113,happ(s(fun(X1112,X1113),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1114),s('type.list.list'('type.closSem.v'),X1115))),s(fun('type.integer.int',fun(X1112,X1113)),X1116),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1112,X1113)),X1117),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1112,X1113))),X1118),s(fun('type.num.num',fun(X1112,X1113)),X1119),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1112,X1113)))))),X1120),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1112,X1113)))))),X1121))),s(X1112,sK10(X1123,X1122,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1114),s('type.list.list'('type.closSem.v'),X1115))),s(fun('type.integer.int',fun(X1112,X1113)),X1116),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1112,X1113)),X1117),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1112,X1113))),X1118),s(fun('type.num.num',fun(X1112,X1113)),X1119),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1112,X1113)))))),X1120),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1112,X1113)))))),X1121)),X1112,X1113)))))))) )),
  inference(superposition,[],[f346,f324])).
fof(f25282,plain,(
  ( ! [X1106,X1104,X1110,X1099,X1108,X1103,X1101,X1107,X1105,X1111,X1109,X1102,X1100] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1099,X1100),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1099,X1100)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1099,X1100))),X1105),s('type.num.num',X1101))),s('type.list.list'('type.closSem.v'),X1102))),s(fun(X1100,X1099),X1109)))) | ~p(s(bool,happ(s(fun(X1099,bool),X1110),s(X1099,happ(s(fun(X1100,X1099),X1109),s(X1100,sK9(X1110,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1101),s('type.list.list'('type.closSem.v'),X1102))),s(fun('type.integer.int',fun(X1099,X1100)),X1103),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1099,X1100)),X1104),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1099,X1100))),X1105),s(fun('type.num.num',fun(X1099,X1100)),X1106),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1099,X1100)))))),X1107),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1099,X1100)))))),X1108)),X1109,X1100,X1099))))))) | p(s(bool,happ(s(fun(X1099,bool),X1110),s(X1099,X1111))))) )),
  inference(superposition,[],[f345,f324])).
fof(f25390,plain,(
  ( ! [X1087,X1097,X1091,X1089,X1095,X1093,X1086,X1098,X1096,X1090,X1088,X1094,X1092] : (~p(s(bool,happ(s(fun(X1087,bool),X1097),s(X1087,happ(s(fun(X1086,X1087),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1086,X1087)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,X1087))),X1092),s('type.num.num',X1088))),s('type.list.list'('type.closSem.v'),X1089))),s(X1086,sK9(X1097,X1096,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1088),s('type.list.list'('type.closSem.v'),X1089))),s(fun('type.integer.int',fun(X1086,X1087)),X1090),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,X1087)),X1091),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,X1087))),X1092),s(fun('type.num.num',fun(X1086,X1087)),X1093),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,X1087)))))),X1094),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,X1087)))))),X1095)),X1086,X1087))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1087,X1086),X1096),s(fun(X1086,X1087),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1086,X1087)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,X1087))),X1092),s('type.num.num',X1088))),s('type.list.list'('type.closSem.v'),X1089)))))) | p(s(bool,happ(s(fun(X1087,bool),X1097),s(X1087,X1098))))) )),
  inference(forward_demodulation,[],[f25281,f324])).
fof(f25281,plain,(
  ( ! [X1087,X1097,X1091,X1089,X1095,X1093,X1086,X1098,X1096,X1090,X1088,X1094,X1092] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1087,X1086),X1096),s(fun(X1086,X1087),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1086,X1087)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,X1087))),X1092),s('type.num.num',X1088))),s('type.list.list'('type.closSem.v'),X1089)))))) | ~p(s(bool,happ(s(fun(X1087,bool),X1097),s(X1087,happ(s(fun(X1086,X1087),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1088),s('type.list.list'('type.closSem.v'),X1089))),s(fun('type.integer.int',fun(X1086,X1087)),X1090),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,X1087)),X1091),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,X1087))),X1092),s(fun('type.num.num',fun(X1086,X1087)),X1093),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,X1087)))))),X1094),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,X1087)))))),X1095))),s(X1086,sK9(X1097,X1096,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1088),s('type.list.list'('type.closSem.v'),X1089))),s(fun('type.integer.int',fun(X1086,X1087)),X1090),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1086,X1087)),X1091),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1086,X1087))),X1092),s(fun('type.num.num',fun(X1086,X1087)),X1093),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1086,X1087)))))),X1094),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1086,X1087)))))),X1095)),X1086,X1087))))))) | p(s(bool,happ(s(fun(X1087,bool),X1097),s(X1087,X1098))))) )),
  inference(superposition,[],[f345,f324])).
fof(f25280,plain,(
  ( ! [X1081,X1085,X1075,X1073,X1079,X1077,X1082,X1080,X1084,X1074,X1078,X1076,X1083] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1073,X1074),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1073,X1074)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1073,X1074))),X1079),s('type.num.num',X1075))),s('type.list.list'('type.closSem.v'),X1076))),s(fun(X1074,X1073),X1083)))) | ~p(s(bool,happ(s(fun(X1073,bool),X1084),s(X1073,sK8(X1084,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1075),s('type.list.list'('type.closSem.v'),X1076))),s(fun('type.integer.int',fun(X1073,X1074)),X1077),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1073,X1074)),X1078),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1073,X1074))),X1079),s(fun('type.num.num',fun(X1073,X1074)),X1080),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1073,X1074)))))),X1081),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1073,X1074)))))),X1082)),X1083,X1074,X1073))))) | p(s(bool,happ(s(fun(X1073,bool),X1084),s(X1073,happ(s(fun(X1074,X1073),X1083),s(X1074,X1085))))))) )),
  inference(superposition,[],[f344,f324])).
fof(f25389,plain,(
  ( ! [X1066,X1064,X1070,X1068,X1062,X1060,X1072,X1067,X1065,X1071,X1069,X1063,X1061] : (p(s(bool,happ(s(fun(X1061,bool),X1071),s(X1061,happ(s(fun(X1060,X1061),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1060,X1061)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1060,X1061))),X1066),s('type.num.num',X1062))),s('type.list.list'('type.closSem.v'),X1063))),s(X1060,X1072)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1061,X1060),X1070),s(fun(X1060,X1061),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1060,X1061)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1060,X1061))),X1066),s('type.num.num',X1062))),s('type.list.list'('type.closSem.v'),X1063)))))) | ~p(s(bool,happ(s(fun(X1061,bool),X1071),s(X1061,sK8(X1071,X1070,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1062),s('type.list.list'('type.closSem.v'),X1063))),s(fun('type.integer.int',fun(X1060,X1061)),X1064),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1060,X1061)),X1065),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1060,X1061))),X1066),s(fun('type.num.num',fun(X1060,X1061)),X1067),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1060,X1061)))))),X1068),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1060,X1061)))))),X1069)),X1060,X1061)))))) )),
  inference(forward_demodulation,[],[f25279,f324])).
fof(f25279,plain,(
  ( ! [X1066,X1064,X1070,X1068,X1062,X1060,X1072,X1067,X1065,X1071,X1069,X1063,X1061] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1061,X1060),X1070),s(fun(X1060,X1061),happ(s(fun('type.list.list'('type.closSem.v'),fun(X1060,X1061)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1060,X1061))),X1066),s('type.num.num',X1062))),s('type.list.list'('type.closSem.v'),X1063)))))) | ~p(s(bool,happ(s(fun(X1061,bool),X1071),s(X1061,sK8(X1071,X1070,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1062),s('type.list.list'('type.closSem.v'),X1063))),s(fun('type.integer.int',fun(X1060,X1061)),X1064),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1060,X1061)),X1065),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1060,X1061))),X1066),s(fun('type.num.num',fun(X1060,X1061)),X1067),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1060,X1061)))))),X1068),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1060,X1061)))))),X1069)),X1060,X1061))))) | p(s(bool,happ(s(fun(X1061,bool),X1071),s(X1061,happ(s(fun(X1060,X1061),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1062),s('type.list.list'('type.closSem.v'),X1063))),s(fun('type.integer.int',fun(X1060,X1061)),X1064),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1060,X1061)),X1065),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1060,X1061))),X1066),s(fun('type.num.num',fun(X1060,X1061)),X1067),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1060,X1061)))))),X1068),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1060,X1061)))))),X1069))),s(X1060,X1072))))))) )),
  inference(superposition,[],[f344,f324])).
fof(f25388,plain,(
  ( ! [X994,X992,X998,X996,X991,X995,X993,X999,X997] : (~p(s(bool,happ(s(fun('type.list.list'(X991),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool))),X996),s('type.num.num',X992))),s('type.list.list'('type.closSem.v'),X993))),s('type.list.list'(X991),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X991),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool))),X996),s('type.num.num',X992))),s('type.list.list'('type.closSem.v'),X993))),s('type.list.list'(X991),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X992),s('type.list.list'('type.closSem.v'),X993))),s(fun('type.integer.int',fun('type.list.list'(X991),bool)),X994),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X991),bool)),X995),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool))),X996),s(fun('type.num.num',fun('type.list.list'(X991),bool)),X997),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X991),bool)))))),X998),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X991),bool)))))),X999)),X991)))))) )),
  inference(forward_demodulation,[],[f25274,f324])).
fof(f25274,plain,(
  ( ! [X994,X992,X998,X996,X991,X995,X993,X999,X997] : (p(s(bool,happ(s(fun('type.list.list'(X991),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool))),X996),s('type.num.num',X992))),s('type.list.list'('type.closSem.v'),X993))),s('type.list.list'(X991),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X992),s('type.list.list'('type.closSem.v'),X993))),s(fun('type.integer.int',fun('type.list.list'(X991),bool)),X994),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X991),bool)),X995),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool))),X996),s(fun('type.num.num',fun('type.list.list'(X991),bool)),X997),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X991),bool)))))),X998),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X991),bool)))))),X999)),X991))))) | ~p(s(bool,happ(s(fun('type.list.list'(X991),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X992),s('type.list.list'('type.closSem.v'),X993))),s(fun('type.integer.int',fun('type.list.list'(X991),bool)),X994),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X991),bool)),X995),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X991),bool))),X996),s(fun('type.num.num',fun('type.list.list'(X991),bool)),X997),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X991),bool)))))),X998),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X991),bool)))))),X999))),s('type.list.list'(X991),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f324])).
fof(f25387,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X989,X983,X981,X986] : (p(s(bool,happ(s(fun('type.list.list'(X981),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s('type.num.num',X982))),s('type.list.list'('type.closSem.v'),X983))),s('type.list.list'(X981),X990)))) | ~p(s(bool,happ(s(fun('type.list.list'(X981),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s('type.num.num',X982))),s('type.list.list'('type.closSem.v'),X983))),s('type.list.list'(X981),'const.list.CONS_2'(s(X981,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989)),X981)),s('type.list.list'(X981),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989)),X981))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X981),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s('type.num.num',X982))),s('type.list.list'('type.closSem.v'),X983))),s('type.list.list'(X981),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f25386,f324])).
fof(f25386,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X989,X983,X981,X986] : (~p(s(bool,happ(s(fun('type.list.list'(X981),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s('type.num.num',X982))),s('type.list.list'('type.closSem.v'),X983))),s('type.list.list'(X981),'const.list.CONS_2'(s(X981,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989)),X981)),s('type.list.list'(X981),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989)),X981))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X981),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s('type.num.num',X982))),s('type.list.list'('type.closSem.v'),X983))),s('type.list.list'(X981),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X981),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989))),s('type.list.list'(X981),X990))))) )),
  inference(forward_demodulation,[],[f25273,f324])).
fof(f25273,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X989,X983,X981,X986] : (~p(s(bool,happ(s(fun('type.list.list'(X981),bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s('type.num.num',X982))),s('type.list.list'('type.closSem.v'),X983))),s('type.list.list'(X981),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X981),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989))),s('type.list.list'(X981),'const.list.CONS_2'(s(X981,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989)),X981)),s('type.list.list'(X981),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989)),X981))))))) | p(s(bool,happ(s(fun('type.list.list'(X981),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X982),s('type.list.list'('type.closSem.v'),X983))),s(fun('type.integer.int',fun('type.list.list'(X981),bool)),X984),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X981),bool)),X985),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X981),bool))),X986),s(fun('type.num.num',fun('type.list.list'(X981),bool)),X987),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X981),bool)))))),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X981),bool)))))),X989))),s('type.list.list'(X981),X990))))) )),
  inference(superposition,[],[f305,f324])).
fof(f25258,plain,(
  ( ! [X796,X790,X788,X795,X793,X797,X791,X789,X794,X792] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X788,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X788,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X788,bool))),X793),s('type.num.num',X789))),s('type.list.list'('type.closSem.v'),X790))))) | s(X788,X797) = s(X788,sK4(X797,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X789),s('type.list.list'('type.closSem.v'),X790))),s(fun('type.integer.int',fun(X788,bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X788,bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X788,bool))),X793),s(fun('type.num.num',fun(X788,bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X788,bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X788,bool)))))),X796)),X788))) )),
  inference(superposition,[],[f823,f324])).
fof(f25383,plain,(
  ( ! [X786,X784,X779,X777,X783,X781,X787,X785,X778,X782,X780] : (p(s(bool,happ(s(fun(X777,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X777,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s('type.num.num',X778))),s('type.list.list'('type.closSem.v'),X779))),s(X777,sK6(X786,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X778),s('type.list.list'('type.closSem.v'),X779))),s(fun('type.integer.int',fun(X777,bool)),X780),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X777,bool)),X781),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s(fun('type.num.num',fun(X777,bool)),X783),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X777,bool)))))),X784),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X777,bool)))))),X785)),X777))))) | ~p(s(bool,happ(s(fun(X777,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X777,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s('type.num.num',X778))),s('type.list.list'('type.closSem.v'),X779))),s(X777,sK5(X786,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X778),s('type.list.list'('type.closSem.v'),X779))),s(fun('type.integer.int',fun(X777,bool)),X780),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X777,bool)),X781),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s(fun('type.num.num',fun(X777,bool)),X783),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X777,bool)))))),X784),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X777,bool)))))),X785)),X777))))) | ~p(s(bool,happ(s(fun(X777,bool),X786),s(X777,X787))))) )),
  inference(forward_demodulation,[],[f25257,f324])).
fof(f25257,plain,(
  ( ! [X786,X784,X779,X777,X783,X781,X787,X785,X778,X782,X780] : (~p(s(bool,happ(s(fun(X777,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X777,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s('type.num.num',X778))),s('type.list.list'('type.closSem.v'),X779))),s(X777,sK5(X786,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X778),s('type.list.list'('type.closSem.v'),X779))),s(fun('type.integer.int',fun(X777,bool)),X780),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X777,bool)),X781),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s(fun('type.num.num',fun(X777,bool)),X783),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X777,bool)))))),X784),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X777,bool)))))),X785)),X777))))) | ~p(s(bool,happ(s(fun(X777,bool),X786),s(X777,X787)))) | p(s(bool,happ(s(fun(X777,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X778),s('type.list.list'('type.closSem.v'),X779))),s(fun('type.integer.int',fun(X777,bool)),X780),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X777,bool)),X781),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s(fun('type.num.num',fun(X777,bool)),X783),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X777,bool)))))),X784),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X777,bool)))))),X785))),s(X777,sK6(X786,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X778),s('type.list.list'('type.closSem.v'),X779))),s(fun('type.integer.int',fun(X777,bool)),X780),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X777,bool)),X781),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X777,bool))),X782),s(fun('type.num.num',fun(X777,bool)),X783),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X777,bool)))))),X784),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X777,bool)))))),X785)),X777)))))) )),
  inference(superposition,[],[f315,f324])).
fof(f25382,plain,(
  ( ! [X767,X771,X769,X775,X773,X766,X776,X770,X768,X774,X772] : (p(s(bool,happ(s(fun(X766,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X766,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s('type.num.num',X767))),s('type.list.list'('type.closSem.v'),X768))),s(X766,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X767),s('type.list.list'('type.closSem.v'),X768))),s(fun('type.integer.int',fun(X766,bool)),X769),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X766,bool)),X770),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s(fun('type.num.num',fun(X766,bool)),X772),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X766,bool)))))),X773),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X766,bool)))))),X774)),X776,X766))))) | ~p(s(bool,happ(s(fun(X766,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X766,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s('type.num.num',X767))),s('type.list.list'('type.closSem.v'),X768))),s(X766,X775)))) | p(s(bool,happ(s(fun(X766,bool),X776),s(X766,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X767),s('type.list.list'('type.closSem.v'),X768))),s(fun('type.integer.int',fun(X766,bool)),X769),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X766,bool)),X770),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s(fun('type.num.num',fun(X766,bool)),X772),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X766,bool)))))),X773),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X766,bool)))))),X774)),X776,X766)))))) )),
  inference(forward_demodulation,[],[f25256,f324])).
fof(f25256,plain,(
  ( ! [X767,X771,X769,X775,X773,X766,X776,X770,X768,X774,X772] : (~p(s(bool,happ(s(fun(X766,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X766,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s('type.num.num',X767))),s('type.list.list'('type.closSem.v'),X768))),s(X766,X775)))) | p(s(bool,happ(s(fun(X766,bool),X776),s(X766,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X767),s('type.list.list'('type.closSem.v'),X768))),s(fun('type.integer.int',fun(X766,bool)),X769),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X766,bool)),X770),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s(fun('type.num.num',fun(X766,bool)),X772),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X766,bool)))))),X773),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X766,bool)))))),X774)),X776,X766))))) | p(s(bool,happ(s(fun(X766,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X767),s('type.list.list'('type.closSem.v'),X768))),s(fun('type.integer.int',fun(X766,bool)),X769),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X766,bool)),X770),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s(fun('type.num.num',fun(X766,bool)),X772),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X766,bool)))))),X773),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X766,bool)))))),X774))),s(X766,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X767),s('type.list.list'('type.closSem.v'),X768))),s(fun('type.integer.int',fun(X766,bool)),X769),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X766,bool)),X770),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X766,bool))),X771),s(fun('type.num.num',fun(X766,bool)),X772),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X766,bool)))))),X773),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X766,bool)))))),X774)),X776,X766)))))) )),
  inference(superposition,[],[f314,f324])).
fof(f25255,plain,(
  ( ! [X765,X761,X763,X757,X759,X764,X760,X762,X756,X758] : (p(s(bool,'|dollar|exists_1'(s(fun(X756,bool),happ(s(fun('type.list.list'('type.closSem.v'),fun(X756,bool)),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X756,bool))),X761),s('type.num.num',X757))),s('type.list.list'('type.closSem.v'),X758)))))) | s(X756,X765) = s(X756,sK4(X765,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X757),s('type.list.list'('type.closSem.v'),X758))),s(fun('type.integer.int',fun(X756,bool)),X759),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X756,bool)),X760),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X756,bool))),X761),s(fun('type.num.num',fun(X756,bool)),X762),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X756,bool)))))),X763),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X756,bool)))))),X764)),X756))) )),
  inference(superposition,[],[f312,f324])).
fof(f25242,plain,(
  ( ! [X648,X650,X644,X646,X642,X649,X645,X647,X643] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X650),'const.sum.INL_1'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X646),s('type.num.num',X642))),s('type.list.list'('type.closSem.v'),X643))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X642),s('type.list.list'('type.closSem.v'),X643))),s(fun('type.integer.int',bool),X644),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X645),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X646),s(fun('type.num.num',bool),X647),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X648),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X649)))) )),
  inference(superposition,[],[f5684,f324])).
fof(f25241,plain,(
  ( ! [X639,X633,X635,X640,X636,X638,X634,X641,X637] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X641,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X637),s('type.num.num',X633))),s('type.list.list'('type.closSem.v'),X634))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X633),s('type.list.list'('type.closSem.v'),X634))),s(fun('type.integer.int',bool),X635),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X636),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X637),s(fun('type.num.num',bool),X638),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X639),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X640)))) )),
  inference(superposition,[],[f5495,f324])).
fof(f25236,plain,(
  ( ! [X592,X594,X588,X590,X586,X593,X589,X591,X585,X587] : (~p(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X589),s('type.num.num',X585))),s('type.list.list'('type.closSem.v'),X586)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X593),bool),sK16(X594,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X585),s('type.list.list'('type.closSem.v'),X586))),s(fun('type.integer.int',bool),X587),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X588),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X589),s(fun('type.num.num',bool),X590),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X591),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X592)),X593,bool))))) )),
  inference(superposition,[],[f3944,f324])).
fof(f25224,plain,(
  ( ! [X484,X486,X482,X488,X485,X487,X481,X483,X489] : (s(bool,X489) != s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X485),s('type.num.num',X481))),s('type.list.list'('type.closSem.v'),X482))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X481),s('type.list.list'('type.closSem.v'),X482))),s(fun('type.integer.int',bool),X483),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X484),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X485),s(fun('type.num.num',bool),X486),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X487),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X488))) | s(bool,'T_0') = s(bool,X489)) )),
  inference(superposition,[],[f1683,f324])).
fof(f25223,plain,(
  ( ! [X476,X478,X472,X474,X480,X475,X477,X479,X473] : (s(bool,X480) != s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X476),s('type.num.num',X472))),s('type.list.list'('type.closSem.v'),X473))) | s(bool,'F_0') = s(bool,X480) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X472),s('type.list.list'('type.closSem.v'),X473))),s(fun('type.integer.int',bool),X474),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X475),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X476),s(fun('type.num.num',bool),X477),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X478),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X479)))) )),
  inference(superposition,[],[f1683,f324])).
fof(f25217,plain,(
  ( ! [X420,X422,X428,X424,X426,X421,X423,X425,X427] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X428),'const.sum.INL_1'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X424),s('type.num.num',X420))),s('type.list.list'('type.closSem.v'),X421))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X420),s('type.list.list'('type.closSem.v'),X421))),s(fun('type.integer.int',bool),X422),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X423),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X424),s(fun('type.num.num',bool),X425),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X426),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X427)))) )),
  inference(superposition,[],[f1396,f324])).
fof(f25216,plain,(
  ( ! [X412,X414,X416,X418,X413,X415,X411,X417,X419] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X419,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X415),s('type.num.num',X411))),s('type.list.list'('type.closSem.v'),X412))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X411),s('type.list.list'('type.closSem.v'),X412))),s(fun('type.integer.int',bool),X413),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X414),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X415),s(fun('type.num.num',bool),X416),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X417),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X418)))) )),
  inference(superposition,[],[f1395,f324])).
fof(f25355,plain,(
  ( ! [X397,X399,X393,X395,X396,X398,X392,X394] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X396),s('type.num.num',X392))),s('type.list.list'('type.closSem.v'),X393))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X392),s('type.list.list'('type.closSem.v'),X393))),s(fun('type.integer.int',bool),X394),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X395),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X396),s(fun('type.num.num',bool),X397),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X398),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X399)))) )),
  inference(forward_demodulation,[],[f25214,f427])).
fof(f25214,plain,(
  ( ! [X397,X399,X393,X395,X396,X398,X392,X394,X400] : (s(bool,'const.ind_type.ISO_2'(s(fun(X400,X400),'_i_0_0'),s(fun(X400,X400),'_i_0_0'))) != s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X396),s('type.num.num',X392))),s('type.list.list'('type.closSem.v'),X393))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X392),s('type.list.list'('type.closSem.v'),X393))),s(fun('type.integer.int',bool),X394),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X395),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X396),s(fun('type.num.num',bool),X397),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X398),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X399)))) )),
  inference(superposition,[],[f790,f324])).
fof(f25213,plain,(
  ( ! [X383,X389,X391,X385,X387,X382,X388,X390,X384,X386] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X390),'const.pair.,_2'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X386),s('type.num.num',X382))),s('type.list.list'('type.closSem.v'),X383))),s(X390,X391))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X382),s('type.list.list'('type.closSem.v'),X383))),s(fun('type.integer.int',bool),X384),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X385),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X386),s(fun('type.num.num',bool),X387),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X388),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X389)))) )),
  inference(superposition,[],[f730,f324])).
fof(f25212,plain,(
  ( ! [X377,X379,X372,X374,X380,X376,X378,X373,X375,X381] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X380,bool),'const.pair.,_2'(s(X380,X381),s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X376),s('type.num.num',X372))),s('type.list.list'('type.closSem.v'),X373))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X372),s('type.list.list'('type.closSem.v'),X373))),s(fun('type.integer.int',bool),X374),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X375),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X376),s(fun('type.num.num',bool),X377),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X378),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X379)))) )),
  inference(superposition,[],[f673,f324])).
fof(f25211,plain,(
  ( ! [X364,X366,X368,X370,X365,X367,X363,X369,X371] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X367),s('type.num.num',X363))),s('type.list.list'('type.closSem.v'),X364))),s(fun('type.num.num',bool),X371),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X363),s('type.list.list'('type.closSem.v'),X364))),s(fun('type.integer.int',bool),X365),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X366),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X367),s(fun('type.num.num',bool),X368),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X369),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X370)))) )),
  inference(superposition,[],[f620,f324])).
fof(f25210,plain,(
  ( ! [X356,X358,X354,X360,X362,X357,X359,X355,X361] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X362,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X358),s('type.num.num',X354))),s('type.list.list'('type.closSem.v'),X355))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X354),s('type.list.list'('type.closSem.v'),X355))),s(fun('type.integer.int',bool),X356),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X357),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X358),s(fun('type.num.num',bool),X359),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X360),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X361)))) )),
  inference(superposition,[],[f527,f324])).
fof(f25209,plain,(
  ( ! [X350,X346,X352,X349,X351,X345,X347,X353,X348] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X353),'const.sum.INL_1'(s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X349),s('type.num.num',X345))),s('type.list.list'('type.closSem.v'),X346))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X345),s('type.list.list'('type.closSem.v'),X346))),s(fun('type.integer.int',bool),X347),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X348),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X349),s(fun('type.num.num',bool),X350),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X351),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X352)))) )),
  inference(superposition,[],[f500,f324])).
fof(f25159,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X34,X32] : (s(bool,X34) = s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X30),s('type.num.num',X26))),s('type.list.list'('type.closSem.v'),X27))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))),s(fun('type.integer.int',bool),X28),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X29),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X30),s(fun('type.num.num',bool),X31),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X32),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X33)))) )),
  inference(superposition,[],[f324,f432])).
fof(f25158,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X21),s('type.num.num',X17))),s('type.list.list'('type.closSem.v'),X18))) | s(bool,X25) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),X18))),s(fun('type.integer.int',bool),X19),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X20),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X21),s(fun('type.num.num',bool),X22),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X23),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X24))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f324,f432])).
fof(f25157,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.closSem.v'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X13),s('type.num.num',X9))),s('type.list.list'('type.closSem.v'),X10))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X10))),s(fun('type.integer.int',bool),X11),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X12),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X13),s(fun('type.num.num',bool),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X15),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X16)))) )),
  inference(superposition,[],[f324,f264])).
fof(f24881,plain,(
  ( ! [X17,X16] : (s(bool,X16) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl28),
  inference(subsumption_resolution,[],[f24815,f256])).
fof(f24815,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(bool,X16) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl28),
  inference(superposition,[],[f1330,f24553])).
fof(f24880,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl28),
  inference(subsumption_resolution,[],[f24807,f256])).
fof(f24807,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl28),
  inference(superposition,[],[f434,f24553])).
fof(f24760,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.closSem.v',happ(s(fun('type.closLang.exp','type.closSem.v'),X23),s('type.closLang.exp',sK13(happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.list.list'('type.closSem.v'),X21))),s('type.num.num',X22)),X23,'type.closLang.exp','type.closSem.v')))) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X19),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X21),s('type.num.num',X22),s('type.closLang.exp',sK13(happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.list.list'('type.closSem.v'),X21))),s('type.num.num',X22)),X23,'type.closLang.exp','type.closSem.v')))) | s(fun('type.closLang.exp','type.closSem.v'),X23) = s(fun('type.closLang.exp','type.closSem.v'),happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.list.list'('type.closSem.v'),X21))),s('type.num.num',X22)))) )),
  inference(superposition,[],[f352,f392])).
fof(f24759,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.closSem.v',happ(s(fun('type.closLang.exp','type.closSem.v'),X18),s('type.closLang.exp',sK13(X18,happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.list.list'('type.closSem.v'),X16))),s('type.num.num',X17)),'type.closLang.exp','type.closSem.v')))) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s('type.num.num',X17),s('type.closLang.exp',sK13(X18,happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.list.list'('type.closSem.v'),X16))),s('type.num.num',X17)),'type.closLang.exp','type.closSem.v')))) | s(fun('type.closLang.exp','type.closSem.v'),X18) = s(fun('type.closLang.exp','type.closSem.v'),happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.list.list'('type.closSem.v'),X16))),s('type.num.num',X17)))) )),
  inference(superposition,[],[f352,f392])).
fof(f24543,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f356,f6988,f434])).
fof(f24553,plain,(
  s(bool,'T_0') = s(bool,sK5('_i_0_0','_i_0_0',bool)) | $spl28),
  inference(unit_resulting_resolution,[],[f419,f6988,f1398])).
fof(f24555,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6988,f3944])).
fof(f24514,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X23,X24),X25),s(fun(X24,X23),X26)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X19,X23),fun(X20,X24)),'_dst_x00x11_2'(s(fun(X23,X24),X25),s(fun(fun(X19,X23),fun(X20,X23)),'_dstsel_0_x01_1'(s(fun(X20,X19),X22))))),s(fun(fun(X20,X24),fun(X19,X23)),'_dst_x00x11_2'(s(fun(X24,X23),X26),s(fun(fun(X20,X24),fun(X19,X24)),'_dstsel_0_x01_1'(s(fun(X19,X20),X21)))))))) | s(bool,X27) = s(bool,'const.ind_type.ISO_2'(s(fun(X19,X20),X21),s(fun(X20,X19),X22))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f24468,f256])).
fof(f24468,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X23,X24),X25),s(fun(X24,X23),X26)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X19,X23),fun(X20,X24)),'_dst_x00x11_2'(s(fun(X23,X24),X25),s(fun(fun(X19,X23),fun(X20,X23)),'_dstsel_0_x01_1'(s(fun(X20,X19),X22))))),s(fun(fun(X20,X24),fun(X19,X23)),'_dst_x00x11_2'(s(fun(X24,X23),X26),s(fun(fun(X20,X24),fun(X19,X24)),'_dstsel_0_x01_1'(s(fun(X19,X20),X21)))))))) | s(bool,X27) = s(bool,'const.ind_type.ISO_2'(s(fun(X19,X20),X21),s(fun(X20,X19),X22))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f391,f432])).
fof(f24513,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X2),s(fun(X1,X0),X3)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X4,X0),fun(X4,X1)),'_dst_x00x11_2'(s(fun(X0,X1),X2),s(fun(fun(X4,X0),fun(X4,X0)),'_dstsel_0_x01_1'(s(fun(X4,X4),'_i_0_0'))))),s(fun(fun(X4,X1),fun(X4,X0)),'_dst_x00x11_2'(s(fun(X1,X0),X3),s(fun(fun(X4,X1),fun(X4,X1)),'_dstsel_0_x01_1'(s(fun(X4,X4),'_i_0_0'))))))))) )),
  inference(condensation,[],[f24512])).
fof(f24512,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X4),s(fun(X3,X2),X5)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X0,X2),fun(X0,X3)),'_dst_x00x11_2'(s(fun(X2,X3),X4),s(fun(fun(X0,X2),fun(X0,X2)),'_dstsel_0_x01_1'(s(fun(X0,X0),'_i_0_0'))))),s(fun(fun(X0,X3),fun(X0,X2)),'_dst_x00x11_2'(s(fun(X3,X2),X5),s(fun(fun(X0,X3),fun(X0,X3)),'_dstsel_0_x01_1'(s(fun(X0,X0),'_i_0_0'))))))))) )),
  inference(subsumption_resolution,[],[f24465,f269])).
fof(f24465,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X4),s(fun(X3,X2),X5)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X0,X2),fun(X0,X3)),'_dst_x00x11_2'(s(fun(X2,X3),X4),s(fun(fun(X0,X2),fun(X0,X2)),'_dstsel_0_x01_1'(s(fun(X0,X0),'_i_0_0'))))),s(fun(fun(X0,X3),fun(X0,X2)),'_dst_x00x11_2'(s(fun(X3,X2),X5),s(fun(fun(X0,X3),fun(X0,X3)),'_dstsel_0_x01_1'(s(fun(X0,X0),'_i_0_0')))))))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f391,f1625])).
fof(f24464,plain,(
  ( ! [X198,X196,X194,X192,X200,X199,X197,X195,X193] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X193,X192),X196),s(fun(X192,X193),X194)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X197,X198),X199),s(fun(X198,X197),X200)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X193,X197),fun(X192,X198)),'_dst_x00x11_2'(s(fun(X197,X198),X199),s(fun(fun(X193,X197),fun(X192,X197)),'_dstsel_0_x01_1'(s(fun(X192,X193),sK4(X194,X195,fun(X192,X193))))))),s(fun(fun(X192,X198),fun(X193,X197)),'_dst_x00x11_2'(s(fun(X198,X197),X200),s(fun(fun(X192,X198),fun(X193,X198)),'_dstsel_0_x01_1'(s(fun(X193,X192),X196)))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X192,X193),bool),X195)))) )),
  inference(superposition,[],[f391,f823])).
fof(f24452,plain,(
  ( ! [X70,X68,X66,X76,X74,X72,X71,X69,X67,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X67,X66),X73),s(fun(X66,X67),happ(s(fun(X69,fun(X66,X67)),X70),s(X69,happ(s(fun(X68,X69),X71),s(X68,X72)))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X74,X75),X76),s(fun(X75,X74),X77)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X67,X74),fun(X66,X75)),'_dst_x00x11_2'(s(fun(X74,X75),X76),s(fun(fun(X67,X74),fun(X66,X74)),'_dstsel_0_x01_1'(s(fun(X66,X67),happ(s(fun(X68,fun(X66,X67)),'_dst_x0x1_2'(s(fun(X69,fun(X66,X67)),X70),s(fun(X68,X69),X71))),s(X68,X72))))))),s(fun(fun(X66,X75),fun(X67,X74)),'_dst_x00x11_2'(s(fun(X75,X74),X77),s(fun(fun(X66,X75),fun(X67,X75)),'_dstsel_0_x01_1'(s(fun(X67,X66),X73))))))))) )),
  inference(superposition,[],[f391,f365])).
fof(f24451,plain,(
  ( ! [X61,X59,X57,X64,X54,X62,X60,X58,X56,X65,X55,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X55,X54),X61),s(fun(X54,X55),happ(s(fun(X58,fun(X54,X55)),'_dst_x0x1_2'(s(fun(X56,fun(X54,X55)),X57),s(fun(X58,X56),X59))),s(X58,X60)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X62,X63),X64),s(fun(X63,X62),X65)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X55,X62),fun(X54,X63)),'_dst_x00x11_2'(s(fun(X62,X63),X64),s(fun(fun(X55,X62),fun(X54,X62)),'_dstsel_0_x01_1'(s(fun(X54,X55),happ(s(fun(X56,fun(X54,X55)),X57),s(X56,happ(s(fun(X58,X56),X59),s(X58,X60))))))))),s(fun(fun(X54,X63),fun(X55,X62)),'_dst_x00x11_2'(s(fun(X63,X62),X65),s(fun(fun(X54,X63),fun(X55,X63)),'_dstsel_0_x01_1'(s(fun(X55,X54),X61))))))))) )),
  inference(superposition,[],[f391,f365])).
fof(f24448,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X32,X22] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X23,X22),X29),s(fun(X22,X23),happ(s(fun(X26,fun(X22,X23)),'_dst_x00x11_2'(s(fun(X24,X23),X25),s(fun(X26,fun(X22,X24)),X27))),s(X26,X28)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X30,X31),X32),s(fun(X31,X30),X33)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X23,X30),fun(X22,X31)),'_dst_x00x11_2'(s(fun(X30,X31),X32),s(fun(fun(X23,X30),fun(X22,X30)),'_dstsel_0_x01_1'(s(fun(X22,X23),'_dst_x0x1_2'(s(fun(X24,X23),X25),s(fun(X22,X24),happ(s(fun(X26,fun(X22,X24)),X27),s(X26,X28))))))))),s(fun(fun(X22,X31),fun(X23,X30)),'_dst_x00x11_2'(s(fun(X31,X30),X33),s(fun(fun(X22,X31),fun(X23,X31)),'_dstsel_0_x01_1'(s(fun(X23,X22),X29))))))))) )),
  inference(superposition,[],[f391,f390])).
fof(f24447,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X11,X10),X17),s(fun(X10,X11),'_dst_x0x1_2'(s(fun(X13,X11),X14),s(fun(X10,X13),happ(s(fun(X12,fun(X10,X13)),X15),s(X12,X16)))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X18,X19),X20),s(fun(X19,X18),X21)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X11,X18),fun(X10,X19)),'_dst_x00x11_2'(s(fun(X18,X19),X20),s(fun(fun(X11,X18),fun(X10,X18)),'_dstsel_0_x01_1'(s(fun(X10,X11),happ(s(fun(X12,fun(X10,X11)),'_dst_x00x11_2'(s(fun(X13,X11),X14),s(fun(X12,fun(X10,X13)),X15))),s(X12,X16))))))),s(fun(fun(X10,X19),fun(X11,X18)),'_dst_x00x11_2'(s(fun(X19,X18),X21),s(fun(fun(X10,X19),fun(X11,X19)),'_dstsel_0_x01_1'(s(fun(X11,X10),X17))))))))) )),
  inference(superposition,[],[f391,f390])).
fof(f24445,plain,(
  ( ! [X198,X196,X194,X192,X200,X199,X197,X195,X193] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X192,X193),X194),s(fun(X193,X192),X196)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X197,X198),X199),s(fun(X198,X197),X200)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X192,X197),fun(X193,X198)),'_dst_x00x11_2'(s(fun(X197,X198),X199),s(fun(fun(X192,X197),fun(X193,X197)),'_dstsel_0_x01_1'(s(fun(X193,X192),X196))))),s(fun(fun(X193,X198),fun(X192,X197)),'_dst_x00x11_2'(s(fun(X198,X197),X200),s(fun(fun(X193,X198),fun(X192,X198)),'_dstsel_0_x01_1'(s(fun(X192,X193),sK4(X194,X195,fun(X192,X193)))))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X192,X193),bool),X195)))) )),
  inference(superposition,[],[f391,f823])).
fof(f24433,plain,(
  ( ! [X70,X68,X66,X76,X74,X72,X71,X69,X67,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X67),happ(s(fun(X69,fun(X66,X67)),X70),s(X69,happ(s(fun(X68,X69),X71),s(X68,X72))))),s(fun(X67,X66),X73)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X74,X75),X76),s(fun(X75,X74),X77)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X66,X74),fun(X67,X75)),'_dst_x00x11_2'(s(fun(X74,X75),X76),s(fun(fun(X66,X74),fun(X67,X74)),'_dstsel_0_x01_1'(s(fun(X67,X66),X73))))),s(fun(fun(X67,X75),fun(X66,X74)),'_dst_x00x11_2'(s(fun(X75,X74),X77),s(fun(fun(X67,X75),fun(X66,X75)),'_dstsel_0_x01_1'(s(fun(X66,X67),happ(s(fun(X68,fun(X66,X67)),'_dst_x0x1_2'(s(fun(X69,fun(X66,X67)),X70),s(fun(X68,X69),X71))),s(X68,X72))))))))))) )),
  inference(superposition,[],[f391,f365])).
fof(f24432,plain,(
  ( ! [X61,X59,X57,X64,X54,X62,X60,X58,X56,X65,X55,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X54,X55),happ(s(fun(X58,fun(X54,X55)),'_dst_x0x1_2'(s(fun(X56,fun(X54,X55)),X57),s(fun(X58,X56),X59))),s(X58,X60))),s(fun(X55,X54),X61)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X62,X63),X64),s(fun(X63,X62),X65)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X54,X62),fun(X55,X63)),'_dst_x00x11_2'(s(fun(X62,X63),X64),s(fun(fun(X54,X62),fun(X55,X62)),'_dstsel_0_x01_1'(s(fun(X55,X54),X61))))),s(fun(fun(X55,X63),fun(X54,X62)),'_dst_x00x11_2'(s(fun(X63,X62),X65),s(fun(fun(X55,X63),fun(X54,X63)),'_dstsel_0_x01_1'(s(fun(X54,X55),happ(s(fun(X56,fun(X54,X55)),X57),s(X56,happ(s(fun(X58,X56),X59),s(X58,X60))))))))))))) )),
  inference(superposition,[],[f391,f365])).
fof(f24429,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X32,X22] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X22,X23),happ(s(fun(X26,fun(X22,X23)),'_dst_x00x11_2'(s(fun(X24,X23),X25),s(fun(X26,fun(X22,X24)),X27))),s(X26,X28))),s(fun(X23,X22),X29)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X30,X31),X32),s(fun(X31,X30),X33)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X22,X30),fun(X23,X31)),'_dst_x00x11_2'(s(fun(X30,X31),X32),s(fun(fun(X22,X30),fun(X23,X30)),'_dstsel_0_x01_1'(s(fun(X23,X22),X29))))),s(fun(fun(X23,X31),fun(X22,X30)),'_dst_x00x11_2'(s(fun(X31,X30),X33),s(fun(fun(X23,X31),fun(X22,X31)),'_dstsel_0_x01_1'(s(fun(X22,X23),'_dst_x0x1_2'(s(fun(X24,X23),X25),s(fun(X22,X24),happ(s(fun(X26,fun(X22,X24)),X27),s(X26,X28))))))))))))) )),
  inference(superposition,[],[f391,f390])).
fof(f24428,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X10,X11),'_dst_x0x1_2'(s(fun(X13,X11),X14),s(fun(X10,X13),happ(s(fun(X12,fun(X10,X13)),X15),s(X12,X16))))),s(fun(X11,X10),X17)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X18,X19),X20),s(fun(X19,X18),X21)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X10,X18),fun(X11,X19)),'_dst_x00x11_2'(s(fun(X18,X19),X20),s(fun(fun(X10,X18),fun(X11,X18)),'_dstsel_0_x01_1'(s(fun(X11,X10),X17))))),s(fun(fun(X11,X19),fun(X10,X18)),'_dst_x00x11_2'(s(fun(X19,X18),X21),s(fun(fun(X11,X19),fun(X10,X19)),'_dstsel_0_x01_1'(s(fun(X10,X11),happ(s(fun(X12,fun(X10,X11)),'_dst_x00x11_2'(s(fun(X13,X11),X14),s(fun(X12,fun(X10,X13)),X15))),s(X12,X16))))))))))) )),
  inference(superposition,[],[f391,f390])).
fof(f24330,plain,(
  ( ! [X30,X31,X32] : (s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X30) = s(bool,X32)) ) | $spl28),
  inference(subsumption_resolution,[],[f23072,f256])).
fof(f23072,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X30) = s(bool,X32)) ) | $spl28),
  inference(superposition,[],[f434,f22017])).
fof(f23917,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(subsumption_resolution,[],[f23916,f256])).
fof(f23916,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(forward_demodulation,[],[f22537,f7015])).
fof(f22537,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,X14) | ~p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(superposition,[],[f269,f22017])).
fof(f22291,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(superposition,[],[f22017,f432])).
fof(f22290,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X0) = s(bool,X3)) ) | $spl28),
  inference(superposition,[],[f22017,f22017])).
fof(f21932,plain,(
  ( ! [X308,X306,X305,X307] : (~p(s(bool,X305)) | s(bool,X307) = s(bool,sK4(X305,X306,bool)) | s(bool,X307) = s(bool,X308) | s(bool,'T_0') = s(bool,X308) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X306)))) )),
  inference(superposition,[],[f1330,f823])).
fof(f21920,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X245] : (~p(s(bool,happ(s(fun(X240,bool),X241),s(X240,happ(s(fun(X239,X240),X242),s(X239,X243)))))) | s(bool,X244) = s(bool,happ(s(fun(X239,bool),'_dst_x0x1_2'(s(fun(X240,bool),X241),s(fun(X239,X240),X242))),s(X239,X243))) | s(bool,X244) = s(bool,X245) | s(bool,'T_0') = s(bool,X245)) )),
  inference(superposition,[],[f1330,f365])).
fof(f21919,plain,(
  ( ! [X237,X235,X233,X238,X236,X234,X232] : (~p(s(bool,happ(s(fun(X234,bool),'_dst_x0x1_2'(s(fun(X232,bool),X233),s(fun(X234,X232),X235))),s(X234,X236)))) | s(bool,X237) = s(bool,happ(s(fun(X232,bool),X233),s(X232,happ(s(fun(X234,X232),X235),s(X234,X236))))) | s(bool,X237) = s(bool,X238) | s(bool,'T_0') = s(bool,X238)) )),
  inference(superposition,[],[f1330,f365])).
fof(f22020,plain,(
  ( ! [X220,X221] : (s(bool,X220) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X220) = s(bool,X221) | s(bool,'T_0') = s(bool,X221)) ) | $spl28),
  inference(subsumption_resolution,[],[f21916,f256])).
fof(f21916,plain,(
  ( ! [X220,X221] : (~p(s(bool,'T_0')) | s(bool,X220) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X220) = s(bool,X221) | s(bool,'T_0') = s(bool,X221)) ) | $spl28),
  inference(superposition,[],[f1330,f7244])).
fof(f22017,plain,(
  ( ! [X216,X215] : (s(bool,X215) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X215) = s(bool,X216) | s(bool,'T_0') = s(bool,X216)) ) | $spl28),
  inference(subsumption_resolution,[],[f21914,f256])).
fof(f21914,plain,(
  ( ! [X216,X215] : (~p(s(bool,'T_0')) | s(bool,X215) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X215) = s(bool,X216) | s(bool,'T_0') = s(bool,X216)) ) | $spl28),
  inference(superposition,[],[f1330,f7015])).
fof(f22014,plain,(
  ( ! [X206,X204,X207,X205] : (s(bool,X206) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X204),'const.sum.INL_1'(s(bool,X205))))) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207) | s(bool,'F_0') = s(bool,X205)) )),
  inference(subsumption_resolution,[],[f21911,f256])).
fof(f21911,plain,(
  ( ! [X206,X204,X207,X205] : (~p(s(bool,'T_0')) | s(bool,X206) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X204),'const.sum.INL_1'(s(bool,X205))))) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207) | s(bool,'F_0') = s(bool,X205)) )),
  inference(superposition,[],[f1330,f500])).
fof(f22010,plain,(
  ( ! [X194,X192,X193] : (s(bool,X193) = s(bool,'const.ind_type.ISO_2'(s(fun(X192,X192),'_i_0_0'),s(fun(X192,X192),'_i_0_0'))) | s(bool,X193) = s(bool,X194) | s(bool,'T_0') = s(bool,X194)) )),
  inference(subsumption_resolution,[],[f21907,f256])).
fof(f21907,plain,(
  ( ! [X194,X192,X193] : (~p(s(bool,'T_0')) | s(bool,X193) = s(bool,'const.ind_type.ISO_2'(s(fun(X192,X192),'_i_0_0'),s(fun(X192,X192),'_i_0_0'))) | s(bool,X193) = s(bool,X194) | s(bool,'T_0') = s(bool,X194)) )),
  inference(superposition,[],[f1330,f427])).
fof(f22007,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,X182) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X180,bool),'const.sum.INR_1'(s(bool,X181))))) | s(bool,X182) = s(bool,X183) | s(bool,'T_0') = s(bool,X183) | s(bool,'F_0') = s(bool,X181)) )),
  inference(subsumption_resolution,[],[f21904,f256])).
fof(f21904,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,'T_0')) | s(bool,X182) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X180,bool),'const.sum.INR_1'(s(bool,X181))))) | s(bool,X182) = s(bool,X183) | s(bool,'T_0') = s(bool,X183) | s(bool,'F_0') = s(bool,X181)) )),
  inference(superposition,[],[f1330,f527])).
fof(f22006,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,X174) = s(bool,'const.ind_type.FCONS_3'(s(bool,X172),s(fun('type.num.num',bool),X173),s('type.num.num','const.num.|48|_0'))) | s(bool,X174) = s(bool,X175) | s(bool,'T_0') = s(bool,X175) | s(bool,'F_0') = s(bool,X172)) )),
  inference(subsumption_resolution,[],[f21902,f256])).
fof(f21902,plain,(
  ( ! [X175,X173,X174,X172] : (~p(s(bool,'T_0')) | s(bool,X174) = s(bool,'const.ind_type.FCONS_3'(s(bool,X172),s(fun('type.num.num',bool),X173),s('type.num.num','const.num.|48|_0'))) | s(bool,X174) = s(bool,X175) | s(bool,'T_0') = s(bool,X175) | s(bool,'F_0') = s(bool,X172)) )),
  inference(superposition,[],[f1330,f620])).
fof(f22004,plain,(
  ( ! [X167,X165,X166,X164,X168] : (s(bool,X167) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X164),'const.pair.,_2'(s(bool,X165),s(X164,X166))))) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168) | s(bool,'F_0') = s(bool,X165)) )),
  inference(subsumption_resolution,[],[f21900,f256])).
fof(f21900,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'T_0')) | s(bool,X167) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X164),'const.pair.,_2'(s(bool,X165),s(X164,X166))))) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168) | s(bool,'F_0') = s(bool,X165)) )),
  inference(superposition,[],[f1330,f730])).
fof(f22000,plain,(
  ( ! [X156,X154,X155,X153] : (s(bool,X155) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X153),bool),sK16(X154,sK6('_i_0_0','_i_0_0',bool),X153,bool)))) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156)) ) | $spl28),
  inference(subsumption_resolution,[],[f21897,f256])).
fof(f21897,plain,(
  ( ! [X156,X154,X155,X153] : (~p(s(bool,'T_0')) | s(bool,X155) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X153),bool),sK16(X154,sK6('_i_0_0','_i_0_0',bool),X153,bool)))) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156)) ) | $spl28),
  inference(superposition,[],[f1330,f7246])).
fof(f21999,plain,(
  ( ! [X152,X151,X149,X150] : (s(bool,X151) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X149),bool),sK16(X150,sK5('_i_0_0','_i_0_0',bool),X149,bool)))) | s(bool,X151) = s(bool,X152) | s(bool,'T_0') = s(bool,X152)) ) | $spl28),
  inference(subsumption_resolution,[],[f21896,f256])).
fof(f21896,plain,(
  ( ! [X152,X151,X149,X150] : (~p(s(bool,'T_0')) | s(bool,X151) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X149),bool),sK16(X150,sK5('_i_0_0','_i_0_0',bool),X149,bool)))) | s(bool,X151) = s(bool,X152) | s(bool,'T_0') = s(bool,X152)) ) | $spl28),
  inference(superposition,[],[f1330,f7017])).
fof(f21995,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,X134) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X132),bool),sK16(X133,'T_0',X132,bool)))) | s(bool,X134) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) )),
  inference(subsumption_resolution,[],[f21892,f256])).
fof(f21892,plain,(
  ( ! [X134,X132,X135,X133] : (~p(s(bool,'T_0')) | s(bool,X134) = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X132),bool),sK16(X133,'T_0',X132,bool)))) | s(bool,X134) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f1330,f4029])).
fof(f21988,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s(bool,X114) = s(bool,'|dollar|exists_1'(s(fun(X112,bool),X113))) | s(bool,X114) = s(bool,X115) | s(bool,'T_0') = s(bool,X115) | s(X112,X116) = s(X112,sK4(X116,X113,X112))) )),
  inference(subsumption_resolution,[],[f21887,f256])).
fof(f21887,plain,(
  ( ! [X116,X114,X112,X115,X113] : (~p(s(bool,'T_0')) | s(bool,X114) = s(bool,'|dollar|exists_1'(s(fun(X112,bool),X113))) | s(bool,X114) = s(bool,X115) | s(bool,'T_0') = s(bool,X115) | s(X112,X116) = s(X112,sK4(X116,X113,X112))) )),
  inference(superposition,[],[f1330,f823])).
fof(f21987,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,X110) = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X107,bool),'const.pair.,_2'(s(X107,X108),s(bool,X109))))) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111) | s(bool,'F_0') = s(bool,X109)) )),
  inference(subsumption_resolution,[],[f21886,f256])).
fof(f21886,plain,(
  ( ! [X111,X109,X107,X110,X108] : (~p(s(bool,'T_0')) | s(bool,X110) = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X107,bool),'const.pair.,_2'(s(X107,X108),s(bool,X109))))) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111) | s(bool,'F_0') = s(bool,X109)) )),
  inference(superposition,[],[f1330,f673])).
fof(f21986,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,X105) = s(bool,happ(s(fun('type.list.list'(X103),bool),sK16(X104,sK6('_i_0_0','_i_0_0',bool),X103,bool)),s('type.list.list'(X103),'const.list.NIL_0'))) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) ) | $spl28),
  inference(subsumption_resolution,[],[f21885,f256])).
fof(f21885,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | s(bool,X105) = s(bool,happ(s(fun('type.list.list'(X103),bool),sK16(X104,sK6('_i_0_0','_i_0_0',bool),X103,bool)),s('type.list.list'(X103),'const.list.NIL_0'))) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) ) | $spl28),
  inference(superposition,[],[f1330,f7238])).
fof(f21985,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,X101) = s(bool,happ(s(fun('type.list.list'(X99),bool),sK16(X100,sK5('_i_0_0','_i_0_0',bool),X99,bool)),s('type.list.list'(X99),'const.list.NIL_0'))) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl28),
  inference(subsumption_resolution,[],[f21884,f256])).
fof(f21884,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | s(bool,X101) = s(bool,happ(s(fun('type.list.list'(X99),bool),sK16(X100,sK5('_i_0_0','_i_0_0',bool),X99,bool)),s('type.list.list'(X99),'const.list.NIL_0'))) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl28),
  inference(superposition,[],[f1330,f7009])).
fof(f21984,plain,(
  ( ! [X94,X95,X93] : (s(bool,X94) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X93))) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'F_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f21882,f256])).
fof(f21882,plain,(
  ( ! [X94,X95,X93] : (~p(s(bool,'T_0')) | s(bool,X94) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X93))) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'F_0') = s(bool,X93)) )),
  inference(superposition,[],[f1330,f459])).
fof(f21729,plain,(
  ( ! [X1352,X1346,X1348,X1350,X1345,X1347,X1349,X1351] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1352))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.num.num','type.integer.int'),X1349),s('type.num.num',X1345))))) | s('type.integer.int',X1352) = s('type.integer.int','const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1345))),s(fun('type.integer.int','type.integer.int'),X1346),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X1347),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X1348),s(fun('type.num.num','type.integer.int'),X1349),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X1350),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X1351)))) )),
  inference(superposition,[],[f332,f322])).
fof(f21717,plain,(
  ( ! [X1242,X1240,X1246,X1244,X1243,X1241,X1247,X1245] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1247))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1244),s('type.num.num',X1240))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1247) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1240))),s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1241),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1242),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X1243),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1244),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1245),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1246)))) )),
  inference(superposition,[],[f334,f322])).
fof(f21713,plain,(
  ( ! [X1203,X1201,X1207,X1205,X1210,X1208,X1202,X1200,X1206,X1204,X1199,X1209] : (s(X1200,happ(s(fun('type.list.list'(X1199),X1200),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1201))),s(fun('type.integer.int',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1202),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1203),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200))))),X1204),s(fun('type.num.num',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1205),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))))))),X1206),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))))))),X1207)),X1208,X1199,X1200)),s('type.list.list'(X1199),'const.list.CONS_2'(s(X1199,X1209),s('type.list.list'(X1199),X1210))))) = s(X1200,happ(s(fun(X1200,X1200),happ(s(fun('type.list.list'(X1199),fun(X1200,X1200)),happ(s(fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200))),happ(s(fun('type.num.num',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1205),s('type.num.num',X1201))),s(X1199,X1209))),s('type.list.list'(X1199),X1210))),s(X1200,happ(s(fun('type.list.list'(X1199),X1200),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1201))),s(fun('type.integer.int',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1202),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1203),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200))))),X1204),s(fun('type.num.num',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))),X1205),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))))))),X1206),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1199,fun('type.list.list'(X1199),fun(X1200,X1200)))))))),X1207)),X1208,X1199,X1200)),s('type.list.list'(X1199),X1210)))))) )),
  inference(superposition,[],[f357,f322])).
fof(f21812,plain,(
  ( ! [X1139,X1137,X1130,X1134,X1132,X1138,X1136,X1131,X1135,X1133] : (s(X1130,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)) != s(X1130,happ(s(fun(X1131,X1130),X1139),s(X1131,happ(s(fun(X1130,X1131),happ(s(fun('type.num.num',fun(X1130,X1131)),X1136),s('type.num.num',X1132))),s(X1130,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)))))) | s(X1131,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)) != s(X1131,happ(s(fun(X1130,X1131),happ(s(fun('type.num.num',fun(X1130,X1131)),X1136),s('type.num.num',X1132))),s(X1130,happ(s(fun(X1131,X1130),X1139),s(X1131,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1131,X1130),X1139),s(fun(X1130,X1131),happ(s(fun('type.num.num',fun(X1130,X1131)),X1136),s('type.num.num',X1132))))))) )),
  inference(forward_demodulation,[],[f21811,f322])).
fof(f21811,plain,(
  ( ! [X1139,X1137,X1130,X1134,X1132,X1138,X1136,X1131,X1135,X1133] : (s(X1131,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)) != s(X1131,happ(s(fun(X1130,X1131),happ(s(fun('type.num.num',fun(X1130,X1131)),X1136),s('type.num.num',X1132))),s(X1130,happ(s(fun(X1131,X1130),X1139),s(X1131,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1131,X1130),X1139),s(fun(X1130,X1131),happ(s(fun('type.num.num',fun(X1130,X1131)),X1136),s('type.num.num',X1132)))))) | s(X1130,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)) != s(X1130,happ(s(fun(X1131,X1130),X1139),s(X1131,happ(s(fun(X1130,X1131),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138))),s(X1130,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130))))))) )),
  inference(forward_demodulation,[],[f21707,f322])).
fof(f21707,plain,(
  ( ! [X1139,X1137,X1130,X1134,X1132,X1138,X1136,X1131,X1135,X1133] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1131,X1130),X1139),s(fun(X1130,X1131),happ(s(fun('type.num.num',fun(X1130,X1131)),X1136),s('type.num.num',X1132)))))) | s(X1131,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)) != s(X1131,happ(s(fun(X1130,X1131),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138))),s(X1130,happ(s(fun(X1131,X1130),X1139),s(X1131,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)))))) | s(X1130,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130)) != s(X1130,happ(s(fun(X1131,X1130),X1139),s(X1131,happ(s(fun(X1130,X1131),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138))),s(X1130,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1132))),s(fun('type.integer.int',fun(X1130,X1131)),X1133),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1130,X1131)),X1134),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1130,X1131))),X1135),s(fun('type.num.num',fun(X1130,X1131)),X1136),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1130,X1131)))))),X1137),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1130,X1131)))))),X1138)),X1139,X1131,X1130))))))) )),
  inference(superposition,[],[f355,f322])).
fof(f21810,plain,(
  ( ! [X1128,X1122,X1120,X1126,X1124,X1129,X1123,X1121,X1127,X1125] : (s(X1121,sK14(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)) != s(X1121,happ(s(fun(X1120,X1121),happ(s(fun('type.num.num',fun(X1120,X1121)),X1126),s('type.num.num',X1122))),s(X1120,happ(s(fun(X1121,X1120),X1129),s(X1121,sK14(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)))))) | s(X1120,sK15(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)) != s(X1120,happ(s(fun(X1121,X1120),X1129),s(X1121,happ(s(fun(X1120,X1121),happ(s(fun('type.num.num',fun(X1120,X1121)),X1126),s('type.num.num',X1122))),s(X1120,sK15(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1120,X1121),happ(s(fun('type.num.num',fun(X1120,X1121)),X1126),s('type.num.num',X1122))),s(fun(X1121,X1120),X1129))))) )),
  inference(forward_demodulation,[],[f21809,f322])).
fof(f21809,plain,(
  ( ! [X1128,X1122,X1120,X1126,X1124,X1129,X1123,X1121,X1127,X1125] : (s(X1120,sK15(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)) != s(X1120,happ(s(fun(X1121,X1120),X1129),s(X1121,happ(s(fun(X1120,X1121),happ(s(fun('type.num.num',fun(X1120,X1121)),X1126),s('type.num.num',X1122))),s(X1120,sK15(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1120,X1121),happ(s(fun('type.num.num',fun(X1120,X1121)),X1126),s('type.num.num',X1122))),s(fun(X1121,X1120),X1129)))) | s(X1121,sK14(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)) != s(X1121,happ(s(fun(X1120,X1121),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128))),s(X1120,happ(s(fun(X1121,X1120),X1129),s(X1121,sK14(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121))))))) )),
  inference(forward_demodulation,[],[f21706,f322])).
fof(f21706,plain,(
  ( ! [X1128,X1122,X1120,X1126,X1124,X1129,X1123,X1121,X1127,X1125] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1120,X1121),happ(s(fun('type.num.num',fun(X1120,X1121)),X1126),s('type.num.num',X1122))),s(fun(X1121,X1120),X1129)))) | s(X1120,sK15(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)) != s(X1120,happ(s(fun(X1121,X1120),X1129),s(X1121,happ(s(fun(X1120,X1121),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128))),s(X1120,sK15(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)))))) | s(X1121,sK14(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121)) != s(X1121,happ(s(fun(X1120,X1121),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128))),s(X1120,happ(s(fun(X1121,X1120),X1129),s(X1121,sK14(X1129,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1122))),s(fun('type.integer.int',fun(X1120,X1121)),X1123),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1120,X1121)),X1124),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1120,X1121))),X1125),s(fun('type.num.num',fun(X1120,X1121)),X1126),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1120,X1121)))))),X1127),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1120,X1121)))))),X1128)),X1120,X1121))))))) )),
  inference(superposition,[],[f355,f322])).
fof(f21804,plain,(
  ( ! [X1075,X1073,X1066,X1070,X1068,X1074,X1072,X1067,X1071,X1069] : (s(fun(X1066,X1067),X1075) = s(fun(X1066,X1067),happ(s(fun('type.num.num',fun(X1066,X1067)),X1072),s('type.num.num',X1068))) | s(X1067,happ(s(fun(X1066,X1067),X1075),s(X1066,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1068))),s(fun('type.integer.int',fun(X1066,X1067)),X1069),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1066,X1067)),X1070),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1066,X1067))),X1071),s(fun('type.num.num',fun(X1066,X1067)),X1072),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1066,X1067)))))),X1073),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1066,X1067)))))),X1074)),X1075,X1066,X1067)))) != s(X1067,happ(s(fun(X1066,X1067),happ(s(fun('type.num.num',fun(X1066,X1067)),X1072),s('type.num.num',X1068))),s(X1066,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1068))),s(fun('type.integer.int',fun(X1066,X1067)),X1069),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1066,X1067)),X1070),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1066,X1067))),X1071),s(fun('type.num.num',fun(X1066,X1067)),X1072),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1066,X1067)))))),X1073),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1066,X1067)))))),X1074)),X1075,X1066,X1067))))) )),
  inference(forward_demodulation,[],[f21701,f322])).
fof(f21701,plain,(
  ( ! [X1075,X1073,X1066,X1070,X1068,X1074,X1072,X1067,X1071,X1069] : (s(X1067,happ(s(fun(X1066,X1067),X1075),s(X1066,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1068))),s(fun('type.integer.int',fun(X1066,X1067)),X1069),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1066,X1067)),X1070),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1066,X1067))),X1071),s(fun('type.num.num',fun(X1066,X1067)),X1072),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1066,X1067)))))),X1073),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1066,X1067)))))),X1074)),X1075,X1066,X1067)))) != s(X1067,happ(s(fun(X1066,X1067),happ(s(fun('type.num.num',fun(X1066,X1067)),X1072),s('type.num.num',X1068))),s(X1066,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1068))),s(fun('type.integer.int',fun(X1066,X1067)),X1069),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1066,X1067)),X1070),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1066,X1067))),X1071),s(fun('type.num.num',fun(X1066,X1067)),X1072),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1066,X1067)))))),X1073),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1066,X1067)))))),X1074)),X1075,X1066,X1067)))) | s(fun(X1066,X1067),X1075) = s(fun(X1066,X1067),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1068))),s(fun('type.integer.int',fun(X1066,X1067)),X1069),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1066,X1067)),X1070),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1066,X1067))),X1071),s(fun('type.num.num',fun(X1066,X1067)),X1072),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1066,X1067)))))),X1073),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1066,X1067)))))),X1074)))) )),
  inference(superposition,[],[f352,f322])).
fof(f21803,plain,(
  ( ! [X1064,X1058,X1056,X1062,X1060,X1065,X1059,X1057,X1063,X1061] : (s(fun(X1056,X1057),X1065) = s(fun(X1056,X1057),happ(s(fun('type.num.num',fun(X1056,X1057)),X1062),s('type.num.num',X1058))) | s(X1057,happ(s(fun(X1056,X1057),X1065),s(X1056,sK13(X1065,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1058))),s(fun('type.integer.int',fun(X1056,X1057)),X1059),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1056,X1057)),X1060),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1056,X1057))),X1061),s(fun('type.num.num',fun(X1056,X1057)),X1062),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1056,X1057)))))),X1063),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1056,X1057)))))),X1064)),X1056,X1057)))) != s(X1057,happ(s(fun(X1056,X1057),happ(s(fun('type.num.num',fun(X1056,X1057)),X1062),s('type.num.num',X1058))),s(X1056,sK13(X1065,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1058))),s(fun('type.integer.int',fun(X1056,X1057)),X1059),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1056,X1057)),X1060),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1056,X1057))),X1061),s(fun('type.num.num',fun(X1056,X1057)),X1062),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1056,X1057)))))),X1063),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1056,X1057)))))),X1064)),X1056,X1057))))) )),
  inference(forward_demodulation,[],[f21700,f322])).
fof(f21700,plain,(
  ( ! [X1064,X1058,X1056,X1062,X1060,X1065,X1059,X1057,X1063,X1061] : (s(X1057,happ(s(fun(X1056,X1057),X1065),s(X1056,sK13(X1065,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1058))),s(fun('type.integer.int',fun(X1056,X1057)),X1059),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1056,X1057)),X1060),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1056,X1057))),X1061),s(fun('type.num.num',fun(X1056,X1057)),X1062),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1056,X1057)))))),X1063),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1056,X1057)))))),X1064)),X1056,X1057)))) != s(X1057,happ(s(fun(X1056,X1057),happ(s(fun('type.num.num',fun(X1056,X1057)),X1062),s('type.num.num',X1058))),s(X1056,sK13(X1065,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1058))),s(fun('type.integer.int',fun(X1056,X1057)),X1059),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1056,X1057)),X1060),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1056,X1057))),X1061),s(fun('type.num.num',fun(X1056,X1057)),X1062),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1056,X1057)))))),X1063),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1056,X1057)))))),X1064)),X1056,X1057)))) | s(fun(X1056,X1057),X1065) = s(fun(X1056,X1057),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1058))),s(fun('type.integer.int',fun(X1056,X1057)),X1059),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1056,X1057)),X1060),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1056,X1057))),X1061),s(fun('type.num.num',fun(X1056,X1057)),X1062),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1056,X1057)))))),X1063),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1056,X1057)))))),X1064)))) )),
  inference(superposition,[],[f352,f322])).
fof(f21693,plain,(
  ( ! [X984,X978,X976,X982,X980,X975,X985,X979,X977,X983,X981,X974] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X974,X975),happ(s(fun('type.num.num',fun(X974,X975)),X980),s('type.num.num',X976))),s(fun(X975,X974),X983)))) | ~p(s(bool,happ(s(fun(X974,bool),X984),s(X974,happ(s(fun(X975,X974),X983),s(X975,X985)))))) | p(s(bool,happ(s(fun(X974,bool),X984),s(X974,sK11(X984,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X976))),s(fun('type.integer.int',fun(X974,X975)),X977),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X974,X975)),X978),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X974,X975))),X979),s(fun('type.num.num',fun(X974,X975)),X980),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X974,X975)))))),X981),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X974,X975)))))),X982)),X983,X975,X974)))))) )),
  inference(superposition,[],[f347,f322])).
fof(f21796,plain,(
  ( ! [X971,X969,X973,X963,X967,X965,X970,X968,X972,X962,X966,X964] : (~p(s(bool,happ(s(fun(X963,bool),X972),s(X963,happ(s(fun(X962,X963),happ(s(fun('type.num.num',fun(X962,X963)),X968),s('type.num.num',X964))),s(X962,X973)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X963,X962),X971),s(fun(X962,X963),happ(s(fun('type.num.num',fun(X962,X963)),X968),s('type.num.num',X964)))))) | p(s(bool,happ(s(fun(X963,bool),X972),s(X963,sK11(X972,X971,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X964))),s(fun('type.integer.int',fun(X962,X963)),X965),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X962,X963)),X966),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X962,X963))),X967),s(fun('type.num.num',fun(X962,X963)),X968),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X962,X963)))))),X969),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X962,X963)))))),X970)),X962,X963)))))) )),
  inference(forward_demodulation,[],[f21692,f322])).
fof(f21692,plain,(
  ( ! [X971,X969,X973,X963,X967,X965,X970,X968,X972,X962,X966,X964] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X963,X962),X971),s(fun(X962,X963),happ(s(fun('type.num.num',fun(X962,X963)),X968),s('type.num.num',X964)))))) | ~p(s(bool,happ(s(fun(X963,bool),X972),s(X963,happ(s(fun(X962,X963),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X964))),s(fun('type.integer.int',fun(X962,X963)),X965),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X962,X963)),X966),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X962,X963))),X967),s(fun('type.num.num',fun(X962,X963)),X968),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X962,X963)))))),X969),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X962,X963)))))),X970))),s(X962,X973)))))) | p(s(bool,happ(s(fun(X963,bool),X972),s(X963,sK11(X972,X971,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X964))),s(fun('type.integer.int',fun(X962,X963)),X965),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X962,X963)),X966),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X962,X963))),X967),s(fun('type.num.num',fun(X962,X963)),X968),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X962,X963)))))),X969),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X962,X963)))))),X970)),X962,X963)))))) )),
  inference(superposition,[],[f347,f322])).
fof(f21691,plain,(
  ( ! [X957,X951,X961,X952,X954,X956,X958,X950,X960,X955,X953,X959] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X950,X951),happ(s(fun('type.num.num',fun(X950,X951)),X956),s('type.num.num',X952))),s(fun(X951,X950),X959)))) | ~p(s(bool,happ(s(fun(X950,bool),X960),s(X950,X961)))) | p(s(bool,happ(s(fun(X950,bool),X960),s(X950,happ(s(fun(X951,X950),X959),s(X951,sK10(X960,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X952))),s(fun('type.integer.int',fun(X950,X951)),X953),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X950,X951)),X954),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X950,X951))),X955),s(fun('type.num.num',fun(X950,X951)),X956),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X950,X951)))))),X957),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X950,X951)))))),X958)),X959,X951,X950)))))))) )),
  inference(superposition,[],[f346,f322])).
fof(f21795,plain,(
  ( ! [X947,X945,X938,X949,X942,X940,X946,X944,X948,X939,X943,X941] : (p(s(bool,happ(s(fun(X939,bool),X948),s(X939,happ(s(fun(X938,X939),happ(s(fun('type.num.num',fun(X938,X939)),X944),s('type.num.num',X940))),s(X938,sK10(X948,X947,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X940))),s(fun('type.integer.int',fun(X938,X939)),X941),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X938,X939)),X942),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X938,X939))),X943),s(fun('type.num.num',fun(X938,X939)),X944),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X938,X939)))))),X945),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X938,X939)))))),X946)),X938,X939))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X939,X938),X947),s(fun(X938,X939),happ(s(fun('type.num.num',fun(X938,X939)),X944),s('type.num.num',X940)))))) | ~p(s(bool,happ(s(fun(X939,bool),X948),s(X939,X949))))) )),
  inference(forward_demodulation,[],[f21690,f322])).
fof(f21690,plain,(
  ( ! [X947,X945,X938,X949,X942,X940,X946,X944,X948,X939,X943,X941] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X939,X938),X947),s(fun(X938,X939),happ(s(fun('type.num.num',fun(X938,X939)),X944),s('type.num.num',X940)))))) | ~p(s(bool,happ(s(fun(X939,bool),X948),s(X939,X949)))) | p(s(bool,happ(s(fun(X939,bool),X948),s(X939,happ(s(fun(X938,X939),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X940))),s(fun('type.integer.int',fun(X938,X939)),X941),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X938,X939)),X942),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X938,X939))),X943),s(fun('type.num.num',fun(X938,X939)),X944),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X938,X939)))))),X945),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X938,X939)))))),X946))),s(X938,sK10(X948,X947,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X940))),s(fun('type.integer.int',fun(X938,X939)),X941),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X938,X939)),X942),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X938,X939))),X943),s(fun('type.num.num',fun(X938,X939)),X944),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X938,X939)))))),X945),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X938,X939)))))),X946)),X938,X939)))))))) )),
  inference(superposition,[],[f346,f322])).
fof(f21689,plain,(
  ( ! [X926,X936,X930,X928,X934,X932,X927,X937,X931,X929,X935,X933] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X926,X927),happ(s(fun('type.num.num',fun(X926,X927)),X932),s('type.num.num',X928))),s(fun(X927,X926),X935)))) | ~p(s(bool,happ(s(fun(X926,bool),X936),s(X926,happ(s(fun(X927,X926),X935),s(X927,sK9(X936,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X928))),s(fun('type.integer.int',fun(X926,X927)),X929),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X926,X927)),X930),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X926,X927))),X931),s(fun('type.num.num',fun(X926,X927)),X932),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X926,X927)))))),X933),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X926,X927)))))),X934)),X935,X927,X926))))))) | p(s(bool,happ(s(fun(X926,bool),X936),s(X926,X937))))) )),
  inference(superposition,[],[f345,f322])).
fof(f21794,plain,(
  ( ! [X922,X920,X918,X924,X914,X916,X915,X923,X919,X917,X921,X925] : (~p(s(bool,happ(s(fun(X915,bool),X924),s(X915,happ(s(fun(X914,X915),happ(s(fun('type.num.num',fun(X914,X915)),X920),s('type.num.num',X916))),s(X914,sK9(X924,X923,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X916))),s(fun('type.integer.int',fun(X914,X915)),X917),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X914,X915)),X918),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X914,X915))),X919),s(fun('type.num.num',fun(X914,X915)),X920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X914,X915)))))),X921),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X914,X915)))))),X922)),X914,X915))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X915,X914),X923),s(fun(X914,X915),happ(s(fun('type.num.num',fun(X914,X915)),X920),s('type.num.num',X916)))))) | p(s(bool,happ(s(fun(X915,bool),X924),s(X915,X925))))) )),
  inference(forward_demodulation,[],[f21688,f322])).
fof(f21688,plain,(
  ( ! [X922,X920,X918,X916,X914,X924,X915,X923,X919,X917,X921,X925] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X915,X914),X923),s(fun(X914,X915),happ(s(fun('type.num.num',fun(X914,X915)),X920),s('type.num.num',X916)))))) | ~p(s(bool,happ(s(fun(X915,bool),X924),s(X915,happ(s(fun(X914,X915),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X916))),s(fun('type.integer.int',fun(X914,X915)),X917),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X914,X915)),X918),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X914,X915))),X919),s(fun('type.num.num',fun(X914,X915)),X920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X914,X915)))))),X921),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X914,X915)))))),X922))),s(X914,sK9(X924,X923,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X916))),s(fun('type.integer.int',fun(X914,X915)),X917),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X914,X915)),X918),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X914,X915))),X919),s(fun('type.num.num',fun(X914,X915)),X920),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X914,X915)))))),X921),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X914,X915)))))),X922)),X914,X915))))))) | p(s(bool,happ(s(fun(X915,bool),X924),s(X915,X925))))) )),
  inference(superposition,[],[f345,f322])).
fof(f21687,plain,(
  ( ! [X912,X907,X905,X911,X909,X903,X913,X906,X904,X910,X908,X902] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X902,X903),happ(s(fun('type.num.num',fun(X902,X903)),X908),s('type.num.num',X904))),s(fun(X903,X902),X911)))) | ~p(s(bool,happ(s(fun(X902,bool),X912),s(X902,sK8(X912,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X904))),s(fun('type.integer.int',fun(X902,X903)),X905),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X902,X903)),X906),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X902,X903))),X907),s(fun('type.num.num',fun(X902,X903)),X908),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X902,X903)))))),X909),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X902,X903)))))),X910)),X911,X903,X902))))) | p(s(bool,happ(s(fun(X902,bool),X912),s(X902,happ(s(fun(X903,X902),X911),s(X903,X913))))))) )),
  inference(superposition,[],[f344,f322])).
fof(f21793,plain,(
  ( ! [X895,X893,X899,X890,X897,X901,X892,X894,X898,X896,X891,X900] : (p(s(bool,happ(s(fun(X891,bool),X900),s(X891,happ(s(fun(X890,X891),happ(s(fun('type.num.num',fun(X890,X891)),X896),s('type.num.num',X892))),s(X890,X901)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X891,X890),X899),s(fun(X890,X891),happ(s(fun('type.num.num',fun(X890,X891)),X896),s('type.num.num',X892)))))) | ~p(s(bool,happ(s(fun(X891,bool),X900),s(X891,sK8(X900,X899,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X892))),s(fun('type.integer.int',fun(X890,X891)),X893),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X890,X891)),X894),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X890,X891))),X895),s(fun('type.num.num',fun(X890,X891)),X896),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X890,X891)))))),X897),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X890,X891)))))),X898)),X890,X891)))))) )),
  inference(forward_demodulation,[],[f21686,f322])).
fof(f21686,plain,(
  ( ! [X895,X893,X899,X890,X897,X894,X892,X901,X898,X896,X891,X900] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X891,X890),X899),s(fun(X890,X891),happ(s(fun('type.num.num',fun(X890,X891)),X896),s('type.num.num',X892)))))) | ~p(s(bool,happ(s(fun(X891,bool),X900),s(X891,sK8(X900,X899,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X892))),s(fun('type.integer.int',fun(X890,X891)),X893),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X890,X891)),X894),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X890,X891))),X895),s(fun('type.num.num',fun(X890,X891)),X896),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X890,X891)))))),X897),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X890,X891)))))),X898)),X890,X891))))) | p(s(bool,happ(s(fun(X891,bool),X900),s(X891,happ(s(fun(X890,X891),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X892))),s(fun('type.integer.int',fun(X890,X891)),X893),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X890,X891)),X894),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X890,X891))),X895),s(fun('type.num.num',fun(X890,X891)),X896),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X890,X891)))))),X897),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X890,X891)))))),X898))),s(X890,X901))))))) )),
  inference(superposition,[],[f344,f322])).
fof(f21792,plain,(
  ( ! [X860,X854,X859,X857,X861,X855,X858,X856] : (~p(s(bool,happ(s(fun('type.list.list'(X854),bool),happ(s(fun('type.num.num',fun('type.list.list'(X854),bool)),X859),s('type.num.num',X855))),s('type.list.list'(X854),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X854),bool),happ(s(fun('type.num.num',fun('type.list.list'(X854),bool)),X859),s('type.num.num',X855))),s('type.list.list'(X854),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X855))),s(fun('type.integer.int',fun('type.list.list'(X854),bool)),X856),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X854),bool)),X857),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X854),bool))),X858),s(fun('type.num.num',fun('type.list.list'(X854),bool)),X859),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X854),bool)))))),X860),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X854),bool)))))),X861)),X854)))))) )),
  inference(forward_demodulation,[],[f21683,f322])).
fof(f21683,plain,(
  ( ! [X860,X854,X859,X857,X861,X855,X858,X856] : (p(s(bool,happ(s(fun('type.list.list'(X854),bool),happ(s(fun('type.num.num',fun('type.list.list'(X854),bool)),X859),s('type.num.num',X855))),s('type.list.list'(X854),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X855))),s(fun('type.integer.int',fun('type.list.list'(X854),bool)),X856),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X854),bool)),X857),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X854),bool))),X858),s(fun('type.num.num',fun('type.list.list'(X854),bool)),X859),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X854),bool)))))),X860),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X854),bool)))))),X861)),X854))))) | ~p(s(bool,happ(s(fun('type.list.list'(X854),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X855))),s(fun('type.integer.int',fun('type.list.list'(X854),bool)),X856),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X854),bool)),X857),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X854),bool))),X858),s(fun('type.num.num',fun('type.list.list'(X854),bool)),X859),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X854),bool)))))),X860),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X854),bool)))))),X861))),s('type.list.list'(X854),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f322])).
fof(f21791,plain,(
  ( ! [X850,X848,X852,X847,X845,X851,X849,X853,X846] : (p(s(bool,happ(s(fun('type.list.list'(X845),bool),happ(s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s('type.num.num',X846))),s('type.list.list'(X845),X853)))) | ~p(s(bool,happ(s(fun('type.list.list'(X845),bool),happ(s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s('type.num.num',X846))),s('type.list.list'(X845),'const.list.CONS_2'(s(X845,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852)),X845)),s('type.list.list'(X845),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852)),X845))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X845),bool),happ(s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s('type.num.num',X846))),s('type.list.list'(X845),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f21790,f322])).
fof(f21790,plain,(
  ( ! [X850,X848,X852,X847,X845,X851,X849,X853,X846] : (~p(s(bool,happ(s(fun('type.list.list'(X845),bool),happ(s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s('type.num.num',X846))),s('type.list.list'(X845),'const.list.CONS_2'(s(X845,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852)),X845)),s('type.list.list'(X845),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852)),X845))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X845),bool),happ(s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s('type.num.num',X846))),s('type.list.list'(X845),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X845),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852))),s('type.list.list'(X845),X853))))) )),
  inference(forward_demodulation,[],[f21682,f322])).
fof(f21682,plain,(
  ( ! [X850,X848,X852,X847,X845,X851,X849,X853,X846] : (~p(s(bool,happ(s(fun('type.list.list'(X845),bool),happ(s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s('type.num.num',X846))),s('type.list.list'(X845),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X845),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852))),s('type.list.list'(X845),'const.list.CONS_2'(s(X845,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852)),X845)),s('type.list.list'(X845),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852)),X845))))))) | p(s(bool,happ(s(fun('type.list.list'(X845),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X846))),s(fun('type.integer.int',fun('type.list.list'(X845),bool)),X847),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X845),bool)),X848),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X845),bool))),X849),s(fun('type.num.num',fun('type.list.list'(X845),bool)),X850),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X845),bool)))))),X851),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X845),bool)))))),X852))),s('type.list.list'(X845),X853))))) )),
  inference(superposition,[],[f305,f322])).
fof(f21671,plain,(
  ( ! [X728,X730,X724,X726,X729,X731,X725,X727,X723] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X723,bool),happ(s(fun('type.num.num',fun(X723,bool)),X728),s('type.num.num',X724))))) | s(X723,X731) = s(X723,sK4(X731,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X724))),s(fun('type.integer.int',fun(X723,bool)),X725),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X723,bool)),X726),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X723,bool))),X727),s(fun('type.num.num',fun(X723,bool)),X728),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X723,bool)))))),X729),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X723,bool)))))),X730)),X723))) )),
  inference(superposition,[],[f823,f322])).
fof(f21787,plain,(
  ( ! [X720,X722,X716,X718,X714,X721,X717,X719,X713,X715] : (p(s(bool,happ(s(fun(X713,bool),happ(s(fun('type.num.num',fun(X713,bool)),X718),s('type.num.num',X714))),s(X713,sK6(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713))))) | ~p(s(bool,happ(s(fun(X713,bool),happ(s(fun('type.num.num',fun(X713,bool)),X718),s('type.num.num',X714))),s(X713,sK5(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713))))) | ~p(s(bool,happ(s(fun(X713,bool),X721),s(X713,X722))))) )),
  inference(forward_demodulation,[],[f21670,f322])).
fof(f21670,plain,(
  ( ! [X720,X722,X716,X718,X714,X721,X717,X719,X713,X715] : (~p(s(bool,happ(s(fun(X713,bool),happ(s(fun('type.num.num',fun(X713,bool)),X718),s('type.num.num',X714))),s(X713,sK5(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713))))) | ~p(s(bool,happ(s(fun(X713,bool),X721),s(X713,X722)))) | p(s(bool,happ(s(fun(X713,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720))),s(X713,sK6(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713)))))) )),
  inference(superposition,[],[f315,f322])).
fof(f21786,plain,(
  ( ! [X705,X707,X712,X708,X710,X704,X706,X709,X711,X703] : (p(s(bool,happ(s(fun(X703,bool),happ(s(fun('type.num.num',fun(X703,bool)),X708),s('type.num.num',X704))),s(X703,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703))))) | ~p(s(bool,happ(s(fun(X703,bool),happ(s(fun('type.num.num',fun(X703,bool)),X708),s('type.num.num',X704))),s(X703,X711)))) | p(s(bool,happ(s(fun(X703,bool),X712),s(X703,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703)))))) )),
  inference(forward_demodulation,[],[f21669,f322])).
fof(f21669,plain,(
  ( ! [X705,X707,X712,X708,X710,X704,X706,X709,X711,X703] : (~p(s(bool,happ(s(fun(X703,bool),happ(s(fun('type.num.num',fun(X703,bool)),X708),s('type.num.num',X704))),s(X703,X711)))) | p(s(bool,happ(s(fun(X703,bool),X712),s(X703,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703))))) | p(s(bool,happ(s(fun(X703,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710))),s(X703,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703)))))) )),
  inference(superposition,[],[f314,f322])).
fof(f21668,plain,(
  ( ! [X697,X699,X695,X700,X702,X696,X698,X694,X701] : (p(s(bool,'|dollar|exists_1'(s(fun(X694,bool),happ(s(fun('type.num.num',fun(X694,bool)),X699),s('type.num.num',X695)))))) | s(X694,X702) = s(X694,sK4(X702,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X695))),s(fun('type.integer.int',fun(X694,bool)),X696),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X694,bool)),X697),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X694,bool))),X698),s(fun('type.num.num',fun(X694,bool)),X699),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X694,bool)))))),X700),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X694,bool)))))),X701)),X694))) )),
  inference(superposition,[],[f312,f322])).
fof(f21651,plain,(
  ( ! [X569,X571,X565,X567,X572,X568,X570,X566] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X572),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),X569),s('type.num.num',X565))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X565))),s(fun('type.integer.int',bool),X566),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X567),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X568),s(fun('type.num.num',bool),X569),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X570),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X571)))) )),
  inference(superposition,[],[f5684,f322])).
fof(f21650,plain,(
  ( ! [X561,X563,X557,X559,X564,X560,X562,X558] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X564,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),X561),s('type.num.num',X557))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X557))),s(fun('type.integer.int',bool),X558),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X559),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X560),s(fun('type.num.num',bool),X561),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X562),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X563)))) )),
  inference(superposition,[],[f5495,f322])).
fof(f21645,plain,(
  ( ! [X520,X522,X516,X518,X514,X521,X517,X519,X515] : (~p(s(bool,happ(s(fun('type.num.num',bool),X518),s('type.num.num',X514)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X521),bool),sK16(X522,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X514))),s(fun('type.integer.int',bool),X515),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X516),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X517),s(fun('type.num.num',bool),X518),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X519),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X520)),X521,bool))))) )),
  inference(superposition,[],[f3944,f322])).
fof(f21633,plain,(
  ( ! [X422,X428,X424,X426,X423,X429,X425,X427] : (s(bool,X429) != s(bool,happ(s(fun('type.num.num',bool),X426),s('type.num.num',X422))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X422))),s(fun('type.integer.int',bool),X423),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X424),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X425),s(fun('type.num.num',bool),X426),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X427),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X428))) | s(bool,'T_0') = s(bool,X429)) )),
  inference(superposition,[],[f1683,f322])).
fof(f21632,plain,(
  ( ! [X414,X420,X416,X418,X415,X421,X417,X419] : (s(bool,X421) != s(bool,happ(s(fun('type.num.num',bool),X418),s('type.num.num',X414))) | s(bool,'F_0') = s(bool,X421) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X414))),s(fun('type.integer.int',bool),X415),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X416),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X417),s(fun('type.num.num',bool),X418),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X419),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X420)))) )),
  inference(superposition,[],[f1683,f322])).
fof(f21626,plain,(
  ( ! [X372,X374,X368,X370,X373,X375,X369,X371] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X375),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),X372),s('type.num.num',X368))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X368))),s(fun('type.integer.int',bool),X369),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X370),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X371),s(fun('type.num.num',bool),X372),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X373),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X374)))) )),
  inference(superposition,[],[f1396,f322])).
fof(f21625,plain,(
  ( ! [X364,X366,X360,X362,X365,X367,X361,X363] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X367,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),X364),s('type.num.num',X360))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X360))),s(fun('type.integer.int',bool),X361),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X362),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X363),s(fun('type.num.num',bool),X364),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X365),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X366)))) )),
  inference(superposition,[],[f1395,f322])).
fof(f21756,plain,(
  ( ! [X356,X358,X352,X354,X357,X353,X355] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X356),s('type.num.num',X352))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X352))),s(fun('type.integer.int',bool),X353),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X355),s(fun('type.num.num',bool),X356),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X357),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X358)))) )),
  inference(forward_demodulation,[],[f21624,f427])).
fof(f21624,plain,(
  ( ! [X356,X358,X352,X354,X357,X359,X353,X355] : (s(bool,happ(s(fun('type.num.num',bool),X356),s('type.num.num',X352))) != s(bool,'const.ind_type.ISO_2'(s(fun(X359,X359),'_i_0_0'),s(fun(X359,X359),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X352))),s(fun('type.integer.int',bool),X353),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X355),s(fun('type.num.num',bool),X356),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X357),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X358)))) )),
  inference(superposition,[],[f790,f322])).
fof(f21623,plain,(
  ( ! [X350,X344,X346,X343,X349,X351,X345,X347,X348] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X350),'const.pair.,_2'(s(bool,happ(s(fun('type.num.num',bool),X347),s('type.num.num',X343))),s(X350,X351))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X343))),s(fun('type.integer.int',bool),X344),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X345),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X346),s(fun('type.num.num',bool),X347),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X348),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X349)))) )),
  inference(superposition,[],[f730,f322])).
fof(f21622,plain,(
  ( ! [X335,X341,X337,X339,X334,X340,X342,X336,X338] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X341,bool),'const.pair.,_2'(s(X341,X342),s(bool,happ(s(fun('type.num.num',bool),X338),s('type.num.num',X334))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X334))),s(fun('type.integer.int',bool),X335),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X336),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X337),s(fun('type.num.num',bool),X338),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X339),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X340)))) )),
  inference(superposition,[],[f673,f322])).
fof(f21621,plain,(
  ( ! [X327,X333,X329,X331,X326,X332,X328,X330] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.num.num',bool),X330),s('type.num.num',X326))),s(fun('type.num.num',bool),X333),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X326))),s(fun('type.integer.int',bool),X327),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X328),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X329),s(fun('type.num.num',bool),X330),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X331),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X332)))) )),
  inference(superposition,[],[f620,f322])).
fof(f21620,plain,(
  ( ! [X325,X321,X323,X318,X324,X320,X322,X319] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X325,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),X322),s('type.num.num',X318))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X318))),s(fun('type.integer.int',bool),X319),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X320),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X321),s(fun('type.num.num',bool),X322),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X323),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X324)))) )),
  inference(superposition,[],[f527,f322])).
fof(f21619,plain,(
  ( ! [X313,X315,X310,X316,X312,X314,X311,X317] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X317),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),X314),s('type.num.num',X310))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X310))),s(fun('type.integer.int',bool),X311),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X312),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X313),s(fun('type.num.num',bool),X314),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X315),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X316)))) )),
  inference(superposition,[],[f500,f322])).
fof(f21567,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X23))),s(fun('type.integer.int',bool),X24),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X25),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X26),s(fun('type.num.num',bool),X27),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X28),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X29)))) )),
  inference(superposition,[],[f322,f432])).
fof(f21566,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',X15))) | s(bool,X22) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X15))),s(fun('type.integer.int',bool),X16),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X17),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X18),s(fun('type.num.num',bool),X19),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X20),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f322,f432])).
fof(f21565,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X8))),s(fun('type.integer.int',bool),X9),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X10),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X11),s(fun('type.num.num',bool),X12),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X14)))) )),
  inference(superposition,[],[f322,f264])).
fof(f21112,plain,(
  ( ! [X1250,X1248,X1254,X1252,X1247,X1251,X1249,X1253] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1254))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.integer.int','type.integer.int'),X1248),s('type.integer.int',X1247))))) | s('type.integer.int',X1254) = s('type.integer.int','const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1247))),s(fun('type.integer.int','type.integer.int'),X1248),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.integer.int'),X1249),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.integer.int')),X1250),s(fun('type.num.num','type.integer.int'),X1251),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.integer.int'))))),X1252),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.integer.int'))))),X1253)))) )),
  inference(superposition,[],[f332,f321])).
fof(f21101,plain,(
  ( ! [X1163,X1161,X1159,X1157,X1162,X1160,X1158,X1156] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1163))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1157),s('type.integer.int',X1156))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1163) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1156))),s(fun('type.integer.int','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1157),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1158),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),X1159),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1160),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1161),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))))),X1162)))) )),
  inference(superposition,[],[f334,f321])).
fof(f21097,plain,(
  ( ! [X1118,X1116,X1122,X1120,X1126,X1124,X1115,X1119,X1117,X1123,X1121,X1125] : (s(X1116,happ(s(fun('type.list.list'(X1115),X1116),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1117))),s(fun('type.integer.int',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1118),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1119),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116))))),X1120),s(fun('type.num.num',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1121),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))))))),X1122),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))))))),X1123)),X1124,X1115,X1116)),s('type.list.list'(X1115),'const.list.CONS_2'(s(X1115,X1125),s('type.list.list'(X1115),X1126))))) = s(X1116,happ(s(fun(X1116,X1116),happ(s(fun('type.list.list'(X1115),fun(X1116,X1116)),happ(s(fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116))),happ(s(fun('type.integer.int',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1118),s('type.integer.int',X1117))),s(X1115,X1125))),s('type.list.list'(X1115),X1126))),s(X1116,happ(s(fun('type.list.list'(X1115),X1116),sK16('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1117))),s(fun('type.integer.int',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1118),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1119),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116))))),X1120),s(fun('type.num.num',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))),X1121),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))))))),X1122),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1115,fun('type.list.list'(X1115),fun(X1116,X1116)))))))),X1123)),X1124,X1115,X1116)),s('type.list.list'(X1115),X1126)))))) )),
  inference(superposition,[],[f357,f321])).
fof(f21196,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1046,X1051,X1049,X1055,X1053,X1047] : (s(X1046,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)) != s(X1046,happ(s(fun(X1047,X1046),X1055),s(X1047,happ(s(fun(X1046,X1047),happ(s(fun('type.integer.int',fun(X1046,X1047)),X1049),s('type.integer.int',X1048))),s(X1046,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)))))) | s(X1047,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)) != s(X1047,happ(s(fun(X1046,X1047),happ(s(fun('type.integer.int',fun(X1046,X1047)),X1049),s('type.integer.int',X1048))),s(X1046,happ(s(fun(X1047,X1046),X1055),s(X1047,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1047,X1046),X1055),s(fun(X1046,X1047),happ(s(fun('type.integer.int',fun(X1046,X1047)),X1049),s('type.integer.int',X1048))))))) )),
  inference(forward_demodulation,[],[f21195,f321])).
fof(f21195,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1046,X1051,X1049,X1055,X1053,X1047] : (s(X1047,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)) != s(X1047,happ(s(fun(X1046,X1047),happ(s(fun('type.integer.int',fun(X1046,X1047)),X1049),s('type.integer.int',X1048))),s(X1046,happ(s(fun(X1047,X1046),X1055),s(X1047,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1047,X1046),X1055),s(fun(X1046,X1047),happ(s(fun('type.integer.int',fun(X1046,X1047)),X1049),s('type.integer.int',X1048)))))) | s(X1046,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)) != s(X1046,happ(s(fun(X1047,X1046),X1055),s(X1047,happ(s(fun(X1046,X1047),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054))),s(X1046,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046))))))) )),
  inference(forward_demodulation,[],[f21091,f321])).
fof(f21091,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1046,X1051,X1049,X1055,X1053,X1047] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1047,X1046),X1055),s(fun(X1046,X1047),happ(s(fun('type.integer.int',fun(X1046,X1047)),X1049),s('type.integer.int',X1048)))))) | s(X1047,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)) != s(X1047,happ(s(fun(X1046,X1047),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054))),s(X1046,happ(s(fun(X1047,X1046),X1055),s(X1047,sK15('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)))))) | s(X1046,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046)) != s(X1046,happ(s(fun(X1047,X1046),X1055),s(X1047,happ(s(fun(X1046,X1047),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054))),s(X1046,sK14('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1048))),s(fun('type.integer.int',fun(X1046,X1047)),X1049),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1046,X1047)),X1050),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1046,X1047))),X1051),s(fun('type.num.num',fun(X1046,X1047)),X1052),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1046,X1047)))))),X1053),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1046,X1047)))))),X1054)),X1055,X1047,X1046))))))) )),
  inference(superposition,[],[f355,f321])).
fof(f21194,plain,(
  ( ! [X1042,X1040,X1044,X1039,X1037,X1043,X1041,X1045,X1038,X1036] : (s(X1037,sK14(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)) != s(X1037,happ(s(fun(X1036,X1037),happ(s(fun('type.integer.int',fun(X1036,X1037)),X1039),s('type.integer.int',X1038))),s(X1036,happ(s(fun(X1037,X1036),X1045),s(X1037,sK14(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)))))) | s(X1036,sK15(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)) != s(X1036,happ(s(fun(X1037,X1036),X1045),s(X1037,happ(s(fun(X1036,X1037),happ(s(fun('type.integer.int',fun(X1036,X1037)),X1039),s('type.integer.int',X1038))),s(X1036,sK15(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1036,X1037),happ(s(fun('type.integer.int',fun(X1036,X1037)),X1039),s('type.integer.int',X1038))),s(fun(X1037,X1036),X1045))))) )),
  inference(forward_demodulation,[],[f21193,f321])).
fof(f21193,plain,(
  ( ! [X1042,X1040,X1044,X1039,X1037,X1043,X1041,X1045,X1038,X1036] : (s(X1036,sK15(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)) != s(X1036,happ(s(fun(X1037,X1036),X1045),s(X1037,happ(s(fun(X1036,X1037),happ(s(fun('type.integer.int',fun(X1036,X1037)),X1039),s('type.integer.int',X1038))),s(X1036,sK15(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1036,X1037),happ(s(fun('type.integer.int',fun(X1036,X1037)),X1039),s('type.integer.int',X1038))),s(fun(X1037,X1036),X1045)))) | s(X1037,sK14(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)) != s(X1037,happ(s(fun(X1036,X1037),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044))),s(X1036,happ(s(fun(X1037,X1036),X1045),s(X1037,sK14(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037))))))) )),
  inference(forward_demodulation,[],[f21090,f321])).
fof(f21090,plain,(
  ( ! [X1042,X1040,X1044,X1039,X1037,X1043,X1041,X1045,X1038,X1036] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1036,X1037),happ(s(fun('type.integer.int',fun(X1036,X1037)),X1039),s('type.integer.int',X1038))),s(fun(X1037,X1036),X1045)))) | s(X1036,sK15(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)) != s(X1036,happ(s(fun(X1037,X1036),X1045),s(X1037,happ(s(fun(X1036,X1037),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044))),s(X1036,sK15(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)))))) | s(X1037,sK14(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037)) != s(X1037,happ(s(fun(X1036,X1037),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044))),s(X1036,happ(s(fun(X1037,X1036),X1045),s(X1037,sK14(X1045,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1038))),s(fun('type.integer.int',fun(X1036,X1037)),X1039),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X1036,X1037)),X1040),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X1036,X1037))),X1041),s(fun('type.num.num',fun(X1036,X1037)),X1042),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X1036,X1037)))))),X1043),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X1036,X1037)))))),X1044)),X1036,X1037))))))) )),
  inference(superposition,[],[f355,f321])).
fof(f21188,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X991,X989,X983,X986] : (s(fun(X982,X983),X991) = s(fun(X982,X983),happ(s(fun('type.integer.int',fun(X982,X983)),X985),s('type.integer.int',X984))) | s(X983,happ(s(fun(X982,X983),X991),s(X982,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X984))),s(fun('type.integer.int',fun(X982,X983)),X985),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X982,X983)),X986),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X982,X983))),X987),s(fun('type.num.num',fun(X982,X983)),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X982,X983)))))),X989),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X982,X983)))))),X990)),X991,X982,X983)))) != s(X983,happ(s(fun(X982,X983),happ(s(fun('type.integer.int',fun(X982,X983)),X985),s('type.integer.int',X984))),s(X982,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X984))),s(fun('type.integer.int',fun(X982,X983)),X985),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X982,X983)),X986),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X982,X983))),X987),s(fun('type.num.num',fun(X982,X983)),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X982,X983)))))),X989),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X982,X983)))))),X990)),X991,X982,X983))))) )),
  inference(forward_demodulation,[],[f21085,f321])).
fof(f21085,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X991,X989,X983,X986] : (s(X983,happ(s(fun(X982,X983),X991),s(X982,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X984))),s(fun('type.integer.int',fun(X982,X983)),X985),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X982,X983)),X986),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X982,X983))),X987),s(fun('type.num.num',fun(X982,X983)),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X982,X983)))))),X989),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X982,X983)))))),X990)),X991,X982,X983)))) != s(X983,happ(s(fun(X982,X983),happ(s(fun('type.integer.int',fun(X982,X983)),X985),s('type.integer.int',X984))),s(X982,sK13('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X984))),s(fun('type.integer.int',fun(X982,X983)),X985),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X982,X983)),X986),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X982,X983))),X987),s(fun('type.num.num',fun(X982,X983)),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X982,X983)))))),X989),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X982,X983)))))),X990)),X991,X982,X983)))) | s(fun(X982,X983),X991) = s(fun(X982,X983),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X984))),s(fun('type.integer.int',fun(X982,X983)),X985),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X982,X983)),X986),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X982,X983))),X987),s(fun('type.num.num',fun(X982,X983)),X988),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X982,X983)))))),X989),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X982,X983)))))),X990)))) )),
  inference(superposition,[],[f352,f321])).
fof(f21187,plain,(
  ( ! [X978,X976,X980,X975,X973,X979,X977,X981,X974,X972] : (s(fun(X972,X973),X981) = s(fun(X972,X973),happ(s(fun('type.integer.int',fun(X972,X973)),X975),s('type.integer.int',X974))) | s(X973,happ(s(fun(X972,X973),X981),s(X972,sK13(X981,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X974))),s(fun('type.integer.int',fun(X972,X973)),X975),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X972,X973)),X976),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X972,X973))),X977),s(fun('type.num.num',fun(X972,X973)),X978),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X972,X973)))))),X979),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X972,X973)))))),X980)),X972,X973)))) != s(X973,happ(s(fun(X972,X973),happ(s(fun('type.integer.int',fun(X972,X973)),X975),s('type.integer.int',X974))),s(X972,sK13(X981,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X974))),s(fun('type.integer.int',fun(X972,X973)),X975),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X972,X973)),X976),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X972,X973))),X977),s(fun('type.num.num',fun(X972,X973)),X978),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X972,X973)))))),X979),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X972,X973)))))),X980)),X972,X973))))) )),
  inference(forward_demodulation,[],[f21084,f321])).
fof(f21084,plain,(
  ( ! [X978,X976,X980,X975,X973,X979,X977,X981,X974,X972] : (s(X973,happ(s(fun(X972,X973),X981),s(X972,sK13(X981,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X974))),s(fun('type.integer.int',fun(X972,X973)),X975),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X972,X973)),X976),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X972,X973))),X977),s(fun('type.num.num',fun(X972,X973)),X978),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X972,X973)))))),X979),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X972,X973)))))),X980)),X972,X973)))) != s(X973,happ(s(fun(X972,X973),happ(s(fun('type.integer.int',fun(X972,X973)),X975),s('type.integer.int',X974))),s(X972,sK13(X981,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X974))),s(fun('type.integer.int',fun(X972,X973)),X975),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X972,X973)),X976),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X972,X973))),X977),s(fun('type.num.num',fun(X972,X973)),X978),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X972,X973)))))),X979),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X972,X973)))))),X980)),X972,X973)))) | s(fun(X972,X973),X981) = s(fun(X972,X973),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X974))),s(fun('type.integer.int',fun(X972,X973)),X975),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X972,X973)),X976),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X972,X973))),X977),s(fun('type.num.num',fun(X972,X973)),X978),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X972,X973)))))),X979),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X972,X973)))))),X980)))) )),
  inference(superposition,[],[f352,f321])).
fof(f21077,plain,(
  ( ! [X895,X893,X899,X890,X897,X901,X892,X894,X898,X896,X891,X900] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X890,X891),happ(s(fun('type.integer.int',fun(X890,X891)),X893),s('type.integer.int',X892))),s(fun(X891,X890),X899)))) | ~p(s(bool,happ(s(fun(X890,bool),X900),s(X890,happ(s(fun(X891,X890),X899),s(X891,X901)))))) | p(s(bool,happ(s(fun(X890,bool),X900),s(X890,sK11(X900,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X892))),s(fun('type.integer.int',fun(X890,X891)),X893),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X890,X891)),X894),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X890,X891))),X895),s(fun('type.num.num',fun(X890,X891)),X896),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X890,X891)))))),X897),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X890,X891)))))),X898)),X899,X891,X890)))))) )),
  inference(superposition,[],[f347,f321])).
fof(f21180,plain,(
  ( ! [X883,X881,X887,X885,X878,X888,X882,X880,X886,X884,X879,X889] : (~p(s(bool,happ(s(fun(X879,bool),X888),s(X879,happ(s(fun(X878,X879),happ(s(fun('type.integer.int',fun(X878,X879)),X881),s('type.integer.int',X880))),s(X878,X889)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X879,X878),X887),s(fun(X878,X879),happ(s(fun('type.integer.int',fun(X878,X879)),X881),s('type.integer.int',X880)))))) | p(s(bool,happ(s(fun(X879,bool),X888),s(X879,sK11(X888,X887,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X880))),s(fun('type.integer.int',fun(X878,X879)),X881),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X878,X879)),X882),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X878,X879))),X883),s(fun('type.num.num',fun(X878,X879)),X884),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X878,X879)))))),X885),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X878,X879)))))),X886)),X878,X879)))))) )),
  inference(forward_demodulation,[],[f21076,f321])).
fof(f21076,plain,(
  ( ! [X883,X881,X887,X885,X878,X888,X882,X880,X886,X884,X879,X889] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X879,X878),X887),s(fun(X878,X879),happ(s(fun('type.integer.int',fun(X878,X879)),X881),s('type.integer.int',X880)))))) | ~p(s(bool,happ(s(fun(X879,bool),X888),s(X879,happ(s(fun(X878,X879),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X880))),s(fun('type.integer.int',fun(X878,X879)),X881),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X878,X879)),X882),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X878,X879))),X883),s(fun('type.num.num',fun(X878,X879)),X884),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X878,X879)))))),X885),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X878,X879)))))),X886))),s(X878,X889)))))) | p(s(bool,happ(s(fun(X879,bool),X888),s(X879,sK11(X888,X887,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X880))),s(fun('type.integer.int',fun(X878,X879)),X881),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X878,X879)),X882),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X878,X879))),X883),s(fun('type.num.num',fun(X878,X879)),X884),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X878,X879)))))),X885),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X878,X879)))))),X886)),X878,X879)))))) )),
  inference(superposition,[],[f347,f321])).
fof(f21075,plain,(
  ( ! [X874,X872,X876,X866,X870,X868,X875,X873,X877,X867,X871,X869] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X866,X867),happ(s(fun('type.integer.int',fun(X866,X867)),X869),s('type.integer.int',X868))),s(fun(X867,X866),X875)))) | ~p(s(bool,happ(s(fun(X866,bool),X876),s(X866,X877)))) | p(s(bool,happ(s(fun(X866,bool),X876),s(X866,happ(s(fun(X867,X866),X875),s(X867,sK10(X876,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X868))),s(fun('type.integer.int',fun(X866,X867)),X869),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X866,X867)),X870),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X866,X867))),X871),s(fun('type.num.num',fun(X866,X867)),X872),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X866,X867)))))),X873),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X866,X867)))))),X874)),X875,X867,X866)))))))) )),
  inference(superposition,[],[f346,f321])).
fof(f21179,plain,(
  ( ! [X860,X854,X864,X859,X857,X863,X861,X855,X865,X858,X856,X862] : (p(s(bool,happ(s(fun(X855,bool),X864),s(X855,happ(s(fun(X854,X855),happ(s(fun('type.integer.int',fun(X854,X855)),X857),s('type.integer.int',X856))),s(X854,sK10(X864,X863,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X856))),s(fun('type.integer.int',fun(X854,X855)),X857),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X854,X855)),X858),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X854,X855))),X859),s(fun('type.num.num',fun(X854,X855)),X860),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X854,X855)))))),X861),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X854,X855)))))),X862)),X854,X855))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X855,X854),X863),s(fun(X854,X855),happ(s(fun('type.integer.int',fun(X854,X855)),X857),s('type.integer.int',X856)))))) | ~p(s(bool,happ(s(fun(X855,bool),X864),s(X855,X865))))) )),
  inference(forward_demodulation,[],[f21074,f321])).
fof(f21074,plain,(
  ( ! [X860,X854,X864,X859,X857,X863,X861,X855,X865,X858,X856,X862] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X855,X854),X863),s(fun(X854,X855),happ(s(fun('type.integer.int',fun(X854,X855)),X857),s('type.integer.int',X856)))))) | ~p(s(bool,happ(s(fun(X855,bool),X864),s(X855,X865)))) | p(s(bool,happ(s(fun(X855,bool),X864),s(X855,happ(s(fun(X854,X855),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X856))),s(fun('type.integer.int',fun(X854,X855)),X857),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X854,X855)),X858),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X854,X855))),X859),s(fun('type.num.num',fun(X854,X855)),X860),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X854,X855)))))),X861),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X854,X855)))))),X862))),s(X854,sK10(X864,X863,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X856))),s(fun('type.integer.int',fun(X854,X855)),X857),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X854,X855)),X858),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X854,X855))),X859),s(fun('type.num.num',fun(X854,X855)),X860),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X854,X855)))))),X861),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X854,X855)))))),X862)),X854,X855)))))))) )),
  inference(superposition,[],[f346,f321])).
fof(f21073,plain,(
  ( ! [X850,X848,X852,X843,X847,X845,X851,X849,X842,X853,X846,X844] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X842,X843),happ(s(fun('type.integer.int',fun(X842,X843)),X845),s('type.integer.int',X844))),s(fun(X843,X842),X851)))) | ~p(s(bool,happ(s(fun(X842,bool),X852),s(X842,happ(s(fun(X843,X842),X851),s(X843,sK9(X852,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X844))),s(fun('type.integer.int',fun(X842,X843)),X845),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X842,X843)),X846),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X842,X843))),X847),s(fun('type.num.num',fun(X842,X843)),X848),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X842,X843)))))),X849),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X842,X843)))))),X850)),X851,X843,X842))))))) | p(s(bool,happ(s(fun(X842,bool),X852),s(X842,X853))))) )),
  inference(superposition,[],[f345,f321])).
fof(f21178,plain,(
  ( ! [X831,X841,X835,X833,X839,X837,X830,X840,X834,X832,X838,X836] : (~p(s(bool,happ(s(fun(X831,bool),X840),s(X831,happ(s(fun(X830,X831),happ(s(fun('type.integer.int',fun(X830,X831)),X833),s('type.integer.int',X832))),s(X830,sK9(X840,X839,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X832))),s(fun('type.integer.int',fun(X830,X831)),X833),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X830,X831)),X834),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X830,X831))),X835),s(fun('type.num.num',fun(X830,X831)),X836),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X830,X831)))))),X837),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X830,X831)))))),X838)),X830,X831))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X831,X830),X839),s(fun(X830,X831),happ(s(fun('type.integer.int',fun(X830,X831)),X833),s('type.integer.int',X832)))))) | p(s(bool,happ(s(fun(X831,bool),X840),s(X831,X841))))) )),
  inference(forward_demodulation,[],[f21072,f321])).
fof(f21072,plain,(
  ( ! [X831,X841,X835,X833,X839,X837,X830,X840,X834,X832,X838,X836] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X831,X830),X839),s(fun(X830,X831),happ(s(fun('type.integer.int',fun(X830,X831)),X833),s('type.integer.int',X832)))))) | ~p(s(bool,happ(s(fun(X831,bool),X840),s(X831,happ(s(fun(X830,X831),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X832))),s(fun('type.integer.int',fun(X830,X831)),X833),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X830,X831)),X834),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X830,X831))),X835),s(fun('type.num.num',fun(X830,X831)),X836),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X830,X831)))))),X837),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X830,X831)))))),X838))),s(X830,sK9(X840,X839,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X832))),s(fun('type.integer.int',fun(X830,X831)),X833),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X830,X831)),X834),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X830,X831))),X835),s(fun('type.num.num',fun(X830,X831)),X836),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X830,X831)))))),X837),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X830,X831)))))),X838)),X830,X831))))))) | p(s(bool,happ(s(fun(X831,bool),X840),s(X831,X841))))) )),
  inference(superposition,[],[f345,f321])).
fof(f21071,plain,(
  ( ! [X825,X829,X819,X823,X821,X826,X824,X828,X818,X822,X820,X827] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X818,X819),happ(s(fun('type.integer.int',fun(X818,X819)),X821),s('type.integer.int',X820))),s(fun(X819,X818),X827)))) | ~p(s(bool,happ(s(fun(X818,bool),X828),s(X818,sK8(X828,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X820))),s(fun('type.integer.int',fun(X818,X819)),X821),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X818,X819)),X822),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X818,X819))),X823),s(fun('type.num.num',fun(X818,X819)),X824),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X818,X819)))))),X825),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X818,X819)))))),X826)),X827,X819,X818))))) | p(s(bool,happ(s(fun(X818,bool),X828),s(X818,happ(s(fun(X819,X818),X827),s(X819,X829))))))) )),
  inference(superposition,[],[f344,f321])).
fof(f21177,plain,(
  ( ! [X817,X810,X808,X814,X812,X806,X816,X811,X809,X815,X813,X807] : (p(s(bool,happ(s(fun(X807,bool),X816),s(X807,happ(s(fun(X806,X807),happ(s(fun('type.integer.int',fun(X806,X807)),X809),s('type.integer.int',X808))),s(X806,X817)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X807,X806),X815),s(fun(X806,X807),happ(s(fun('type.integer.int',fun(X806,X807)),X809),s('type.integer.int',X808)))))) | ~p(s(bool,happ(s(fun(X807,bool),X816),s(X807,sK8(X816,X815,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X808))),s(fun('type.integer.int',fun(X806,X807)),X809),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X806,X807)),X810),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X806,X807))),X811),s(fun('type.num.num',fun(X806,X807)),X812),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X806,X807)))))),X813),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X806,X807)))))),X814)),X806,X807)))))) )),
  inference(forward_demodulation,[],[f21070,f321])).
fof(f21070,plain,(
  ( ! [X817,X810,X808,X814,X812,X806,X816,X811,X809,X815,X813,X807] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X807,X806),X815),s(fun(X806,X807),happ(s(fun('type.integer.int',fun(X806,X807)),X809),s('type.integer.int',X808)))))) | ~p(s(bool,happ(s(fun(X807,bool),X816),s(X807,sK8(X816,X815,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X808))),s(fun('type.integer.int',fun(X806,X807)),X809),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X806,X807)),X810),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X806,X807))),X811),s(fun('type.num.num',fun(X806,X807)),X812),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X806,X807)))))),X813),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X806,X807)))))),X814)),X806,X807))))) | p(s(bool,happ(s(fun(X807,bool),X816),s(X807,happ(s(fun(X806,X807),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X808))),s(fun('type.integer.int',fun(X806,X807)),X809),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X806,X807)),X810),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X806,X807))),X811),s(fun('type.num.num',fun(X806,X807)),X812),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X806,X807)))))),X813),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X806,X807)))))),X814))),s(X806,X817))))))) )),
  inference(superposition,[],[f344,f321])).
fof(f21176,plain,(
  ( ! [X798,X802,X800,X804,X799,X803,X801,X805] : (~p(s(bool,happ(s(fun('type.list.list'(X798),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X798),bool)),X800),s('type.integer.int',X799))),s('type.list.list'(X798),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X798),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X798),bool)),X800),s('type.integer.int',X799))),s('type.list.list'(X798),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X799))),s(fun('type.integer.int',fun('type.list.list'(X798),bool)),X800),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X798),bool)),X801),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X798),bool))),X802),s(fun('type.num.num',fun('type.list.list'(X798),bool)),X803),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X798),bool)))))),X804),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X798),bool)))))),X805)),X798)))))) )),
  inference(forward_demodulation,[],[f21069,f321])).
fof(f21069,plain,(
  ( ! [X798,X802,X800,X804,X799,X803,X801,X805] : (p(s(bool,happ(s(fun('type.list.list'(X798),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X798),bool)),X800),s('type.integer.int',X799))),s('type.list.list'(X798),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X799))),s(fun('type.integer.int',fun('type.list.list'(X798),bool)),X800),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X798),bool)),X801),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X798),bool))),X802),s(fun('type.num.num',fun('type.list.list'(X798),bool)),X803),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X798),bool)))))),X804),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X798),bool)))))),X805)),X798))))) | ~p(s(bool,happ(s(fun('type.list.list'(X798),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X799))),s(fun('type.integer.int',fun('type.list.list'(X798),bool)),X800),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X798),bool)),X801),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X798),bool))),X802),s(fun('type.num.num',fun('type.list.list'(X798),bool)),X803),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X798),bool)))))),X804),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X798),bool)))))),X805))),s('type.list.list'(X798),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f321])).
fof(f21175,plain,(
  ( ! [X796,X790,X795,X793,X797,X791,X789,X794,X792] : (p(s(bool,happ(s(fun('type.list.list'(X789),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s('type.integer.int',X790))),s('type.list.list'(X789),X797)))) | ~p(s(bool,happ(s(fun('type.list.list'(X789),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s('type.integer.int',X790))),s('type.list.list'(X789),'const.list.CONS_2'(s(X789,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796)),X789)),s('type.list.list'(X789),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796)),X789))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X789),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s('type.integer.int',X790))),s('type.list.list'(X789),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f21174,f321])).
fof(f21174,plain,(
  ( ! [X796,X790,X795,X793,X797,X791,X789,X794,X792] : (~p(s(bool,happ(s(fun('type.list.list'(X789),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s('type.integer.int',X790))),s('type.list.list'(X789),'const.list.CONS_2'(s(X789,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796)),X789)),s('type.list.list'(X789),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796)),X789))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X789),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s('type.integer.int',X790))),s('type.list.list'(X789),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X789),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796))),s('type.list.list'(X789),X797))))) )),
  inference(forward_demodulation,[],[f21068,f321])).
fof(f21068,plain,(
  ( ! [X796,X790,X795,X793,X797,X791,X789,X794,X792] : (~p(s(bool,happ(s(fun('type.list.list'(X789),bool),happ(s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s('type.integer.int',X790))),s('type.list.list'(X789),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X789),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796))),s('type.list.list'(X789),'const.list.CONS_2'(s(X789,sK3('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796)),X789)),s('type.list.list'(X789),sK2('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796)),X789))))))) | p(s(bool,happ(s(fun('type.list.list'(X789),bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X790))),s(fun('type.integer.int',fun('type.list.list'(X789),bool)),X791),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun('type.list.list'(X789),bool)),X792),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun('type.list.list'(X789),bool))),X793),s(fun('type.num.num',fun('type.list.list'(X789),bool)),X794),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun('type.list.list'(X789),bool)))))),X795),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun('type.list.list'(X789),bool)))))),X796))),s('type.list.list'(X789),X797))))) )),
  inference(superposition,[],[f305,f321])).
fof(f21061,plain,(
  ( ! [X728,X730,X724,X726,X729,X731,X725,X727,X723] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X723,bool),happ(s(fun('type.integer.int',fun(X723,bool)),X725),s('type.integer.int',X724))))) | s(X723,X731) = s(X723,sK4(X731,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X724))),s(fun('type.integer.int',fun(X723,bool)),X725),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X723,bool)),X726),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X723,bool))),X727),s(fun('type.num.num',fun(X723,bool)),X728),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X723,bool)))))),X729),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X723,bool)))))),X730)),X723))) )),
  inference(superposition,[],[f823,f321])).
fof(f21171,plain,(
  ( ! [X720,X722,X716,X718,X714,X721,X717,X719,X713,X715] : (p(s(bool,happ(s(fun(X713,bool),happ(s(fun('type.integer.int',fun(X713,bool)),X715),s('type.integer.int',X714))),s(X713,sK6(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713))))) | ~p(s(bool,happ(s(fun(X713,bool),happ(s(fun('type.integer.int',fun(X713,bool)),X715),s('type.integer.int',X714))),s(X713,sK5(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713))))) | ~p(s(bool,happ(s(fun(X713,bool),X721),s(X713,X722))))) )),
  inference(forward_demodulation,[],[f21060,f321])).
fof(f21060,plain,(
  ( ! [X720,X722,X716,X718,X714,X721,X717,X719,X713,X715] : (~p(s(bool,happ(s(fun(X713,bool),happ(s(fun('type.integer.int',fun(X713,bool)),X715),s('type.integer.int',X714))),s(X713,sK5(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713))))) | ~p(s(bool,happ(s(fun(X713,bool),X721),s(X713,X722)))) | p(s(bool,happ(s(fun(X713,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720))),s(X713,sK6(X721,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X714))),s(fun('type.integer.int',fun(X713,bool)),X715),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X713,bool)),X716),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X713,bool))),X717),s(fun('type.num.num',fun(X713,bool)),X718),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X713,bool)))))),X719),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X713,bool)))))),X720)),X713)))))) )),
  inference(superposition,[],[f315,f321])).
fof(f21170,plain,(
  ( ! [X705,X707,X712,X708,X710,X704,X706,X709,X711,X703] : (p(s(bool,happ(s(fun(X703,bool),happ(s(fun('type.integer.int',fun(X703,bool)),X705),s('type.integer.int',X704))),s(X703,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703))))) | ~p(s(bool,happ(s(fun(X703,bool),happ(s(fun('type.integer.int',fun(X703,bool)),X705),s('type.integer.int',X704))),s(X703,X711)))) | p(s(bool,happ(s(fun(X703,bool),X712),s(X703,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703)))))) )),
  inference(forward_demodulation,[],[f21059,f321])).
fof(f21059,plain,(
  ( ! [X705,X707,X712,X708,X710,X704,X706,X709,X711,X703] : (~p(s(bool,happ(s(fun(X703,bool),happ(s(fun('type.integer.int',fun(X703,bool)),X705),s('type.integer.int',X704))),s(X703,X711)))) | p(s(bool,happ(s(fun(X703,bool),X712),s(X703,sK6('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703))))) | p(s(bool,happ(s(fun(X703,bool),'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710))),s(X703,sK5('const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X704))),s(fun('type.integer.int',fun(X703,bool)),X705),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X703,bool)),X706),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X703,bool))),X707),s(fun('type.num.num',fun(X703,bool)),X708),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X703,bool)))))),X709),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X703,bool)))))),X710)),X712,X703)))))) )),
  inference(superposition,[],[f314,f321])).
fof(f21058,plain,(
  ( ! [X697,X699,X695,X700,X702,X696,X698,X694,X701] : (p(s(bool,'|dollar|exists_1'(s(fun(X694,bool),happ(s(fun('type.integer.int',fun(X694,bool)),X696),s('type.integer.int',X695)))))) | s(X694,X702) = s(X694,sK4(X702,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X695))),s(fun('type.integer.int',fun(X694,bool)),X696),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(X694,bool)),X697),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),fun(X694,bool))),X698),s(fun('type.num.num',fun(X694,bool)),X699),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',fun(X694,bool)))))),X700),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',fun(X694,bool)))))),X701)),X694))) )),
  inference(superposition,[],[f312,f321])).
fof(f21041,plain,(
  ( ! [X569,X571,X565,X567,X572,X568,X570,X566] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X572),'const.sum.INL_1'(s(bool,happ(s(fun('type.integer.int',bool),X566),s('type.integer.int',X565))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X565))),s(fun('type.integer.int',bool),X566),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X567),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X568),s(fun('type.num.num',bool),X569),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X570),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X571)))) )),
  inference(superposition,[],[f5684,f321])).
fof(f21040,plain,(
  ( ! [X561,X563,X557,X559,X564,X560,X562,X558] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X564,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.integer.int',bool),X558),s('type.integer.int',X557))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X557))),s(fun('type.integer.int',bool),X558),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X559),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X560),s(fun('type.num.num',bool),X561),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X562),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X563)))) )),
  inference(superposition,[],[f5495,f321])).
fof(f21035,plain,(
  ( ! [X520,X522,X516,X518,X514,X521,X517,X519,X515] : (~p(s(bool,happ(s(fun('type.integer.int',bool),X515),s('type.integer.int',X514)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X521),bool),sK16(X522,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X514))),s(fun('type.integer.int',bool),X515),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X516),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X517),s(fun('type.num.num',bool),X518),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X519),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X520)),X521,bool))))) )),
  inference(superposition,[],[f3944,f321])).
fof(f21023,plain,(
  ( ! [X422,X428,X424,X426,X423,X429,X425,X427] : (s(bool,X429) != s(bool,happ(s(fun('type.integer.int',bool),X423),s('type.integer.int',X422))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X422))),s(fun('type.integer.int',bool),X423),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X424),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X425),s(fun('type.num.num',bool),X426),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X427),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X428))) | s(bool,'T_0') = s(bool,X429)) )),
  inference(superposition,[],[f1683,f321])).
fof(f21022,plain,(
  ( ! [X414,X420,X416,X418,X415,X421,X417,X419] : (s(bool,X421) != s(bool,happ(s(fun('type.integer.int',bool),X415),s('type.integer.int',X414))) | s(bool,'F_0') = s(bool,X421) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X414))),s(fun('type.integer.int',bool),X415),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X416),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X417),s(fun('type.num.num',bool),X418),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X419),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X420)))) )),
  inference(superposition,[],[f1683,f321])).
fof(f21016,plain,(
  ( ! [X372,X374,X368,X370,X373,X375,X369,X371] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X375),'const.sum.INL_1'(s(bool,happ(s(fun('type.integer.int',bool),X369),s('type.integer.int',X368))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X368))),s(fun('type.integer.int',bool),X369),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X370),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X371),s(fun('type.num.num',bool),X372),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X373),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X374)))) )),
  inference(superposition,[],[f1396,f321])).
fof(f21015,plain,(
  ( ! [X364,X366,X360,X362,X365,X367,X361,X363] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X367,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.integer.int',bool),X361),s('type.integer.int',X360))))))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X360))),s(fun('type.integer.int',bool),X361),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X362),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X363),s(fun('type.num.num',bool),X364),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X365),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X366)))) )),
  inference(superposition,[],[f1395,f321])).
fof(f21140,plain,(
  ( ! [X356,X358,X352,X354,X357,X353,X355] : (s(bool,'T_0') != s(bool,happ(s(fun('type.integer.int',bool),X353),s('type.integer.int',X352))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X352))),s(fun('type.integer.int',bool),X353),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X355),s(fun('type.num.num',bool),X356),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X357),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X358)))) )),
  inference(forward_demodulation,[],[f21014,f427])).
fof(f21014,plain,(
  ( ! [X356,X358,X352,X354,X357,X359,X353,X355] : (s(bool,happ(s(fun('type.integer.int',bool),X353),s('type.integer.int',X352))) != s(bool,'const.ind_type.ISO_2'(s(fun(X359,X359),'_i_0_0'),s(fun(X359,X359),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X352))),s(fun('type.integer.int',bool),X353),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X354),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X355),s(fun('type.num.num',bool),X356),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X357),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X358)))) )),
  inference(superposition,[],[f790,f321])).
fof(f21013,plain,(
  ( ! [X350,X344,X346,X343,X349,X351,X345,X347,X348] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X350),'const.pair.,_2'(s(bool,happ(s(fun('type.integer.int',bool),X344),s('type.integer.int',X343))),s(X350,X351))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X343))),s(fun('type.integer.int',bool),X344),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X345),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X346),s(fun('type.num.num',bool),X347),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X348),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X349)))) )),
  inference(superposition,[],[f730,f321])).
fof(f21012,plain,(
  ( ! [X335,X341,X337,X339,X334,X340,X342,X336,X338] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X341,bool),'const.pair.,_2'(s(X341,X342),s(bool,happ(s(fun('type.integer.int',bool),X335),s('type.integer.int',X334))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X334))),s(fun('type.integer.int',bool),X335),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X336),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X337),s(fun('type.num.num',bool),X338),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X339),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X340)))) )),
  inference(superposition,[],[f673,f321])).
fof(f21011,plain,(
  ( ! [X327,X333,X329,X331,X326,X332,X328,X330] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.integer.int',bool),X327),s('type.integer.int',X326))),s(fun('type.num.num',bool),X333),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X326))),s(fun('type.integer.int',bool),X327),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X328),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X329),s(fun('type.num.num',bool),X330),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X331),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X332)))) )),
  inference(superposition,[],[f620,f321])).
fof(f21010,plain,(
  ( ! [X325,X321,X323,X318,X324,X320,X322,X319] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X325,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.integer.int',bool),X319),s('type.integer.int',X318))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X318))),s(fun('type.integer.int',bool),X319),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X320),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X321),s(fun('type.num.num',bool),X322),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X323),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X324)))) )),
  inference(superposition,[],[f527,f321])).
fof(f21009,plain,(
  ( ! [X313,X315,X310,X316,X312,X314,X311,X317] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X317),'const.sum.INL_1'(s(bool,happ(s(fun('type.integer.int',bool),X311),s('type.integer.int',X310))))))) | s(bool,'F_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X310))),s(fun('type.integer.int',bool),X311),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X312),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X313),s(fun('type.num.num',bool),X314),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X315),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X316)))) )),
  inference(superposition,[],[f500,f321])).
fof(f20957,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun('type.integer.int',bool),X24),s('type.integer.int',X23))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X23))),s(fun('type.integer.int',bool),X24),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X25),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X26),s(fun('type.num.num',bool),X27),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X28),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X29)))) )),
  inference(superposition,[],[f321,f432])).
fof(f20956,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.integer.int',bool),X16),s('type.integer.int',X15))) | s(bool,X22) = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X15))),s(fun('type.integer.int',bool),X16),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X17),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X18),s(fun('type.num.num',bool),X19),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X20),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f321,f432])).
fof(f20955,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.integer.int',bool),X9),s('type.integer.int',X8))) | s(bool,'T_0') = s(bool,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X8))),s(fun('type.integer.int',bool),X9),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X10),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),bool)),X11),s(fun('type.num.num',bool),X12),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',bool))))),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',bool))))),X14)))) )),
  inference(superposition,[],[f321,f264])).
fof(f20823,plain,(
  ( ! [X6,X7,X5] : (s(bool,X7) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X5),X6))) | p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X5),'const.min.@_1'(s(fun('type.pair.prod'(bool,X5),bool),'const.pair.FST_0'))))))) )),
  inference(global_subsumption,[],[f255,f254,f256,f259,f260,f261,f262,f263,f264,f266,f265,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f481,f790,f823,f824,f825,f826,f827,f828,f829,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f3285,f3286,f3664,f3665,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4030,f4228,f4520,f3905,f4965,f4975,f4979,f4983,f5495,f5684,f5733,f5735,f5736,f5737,f5739,f5740,f5741,f5975,f5977,f5978,f5979,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6026,f6027,f6037,f6184,f6186,f6198,f6200,f6262,f6264,f6276,f6278,f6562,f6926,f6933,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7303,f7304,f7305,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7338,f7339,f7349,f7350,f7351,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7660,f7661,f8411,f9597,f8353,f7604,f6268,f6266,f8352,f7603,f6190,f6188,f8366,f7617,f6269,f6267,f8365,f7616,f6191,f6189,f4201,f4002,f391,f355,f354,f353,f349,f348,f5976,f5734,f2004,f1545,f1543,f4963,f4962,f4960,f4959,f4958,f4957,f4956,f4955,f3904,f3944,f3747,f8375,f8362,f7626,f7613,f7336,f7302,f4168,f4158,f3969,f3959,f3742,f4964,f3720,f3718,f3713,f3712,f3710,f3707,f3706,f3676,f1575,f5800,f5801,f6183,f6261,f3680,f2201,f3807,f3806,f3740,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f903,f821,f820,f819,f818,f817,f816,f312,f1980,f2498,f6177,f6176,f6173,f6138,f5822,f6259,f6260,f6181,f6182,f6263,f6185,f2502,f7125,f6934,f6905,f3741,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f6922,f6918,f6915,f6829,f6828,f6903,f6139,f8666,f8685,f8682,f8657,f8656,f8689,f6218,f8694,f8691,f8690,f8688,f8687,f8686,f8684,f8683,f8653,f8652,f8651,f8650,f8649,f8648,f8647,f8646,f8645,f8644,f8643,f8642,f8641,f6904,f6256,f6255,f6252,f6234,f6232,f6227,f6226,f6224,f6221,f6220,f6217,f6216,f6155,f6153,f6148,f6147,f6145,f6142,f6141,f347,f344,f9319,f9318,f9316,f9315,f9314,f9313,f9312,f9311,f9310,f9309,f9308,f9307,f9291,f9282,f9281,f9278,f9277,f9276,f9275,f9274,f9273,f9272,f9271,f9270,f9269,f9268,f9267,f9266,f9041,f9040,f9038,f9037,f9036,f9035,f9034,f9033,f9032,f9031,f9030,f9029,f9013,f9004,f9003,f9000,f8999,f8998,f8997,f8996,f8995,f8994,f8993,f8992,f8991,f8990,f8989,f8988,f8693,f7117,f7111,f7110,f7109,f7108,f7107,f7106,f7105,f7104,f7103,f7102,f7100,f7073,f7064,f7063,f6928,f6924,f6923,f6921,f6920,f6919,f6917,f6916,f6838,f3925,f3850,f3805,f3738,f2001,f346,f345,f315,f314,f311,f7124,f7076,f7075,f5980,f5738,f4961,f2166,f2164,f3296,f3297,f9375,f9374,f9373,f9371,f9370,f9369,f9367,f9364,f7353,f7352,f7337,f7307,f7306,f7116,f7074,f6385,f6337,f6244,f6243,f6240,f6239,f6238,f6237,f6236,f6235,f6233,f6223,f6222,f6165,f6164,f6161,f6160,f6159,f6158,f6157,f6156,f6154,f6144,f6143,f6025,f6008,f5902,f5855,f5699,f5690,f5606,f5603,f5602,f5601,f5600,f5599,f5598,f5501,f5418,f5415,f5414,f5413,f5412,f5411,f5410,f4987,f4982,f4974,f3728,f3727,f3724,f3723,f3722,f3721,f3719,f3709,f3708,f3663,f3660,f3584,f3583,f3582,f3581,f3580,f3579,f3578,f3577,f3493,f3418,f3417,f3416,f3415,f3414,f3413,f3412,f3411,f3295,f3284,f2577,f2576,f2575,f2574,f2573,f2572,f2571,f2570,f2569,f2552,f2551,f2550,f2549,f2548,f2547,f2546,f2545,f2544,f2192,f2168,f1625,f1623,f1571,f1547,f1401,f1400,f1398,f1396,f1395,f1394,f1393,f1392,f1391,f882,f730,f673,f620,f527,f500,f459,f270,f269,f258,f14879,f14882,f14884,f14885,f14886,f14888,f14889,f14890,f15115,f15870,f15871,f15872,f15873,f15874,f15875,f15876,f15877,f15878,f15879,f15880,f15881,f15882,f15913,f15914,f15885,f15886,f15915,f15916,f15917,f15918,f15919,f15920,f15921,f15922,f15895,f15924,f15925,f16509,f16510,f16511,f16512,f16513,f16514,f16515,f16516,f16517,f16518,f16519,f16520,f16687,f16691,f16692,f16701,f16873,f16913,f16916,f16918,f16919,f16920,f16922,f16923,f16924,f17029,f17031,f16998,f16999,f17033,f17035,f17037,f17039,f17041,f17043,f17045,f17047,f17008,f17048,f17026,f17027,f17095,f17098,f17100,f17101,f17102,f17104,f17105,f17106,f17731,f17732,f17924,f17925,f17926,f17927,f17928,f18033,f18034,f18039,f18040,f18041,f18042,f18043,f18044,f18046,f18047,f18048,f18049,f18050,f18051,f18052,f18053,f18054,f18055,f18056,f18057,f18058,f18059,f18060,f18062,f18063,f18064,f18065,f18066,f18067,f18090,f18091,f18092,f18093,f18094,f18095,f18097,f18098,f18099,f18100,f18101,f18102,f18103,f18104,f18105,f18106,f18107,f18108,f18109,f18110,f18111,f18113,f18114,f18115,f18116,f18117,f18118,f18123,f18125,f18126,f18635,f18638,f18640,f18641,f18642,f18644,f18645,f18646,f18836,f18837,f18838,f18855,f18856,f18857,f19011,f18874,f19012,f19013,f18893,f18894,f19025,f18896,f18897,f18903,f18904,f18916,f18921,f18922,f18936,f18942,f19055,f19056,f18945,f19060,f19061,f19062,f18951,f19063,f18953,f19064,f18955,f19065,f18957,f19072,f19073,f18978,f18988,f19369,f19370,f19371,f19372,f19373,f19374,f19375,f19376,f19377,f19378,f19379,f19380,f19381,f19382,f19383,f19384,f19385,f19672,f19467,f19468,f19469,f19470,f19471,f19486,f19487,f19490,f19491,f19492,f19509,f19510,f19511,f19544,f19545,f19546,f19563,f19564,f19706,f19566,f19567,f19573,f19574,f19586,f19591,f19592,f19612,f19736,f19737,f19615,f19741,f19742,f19743,f19621,f19744,f19623,f19745,f19625,f19746,f19627,f19753,f19754,f19648,f19659,f19822,f19823,f19824,f19825,f19826,f19827,f19828,f19829,f19830,f19831,f19834,f19986,f19992,f20027,f20135,f20136,f20137,f20138,f20139,f20140,f20141,f20142,f20143,f20144,f20147,f20315,f20321,f20378,f20323,f20324,f20380,f20382,f20327,f20328,f20384,f20386,f20388,f20390,f20392,f20394,f20396,f20398,f20400,f20338,f20402,f20340,f20341,f20404,f20406,f20344,f20345,f20408,f20410,f20412,f20414,f20416,f20418,f20420,f20422,f20424,f20355,f20425,f20511,f20512,f20513,f20514,f20515,f20516,f20517,f20518,f20519,f20520,f20523,f20557,f20778,f20784,f20820,f20822])).
fof(f20822,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X5),'const.min.@_1'(s(fun('type.pair.prod'(bool,X5),bool),'const.pair.FST_0')))))) | s(bool,X7) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X5),X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f20801,f256])).
fof(f20801,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X5),'const.min.@_1'(s(fun('type.pair.prod'(bool,X5),bool),'const.pair.FST_0')))))) | s(bool,X7) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X5),X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2004,f432])).
fof(f20784,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X154),bool),sK16(X155,'const.pair.FST_1'(s('type.pair.prod'(bool,X151),'const.pair.,_2'(s(bool,X152),s(X151,X153)))),X154,bool)))) | s(bool,'F_0') = s(bool,X152)) )),
  inference(subsumption_resolution,[],[f20664,f256])).
fof(f20664,plain,(
  ( ! [X154,X152,X151,X155,X153] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X154),bool),sK16(X155,'const.pair.FST_1'(s('type.pair.prod'(bool,X151),'const.pair.,_2'(s(bool,X152),s(X151,X153)))),X154,bool)))) | s(bool,'F_0') = s(bool,X152)) )),
  inference(superposition,[],[f3944,f730])).
fof(f20778,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X48) != s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X45),'const.pair.,_2'(s(bool,X46),s(X45,X47))))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f20636,f256])).
fof(f20636,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X48) != s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X45),'const.pair.,_2'(s(bool,X46),s(X45,X47))))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f434,f730])).
fof(f20557,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,bool),'const.pair.,_2'(s(bool,X122),s(bool,X121))))) | s(bool,'F_0') = s(bool,X122) | s(bool,X121) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f730,f432])).
fof(f20523,plain,(
  ( ! [X282,X285,X283,X284] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X284),'const.pair.,_2'(s(bool,X282),s(X284,X285))))) | s(bool,'F_0') = s(bool,sK4(X282,X283,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X283)))) )),
  inference(superposition,[],[f730,f823])).
fof(f20520,plain,(
  ( ! [X269,X271,X273,X270,X272] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X272),'const.pair.,_2'(s(bool,happ(s(fun('type.num.num',bool),X270),s('type.num.num',X271))),s(X272,X273))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X269),s(fun('type.num.num',bool),X270),s('type.num.num','const.num.SUC_1'(s('type.num.num',X271)))))) )),
  inference(superposition,[],[f730,f318])).
fof(f20519,plain,(
  ( ! [X265,X267,X268,X266] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X267),'const.pair.,_2'(s(bool,X265),s(X267,X268))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X265),s(fun('type.num.num',bool),X266),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f730,f310])).
fof(f20518,plain,(
  ( ! [X261,X263,X260,X262,X264] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X263),'const.pair.,_2'(s(bool,X261),s(X263,X264))))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X260),'const.pair.,_2'(s(bool,X261),s(X260,X262)))))) )),
  inference(superposition,[],[f730,f341])).
fof(f20517,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X258),'const.pair.,_2'(s(bool,X257),s(X258,X259))))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X255,bool),'const.pair.,_2'(s(X255,X256),s(bool,X257)))))) )),
  inference(superposition,[],[f730,f340])).
fof(f20516,plain,(
  ( ! [X253,X251,X254,X252] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X253),'const.pair.,_2'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X251),X252))),s(X253,X254))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X251),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X251),X252)))) )),
  inference(superposition,[],[f730,f338])).
fof(f20515,plain,(
  ( ! [X249,X246,X250,X248,X247] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X249),'const.pair.,_2'(s(bool,X248),s(X249,X250))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X246),bool),sK16(X247,X248,X246,bool)),s('type.list.list'(X246),'const.list.NIL_0')))) )),
  inference(superposition,[],[f730,f356])).
fof(f20514,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X244),'const.pair.,_2'(s(bool,'const.ind_type.FCONS_3'(s(bool,X241),s(fun('type.num.num',bool),X242),s('type.num.num',X243))),s(X244,X245))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X241))),s(fun('type.num.num',bool),X242))),s('type.num.num',X243)))) )),
  inference(superposition,[],[f730,f320])).
fof(f20513,plain,(
  ( ! [X239,X237,X235,X240,X238,X236,X234] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X239),'const.pair.,_2'(s(bool,happ(s(fun(X235,bool),X236),s(X235,happ(s(fun(X234,X235),X237),s(X234,X238))))),s(X239,X240))))) | s(bool,'F_0') = s(bool,happ(s(fun(X234,bool),'_dst_x0x1_2'(s(fun(X235,bool),X236),s(fun(X234,X235),X237))),s(X234,X238)))) )),
  inference(superposition,[],[f730,f365])).
fof(f20512,plain,(
  ( ! [X231,X229,X227,X233,X230,X228,X232] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X232),'const.pair.,_2'(s(bool,happ(s(fun(X229,bool),'_dst_x0x1_2'(s(fun(X227,bool),X228),s(fun(X229,X227),X230))),s(X229,X231))),s(X232,X233))))) | s(bool,'F_0') = s(bool,happ(s(fun(X227,bool),X228),s(X227,happ(s(fun(X229,X227),X230),s(X229,X231)))))) )),
  inference(superposition,[],[f730,f365])).
fof(f20511,plain,(
  ( ! [X222,X220,X225,X223,X221,X226,X224] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X225),'const.pair.,_2'(s(bool,happ(s(fun('type.list.list'(X220),bool),sK16(X221,X224,X220,bool)),s('type.list.list'(X220),'const.list.CONS_2'(s(X220,X222),s('type.list.list'(X220),X223))))),s(X225,X226))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X220),fun(bool,bool)),happ(s(fun(X220,fun('type.list.list'(X220),fun(bool,bool))),X221),s(X220,X222))),s('type.list.list'(X220),X223))),s(bool,happ(s(fun('type.list.list'(X220),bool),sK16(X221,X224,X220,bool)),s('type.list.list'(X220),X223)))))) )),
  inference(superposition,[],[f730,f357])).
fof(f20425,plain,(
  ( ! [X6,X4,X5,X3] : (s(X3,sK15(X6,X5,X3,X4)) != s(X3,happ(s(fun(X4,X3),X6),s(X4,happ(s(fun(X3,X4),X5),s(X3,sK15(X6,X5,X3,X4)))))) | s(X4,sK14(X6,X5,X3,X4)) != s(X4,happ(s(fun(X3,X4),X5),s(X3,happ(s(fun(X4,X3),X6),s(X4,sK14(X6,X5,X3,X4)))))) | s(bool,'T_0') = s(bool,'const.ind_type.ISO_2'(s(fun(X3,X4),X5),s(fun(X4,X3),X6)))) )),
  inference(subsumption_resolution,[],[f20358,f258])).
fof(f20358,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(X3,sK15(X6,X5,X3,X4)) != s(X3,happ(s(fun(X4,X3),X6),s(X4,happ(s(fun(X3,X4),X5),s(X3,sK15(X6,X5,X3,X4)))))) | s(X4,sK14(X6,X5,X3,X4)) != s(X4,happ(s(fun(X3,X4),X5),s(X3,happ(s(fun(X4,X3),X6),s(X4,sK14(X6,X5,X3,X4)))))) | s(bool,'T_0') = s(bool,'const.ind_type.ISO_2'(s(fun(X3,X4),X5),s(fun(X4,X3),X6)))) )),
  inference(superposition,[],[f355,f264])).
fof(f20355,plain,(
  ( ! [X103,X101,X102,X100,X104] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X101,X100),X104),s(fun(X100,X101),X102)))) | s(X101,sK15(sK4(X102,X103,fun(X100,X101)),X104,X101,X100)) != s(X101,happ(s(fun(X100,X101),sK4(X102,X103,fun(X100,X101))),s(X100,happ(s(fun(X101,X100),X104),s(X101,sK15(sK4(X102,X103,fun(X100,X101)),X104,X101,X100)))))) | s(X100,sK14(sK4(X102,X103,fun(X100,X101)),X104,X101,X100)) != s(X100,happ(s(fun(X101,X100),X104),s(X101,happ(s(fun(X100,X101),sK4(X102,X103,fun(X100,X101))),s(X100,sK14(sK4(X102,X103,fun(X100,X101)),X104,X101,X100)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X100,X101),bool),X103)))) )),
  inference(superposition,[],[f355,f823])).
fof(f20424,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(X95,sK14('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)) != s(X95,happ(s(fun(X96,X95),X99),s(X96,happ(s(fun(X95,X96),X98),s(X95,sK14('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)))))) | s(X96,sK15('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)) != s(X96,happ(s(fun(X95,X96),X98),s(X95,happ(s(fun(X96,X95),X99),s(X96,sK15('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X96,X95),X99),s(fun(X95,X96),X98))))) )),
  inference(forward_demodulation,[],[f20423,f336])).
fof(f20423,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(X96,sK15('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)) != s(X96,happ(s(fun(X95,X96),X98),s(X95,happ(s(fun(X96,X95),X99),s(X96,sK15('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X96,X95),X99),s(fun(X95,X96),X98)))) | s(X95,sK14('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)) != s(X95,happ(s(fun(X96,X95),X99),s(X96,happ(s(fun(X95,X96),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98))))),s(X95,sK14('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95))))))) )),
  inference(forward_demodulation,[],[f20354,f336])).
fof(f20354,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X96,X95),X99),s(fun(X95,X96),X98)))) | s(X96,sK15('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)) != s(X96,happ(s(fun(X95,X96),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98))))),s(X95,happ(s(fun(X96,X95),X99),s(X96,sK15('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)))))) | s(X95,sK14('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95)) != s(X95,happ(s(fun(X96,X95),X99),s(X96,happ(s(fun(X95,X96),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98))))),s(X95,sK14('const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X99,X96,X95))))))) )),
  inference(superposition,[],[f355,f336])).
fof(f20422,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(X90,sK14('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)) != s(X90,happ(s(fun(X91,X90),X94),s(X91,happ(s(fun(X90,X91),X93),s(X90,sK14('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)))))) | s(X91,sK15('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)) != s(X91,happ(s(fun(X90,X91),X93),s(X90,happ(s(fun(X91,X90),X94),s(X91,sK15('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X91,X90),X94),s(fun(X90,X91),X93))))) )),
  inference(forward_demodulation,[],[f20421,f337])).
fof(f20421,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(X91,sK15('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)) != s(X91,happ(s(fun(X90,X91),X93),s(X90,happ(s(fun(X91,X90),X94),s(X91,sK15('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X91,X90),X94),s(fun(X90,X91),X93)))) | s(X90,sK14('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)) != s(X90,happ(s(fun(X91,X90),X94),s(X91,happ(s(fun(X90,X91),'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93))))),s(X90,sK14('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90))))))) )),
  inference(forward_demodulation,[],[f20353,f337])).
fof(f20353,plain,(
  ( ! [X94,X92,X90,X93,X91] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X91,X90),X94),s(fun(X90,X91),X93)))) | s(X91,sK15('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)) != s(X91,happ(s(fun(X90,X91),'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93))))),s(X90,happ(s(fun(X91,X90),X94),s(X91,sK15('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)))))) | s(X90,sK14('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90)) != s(X90,happ(s(fun(X91,X90),X94),s(X91,happ(s(fun(X90,X91),'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93))))),s(X90,sK14('const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X94,X91,X90))))))) )),
  inference(superposition,[],[f355,f337])).
fof(f20420,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s(X84,sK14('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)) != s(X84,happ(s(fun(X85,X84),X89),s(X85,happ(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(X84,sK14('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)))))) | s(X85,sK15('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)) != s(X85,happ(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(X84,happ(s(fun(X85,X84),X89),s(X85,sK15('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X85,X84),X89),s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))))))) )),
  inference(forward_demodulation,[],[f20419,f318])).
fof(f20419,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s(X85,sK15('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)) != s(X85,happ(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(X84,happ(s(fun(X85,X84),X89),s(X85,sK15('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X85,X84),X89),s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88)))))) | s(X84,sK14('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)) != s(X84,happ(s(fun(X85,X84),X89),s(X85,happ(s(fun(X84,X85),'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))),s(X84,sK14('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84))))))) )),
  inference(forward_demodulation,[],[f20352,f318])).
fof(f20352,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X85,X84),X89),s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88)))))) | s(X85,sK15('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)) != s(X85,happ(s(fun(X84,X85),'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))),s(X84,happ(s(fun(X85,X84),X89),s(X85,sK15('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)))))) | s(X84,sK14('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84)) != s(X84,happ(s(fun(X85,X84),X89),s(X85,happ(s(fun(X84,X85),'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))),s(X84,sK14('const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X89,X85,X84))))))) )),
  inference(superposition,[],[f355,f318])).
fof(f20418,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(X79,sK14('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)) != s(X79,happ(s(fun(X80,X79),X83),s(X80,happ(s(fun(X79,X80),X81),s(X79,sK14('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)))))) | s(X80,sK15('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)) != s(X80,happ(s(fun(X79,X80),X81),s(X79,happ(s(fun(X80,X79),X83),s(X80,sK15('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X79),X83),s(fun(X79,X80),X81))))) )),
  inference(forward_demodulation,[],[f20417,f310])).
fof(f20417,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(X80,sK15('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)) != s(X80,happ(s(fun(X79,X80),X81),s(X79,happ(s(fun(X80,X79),X83),s(X80,sK15('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X79),X83),s(fun(X79,X80),X81)))) | s(X79,sK14('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)) != s(X79,happ(s(fun(X80,X79),X83),s(X80,happ(s(fun(X79,X80),'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0'))),s(X79,sK14('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79))))))) )),
  inference(forward_demodulation,[],[f20351,f310])).
fof(f20351,plain,(
  ( ! [X80,X83,X81,X79,X82] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X79),X83),s(fun(X79,X80),X81)))) | s(X80,sK15('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)) != s(X80,happ(s(fun(X79,X80),'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0'))),s(X79,happ(s(fun(X80,X79),X83),s(X80,sK15('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)))))) | s(X79,sK14('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79)) != s(X79,happ(s(fun(X80,X79),X83),s(X80,happ(s(fun(X79,X80),'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0'))),s(X79,sK14('const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X83,X80,X79))))))) )),
  inference(superposition,[],[f355,f310])).
fof(f20416,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s(X73,sK14('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)) != s(X73,happ(s(fun(X74,X73),X78),s(X74,happ(s(fun(X73,X74),X76),s(X73,sK14('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)))))) | s(X74,sK15('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)) != s(X74,happ(s(fun(X73,X74),X76),s(X73,happ(s(fun(X74,X73),X78),s(X74,sK15('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X74,X73),X78),s(fun(X73,X74),X76))))) )),
  inference(forward_demodulation,[],[f20415,f341])).
fof(f20415,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s(X74,sK15('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)) != s(X74,happ(s(fun(X73,X74),X76),s(X73,happ(s(fun(X74,X73),X78),s(X74,sK15('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X74,X73),X78),s(fun(X73,X74),X76)))) | s(X73,sK14('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)) != s(X73,happ(s(fun(X74,X73),X78),s(X74,happ(s(fun(X73,X74),'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77))))),s(X73,sK14('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73))))))) )),
  inference(forward_demodulation,[],[f20350,f341])).
fof(f20350,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X74,X73),X78),s(fun(X73,X74),X76)))) | s(X74,sK15('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)) != s(X74,happ(s(fun(X73,X74),'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77))))),s(X73,happ(s(fun(X74,X73),X78),s(X74,sK15('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)))))) | s(X73,sK14('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73)) != s(X73,happ(s(fun(X74,X73),X78),s(X74,happ(s(fun(X73,X74),'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77))))),s(X73,sK14('const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X78,X74,X73))))))) )),
  inference(superposition,[],[f355,f341])).
fof(f20414,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(X67,sK14('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)) != s(X67,happ(s(fun(X68,X67),X72),s(X68,happ(s(fun(X67,X68),X71),s(X67,sK14('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)))))) | s(X68,sK15('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)) != s(X68,happ(s(fun(X67,X68),X71),s(X67,happ(s(fun(X68,X67),X72),s(X68,sK15('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X68,X67),X72),s(fun(X67,X68),X71))))) )),
  inference(forward_demodulation,[],[f20413,f340])).
fof(f20413,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(X68,sK15('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)) != s(X68,happ(s(fun(X67,X68),X71),s(X67,happ(s(fun(X68,X67),X72),s(X68,sK15('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X68,X67),X72),s(fun(X67,X68),X71)))) | s(X67,sK14('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)) != s(X67,happ(s(fun(X68,X67),X72),s(X68,happ(s(fun(X67,X68),'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71))))),s(X67,sK14('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67))))))) )),
  inference(forward_demodulation,[],[f20349,f340])).
fof(f20349,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X68,X67),X72),s(fun(X67,X68),X71)))) | s(X68,sK15('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)) != s(X68,happ(s(fun(X67,X68),'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71))))),s(X67,happ(s(fun(X68,X67),X72),s(X68,sK15('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)))))) | s(X67,sK14('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67)) != s(X67,happ(s(fun(X68,X67),X72),s(X68,happ(s(fun(X67,X68),'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71))))),s(X67,sK14('const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X72,X68,X67))))))) )),
  inference(superposition,[],[f355,f340])).
fof(f20412,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s(X62,sK14(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)) != s(X62,happ(s(fun(X63,X62),X66),s(X63,happ(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,sK14(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)))))) | s(X63,sK15(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)) != s(X63,happ(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,happ(s(fun(X63,X62),X66),s(X63,sK15(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X63,X62),X66),s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))))))) )),
  inference(forward_demodulation,[],[f20411,f338])).
fof(f20411,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s(X63,sK15(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)) != s(X63,happ(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,happ(s(fun(X63,X62),X66),s(X63,sK15(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X63,X62),X66),s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65)))))) | s(X62,sK14(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)) != s(X62,happ(s(fun(X63,X62),X66),s(X63,happ(s(fun(X62,X63),happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,sK14(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62))))))) )),
  inference(forward_demodulation,[],[f20348,f338])).
fof(f20348,plain,(
  ( ! [X66,X64,X62,X65,X63] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X63,X62),X66),s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65)))))) | s(X63,sK15(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)) != s(X63,happ(s(fun(X62,X63),happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,happ(s(fun(X63,X62),X66),s(X63,sK15(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)))))) | s(X62,sK14(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62)) != s(X62,happ(s(fun(X63,X62),X66),s(X63,happ(s(fun(X62,X63),happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,sK14(happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X66,X63,X62))))))) )),
  inference(superposition,[],[f355,f338])).
fof(f20410,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(X56,sK14(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)) != s(X56,happ(s(fun(X57,X56),X61),s(X57,happ(s(fun(X56,X57),X60),s(X56,sK14(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)))))) | s(X57,sK15(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)) != s(X57,happ(s(fun(X56,X57),X60),s(X56,happ(s(fun(X57,X56),X61),s(X57,sK15(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X56),X61),s(fun(X56,X57),X60))))) )),
  inference(forward_demodulation,[],[f20409,f356])).
fof(f20409,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(X57,sK15(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)) != s(X57,happ(s(fun(X56,X57),X60),s(X56,happ(s(fun(X57,X56),X61),s(X57,sK15(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X56),X61),s(fun(X56,X57),X60)))) | s(X56,sK14(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)) != s(X56,happ(s(fun(X57,X56),X61),s(X57,happ(s(fun(X56,X57),happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0'))),s(X56,sK14(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56))))))) )),
  inference(forward_demodulation,[],[f20347,f356])).
fof(f20347,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X56),X61),s(fun(X56,X57),X60)))) | s(X57,sK15(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)) != s(X57,happ(s(fun(X56,X57),happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0'))),s(X56,happ(s(fun(X57,X56),X61),s(X57,sK15(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)))))) | s(X56,sK14(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56)) != s(X56,happ(s(fun(X57,X56),X61),s(X57,happ(s(fun(X56,X57),happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0'))),s(X56,sK14(happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X61,X57,X56))))))) )),
  inference(superposition,[],[f355,f356])).
fof(f20408,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(X50,sK14(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)) != s(X50,happ(s(fun(X51,X50),X55),s(X51,happ(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(X50,sK14(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)))))) | s(X51,sK15(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)) != s(X51,happ(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(X50,happ(s(fun(X51,X50),X55),s(X51,sK15(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X51,X50),X55),s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))))))) )),
  inference(forward_demodulation,[],[f20407,f320])).
fof(f20407,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(X51,sK15(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)) != s(X51,happ(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(X50,happ(s(fun(X51,X50),X55),s(X51,sK15(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X51,X50),X55),s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54)))))) | s(X50,sK14(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)) != s(X50,happ(s(fun(X51,X50),X55),s(X51,happ(s(fun(X50,X51),happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54))),s(X50,sK14(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50))))))) )),
  inference(forward_demodulation,[],[f20346,f320])).
fof(f20346,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X51,X50),X55),s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54)))))) | s(X51,sK15(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)) != s(X51,happ(s(fun(X50,X51),happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54))),s(X50,happ(s(fun(X51,X50),X55),s(X51,sK15(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)))))) | s(X50,sK14(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50)) != s(X50,happ(s(fun(X51,X50),X55),s(X51,happ(s(fun(X50,X51),happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54))),s(X50,sK14(happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X55,X51,X50))))))) )),
  inference(superposition,[],[f355,f320])).
fof(f20345,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42,X49] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X49),s(fun(X42,X43),happ(s(fun(X45,fun(X42,X43)),X46),s(X45,happ(s(fun(X44,X45),X47),s(X44,X48)))))))) | s(X43,sK15(happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X49,X43,X42)) != s(X43,happ(s(fun(X42,X43),happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48))),s(X42,happ(s(fun(X43,X42),X49),s(X43,sK15(happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X49,X43,X42)))))) | s(X42,sK14(happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X49,X43,X42)) != s(X42,happ(s(fun(X43,X42),X49),s(X43,happ(s(fun(X42,X43),happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48))),s(X42,sK14(happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X49,X43,X42))))))) )),
  inference(superposition,[],[f355,f365])).
fof(f20344,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X41),s(fun(X34,X35),happ(s(fun(X38,fun(X34,X35)),'_dst_x0x1_2'(s(fun(X36,fun(X34,X35)),X37),s(fun(X38,X36),X39))),s(X38,X40)))))) | s(X35,sK15(happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X41,X35,X34)) != s(X35,happ(s(fun(X34,X35),happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40))))),s(X34,happ(s(fun(X35,X34),X41),s(X35,sK15(happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X41,X35,X34)))))) | s(X34,sK14(happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X41,X35,X34)) != s(X34,happ(s(fun(X35,X34),X41),s(X35,happ(s(fun(X34,X35),happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40))))),s(X34,sK14(happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X41,X35,X34))))))) )),
  inference(superposition,[],[f355,f365])).
fof(f20406,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X26,sK14(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)) != s(X26,happ(s(fun(X27,X26),X33),s(X27,happ(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(X26,sK14(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)))))) | s(X27,sK15(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)) != s(X27,happ(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(X26,happ(s(fun(X27,X26),X33),s(X27,sK15(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X27,X26),X33),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))))))) )),
  inference(forward_demodulation,[],[f20405,f357])).
fof(f20405,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X27,sK15(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)) != s(X27,happ(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(X26,happ(s(fun(X27,X26),X33),s(X27,sK15(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X27,X26),X33),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31)))))))) | s(X26,sK14(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)) != s(X26,happ(s(fun(X27,X26),X33),s(X27,happ(s(fun(X26,X27),happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31))))),s(X26,sK14(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26))))))) )),
  inference(forward_demodulation,[],[f20343,f357])).
fof(f20343,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X27,X26),X33),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31)))))))) | s(X27,sK15(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)) != s(X27,happ(s(fun(X26,X27),happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31))))),s(X26,happ(s(fun(X27,X26),X33),s(X27,sK15(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)))))) | s(X26,sK14(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26)) != s(X26,happ(s(fun(X27,X26),X33),s(X27,happ(s(fun(X26,X27),happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31))))),s(X26,sK14(happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X33,X27,X26))))))) )),
  inference(superposition,[],[f355,f357])).
fof(f20404,plain,(
  ( ! [X24,X23,X25,X22] : (s(X22,sK14(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)) != s(X22,happ(s(fun(X23,X22),X25),s(X23,happ(s(fun(X22,X23),X24),s(X22,sK14(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)))))) | s(X23,sK15(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)) != s(X23,happ(s(fun(X22,X23),X24),s(X22,happ(s(fun(X23,X22),X25),s(X23,sK15(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X23,X22),X25),s(fun(X22,X23),X24))))) )),
  inference(forward_demodulation,[],[f20403,f303])).
fof(f20403,plain,(
  ( ! [X24,X23,X25,X22] : (s(X23,sK15(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)) != s(X23,happ(s(fun(X22,X23),X24),s(X22,happ(s(fun(X23,X22),X25),s(X23,sK15(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X23,X22),X25),s(fun(X22,X23),X24)))) | s(X22,sK14(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)) != s(X22,happ(s(fun(X23,X22),X25),s(X23,happ(s(fun(X22,X23),happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24))),s(X22,sK14(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22))))))) )),
  inference(forward_demodulation,[],[f20342,f303])).
fof(f20342,plain,(
  ( ! [X24,X23,X25,X22] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X23,X22),X25),s(fun(X22,X23),X24)))) | s(X23,sK15(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)) != s(X23,happ(s(fun(X22,X23),happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24))),s(X22,happ(s(fun(X23,X22),X25),s(X23,sK15(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)))))) | s(X22,sK14(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22)) != s(X22,happ(s(fun(X23,X22),X25),s(X23,happ(s(fun(X22,X23),happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24))),s(X22,sK14(happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X25,X23,X22))))))) )),
  inference(superposition,[],[f355,f303])).
fof(f20341,plain,(
  ( ! [X14,X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x00x11_2'(s(fun(X16,X15),X17),s(fun(X18,fun(X14,X16)),X19))),s(X18,X20)))))) | s(X15,sK15('_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X21,X15,X14)) != s(X15,happ(s(fun(X14,X15),'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20))))),s(X14,happ(s(fun(X15,X14),X21),s(X15,sK15('_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X21,X15,X14)))))) | s(X14,sK14('_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X21,X15,X14)) != s(X14,happ(s(fun(X15,X14),X21),s(X15,happ(s(fun(X14,X15),'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20))))),s(X14,sK14('_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X21,X15,X14))))))) )),
  inference(superposition,[],[f355,f390])).
fof(f20340,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X7,X6),X13),s(fun(X6,X7),'_dst_x0x1_2'(s(fun(X9,X7),X10),s(fun(X6,X9),happ(s(fun(X8,fun(X6,X9)),X11),s(X8,X12)))))))) | s(X7,sK15(happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X13,X7,X6)) != s(X7,happ(s(fun(X6,X7),happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12))),s(X6,happ(s(fun(X7,X6),X13),s(X7,sK15(happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X13,X7,X6)))))) | s(X6,sK14(happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X13,X7,X6)) != s(X6,happ(s(fun(X7,X6),X13),s(X7,happ(s(fun(X6,X7),happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12))),s(X6,sK14(happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X13,X7,X6))))))) )),
  inference(superposition,[],[f355,f390])).
fof(f20402,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,sK14(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)) != s(X0,happ(s(fun(X1,X0),X5),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK14(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)))))) | s(X1,sK15(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK15(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))))))) )),
  inference(forward_demodulation,[],[f20401,f364])).
fof(f20401,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,sK15(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK15(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | s(X0,sK14(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)) != s(X0,happ(s(fun(X1,X0),X5),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,sK14(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0))))))) )),
  inference(forward_demodulation,[],[f20339,f364])).
fof(f20339,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | s(X1,sK15(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)) != s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK15(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)))))) | s(X0,sK14(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)) != s(X0,happ(s(fun(X1,X0),X5),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,sK14(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0))))))) )),
  inference(superposition,[],[f355,f364])).
fof(f20338,plain,(
  ( ! [X103,X101,X102,X100,X104] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X100,X101),X102),s(fun(X101,X100),X104)))) | s(X100,sK15(X104,sK4(X102,X103,fun(X100,X101)),X100,X101)) != s(X100,happ(s(fun(X101,X100),X104),s(X101,happ(s(fun(X100,X101),sK4(X102,X103,fun(X100,X101))),s(X100,sK15(X104,sK4(X102,X103,fun(X100,X101)),X100,X101)))))) | s(X101,sK14(X104,sK4(X102,X103,fun(X100,X101)),X100,X101)) != s(X101,happ(s(fun(X100,X101),sK4(X102,X103,fun(X100,X101))),s(X100,happ(s(fun(X101,X100),X104),s(X101,sK14(X104,sK4(X102,X103,fun(X100,X101)),X100,X101)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X100,X101),bool),X103)))) )),
  inference(superposition,[],[f355,f823])).
fof(f20400,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(X96,sK14(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)) != s(X96,happ(s(fun(X95,X96),X98),s(X95,happ(s(fun(X96,X95),X99),s(X96,sK14(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)))))) | s(X95,sK15(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)) != s(X95,happ(s(fun(X96,X95),X99),s(X96,happ(s(fun(X95,X96),X98),s(X95,sK15(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X96),X98),s(fun(X96,X95),X99))))) )),
  inference(forward_demodulation,[],[f20399,f336])).
fof(f20399,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(X95,sK15(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)) != s(X95,happ(s(fun(X96,X95),X99),s(X96,happ(s(fun(X95,X96),X98),s(X95,sK15(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X96),X98),s(fun(X96,X95),X99)))) | s(X96,sK14(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)) != s(X96,happ(s(fun(X95,X96),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98))))),s(X95,happ(s(fun(X96,X95),X99),s(X96,sK14(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96))))))) )),
  inference(forward_demodulation,[],[f20337,f336])).
fof(f20337,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X96),X98),s(fun(X96,X95),X99)))) | s(X95,sK15(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)) != s(X95,happ(s(fun(X96,X95),X99),s(X96,happ(s(fun(X95,X96),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98))))),s(X95,sK15(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)))))) | s(X96,sK14(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96)) != s(X96,happ(s(fun(X95,X96),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98))))),s(X95,happ(s(fun(X96,X95),X99),s(X96,sK14(X99,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X95,X96),X97),'const.sum.INL_1'(s(fun(X95,X96),X98)))),X95,X96))))))) )),
  inference(superposition,[],[f355,f336])).
fof(f20398,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(X91,sK14(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)) != s(X91,happ(s(fun(X90,X91),X93),s(X90,happ(s(fun(X91,X90),X94),s(X91,sK14(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)))))) | s(X90,sK15(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)) != s(X90,happ(s(fun(X91,X90),X94),s(X91,happ(s(fun(X90,X91),X93),s(X90,sK15(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X90,X91),X93),s(fun(X91,X90),X94))))) )),
  inference(forward_demodulation,[],[f20397,f337])).
fof(f20397,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(X90,sK15(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)) != s(X90,happ(s(fun(X91,X90),X94),s(X91,happ(s(fun(X90,X91),X93),s(X90,sK15(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X90,X91),X93),s(fun(X91,X90),X94)))) | s(X91,sK14(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)) != s(X91,happ(s(fun(X90,X91),'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93))))),s(X90,happ(s(fun(X91,X90),X94),s(X91,sK14(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91))))))) )),
  inference(forward_demodulation,[],[f20336,f337])).
fof(f20336,plain,(
  ( ! [X94,X92,X90,X93,X91] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X90,X91),X93),s(fun(X91,X90),X94)))) | s(X90,sK15(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)) != s(X90,happ(s(fun(X91,X90),X94),s(X91,happ(s(fun(X90,X91),'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93))))),s(X90,sK15(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)))))) | s(X91,sK14(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91)) != s(X91,happ(s(fun(X90,X91),'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93))))),s(X90,happ(s(fun(X91,X90),X94),s(X91,sK14(X94,'const.sum.OUTR_1'(s('type.sum.sum'(X92,fun(X90,X91)),'const.sum.INR_1'(s(fun(X90,X91),X93)))),X90,X91))))))) )),
  inference(superposition,[],[f355,f337])).
fof(f20396,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s(X85,sK14(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)) != s(X85,happ(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(X84,happ(s(fun(X85,X84),X89),s(X85,sK14(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)))))) | s(X84,sK15(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)) != s(X84,happ(s(fun(X85,X84),X89),s(X85,happ(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(X84,sK15(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(fun(X85,X84),X89))))) )),
  inference(forward_demodulation,[],[f20395,f318])).
fof(f20395,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s(X84,sK15(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)) != s(X84,happ(s(fun(X85,X84),X89),s(X85,happ(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(X84,sK15(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(fun(X85,X84),X89)))) | s(X85,sK14(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)) != s(X85,happ(s(fun(X84,X85),'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))),s(X84,happ(s(fun(X85,X84),X89),s(X85,sK14(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85))))))) )),
  inference(forward_demodulation,[],[f20335,f318])).
fof(f20335,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X84,X85),happ(s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num',X88))),s(fun(X85,X84),X89)))) | s(X84,sK15(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)) != s(X84,happ(s(fun(X85,X84),X89),s(X85,happ(s(fun(X84,X85),'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))),s(X84,sK15(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)))))) | s(X85,sK14(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85)) != s(X85,happ(s(fun(X84,X85),'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))),s(X84,happ(s(fun(X85,X84),X89),s(X85,sK14(X89,'const.ind_type.FCONS_3'(s(fun(X84,X85),X86),s(fun('type.num.num',fun(X84,X85)),X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88)))),X84,X85))))))) )),
  inference(superposition,[],[f355,f318])).
fof(f20394,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(X80,sK14(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)) != s(X80,happ(s(fun(X79,X80),X81),s(X79,happ(s(fun(X80,X79),X83),s(X80,sK14(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)))))) | s(X79,sK15(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)) != s(X79,happ(s(fun(X80,X79),X83),s(X80,happ(s(fun(X79,X80),X81),s(X79,sK15(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X79,X80),X81),s(fun(X80,X79),X83))))) )),
  inference(forward_demodulation,[],[f20393,f310])).
fof(f20393,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(X79,sK15(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)) != s(X79,happ(s(fun(X80,X79),X83),s(X80,happ(s(fun(X79,X80),X81),s(X79,sK15(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X79,X80),X81),s(fun(X80,X79),X83)))) | s(X80,sK14(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)) != s(X80,happ(s(fun(X79,X80),'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0'))),s(X79,happ(s(fun(X80,X79),X83),s(X80,sK14(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80))))))) )),
  inference(forward_demodulation,[],[f20334,f310])).
fof(f20334,plain,(
  ( ! [X80,X83,X81,X79,X82] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X79,X80),X81),s(fun(X80,X79),X83)))) | s(X79,sK15(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)) != s(X79,happ(s(fun(X80,X79),X83),s(X80,happ(s(fun(X79,X80),'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0'))),s(X79,sK15(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)))))) | s(X80,sK14(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80)) != s(X80,happ(s(fun(X79,X80),'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0'))),s(X79,happ(s(fun(X80,X79),X83),s(X80,sK14(X83,'const.ind_type.FCONS_3'(s(fun(X79,X80),X81),s(fun('type.num.num',fun(X79,X80)),X82),s('type.num.num','const.num.|48|_0')),X79,X80))))))) )),
  inference(superposition,[],[f355,f310])).
fof(f20392,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s(X74,sK14(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)) != s(X74,happ(s(fun(X73,X74),X76),s(X73,happ(s(fun(X74,X73),X78),s(X74,sK14(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)))))) | s(X73,sK15(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)) != s(X73,happ(s(fun(X74,X73),X78),s(X74,happ(s(fun(X73,X74),X76),s(X73,sK15(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X74),X76),s(fun(X74,X73),X78))))) )),
  inference(forward_demodulation,[],[f20391,f341])).
fof(f20391,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s(X73,sK15(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)) != s(X73,happ(s(fun(X74,X73),X78),s(X74,happ(s(fun(X73,X74),X76),s(X73,sK15(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X74),X76),s(fun(X74,X73),X78)))) | s(X74,sK14(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)) != s(X74,happ(s(fun(X73,X74),'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77))))),s(X73,happ(s(fun(X74,X73),X78),s(X74,sK14(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74))))))) )),
  inference(forward_demodulation,[],[f20333,f341])).
fof(f20333,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X74),X76),s(fun(X74,X73),X78)))) | s(X73,sK15(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)) != s(X73,happ(s(fun(X74,X73),X78),s(X74,happ(s(fun(X73,X74),'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77))))),s(X73,sK15(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)))))) | s(X74,sK14(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74)) != s(X74,happ(s(fun(X73,X74),'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77))))),s(X73,happ(s(fun(X74,X73),X78),s(X74,sK14(X78,'const.pair.FST_1'(s('type.pair.prod'(fun(X73,X74),X75),'const.pair.,_2'(s(fun(X73,X74),X76),s(X75,X77)))),X73,X74))))))) )),
  inference(superposition,[],[f355,f341])).
fof(f20390,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(X68,sK14(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)) != s(X68,happ(s(fun(X67,X68),X71),s(X67,happ(s(fun(X68,X67),X72),s(X68,sK14(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)))))) | s(X67,sK15(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)) != s(X67,happ(s(fun(X68,X67),X72),s(X68,happ(s(fun(X67,X68),X71),s(X67,sK15(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X67,X68),X71),s(fun(X68,X67),X72))))) )),
  inference(forward_demodulation,[],[f20389,f340])).
fof(f20389,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(X67,sK15(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)) != s(X67,happ(s(fun(X68,X67),X72),s(X68,happ(s(fun(X67,X68),X71),s(X67,sK15(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X67,X68),X71),s(fun(X68,X67),X72)))) | s(X68,sK14(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)) != s(X68,happ(s(fun(X67,X68),'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71))))),s(X67,happ(s(fun(X68,X67),X72),s(X68,sK14(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68))))))) )),
  inference(forward_demodulation,[],[f20332,f340])).
fof(f20332,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X67,X68),X71),s(fun(X68,X67),X72)))) | s(X67,sK15(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)) != s(X67,happ(s(fun(X68,X67),X72),s(X68,happ(s(fun(X67,X68),'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71))))),s(X67,sK15(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)))))) | s(X68,sK14(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68)) != s(X68,happ(s(fun(X67,X68),'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71))))),s(X67,happ(s(fun(X68,X67),X72),s(X68,sK14(X72,'const.pair.SND_1'(s('type.pair.prod'(X69,fun(X67,X68)),'const.pair.,_2'(s(X69,X70),s(fun(X67,X68),X71)))),X67,X68))))))) )),
  inference(superposition,[],[f355,f340])).
fof(f20388,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s(X63,sK14(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)) != s(X63,happ(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,happ(s(fun(X63,X62),X66),s(X63,sK14(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)))))) | s(X62,sK15(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)) != s(X62,happ(s(fun(X63,X62),X66),s(X63,happ(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,sK15(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(fun(X63,X62),X66))))) )),
  inference(forward_demodulation,[],[f20387,f338])).
fof(f20387,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s(X62,sK15(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)) != s(X62,happ(s(fun(X63,X62),X66),s(X63,happ(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,sK15(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(fun(X63,X62),X66)))) | s(X63,sK14(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)) != s(X63,happ(s(fun(X62,X63),happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,happ(s(fun(X63,X62),X66),s(X63,sK14(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63))))))) )),
  inference(forward_demodulation,[],[f20331,f338])).
fof(f20331,plain,(
  ( ! [X66,X64,X62,X65,X63] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X62,X63),'const.pair.FST_1'(s('type.pair.prod'(fun(X62,X63),X64),X65))),s(fun(X63,X62),X66)))) | s(X62,sK15(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)) != s(X62,happ(s(fun(X63,X62),X66),s(X63,happ(s(fun(X62,X63),happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,sK15(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)))))) | s(X63,sK14(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63)) != s(X63,happ(s(fun(X62,X63),happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65))),s(X62,happ(s(fun(X63,X62),X66),s(X63,sK14(X66,happ(s(fun('type.pair.prod'(fun(X62,X63),X64),fun(X62,X63)),'const.pair.FST_0'),s('type.pair.prod'(fun(X62,X63),X64),X65)),X62,X63))))))) )),
  inference(superposition,[],[f355,f338])).
fof(f20386,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(X57,sK14(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)) != s(X57,happ(s(fun(X56,X57),X60),s(X56,happ(s(fun(X57,X56),X61),s(X57,sK14(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)))))) | s(X56,sK15(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)) != s(X56,happ(s(fun(X57,X56),X61),s(X57,happ(s(fun(X56,X57),X60),s(X56,sK15(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X56,X57),X60),s(fun(X57,X56),X61))))) )),
  inference(forward_demodulation,[],[f20385,f356])).
fof(f20385,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(X56,sK15(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)) != s(X56,happ(s(fun(X57,X56),X61),s(X57,happ(s(fun(X56,X57),X60),s(X56,sK15(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X56,X57),X60),s(fun(X57,X56),X61)))) | s(X57,sK14(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)) != s(X57,happ(s(fun(X56,X57),happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0'))),s(X56,happ(s(fun(X57,X56),X61),s(X57,sK14(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57))))))) )),
  inference(forward_demodulation,[],[f20330,f356])).
fof(f20330,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X56,X57),X60),s(fun(X57,X56),X61)))) | s(X56,sK15(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)) != s(X56,happ(s(fun(X57,X56),X61),s(X57,happ(s(fun(X56,X57),happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0'))),s(X56,sK15(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)))))) | s(X57,sK14(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57)) != s(X57,happ(s(fun(X56,X57),happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0'))),s(X56,happ(s(fun(X57,X56),X61),s(X57,sK14(X61,happ(s(fun('type.list.list'(X58),fun(X56,X57)),sK16(X59,X60,X58,fun(X56,X57))),s('type.list.list'(X58),'const.list.NIL_0')),X56,X57))))))) )),
  inference(superposition,[],[f355,f356])).
fof(f20384,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(X51,sK14(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)) != s(X51,happ(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(X50,happ(s(fun(X51,X50),X55),s(X51,sK14(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)))))) | s(X50,sK15(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)) != s(X50,happ(s(fun(X51,X50),X55),s(X51,happ(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(X50,sK15(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(fun(X51,X50),X55))))) )),
  inference(forward_demodulation,[],[f20383,f320])).
fof(f20383,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(X50,sK15(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)) != s(X50,happ(s(fun(X51,X50),X55),s(X51,happ(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(X50,sK15(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(fun(X51,X50),X55)))) | s(X51,sK14(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)) != s(X51,happ(s(fun(X50,X51),happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54))),s(X50,happ(s(fun(X51,X50),X55),s(X51,sK14(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51))))))) )),
  inference(forward_demodulation,[],[f20329,f320])).
fof(f20329,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X51),'const.ind_type.FCONS_3'(s(fun(X50,X51),X52),s(fun('type.num.num',fun(X50,X51)),X53),s('type.num.num',X54))),s(fun(X51,X50),X55)))) | s(X50,sK15(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)) != s(X50,happ(s(fun(X51,X50),X55),s(X51,happ(s(fun(X50,X51),happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54))),s(X50,sK15(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)))))) | s(X51,sK14(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51)) != s(X51,happ(s(fun(X50,X51),happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54))),s(X50,happ(s(fun(X51,X50),X55),s(X51,sK14(X55,happ(s(fun('type.num.num',fun(X50,X51)),happ(s(fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51))),happ(s(fun(fun(X50,X51),fun(fun('type.num.num',fun(X50,X51)),fun('type.num.num',fun(X50,X51)))),'const.ind_type.FCONS_0'),s(fun(X50,X51),X52))),s(fun('type.num.num',fun(X50,X51)),X53))),s('type.num.num',X54)),X50,X51))))))) )),
  inference(superposition,[],[f355,f320])).
fof(f20328,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42,X49] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X42,X43),happ(s(fun(X45,fun(X42,X43)),X46),s(X45,happ(s(fun(X44,X45),X47),s(X44,X48))))),s(fun(X43,X42),X49)))) | s(X42,sK15(X49,happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X42,X43)) != s(X42,happ(s(fun(X43,X42),X49),s(X43,happ(s(fun(X42,X43),happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48))),s(X42,sK15(X49,happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X42,X43)))))) | s(X43,sK14(X49,happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X42,X43)) != s(X43,happ(s(fun(X42,X43),happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48))),s(X42,happ(s(fun(X43,X42),X49),s(X43,sK14(X49,happ(s(fun(X44,fun(X42,X43)),'_dst_x0x1_2'(s(fun(X45,fun(X42,X43)),X46),s(fun(X44,X45),X47))),s(X44,X48)),X42,X43))))))) )),
  inference(superposition,[],[f355,f365])).
fof(f20327,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X34,X35),happ(s(fun(X38,fun(X34,X35)),'_dst_x0x1_2'(s(fun(X36,fun(X34,X35)),X37),s(fun(X38,X36),X39))),s(X38,X40))),s(fun(X35,X34),X41)))) | s(X34,sK15(X41,happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X34,X35)) != s(X34,happ(s(fun(X35,X34),X41),s(X35,happ(s(fun(X34,X35),happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40))))),s(X34,sK15(X41,happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X34,X35)))))) | s(X35,sK14(X41,happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X34,X35)) != s(X35,happ(s(fun(X34,X35),happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40))))),s(X34,happ(s(fun(X35,X34),X41),s(X35,sK14(X41,happ(s(fun(X36,fun(X34,X35)),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))),X34,X35))))))) )),
  inference(superposition,[],[f355,f365])).
fof(f20382,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X27,sK14(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)) != s(X27,happ(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(X26,happ(s(fun(X27,X26),X33),s(X27,sK14(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)))))) | s(X26,sK15(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)) != s(X26,happ(s(fun(X27,X26),X33),s(X27,happ(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(X26,sK15(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(fun(X27,X26),X33))))) )),
  inference(forward_demodulation,[],[f20381,f357])).
fof(f20381,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X26,sK15(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)) != s(X26,happ(s(fun(X27,X26),X33),s(X27,happ(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(X26,sK15(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(fun(X27,X26),X33)))) | s(X27,sK14(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)) != s(X27,happ(s(fun(X26,X27),happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31))))),s(X26,happ(s(fun(X27,X26),X33),s(X27,sK14(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27))))))) )),
  inference(forward_demodulation,[],[f20326,f357])).
fof(f20326,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),X31))))),s(fun(X27,X26),X33)))) | s(X26,sK15(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)) != s(X26,happ(s(fun(X27,X26),X33),s(X27,happ(s(fun(X26,X27),happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31))))),s(X26,sK15(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)))))) | s(X27,sK14(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27)) != s(X27,happ(s(fun(X26,X27),happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31))))),s(X26,happ(s(fun(X27,X26),X33),s(X27,sK14(X33,happ(s(fun(fun(X26,X27),fun(X26,X27)),happ(s(fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27))),happ(s(fun(X28,fun('type.list.list'(X28),fun(fun(X26,X27),fun(X26,X27)))),X29),s(X28,X30))),s('type.list.list'(X28),X31))),s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X32,X28,fun(X26,X27))),s('type.list.list'(X28),X31)))),X26,X27))))))) )),
  inference(superposition,[],[f355,f357])).
fof(f20380,plain,(
  ( ! [X24,X23,X25,X22] : (s(X23,sK14(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)) != s(X23,happ(s(fun(X22,X23),X24),s(X22,happ(s(fun(X23,X22),X25),s(X23,sK14(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)))))) | s(X22,sK15(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)) != s(X22,happ(s(fun(X23,X22),X25),s(X23,happ(s(fun(X22,X23),X24),s(X22,sK15(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X22,X23),X24),s(fun(X23,X22),X25))))) )),
  inference(forward_demodulation,[],[f20379,f303])).
fof(f20379,plain,(
  ( ! [X24,X23,X25,X22] : (s(X22,sK15(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)) != s(X22,happ(s(fun(X23,X22),X25),s(X23,happ(s(fun(X22,X23),X24),s(X22,sK15(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X22,X23),X24),s(fun(X23,X22),X25)))) | s(X23,sK14(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)) != s(X23,happ(s(fun(X22,X23),happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24))),s(X22,happ(s(fun(X23,X22),X25),s(X23,sK14(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23))))))) )),
  inference(forward_demodulation,[],[f20325,f303])).
fof(f20325,plain,(
  ( ! [X24,X23,X25,X22] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X22,X23),X24),s(fun(X23,X22),X25)))) | s(X22,sK15(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)) != s(X22,happ(s(fun(X23,X22),X25),s(X23,happ(s(fun(X22,X23),happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24))),s(X22,sK15(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)))))) | s(X23,sK14(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23)) != s(X23,happ(s(fun(X22,X23),happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24))),s(X22,happ(s(fun(X23,X22),X25),s(X23,sK14(X25,happ(s(fun(fun(X22,X23),fun(X22,X23)),'_i_0_0'),s(fun(X22,X23),X24)),X22,X23))))))) )),
  inference(superposition,[],[f355,f303])).
fof(f20324,plain,(
  ( ! [X14,X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x00x11_2'(s(fun(X16,X15),X17),s(fun(X18,fun(X14,X16)),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | s(X14,sK15(X21,'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X14,X15)) != s(X14,happ(s(fun(X15,X14),X21),s(X15,happ(s(fun(X14,X15),'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20))))),s(X14,sK15(X21,'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X14,X15)))))) | s(X15,sK14(X21,'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X14,X15)) != s(X15,happ(s(fun(X14,X15),'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20))))),s(X14,happ(s(fun(X15,X14),X21),s(X15,sK14(X21,'_dst_x0x1_2'(s(fun(X16,X15),X17),s(fun(X14,X16),happ(s(fun(X18,fun(X14,X16)),X19),s(X18,X20)))),X14,X15))))))) )),
  inference(superposition,[],[f355,f390])).
fof(f20323,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun(X9,X7),X10),s(fun(X6,X9),happ(s(fun(X8,fun(X6,X9)),X11),s(X8,X12))))),s(fun(X7,X6),X13)))) | s(X6,sK15(X13,happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X6,X7)) != s(X6,happ(s(fun(X7,X6),X13),s(X7,happ(s(fun(X6,X7),happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12))),s(X6,sK15(X13,happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X6,X7)))))) | s(X7,sK14(X13,happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X6,X7)) != s(X7,happ(s(fun(X6,X7),happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12))),s(X6,happ(s(fun(X7,X6),X13),s(X7,sK14(X13,happ(s(fun(X8,fun(X6,X7)),'_dst_x00x11_2'(s(fun(X9,X7),X10),s(fun(X8,fun(X6,X9)),X11))),s(X8,X12)),X6,X7))))))) )),
  inference(superposition,[],[f355,f390])).
fof(f20378,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,sK14(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK14(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) | s(X0,sK15(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)) != s(X0,happ(s(fun(X1,X0),X5),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK15(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5))))) )),
  inference(forward_demodulation,[],[f20377,f364])).
fof(f20377,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,sK15(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)) != s(X0,happ(s(fun(X1,X0),X5),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK15(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5)))) | s(X1,sK14(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)) != s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK14(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))))) )),
  inference(forward_demodulation,[],[f20322,f364])).
fof(f20322,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5)))) | s(X0,sK15(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)) != s(X0,happ(s(fun(X1,X0),X5),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,sK15(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) | s(X1,sK14(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)) != s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK14(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))))) )),
  inference(superposition,[],[f355,f364])).
fof(f20321,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X149),bool),sK16(X150,'const.pair.SND_1'(s('type.pair.prod'(X146,bool),'const.pair.,_2'(s(X146,X147),s(bool,X148)))),X149,bool)))) | s(bool,'F_0') = s(bool,X148)) )),
  inference(subsumption_resolution,[],[f20204,f256])).
fof(f20204,plain,(
  ( ! [X146,X149,X147,X150,X148] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X149),bool),sK16(X150,'const.pair.SND_1'(s('type.pair.prod'(X146,bool),'const.pair.,_2'(s(X146,X147),s(bool,X148)))),X149,bool)))) | s(bool,'F_0') = s(bool,X148)) )),
  inference(superposition,[],[f3944,f673])).
fof(f20315,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X48) != s(bool,'const.pair.SND_1'(s('type.pair.prod'(X45,bool),'const.pair.,_2'(s(X45,X46),s(bool,X47))))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f20177,f256])).
fof(f20177,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X48) != s(bool,'const.pair.SND_1'(s('type.pair.prod'(X45,bool),'const.pair.,_2'(s(X45,X46),s(bool,X47))))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X47)) )),
  inference(superposition,[],[f434,f673])).
fof(f20147,plain,(
  ( ! [X280,X277,X279,X278] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X279,bool),'const.pair.,_2'(s(X279,X280),s(bool,X277))))) | s(bool,'F_0') = s(bool,sK4(X277,X278,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X278)))) )),
  inference(superposition,[],[f673,f823])).
fof(f20144,plain,(
  ( ! [X265,X267,X268,X264,X266] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X267,bool),'const.pair.,_2'(s(X267,X268),s(bool,happ(s(fun('type.num.num',bool),X265),s('type.num.num',X266))))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X264),s(fun('type.num.num',bool),X265),s('type.num.num','const.num.SUC_1'(s('type.num.num',X266)))))) )),
  inference(superposition,[],[f673,f318])).
fof(f20143,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X262,bool),'const.pair.,_2'(s(X262,X263),s(bool,X260))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X260),s(fun('type.num.num',bool),X261),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f673,f310])).
fof(f20142,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X258,bool),'const.pair.,_2'(s(X258,X259),s(bool,X256))))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X255),'const.pair.,_2'(s(bool,X256),s(X255,X257)))))) )),
  inference(superposition,[],[f673,f341])).
fof(f20141,plain,(
  ( ! [X253,X251,X254,X252,X250] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X253,bool),'const.pair.,_2'(s(X253,X254),s(bool,X252))))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X250,bool),'const.pair.,_2'(s(X250,X251),s(bool,X252)))))) )),
  inference(superposition,[],[f673,f340])).
fof(f20140,plain,(
  ( ! [X249,X246,X248,X247] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X248,bool),'const.pair.,_2'(s(X248,X249),s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X246),X247))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X246),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X246),X247)))) )),
  inference(superposition,[],[f673,f338])).
fof(f20139,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X244,bool),'const.pair.,_2'(s(X244,X245),s(bool,X243))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X241),bool),sK16(X242,X243,X241,bool)),s('type.list.list'(X241),'const.list.NIL_0')))) )),
  inference(superposition,[],[f673,f356])).
fof(f20138,plain,(
  ( ! [X239,X237,X240,X238,X236] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X239,bool),'const.pair.,_2'(s(X239,X240),s(bool,'const.ind_type.FCONS_3'(s(bool,X236),s(fun('type.num.num',bool),X237),s('type.num.num',X238))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X236))),s(fun('type.num.num',bool),X237))),s('type.num.num',X238)))) )),
  inference(superposition,[],[f673,f320])).
fof(f20137,plain,(
  ( ! [X231,X229,X235,X233,X230,X234,X232] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X234,bool),'const.pair.,_2'(s(X234,X235),s(bool,happ(s(fun(X230,bool),X231),s(X230,happ(s(fun(X229,X230),X232),s(X229,X233))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X229,bool),'_dst_x0x1_2'(s(fun(X230,bool),X231),s(fun(X229,X230),X232))),s(X229,X233)))) )),
  inference(superposition,[],[f673,f365])).
fof(f20136,plain,(
  ( ! [X222,X227,X225,X223,X228,X226,X224] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X227,bool),'const.pair.,_2'(s(X227,X228),s(bool,happ(s(fun(X224,bool),'_dst_x0x1_2'(s(fun(X222,bool),X223),s(fun(X224,X222),X225))),s(X224,X226))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X222,bool),X223),s(X222,happ(s(fun(X224,X222),X225),s(X224,X226)))))) )),
  inference(superposition,[],[f673,f365])).
fof(f20135,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X220,bool),'const.pair.,_2'(s(X220,X221),s(bool,happ(s(fun('type.list.list'(X215),bool),sK16(X216,X219,X215,bool)),s('type.list.list'(X215),'const.list.CONS_2'(s(X215,X217),s('type.list.list'(X215),X218))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X215),fun(bool,bool)),happ(s(fun(X215,fun('type.list.list'(X215),fun(bool,bool))),X216),s(X215,X217))),s('type.list.list'(X215),X218))),s(bool,happ(s(fun('type.list.list'(X215),bool),sK16(X216,X219,X215,bool)),s('type.list.list'(X215),X218)))))) )),
  inference(superposition,[],[f673,f357])).
fof(f20027,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,'const.pair.SND_1'(s('type.pair.prod'(bool,bool),'const.pair.,_2'(s(bool,X121),s(bool,X122))))) | s(bool,'F_0') = s(bool,X122) | s(bool,X121) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f673,f432])).
fof(f19992,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X105),bool),sK16(X106,'const.ind_type.FCONS_3'(s(bool,X103),s(fun('type.num.num',bool),X104),s('type.num.num','const.num.|48|_0')),X105,bool)))) | s(bool,'F_0') = s(bool,X103)) )),
  inference(subsumption_resolution,[],[f19907,f256])).
fof(f19907,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X105),bool),sK16(X106,'const.ind_type.FCONS_3'(s(bool,X103),s(fun('type.num.num',bool),X104),s('type.num.num','const.num.|48|_0')),X105,bool)))) | s(bool,'F_0') = s(bool,X103)) )),
  inference(superposition,[],[f3944,f620])).
fof(f19986,plain,(
  ( ! [X33,X34,X32] : (s(bool,X34) != s(bool,'const.ind_type.FCONS_3'(s(bool,X32),s(fun('type.num.num',bool),X33),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f19881,f256])).
fof(f19881,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X34) != s(bool,'const.ind_type.FCONS_3'(s(bool,X32),s(fun('type.num.num',bool),X33),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X32)) )),
  inference(superposition,[],[f434,f620])).
fof(f19834,plain,(
  ( ! [X204,X202,X203] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X202),s(fun('type.num.num',bool),X204),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,sK4(X202,X203,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X203)))) )),
  inference(superposition,[],[f620,f823])).
fof(f19831,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.num.num',bool),X193),s('type.num.num',X194))),s(fun('type.num.num',bool),X195),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X192),s(fun('type.num.num',bool),X193),s('type.num.num','const.num.SUC_1'(s('type.num.num',X194)))))) )),
  inference(superposition,[],[f620,f318])).
fof(f19830,plain,(
  ( ! [X191,X189,X190] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X189),s(fun('type.num.num',bool),X191),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X189),s(fun('type.num.num',bool),X190),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f620,f310])).
fof(f19829,plain,(
  ( ! [X187,X185,X188,X186] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X186),s(fun('type.num.num',bool),X188),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X185),'const.pair.,_2'(s(bool,X186),s(X185,X187)))))) )),
  inference(superposition,[],[f620,f341])).
fof(f19828,plain,(
  ( ! [X182,X184,X183,X181] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X183),s(fun('type.num.num',bool),X184),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X181,bool),'const.pair.,_2'(s(X181,X182),s(bool,X183)))))) )),
  inference(superposition,[],[f620,f340])).
fof(f19827,plain,(
  ( ! [X180,X178,X179] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X178),X179))),s(fun('type.num.num',bool),X180),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X178),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X178),X179)))) )),
  inference(superposition,[],[f620,f338])).
fof(f19826,plain,(
  ( ! [X177,X175,X176,X174] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X176),s(fun('type.num.num',bool),X177),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X174),bool),sK16(X175,X176,X174,bool)),s('type.list.list'(X174),'const.list.NIL_0')))) )),
  inference(superposition,[],[f620,f356])).
fof(f19825,plain,(
  ( ! [X173,X171,X172,X170] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,'const.ind_type.FCONS_3'(s(bool,X170),s(fun('type.num.num',bool),X171),s('type.num.num',X172))),s(fun('type.num.num',bool),X173),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X170))),s(fun('type.num.num',bool),X171))),s('type.num.num',X172)))) )),
  inference(superposition,[],[f620,f320])).
fof(f19824,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X165,bool),X166),s(X165,happ(s(fun(X164,X165),X167),s(X164,X168))))),s(fun('type.num.num',bool),X169),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X164,bool),'_dst_x0x1_2'(s(fun(X165,bool),X166),s(fun(X164,X165),X167))),s(X164,X168)))) )),
  inference(superposition,[],[f620,f365])).
fof(f19823,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X160,bool),'_dst_x0x1_2'(s(fun(X158,bool),X159),s(fun(X160,X158),X161))),s(X160,X162))),s(fun('type.num.num',bool),X163),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X158,bool),X159),s(X158,happ(s(fun(X160,X158),X161),s(X160,X162)))))) )),
  inference(superposition,[],[f620,f365])).
fof(f19822,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.list.list'(X152),bool),sK16(X153,X156,X152,bool)),s('type.list.list'(X152),'const.list.CONS_2'(s(X152,X154),s('type.list.list'(X152),X155))))),s(fun('type.num.num',bool),X157),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X152),fun(bool,bool)),happ(s(fun(X152,fun('type.list.list'(X152),fun(bool,bool))),X153),s(X152,X154))),s('type.list.list'(X152),X155))),s(bool,happ(s(fun('type.list.list'(X152),bool),sK16(X153,X156,X152,bool)),s('type.list.list'(X152),X155)))))) )),
  inference(superposition,[],[f620,f357])).
fof(f19659,plain,(
  ( ! [X938,X936,X934,X939,X937,X935] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X939))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.list.list'(X934),'type.integer.int'),sK16(X935,X938,X934,'type.integer.int')),s('type.list.list'(X934),'const.list.CONS_2'(s(X934,X936),s('type.list.list'(X934),X937))))))) | s('type.integer.int',X939) = s('type.integer.int',happ(s(fun('type.integer.int','type.integer.int'),happ(s(fun('type.list.list'(X934),fun('type.integer.int','type.integer.int')),happ(s(fun(X934,fun('type.list.list'(X934),fun('type.integer.int','type.integer.int'))),X935),s(X934,X936))),s('type.list.list'(X934),X937))),s('type.integer.int',happ(s(fun('type.list.list'(X934),'type.integer.int'),sK16(X935,X938,X934,'type.integer.int')),s('type.list.list'(X934),X937)))))) )),
  inference(superposition,[],[f332,f357])).
fof(f19648,plain,(
  ( ! [X866,X870,X868,X867,X865,X869] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X870))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.list.list'(X865),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),sK16(X866,X869,X865,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),s('type.list.list'(X865),'const.list.CONS_2'(s(X865,X867),s('type.list.list'(X865),X868))))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X870) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),happ(s(fun('type.list.list'(X865),fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),happ(s(fun(X865,fun('type.list.list'(X865),fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))),X866),s(X865,X867))),s('type.list.list'(X865),X868))),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.list.list'(X865),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),sK16(X866,X869,X865,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),s('type.list.list'(X865),X868)))))) )),
  inference(superposition,[],[f334,f357])).
fof(f19754,plain,(
  ( ! [X753,X755,X749,X751,X756,X752,X754,X750] : (s(fun(X749,X750),X756) = s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),'const.list.CONS_2'(s(X751,X753),s('type.list.list'(X751),X754))))) | s(X750,happ(s(fun(X749,X750),X756),s(X749,sK13(happ(s(fun(fun(X749,X750),fun(X749,X750)),happ(s(fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750))),happ(s(fun(X751,fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750)))),X752),s(X751,X753))),s('type.list.list'(X751),X754))),s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),X754)))),X756,X749,X750)))) != s(X750,happ(s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),'const.list.CONS_2'(s(X751,X753),s('type.list.list'(X751),X754))))),s(X749,sK13(happ(s(fun(fun(X749,X750),fun(X749,X750)),happ(s(fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750))),happ(s(fun(X751,fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750)))),X752),s(X751,X753))),s('type.list.list'(X751),X754))),s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),X754)))),X756,X749,X750))))) )),
  inference(forward_demodulation,[],[f19635,f357])).
fof(f19635,plain,(
  ( ! [X753,X755,X749,X751,X756,X752,X754,X750] : (s(X750,happ(s(fun(X749,X750),X756),s(X749,sK13(happ(s(fun(fun(X749,X750),fun(X749,X750)),happ(s(fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750))),happ(s(fun(X751,fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750)))),X752),s(X751,X753))),s('type.list.list'(X751),X754))),s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),X754)))),X756,X749,X750)))) != s(X750,happ(s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),'const.list.CONS_2'(s(X751,X753),s('type.list.list'(X751),X754))))),s(X749,sK13(happ(s(fun(fun(X749,X750),fun(X749,X750)),happ(s(fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750))),happ(s(fun(X751,fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750)))),X752),s(X751,X753))),s('type.list.list'(X751),X754))),s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),X754)))),X756,X749,X750)))) | s(fun(X749,X750),X756) = s(fun(X749,X750),happ(s(fun(fun(X749,X750),fun(X749,X750)),happ(s(fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750))),happ(s(fun(X751,fun('type.list.list'(X751),fun(fun(X749,X750),fun(X749,X750)))),X752),s(X751,X753))),s('type.list.list'(X751),X754))),s(fun(X749,X750),happ(s(fun('type.list.list'(X751),fun(X749,X750)),sK16(X752,X755,X751,fun(X749,X750))),s('type.list.list'(X751),X754)))))) )),
  inference(superposition,[],[f352,f357])).
fof(f19753,plain,(
  ( ! [X745,X747,X741,X743,X748,X744,X746,X742] : (s(fun(X741,X742),X748) = s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),'const.list.CONS_2'(s(X743,X745),s('type.list.list'(X743),X746))))) | s(X742,happ(s(fun(X741,X742),X748),s(X741,sK13(X748,happ(s(fun(fun(X741,X742),fun(X741,X742)),happ(s(fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742))),happ(s(fun(X743,fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742)))),X744),s(X743,X745))),s('type.list.list'(X743),X746))),s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),X746)))),X741,X742)))) != s(X742,happ(s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),'const.list.CONS_2'(s(X743,X745),s('type.list.list'(X743),X746))))),s(X741,sK13(X748,happ(s(fun(fun(X741,X742),fun(X741,X742)),happ(s(fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742))),happ(s(fun(X743,fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742)))),X744),s(X743,X745))),s('type.list.list'(X743),X746))),s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),X746)))),X741,X742))))) )),
  inference(forward_demodulation,[],[f19634,f357])).
fof(f19634,plain,(
  ( ! [X745,X747,X741,X743,X748,X744,X746,X742] : (s(X742,happ(s(fun(X741,X742),X748),s(X741,sK13(X748,happ(s(fun(fun(X741,X742),fun(X741,X742)),happ(s(fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742))),happ(s(fun(X743,fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742)))),X744),s(X743,X745))),s('type.list.list'(X743),X746))),s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),X746)))),X741,X742)))) != s(X742,happ(s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),'const.list.CONS_2'(s(X743,X745),s('type.list.list'(X743),X746))))),s(X741,sK13(X748,happ(s(fun(fun(X741,X742),fun(X741,X742)),happ(s(fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742))),happ(s(fun(X743,fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742)))),X744),s(X743,X745))),s('type.list.list'(X743),X746))),s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),X746)))),X741,X742)))) | s(fun(X741,X742),X748) = s(fun(X741,X742),happ(s(fun(fun(X741,X742),fun(X741,X742)),happ(s(fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742))),happ(s(fun(X743,fun('type.list.list'(X743),fun(fun(X741,X742),fun(X741,X742)))),X744),s(X743,X745))),s('type.list.list'(X743),X746))),s(fun(X741,X742),happ(s(fun('type.list.list'(X743),fun(X741,X742)),sK16(X744,X747,X743,fun(X741,X742))),s('type.list.list'(X743),X746)))))) )),
  inference(superposition,[],[f352,f357])).
fof(f19627,plain,(
  ( ! [X681,X677,X679,X673,X675,X680,X682,X676,X678,X674] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X673,X674),happ(s(fun('type.list.list'(X675),fun(X673,X674)),sK16(X676,X679,X675,fun(X673,X674))),s('type.list.list'(X675),'const.list.CONS_2'(s(X675,X677),s('type.list.list'(X675),X678))))),s(fun(X674,X673),X680)))) | ~p(s(bool,happ(s(fun(X673,bool),X681),s(X673,happ(s(fun(X674,X673),X680),s(X674,X682)))))) | p(s(bool,happ(s(fun(X673,bool),X681),s(X673,sK11(X681,happ(s(fun(fun(X673,X674),fun(X673,X674)),happ(s(fun('type.list.list'(X675),fun(fun(X673,X674),fun(X673,X674))),happ(s(fun(X675,fun('type.list.list'(X675),fun(fun(X673,X674),fun(X673,X674)))),X676),s(X675,X677))),s('type.list.list'(X675),X678))),s(fun(X673,X674),happ(s(fun('type.list.list'(X675),fun(X673,X674)),sK16(X676,X679,X675,fun(X673,X674))),s('type.list.list'(X675),X678)))),X680,X674,X673)))))) )),
  inference(superposition,[],[f347,f357])).
fof(f19746,plain,(
  ( ! [X666,X668,X670,X664,X667,X669,X671,X663,X665,X672] : (~p(s(bool,happ(s(fun(X664,bool),X671),s(X664,happ(s(fun(X663,X664),happ(s(fun('type.list.list'(X665),fun(X663,X664)),sK16(X666,X669,X665,fun(X663,X664))),s('type.list.list'(X665),'const.list.CONS_2'(s(X665,X667),s('type.list.list'(X665),X668))))),s(X663,X672)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X664,X663),X670),s(fun(X663,X664),happ(s(fun('type.list.list'(X665),fun(X663,X664)),sK16(X666,X669,X665,fun(X663,X664))),s('type.list.list'(X665),'const.list.CONS_2'(s(X665,X667),s('type.list.list'(X665),X668)))))))) | p(s(bool,happ(s(fun(X664,bool),X671),s(X664,sK11(X671,X670,happ(s(fun(fun(X663,X664),fun(X663,X664)),happ(s(fun('type.list.list'(X665),fun(fun(X663,X664),fun(X663,X664))),happ(s(fun(X665,fun('type.list.list'(X665),fun(fun(X663,X664),fun(X663,X664)))),X666),s(X665,X667))),s('type.list.list'(X665),X668))),s(fun(X663,X664),happ(s(fun('type.list.list'(X665),fun(X663,X664)),sK16(X666,X669,X665,fun(X663,X664))),s('type.list.list'(X665),X668)))),X663,X664)))))) )),
  inference(forward_demodulation,[],[f19626,f357])).
fof(f19626,plain,(
  ( ! [X666,X668,X670,X664,X667,X669,X663,X665,X671,X672] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X664,X663),X670),s(fun(X663,X664),happ(s(fun('type.list.list'(X665),fun(X663,X664)),sK16(X666,X669,X665,fun(X663,X664))),s('type.list.list'(X665),'const.list.CONS_2'(s(X665,X667),s('type.list.list'(X665),X668)))))))) | ~p(s(bool,happ(s(fun(X664,bool),X671),s(X664,happ(s(fun(X663,X664),happ(s(fun(fun(X663,X664),fun(X663,X664)),happ(s(fun('type.list.list'(X665),fun(fun(X663,X664),fun(X663,X664))),happ(s(fun(X665,fun('type.list.list'(X665),fun(fun(X663,X664),fun(X663,X664)))),X666),s(X665,X667))),s('type.list.list'(X665),X668))),s(fun(X663,X664),happ(s(fun('type.list.list'(X665),fun(X663,X664)),sK16(X666,X669,X665,fun(X663,X664))),s('type.list.list'(X665),X668))))),s(X663,X672)))))) | p(s(bool,happ(s(fun(X664,bool),X671),s(X664,sK11(X671,X670,happ(s(fun(fun(X663,X664),fun(X663,X664)),happ(s(fun('type.list.list'(X665),fun(fun(X663,X664),fun(X663,X664))),happ(s(fun(X665,fun('type.list.list'(X665),fun(fun(X663,X664),fun(X663,X664)))),X666),s(X665,X667))),s('type.list.list'(X665),X668))),s(fun(X663,X664),happ(s(fun('type.list.list'(X665),fun(X663,X664)),sK16(X666,X669,X665,fun(X663,X664))),s('type.list.list'(X665),X668)))),X663,X664)))))) )),
  inference(superposition,[],[f347,f357])).
fof(f19625,plain,(
  ( ! [X660,X662,X656,X658,X654,X661,X657,X659,X653,X655] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X653,X654),happ(s(fun('type.list.list'(X655),fun(X653,X654)),sK16(X656,X659,X655,fun(X653,X654))),s('type.list.list'(X655),'const.list.CONS_2'(s(X655,X657),s('type.list.list'(X655),X658))))),s(fun(X654,X653),X660)))) | ~p(s(bool,happ(s(fun(X653,bool),X661),s(X653,X662)))) | p(s(bool,happ(s(fun(X653,bool),X661),s(X653,happ(s(fun(X654,X653),X660),s(X654,sK10(X661,happ(s(fun(fun(X653,X654),fun(X653,X654)),happ(s(fun('type.list.list'(X655),fun(fun(X653,X654),fun(X653,X654))),happ(s(fun(X655,fun('type.list.list'(X655),fun(fun(X653,X654),fun(X653,X654)))),X656),s(X655,X657))),s('type.list.list'(X655),X658))),s(fun(X653,X654),happ(s(fun('type.list.list'(X655),fun(X653,X654)),sK16(X656,X659,X655,fun(X653,X654))),s('type.list.list'(X655),X658)))),X660,X654,X653)))))))) )),
  inference(superposition,[],[f346,f357])).
fof(f19745,plain,(
  ( ! [X652,X648,X650,X644,X646,X649,X651,X645,X647,X643] : (p(s(bool,happ(s(fun(X644,bool),X651),s(X644,happ(s(fun(X643,X644),happ(s(fun('type.list.list'(X645),fun(X643,X644)),sK16(X646,X649,X645,fun(X643,X644))),s('type.list.list'(X645),'const.list.CONS_2'(s(X645,X647),s('type.list.list'(X645),X648))))),s(X643,sK10(X651,X650,happ(s(fun(fun(X643,X644),fun(X643,X644)),happ(s(fun('type.list.list'(X645),fun(fun(X643,X644),fun(X643,X644))),happ(s(fun(X645,fun('type.list.list'(X645),fun(fun(X643,X644),fun(X643,X644)))),X646),s(X645,X647))),s('type.list.list'(X645),X648))),s(fun(X643,X644),happ(s(fun('type.list.list'(X645),fun(X643,X644)),sK16(X646,X649,X645,fun(X643,X644))),s('type.list.list'(X645),X648)))),X643,X644))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X644,X643),X650),s(fun(X643,X644),happ(s(fun('type.list.list'(X645),fun(X643,X644)),sK16(X646,X649,X645,fun(X643,X644))),s('type.list.list'(X645),'const.list.CONS_2'(s(X645,X647),s('type.list.list'(X645),X648)))))))) | ~p(s(bool,happ(s(fun(X644,bool),X651),s(X644,X652))))) )),
  inference(forward_demodulation,[],[f19624,f357])).
fof(f19624,plain,(
  ( ! [X652,X648,X650,X644,X646,X649,X651,X645,X647,X643] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X644,X643),X650),s(fun(X643,X644),happ(s(fun('type.list.list'(X645),fun(X643,X644)),sK16(X646,X649,X645,fun(X643,X644))),s('type.list.list'(X645),'const.list.CONS_2'(s(X645,X647),s('type.list.list'(X645),X648)))))))) | ~p(s(bool,happ(s(fun(X644,bool),X651),s(X644,X652)))) | p(s(bool,happ(s(fun(X644,bool),X651),s(X644,happ(s(fun(X643,X644),happ(s(fun(fun(X643,X644),fun(X643,X644)),happ(s(fun('type.list.list'(X645),fun(fun(X643,X644),fun(X643,X644))),happ(s(fun(X645,fun('type.list.list'(X645),fun(fun(X643,X644),fun(X643,X644)))),X646),s(X645,X647))),s('type.list.list'(X645),X648))),s(fun(X643,X644),happ(s(fun('type.list.list'(X645),fun(X643,X644)),sK16(X646,X649,X645,fun(X643,X644))),s('type.list.list'(X645),X648))))),s(X643,sK10(X651,X650,happ(s(fun(fun(X643,X644),fun(X643,X644)),happ(s(fun('type.list.list'(X645),fun(fun(X643,X644),fun(X643,X644))),happ(s(fun(X645,fun('type.list.list'(X645),fun(fun(X643,X644),fun(X643,X644)))),X646),s(X645,X647))),s('type.list.list'(X645),X648))),s(fun(X643,X644),happ(s(fun('type.list.list'(X645),fun(X643,X644)),sK16(X646,X649,X645,fun(X643,X644))),s('type.list.list'(X645),X648)))),X643,X644)))))))) )),
  inference(superposition,[],[f346,f357])).
fof(f19623,plain,(
  ( ! [X639,X633,X635,X640,X642,X636,X638,X634,X641,X637] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X633,X634),happ(s(fun('type.list.list'(X635),fun(X633,X634)),sK16(X636,X639,X635,fun(X633,X634))),s('type.list.list'(X635),'const.list.CONS_2'(s(X635,X637),s('type.list.list'(X635),X638))))),s(fun(X634,X633),X640)))) | ~p(s(bool,happ(s(fun(X633,bool),X641),s(X633,happ(s(fun(X634,X633),X640),s(X634,sK9(X641,happ(s(fun(fun(X633,X634),fun(X633,X634)),happ(s(fun('type.list.list'(X635),fun(fun(X633,X634),fun(X633,X634))),happ(s(fun(X635,fun('type.list.list'(X635),fun(fun(X633,X634),fun(X633,X634)))),X636),s(X635,X637))),s('type.list.list'(X635),X638))),s(fun(X633,X634),happ(s(fun('type.list.list'(X635),fun(X633,X634)),sK16(X636,X639,X635,fun(X633,X634))),s('type.list.list'(X635),X638)))),X640,X634,X633))))))) | p(s(bool,happ(s(fun(X633,bool),X641),s(X633,X642))))) )),
  inference(superposition,[],[f345,f357])).
fof(f19744,plain,(
  ( ! [X629,X631,X625,X627,X623,X632,X628,X630,X624,X626] : (~p(s(bool,happ(s(fun(X624,bool),X631),s(X624,happ(s(fun(X623,X624),happ(s(fun('type.list.list'(X625),fun(X623,X624)),sK16(X626,X629,X625,fun(X623,X624))),s('type.list.list'(X625),'const.list.CONS_2'(s(X625,X627),s('type.list.list'(X625),X628))))),s(X623,sK9(X631,X630,happ(s(fun(fun(X623,X624),fun(X623,X624)),happ(s(fun('type.list.list'(X625),fun(fun(X623,X624),fun(X623,X624))),happ(s(fun(X625,fun('type.list.list'(X625),fun(fun(X623,X624),fun(X623,X624)))),X626),s(X625,X627))),s('type.list.list'(X625),X628))),s(fun(X623,X624),happ(s(fun('type.list.list'(X625),fun(X623,X624)),sK16(X626,X629,X625,fun(X623,X624))),s('type.list.list'(X625),X628)))),X623,X624))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X624,X623),X630),s(fun(X623,X624),happ(s(fun('type.list.list'(X625),fun(X623,X624)),sK16(X626,X629,X625,fun(X623,X624))),s('type.list.list'(X625),'const.list.CONS_2'(s(X625,X627),s('type.list.list'(X625),X628)))))))) | p(s(bool,happ(s(fun(X624,bool),X631),s(X624,X632))))) )),
  inference(forward_demodulation,[],[f19622,f357])).
fof(f19622,plain,(
  ( ! [X629,X631,X625,X627,X623,X632,X628,X630,X624,X626] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X624,X623),X630),s(fun(X623,X624),happ(s(fun('type.list.list'(X625),fun(X623,X624)),sK16(X626,X629,X625,fun(X623,X624))),s('type.list.list'(X625),'const.list.CONS_2'(s(X625,X627),s('type.list.list'(X625),X628)))))))) | ~p(s(bool,happ(s(fun(X624,bool),X631),s(X624,happ(s(fun(X623,X624),happ(s(fun(fun(X623,X624),fun(X623,X624)),happ(s(fun('type.list.list'(X625),fun(fun(X623,X624),fun(X623,X624))),happ(s(fun(X625,fun('type.list.list'(X625),fun(fun(X623,X624),fun(X623,X624)))),X626),s(X625,X627))),s('type.list.list'(X625),X628))),s(fun(X623,X624),happ(s(fun('type.list.list'(X625),fun(X623,X624)),sK16(X626,X629,X625,fun(X623,X624))),s('type.list.list'(X625),X628))))),s(X623,sK9(X631,X630,happ(s(fun(fun(X623,X624),fun(X623,X624)),happ(s(fun('type.list.list'(X625),fun(fun(X623,X624),fun(X623,X624))),happ(s(fun(X625,fun('type.list.list'(X625),fun(fun(X623,X624),fun(X623,X624)))),X626),s(X625,X627))),s('type.list.list'(X625),X628))),s(fun(X623,X624),happ(s(fun('type.list.list'(X625),fun(X623,X624)),sK16(X626,X629,X625,fun(X623,X624))),s('type.list.list'(X625),X628)))),X623,X624))))))) | p(s(bool,happ(s(fun(X624,bool),X631),s(X624,X632))))) )),
  inference(superposition,[],[f345,f357])).
fof(f19621,plain,(
  ( ! [X621,X617,X619,X613,X615,X620,X622,X616,X618,X614] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X613,X614),happ(s(fun('type.list.list'(X615),fun(X613,X614)),sK16(X616,X619,X615,fun(X613,X614))),s('type.list.list'(X615),'const.list.CONS_2'(s(X615,X617),s('type.list.list'(X615),X618))))),s(fun(X614,X613),X620)))) | ~p(s(bool,happ(s(fun(X613,bool),X621),s(X613,sK8(X621,happ(s(fun(fun(X613,X614),fun(X613,X614)),happ(s(fun('type.list.list'(X615),fun(fun(X613,X614),fun(X613,X614))),happ(s(fun(X615,fun('type.list.list'(X615),fun(fun(X613,X614),fun(X613,X614)))),X616),s(X615,X617))),s('type.list.list'(X615),X618))),s(fun(X613,X614),happ(s(fun('type.list.list'(X615),fun(X613,X614)),sK16(X616,X619,X615,fun(X613,X614))),s('type.list.list'(X615),X618)))),X620,X614,X613))))) | p(s(bool,happ(s(fun(X613,bool),X621),s(X613,happ(s(fun(X614,X613),X620),s(X614,X622))))))) )),
  inference(superposition,[],[f344,f357])).
fof(f19743,plain,(
  ( ! [X606,X610,X609,X611,X605,X607,X603,X612,X608,X604] : (p(s(bool,happ(s(fun(X604,bool),X611),s(X604,happ(s(fun(X603,X604),happ(s(fun('type.list.list'(X605),fun(X603,X604)),sK16(X606,X609,X605,fun(X603,X604))),s('type.list.list'(X605),'const.list.CONS_2'(s(X605,X607),s('type.list.list'(X605),X608))))),s(X603,X612)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X604,X603),X610),s(fun(X603,X604),happ(s(fun('type.list.list'(X605),fun(X603,X604)),sK16(X606,X609,X605,fun(X603,X604))),s('type.list.list'(X605),'const.list.CONS_2'(s(X605,X607),s('type.list.list'(X605),X608)))))))) | ~p(s(bool,happ(s(fun(X604,bool),X611),s(X604,sK8(X611,X610,happ(s(fun(fun(X603,X604),fun(X603,X604)),happ(s(fun('type.list.list'(X605),fun(fun(X603,X604),fun(X603,X604))),happ(s(fun(X605,fun('type.list.list'(X605),fun(fun(X603,X604),fun(X603,X604)))),X606),s(X605,X607))),s('type.list.list'(X605),X608))),s(fun(X603,X604),happ(s(fun('type.list.list'(X605),fun(X603,X604)),sK16(X606,X609,X605,fun(X603,X604))),s('type.list.list'(X605),X608)))),X603,X604)))))) )),
  inference(forward_demodulation,[],[f19620,f357])).
fof(f19620,plain,(
  ( ! [X610,X606,X609,X605,X607,X611,X603,X612,X608,X604] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X604,X603),X610),s(fun(X603,X604),happ(s(fun('type.list.list'(X605),fun(X603,X604)),sK16(X606,X609,X605,fun(X603,X604))),s('type.list.list'(X605),'const.list.CONS_2'(s(X605,X607),s('type.list.list'(X605),X608)))))))) | ~p(s(bool,happ(s(fun(X604,bool),X611),s(X604,sK8(X611,X610,happ(s(fun(fun(X603,X604),fun(X603,X604)),happ(s(fun('type.list.list'(X605),fun(fun(X603,X604),fun(X603,X604))),happ(s(fun(X605,fun('type.list.list'(X605),fun(fun(X603,X604),fun(X603,X604)))),X606),s(X605,X607))),s('type.list.list'(X605),X608))),s(fun(X603,X604),happ(s(fun('type.list.list'(X605),fun(X603,X604)),sK16(X606,X609,X605,fun(X603,X604))),s('type.list.list'(X605),X608)))),X603,X604))))) | p(s(bool,happ(s(fun(X604,bool),X611),s(X604,happ(s(fun(X603,X604),happ(s(fun(fun(X603,X604),fun(X603,X604)),happ(s(fun('type.list.list'(X605),fun(fun(X603,X604),fun(X603,X604))),happ(s(fun(X605,fun('type.list.list'(X605),fun(fun(X603,X604),fun(X603,X604)))),X606),s(X605,X607))),s('type.list.list'(X605),X608))),s(fun(X603,X604),happ(s(fun('type.list.list'(X605),fun(X603,X604)),sK16(X606,X609,X605,fun(X603,X604))),s('type.list.list'(X605),X608))))),s(X603,X612))))))) )),
  inference(superposition,[],[f344,f357])).
fof(f19742,plain,(
  ( ! [X600,X602,X598,X601,X597,X599] : (~p(s(bool,happ(s(fun('type.list.list'(X597),bool),happ(s(fun('type.list.list'(X598),fun('type.list.list'(X597),bool)),sK16(X599,X602,X598,fun('type.list.list'(X597),bool))),s('type.list.list'(X598),'const.list.CONS_2'(s(X598,X600),s('type.list.list'(X598),X601))))),s('type.list.list'(X597),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X597),bool),happ(s(fun('type.list.list'(X598),fun('type.list.list'(X597),bool)),sK16(X599,X602,X598,fun('type.list.list'(X597),bool))),s('type.list.list'(X598),'const.list.CONS_2'(s(X598,X600),s('type.list.list'(X598),X601))))),s('type.list.list'(X597),sK2(happ(s(fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool)),happ(s(fun('type.list.list'(X598),fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool))),happ(s(fun(X598,fun('type.list.list'(X598),fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool)))),X599),s(X598,X600))),s('type.list.list'(X598),X601))),s(fun('type.list.list'(X597),bool),happ(s(fun('type.list.list'(X598),fun('type.list.list'(X597),bool)),sK16(X599,X602,X598,fun('type.list.list'(X597),bool))),s('type.list.list'(X598),X601)))),X597)))))) )),
  inference(forward_demodulation,[],[f19619,f357])).
fof(f19619,plain,(
  ( ! [X600,X602,X598,X601,X597,X599] : (p(s(bool,happ(s(fun('type.list.list'(X597),bool),happ(s(fun('type.list.list'(X598),fun('type.list.list'(X597),bool)),sK16(X599,X602,X598,fun('type.list.list'(X597),bool))),s('type.list.list'(X598),'const.list.CONS_2'(s(X598,X600),s('type.list.list'(X598),X601))))),s('type.list.list'(X597),sK2(happ(s(fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool)),happ(s(fun('type.list.list'(X598),fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool))),happ(s(fun(X598,fun('type.list.list'(X598),fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool)))),X599),s(X598,X600))),s('type.list.list'(X598),X601))),s(fun('type.list.list'(X597),bool),happ(s(fun('type.list.list'(X598),fun('type.list.list'(X597),bool)),sK16(X599,X602,X598,fun('type.list.list'(X597),bool))),s('type.list.list'(X598),X601)))),X597))))) | ~p(s(bool,happ(s(fun('type.list.list'(X597),bool),happ(s(fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool)),happ(s(fun('type.list.list'(X598),fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool))),happ(s(fun(X598,fun('type.list.list'(X598),fun(fun('type.list.list'(X597),bool),fun('type.list.list'(X597),bool)))),X599),s(X598,X600))),s('type.list.list'(X598),X601))),s(fun('type.list.list'(X597),bool),happ(s(fun('type.list.list'(X598),fun('type.list.list'(X597),bool)),sK16(X599,X602,X598,fun('type.list.list'(X597),bool))),s('type.list.list'(X598),X601))))),s('type.list.list'(X597),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f357])).
fof(f19741,plain,(
  ( ! [X596,X592,X594,X590,X593,X595,X591] : (p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),'const.list.CONS_2'(s(X591,X593),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),X596)))) | ~p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),'const.list.CONS_2'(s(X591,X593),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),'const.list.CONS_2'(s(X590,sK3(happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594)))),X590)),s('type.list.list'(X590),sK2(happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594)))),X590))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),'const.list.CONS_2'(s(X591,X593),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f19740,f357])).
fof(f19740,plain,(
  ( ! [X596,X592,X594,X590,X593,X595,X591] : (~p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),'const.list.CONS_2'(s(X591,X593),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),'const.list.CONS_2'(s(X590,sK3(happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594)))),X590)),s('type.list.list'(X590),sK2(happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594)))),X590))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),'const.list.CONS_2'(s(X591,X593),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),X596))))) )),
  inference(forward_demodulation,[],[f19618,f357])).
fof(f19618,plain,(
  ( ! [X596,X592,X594,X590,X593,X595,X591] : (~p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),'const.list.CONS_2'(s(X591,X593),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),'const.list.CONS_2'(s(X590,sK3(happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594)))),X590)),s('type.list.list'(X590),sK2(happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594)))),X590))))))) | p(s(bool,happ(s(fun('type.list.list'(X590),bool),happ(s(fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)),happ(s(fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool))),happ(s(fun(X591,fun('type.list.list'(X591),fun(fun('type.list.list'(X590),bool),fun('type.list.list'(X590),bool)))),X592),s(X591,X593))),s('type.list.list'(X591),X594))),s(fun('type.list.list'(X590),bool),happ(s(fun('type.list.list'(X591),fun('type.list.list'(X590),bool)),sK16(X592,X595,X591,fun('type.list.list'(X590),bool))),s('type.list.list'(X591),X594))))),s('type.list.list'(X590),X596))))) )),
  inference(superposition,[],[f305,f357])).
fof(f19615,plain,(
  ( ! [X573,X575,X569,X571,X572,X574,X570] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X569,bool),happ(s(fun('type.list.list'(X570),fun(X569,bool)),sK16(X571,X574,X570,fun(X569,bool))),s('type.list.list'(X570),'const.list.CONS_2'(s(X570,X572),s('type.list.list'(X570),X573))))))) | s(X569,X575) = s(X569,sK4(X575,happ(s(fun(fun(X569,bool),fun(X569,bool)),happ(s(fun('type.list.list'(X570),fun(fun(X569,bool),fun(X569,bool))),happ(s(fun(X570,fun('type.list.list'(X570),fun(fun(X569,bool),fun(X569,bool)))),X571),s(X570,X572))),s('type.list.list'(X570),X573))),s(fun(X569,bool),happ(s(fun('type.list.list'(X570),fun(X569,bool)),sK16(X571,X574,X570,fun(X569,bool))),s('type.list.list'(X570),X573)))),X569))) )),
  inference(superposition,[],[f823,f357])).
fof(f19737,plain,(
  ( ! [X565,X567,X561,X563,X568,X564,X566,X562] : (p(s(bool,happ(s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),'const.list.CONS_2'(s(X562,X564),s('type.list.list'(X562),X565))))),s(X561,sK6(X567,happ(s(fun(fun(X561,bool),fun(X561,bool)),happ(s(fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool))),happ(s(fun(X562,fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool)))),X563),s(X562,X564))),s('type.list.list'(X562),X565))),s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),X565)))),X561))))) | ~p(s(bool,happ(s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),'const.list.CONS_2'(s(X562,X564),s('type.list.list'(X562),X565))))),s(X561,sK5(X567,happ(s(fun(fun(X561,bool),fun(X561,bool)),happ(s(fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool))),happ(s(fun(X562,fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool)))),X563),s(X562,X564))),s('type.list.list'(X562),X565))),s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),X565)))),X561))))) | ~p(s(bool,happ(s(fun(X561,bool),X567),s(X561,X568))))) )),
  inference(forward_demodulation,[],[f19614,f357])).
fof(f19614,plain,(
  ( ! [X565,X567,X561,X563,X568,X564,X566,X562] : (~p(s(bool,happ(s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),'const.list.CONS_2'(s(X562,X564),s('type.list.list'(X562),X565))))),s(X561,sK5(X567,happ(s(fun(fun(X561,bool),fun(X561,bool)),happ(s(fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool))),happ(s(fun(X562,fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool)))),X563),s(X562,X564))),s('type.list.list'(X562),X565))),s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),X565)))),X561))))) | ~p(s(bool,happ(s(fun(X561,bool),X567),s(X561,X568)))) | p(s(bool,happ(s(fun(X561,bool),happ(s(fun(fun(X561,bool),fun(X561,bool)),happ(s(fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool))),happ(s(fun(X562,fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool)))),X563),s(X562,X564))),s('type.list.list'(X562),X565))),s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),X565))))),s(X561,sK6(X567,happ(s(fun(fun(X561,bool),fun(X561,bool)),happ(s(fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool))),happ(s(fun(X562,fun('type.list.list'(X562),fun(fun(X561,bool),fun(X561,bool)))),X563),s(X562,X564))),s('type.list.list'(X562),X565))),s(fun(X561,bool),happ(s(fun('type.list.list'(X562),fun(X561,bool)),sK16(X563,X566,X562,fun(X561,bool))),s('type.list.list'(X562),X565)))),X561)))))) )),
  inference(superposition,[],[f315,f357])).
fof(f19736,plain,(
  ( ! [X557,X559,X553,X555,X560,X556,X558,X554] : (p(s(bool,happ(s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),'const.list.CONS_2'(s(X554,X556),s('type.list.list'(X554),X557))))),s(X553,sK5(happ(s(fun(fun(X553,bool),fun(X553,bool)),happ(s(fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool))),happ(s(fun(X554,fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool)))),X555),s(X554,X556))),s('type.list.list'(X554),X557))),s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),X557)))),X560,X553))))) | ~p(s(bool,happ(s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),'const.list.CONS_2'(s(X554,X556),s('type.list.list'(X554),X557))))),s(X553,X559)))) | p(s(bool,happ(s(fun(X553,bool),X560),s(X553,sK6(happ(s(fun(fun(X553,bool),fun(X553,bool)),happ(s(fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool))),happ(s(fun(X554,fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool)))),X555),s(X554,X556))),s('type.list.list'(X554),X557))),s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),X557)))),X560,X553)))))) )),
  inference(forward_demodulation,[],[f19613,f357])).
fof(f19613,plain,(
  ( ! [X557,X559,X553,X555,X560,X556,X558,X554] : (~p(s(bool,happ(s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),'const.list.CONS_2'(s(X554,X556),s('type.list.list'(X554),X557))))),s(X553,X559)))) | p(s(bool,happ(s(fun(X553,bool),X560),s(X553,sK6(happ(s(fun(fun(X553,bool),fun(X553,bool)),happ(s(fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool))),happ(s(fun(X554,fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool)))),X555),s(X554,X556))),s('type.list.list'(X554),X557))),s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),X557)))),X560,X553))))) | p(s(bool,happ(s(fun(X553,bool),happ(s(fun(fun(X553,bool),fun(X553,bool)),happ(s(fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool))),happ(s(fun(X554,fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool)))),X555),s(X554,X556))),s('type.list.list'(X554),X557))),s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),X557))))),s(X553,sK5(happ(s(fun(fun(X553,bool),fun(X553,bool)),happ(s(fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool))),happ(s(fun(X554,fun('type.list.list'(X554),fun(fun(X553,bool),fun(X553,bool)))),X555),s(X554,X556))),s('type.list.list'(X554),X557))),s(fun(X553,bool),happ(s(fun('type.list.list'(X554),fun(X553,bool)),sK16(X555,X558,X554,fun(X553,bool))),s('type.list.list'(X554),X557)))),X560,X553)))))) )),
  inference(superposition,[],[f314,f357])).
fof(f19612,plain,(
  ( ! [X546,X549,X551,X547,X552,X548,X550] : (p(s(bool,'|dollar|exists_1'(s(fun(X546,bool),happ(s(fun('type.list.list'(X547),fun(X546,bool)),sK16(X548,X551,X547,fun(X546,bool))),s('type.list.list'(X547),'const.list.CONS_2'(s(X547,X549),s('type.list.list'(X547),X550)))))))) | s(X546,X552) = s(X546,sK4(X552,happ(s(fun(fun(X546,bool),fun(X546,bool)),happ(s(fun('type.list.list'(X547),fun(fun(X546,bool),fun(X546,bool))),happ(s(fun(X547,fun('type.list.list'(X547),fun(fun(X546,bool),fun(X546,bool)))),X548),s(X547,X549))),s('type.list.list'(X547),X550))),s(fun(X546,bool),happ(s(fun('type.list.list'(X547),fun(X546,bool)),sK16(X548,X551,X547,fun(X546,bool))),s('type.list.list'(X547),X550)))),X546))) )),
  inference(superposition,[],[f312,f357])).
fof(f19592,plain,(
  ( ! [X420,X422,X418,X421,X417,X419] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X422),'const.sum.INL_1'(s(bool,happ(s(fun('type.list.list'(X417),bool),sK16(X418,X421,X417,bool)),s('type.list.list'(X417),'const.list.CONS_2'(s(X417,X419),s('type.list.list'(X417),X420))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X417),fun(bool,bool)),happ(s(fun(X417,fun('type.list.list'(X417),fun(bool,bool))),X418),s(X417,X419))),s('type.list.list'(X417),X420))),s(bool,happ(s(fun('type.list.list'(X417),bool),sK16(X418,X421,X417,bool)),s('type.list.list'(X417),X420)))))) )),
  inference(superposition,[],[f5684,f357])).
fof(f19591,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X416,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.list.list'(X411),bool),sK16(X412,X415,X411,bool)),s('type.list.list'(X411),'const.list.CONS_2'(s(X411,X413),s('type.list.list'(X411),X414))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X411),fun(bool,bool)),happ(s(fun(X411,fun('type.list.list'(X411),fun(bool,bool))),X412),s(X411,X413))),s('type.list.list'(X411),X414))),s(bool,happ(s(fun('type.list.list'(X411),bool),sK16(X412,X415,X411,bool)),s('type.list.list'(X411),X414)))))) )),
  inference(superposition,[],[f5495,f357])).
fof(f19586,plain,(
  ( ! [X383,X379,X380,X382,X378,X384,X381] : (~p(s(bool,happ(s(fun('type.list.list'(X378),bool),sK16(X379,X382,X378,bool)),s('type.list.list'(X378),'const.list.CONS_2'(s(X378,X380),s('type.list.list'(X378),X381)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X383),bool),sK16(X384,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X378),fun(bool,bool)),happ(s(fun(X378,fun('type.list.list'(X378),fun(bool,bool))),X379),s(X378,X380))),s('type.list.list'(X378),X381))),s(bool,happ(s(fun('type.list.list'(X378),bool),sK16(X379,X382,X378,bool)),s('type.list.list'(X378),X381)))),X383,bool))))) )),
  inference(superposition,[],[f3944,f357])).
fof(f19574,plain,(
  ( ! [X313,X315,X310,X312,X314,X311] : (s(bool,X315) != s(bool,happ(s(fun('type.list.list'(X310),bool),sK16(X311,X314,X310,bool)),s('type.list.list'(X310),'const.list.CONS_2'(s(X310,X312),s('type.list.list'(X310),X313))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X310),fun(bool,bool)),happ(s(fun(X310,fun('type.list.list'(X310),fun(bool,bool))),X311),s(X310,X312))),s('type.list.list'(X310),X313))),s(bool,happ(s(fun('type.list.list'(X310),bool),sK16(X311,X314,X310,bool)),s('type.list.list'(X310),X313))))) | s(bool,'T_0') = s(bool,X315)) )),
  inference(superposition,[],[f1683,f357])).
fof(f19573,plain,(
  ( ! [X308,X304,X306,X309,X305,X307] : (s(bool,X309) != s(bool,happ(s(fun('type.list.list'(X304),bool),sK16(X305,X308,X304,bool)),s('type.list.list'(X304),'const.list.CONS_2'(s(X304,X306),s('type.list.list'(X304),X307))))) | s(bool,'F_0') = s(bool,X309) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X304),fun(bool,bool)),happ(s(fun(X304,fun('type.list.list'(X304),fun(bool,bool))),X305),s(X304,X306))),s('type.list.list'(X304),X307))),s(bool,happ(s(fun('type.list.list'(X304),bool),sK16(X305,X308,X304,bool)),s('type.list.list'(X304),X307)))))) )),
  inference(superposition,[],[f1683,f357])).
fof(f19567,plain,(
  ( ! [X271,X273,X275,X270,X272,X274] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X275),'const.sum.INL_1'(s(bool,happ(s(fun('type.list.list'(X270),bool),sK16(X271,X274,X270,bool)),s('type.list.list'(X270),'const.list.CONS_2'(s(X270,X272),s('type.list.list'(X270),X273))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X270),fun(bool,bool)),happ(s(fun(X270,fun('type.list.list'(X270),fun(bool,bool))),X271),s(X270,X272))),s('type.list.list'(X270),X273))),s(bool,happ(s(fun('type.list.list'(X270),bool),sK16(X271,X274,X270,bool)),s('type.list.list'(X270),X273)))))) )),
  inference(superposition,[],[f1396,f357])).
fof(f19566,plain,(
  ( ! [X269,X265,X267,X268,X264,X266] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X269,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.list.list'(X264),bool),sK16(X265,X268,X264,bool)),s('type.list.list'(X264),'const.list.CONS_2'(s(X264,X266),s('type.list.list'(X264),X267))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X264),fun(bool,bool)),happ(s(fun(X264,fun('type.list.list'(X264),fun(bool,bool))),X265),s(X264,X266))),s('type.list.list'(X264),X267))),s(bool,happ(s(fun('type.list.list'(X264),bool),sK16(X265,X268,X264,bool)),s('type.list.list'(X264),X267)))))) )),
  inference(superposition,[],[f1395,f357])).
fof(f19706,plain,(
  ( ! [X261,X259,X260,X262,X258] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(X258),bool),sK16(X259,X262,X258,bool)),s('type.list.list'(X258),'const.list.CONS_2'(s(X258,X260),s('type.list.list'(X258),X261))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X258),fun(bool,bool)),happ(s(fun(X258,fun('type.list.list'(X258),fun(bool,bool))),X259),s(X258,X260))),s('type.list.list'(X258),X261))),s(bool,happ(s(fun('type.list.list'(X258),bool),sK16(X259,X262,X258,bool)),s('type.list.list'(X258),X261)))))) )),
  inference(forward_demodulation,[],[f19565,f427])).
fof(f19565,plain,(
  ( ! [X261,X263,X259,X260,X262,X258] : (s(bool,'const.ind_type.ISO_2'(s(fun(X263,X263),'_i_0_0'),s(fun(X263,X263),'_i_0_0'))) != s(bool,happ(s(fun('type.list.list'(X258),bool),sK16(X259,X262,X258,bool)),s('type.list.list'(X258),'const.list.CONS_2'(s(X258,X260),s('type.list.list'(X258),X261))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X258),fun(bool,bool)),happ(s(fun(X258,fun('type.list.list'(X258),fun(bool,bool))),X259),s(X258,X260))),s('type.list.list'(X258),X261))),s(bool,happ(s(fun('type.list.list'(X258),bool),sK16(X259,X262,X258,bool)),s('type.list.list'(X258),X261)))))) )),
  inference(superposition,[],[f790,f357])).
fof(f19564,plain,(
  ( ! [X255,X253,X257,X254,X252,X256] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X257,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.list.list'(X252),bool),sK16(X253,X256,X252,bool)),s('type.list.list'(X252),'const.list.CONS_2'(s(X252,X254),s('type.list.list'(X252),X255))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X252),fun(bool,bool)),happ(s(fun(X252,fun('type.list.list'(X252),fun(bool,bool))),X253),s(X252,X254))),s('type.list.list'(X252),X255))),s(bool,happ(s(fun('type.list.list'(X252),bool),sK16(X253,X256,X252,bool)),s('type.list.list'(X252),X255)))))) )),
  inference(superposition,[],[f527,f357])).
fof(f19563,plain,(
  ( ! [X251,X249,X246,X250,X248,X247] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X251),'const.sum.INL_1'(s(bool,happ(s(fun('type.list.list'(X246),bool),sK16(X247,X250,X246,bool)),s('type.list.list'(X246),'const.list.CONS_2'(s(X246,X248),s('type.list.list'(X246),X249))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X246),fun(bool,bool)),happ(s(fun(X246,fun('type.list.list'(X246),fun(bool,bool))),X247),s(X246,X248))),s('type.list.list'(X246),X249))),s(bool,happ(s(fun('type.list.list'(X246),bool),sK16(X247,X250,X246,bool)),s('type.list.list'(X246),X249)))))) )),
  inference(superposition,[],[f500,f357])).
fof(f19546,plain,(
  ( ! [X154,X152,X151,X155,X153] : (~p(s(bool,happ(s(fun('type.list.list'(X151),bool),sK16(X152,X155,X151,bool)),s('type.list.list'(X151),'const.list.CONS_2'(s(X151,X153),s('type.list.list'(X151),X154)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X151),fun(bool,bool)),happ(s(fun(X151,fun('type.list.list'(X151),fun(bool,bool))),X152),s(X151,X153))),s('type.list.list'(X151),X154))),s(bool,'const.min.@_1'(s(fun(bool,bool),happ(s(fun('type.list.list'(X151),fun(bool,bool)),happ(s(fun(X151,fun('type.list.list'(X151),fun(bool,bool))),X152),s(X151,X153))),s('type.list.list'(X151),X154))))))))) )),
  inference(superposition,[],[f311,f357])).
fof(f19545,plain,(
  ( ! [X146,X149,X147,X150,X148] : (~p(s(bool,happ(s(fun('type.list.list'(X146),bool),sK16(X147,X150,X146,bool)),s('type.list.list'(X146),'const.list.CONS_2'(s(X146,X148),s('type.list.list'(X146),X149)))))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun('type.list.list'(X146),fun(bool,bool)),happ(s(fun(X146,fun('type.list.list'(X146),fun(bool,bool))),X147),s(X146,X148))),s('type.list.list'(X146),X149))))))) )),
  inference(superposition,[],[f3805,f357])).
fof(f19544,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (~p(s(bool,happ(s(fun('type.list.list'(X140),bool),sK16(X141,X144,X140,bool)),s('type.list.list'(X140),'const.list.CONS_2'(s(X140,X142),s('type.list.list'(X140),X143)))))) | p(s(bool,happ(s(fun(bool,bool),X145),s(bool,sK6(happ(s(fun('type.list.list'(X140),fun(bool,bool)),happ(s(fun(X140,fun('type.list.list'(X140),fun(bool,bool))),X141),s(X140,X142))),s('type.list.list'(X140),X143)),X145,bool))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X140),fun(bool,bool)),happ(s(fun(X140,fun('type.list.list'(X140),fun(bool,bool))),X141),s(X140,X142))),s('type.list.list'(X140),X143))),s(bool,sK5(happ(s(fun('type.list.list'(X140),fun(bool,bool)),happ(s(fun(X140,fun('type.list.list'(X140),fun(bool,bool))),X141),s(X140,X142))),s('type.list.list'(X140),X143)),X145,bool)))))) )),
  inference(superposition,[],[f314,f357])).
fof(f19511,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,X28) = s(bool,happ(s(fun('type.list.list'(X23),bool),sK16(X24,X27,X23,bool)),s('type.list.list'(X23),'const.list.CONS_2'(s(X23,X25),s('type.list.list'(X23),X26))))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X23),fun(bool,bool)),happ(s(fun(X23,fun('type.list.list'(X23),fun(bool,bool))),X24),s(X23,X25))),s('type.list.list'(X23),X26))),s(bool,happ(s(fun('type.list.list'(X23),bool),sK16(X24,X27,X23,bool)),s('type.list.list'(X23),X26)))))) )),
  inference(superposition,[],[f357,f432])).
fof(f19510,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X17),bool),sK16(X18,X21,X17,bool)),s('type.list.list'(X17),'const.list.CONS_2'(s(X17,X19),s('type.list.list'(X17),X20))))) | s(bool,X22) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X17),fun(bool,bool)),happ(s(fun(X17,fun('type.list.list'(X17),fun(bool,bool))),X18),s(X17,X19))),s('type.list.list'(X17),X20))),s(bool,happ(s(fun('type.list.list'(X17),bool),sK16(X18,X21,X17,bool)),s('type.list.list'(X17),X20))))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f357,f432])).
fof(f19509,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X12),bool),sK16(X13,X16,X12,bool)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X14),s('type.list.list'(X12),X15))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X12),fun(bool,bool)),happ(s(fun(X12,fun('type.list.list'(X12),fun(bool,bool))),X13),s(X12,X14))),s('type.list.list'(X12),X15))),s(bool,happ(s(fun('type.list.list'(X12),bool),sK16(X13,X16,X12,bool)),s('type.list.list'(X12),X15)))))) )),
  inference(superposition,[],[f357,f264])).
fof(f19492,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (s(bool,happ(s(fun('type.list.list'(X30),bool),sK16(X31,X32,X30,bool)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,X35),s('type.list.list'(X30),X33))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X30),fun(bool,bool)),happ(s(fun(X30,fun('type.list.list'(X30),fun(bool,bool))),X31),s(X30,X35))),s('type.list.list'(X30),X33))),s(bool,X34))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X30),bool),sK16(X31,X32,X30,bool)),s('type.list.list'(X30),X33)))) )),
  inference(superposition,[],[f357,f432])).
fof(f19491,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(bool,happ(s(fun('type.list.list'(X24),bool),sK16(X25,X26,X24,bool)),s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X28),s('type.list.list'(X24),X27))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X24),fun(bool,bool)),happ(s(fun(X24,fun('type.list.list'(X24),fun(bool,bool))),X25),s(X24,X28))),s('type.list.list'(X24),X27))),s(bool,'T_0'))) | s(bool,X29) = s(bool,happ(s(fun('type.list.list'(X24),bool),sK16(X25,X26,X24,bool)),s('type.list.list'(X24),X27))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f357,f432])).
fof(f19490,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,happ(s(fun('type.list.list'(X19),bool),sK16(X20,X21,X19,bool)),s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X23),s('type.list.list'(X19),X22))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X19),fun(bool,bool)),happ(s(fun(X19,fun('type.list.list'(X19),fun(bool,bool))),X20),s(X19,X23))),s('type.list.list'(X19),X22))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X19),bool),sK16(X20,X21,X19,bool)),s('type.list.list'(X19),X22)))) )),
  inference(superposition,[],[f357,f264])).
fof(f19674,plain,(
  ( ! [X17,X18,X16] : (s(bool,happ(s(fun('type.list.list'(X16),bool),sK16(X17,'T_0',X16,bool)),s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0'))))) = s(bool,happ(s(fun('type.list.list'(X16),bool),sK16(X17,sK6('_i_0_0','_i_0_0',bool),X16,bool)),s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f19489,f19486])).
fof(f19489,plain,(
  ( ! [X17,X18,X16] : (s(bool,happ(s(fun('type.list.list'(X16),bool),sK16(X17,sK6('_i_0_0','_i_0_0',bool),X16,bool)),s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0'))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X16),fun(bool,bool)),happ(s(fun(X16,fun('type.list.list'(X16),fun(bool,bool))),X17),s(X16,X18))),s('type.list.list'(X16),'const.list.NIL_0'))),s(bool,'T_0')))) ) | $spl28),
  inference(superposition,[],[f357,f7238])).
fof(f19673,plain,(
  ( ! [X14,X15,X13] : (s(bool,happ(s(fun('type.list.list'(X13),bool),sK16(X14,'T_0',X13,bool)),s('type.list.list'(X13),'const.list.CONS_2'(s(X13,X15),s('type.list.list'(X13),'const.list.NIL_0'))))) = s(bool,happ(s(fun('type.list.list'(X13),bool),sK16(X14,sK5('_i_0_0','_i_0_0',bool),X13,bool)),s('type.list.list'(X13),'const.list.CONS_2'(s(X13,X15),s('type.list.list'(X13),'const.list.NIL_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f19488,f19486])).
fof(f19488,plain,(
  ( ! [X14,X15,X13] : (s(bool,happ(s(fun('type.list.list'(X13),bool),sK16(X14,sK5('_i_0_0','_i_0_0',bool),X13,bool)),s('type.list.list'(X13),'const.list.CONS_2'(s(X13,X15),s('type.list.list'(X13),'const.list.NIL_0'))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.list.list'(X13),fun(bool,bool)),happ(s(fun(X13,fun('type.list.list'(X13),fun(bool,bool))),X14),s(X13,X15))),s('type.list.list'(X13),'const.list.NIL_0'))),s(bool,'T_0')))) ) | $spl28),
  inference(superposition,[],[f357,f7009])).
fof(f19487,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s(X5,happ(s(fun('type.list.list'(X6),X5),sK16(X7,X8,X6,X5)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),happ(s(fun(X9,'type.list.list'(X6)),X10),s(X9,X11))))))) = s(X5,happ(s(fun(X5,X5),happ(s(fun('type.list.list'(X6),fun(X5,X5)),happ(s(fun(X6,fun('type.list.list'(X6),fun(X5,X5))),X7),s(X6,X12))),s('type.list.list'(X6),happ(s(fun(X9,'type.list.list'(X6)),X10),s(X9,X11))))),s(X5,happ(s(fun(X9,X5),'_dst_x0x1_2'(s(fun('type.list.list'(X6),X5),sK16(X7,X8,X6,X5)),s(fun(X9,'type.list.list'(X6)),X10))),s(X9,X11)))))) )),
  inference(superposition,[],[f357,f365])).
fof(f19486,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X2,X3,X1,X0)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.list.list'(X1),fun(X0,X0)),happ(s(fun(X1,fun('type.list.list'(X1),fun(X0,X0))),X2),s(X1,X4))),s('type.list.list'(X1),'const.list.NIL_0'))),s(X0,X3)))) )),
  inference(superposition,[],[f357,f356])).
fof(f19471,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X2,X7,X1,X0)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),happ(s(fun(X4,'type.list.list'(X1)),X5),s(X4,X6))))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X4,fun(X0,X0)),'_dst_x0x1_2'(s(fun('type.list.list'(X1),fun(X0,X0)),happ(s(fun(X1,fun('type.list.list'(X1),fun(X0,X0))),X2),s(X1,X3))),s(fun(X4,'type.list.list'(X1)),X5))),s(X4,X6))),s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X2,X7,X1,X0)),s('type.list.list'(X1),happ(s(fun(X4,'type.list.list'(X1)),X5),s(X4,X6)))))))) )),
  inference(superposition,[],[f357,f365])).
fof(f19470,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(X35,happ(s(fun('type.list.list'('type.list.list'(X34)),X35),sK16(sK16(X36,X37,X34,fun('type.list.list'('type.list.list'(X34)),fun(X35,X35))),X38,'type.list.list'(X34),X35)),s('type.list.list'('type.list.list'(X34)),'const.list.CONS_2'(s('type.list.list'(X34),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X34)),X39))))) = s(X35,happ(s(fun(X35,X35),happ(s(fun('type.list.list'('type.list.list'(X34)),fun(X35,X35)),X37),s('type.list.list'('type.list.list'(X34)),X39))),s(X35,happ(s(fun('type.list.list'('type.list.list'(X34)),X35),sK16(sK16(X36,X37,X34,fun('type.list.list'('type.list.list'(X34)),fun(X35,X35))),X38,'type.list.list'(X34),X35)),s('type.list.list'('type.list.list'(X34)),X39)))))) )),
  inference(superposition,[],[f357,f356])).
fof(f19469,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(X28,happ(s(fun('type.list.list'('type.num.num'),X28),sK16(happ(s(fun(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28)))),happ(s(fun(fun('type.list.list'('type.num.num'),fun(X28,X28)),fun(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))))),'const.ind_type.FCONS_0'),s(fun('type.list.list'('type.num.num'),fun(X28,X28)),X29))),s(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),X30)),X32,'type.num.num',X28)),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X31),s('type.list.list'('type.num.num'),X33))))) = s(X28,happ(s(fun(X28,X28),happ(s(fun('type.list.list'('type.num.num'),fun(X28,X28)),'const.ind_type.FCONS_3'(s(fun('type.list.list'('type.num.num'),fun(X28,X28)),X29),s(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),X30),s('type.num.num',X31))),s('type.list.list'('type.num.num'),X33))),s(X28,happ(s(fun('type.list.list'('type.num.num'),X28),sK16(happ(s(fun(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28)))),happ(s(fun(fun('type.list.list'('type.num.num'),fun(X28,X28)),fun(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))))),'const.ind_type.FCONS_0'),s(fun('type.list.list'('type.num.num'),fun(X28,X28)),X29))),s(fun('type.num.num',fun('type.list.list'('type.num.num'),fun(X28,X28))),X30)),X32,'type.num.num',X28)),s('type.list.list'('type.num.num'),X33)))))) )),
  inference(superposition,[],[f357,f320])).
fof(f19468,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (s(X21,happ(s(fun('type.list.list'(X20),X21),sK16('_dst_x0x1_2'(s(fun(X22,fun('type.list.list'(X20),fun(X21,X21))),X23),s(fun(X20,X22),X24)),X26,X20,X21)),s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X25),s('type.list.list'(X20),X27))))) = s(X21,happ(s(fun(X21,X21),happ(s(fun('type.list.list'(X20),fun(X21,X21)),happ(s(fun(X22,fun('type.list.list'(X20),fun(X21,X21))),X23),s(X22,happ(s(fun(X20,X22),X24),s(X20,X25))))),s('type.list.list'(X20),X27))),s(X21,happ(s(fun('type.list.list'(X20),X21),sK16('_dst_x0x1_2'(s(fun(X22,fun('type.list.list'(X20),fun(X21,X21))),X23),s(fun(X20,X22),X24)),X26,X20,X21)),s('type.list.list'(X20),X27)))))) )),
  inference(superposition,[],[f357,f365])).
fof(f19467,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X7,happ(s(fun('type.list.list'(X6),X7),sK16('_dst_x00x11_2'(s(fun(X8,fun(X7,X7)),X9),s(fun(X6,fun('type.list.list'(X6),X8)),X10)),X12,X6,X7)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X13))))) = s(X7,happ(s(fun(X7,X7),happ(s(fun('type.list.list'(X6),fun(X7,X7)),'_dst_x0x1_2'(s(fun(X8,fun(X7,X7)),X9),s(fun('type.list.list'(X6),X8),happ(s(fun(X6,fun('type.list.list'(X6),X8)),X10),s(X6,X11))))),s('type.list.list'(X6),X13))),s(X7,happ(s(fun('type.list.list'(X6),X7),sK16('_dst_x00x11_2'(s(fun(X8,fun(X7,X7)),X9),s(fun(X6,fun('type.list.list'(X6),X8)),X10)),X12,X6,X7)),s('type.list.list'(X6),X13)))))) )),
  inference(superposition,[],[f357,f390])).
fof(f19672,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X1),sK16('_dstsel_0_x01_1'(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X0),X2)),X4,fun(X0,fun(X1,X1)),X1)),s('type.list.list'(fun(X0,fun(X1,X1))),'const.list.CONS_2'(s(fun(X0,fun(X1,X1)),X3),s('type.list.list'(fun(X0,fun(X1,X1))),X5))))) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X3),s(X0,happ(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X0),X2),s('type.list.list'(fun(X0,fun(X1,X1))),X5))))),s(X1,happ(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X1),sK16('_dstsel_0_x01_1'(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X0),X2)),X4,fun(X0,fun(X1,X1)),X1)),s('type.list.list'(fun(X0,fun(X1,X1))),X5)))))) )),
  inference(forward_demodulation,[],[f19466,f365])).
fof(f19466,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X1),sK16('_dstsel_0_x01_1'(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X0),X2)),X4,fun(X0,fun(X1,X1)),X1)),s('type.list.list'(fun(X0,fun(X1,X1))),'const.list.CONS_2'(s(fun(X0,fun(X1,X1)),X3),s('type.list.list'(fun(X0,fun(X1,X1))),X5))))) = s(X1,happ(s(fun(X1,X1),happ(s(fun('type.list.list'(fun(X0,fun(X1,X1))),fun(X1,X1)),'_dst_x0x1_2'(s(fun(X0,fun(X1,X1)),X3),s(fun('type.list.list'(fun(X0,fun(X1,X1))),X0),X2))),s('type.list.list'(fun(X0,fun(X1,X1))),X5))),s(X1,happ(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X1),sK16('_dstsel_0_x01_1'(s(fun('type.list.list'(fun(X0,fun(X1,X1))),X0),X2)),X4,fun(X0,fun(X1,X1)),X1)),s('type.list.list'(fun(X0,fun(X1,X1))),X5)))))) )),
  inference(superposition,[],[f357,f364])).
fof(f19385,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (s(X133,happ(s(fun('type.list.list'(X132),X133),sK16(sK4(X134,X135,fun(X132,fun('type.list.list'(X132),fun(X133,X133)))),X136,X132,X133)),s('type.list.list'(X132),'const.list.CONS_2'(s(X132,X137),s('type.list.list'(X132),X138))))) = s(X133,happ(s(fun(X133,X133),happ(s(fun('type.list.list'(X132),fun(X133,X133)),happ(s(fun(X132,fun('type.list.list'(X132),fun(X133,X133))),X134),s(X132,X137))),s('type.list.list'(X132),X138))),s(X133,happ(s(fun('type.list.list'(X132),X133),sK16(sK4(X134,X135,fun(X132,fun('type.list.list'(X132),fun(X133,X133)))),X136,X132,X133)),s('type.list.list'(X132),X138))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X132,fun('type.list.list'(X132),fun(X133,X133))),bool),X135)))) )),
  inference(superposition,[],[f357,f823])).
fof(f19384,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(X126,happ(s(fun('type.list.list'(X125),X126),sK16('const.sum.OUTL_1'(s('type.sum.sum'(fun(X125,fun('type.list.list'(X125),fun(X126,X126))),X127),'const.sum.INL_1'(s(fun(X125,fun('type.list.list'(X125),fun(X126,X126))),X128)))),X129,X125,X126)),s('type.list.list'(X125),'const.list.CONS_2'(s(X125,X130),s('type.list.list'(X125),X131))))) = s(X126,happ(s(fun(X126,X126),happ(s(fun('type.list.list'(X125),fun(X126,X126)),happ(s(fun(X125,fun('type.list.list'(X125),fun(X126,X126))),X128),s(X125,X130))),s('type.list.list'(X125),X131))),s(X126,happ(s(fun('type.list.list'(X125),X126),sK16('const.sum.OUTL_1'(s('type.sum.sum'(fun(X125,fun('type.list.list'(X125),fun(X126,X126))),X127),'const.sum.INL_1'(s(fun(X125,fun('type.list.list'(X125),fun(X126,X126))),X128)))),X129,X125,X126)),s('type.list.list'(X125),X131)))))) )),
  inference(superposition,[],[f357,f336])).
fof(f19383,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(X119,happ(s(fun('type.list.list'(X118),X119),sK16('const.sum.OUTR_1'(s('type.sum.sum'(X120,fun(X118,fun('type.list.list'(X118),fun(X119,X119)))),'const.sum.INR_1'(s(fun(X118,fun('type.list.list'(X118),fun(X119,X119))),X121)))),X122,X118,X119)),s('type.list.list'(X118),'const.list.CONS_2'(s(X118,X123),s('type.list.list'(X118),X124))))) = s(X119,happ(s(fun(X119,X119),happ(s(fun('type.list.list'(X118),fun(X119,X119)),happ(s(fun(X118,fun('type.list.list'(X118),fun(X119,X119))),X121),s(X118,X123))),s('type.list.list'(X118),X124))),s(X119,happ(s(fun('type.list.list'(X118),X119),sK16('const.sum.OUTR_1'(s('type.sum.sum'(X120,fun(X118,fun('type.list.list'(X118),fun(X119,X119)))),'const.sum.INR_1'(s(fun(X118,fun('type.list.list'(X118),fun(X119,X119))),X121)))),X122,X118,X119)),s('type.list.list'(X118),X124)))))) )),
  inference(superposition,[],[f357,f337])).
fof(f19382,plain,(
  ( ! [X111,X116,X114,X112,X110,X117,X115,X113] : (s(X111,happ(s(fun('type.list.list'(X110),X111),sK16('const.ind_type.FCONS_3'(s(fun(X110,fun('type.list.list'(X110),fun(X111,X111))),X112),s(fun('type.num.num',fun(X110,fun('type.list.list'(X110),fun(X111,X111)))),X113),s('type.num.num','const.num.SUC_1'(s('type.num.num',X114)))),X115,X110,X111)),s('type.list.list'(X110),'const.list.CONS_2'(s(X110,X116),s('type.list.list'(X110),X117))))) = s(X111,happ(s(fun(X111,X111),happ(s(fun('type.list.list'(X110),fun(X111,X111)),happ(s(fun(X110,fun('type.list.list'(X110),fun(X111,X111))),happ(s(fun('type.num.num',fun(X110,fun('type.list.list'(X110),fun(X111,X111)))),X113),s('type.num.num',X114))),s(X110,X116))),s('type.list.list'(X110),X117))),s(X111,happ(s(fun('type.list.list'(X110),X111),sK16('const.ind_type.FCONS_3'(s(fun(X110,fun('type.list.list'(X110),fun(X111,X111))),X112),s(fun('type.num.num',fun(X110,fun('type.list.list'(X110),fun(X111,X111)))),X113),s('type.num.num','const.num.SUC_1'(s('type.num.num',X114)))),X115,X110,X111)),s('type.list.list'(X110),X117)))))) )),
  inference(superposition,[],[f357,f318])).
fof(f19381,plain,(
  ( ! [X103,X109,X107,X105,X108,X106,X104] : (s(X104,happ(s(fun('type.list.list'(X103),X104),sK16('const.ind_type.FCONS_3'(s(fun(X103,fun('type.list.list'(X103),fun(X104,X104))),X105),s(fun('type.num.num',fun(X103,fun('type.list.list'(X103),fun(X104,X104)))),X106),s('type.num.num','const.num.|48|_0')),X107,X103,X104)),s('type.list.list'(X103),'const.list.CONS_2'(s(X103,X108),s('type.list.list'(X103),X109))))) = s(X104,happ(s(fun(X104,X104),happ(s(fun('type.list.list'(X103),fun(X104,X104)),happ(s(fun(X103,fun('type.list.list'(X103),fun(X104,X104))),X105),s(X103,X108))),s('type.list.list'(X103),X109))),s(X104,happ(s(fun('type.list.list'(X103),X104),sK16('const.ind_type.FCONS_3'(s(fun(X103,fun('type.list.list'(X103),fun(X104,X104))),X105),s(fun('type.num.num',fun(X103,fun('type.list.list'(X103),fun(X104,X104)))),X106),s('type.num.num','const.num.|48|_0')),X107,X103,X104)),s('type.list.list'(X103),X109)))))) )),
  inference(superposition,[],[f357,f310])).
fof(f19380,plain,(
  ( ! [X101,X99,X97,X95,X102,X100,X98,X96] : (s(X96,happ(s(fun('type.list.list'(X95),X96),sK16('const.pair.FST_1'(s('type.pair.prod'(fun(X95,fun('type.list.list'(X95),fun(X96,X96))),X97),'const.pair.,_2'(s(fun(X95,fun('type.list.list'(X95),fun(X96,X96))),X98),s(X97,X99)))),X100,X95,X96)),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X101),s('type.list.list'(X95),X102))))) = s(X96,happ(s(fun(X96,X96),happ(s(fun('type.list.list'(X95),fun(X96,X96)),happ(s(fun(X95,fun('type.list.list'(X95),fun(X96,X96))),X98),s(X95,X101))),s('type.list.list'(X95),X102))),s(X96,happ(s(fun('type.list.list'(X95),X96),sK16('const.pair.FST_1'(s('type.pair.prod'(fun(X95,fun('type.list.list'(X95),fun(X96,X96))),X97),'const.pair.,_2'(s(fun(X95,fun('type.list.list'(X95),fun(X96,X96))),X98),s(X97,X99)))),X100,X95,X96)),s('type.list.list'(X95),X102)))))) )),
  inference(superposition,[],[f357,f341])).
fof(f19379,plain,(
  ( ! [X94,X92,X90,X88,X87,X93,X91,X89] : (s(X88,happ(s(fun('type.list.list'(X87),X88),sK16('const.pair.SND_1'(s('type.pair.prod'(X89,fun(X87,fun('type.list.list'(X87),fun(X88,X88)))),'const.pair.,_2'(s(X89,X90),s(fun(X87,fun('type.list.list'(X87),fun(X88,X88))),X91)))),X92,X87,X88)),s('type.list.list'(X87),'const.list.CONS_2'(s(X87,X93),s('type.list.list'(X87),X94))))) = s(X88,happ(s(fun(X88,X88),happ(s(fun('type.list.list'(X87),fun(X88,X88)),happ(s(fun(X87,fun('type.list.list'(X87),fun(X88,X88))),X91),s(X87,X93))),s('type.list.list'(X87),X94))),s(X88,happ(s(fun('type.list.list'(X87),X88),sK16('const.pair.SND_1'(s('type.pair.prod'(X89,fun(X87,fun('type.list.list'(X87),fun(X88,X88)))),'const.pair.,_2'(s(X89,X90),s(fun(X87,fun('type.list.list'(X87),fun(X88,X88))),X91)))),X92,X87,X88)),s('type.list.list'(X87),X94)))))) )),
  inference(superposition,[],[f357,f340])).
fof(f19378,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(X81,happ(s(fun('type.list.list'(X80),X81),sK16(happ(s(fun('type.pair.prod'(fun(X80,fun('type.list.list'(X80),fun(X81,X81))),X82),fun(X80,fun('type.list.list'(X80),fun(X81,X81)))),'const.pair.FST_0'),s('type.pair.prod'(fun(X80,fun('type.list.list'(X80),fun(X81,X81))),X82),X83)),X84,X80,X81)),s('type.list.list'(X80),'const.list.CONS_2'(s(X80,X85),s('type.list.list'(X80),X86))))) = s(X81,happ(s(fun(X81,X81),happ(s(fun('type.list.list'(X80),fun(X81,X81)),happ(s(fun(X80,fun('type.list.list'(X80),fun(X81,X81))),'const.pair.FST_1'(s('type.pair.prod'(fun(X80,fun('type.list.list'(X80),fun(X81,X81))),X82),X83))),s(X80,X85))),s('type.list.list'(X80),X86))),s(X81,happ(s(fun('type.list.list'(X80),X81),sK16(happ(s(fun('type.pair.prod'(fun(X80,fun('type.list.list'(X80),fun(X81,X81))),X82),fun(X80,fun('type.list.list'(X80),fun(X81,X81)))),'const.pair.FST_0'),s('type.pair.prod'(fun(X80,fun('type.list.list'(X80),fun(X81,X81))),X82),X83)),X84,X80,X81)),s('type.list.list'(X80),X86)))))) )),
  inference(superposition,[],[f357,f338])).
fof(f19377,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (s(X73,happ(s(fun('type.list.list'(X72),X73),sK16(happ(s(fun('type.list.list'(X74),fun(X72,fun('type.list.list'(X72),fun(X73,X73)))),sK16(X75,X76,X74,fun(X72,fun('type.list.list'(X72),fun(X73,X73))))),s('type.list.list'(X74),'const.list.NIL_0')),X77,X72,X73)),s('type.list.list'(X72),'const.list.CONS_2'(s(X72,X78),s('type.list.list'(X72),X79))))) = s(X73,happ(s(fun(X73,X73),happ(s(fun('type.list.list'(X72),fun(X73,X73)),happ(s(fun(X72,fun('type.list.list'(X72),fun(X73,X73))),X76),s(X72,X78))),s('type.list.list'(X72),X79))),s(X73,happ(s(fun('type.list.list'(X72),X73),sK16(happ(s(fun('type.list.list'(X74),fun(X72,fun('type.list.list'(X72),fun(X73,X73)))),sK16(X75,X76,X74,fun(X72,fun('type.list.list'(X72),fun(X73,X73))))),s('type.list.list'(X74),'const.list.NIL_0')),X77,X72,X73)),s('type.list.list'(X72),X79)))))) )),
  inference(superposition,[],[f357,f356])).
fof(f19376,plain,(
  ( ! [X70,X68,X66,X64,X71,X69,X67,X65] : (s(X65,happ(s(fun('type.list.list'(X64),X65),sK16(happ(s(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),happ(s(fun(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65))))),happ(s(fun(fun(X64,fun('type.list.list'(X64),fun(X65,X65))),fun(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))))),'const.ind_type.FCONS_0'),s(fun(X64,fun('type.list.list'(X64),fun(X65,X65))),X66))),s(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),X67))),s('type.num.num',X68)),X69,X64,X65)),s('type.list.list'(X64),'const.list.CONS_2'(s(X64,X70),s('type.list.list'(X64),X71))))) = s(X65,happ(s(fun(X65,X65),happ(s(fun('type.list.list'(X64),fun(X65,X65)),happ(s(fun(X64,fun('type.list.list'(X64),fun(X65,X65))),'const.ind_type.FCONS_3'(s(fun(X64,fun('type.list.list'(X64),fun(X65,X65))),X66),s(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),X67),s('type.num.num',X68))),s(X64,X70))),s('type.list.list'(X64),X71))),s(X65,happ(s(fun('type.list.list'(X64),X65),sK16(happ(s(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),happ(s(fun(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65))))),happ(s(fun(fun(X64,fun('type.list.list'(X64),fun(X65,X65))),fun(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))))),'const.ind_type.FCONS_0'),s(fun(X64,fun('type.list.list'(X64),fun(X65,X65))),X66))),s(fun('type.num.num',fun(X64,fun('type.list.list'(X64),fun(X65,X65)))),X67))),s('type.num.num',X68)),X69,X64,X65)),s('type.list.list'(X64),X71)))))) )),
  inference(superposition,[],[f357,f320])).
fof(f19375,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55,X63] : (s(X55,happ(s(fun('type.list.list'(X54),X55),sK16(happ(s(fun(X56,fun(X54,fun('type.list.list'(X54),fun(X55,X55)))),'_dst_x0x1_2'(s(fun(X57,fun(X54,fun('type.list.list'(X54),fun(X55,X55)))),X58),s(fun(X56,X57),X59))),s(X56,X60)),X61,X54,X55)),s('type.list.list'(X54),'const.list.CONS_2'(s(X54,X62),s('type.list.list'(X54),X63))))) = s(X55,happ(s(fun(X55,X55),happ(s(fun('type.list.list'(X54),fun(X55,X55)),happ(s(fun(X54,fun('type.list.list'(X54),fun(X55,X55))),happ(s(fun(X57,fun(X54,fun('type.list.list'(X54),fun(X55,X55)))),X58),s(X57,happ(s(fun(X56,X57),X59),s(X56,X60))))),s(X54,X62))),s('type.list.list'(X54),X63))),s(X55,happ(s(fun('type.list.list'(X54),X55),sK16(happ(s(fun(X56,fun(X54,fun('type.list.list'(X54),fun(X55,X55)))),'_dst_x0x1_2'(s(fun(X57,fun(X54,fun('type.list.list'(X54),fun(X55,X55)))),X58),s(fun(X56,X57),X59))),s(X56,X60)),X61,X54,X55)),s('type.list.list'(X54),X63)))))) )),
  inference(superposition,[],[f357,f365])).
fof(f19374,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X44,X53,X51,X49] : (s(X45,happ(s(fun('type.list.list'(X44),X45),sK16(happ(s(fun(X46,fun(X44,fun('type.list.list'(X44),fun(X45,X45)))),X47),s(X46,happ(s(fun(X48,X46),X49),s(X48,X50)))),X51,X44,X45)),s('type.list.list'(X44),'const.list.CONS_2'(s(X44,X52),s('type.list.list'(X44),X53))))) = s(X45,happ(s(fun(X45,X45),happ(s(fun('type.list.list'(X44),fun(X45,X45)),happ(s(fun(X44,fun('type.list.list'(X44),fun(X45,X45))),happ(s(fun(X48,fun(X44,fun('type.list.list'(X44),fun(X45,X45)))),'_dst_x0x1_2'(s(fun(X46,fun(X44,fun('type.list.list'(X44),fun(X45,X45)))),X47),s(fun(X48,X46),X49))),s(X48,X50))),s(X44,X52))),s('type.list.list'(X44),X53))),s(X45,happ(s(fun('type.list.list'(X44),X45),sK16(happ(s(fun(X46,fun(X44,fun('type.list.list'(X44),fun(X45,X45)))),X47),s(X46,happ(s(fun(X48,X46),X49),s(X48,X50)))),X51,X44,X45)),s('type.list.list'(X44),X53)))))) )),
  inference(superposition,[],[f357,f365])).
fof(f19373,plain,(
  ( ! [X39,X37,X35,X43,X41,X38,X36,X34,X42,X40] : (s(X35,happ(s(fun('type.list.list'(X34),X35),sK16(happ(s(fun(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))),happ(s(fun('type.list.list'(X36),fun(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),fun(X34,fun('type.list.list'(X34),fun(X35,X35))))),happ(s(fun(X36,fun('type.list.list'(X36),fun(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))))),X37),s(X36,X38))),s('type.list.list'(X36),X39))),s(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),happ(s(fun('type.list.list'(X36),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))),sK16(X37,X40,X36,fun(X34,fun('type.list.list'(X34),fun(X35,X35))))),s('type.list.list'(X36),X39)))),X41,X34,X35)),s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X42),s('type.list.list'(X34),X43))))) = s(X35,happ(s(fun(X35,X35),happ(s(fun('type.list.list'(X34),fun(X35,X35)),happ(s(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),happ(s(fun('type.list.list'(X36),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))),sK16(X37,X40,X36,fun(X34,fun('type.list.list'(X34),fun(X35,X35))))),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,X38),s('type.list.list'(X36),X39))))),s(X34,X42))),s('type.list.list'(X34),X43))),s(X35,happ(s(fun('type.list.list'(X34),X35),sK16(happ(s(fun(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))),happ(s(fun('type.list.list'(X36),fun(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),fun(X34,fun('type.list.list'(X34),fun(X35,X35))))),happ(s(fun(X36,fun('type.list.list'(X36),fun(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))))),X37),s(X36,X38))),s('type.list.list'(X36),X39))),s(fun(X34,fun('type.list.list'(X34),fun(X35,X35))),happ(s(fun('type.list.list'(X36),fun(X34,fun('type.list.list'(X34),fun(X35,X35)))),sK16(X37,X40,X36,fun(X34,fun('type.list.list'(X34),fun(X35,X35))))),s('type.list.list'(X36),X39)))),X41,X34,X35)),s('type.list.list'(X34),X43)))))) )),
  inference(superposition,[],[f357,f357])).
fof(f19372,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(X29,happ(s(fun('type.list.list'(X28),X29),sK16(happ(s(fun(fun(X28,fun('type.list.list'(X28),fun(X29,X29))),fun(X28,fun('type.list.list'(X28),fun(X29,X29)))),'_i_0_0'),s(fun(X28,fun('type.list.list'(X28),fun(X29,X29))),X30)),X31,X28,X29)),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X32),s('type.list.list'(X28),X33))))) = s(X29,happ(s(fun(X29,X29),happ(s(fun('type.list.list'(X28),fun(X29,X29)),happ(s(fun(X28,fun('type.list.list'(X28),fun(X29,X29))),X30),s(X28,X32))),s('type.list.list'(X28),X33))),s(X29,happ(s(fun('type.list.list'(X28),X29),sK16(happ(s(fun(fun(X28,fun('type.list.list'(X28),fun(X29,X29))),fun(X28,fun('type.list.list'(X28),fun(X29,X29)))),'_i_0_0'),s(fun(X28,fun('type.list.list'(X28),fun(X29,X29))),X30)),X31,X28,X29)),s('type.list.list'(X28),X33)))))) )),
  inference(superposition,[],[f357,f303])).
fof(f19371,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20,X18] : (s(X19,happ(s(fun('type.list.list'(X18),X19),sK16('_dst_x0x1_2'(s(fun(X20,fun('type.list.list'(X18),fun(X19,X19))),X21),s(fun(X18,X20),happ(s(fun(X22,fun(X18,X20)),X23),s(X22,X24)))),X25,X18,X19)),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X26),s('type.list.list'(X18),X27))))) = s(X19,happ(s(fun(X19,X19),happ(s(fun('type.list.list'(X18),fun(X19,X19)),happ(s(fun(X18,fun('type.list.list'(X18),fun(X19,X19))),happ(s(fun(X22,fun(X18,fun('type.list.list'(X18),fun(X19,X19)))),'_dst_x00x11_2'(s(fun(X20,fun('type.list.list'(X18),fun(X19,X19))),X21),s(fun(X22,fun(X18,X20)),X23))),s(X22,X24))),s(X18,X26))),s('type.list.list'(X18),X27))),s(X19,happ(s(fun('type.list.list'(X18),X19),sK16('_dst_x0x1_2'(s(fun(X20,fun('type.list.list'(X18),fun(X19,X19))),X21),s(fun(X18,X20),happ(s(fun(X22,fun(X18,X20)),X23),s(X22,X24)))),X25,X18,X19)),s('type.list.list'(X18),X27)))))) )),
  inference(superposition,[],[f357,f390])).
fof(f19370,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X9,happ(s(fun('type.list.list'(X8),X9),sK16(happ(s(fun(X10,fun(X8,fun('type.list.list'(X8),fun(X9,X9)))),'_dst_x00x11_2'(s(fun(X11,fun('type.list.list'(X8),fun(X9,X9))),X12),s(fun(X10,fun(X8,X11)),X13))),s(X10,X14)),X15,X8,X9)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X16),s('type.list.list'(X8),X17))))) = s(X9,happ(s(fun(X9,X9),happ(s(fun('type.list.list'(X8),fun(X9,X9)),happ(s(fun(X8,fun('type.list.list'(X8),fun(X9,X9))),'_dst_x0x1_2'(s(fun(X11,fun('type.list.list'(X8),fun(X9,X9))),X12),s(fun(X8,X11),happ(s(fun(X10,fun(X8,X11)),X13),s(X10,X14))))),s(X8,X16))),s('type.list.list'(X8),X17))),s(X9,happ(s(fun('type.list.list'(X8),X9),sK16(happ(s(fun(X10,fun(X8,fun('type.list.list'(X8),fun(X9,X9)))),'_dst_x00x11_2'(s(fun(X11,fun('type.list.list'(X8),fun(X9,X9))),X12),s(fun(X10,fun(X8,X11)),X13))),s(X10,X14)),X15,X8,X9)),s('type.list.list'(X8),X17)))))) )),
  inference(superposition,[],[f357,f390])).
fof(f19369,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun('type.list.list'(X0),X1),sK16(happ(s(fun(fun(X2,fun('type.list.list'(X0),fun(X1,X1))),fun(X0,fun('type.list.list'(X0),fun(X1,X1)))),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,fun('type.list.list'(X0),fun(X1,X1))),X4)),X5,X0,X1)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X7))))) = s(X1,happ(s(fun(X1,X1),happ(s(fun('type.list.list'(X0),fun(X1,X1)),happ(s(fun(X0,fun('type.list.list'(X0),fun(X1,X1))),'_dst_x0x1_2'(s(fun(X2,fun('type.list.list'(X0),fun(X1,X1))),X4),s(fun(X0,X2),X3))),s(X0,X6))),s('type.list.list'(X0),X7))),s(X1,happ(s(fun('type.list.list'(X0),X1),sK16(happ(s(fun(fun(X2,fun('type.list.list'(X0),fun(X1,X1))),fun(X0,fun('type.list.list'(X0),fun(X1,X1)))),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,fun('type.list.list'(X0),fun(X1,X1))),X4)),X5,X0,X1)),s('type.list.list'(X0),X7)))))) )),
  inference(superposition,[],[f357,f364])).
fof(f19362,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X115),bool),sK16(X116,happ(s(fun('type.list.list'(X113),bool),sK16(X114,sK6('_i_0_0','_i_0_0',bool),X113,bool)),s('type.list.list'(X113),'const.list.NIL_0')),X115,bool))))) ) | $spl28),
  inference(subsumption_resolution,[],[f19281,f256])).
fof(f19281,plain,(
  ( ! [X116,X114,X115,X113] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X115),bool),sK16(X116,happ(s(fun('type.list.list'(X113),bool),sK16(X114,sK6('_i_0_0','_i_0_0',bool),X113,bool)),s('type.list.list'(X113),'const.list.NIL_0')),X115,bool))))) ) | $spl28),
  inference(superposition,[],[f3944,f7238])).
fof(f19354,plain,(
  ( ! [X43,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.list.list'(X42),bool),sK16(X43,sK6('_i_0_0','_i_0_0',bool),X42,bool)),s('type.list.list'(X42),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X44)) ) | $spl28),
  inference(subsumption_resolution,[],[f19255,f256])).
fof(f19255,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.list.list'(X42),bool),sK16(X43,sK6('_i_0_0','_i_0_0',bool),X42,bool)),s('type.list.list'(X42),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X44)) ) | $spl28),
  inference(superposition,[],[f434,f7238])).
fof(f19347,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'(X8),bool),sK16(X9,sK6('_i_0_0','_i_0_0',bool),X8,bool)),s('type.list.list'(X8),'const.min.@_1'(s(fun('type.list.list'(X8),bool),sK16(X9,sK6('_i_0_0','_i_0_0',bool),X8,bool)))))))) ) | $spl28),
  inference(subsumption_resolution,[],[f19243,f256])).
fof(f19243,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'(X8),bool),sK16(X9,sK6('_i_0_0','_i_0_0',bool),X8,bool)),s('type.list.list'(X8),'const.min.@_1'(s(fun('type.list.list'(X8),bool),sK16(X9,sK6('_i_0_0','_i_0_0',bool),X8,bool)))))))) ) | $spl28),
  inference(superposition,[],[f311,f7238])).
fof(f19344,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'(X3),bool),X5),s('type.list.list'(X3),sK6(sK16(X4,sK6('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3)))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),sK16(X4,sK6('_i_0_0','_i_0_0',bool),X3,bool)),s('type.list.list'(X3),sK5(sK16(X4,sK6('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3))))))) ) | $spl28),
  inference(subsumption_resolution,[],[f19241,f256])).
fof(f19241,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),X5),s('type.list.list'(X3),sK6(sK16(X4,sK6('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3)))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),sK16(X4,sK6('_i_0_0','_i_0_0',bool),X3,bool)),s('type.list.list'(X3),sK5(sK16(X4,sK6('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3))))))) ) | $spl28),
  inference(superposition,[],[f314,f7238])).
fof(f19343,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool),X0)),s('type.list.list'(X0),sK2(sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),X2))))) ) | $spl28),
  inference(subsumption_resolution,[],[f19240,f256])).
fof(f19240,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool),X0)),s('type.list.list'(X0),sK2(sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),X2))))) ) | $spl28),
  inference(superposition,[],[f305,f7238])).
fof(f18988,plain,(
  ( ! [X662,X664,X663,X665] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X665))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int','const.ind_type.FCONS_3'(s('type.integer.int',X662),s(fun('type.num.num','type.integer.int'),X663),s('type.num.num',X664))))) | s('type.integer.int',X665) = s('type.integer.int',happ(s(fun('type.num.num','type.integer.int'),happ(s(fun(fun('type.num.num','type.integer.int'),fun('type.num.num','type.integer.int')),happ(s(fun('type.integer.int',fun(fun('type.num.num','type.integer.int'),fun('type.num.num','type.integer.int'))),'const.ind_type.FCONS_0'),s('type.integer.int',X662))),s(fun('type.num.num','type.integer.int'),X663))),s('type.num.num',X664)))) )),
  inference(superposition,[],[f332,f320])).
fof(f18978,plain,(
  ( ! [X621,X623,X624,X622] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X624))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X621),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X622),s('type.num.num',X623))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X624) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),happ(s(fun(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),fun(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))))),'const.ind_type.FCONS_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X621))),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X622))),s('type.num.num',X623)))) )),
  inference(superposition,[],[f334,f320])).
fof(f19073,plain,(
  ( ! [X536,X532,X534,X533,X535,X531] : (s(fun(X531,X532),X536) = s(fun(X531,X532),'const.ind_type.FCONS_3'(s(fun(X531,X532),X533),s(fun('type.num.num',fun(X531,X532)),X534),s('type.num.num',X535))) | s(X532,happ(s(fun(X531,X532),X536),s(X531,sK13(happ(s(fun('type.num.num',fun(X531,X532)),happ(s(fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532))),happ(s(fun(fun(X531,X532),fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532)))),'const.ind_type.FCONS_0'),s(fun(X531,X532),X533))),s(fun('type.num.num',fun(X531,X532)),X534))),s('type.num.num',X535)),X536,X531,X532)))) != s(X532,happ(s(fun(X531,X532),'const.ind_type.FCONS_3'(s(fun(X531,X532),X533),s(fun('type.num.num',fun(X531,X532)),X534),s('type.num.num',X535))),s(X531,sK13(happ(s(fun('type.num.num',fun(X531,X532)),happ(s(fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532))),happ(s(fun(fun(X531,X532),fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532)))),'const.ind_type.FCONS_0'),s(fun(X531,X532),X533))),s(fun('type.num.num',fun(X531,X532)),X534))),s('type.num.num',X535)),X536,X531,X532))))) )),
  inference(forward_demodulation,[],[f18965,f320])).
fof(f18965,plain,(
  ( ! [X536,X532,X534,X533,X535,X531] : (s(X532,happ(s(fun(X531,X532),X536),s(X531,sK13(happ(s(fun('type.num.num',fun(X531,X532)),happ(s(fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532))),happ(s(fun(fun(X531,X532),fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532)))),'const.ind_type.FCONS_0'),s(fun(X531,X532),X533))),s(fun('type.num.num',fun(X531,X532)),X534))),s('type.num.num',X535)),X536,X531,X532)))) != s(X532,happ(s(fun(X531,X532),'const.ind_type.FCONS_3'(s(fun(X531,X532),X533),s(fun('type.num.num',fun(X531,X532)),X534),s('type.num.num',X535))),s(X531,sK13(happ(s(fun('type.num.num',fun(X531,X532)),happ(s(fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532))),happ(s(fun(fun(X531,X532),fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532)))),'const.ind_type.FCONS_0'),s(fun(X531,X532),X533))),s(fun('type.num.num',fun(X531,X532)),X534))),s('type.num.num',X535)),X536,X531,X532)))) | s(fun(X531,X532),X536) = s(fun(X531,X532),happ(s(fun('type.num.num',fun(X531,X532)),happ(s(fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532))),happ(s(fun(fun(X531,X532),fun(fun('type.num.num',fun(X531,X532)),fun('type.num.num',fun(X531,X532)))),'const.ind_type.FCONS_0'),s(fun(X531,X532),X533))),s(fun('type.num.num',fun(X531,X532)),X534))),s('type.num.num',X535)))) )),
  inference(superposition,[],[f352,f320])).
fof(f19072,plain,(
  ( ! [X528,X530,X526,X529,X525,X527] : (s(fun(X525,X526),X530) = s(fun(X525,X526),'const.ind_type.FCONS_3'(s(fun(X525,X526),X527),s(fun('type.num.num',fun(X525,X526)),X528),s('type.num.num',X529))) | s(X526,happ(s(fun(X525,X526),X530),s(X525,sK13(X530,happ(s(fun('type.num.num',fun(X525,X526)),happ(s(fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526))),happ(s(fun(fun(X525,X526),fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526)))),'const.ind_type.FCONS_0'),s(fun(X525,X526),X527))),s(fun('type.num.num',fun(X525,X526)),X528))),s('type.num.num',X529)),X525,X526)))) != s(X526,happ(s(fun(X525,X526),'const.ind_type.FCONS_3'(s(fun(X525,X526),X527),s(fun('type.num.num',fun(X525,X526)),X528),s('type.num.num',X529))),s(X525,sK13(X530,happ(s(fun('type.num.num',fun(X525,X526)),happ(s(fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526))),happ(s(fun(fun(X525,X526),fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526)))),'const.ind_type.FCONS_0'),s(fun(X525,X526),X527))),s(fun('type.num.num',fun(X525,X526)),X528))),s('type.num.num',X529)),X525,X526))))) )),
  inference(forward_demodulation,[],[f18964,f320])).
fof(f18964,plain,(
  ( ! [X528,X530,X526,X529,X525,X527] : (s(X526,happ(s(fun(X525,X526),X530),s(X525,sK13(X530,happ(s(fun('type.num.num',fun(X525,X526)),happ(s(fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526))),happ(s(fun(fun(X525,X526),fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526)))),'const.ind_type.FCONS_0'),s(fun(X525,X526),X527))),s(fun('type.num.num',fun(X525,X526)),X528))),s('type.num.num',X529)),X525,X526)))) != s(X526,happ(s(fun(X525,X526),'const.ind_type.FCONS_3'(s(fun(X525,X526),X527),s(fun('type.num.num',fun(X525,X526)),X528),s('type.num.num',X529))),s(X525,sK13(X530,happ(s(fun('type.num.num',fun(X525,X526)),happ(s(fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526))),happ(s(fun(fun(X525,X526),fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526)))),'const.ind_type.FCONS_0'),s(fun(X525,X526),X527))),s(fun('type.num.num',fun(X525,X526)),X528))),s('type.num.num',X529)),X525,X526)))) | s(fun(X525,X526),X530) = s(fun(X525,X526),happ(s(fun('type.num.num',fun(X525,X526)),happ(s(fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526))),happ(s(fun(fun(X525,X526),fun(fun('type.num.num',fun(X525,X526)),fun('type.num.num',fun(X525,X526)))),'const.ind_type.FCONS_0'),s(fun(X525,X526),X527))),s(fun('type.num.num',fun(X525,X526)),X528))),s('type.num.num',X529)))) )),
  inference(superposition,[],[f352,f320])).
fof(f18957,plain,(
  ( ! [X476,X478,X472,X474,X471,X475,X477,X473] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X471,X472),'const.ind_type.FCONS_3'(s(fun(X471,X472),X473),s(fun('type.num.num',fun(X471,X472)),X474),s('type.num.num',X475))),s(fun(X472,X471),X476)))) | ~p(s(bool,happ(s(fun(X471,bool),X477),s(X471,happ(s(fun(X472,X471),X476),s(X472,X478)))))) | p(s(bool,happ(s(fun(X471,bool),X477),s(X471,sK11(X477,happ(s(fun('type.num.num',fun(X471,X472)),happ(s(fun(fun('type.num.num',fun(X471,X472)),fun('type.num.num',fun(X471,X472))),happ(s(fun(fun(X471,X472),fun(fun('type.num.num',fun(X471,X472)),fun('type.num.num',fun(X471,X472)))),'const.ind_type.FCONS_0'),s(fun(X471,X472),X473))),s(fun('type.num.num',fun(X471,X472)),X474))),s('type.num.num',X475)),X476,X472,X471)))))) )),
  inference(superposition,[],[f347,f320])).
fof(f19065,plain,(
  ( ! [X466,X463,X469,X465,X467,X468,X470,X464] : (~p(s(bool,happ(s(fun(X464,bool),X469),s(X464,happ(s(fun(X463,X464),'const.ind_type.FCONS_3'(s(fun(X463,X464),X465),s(fun('type.num.num',fun(X463,X464)),X466),s('type.num.num',X467))),s(X463,X470)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X464,X463),X468),s(fun(X463,X464),'const.ind_type.FCONS_3'(s(fun(X463,X464),X465),s(fun('type.num.num',fun(X463,X464)),X466),s('type.num.num',X467)))))) | p(s(bool,happ(s(fun(X464,bool),X469),s(X464,sK11(X469,X468,happ(s(fun('type.num.num',fun(X463,X464)),happ(s(fun(fun('type.num.num',fun(X463,X464)),fun('type.num.num',fun(X463,X464))),happ(s(fun(fun(X463,X464),fun(fun('type.num.num',fun(X463,X464)),fun('type.num.num',fun(X463,X464)))),'const.ind_type.FCONS_0'),s(fun(X463,X464),X465))),s(fun('type.num.num',fun(X463,X464)),X466))),s('type.num.num',X467)),X463,X464)))))) )),
  inference(forward_demodulation,[],[f18956,f320])).
fof(f18956,plain,(
  ( ! [X466,X463,X469,X465,X467,X468,X470,X464] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X464,X463),X468),s(fun(X463,X464),'const.ind_type.FCONS_3'(s(fun(X463,X464),X465),s(fun('type.num.num',fun(X463,X464)),X466),s('type.num.num',X467)))))) | ~p(s(bool,happ(s(fun(X464,bool),X469),s(X464,happ(s(fun(X463,X464),happ(s(fun('type.num.num',fun(X463,X464)),happ(s(fun(fun('type.num.num',fun(X463,X464)),fun('type.num.num',fun(X463,X464))),happ(s(fun(fun(X463,X464),fun(fun('type.num.num',fun(X463,X464)),fun('type.num.num',fun(X463,X464)))),'const.ind_type.FCONS_0'),s(fun(X463,X464),X465))),s(fun('type.num.num',fun(X463,X464)),X466))),s('type.num.num',X467))),s(X463,X470)))))) | p(s(bool,happ(s(fun(X464,bool),X469),s(X464,sK11(X469,X468,happ(s(fun('type.num.num',fun(X463,X464)),happ(s(fun(fun('type.num.num',fun(X463,X464)),fun('type.num.num',fun(X463,X464))),happ(s(fun(fun(X463,X464),fun(fun('type.num.num',fun(X463,X464)),fun('type.num.num',fun(X463,X464)))),'const.ind_type.FCONS_0'),s(fun(X463,X464),X465))),s(fun('type.num.num',fun(X463,X464)),X466))),s('type.num.num',X467)),X463,X464)))))) )),
  inference(superposition,[],[f347,f320])).
fof(f18955,plain,(
  ( ! [X455,X461,X457,X459,X460,X462,X456,X458] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X455,X456),'const.ind_type.FCONS_3'(s(fun(X455,X456),X457),s(fun('type.num.num',fun(X455,X456)),X458),s('type.num.num',X459))),s(fun(X456,X455),X460)))) | ~p(s(bool,happ(s(fun(X455,bool),X461),s(X455,X462)))) | p(s(bool,happ(s(fun(X455,bool),X461),s(X455,happ(s(fun(X456,X455),X460),s(X456,sK10(X461,happ(s(fun('type.num.num',fun(X455,X456)),happ(s(fun(fun('type.num.num',fun(X455,X456)),fun('type.num.num',fun(X455,X456))),happ(s(fun(fun(X455,X456),fun(fun('type.num.num',fun(X455,X456)),fun('type.num.num',fun(X455,X456)))),'const.ind_type.FCONS_0'),s(fun(X455,X456),X457))),s(fun('type.num.num',fun(X455,X456)),X458))),s('type.num.num',X459)),X460,X456,X455)))))))) )),
  inference(superposition,[],[f346,f320])).
fof(f19064,plain,(
  ( ! [X447,X453,X449,X451,X452,X454,X448,X450] : (p(s(bool,happ(s(fun(X448,bool),X453),s(X448,happ(s(fun(X447,X448),'const.ind_type.FCONS_3'(s(fun(X447,X448),X449),s(fun('type.num.num',fun(X447,X448)),X450),s('type.num.num',X451))),s(X447,sK10(X453,X452,happ(s(fun('type.num.num',fun(X447,X448)),happ(s(fun(fun('type.num.num',fun(X447,X448)),fun('type.num.num',fun(X447,X448))),happ(s(fun(fun(X447,X448),fun(fun('type.num.num',fun(X447,X448)),fun('type.num.num',fun(X447,X448)))),'const.ind_type.FCONS_0'),s(fun(X447,X448),X449))),s(fun('type.num.num',fun(X447,X448)),X450))),s('type.num.num',X451)),X447,X448))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X448,X447),X452),s(fun(X447,X448),'const.ind_type.FCONS_3'(s(fun(X447,X448),X449),s(fun('type.num.num',fun(X447,X448)),X450),s('type.num.num',X451)))))) | ~p(s(bool,happ(s(fun(X448,bool),X453),s(X448,X454))))) )),
  inference(forward_demodulation,[],[f18954,f320])).
fof(f18954,plain,(
  ( ! [X447,X453,X449,X451,X452,X454,X448,X450] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X448,X447),X452),s(fun(X447,X448),'const.ind_type.FCONS_3'(s(fun(X447,X448),X449),s(fun('type.num.num',fun(X447,X448)),X450),s('type.num.num',X451)))))) | ~p(s(bool,happ(s(fun(X448,bool),X453),s(X448,X454)))) | p(s(bool,happ(s(fun(X448,bool),X453),s(X448,happ(s(fun(X447,X448),happ(s(fun('type.num.num',fun(X447,X448)),happ(s(fun(fun('type.num.num',fun(X447,X448)),fun('type.num.num',fun(X447,X448))),happ(s(fun(fun(X447,X448),fun(fun('type.num.num',fun(X447,X448)),fun('type.num.num',fun(X447,X448)))),'const.ind_type.FCONS_0'),s(fun(X447,X448),X449))),s(fun('type.num.num',fun(X447,X448)),X450))),s('type.num.num',X451))),s(X447,sK10(X453,X452,happ(s(fun('type.num.num',fun(X447,X448)),happ(s(fun(fun('type.num.num',fun(X447,X448)),fun('type.num.num',fun(X447,X448))),happ(s(fun(fun(X447,X448),fun(fun('type.num.num',fun(X447,X448)),fun('type.num.num',fun(X447,X448)))),'const.ind_type.FCONS_0'),s(fun(X447,X448),X449))),s(fun('type.num.num',fun(X447,X448)),X450))),s('type.num.num',X451)),X447,X448)))))))) )),
  inference(superposition,[],[f346,f320])).
fof(f18953,plain,(
  ( ! [X445,X441,X443,X444,X446,X440,X442,X439] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X439,X440),'const.ind_type.FCONS_3'(s(fun(X439,X440),X441),s(fun('type.num.num',fun(X439,X440)),X442),s('type.num.num',X443))),s(fun(X440,X439),X444)))) | ~p(s(bool,happ(s(fun(X439,bool),X445),s(X439,happ(s(fun(X440,X439),X444),s(X440,sK9(X445,happ(s(fun('type.num.num',fun(X439,X440)),happ(s(fun(fun('type.num.num',fun(X439,X440)),fun('type.num.num',fun(X439,X440))),happ(s(fun(fun(X439,X440),fun(fun('type.num.num',fun(X439,X440)),fun('type.num.num',fun(X439,X440)))),'const.ind_type.FCONS_0'),s(fun(X439,X440),X441))),s(fun('type.num.num',fun(X439,X440)),X442))),s('type.num.num',X443)),X444,X440,X439))))))) | p(s(bool,happ(s(fun(X439,bool),X445),s(X439,X446))))) )),
  inference(superposition,[],[f345,f320])).
fof(f19063,plain,(
  ( ! [X436,X438,X432,X434,X431,X437,X433,X435] : (~p(s(bool,happ(s(fun(X432,bool),X437),s(X432,happ(s(fun(X431,X432),'const.ind_type.FCONS_3'(s(fun(X431,X432),X433),s(fun('type.num.num',fun(X431,X432)),X434),s('type.num.num',X435))),s(X431,sK9(X437,X436,happ(s(fun('type.num.num',fun(X431,X432)),happ(s(fun(fun('type.num.num',fun(X431,X432)),fun('type.num.num',fun(X431,X432))),happ(s(fun(fun(X431,X432),fun(fun('type.num.num',fun(X431,X432)),fun('type.num.num',fun(X431,X432)))),'const.ind_type.FCONS_0'),s(fun(X431,X432),X433))),s(fun('type.num.num',fun(X431,X432)),X434))),s('type.num.num',X435)),X431,X432))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X432,X431),X436),s(fun(X431,X432),'const.ind_type.FCONS_3'(s(fun(X431,X432),X433),s(fun('type.num.num',fun(X431,X432)),X434),s('type.num.num',X435)))))) | p(s(bool,happ(s(fun(X432,bool),X437),s(X432,X438))))) )),
  inference(forward_demodulation,[],[f18952,f320])).
fof(f18952,plain,(
  ( ! [X436,X438,X432,X434,X431,X437,X433,X435] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X432,X431),X436),s(fun(X431,X432),'const.ind_type.FCONS_3'(s(fun(X431,X432),X433),s(fun('type.num.num',fun(X431,X432)),X434),s('type.num.num',X435)))))) | ~p(s(bool,happ(s(fun(X432,bool),X437),s(X432,happ(s(fun(X431,X432),happ(s(fun('type.num.num',fun(X431,X432)),happ(s(fun(fun('type.num.num',fun(X431,X432)),fun('type.num.num',fun(X431,X432))),happ(s(fun(fun(X431,X432),fun(fun('type.num.num',fun(X431,X432)),fun('type.num.num',fun(X431,X432)))),'const.ind_type.FCONS_0'),s(fun(X431,X432),X433))),s(fun('type.num.num',fun(X431,X432)),X434))),s('type.num.num',X435))),s(X431,sK9(X437,X436,happ(s(fun('type.num.num',fun(X431,X432)),happ(s(fun(fun('type.num.num',fun(X431,X432)),fun('type.num.num',fun(X431,X432))),happ(s(fun(fun(X431,X432),fun(fun('type.num.num',fun(X431,X432)),fun('type.num.num',fun(X431,X432)))),'const.ind_type.FCONS_0'),s(fun(X431,X432),X433))),s(fun('type.num.num',fun(X431,X432)),X434))),s('type.num.num',X435)),X431,X432))))))) | p(s(bool,happ(s(fun(X432,bool),X437),s(X432,X438))))) )),
  inference(superposition,[],[f345,f320])).
fof(f18951,plain,(
  ( ! [X428,X430,X424,X426,X423,X429,X425,X427] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X423,X424),'const.ind_type.FCONS_3'(s(fun(X423,X424),X425),s(fun('type.num.num',fun(X423,X424)),X426),s('type.num.num',X427))),s(fun(X424,X423),X428)))) | ~p(s(bool,happ(s(fun(X423,bool),X429),s(X423,sK8(X429,happ(s(fun('type.num.num',fun(X423,X424)),happ(s(fun(fun('type.num.num',fun(X423,X424)),fun('type.num.num',fun(X423,X424))),happ(s(fun(fun(X423,X424),fun(fun('type.num.num',fun(X423,X424)),fun('type.num.num',fun(X423,X424)))),'const.ind_type.FCONS_0'),s(fun(X423,X424),X425))),s(fun('type.num.num',fun(X423,X424)),X426))),s('type.num.num',X427)),X428,X424,X423))))) | p(s(bool,happ(s(fun(X423,bool),X429),s(X423,happ(s(fun(X424,X423),X428),s(X424,X430))))))) )),
  inference(superposition,[],[f344,f320])).
fof(f19062,plain,(
  ( ! [X420,X422,X416,X418,X415,X421,X417,X419] : (p(s(bool,happ(s(fun(X416,bool),X421),s(X416,happ(s(fun(X415,X416),'const.ind_type.FCONS_3'(s(fun(X415,X416),X417),s(fun('type.num.num',fun(X415,X416)),X418),s('type.num.num',X419))),s(X415,X422)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X416,X415),X420),s(fun(X415,X416),'const.ind_type.FCONS_3'(s(fun(X415,X416),X417),s(fun('type.num.num',fun(X415,X416)),X418),s('type.num.num',X419)))))) | ~p(s(bool,happ(s(fun(X416,bool),X421),s(X416,sK8(X421,X420,happ(s(fun('type.num.num',fun(X415,X416)),happ(s(fun(fun('type.num.num',fun(X415,X416)),fun('type.num.num',fun(X415,X416))),happ(s(fun(fun(X415,X416),fun(fun('type.num.num',fun(X415,X416)),fun('type.num.num',fun(X415,X416)))),'const.ind_type.FCONS_0'),s(fun(X415,X416),X417))),s(fun('type.num.num',fun(X415,X416)),X418))),s('type.num.num',X419)),X415,X416)))))) )),
  inference(forward_demodulation,[],[f18950,f320])).
fof(f18950,plain,(
  ( ! [X420,X422,X416,X418,X415,X421,X417,X419] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X416,X415),X420),s(fun(X415,X416),'const.ind_type.FCONS_3'(s(fun(X415,X416),X417),s(fun('type.num.num',fun(X415,X416)),X418),s('type.num.num',X419)))))) | ~p(s(bool,happ(s(fun(X416,bool),X421),s(X416,sK8(X421,X420,happ(s(fun('type.num.num',fun(X415,X416)),happ(s(fun(fun('type.num.num',fun(X415,X416)),fun('type.num.num',fun(X415,X416))),happ(s(fun(fun(X415,X416),fun(fun('type.num.num',fun(X415,X416)),fun('type.num.num',fun(X415,X416)))),'const.ind_type.FCONS_0'),s(fun(X415,X416),X417))),s(fun('type.num.num',fun(X415,X416)),X418))),s('type.num.num',X419)),X415,X416))))) | p(s(bool,happ(s(fun(X416,bool),X421),s(X416,happ(s(fun(X415,X416),happ(s(fun('type.num.num',fun(X415,X416)),happ(s(fun(fun('type.num.num',fun(X415,X416)),fun('type.num.num',fun(X415,X416))),happ(s(fun(fun(X415,X416),fun(fun('type.num.num',fun(X415,X416)),fun('type.num.num',fun(X415,X416)))),'const.ind_type.FCONS_0'),s(fun(X415,X416),X417))),s(fun('type.num.num',fun(X415,X416)),X418))),s('type.num.num',X419))),s(X415,X422))))))) )),
  inference(superposition,[],[f344,f320])).
fof(f19061,plain,(
  ( ! [X412,X414,X413,X411] : (~p(s(bool,happ(s(fun('type.list.list'(X411),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X411),bool),X412),s(fun('type.num.num',fun('type.list.list'(X411),bool)),X413),s('type.num.num',X414))),s('type.list.list'(X411),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X411),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X411),bool),X412),s(fun('type.num.num',fun('type.list.list'(X411),bool)),X413),s('type.num.num',X414))),s('type.list.list'(X411),sK2(happ(s(fun('type.num.num',fun('type.list.list'(X411),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X411),bool)),fun('type.num.num',fun('type.list.list'(X411),bool))),happ(s(fun(fun('type.list.list'(X411),bool),fun(fun('type.num.num',fun('type.list.list'(X411),bool)),fun('type.num.num',fun('type.list.list'(X411),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X411),bool),X412))),s(fun('type.num.num',fun('type.list.list'(X411),bool)),X413))),s('type.num.num',X414)),X411)))))) )),
  inference(forward_demodulation,[],[f18949,f320])).
fof(f18949,plain,(
  ( ! [X412,X414,X413,X411] : (p(s(bool,happ(s(fun('type.list.list'(X411),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X411),bool),X412),s(fun('type.num.num',fun('type.list.list'(X411),bool)),X413),s('type.num.num',X414))),s('type.list.list'(X411),sK2(happ(s(fun('type.num.num',fun('type.list.list'(X411),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X411),bool)),fun('type.num.num',fun('type.list.list'(X411),bool))),happ(s(fun(fun('type.list.list'(X411),bool),fun(fun('type.num.num',fun('type.list.list'(X411),bool)),fun('type.num.num',fun('type.list.list'(X411),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X411),bool),X412))),s(fun('type.num.num',fun('type.list.list'(X411),bool)),X413))),s('type.num.num',X414)),X411))))) | ~p(s(bool,happ(s(fun('type.list.list'(X411),bool),happ(s(fun('type.num.num',fun('type.list.list'(X411),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X411),bool)),fun('type.num.num',fun('type.list.list'(X411),bool))),happ(s(fun(fun('type.list.list'(X411),bool),fun(fun('type.num.num',fun('type.list.list'(X411),bool)),fun('type.num.num',fun('type.list.list'(X411),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X411),bool),X412))),s(fun('type.num.num',fun('type.list.list'(X411),bool)),X413))),s('type.num.num',X414))),s('type.list.list'(X411),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f320])).
fof(f19060,plain,(
  ( ! [X408,X410,X407,X409,X406] : (p(s(bool,happ(s(fun('type.list.list'(X406),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X406),bool),X407),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408),s('type.num.num',X409))),s('type.list.list'(X406),X410)))) | ~p(s(bool,happ(s(fun('type.list.list'(X406),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X406),bool),X407),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408),s('type.num.num',X409))),s('type.list.list'(X406),'const.list.CONS_2'(s(X406,sK3(happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409)),X406)),s('type.list.list'(X406),sK2(happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409)),X406))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X406),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X406),bool),X407),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408),s('type.num.num',X409))),s('type.list.list'(X406),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f19059,f320])).
fof(f19059,plain,(
  ( ! [X408,X410,X407,X409,X406] : (~p(s(bool,happ(s(fun('type.list.list'(X406),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X406),bool),X407),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408),s('type.num.num',X409))),s('type.list.list'(X406),'const.list.CONS_2'(s(X406,sK3(happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409)),X406)),s('type.list.list'(X406),sK2(happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409)),X406))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X406),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X406),bool),X407),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408),s('type.num.num',X409))),s('type.list.list'(X406),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X406),bool),happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409))),s('type.list.list'(X406),X410))))) )),
  inference(forward_demodulation,[],[f18948,f320])).
fof(f18948,plain,(
  ( ! [X408,X410,X407,X409,X406] : (~p(s(bool,happ(s(fun('type.list.list'(X406),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X406),bool),X407),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408),s('type.num.num',X409))),s('type.list.list'(X406),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X406),bool),happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409))),s('type.list.list'(X406),'const.list.CONS_2'(s(X406,sK3(happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409)),X406)),s('type.list.list'(X406),sK2(happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409)),X406))))))) | p(s(bool,happ(s(fun('type.list.list'(X406),bool),happ(s(fun('type.num.num',fun('type.list.list'(X406),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool))),happ(s(fun(fun('type.list.list'(X406),bool),fun(fun('type.num.num',fun('type.list.list'(X406),bool)),fun('type.num.num',fun('type.list.list'(X406),bool)))),'const.ind_type.FCONS_0'),s(fun('type.list.list'(X406),bool),X407))),s(fun('type.num.num',fun('type.list.list'(X406),bool)),X408))),s('type.num.num',X409))),s('type.list.list'(X406),X410))))) )),
  inference(superposition,[],[f305,f320])).
fof(f18945,plain,(
  ( ! [X391,X393,X395,X392,X394] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X391,bool),'const.ind_type.FCONS_3'(s(fun(X391,bool),X392),s(fun('type.num.num',fun(X391,bool)),X393),s('type.num.num',X394))))) | s(X391,X395) = s(X391,sK4(X395,happ(s(fun('type.num.num',fun(X391,bool)),happ(s(fun(fun('type.num.num',fun(X391,bool)),fun('type.num.num',fun(X391,bool))),happ(s(fun(fun(X391,bool),fun(fun('type.num.num',fun(X391,bool)),fun('type.num.num',fun(X391,bool)))),'const.ind_type.FCONS_0'),s(fun(X391,bool),X392))),s(fun('type.num.num',fun(X391,bool)),X393))),s('type.num.num',X394)),X391))) )),
  inference(superposition,[],[f823,f320])).
fof(f19056,plain,(
  ( ! [X389,X385,X387,X388,X390,X386] : (p(s(bool,happ(s(fun(X385,bool),'const.ind_type.FCONS_3'(s(fun(X385,bool),X386),s(fun('type.num.num',fun(X385,bool)),X387),s('type.num.num',X388))),s(X385,sK6(X389,happ(s(fun('type.num.num',fun(X385,bool)),happ(s(fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool))),happ(s(fun(fun(X385,bool),fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool)))),'const.ind_type.FCONS_0'),s(fun(X385,bool),X386))),s(fun('type.num.num',fun(X385,bool)),X387))),s('type.num.num',X388)),X385))))) | ~p(s(bool,happ(s(fun(X385,bool),'const.ind_type.FCONS_3'(s(fun(X385,bool),X386),s(fun('type.num.num',fun(X385,bool)),X387),s('type.num.num',X388))),s(X385,sK5(X389,happ(s(fun('type.num.num',fun(X385,bool)),happ(s(fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool))),happ(s(fun(fun(X385,bool),fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool)))),'const.ind_type.FCONS_0'),s(fun(X385,bool),X386))),s(fun('type.num.num',fun(X385,bool)),X387))),s('type.num.num',X388)),X385))))) | ~p(s(bool,happ(s(fun(X385,bool),X389),s(X385,X390))))) )),
  inference(forward_demodulation,[],[f18944,f320])).
fof(f18944,plain,(
  ( ! [X389,X385,X387,X388,X390,X386] : (~p(s(bool,happ(s(fun(X385,bool),'const.ind_type.FCONS_3'(s(fun(X385,bool),X386),s(fun('type.num.num',fun(X385,bool)),X387),s('type.num.num',X388))),s(X385,sK5(X389,happ(s(fun('type.num.num',fun(X385,bool)),happ(s(fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool))),happ(s(fun(fun(X385,bool),fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool)))),'const.ind_type.FCONS_0'),s(fun(X385,bool),X386))),s(fun('type.num.num',fun(X385,bool)),X387))),s('type.num.num',X388)),X385))))) | ~p(s(bool,happ(s(fun(X385,bool),X389),s(X385,X390)))) | p(s(bool,happ(s(fun(X385,bool),happ(s(fun('type.num.num',fun(X385,bool)),happ(s(fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool))),happ(s(fun(fun(X385,bool),fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool)))),'const.ind_type.FCONS_0'),s(fun(X385,bool),X386))),s(fun('type.num.num',fun(X385,bool)),X387))),s('type.num.num',X388))),s(X385,sK6(X389,happ(s(fun('type.num.num',fun(X385,bool)),happ(s(fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool))),happ(s(fun(fun(X385,bool),fun(fun('type.num.num',fun(X385,bool)),fun('type.num.num',fun(X385,bool)))),'const.ind_type.FCONS_0'),s(fun(X385,bool),X386))),s(fun('type.num.num',fun(X385,bool)),X387))),s('type.num.num',X388)),X385)))))) )),
  inference(superposition,[],[f315,f320])).
fof(f19055,plain,(
  ( ! [X383,X379,X380,X382,X384,X381] : (p(s(bool,happ(s(fun(X379,bool),'const.ind_type.FCONS_3'(s(fun(X379,bool),X380),s(fun('type.num.num',fun(X379,bool)),X381),s('type.num.num',X382))),s(X379,sK5(happ(s(fun('type.num.num',fun(X379,bool)),happ(s(fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool))),happ(s(fun(fun(X379,bool),fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool)))),'const.ind_type.FCONS_0'),s(fun(X379,bool),X380))),s(fun('type.num.num',fun(X379,bool)),X381))),s('type.num.num',X382)),X384,X379))))) | ~p(s(bool,happ(s(fun(X379,bool),'const.ind_type.FCONS_3'(s(fun(X379,bool),X380),s(fun('type.num.num',fun(X379,bool)),X381),s('type.num.num',X382))),s(X379,X383)))) | p(s(bool,happ(s(fun(X379,bool),X384),s(X379,sK6(happ(s(fun('type.num.num',fun(X379,bool)),happ(s(fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool))),happ(s(fun(fun(X379,bool),fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool)))),'const.ind_type.FCONS_0'),s(fun(X379,bool),X380))),s(fun('type.num.num',fun(X379,bool)),X381))),s('type.num.num',X382)),X384,X379)))))) )),
  inference(forward_demodulation,[],[f18943,f320])).
fof(f18943,plain,(
  ( ! [X383,X379,X380,X382,X384,X381] : (~p(s(bool,happ(s(fun(X379,bool),'const.ind_type.FCONS_3'(s(fun(X379,bool),X380),s(fun('type.num.num',fun(X379,bool)),X381),s('type.num.num',X382))),s(X379,X383)))) | p(s(bool,happ(s(fun(X379,bool),X384),s(X379,sK6(happ(s(fun('type.num.num',fun(X379,bool)),happ(s(fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool))),happ(s(fun(fun(X379,bool),fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool)))),'const.ind_type.FCONS_0'),s(fun(X379,bool),X380))),s(fun('type.num.num',fun(X379,bool)),X381))),s('type.num.num',X382)),X384,X379))))) | p(s(bool,happ(s(fun(X379,bool),happ(s(fun('type.num.num',fun(X379,bool)),happ(s(fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool))),happ(s(fun(fun(X379,bool),fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool)))),'const.ind_type.FCONS_0'),s(fun(X379,bool),X380))),s(fun('type.num.num',fun(X379,bool)),X381))),s('type.num.num',X382))),s(X379,sK5(happ(s(fun('type.num.num',fun(X379,bool)),happ(s(fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool))),happ(s(fun(fun(X379,bool),fun(fun('type.num.num',fun(X379,bool)),fun('type.num.num',fun(X379,bool)))),'const.ind_type.FCONS_0'),s(fun(X379,bool),X380))),s(fun('type.num.num',fun(X379,bool)),X381))),s('type.num.num',X382)),X384,X379)))))) )),
  inference(superposition,[],[f314,f320])).
fof(f18942,plain,(
  ( ! [X377,X374,X376,X378,X375] : (p(s(bool,'|dollar|exists_1'(s(fun(X374,bool),'const.ind_type.FCONS_3'(s(fun(X374,bool),X375),s(fun('type.num.num',fun(X374,bool)),X376),s('type.num.num',X377)))))) | s(X374,X378) = s(X374,sK4(X378,happ(s(fun('type.num.num',fun(X374,bool)),happ(s(fun(fun('type.num.num',fun(X374,bool)),fun('type.num.num',fun(X374,bool))),happ(s(fun(fun(X374,bool),fun(fun('type.num.num',fun(X374,bool)),fun('type.num.num',fun(X374,bool)))),'const.ind_type.FCONS_0'),s(fun(X374,bool),X375))),s(fun('type.num.num',fun(X374,bool)),X376))),s('type.num.num',X377)),X374))) )),
  inference(superposition,[],[f312,f320])).
fof(f18936,plain,(
  ( ! [X344,X346,X343,X345,X347,X342,X348] : (s(fun(X342,X347),'_dst_x0x1_2'(s(fun(X343,X347),X348),s(fun(X342,X343),'const.ind_type.FCONS_3'(s(fun(X342,X343),X344),s(fun('type.num.num',fun(X342,X343)),X345),s('type.num.num',X346))))) = s(fun(X342,X347),happ(s(fun('type.num.num',fun(X342,X347)),'_dst_x00x11_2'(s(fun(X343,X347),X348),s(fun('type.num.num',fun(X342,X343)),happ(s(fun(fun('type.num.num',fun(X342,X343)),fun('type.num.num',fun(X342,X343))),happ(s(fun(fun(X342,X343),fun(fun('type.num.num',fun(X342,X343)),fun('type.num.num',fun(X342,X343)))),'const.ind_type.FCONS_0'),s(fun(X342,X343),X344))),s(fun('type.num.num',fun(X342,X343)),X345))))),s('type.num.num',X346)))) )),
  inference(superposition,[],[f390,f320])).
fof(f18922,plain,(
  ( ! [X294,X296,X293,X295] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X296),'const.sum.INL_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X293),s(fun('type.num.num',bool),X294),s('type.num.num',X295))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X293))),s(fun('type.num.num',bool),X294))),s('type.num.num',X295)))) )),
  inference(superposition,[],[f5684,f320])).
fof(f18921,plain,(
  ( ! [X292,X290,X289,X291] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X292,bool),'const.sum.INR_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X289),s(fun('type.num.num',bool),X290),s('type.num.num',X291))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X289))),s(fun('type.num.num',bool),X290))),s('type.num.num',X291)))) )),
  inference(superposition,[],[f5495,f320])).
fof(f18916,plain,(
  ( ! [X269,X267,X268,X270,X266] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X266),s(fun('type.num.num',bool),X267),s('type.num.num',X268)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X269),bool),sK16(X270,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X266))),s(fun('type.num.num',bool),X267))),s('type.num.num',X268)),X269,bool))))) )),
  inference(superposition,[],[f3944,f320])).
fof(f18904,plain,(
  ( ! [X222,X225,X223,X224] : (s(bool,X225) != s(bool,'const.ind_type.FCONS_3'(s(bool,X222),s(fun('type.num.num',bool),X223),s('type.num.num',X224))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X222))),s(fun('type.num.num',bool),X223))),s('type.num.num',X224))) | s(bool,'T_0') = s(bool,X225)) )),
  inference(superposition,[],[f1683,f320])).
fof(f18903,plain,(
  ( ! [X218,X220,X219,X221] : (s(bool,X221) != s(bool,'const.ind_type.FCONS_3'(s(bool,X218),s(fun('type.num.num',bool),X219),s('type.num.num',X220))) | s(bool,'F_0') = s(bool,X221) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X218))),s(fun('type.num.num',bool),X219))),s('type.num.num',X220)))) )),
  inference(superposition,[],[f1683,f320])).
fof(f18897,plain,(
  ( ! [X198,X196,X199,X197] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X199),'const.sum.INL_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X196),s(fun('type.num.num',bool),X197),s('type.num.num',X198))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X196))),s(fun('type.num.num',bool),X197))),s('type.num.num',X198)))) )),
  inference(superposition,[],[f1396,f320])).
fof(f18896,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X195,bool),'const.sum.INR_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X192),s(fun('type.num.num',bool),X193),s('type.num.num',X194))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X192))),s(fun('type.num.num',bool),X193))),s('type.num.num',X194)))) )),
  inference(superposition,[],[f1395,f320])).
fof(f19025,plain,(
  ( ! [X189,X190,X188] : (s(bool,'T_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X188),s(fun('type.num.num',bool),X189),s('type.num.num',X190))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X188))),s(fun('type.num.num',bool),X189))),s('type.num.num',X190)))) )),
  inference(forward_demodulation,[],[f18895,f427])).
fof(f18895,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'const.ind_type.ISO_2'(s(fun(X191,X191),'_i_0_0'),s(fun(X191,X191),'_i_0_0'))) != s(bool,'const.ind_type.FCONS_3'(s(bool,X188),s(fun('type.num.num',bool),X189),s('type.num.num',X190))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X188))),s(fun('type.num.num',bool),X189))),s('type.num.num',X190)))) )),
  inference(superposition,[],[f790,f320])).
fof(f18894,plain,(
  ( ! [X187,X185,X186,X184] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X187,bool),'const.sum.INR_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X184),s(fun('type.num.num',bool),X185),s('type.num.num',X186))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X184))),s(fun('type.num.num',bool),X185))),s('type.num.num',X186)))) )),
  inference(superposition,[],[f527,f320])).
fof(f18893,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X183),'const.sum.INL_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X180),s(fun('type.num.num',bool),X181),s('type.num.num',X182))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X180))),s(fun('type.num.num',bool),X181))),s('type.num.num',X182)))) )),
  inference(superposition,[],[f500,f320])).
fof(f19013,plain,(
  ( ! [X121,X118,X120,X119] : (p(s(bool,'const.ind_type.FCONS_3'(s(bool,X118),s(fun('type.num.num',bool),X119),s('type.num.num',sK6(X120,happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X118))),s(fun('type.num.num',bool),X119)),'type.num.num'))))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X118),s(fun('type.num.num',bool),X119),s('type.num.num',sK5(X120,happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X118))),s(fun('type.num.num',bool),X119)),'type.num.num'))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X120),s('type.num.num',X121))))) )),
  inference(forward_demodulation,[],[f18876,f320])).
fof(f18876,plain,(
  ( ! [X121,X118,X120,X119] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X118),s(fun('type.num.num',bool),X119),s('type.num.num',sK5(X120,happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X118))),s(fun('type.num.num',bool),X119)),'type.num.num'))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X120),s('type.num.num',X121)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X118))),s(fun('type.num.num',bool),X119))),s('type.num.num',sK6(X120,happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X118))),s(fun('type.num.num',bool),X119)),'type.num.num')))))) )),
  inference(superposition,[],[f315,f320])).
fof(f19012,plain,(
  ( ! [X116,X117,X115] : (p(s(bool,'const.ind_type.FCONS_3'(s(bool,X115),s(fun('type.num.num',bool),X116),s('type.num.num','const.min.@_1'(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X115))),s(fun('type.num.num',bool),X116)))))))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X115),s(fun('type.num.num',bool),X116),s('type.num.num',X117))))) )),
  inference(forward_demodulation,[],[f18875,f320])).
fof(f18875,plain,(
  ( ! [X116,X117,X115] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X115),s(fun('type.num.num',bool),X116),s('type.num.num',X117)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X115))),s(fun('type.num.num',bool),X116))),s('type.num.num','const.min.@_1'(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X115))),s(fun('type.num.num',bool),X116))))))))) )),
  inference(superposition,[],[f311,f320])).
fof(f18874,plain,(
  ( ! [X114,X112,X113] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X112),s(fun('type.num.num',bool),X113),s('type.num.num',X114)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X112))),s(fun('type.num.num',bool),X113))))))) )),
  inference(superposition,[],[f3805,f320])).
fof(f19011,plain,(
  ( ! [X111,X109,X110,X108] : (p(s(bool,'const.ind_type.FCONS_3'(s(bool,X108),s(fun('type.num.num',bool),X109),s('type.num.num',sK5(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X108))),s(fun('type.num.num',bool),X109)),X111,'type.num.num'))))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X108),s(fun('type.num.num',bool),X109),s('type.num.num',X110)))) | p(s(bool,happ(s(fun('type.num.num',bool),X111),s('type.num.num',sK6(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X108))),s(fun('type.num.num',bool),X109)),X111,'type.num.num')))))) )),
  inference(forward_demodulation,[],[f18873,f320])).
fof(f18873,plain,(
  ( ! [X111,X109,X110,X108] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X108),s(fun('type.num.num',bool),X109),s('type.num.num',X110)))) | p(s(bool,happ(s(fun('type.num.num',bool),X111),s('type.num.num',sK6(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X108))),s(fun('type.num.num',bool),X109)),X111,'type.num.num'))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X108))),s(fun('type.num.num',bool),X109))),s('type.num.num',sK5(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X108))),s(fun('type.num.num',bool),X109)),X111,'type.num.num')))))) )),
  inference(superposition,[],[f314,f320])).
fof(f18857,plain,(
  ( ! [X19,X17,X18,X16] : (s(X16,happ(s(fun('type.num.num',X16),X19),s('type.num.num',sK13(happ(s(fun(fun('type.num.num',X16),fun('type.num.num',X16)),happ(s(fun(X16,fun(fun('type.num.num',X16),fun('type.num.num',X16))),'const.ind_type.FCONS_0'),s(X16,X17))),s(fun('type.num.num',X16),X18)),X19,'type.num.num',X16)))) != s(X16,'const.ind_type.FCONS_3'(s(X16,X17),s(fun('type.num.num',X16),X18),s('type.num.num',sK13(happ(s(fun(fun('type.num.num',X16),fun('type.num.num',X16)),happ(s(fun(X16,fun(fun('type.num.num',X16),fun('type.num.num',X16))),'const.ind_type.FCONS_0'),s(X16,X17))),s(fun('type.num.num',X16),X18)),X19,'type.num.num',X16)))) | s(fun('type.num.num',X16),X19) = s(fun('type.num.num',X16),happ(s(fun(fun('type.num.num',X16),fun('type.num.num',X16)),happ(s(fun(X16,fun(fun('type.num.num',X16),fun('type.num.num',X16))),'const.ind_type.FCONS_0'),s(X16,X17))),s(fun('type.num.num',X16),X18)))) )),
  inference(superposition,[],[f352,f320])).
fof(f18856,plain,(
  ( ! [X14,X12,X15,X13] : (s(X12,happ(s(fun('type.num.num',X12),X15),s('type.num.num',sK13(X15,happ(s(fun(fun('type.num.num',X12),fun('type.num.num',X12)),happ(s(fun(X12,fun(fun('type.num.num',X12),fun('type.num.num',X12))),'const.ind_type.FCONS_0'),s(X12,X13))),s(fun('type.num.num',X12),X14)),'type.num.num',X12)))) != s(X12,'const.ind_type.FCONS_3'(s(X12,X13),s(fun('type.num.num',X12),X14),s('type.num.num',sK13(X15,happ(s(fun(fun('type.num.num',X12),fun('type.num.num',X12)),happ(s(fun(X12,fun(fun('type.num.num',X12),fun('type.num.num',X12))),'const.ind_type.FCONS_0'),s(X12,X13))),s(fun('type.num.num',X12),X14)),'type.num.num',X12)))) | s(fun('type.num.num',X12),X15) = s(fun('type.num.num',X12),happ(s(fun(fun('type.num.num',X12),fun('type.num.num',X12)),happ(s(fun(X12,fun(fun('type.num.num',X12),fun('type.num.num',X12))),'const.ind_type.FCONS_0'),s(X12,X13))),s(fun('type.num.num',X12),X14)))) )),
  inference(superposition,[],[f352,f320])).
fof(f18855,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X4,happ(s(fun(X0,X4),X5),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))))) = s(X4,happ(s(fun('type.num.num',X4),'_dst_x0x1_2'(s(fun(X0,X4),X5),s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f365,f320])).
fof(f18838,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X20) = s(bool,'const.ind_type.FCONS_3'(s(bool,X17),s(fun('type.num.num',bool),X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X17))),s(fun('type.num.num',bool),X18))),s('type.num.num',X19)))) )),
  inference(superposition,[],[f320,f432])).
fof(f18837,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X13),s(fun('type.num.num',bool),X14),s('type.num.num',X15))) | s(bool,X16) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X13))),s(fun('type.num.num',bool),X14))),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f320,f432])).
fof(f18836,plain,(
  ( ! [X12,X10,X11] : (s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X10),s(fun('type.num.num',bool),X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(bool,X10))),s(fun('type.num.num',bool),X11))),s('type.num.num',X12)))) )),
  inference(superposition,[],[f320,f264])).
fof(f18646,plain,(
  ( ! [X246,X248,X247,X245] : (s(bool,X245) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X247),bool),sK16(X248,'T_0',X247,bool)))) | s(bool,'T_0') = s(bool,sK4(X245,X246,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X246)))) )),
  inference(superposition,[],[f4147,f823])).
fof(f18645,plain,(
  ( ! [X243,X241,X244,X242] : (s(bool,X242) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X243),bool),sK16(X244,'T_0',X243,bool)))) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X241),'const.sum.INL_1'(s(bool,X242)))))) )),
  inference(superposition,[],[f4147,f336])).
fof(f18644,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,X238) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X239),bool),sK16(X240,'T_0',X239,bool)))) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X237,bool),'const.sum.INR_1'(s(bool,X238)))))) )),
  inference(superposition,[],[f4147,f337])).
fof(f18642,plain,(
  ( ! [X231,X229,X230,X228] : (s(bool,X228) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X230),bool),sK16(X231,'T_0',X230,bool)))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X228),s(fun('type.num.num',bool),X229),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f4147,f310])).
fof(f18641,plain,(
  ( ! [X227,X225,X223,X226,X224] : (s(bool,X224) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X226),bool),sK16(X227,'T_0',X226,bool)))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X223),'const.pair.,_2'(s(bool,X224),s(X223,X225)))))) )),
  inference(superposition,[],[f4147,f341])).
fof(f18640,plain,(
  ( ! [X218,X222,X220,X219,X221] : (s(bool,X220) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X221),bool),sK16(X222,'T_0',X221,bool)))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X218,bool),'const.pair.,_2'(s(X218,X219),s(bool,X220)))))) )),
  inference(superposition,[],[f4147,f340])).
fof(f18638,plain,(
  ( ! [X212,X210,X213,X211,X209] : (s(bool,X211) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X212),bool),sK16(X213,'T_0',X212,bool)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X209),bool),sK16(X210,X211,X209,bool)),s('type.list.list'(X209),'const.list.NIL_0')))) )),
  inference(superposition,[],[f4147,f356])).
fof(f18635,plain,(
  ( ! [X194,X192,X193] : (s(bool,X192) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X193),bool),sK16(X194,'T_0',X193,bool)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X192)))) )),
  inference(superposition,[],[f4147,f303])).
fof(f18126,plain,(
  ( ! [X350,X346,X349,X351,X345,X347,X348] : (s(fun(X345,X346),happ(s(fun(X347,fun(X345,X346)),X351),s(X347,sK13('_dst_x00x11_2'(s(fun(X348,X346),X349),s(fun(X347,fun(X345,X348)),X350)),X351,X347,fun(X345,X346))))) != s(fun(X345,X346),'_dst_x0x1_2'(s(fun(X348,X346),X349),s(fun(X345,X348),happ(s(fun(X347,fun(X345,X348)),X350),s(X347,sK13('_dst_x00x11_2'(s(fun(X348,X346),X349),s(fun(X347,fun(X345,X348)),X350)),X351,X347,fun(X345,X346))))))) | s(fun(X347,fun(X345,X346)),X351) = s(fun(X347,fun(X345,X346)),'_dst_x00x11_2'(s(fun(X348,X346),X349),s(fun(X347,fun(X345,X348)),X350)))) )),
  inference(superposition,[],[f352,f390])).
fof(f18125,plain,(
  ( ! [X344,X341,X343,X339,X340,X342,X338] : (s(fun(X338,X339),happ(s(fun(X340,fun(X338,X339)),X344),s(X340,sK13(X344,'_dst_x00x11_2'(s(fun(X341,X339),X342),s(fun(X340,fun(X338,X341)),X343)),X340,fun(X338,X339))))) != s(fun(X338,X339),'_dst_x0x1_2'(s(fun(X341,X339),X342),s(fun(X338,X341),happ(s(fun(X340,fun(X338,X341)),X343),s(X340,sK13(X344,'_dst_x00x11_2'(s(fun(X341,X339),X342),s(fun(X340,fun(X338,X341)),X343)),X340,fun(X338,X339))))))) | s(fun(X340,fun(X338,X339)),X344) = s(fun(X340,fun(X338,X339)),'_dst_x00x11_2'(s(fun(X341,X339),X342),s(fun(X340,fun(X338,X341)),X343)))) )),
  inference(superposition,[],[f352,f390])).
fof(f18123,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X320,X322,X328] : (s(X327,happ(s(fun(fun(X320,X321),X327),X328),s(fun(X320,X321),'_dst_x0x1_2'(s(fun(X323,X321),X324),s(fun(X320,X323),happ(s(fun(X322,fun(X320,X323)),X325),s(X322,X326))))))) = s(X327,happ(s(fun(X322,X327),'_dst_x0x1_2'(s(fun(fun(X320,X321),X327),X328),s(fun(X322,fun(X320,X321)),'_dst_x00x11_2'(s(fun(X323,X321),X324),s(fun(X322,fun(X320,X323)),X325))))),s(X322,X326)))) )),
  inference(superposition,[],[f365,f390])).
fof(f18118,plain,(
  ( ! [X280,X277,X279,X273,X275,X281,X276,X278,X274] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X274,X273),X280),s(fun(X273,X274),'_dst_x0x1_2'(s(fun(X276,X274),X277),s(fun(X273,X276),happ(s(fun(X275,fun(X273,X276)),X278),s(X275,X279)))))))) | s(X274,X281) = s(X274,happ(s(fun(X273,X274),happ(s(fun(X275,fun(X273,X274)),'_dst_x00x11_2'(s(fun(X276,X274),X277),s(fun(X275,fun(X273,X276)),X278))),s(X275,X279))),s(X273,happ(s(fun(X274,X273),X280),s(X274,X281)))))) )),
  inference(superposition,[],[f354,f390])).
fof(f18117,plain,(
  ( ! [X269,X271,X265,X267,X268,X270,X264,X266,X272] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X264,X265),'_dst_x0x1_2'(s(fun(X267,X265),X268),s(fun(X264,X267),happ(s(fun(X266,fun(X264,X267)),X269),s(X266,X270))))),s(fun(X265,X264),X271)))) | s(X264,X272) = s(X264,happ(s(fun(X265,X264),X271),s(X265,happ(s(fun(X264,X265),happ(s(fun(X266,fun(X264,X265)),'_dst_x00x11_2'(s(fun(X267,X265),X268),s(fun(X266,fun(X264,X267)),X269))),s(X266,X270))),s(X264,X272)))))) )),
  inference(superposition,[],[f354,f390])).
fof(f18116,plain,(
  ( ! [X255,X261,X257,X259,X263,X260,X262,X256,X258] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X256,X255),X262),s(fun(X255,X256),'_dst_x0x1_2'(s(fun(X258,X256),X259),s(fun(X255,X258),happ(s(fun(X257,fun(X255,X258)),X260),s(X257,X261)))))))) | s(X255,X263) = s(X255,happ(s(fun(X256,X255),X262),s(X256,happ(s(fun(X255,X256),happ(s(fun(X257,fun(X255,X256)),'_dst_x00x11_2'(s(fun(X258,X256),X259),s(fun(X257,fun(X255,X258)),X260))),s(X257,X261))),s(X255,X263)))))) )),
  inference(superposition,[],[f353,f390])).
fof(f18115,plain,(
  ( ! [X253,X251,X249,X246,X254,X252,X250,X248,X247] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X246,X247),'_dst_x0x1_2'(s(fun(X249,X247),X250),s(fun(X246,X249),happ(s(fun(X248,fun(X246,X249)),X251),s(X248,X252))))),s(fun(X247,X246),X253)))) | s(X247,X254) = s(X247,happ(s(fun(X246,X247),happ(s(fun(X248,fun(X246,X247)),'_dst_x00x11_2'(s(fun(X249,X247),X250),s(fun(X248,fun(X246,X249)),X251))),s(X248,X252))),s(X246,happ(s(fun(X247,X246),X253),s(X247,X254)))))) )),
  inference(superposition,[],[f353,f390])).
fof(f18114,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (s(X239,happ(s(fun(X238,X239),X245),s(X238,sK13(happ(s(fun(X240,fun(X238,X239)),'_dst_x00x11_2'(s(fun(X241,X239),X242),s(fun(X240,fun(X238,X241)),X243))),s(X240,X244)),X245,X238,X239)))) != s(X239,happ(s(fun(X238,X239),'_dst_x0x1_2'(s(fun(X241,X239),X242),s(fun(X238,X241),happ(s(fun(X240,fun(X238,X241)),X243),s(X240,X244))))),s(X238,sK13(happ(s(fun(X240,fun(X238,X239)),'_dst_x00x11_2'(s(fun(X241,X239),X242),s(fun(X240,fun(X238,X241)),X243))),s(X240,X244)),X245,X238,X239)))) | s(fun(X238,X239),X245) = s(fun(X238,X239),happ(s(fun(X240,fun(X238,X239)),'_dst_x00x11_2'(s(fun(X241,X239),X242),s(fun(X240,fun(X238,X241)),X243))),s(X240,X244)))) )),
  inference(superposition,[],[f352,f390])).
fof(f18113,plain,(
  ( ! [X231,X237,X235,X233,X230,X236,X234,X232] : (s(X231,happ(s(fun(X230,X231),X237),s(X230,sK13(X237,happ(s(fun(X232,fun(X230,X231)),'_dst_x00x11_2'(s(fun(X233,X231),X234),s(fun(X232,fun(X230,X233)),X235))),s(X232,X236)),X230,X231)))) != s(X231,happ(s(fun(X230,X231),'_dst_x0x1_2'(s(fun(X233,X231),X234),s(fun(X230,X233),happ(s(fun(X232,fun(X230,X233)),X235),s(X232,X236))))),s(X230,sK13(X237,happ(s(fun(X232,fun(X230,X231)),'_dst_x00x11_2'(s(fun(X233,X231),X234),s(fun(X232,fun(X230,X233)),X235))),s(X232,X236)),X230,X231)))) | s(fun(X230,X231),X237) = s(fun(X230,X231),happ(s(fun(X232,fun(X230,X231)),'_dst_x00x11_2'(s(fun(X233,X231),X234),s(fun(X232,fun(X230,X233)),X235))),s(X232,X236)))) )),
  inference(superposition,[],[f352,f390])).
fof(f18111,plain,(
  ( ! [X212,X218,X216,X220,X215,X213,X219,X217,X214] : (s(fun(X212,X213),X219) != s(fun(X212,X213),'_dst_x0x1_2'(s(fun(X215,X213),X216),s(fun(X212,X215),happ(s(fun(X214,fun(X212,X215)),X217),s(X214,X218))))) | s(X213,happ(s(fun(X212,X213),X219),s(X212,X220))) = s(X213,happ(s(fun(X212,X213),happ(s(fun(X214,fun(X212,X213)),'_dst_x00x11_2'(s(fun(X215,X213),X216),s(fun(X214,fun(X212,X215)),X217))),s(X214,X218))),s(X212,X220)))) )),
  inference(superposition,[],[f351,f390])).
fof(f18110,plain,(
  ( ! [X210,X208,X206,X204,X202,X211,X209,X207,X205,X203] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X202,X203),'_dst_x0x1_2'(s(fun(X205,X203),X206),s(fun(X202,X205),happ(s(fun(X204,fun(X202,X205)),X207),s(X204,X208))))),s(fun(X203,X202),X209)))) | s(X203,X210) != s(X203,happ(s(fun(X202,X203),happ(s(fun(X204,fun(X202,X203)),'_dst_x00x11_2'(s(fun(X205,X203),X206),s(fun(X204,fun(X202,X205)),X207))),s(X204,X208))),s(X202,X211))) | s(X202,X211) = s(X202,happ(s(fun(X203,X202),X209),s(X203,X210)))) )),
  inference(superposition,[],[f349,f390])).
fof(f18109,plain,(
  ( ! [X198,X196,X194,X192,X200,X199,X197,X195,X193,X201] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X193,X192),X199),s(fun(X192,X193),'_dst_x0x1_2'(s(fun(X195,X193),X196),s(fun(X192,X195),happ(s(fun(X194,fun(X192,X195)),X197),s(X194,X198)))))))) | s(X192,X200) != s(X192,happ(s(fun(X193,X192),X199),s(X193,X201))) | s(X193,X201) = s(X193,happ(s(fun(X192,X193),happ(s(fun(X194,fun(X192,X193)),'_dst_x00x11_2'(s(fun(X195,X193),X196),s(fun(X194,fun(X192,X195)),X197))),s(X194,X198))),s(X192,X200)))) )),
  inference(superposition,[],[f349,f390])).
fof(f18108,plain,(
  ( ! [X191,X189,X187,X185,X182,X190,X188,X186,X184,X183] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X182,X183),'_dst_x0x1_2'(s(fun(X185,X183),X186),s(fun(X182,X185),happ(s(fun(X184,fun(X182,X185)),X187),s(X184,X188))))),s(fun(X183,X182),X189)))) | s(X182,X190) != s(X182,happ(s(fun(X183,X182),X189),s(X183,X191))) | s(X183,X191) = s(X183,happ(s(fun(X182,X183),happ(s(fun(X184,fun(X182,X183)),'_dst_x00x11_2'(s(fun(X185,X183),X186),s(fun(X184,fun(X182,X185)),X187))),s(X184,X188))),s(X182,X190)))) )),
  inference(superposition,[],[f348,f390])).
fof(f18107,plain,(
  ( ! [X177,X175,X173,X180,X178,X176,X174,X172,X181,X179] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X173,X172),X179),s(fun(X172,X173),'_dst_x0x1_2'(s(fun(X175,X173),X176),s(fun(X172,X175),happ(s(fun(X174,fun(X172,X175)),X177),s(X174,X178)))))))) | s(X173,X180) != s(X173,happ(s(fun(X172,X173),happ(s(fun(X174,fun(X172,X173)),'_dst_x00x11_2'(s(fun(X175,X173),X176),s(fun(X174,fun(X172,X175)),X177))),s(X174,X178))),s(X172,X181))) | s(X172,X181) = s(X172,happ(s(fun(X173,X172),X179),s(X173,X180)))) )),
  inference(superposition,[],[f348,f390])).
fof(f18106,plain,(
  ( ! [X167,X165,X163,X171,X169,X166,X164,X162,X170,X168] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X162,X163),'_dst_x0x1_2'(s(fun(X165,X163),X166),s(fun(X162,X165),happ(s(fun(X164,fun(X162,X165)),X167),s(X164,X168))))),s(fun(X163,X162),X169)))) | ~p(s(bool,happ(s(fun(X162,bool),X170),s(X162,happ(s(fun(X163,X162),X169),s(X163,X171)))))) | p(s(bool,happ(s(fun(X162,bool),X170),s(X162,sK11(X170,happ(s(fun(X164,fun(X162,X163)),'_dst_x00x11_2'(s(fun(X165,X163),X166),s(fun(X164,fun(X162,X165)),X167))),s(X164,X168)),X169,X163,X162)))))) )),
  inference(superposition,[],[f347,f390])).
fof(f18105,plain,(
  ( ! [X158,X156,X154,X152,X161,X159,X157,X155,X153,X160] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X153,X152),X159),s(fun(X152,X153),'_dst_x0x1_2'(s(fun(X155,X153),X156),s(fun(X152,X155),happ(s(fun(X154,fun(X152,X155)),X157),s(X154,X158)))))))) | ~p(s(bool,happ(s(fun(X153,bool),X160),s(X153,happ(s(fun(X152,X153),happ(s(fun(X154,fun(X152,X153)),'_dst_x00x11_2'(s(fun(X155,X153),X156),s(fun(X154,fun(X152,X155)),X157))),s(X154,X158))),s(X152,X161)))))) | p(s(bool,happ(s(fun(X153,bool),X160),s(X153,sK11(X160,X159,happ(s(fun(X154,fun(X152,X153)),'_dst_x00x11_2'(s(fun(X155,X153),X156),s(fun(X154,fun(X152,X155)),X157))),s(X154,X158)),X152,X153)))))) )),
  inference(superposition,[],[f347,f390])).
fof(f18104,plain,(
  ( ! [X146,X144,X142,X151,X149,X147,X145,X143,X150,X148] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X142,X143),'_dst_x0x1_2'(s(fun(X145,X143),X146),s(fun(X142,X145),happ(s(fun(X144,fun(X142,X145)),X147),s(X144,X148))))),s(fun(X143,X142),X149)))) | ~p(s(bool,happ(s(fun(X142,bool),X150),s(X142,X151)))) | p(s(bool,happ(s(fun(X142,bool),X150),s(X142,happ(s(fun(X143,X142),X149),s(X143,sK10(X150,happ(s(fun(X144,fun(X142,X143)),'_dst_x00x11_2'(s(fun(X145,X143),X146),s(fun(X144,fun(X142,X145)),X147))),s(X144,X148)),X149,X143,X142)))))))) )),
  inference(superposition,[],[f346,f390])).
fof(f18103,plain,(
  ( ! [X134,X132,X140,X138,X136,X135,X133,X141,X139,X137] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X133,X132),X139),s(fun(X132,X133),'_dst_x0x1_2'(s(fun(X135,X133),X136),s(fun(X132,X135),happ(s(fun(X134,fun(X132,X135)),X137),s(X134,X138)))))))) | ~p(s(bool,happ(s(fun(X133,bool),X140),s(X133,X141)))) | p(s(bool,happ(s(fun(X133,bool),X140),s(X133,happ(s(fun(X132,X133),happ(s(fun(X134,fun(X132,X133)),'_dst_x00x11_2'(s(fun(X135,X133),X136),s(fun(X134,fun(X132,X135)),X137))),s(X134,X138))),s(X132,sK10(X140,X139,happ(s(fun(X134,fun(X132,X133)),'_dst_x00x11_2'(s(fun(X135,X133),X136),s(fun(X134,fun(X132,X135)),X137))),s(X134,X138)),X132,X133)))))))) )),
  inference(superposition,[],[f346,f390])).
fof(f18102,plain,(
  ( ! [X127,X125,X123,X130,X128,X126,X124,X122,X131,X129] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X122,X123),'_dst_x0x1_2'(s(fun(X125,X123),X126),s(fun(X122,X125),happ(s(fun(X124,fun(X122,X125)),X127),s(X124,X128))))),s(fun(X123,X122),X129)))) | ~p(s(bool,happ(s(fun(X122,bool),X130),s(X122,happ(s(fun(X123,X122),X129),s(X123,sK9(X130,happ(s(fun(X124,fun(X122,X123)),'_dst_x00x11_2'(s(fun(X125,X123),X126),s(fun(X124,fun(X122,X125)),X127))),s(X124,X128)),X129,X123,X122))))))) | p(s(bool,happ(s(fun(X122,bool),X130),s(X122,X131))))) )),
  inference(superposition,[],[f345,f390])).
fof(f18101,plain,(
  ( ! [X121,X118,X116,X114,X112,X120,X119,X117,X115,X113] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X113,X112),X119),s(fun(X112,X113),'_dst_x0x1_2'(s(fun(X115,X113),X116),s(fun(X112,X115),happ(s(fun(X114,fun(X112,X115)),X117),s(X114,X118)))))))) | ~p(s(bool,happ(s(fun(X113,bool),X120),s(X113,happ(s(fun(X112,X113),happ(s(fun(X114,fun(X112,X113)),'_dst_x00x11_2'(s(fun(X115,X113),X116),s(fun(X114,fun(X112,X115)),X117))),s(X114,X118))),s(X112,sK9(X120,X119,happ(s(fun(X114,fun(X112,X113)),'_dst_x00x11_2'(s(fun(X115,X113),X116),s(fun(X114,fun(X112,X115)),X117))),s(X114,X118)),X112,X113))))))) | p(s(bool,happ(s(fun(X113,bool),X120),s(X113,X121))))) )),
  inference(superposition,[],[f345,f390])).
fof(f18100,plain,(
  ( ! [X103,X111,X109,X107,X105,X102,X110,X108,X106,X104] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X102,X103),'_dst_x0x1_2'(s(fun(X105,X103),X106),s(fun(X102,X105),happ(s(fun(X104,fun(X102,X105)),X107),s(X104,X108))))),s(fun(X103,X102),X109)))) | ~p(s(bool,happ(s(fun(X102,bool),X110),s(X102,sK8(X110,happ(s(fun(X104,fun(X102,X103)),'_dst_x00x11_2'(s(fun(X105,X103),X106),s(fun(X104,fun(X102,X105)),X107))),s(X104,X108)),X109,X103,X102))))) | p(s(bool,happ(s(fun(X102,bool),X110),s(X102,happ(s(fun(X103,X102),X109),s(X103,X111))))))) )),
  inference(superposition,[],[f344,f390])).
fof(f18099,plain,(
  ( ! [X94,X92,X101,X99,X97,X95,X93,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X93,X92),X99),s(fun(X92,X93),'_dst_x0x1_2'(s(fun(X95,X93),X96),s(fun(X92,X95),happ(s(fun(X94,fun(X92,X95)),X97),s(X94,X98)))))))) | ~p(s(bool,happ(s(fun(X93,bool),X100),s(X93,sK8(X100,X99,happ(s(fun(X94,fun(X92,X93)),'_dst_x00x11_2'(s(fun(X95,X93),X96),s(fun(X94,fun(X92,X95)),X97))),s(X94,X98)),X92,X93))))) | p(s(bool,happ(s(fun(X93,bool),X100),s(X93,happ(s(fun(X92,X93),happ(s(fun(X94,fun(X92,X93)),'_dst_x00x11_2'(s(fun(X95,X93),X96),s(fun(X94,fun(X92,X95)),X97))),s(X94,X98))),s(X92,X101))))))) )),
  inference(superposition,[],[f344,f390])).
fof(f18098,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (p(s(bool,happ(s(fun('type.list.list'(X86),bool),'_dst_x0x1_2'(s(fun(X88,bool),X89),s(fun('type.list.list'(X86),X88),happ(s(fun(X87,fun('type.list.list'(X86),X88)),X90),s(X87,X91))))),s('type.list.list'(X86),sK2(happ(s(fun(X87,fun('type.list.list'(X86),bool)),'_dst_x00x11_2'(s(fun(X88,bool),X89),s(fun(X87,fun('type.list.list'(X86),X88)),X90))),s(X87,X91)),X86))))) | ~p(s(bool,happ(s(fun('type.list.list'(X86),bool),happ(s(fun(X87,fun('type.list.list'(X86),bool)),'_dst_x00x11_2'(s(fun(X88,bool),X89),s(fun(X87,fun('type.list.list'(X86),X88)),X90))),s(X87,X91))),s('type.list.list'(X86),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f390])).
fof(f18097,plain,(
  ( ! [X80,X85,X83,X81,X79,X84,X82] : (~p(s(bool,happ(s(fun('type.list.list'(X79),bool),'_dst_x0x1_2'(s(fun(X81,bool),X82),s(fun('type.list.list'(X79),X81),happ(s(fun(X80,fun('type.list.list'(X79),X81)),X83),s(X80,X84))))),s('type.list.list'(X79),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X79),bool),happ(s(fun(X80,fun('type.list.list'(X79),bool)),'_dst_x00x11_2'(s(fun(X81,bool),X82),s(fun(X80,fun('type.list.list'(X79),X81)),X83))),s(X80,X84))),s('type.list.list'(X79),'const.list.CONS_2'(s(X79,sK3(happ(s(fun(X80,fun('type.list.list'(X79),bool)),'_dst_x00x11_2'(s(fun(X81,bool),X82),s(fun(X80,fun('type.list.list'(X79),X81)),X83))),s(X80,X84)),X79)),s('type.list.list'(X79),sK2(happ(s(fun(X80,fun('type.list.list'(X79),bool)),'_dst_x00x11_2'(s(fun(X81,bool),X82),s(fun(X80,fun('type.list.list'(X79),X81)),X83))),s(X80,X84)),X79))))))) | p(s(bool,happ(s(fun('type.list.list'(X79),bool),happ(s(fun(X80,fun('type.list.list'(X79),bool)),'_dst_x00x11_2'(s(fun(X81,bool),X82),s(fun(X80,fun('type.list.list'(X79),X81)),X83))),s(X80,X84))),s('type.list.list'(X79),X85))))) )),
  inference(superposition,[],[f305,f390])).
fof(f18095,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,happ(s(fun(X65,bool),'_dst_x0x1_2'(s(fun(X67,bool),X68),s(fun(X65,X67),happ(s(fun(X66,fun(X65,X67)),X69),s(X66,X70))))),s(X65,X71)))) | p(s(bool,'|dollar|exists_1'(s(fun(X65,bool),happ(s(fun(X66,fun(X65,bool)),'_dst_x00x11_2'(s(fun(X67,bool),X68),s(fun(X66,fun(X65,X67)),X69))),s(X66,X70))))))) )),
  inference(superposition,[],[f3805,f390])).
fof(f18094,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X63] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X58,bool),'_dst_x0x1_2'(s(fun(X60,bool),X61),s(fun(X58,X60),happ(s(fun(X59,fun(X58,X60)),X62),s(X59,X63))))))) | s(X58,X64) = s(X58,sK4(X64,happ(s(fun(X59,fun(X58,bool)),'_dst_x00x11_2'(s(fun(X60,bool),X61),s(fun(X59,fun(X58,X60)),X62))),s(X59,X63)),X58))) )),
  inference(superposition,[],[f823,f390])).
fof(f18093,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (~p(s(bool,happ(s(fun(X50,bool),'_dst_x0x1_2'(s(fun(X52,bool),X53),s(fun(X50,X52),happ(s(fun(X51,fun(X50,X52)),X54),s(X51,X55))))),s(X50,sK5(X56,happ(s(fun(X51,fun(X50,bool)),'_dst_x00x11_2'(s(fun(X52,bool),X53),s(fun(X51,fun(X50,X52)),X54))),s(X51,X55)),X50))))) | ~p(s(bool,happ(s(fun(X50,bool),X56),s(X50,X57)))) | p(s(bool,happ(s(fun(X50,bool),happ(s(fun(X51,fun(X50,bool)),'_dst_x00x11_2'(s(fun(X52,bool),X53),s(fun(X51,fun(X50,X52)),X54))),s(X51,X55))),s(X50,sK6(X56,happ(s(fun(X51,fun(X50,bool)),'_dst_x00x11_2'(s(fun(X52,bool),X53),s(fun(X51,fun(X50,X52)),X54))),s(X51,X55)),X50)))))) )),
  inference(superposition,[],[f315,f390])).
fof(f18092,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42,X49] : (~p(s(bool,happ(s(fun(X42,bool),'_dst_x0x1_2'(s(fun(X44,bool),X45),s(fun(X42,X44),happ(s(fun(X43,fun(X42,X44)),X46),s(X43,X47))))),s(X42,X48)))) | p(s(bool,happ(s(fun(X42,bool),X49),s(X42,sK6(happ(s(fun(X43,fun(X42,bool)),'_dst_x00x11_2'(s(fun(X44,bool),X45),s(fun(X43,fun(X42,X44)),X46))),s(X43,X47)),X49,X42))))) | p(s(bool,happ(s(fun(X42,bool),happ(s(fun(X43,fun(X42,bool)),'_dst_x00x11_2'(s(fun(X44,bool),X45),s(fun(X43,fun(X42,X44)),X46))),s(X43,X47))),s(X42,sK5(happ(s(fun(X43,fun(X42,bool)),'_dst_x00x11_2'(s(fun(X44,bool),X45),s(fun(X43,fun(X42,X44)),X46))),s(X43,X47)),X49,X42)))))) )),
  inference(superposition,[],[f314,f390])).
fof(f18091,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X40] : (p(s(bool,'|dollar|exists_1'(s(fun(X35,bool),'_dst_x0x1_2'(s(fun(X37,bool),X38),s(fun(X35,X37),happ(s(fun(X36,fun(X35,X37)),X39),s(X36,X40)))))))) | s(X35,X41) = s(X35,sK4(X41,happ(s(fun(X36,fun(X35,bool)),'_dst_x00x11_2'(s(fun(X37,bool),X38),s(fun(X36,fun(X35,X37)),X39))),s(X36,X40)),X35))) )),
  inference(superposition,[],[f312,f390])).
fof(f18090,plain,(
  ( ! [X30,X28,X33,X31,X29,X34,X32] : (~p(s(bool,happ(s(fun(X28,bool),'_dst_x0x1_2'(s(fun(X30,bool),X31),s(fun(X28,X30),happ(s(fun(X29,fun(X28,X30)),X32),s(X29,X33))))),s(X28,X34)))) | p(s(bool,happ(s(fun(X28,bool),happ(s(fun(X29,fun(X28,bool)),'_dst_x00x11_2'(s(fun(X30,bool),X31),s(fun(X29,fun(X28,X30)),X32))),s(X29,X33))),s(X28,'const.min.@_1'(s(fun(X28,bool),happ(s(fun(X29,fun(X28,bool)),'_dst_x00x11_2'(s(fun(X30,bool),X31),s(fun(X29,fun(X28,X30)),X32))),s(X29,X33))))))))) )),
  inference(superposition,[],[f311,f390])).
fof(f18067,plain,(
  ( ! [X282,X288,X285,X287,X281,X283,X289,X284,X286] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X282,X281),X288),s(fun(X281,X282),happ(s(fun(X285,fun(X281,X282)),'_dst_x00x11_2'(s(fun(X283,X282),X284),s(fun(X285,fun(X281,X283)),X286))),s(X285,X287)))))) | s(X282,X289) = s(X282,happ(s(fun(X281,X282),'_dst_x0x1_2'(s(fun(X283,X282),X284),s(fun(X281,X283),happ(s(fun(X285,fun(X281,X283)),X286),s(X285,X287))))),s(X281,happ(s(fun(X282,X281),X288),s(X282,X289)))))) )),
  inference(superposition,[],[f354,f390])).
fof(f18066,plain,(
  ( ! [X280,X277,X279,X273,X275,X276,X278,X272,X274] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X272,X273),happ(s(fun(X276,fun(X272,X273)),'_dst_x00x11_2'(s(fun(X274,X273),X275),s(fun(X276,fun(X272,X274)),X277))),s(X276,X278))),s(fun(X273,X272),X279)))) | s(X272,X280) = s(X272,happ(s(fun(X273,X272),X279),s(X273,happ(s(fun(X272,X273),'_dst_x0x1_2'(s(fun(X274,X273),X275),s(fun(X272,X274),happ(s(fun(X276,fun(X272,X274)),X277),s(X276,X278))))),s(X272,X280)))))) )),
  inference(superposition,[],[f354,f390])).
fof(f18065,plain,(
  ( ! [X263,X269,X271,X265,X267,X268,X270,X264,X266] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X264,X263),X270),s(fun(X263,X264),happ(s(fun(X267,fun(X263,X264)),'_dst_x00x11_2'(s(fun(X265,X264),X266),s(fun(X267,fun(X263,X265)),X268))),s(X267,X269)))))) | s(X263,X271) = s(X263,happ(s(fun(X264,X263),X270),s(X264,happ(s(fun(X263,X264),'_dst_x0x1_2'(s(fun(X265,X264),X266),s(fun(X263,X265),happ(s(fun(X267,fun(X263,X265)),X268),s(X267,X269))))),s(X263,X271)))))) )),
  inference(superposition,[],[f353,f390])).
fof(f18064,plain,(
  ( ! [X255,X261,X257,X259,X260,X254,X256,X258,X262] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X254,X255),happ(s(fun(X258,fun(X254,X255)),'_dst_x00x11_2'(s(fun(X256,X255),X257),s(fun(X258,fun(X254,X256)),X259))),s(X258,X260))),s(fun(X255,X254),X261)))) | s(X255,X262) = s(X255,happ(s(fun(X254,X255),'_dst_x0x1_2'(s(fun(X256,X255),X257),s(fun(X254,X256),happ(s(fun(X258,fun(X254,X256)),X259),s(X258,X260))))),s(X254,happ(s(fun(X255,X254),X261),s(X255,X262)))))) )),
  inference(superposition,[],[f353,f390])).
fof(f18063,plain,(
  ( ! [X253,X251,X249,X246,X252,X250,X248,X247] : (s(X247,happ(s(fun(X246,X247),X253),s(X246,sK13('_dst_x0x1_2'(s(fun(X248,X247),X249),s(fun(X246,X248),happ(s(fun(X250,fun(X246,X248)),X251),s(X250,X252)))),X253,X246,X247)))) != s(X247,happ(s(fun(X246,X247),happ(s(fun(X250,fun(X246,X247)),'_dst_x00x11_2'(s(fun(X248,X247),X249),s(fun(X250,fun(X246,X248)),X251))),s(X250,X252))),s(X246,sK13('_dst_x0x1_2'(s(fun(X248,X247),X249),s(fun(X246,X248),happ(s(fun(X250,fun(X246,X248)),X251),s(X250,X252)))),X253,X246,X247)))) | s(fun(X246,X247),X253) = s(fun(X246,X247),'_dst_x0x1_2'(s(fun(X248,X247),X249),s(fun(X246,X248),happ(s(fun(X250,fun(X246,X248)),X251),s(X250,X252)))))) )),
  inference(superposition,[],[f352,f390])).
fof(f18062,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (s(X239,happ(s(fun(X238,X239),X245),s(X238,sK13(X245,'_dst_x0x1_2'(s(fun(X240,X239),X241),s(fun(X238,X240),happ(s(fun(X242,fun(X238,X240)),X243),s(X242,X244)))),X238,X239)))) != s(X239,happ(s(fun(X238,X239),happ(s(fun(X242,fun(X238,X239)),'_dst_x00x11_2'(s(fun(X240,X239),X241),s(fun(X242,fun(X238,X240)),X243))),s(X242,X244))),s(X238,sK13(X245,'_dst_x0x1_2'(s(fun(X240,X239),X241),s(fun(X238,X240),happ(s(fun(X242,fun(X238,X240)),X243),s(X242,X244)))),X238,X239)))) | s(fun(X238,X239),X245) = s(fun(X238,X239),'_dst_x0x1_2'(s(fun(X240,X239),X241),s(fun(X238,X240),happ(s(fun(X242,fun(X238,X240)),X243),s(X242,X244)))))) )),
  inference(superposition,[],[f352,f390])).
fof(f18060,plain,(
  ( ! [X222,X220,X227,X225,X223,X221,X228,X226,X224] : (s(fun(X220,X221),X227) != s(fun(X220,X221),happ(s(fun(X224,fun(X220,X221)),'_dst_x00x11_2'(s(fun(X222,X221),X223),s(fun(X224,fun(X220,X222)),X225))),s(X224,X226))) | s(X221,happ(s(fun(X220,X221),X227),s(X220,X228))) = s(X221,happ(s(fun(X220,X221),'_dst_x0x1_2'(s(fun(X222,X221),X223),s(fun(X220,X222),happ(s(fun(X224,fun(X220,X222)),X225),s(X224,X226))))),s(X220,X228)))) )),
  inference(superposition,[],[f351,f390])).
fof(f18059,plain,(
  ( ! [X212,X210,X216,X218,X215,X213,X211,X217,X219,X214] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X210,X211),happ(s(fun(X214,fun(X210,X211)),'_dst_x00x11_2'(s(fun(X212,X211),X213),s(fun(X214,fun(X210,X212)),X215))),s(X214,X216))),s(fun(X211,X210),X217)))) | s(X211,X218) != s(X211,happ(s(fun(X210,X211),'_dst_x0x1_2'(s(fun(X212,X211),X213),s(fun(X210,X212),happ(s(fun(X214,fun(X210,X212)),X215),s(X214,X216))))),s(X210,X219))) | s(X210,X219) = s(X210,happ(s(fun(X211,X210),X217),s(X211,X218)))) )),
  inference(superposition,[],[f349,f390])).
fof(f18058,plain,(
  ( ! [X208,X206,X204,X202,X200,X209,X207,X205,X203,X201] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X201,X200),X207),s(fun(X200,X201),happ(s(fun(X204,fun(X200,X201)),'_dst_x00x11_2'(s(fun(X202,X201),X203),s(fun(X204,fun(X200,X202)),X205))),s(X204,X206)))))) | s(X200,X208) != s(X200,happ(s(fun(X201,X200),X207),s(X201,X209))) | s(X201,X209) = s(X201,happ(s(fun(X200,X201),'_dst_x0x1_2'(s(fun(X202,X201),X203),s(fun(X200,X202),happ(s(fun(X204,fun(X200,X202)),X205),s(X204,X206))))),s(X200,X208)))) )),
  inference(superposition,[],[f349,f390])).
fof(f18057,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X199,X197,X195,X193] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X190,X191),happ(s(fun(X194,fun(X190,X191)),'_dst_x00x11_2'(s(fun(X192,X191),X193),s(fun(X194,fun(X190,X192)),X195))),s(X194,X196))),s(fun(X191,X190),X197)))) | s(X190,X198) != s(X190,happ(s(fun(X191,X190),X197),s(X191,X199))) | s(X191,X199) = s(X191,happ(s(fun(X190,X191),'_dst_x0x1_2'(s(fun(X192,X191),X193),s(fun(X190,X192),happ(s(fun(X194,fun(X190,X192)),X195),s(X194,X196))))),s(X190,X198)))) )),
  inference(superposition,[],[f348,f390])).
fof(f18056,plain,(
  ( ! [X189,X187,X185,X182,X180,X188,X186,X184,X183,X181] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X181,X180),X187),s(fun(X180,X181),happ(s(fun(X184,fun(X180,X181)),'_dst_x00x11_2'(s(fun(X182,X181),X183),s(fun(X184,fun(X180,X182)),X185))),s(X184,X186)))))) | s(X181,X188) != s(X181,happ(s(fun(X180,X181),'_dst_x0x1_2'(s(fun(X182,X181),X183),s(fun(X180,X182),happ(s(fun(X184,fun(X180,X182)),X185),s(X184,X186))))),s(X180,X189))) | s(X180,X189) = s(X180,happ(s(fun(X181,X180),X187),s(X181,X188)))) )),
  inference(superposition,[],[f348,f390])).
fof(f18055,plain,(
  ( ! [X177,X175,X173,X171,X178,X176,X174,X172,X170,X179] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X170,X171),happ(s(fun(X174,fun(X170,X171)),'_dst_x00x11_2'(s(fun(X172,X171),X173),s(fun(X174,fun(X170,X172)),X175))),s(X174,X176))),s(fun(X171,X170),X177)))) | ~p(s(bool,happ(s(fun(X170,bool),X178),s(X170,happ(s(fun(X171,X170),X177),s(X171,X179)))))) | p(s(bool,happ(s(fun(X170,bool),X178),s(X170,sK11(X178,'_dst_x0x1_2'(s(fun(X172,X171),X173),s(fun(X170,X172),happ(s(fun(X174,fun(X170,X172)),X175),s(X174,X176)))),X177,X171,X170)))))) )),
  inference(superposition,[],[f347,f390])).
fof(f18054,plain,(
  ( ! [X167,X165,X163,X161,X169,X166,X164,X162,X160,X168] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X161,X160),X167),s(fun(X160,X161),happ(s(fun(X164,fun(X160,X161)),'_dst_x00x11_2'(s(fun(X162,X161),X163),s(fun(X164,fun(X160,X162)),X165))),s(X164,X166)))))) | ~p(s(bool,happ(s(fun(X161,bool),X168),s(X161,happ(s(fun(X160,X161),'_dst_x0x1_2'(s(fun(X162,X161),X163),s(fun(X160,X162),happ(s(fun(X164,fun(X160,X162)),X165),s(X164,X166))))),s(X160,X169)))))) | p(s(bool,happ(s(fun(X161,bool),X168),s(X161,sK11(X168,X167,'_dst_x0x1_2'(s(fun(X162,X161),X163),s(fun(X160,X162),happ(s(fun(X164,fun(X160,X162)),X165),s(X164,X166)))),X160,X161)))))) )),
  inference(superposition,[],[f347,f390])).
fof(f18053,plain,(
  ( ! [X158,X156,X154,X152,X151,X159,X157,X155,X153,X150] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X150,X151),happ(s(fun(X154,fun(X150,X151)),'_dst_x00x11_2'(s(fun(X152,X151),X153),s(fun(X154,fun(X150,X152)),X155))),s(X154,X156))),s(fun(X151,X150),X157)))) | ~p(s(bool,happ(s(fun(X150,bool),X158),s(X150,X159)))) | p(s(bool,happ(s(fun(X150,bool),X158),s(X150,happ(s(fun(X151,X150),X157),s(X151,sK10(X158,'_dst_x0x1_2'(s(fun(X152,X151),X153),s(fun(X150,X152),happ(s(fun(X154,fun(X150,X152)),X155),s(X154,X156)))),X157,X151,X150)))))))) )),
  inference(superposition,[],[f346,f390])).
fof(f18052,plain,(
  ( ! [X146,X144,X142,X140,X149,X147,X145,X143,X141,X148] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X141,X140),X147),s(fun(X140,X141),happ(s(fun(X144,fun(X140,X141)),'_dst_x00x11_2'(s(fun(X142,X141),X143),s(fun(X144,fun(X140,X142)),X145))),s(X144,X146)))))) | ~p(s(bool,happ(s(fun(X141,bool),X148),s(X141,X149)))) | p(s(bool,happ(s(fun(X141,bool),X148),s(X141,happ(s(fun(X140,X141),'_dst_x0x1_2'(s(fun(X142,X141),X143),s(fun(X140,X142),happ(s(fun(X144,fun(X140,X142)),X145),s(X144,X146))))),s(X140,sK10(X148,X147,'_dst_x0x1_2'(s(fun(X142,X141),X143),s(fun(X140,X142),happ(s(fun(X144,fun(X140,X142)),X145),s(X144,X146)))),X140,X141)))))))) )),
  inference(superposition,[],[f346,f390])).
fof(f18051,plain,(
  ( ! [X134,X132,X130,X138,X136,X135,X133,X131,X139,X137] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X130,X131),happ(s(fun(X134,fun(X130,X131)),'_dst_x00x11_2'(s(fun(X132,X131),X133),s(fun(X134,fun(X130,X132)),X135))),s(X134,X136))),s(fun(X131,X130),X137)))) | ~p(s(bool,happ(s(fun(X130,bool),X138),s(X130,happ(s(fun(X131,X130),X137),s(X131,sK9(X138,'_dst_x0x1_2'(s(fun(X132,X131),X133),s(fun(X130,X132),happ(s(fun(X134,fun(X130,X132)),X135),s(X134,X136)))),X137,X131,X130))))))) | p(s(bool,happ(s(fun(X130,bool),X138),s(X130,X139))))) )),
  inference(superposition,[],[f345,f390])).
fof(f18050,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X120,X129] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X121,X120),X127),s(fun(X120,X121),happ(s(fun(X124,fun(X120,X121)),'_dst_x00x11_2'(s(fun(X122,X121),X123),s(fun(X124,fun(X120,X122)),X125))),s(X124,X126)))))) | ~p(s(bool,happ(s(fun(X121,bool),X128),s(X121,happ(s(fun(X120,X121),'_dst_x0x1_2'(s(fun(X122,X121),X123),s(fun(X120,X122),happ(s(fun(X124,fun(X120,X122)),X125),s(X124,X126))))),s(X120,sK9(X128,X127,'_dst_x0x1_2'(s(fun(X122,X121),X123),s(fun(X120,X122),happ(s(fun(X124,fun(X120,X122)),X125),s(X124,X126)))),X120,X121))))))) | p(s(bool,happ(s(fun(X121,bool),X128),s(X121,X129))))) )),
  inference(superposition,[],[f345,f390])).
fof(f18049,plain,(
  ( ! [X111,X118,X116,X114,X112,X110,X119,X117,X115,X113] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X110,X111),happ(s(fun(X114,fun(X110,X111)),'_dst_x00x11_2'(s(fun(X112,X111),X113),s(fun(X114,fun(X110,X112)),X115))),s(X114,X116))),s(fun(X111,X110),X117)))) | ~p(s(bool,happ(s(fun(X110,bool),X118),s(X110,sK8(X118,'_dst_x0x1_2'(s(fun(X112,X111),X113),s(fun(X110,X112),happ(s(fun(X114,fun(X110,X112)),X115),s(X114,X116)))),X117,X111,X110))))) | p(s(bool,happ(s(fun(X110,bool),X118),s(X110,happ(s(fun(X111,X110),X117),s(X111,X119))))))) )),
  inference(superposition,[],[f344,f390])).
fof(f18048,plain,(
  ( ! [X103,X101,X109,X107,X105,X102,X100,X108,X106,X104] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X101,X100),X107),s(fun(X100,X101),happ(s(fun(X104,fun(X100,X101)),'_dst_x00x11_2'(s(fun(X102,X101),X103),s(fun(X104,fun(X100,X102)),X105))),s(X104,X106)))))) | ~p(s(bool,happ(s(fun(X101,bool),X108),s(X101,sK8(X108,X107,'_dst_x0x1_2'(s(fun(X102,X101),X103),s(fun(X100,X102),happ(s(fun(X104,fun(X100,X102)),X105),s(X104,X106)))),X100,X101))))) | p(s(bool,happ(s(fun(X101,bool),X108),s(X101,happ(s(fun(X100,X101),'_dst_x0x1_2'(s(fun(X102,X101),X103),s(fun(X100,X102),happ(s(fun(X104,fun(X100,X102)),X105),s(X104,X106))))),s(X100,X109))))))) )),
  inference(superposition,[],[f344,f390])).
fof(f18047,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (p(s(bool,happ(s(fun('type.list.list'(X94),bool),happ(s(fun(X97,fun('type.list.list'(X94),bool)),'_dst_x00x11_2'(s(fun(X95,bool),X96),s(fun(X97,fun('type.list.list'(X94),X95)),X98))),s(X97,X99))),s('type.list.list'(X94),sK2('_dst_x0x1_2'(s(fun(X95,bool),X96),s(fun('type.list.list'(X94),X95),happ(s(fun(X97,fun('type.list.list'(X94),X95)),X98),s(X97,X99)))),X94))))) | ~p(s(bool,happ(s(fun('type.list.list'(X94),bool),'_dst_x0x1_2'(s(fun(X95,bool),X96),s(fun('type.list.list'(X94),X95),happ(s(fun(X97,fun('type.list.list'(X94),X95)),X98),s(X97,X99))))),s('type.list.list'(X94),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f390])).
fof(f18046,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,happ(s(fun('type.list.list'(X87),bool),happ(s(fun(X90,fun('type.list.list'(X87),bool)),'_dst_x00x11_2'(s(fun(X88,bool),X89),s(fun(X90,fun('type.list.list'(X87),X88)),X91))),s(X90,X92))),s('type.list.list'(X87),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X87),bool),'_dst_x0x1_2'(s(fun(X88,bool),X89),s(fun('type.list.list'(X87),X88),happ(s(fun(X90,fun('type.list.list'(X87),X88)),X91),s(X90,X92))))),s('type.list.list'(X87),'const.list.CONS_2'(s(X87,sK3('_dst_x0x1_2'(s(fun(X88,bool),X89),s(fun('type.list.list'(X87),X88),happ(s(fun(X90,fun('type.list.list'(X87),X88)),X91),s(X90,X92)))),X87)),s('type.list.list'(X87),sK2('_dst_x0x1_2'(s(fun(X88,bool),X89),s(fun('type.list.list'(X87),X88),happ(s(fun(X90,fun('type.list.list'(X87),X88)),X91),s(X90,X92)))),X87))))))) | p(s(bool,happ(s(fun('type.list.list'(X87),bool),'_dst_x0x1_2'(s(fun(X88,bool),X89),s(fun('type.list.list'(X87),X88),happ(s(fun(X90,fun('type.list.list'(X87),X88)),X91),s(X90,X92))))),s('type.list.list'(X87),X93))))) )),
  inference(superposition,[],[f305,f390])).
fof(f18044,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,happ(s(fun(X73,bool),happ(s(fun(X76,fun(X73,bool)),'_dst_x00x11_2'(s(fun(X74,bool),X75),s(fun(X76,fun(X73,X74)),X77))),s(X76,X78))),s(X73,X79)))) | p(s(bool,'|dollar|exists_1'(s(fun(X73,bool),'_dst_x0x1_2'(s(fun(X74,bool),X75),s(fun(X73,X74),happ(s(fun(X76,fun(X73,X74)),X77),s(X76,X78))))))))) )),
  inference(superposition,[],[f3805,f390])).
fof(f18043,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X66,bool),happ(s(fun(X69,fun(X66,bool)),'_dst_x00x11_2'(s(fun(X67,bool),X68),s(fun(X69,fun(X66,X67)),X70))),s(X69,X71))))) | s(X66,X72) = s(X66,sK4(X72,'_dst_x0x1_2'(s(fun(X67,bool),X68),s(fun(X66,X67),happ(s(fun(X69,fun(X66,X67)),X70),s(X69,X71)))),X66))) )),
  inference(superposition,[],[f823,f390])).
fof(f18042,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (~p(s(bool,happ(s(fun(X58,bool),happ(s(fun(X61,fun(X58,bool)),'_dst_x00x11_2'(s(fun(X59,bool),X60),s(fun(X61,fun(X58,X59)),X62))),s(X61,X63))),s(X58,sK5(X64,'_dst_x0x1_2'(s(fun(X59,bool),X60),s(fun(X58,X59),happ(s(fun(X61,fun(X58,X59)),X62),s(X61,X63)))),X58))))) | ~p(s(bool,happ(s(fun(X58,bool),X64),s(X58,X65)))) | p(s(bool,happ(s(fun(X58,bool),'_dst_x0x1_2'(s(fun(X59,bool),X60),s(fun(X58,X59),happ(s(fun(X61,fun(X58,X59)),X62),s(X61,X63))))),s(X58,sK6(X64,'_dst_x0x1_2'(s(fun(X59,bool),X60),s(fun(X58,X59),happ(s(fun(X61,fun(X58,X59)),X62),s(X61,X63)))),X58)))))) )),
  inference(superposition,[],[f315,f390])).
fof(f18041,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (~p(s(bool,happ(s(fun(X50,bool),happ(s(fun(X53,fun(X50,bool)),'_dst_x00x11_2'(s(fun(X51,bool),X52),s(fun(X53,fun(X50,X51)),X54))),s(X53,X55))),s(X50,X56)))) | p(s(bool,happ(s(fun(X50,bool),X57),s(X50,sK6('_dst_x0x1_2'(s(fun(X51,bool),X52),s(fun(X50,X51),happ(s(fun(X53,fun(X50,X51)),X54),s(X53,X55)))),X57,X50))))) | p(s(bool,happ(s(fun(X50,bool),'_dst_x0x1_2'(s(fun(X51,bool),X52),s(fun(X50,X51),happ(s(fun(X53,fun(X50,X51)),X54),s(X53,X55))))),s(X50,sK5('_dst_x0x1_2'(s(fun(X51,bool),X52),s(fun(X50,X51),happ(s(fun(X53,fun(X50,X51)),X54),s(X53,X55)))),X57,X50)))))) )),
  inference(superposition,[],[f314,f390])).
fof(f18040,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X49] : (p(s(bool,'|dollar|exists_1'(s(fun(X43,bool),happ(s(fun(X46,fun(X43,bool)),'_dst_x00x11_2'(s(fun(X44,bool),X45),s(fun(X46,fun(X43,X44)),X47))),s(X46,X48)))))) | s(X43,X49) = s(X43,sK4(X49,'_dst_x0x1_2'(s(fun(X44,bool),X45),s(fun(X43,X44),happ(s(fun(X46,fun(X43,X44)),X47),s(X46,X48)))),X43))) )),
  inference(superposition,[],[f312,f390])).
fof(f18039,plain,(
  ( ! [X39,X37,X41,X38,X36,X42,X40] : (~p(s(bool,happ(s(fun(X36,bool),happ(s(fun(X39,fun(X36,bool)),'_dst_x00x11_2'(s(fun(X37,bool),X38),s(fun(X39,fun(X36,X37)),X40))),s(X39,X41))),s(X36,X42)))) | p(s(bool,happ(s(fun(X36,bool),'_dst_x0x1_2'(s(fun(X37,bool),X38),s(fun(X36,X37),happ(s(fun(X39,fun(X36,X37)),X40),s(X39,X41))))),s(X36,'const.min.@_1'(s(fun(X36,bool),'_dst_x0x1_2'(s(fun(X37,bool),X38),s(fun(X36,X37),happ(s(fun(X39,fun(X36,X37)),X40),s(X39,X41))))))))))) )),
  inference(superposition,[],[f311,f390])).
fof(f18034,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun(X2,X1),X3),s(X2,happ(s(fun(X0,X2),happ(s(fun(X4,fun(X0,X2)),X5),s(X4,X6))),s(X0,X7))))) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X4,fun(X0,X1)),'_dst_x00x11_2'(s(fun(X2,X1),X3),s(fun(X4,fun(X0,X2)),X5))),s(X4,X6))),s(X0,X7)))) )),
  inference(superposition,[],[f365,f390])).
fof(f18033,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(fun(X7,X8),'_dst_x0x1_2'(s(fun(X10,X8),X11),s(fun(X7,X10),happ(s(fun(X9,fun(X7,X10)),X12),s(X9,happ(s(fun(X13,X9),X14),s(X13,X15))))))) = s(fun(X7,X8),happ(s(fun(X13,fun(X7,X8)),'_dst_x0x1_2'(s(fun(X9,fun(X7,X8)),'_dst_x00x11_2'(s(fun(X10,X8),X11),s(fun(X9,fun(X7,X10)),X12))),s(fun(X13,X9),X14))),s(X13,X15)))) )),
  inference(superposition,[],[f390,f365])).
fof(f17928,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s(fun(X39,X44),'_dst_x0x1_2'(s(fun(X40,X44),X45),s(fun(X39,X40),X43))) = s(fun(X39,X44),happ(s(fun('type.list.list'(X41),fun(X39,X44)),'_dst_x00x11_2'(s(fun(X40,X44),X45),s(fun('type.list.list'(X41),fun(X39,X40)),sK16(X42,X43,X41,fun(X39,X40))))),s('type.list.list'(X41),'const.list.NIL_0')))) )),
  inference(superposition,[],[f390,f356])).
fof(f17927,plain,(
  ( ! [X30,X37,X35,X33,X31,X38,X36,X34,X32] : (s(fun(X30,X37),'_dst_x0x1_2'(s(fun(X31,X37),X38),s(fun(X30,X31),happ(s(fun(X33,fun(X30,X31)),X34),s(X33,happ(s(fun(X32,X33),X35),s(X32,X36))))))) = s(fun(X30,X37),happ(s(fun(X32,fun(X30,X37)),'_dst_x00x11_2'(s(fun(X31,X37),X38),s(fun(X32,fun(X30,X31)),'_dst_x0x1_2'(s(fun(X33,fun(X30,X31)),X34),s(fun(X32,X33),X35))))),s(X32,X36)))) )),
  inference(superposition,[],[f390,f365])).
fof(f17926,plain,(
  ( ! [X28,X26,X24,X23,X21,X29,X27,X25,X22] : (s(fun(X21,X28),happ(s(fun(X23,fun(X21,X28)),'_dst_x00x11_2'(s(fun(X22,X28),X29),s(fun(X23,fun(X21,X22)),X24))),s(X23,happ(s(fun(X25,X23),X26),s(X25,X27))))) = s(fun(X21,X28),'_dst_x0x1_2'(s(fun(X22,X28),X29),s(fun(X21,X22),happ(s(fun(X25,fun(X21,X22)),'_dst_x0x1_2'(s(fun(X23,fun(X21,X22)),X24),s(fun(X25,X23),X26))),s(X25,X27)))))) )),
  inference(superposition,[],[f390,f365])).
fof(f17925,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(fun(X7,X14),'_dst_x0x1_2'(s(fun(X8,X14),X15),s(fun(X7,X8),'_dst_x0x1_2'(s(fun(X10,X8),X11),s(fun(X7,X10),happ(s(fun(X9,fun(X7,X10)),X12),s(X9,X13))))))) = s(fun(X7,X14),happ(s(fun(X9,fun(X7,X14)),'_dst_x00x11_2'(s(fun(X8,X14),X15),s(fun(X9,fun(X7,X8)),'_dst_x00x11_2'(s(fun(X10,X8),X11),s(fun(X9,fun(X7,X10)),X12))))),s(X9,X13)))) )),
  inference(superposition,[],[f390,f390])).
fof(f17924,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X3),s(fun(X1,X2),happ(s(fun(X4,fun(X1,X2)),X5),s(X4,X6))))),s(X1,X7))) = s(X0,happ(s(fun(X1,X0),happ(s(fun(X4,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X3),s(fun(X4,fun(X1,X2)),X5))),s(X4,X6))),s(X1,X7)))) )),
  inference(unit_resulting_resolution,[],[f390,f351])).
fof(f17732,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ind_type.recspace'(X16),'const.ind_type.CONSTR_3'(s('type.num.num',X17),s(X16,X18),s(fun('type.num.num','type.ind_type.recspace'(X16)),sK13(happ(s(fun(X16,fun(fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16))),'const.ind_type.CONSTR_1'(s('type.num.num',X17))),s(X16,X18)),X19,fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16))))) != s('type.ind_type.recspace'(X16),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16)),X19),s(fun('type.num.num','type.ind_type.recspace'(X16)),sK13(happ(s(fun(X16,fun(fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16))),'const.ind_type.CONSTR_1'(s('type.num.num',X17))),s(X16,X18)),X19,fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16))))) | s(fun(fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16)),X19) = s(fun(fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16)),happ(s(fun(X16,fun(fun('type.num.num','type.ind_type.recspace'(X16)),'type.ind_type.recspace'(X16))),'const.ind_type.CONSTR_1'(s('type.num.num',X17))),s(X16,X18)))) )),
  inference(superposition,[],[f352,f319])).
fof(f17731,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ind_type.recspace'(X12),'const.ind_type.CONSTR_3'(s('type.num.num',X13),s(X12,X14),s(fun('type.num.num','type.ind_type.recspace'(X12)),sK13(X15,happ(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12))),'const.ind_type.CONSTR_1'(s('type.num.num',X13))),s(X12,X14)),fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12))))) != s('type.ind_type.recspace'(X12),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12)),X15),s(fun('type.num.num','type.ind_type.recspace'(X12)),sK13(X15,happ(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12))),'const.ind_type.CONSTR_1'(s('type.num.num',X13))),s(X12,X14)),fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12))))) | s(fun(fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12)),X15) = s(fun(fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12)),happ(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),'type.ind_type.recspace'(X12))),'const.ind_type.CONSTR_1'(s('type.num.num',X13))),s(X12,X14)))) )),
  inference(superposition,[],[f352,f319])).
fof(f17633,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X115),bool),sK16(X116,happ(s(fun('type.list.list'(X113),bool),sK16(X114,sK5('_i_0_0','_i_0_0',bool),X113,bool)),s('type.list.list'(X113),'const.list.NIL_0')),X115,bool))))) ) | $spl28),
  inference(subsumption_resolution,[],[f17557,f256])).
fof(f17557,plain,(
  ( ! [X116,X114,X115,X113] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X115),bool),sK16(X116,happ(s(fun('type.list.list'(X113),bool),sK16(X114,sK5('_i_0_0','_i_0_0',bool),X113,bool)),s('type.list.list'(X113),'const.list.NIL_0')),X115,bool))))) ) | $spl28),
  inference(superposition,[],[f3944,f7009])).
fof(f17625,plain,(
  ( ! [X43,X44,X42] : (s(bool,X44) != s(bool,happ(s(fun('type.list.list'(X42),bool),sK16(X43,sK5('_i_0_0','_i_0_0',bool),X42,bool)),s('type.list.list'(X42),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X44)) ) | $spl28),
  inference(subsumption_resolution,[],[f17531,f256])).
fof(f17531,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,happ(s(fun('type.list.list'(X42),bool),sK16(X43,sK5('_i_0_0','_i_0_0',bool),X42,bool)),s('type.list.list'(X42),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X44)) ) | $spl28),
  inference(superposition,[],[f434,f7009])).
fof(f17618,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)),s('type.list.list'(X8),'const.min.@_1'(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)))))))) ) | $spl28),
  inference(subsumption_resolution,[],[f17519,f256])).
fof(f17519,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)),s('type.list.list'(X8),'const.min.@_1'(s(fun('type.list.list'(X8),bool),sK16(X9,sK5('_i_0_0','_i_0_0',bool),X8,bool)))))))) ) | $spl28),
  inference(superposition,[],[f311,f7009])).
fof(f17615,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'(X3),bool),X5),s('type.list.list'(X3),sK6(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3)))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool)),s('type.list.list'(X3),sK5(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3))))))) ) | $spl28),
  inference(subsumption_resolution,[],[f17517,f256])).
fof(f17517,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),X5),s('type.list.list'(X3),sK6(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3)))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool)),s('type.list.list'(X3),sK5(sK16(X4,sK5('_i_0_0','_i_0_0',bool),X3,bool),X5,'type.list.list'(X3))))))) ) | $spl28),
  inference(superposition,[],[f314,f7009])).
fof(f17614,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0)),s('type.list.list'(X0),sK2(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),X2))))) ) | $spl28),
  inference(subsumption_resolution,[],[f17516,f256])).
fof(f17516,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0)),s('type.list.list'(X0),sK2(sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),X2))))) ) | $spl28),
  inference(superposition,[],[f305,f7009])).
fof(f17106,plain,(
  ( ! [X167,X165,X166] : (s(bool,X165) = s(bool,'const.ind_type.ISO_2'(s(fun(X167,X167),'_i_0_0'),s(fun(X167,X167),'_i_0_0'))) | s(bool,'F_0') = s(bool,sK4(X165,X166,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X166)))) )),
  inference(superposition,[],[f1625,f823])).
fof(f17105,plain,(
  ( ! [X163,X164,X162] : (s(bool,X163) = s(bool,'const.ind_type.ISO_2'(s(fun(X164,X164),'_i_0_0'),s(fun(X164,X164),'_i_0_0'))) | s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X162),'const.sum.INL_1'(s(bool,X163)))))) )),
  inference(superposition,[],[f1625,f336])).
fof(f17104,plain,(
  ( ! [X161,X159,X160] : (s(bool,X160) = s(bool,'const.ind_type.ISO_2'(s(fun(X161,X161),'_i_0_0'),s(fun(X161,X161),'_i_0_0'))) | s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X159,bool),'const.sum.INR_1'(s(bool,X160)))))) )),
  inference(superposition,[],[f1625,f337])).
fof(f17102,plain,(
  ( ! [X154,X152,X153] : (s(bool,X152) = s(bool,'const.ind_type.ISO_2'(s(fun(X154,X154),'_i_0_0'),s(fun(X154,X154),'_i_0_0'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X152),s(fun('type.num.num',bool),X153),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1625,f310])).
fof(f17101,plain,(
  ( ! [X151,X149,X150,X148] : (s(bool,X149) = s(bool,'const.ind_type.ISO_2'(s(fun(X151,X151),'_i_0_0'),s(fun(X151,X151),'_i_0_0'))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X148),'const.pair.,_2'(s(bool,X149),s(X148,X150)))))) )),
  inference(superposition,[],[f1625,f341])).
fof(f17100,plain,(
  ( ! [X146,X144,X147,X145] : (s(bool,X146) = s(bool,'const.ind_type.ISO_2'(s(fun(X147,X147),'_i_0_0'),s(fun(X147,X147),'_i_0_0'))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X144,bool),'const.pair.,_2'(s(X144,X145),s(bool,X146)))))) )),
  inference(superposition,[],[f1625,f340])).
fof(f17098,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,X139) = s(bool,'const.ind_type.ISO_2'(s(fun(X140,X140),'_i_0_0'),s(fun(X140,X140),'_i_0_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X137),bool),sK16(X138,X139,X137,bool)),s('type.list.list'(X137),'const.list.NIL_0')))) )),
  inference(superposition,[],[f1625,f356])).
fof(f17095,plain,(
  ( ! [X123,X124] : (s(bool,X123) = s(bool,'const.ind_type.ISO_2'(s(fun(X124,X124),'_i_0_0'),s(fun(X124,X124),'_i_0_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X123)))) )),
  inference(superposition,[],[f1625,f303])).
fof(f17027,plain,(
  ( ! [X70,X68,X66,X69,X67] : (~p(s(bool,happ(s(fun(X67,bool),X68),s(X67,happ(s(fun('type.list.list'(X66),X67),X69),s('type.list.list'(X66),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'(X66),bool),'_dst_x0x1_2'(s(fun(X67,bool),X68),s(fun('type.list.list'(X66),X67),X69))),s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK3('_dst_x0x1_2'(s(fun(X67,bool),X68),s(fun('type.list.list'(X66),X67),X69)),X66)),s('type.list.list'(X66),sK2('_dst_x0x1_2'(s(fun(X67,bool),X68),s(fun('type.list.list'(X66),X67),X69)),X66))))))) | p(s(bool,happ(s(fun('type.list.list'(X66),bool),'_dst_x0x1_2'(s(fun(X67,bool),X68),s(fun('type.list.list'(X66),X67),X69))),s('type.list.list'(X66),X70))))) )),
  inference(superposition,[],[f305,f365])).
fof(f17026,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X64)) | ~p(s(bool,happ(s(fun('type.list.list'(X62),bool),sK16(X63,X64,X62,bool)),s('type.list.list'(X62),'const.list.CONS_2'(s(X62,sK3(sK16(X63,X64,X62,bool),X62)),s('type.list.list'(X62),sK2(sK16(X63,X64,X62,bool),X62))))))) | p(s(bool,happ(s(fun('type.list.list'(X62),bool),sK16(X63,X64,X62,bool)),s('type.list.list'(X62),X65))))) )),
  inference(superposition,[],[f305,f356])).
fof(f17048,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun('type.list.list'(X3),bool),X4),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK3(X4,X3)),s('type.list.list'(X3),sK2(X4,X3))))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),X4),s('type.list.list'(X3),X5)))) | s(bool,X6) = s(bool,happ(s(fun('type.list.list'(X3),bool),X4),s('type.list.list'(X3),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f17010,f256])).
fof(f17010,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'(X3),bool),X4),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK3(X4,X3)),s('type.list.list'(X3),sK2(X4,X3))))))) | p(s(bool,happ(s(fun('type.list.list'(X3),bool),X4),s('type.list.list'(X3),X5)))) | s(bool,X6) = s(bool,happ(s(fun('type.list.list'(X3),bool),X4),s('type.list.list'(X3),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f305,f432])).
fof(f17008,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,happ(s(fun('type.list.list'(X58),bool),X59),s('type.list.list'(X58),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X58),bool),sK4(X59,X60,fun('type.list.list'(X58),bool))),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,sK3(sK4(X59,X60,fun('type.list.list'(X58),bool)),X58)),s('type.list.list'(X58),sK2(sK4(X59,X60,fun('type.list.list'(X58),bool)),X58))))))) | p(s(bool,happ(s(fun('type.list.list'(X58),bool),sK4(X59,X60,fun('type.list.list'(X58),bool))),s('type.list.list'(X58),X61)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun('type.list.list'(X58),bool),bool),X60)))) )),
  inference(superposition,[],[f305,f823])).
fof(f17047,plain,(
  ( ! [X57,X54,X56,X55] : (p(s(bool,happ(s(fun('type.list.list'(X54),bool),X56),s('type.list.list'(X54),X57)))) | ~p(s(bool,happ(s(fun('type.list.list'(X54),bool),X56),s('type.list.list'(X54),'const.list.CONS_2'(s(X54,sK3('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56)))),X54)),s('type.list.list'(X54),sK2('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56)))),X54))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X54),bool),X56),s('type.list.list'(X54),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17046,f336])).
fof(f17046,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,happ(s(fun('type.list.list'(X54),bool),X56),s('type.list.list'(X54),'const.list.CONS_2'(s(X54,sK3('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56)))),X54)),s('type.list.list'(X54),sK2('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56)))),X54))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X54),bool),X56),s('type.list.list'(X54),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X54),bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56))))),s('type.list.list'(X54),X57))))) )),
  inference(forward_demodulation,[],[f17007,f336])).
fof(f17007,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,happ(s(fun('type.list.list'(X54),bool),X56),s('type.list.list'(X54),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X54),bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56))))),s('type.list.list'(X54),'const.list.CONS_2'(s(X54,sK3('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56)))),X54)),s('type.list.list'(X54),sK2('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56)))),X54))))))) | p(s(bool,happ(s(fun('type.list.list'(X54),bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X54),bool),X55),'const.sum.INL_1'(s(fun('type.list.list'(X54),bool),X56))))),s('type.list.list'(X54),X57))))) )),
  inference(superposition,[],[f305,f336])).
fof(f17045,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,happ(s(fun('type.list.list'(X50),bool),X52),s('type.list.list'(X50),X53)))) | ~p(s(bool,happ(s(fun('type.list.list'(X50),bool),X52),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK3('const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52)))),X50)),s('type.list.list'(X50),sK2('const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52)))),X50))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X50),bool),X52),s('type.list.list'(X50),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17044,f337])).
fof(f17044,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,happ(s(fun('type.list.list'(X50),bool),X52),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK3('const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52)))),X50)),s('type.list.list'(X50),sK2('const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52)))),X50))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X50),bool),X52),s('type.list.list'(X50),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X50),bool),'const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52))))),s('type.list.list'(X50),X53))))) )),
  inference(forward_demodulation,[],[f17006,f337])).
fof(f17006,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,happ(s(fun('type.list.list'(X50),bool),X52),s('type.list.list'(X50),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X50),bool),'const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52))))),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK3('const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52)))),X50)),s('type.list.list'(X50),sK2('const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52)))),X50))))))) | p(s(bool,happ(s(fun('type.list.list'(X50),bool),'const.sum.OUTR_1'(s('type.sum.sum'(X51,fun('type.list.list'(X50),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X50),bool),X52))))),s('type.list.list'(X50),X53))))) )),
  inference(superposition,[],[f305,f337])).
fof(f17043,plain,(
  ( ! [X47,X45,X48,X46,X49] : (p(s(bool,happ(s(fun('type.list.list'(X45),bool),happ(s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num',X48))),s('type.list.list'(X45),X49)))) | ~p(s(bool,happ(s(fun('type.list.list'(X45),bool),happ(s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num',X48))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,sK3('const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))),X45)),s('type.list.list'(X45),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))),X45))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X45),bool),happ(s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num',X48))),s('type.list.list'(X45),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17042,f318])).
fof(f17042,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,happ(s(fun('type.list.list'(X45),bool),happ(s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num',X48))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,sK3('const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))),X45)),s('type.list.list'(X45),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))),X45))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X45),bool),happ(s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num',X48))),s('type.list.list'(X45),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X45),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.list.list'(X45),X49))))) )),
  inference(forward_demodulation,[],[f17005,f318])).
fof(f17005,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,happ(s(fun('type.list.list'(X45),bool),happ(s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num',X48))),s('type.list.list'(X45),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X45),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,sK3('const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))),X45)),s('type.list.list'(X45),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))),X45))))))) | p(s(bool,happ(s(fun('type.list.list'(X45),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X45),bool),X46),s(fun('type.num.num',fun('type.list.list'(X45),bool)),X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.list.list'(X45),X49))))) )),
  inference(superposition,[],[f305,f318])).
fof(f17041,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,happ(s(fun('type.list.list'(X41),bool),X42),s('type.list.list'(X41),X44)))) | ~p(s(bool,happ(s(fun('type.list.list'(X41),bool),X42),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,sK3('const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0')),X41)),s('type.list.list'(X41),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0')),X41))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X41),bool),X42),s('type.list.list'(X41),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17040,f310])).
fof(f17040,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,happ(s(fun('type.list.list'(X41),bool),X42),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,sK3('const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0')),X41)),s('type.list.list'(X41),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0')),X41))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X41),bool),X42),s('type.list.list'(X41),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X41),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(X41),X44))))) )),
  inference(forward_demodulation,[],[f17004,f310])).
fof(f17004,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,happ(s(fun('type.list.list'(X41),bool),X42),s('type.list.list'(X41),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X41),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,sK3('const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0')),X41)),s('type.list.list'(X41),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0')),X41))))))) | p(s(bool,happ(s(fun('type.list.list'(X41),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X41),bool),X42),s(fun('type.num.num',fun('type.list.list'(X41),bool)),X43),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(X41),X44))))) )),
  inference(superposition,[],[f305,f310])).
fof(f17039,plain,(
  ( ! [X39,X37,X38,X36,X40] : (p(s(bool,happ(s(fun('type.list.list'(X36),bool),X38),s('type.list.list'(X36),X40)))) | ~p(s(bool,happ(s(fun('type.list.list'(X36),bool),X38),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK3('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39)))),X36)),s('type.list.list'(X36),sK2('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39)))),X36))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X36),bool),X38),s('type.list.list'(X36),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17038,f341])).
fof(f17038,plain,(
  ( ! [X39,X37,X38,X36,X40] : (~p(s(bool,happ(s(fun('type.list.list'(X36),bool),X38),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK3('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39)))),X36)),s('type.list.list'(X36),sK2('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39)))),X36))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X36),bool),X38),s('type.list.list'(X36),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X36),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39))))),s('type.list.list'(X36),X40))))) )),
  inference(forward_demodulation,[],[f17003,f341])).
fof(f17003,plain,(
  ( ! [X39,X37,X38,X36,X40] : (~p(s(bool,happ(s(fun('type.list.list'(X36),bool),X38),s('type.list.list'(X36),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X36),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39))))),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK3('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39)))),X36)),s('type.list.list'(X36),sK2('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39)))),X36))))))) | p(s(bool,happ(s(fun('type.list.list'(X36),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X36),bool),X37),'const.pair.,_2'(s(fun('type.list.list'(X36),bool),X38),s(X37,X39))))),s('type.list.list'(X36),X40))))) )),
  inference(superposition,[],[f305,f341])).
fof(f17037,plain,(
  ( ! [X35,X33,X31,X34,X32] : (p(s(bool,happ(s(fun('type.list.list'(X31),bool),X34),s('type.list.list'(X31),X35)))) | ~p(s(bool,happ(s(fun('type.list.list'(X31),bool),X34),s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK3('const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34)))),X31)),s('type.list.list'(X31),sK2('const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34)))),X31))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X31),bool),X34),s('type.list.list'(X31),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17036,f340])).
fof(f17036,plain,(
  ( ! [X35,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.list.list'(X31),bool),X34),s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK3('const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34)))),X31)),s('type.list.list'(X31),sK2('const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34)))),X31))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X31),bool),X34),s('type.list.list'(X31),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X31),bool),'const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34))))),s('type.list.list'(X31),X35))))) )),
  inference(forward_demodulation,[],[f17002,f340])).
fof(f17002,plain,(
  ( ! [X35,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.list.list'(X31),bool),X34),s('type.list.list'(X31),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X31),bool),'const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34))))),s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK3('const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34)))),X31)),s('type.list.list'(X31),sK2('const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34)))),X31))))))) | p(s(bool,happ(s(fun('type.list.list'(X31),bool),'const.pair.SND_1'(s('type.pair.prod'(X32,fun('type.list.list'(X31),bool)),'const.pair.,_2'(s(X32,X33),s(fun('type.list.list'(X31),bool),X34))))),s('type.list.list'(X31),X35))))) )),
  inference(superposition,[],[f305,f340])).
fof(f17035,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),X30)))) | ~p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),'const.list.CONS_2'(s(X27,sK3(happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29)),X27)),s('type.list.list'(X27),sK2(happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29)),X27))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17034,f338])).
fof(f17034,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),'const.list.CONS_2'(s(X27,sK3(happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29)),X27)),s('type.list.list'(X27),sK2(happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29)),X27))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X27),bool),happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),X30))))) )),
  inference(forward_demodulation,[],[f17001,f338])).
fof(f17001,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X27),bool),happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),'const.list.CONS_2'(s(X27,sK3(happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29)),X27)),s('type.list.list'(X27),sK2(happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29)),X27))))))) | p(s(bool,happ(s(fun('type.list.list'(X27),bool),happ(s(fun('type.pair.prod'(fun('type.list.list'(X27),bool),X28),fun('type.list.list'(X27),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X27),bool),X28),X29))),s('type.list.list'(X27),X30))))) )),
  inference(superposition,[],[f305,f338])).
fof(f17033,plain,(
  ( ! [X26,X24,X23,X25,X22] : (p(s(bool,happ(s(fun('type.list.list'(X22),bool),X25),s('type.list.list'(X22),X26)))) | ~p(s(bool,happ(s(fun('type.list.list'(X22),bool),X25),s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK3(happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0')),X22)),s('type.list.list'(X22),sK2(happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0')),X22))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X22),bool),X25),s('type.list.list'(X22),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17032,f356])).
fof(f17032,plain,(
  ( ! [X26,X24,X23,X25,X22] : (~p(s(bool,happ(s(fun('type.list.list'(X22),bool),X25),s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK3(happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0')),X22)),s('type.list.list'(X22),sK2(happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0')),X22))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X22),bool),X25),s('type.list.list'(X22),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X22),bool),happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0'))),s('type.list.list'(X22),X26))))) )),
  inference(forward_demodulation,[],[f17000,f356])).
fof(f17000,plain,(
  ( ! [X26,X24,X23,X25,X22] : (~p(s(bool,happ(s(fun('type.list.list'(X22),bool),X25),s('type.list.list'(X22),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X22),bool),happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0'))),s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK3(happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0')),X22)),s('type.list.list'(X22),sK2(happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0')),X22))))))) | p(s(bool,happ(s(fun('type.list.list'(X22),bool),happ(s(fun('type.list.list'(X23),fun('type.list.list'(X22),bool)),sK16(X24,X25,X23,fun('type.list.list'(X22),bool))),s('type.list.list'(X23),'const.list.NIL_0'))),s('type.list.list'(X22),X26))))) )),
  inference(superposition,[],[f305,f356])).
fof(f16999,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~p(s(bool,happ(s(fun('type.list.list'(X15),bool),happ(s(fun(X17,fun('type.list.list'(X15),bool)),X18),s(X17,happ(s(fun(X16,X17),X19),s(X16,X20))))),s('type.list.list'(X15),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X15),bool),happ(s(fun(X16,fun('type.list.list'(X15),bool)),'_dst_x0x1_2'(s(fun(X17,fun('type.list.list'(X15),bool)),X18),s(fun(X16,X17),X19))),s(X16,X20))),s('type.list.list'(X15),'const.list.CONS_2'(s(X15,sK3(happ(s(fun(X16,fun('type.list.list'(X15),bool)),'_dst_x0x1_2'(s(fun(X17,fun('type.list.list'(X15),bool)),X18),s(fun(X16,X17),X19))),s(X16,X20)),X15)),s('type.list.list'(X15),sK2(happ(s(fun(X16,fun('type.list.list'(X15),bool)),'_dst_x0x1_2'(s(fun(X17,fun('type.list.list'(X15),bool)),X18),s(fun(X16,X17),X19))),s(X16,X20)),X15))))))) | p(s(bool,happ(s(fun('type.list.list'(X15),bool),happ(s(fun(X16,fun('type.list.list'(X15),bool)),'_dst_x0x1_2'(s(fun(X17,fun('type.list.list'(X15),bool)),X18),s(fun(X16,X17),X19))),s(X16,X20))),s('type.list.list'(X15),X21))))) )),
  inference(superposition,[],[f305,f365])).
fof(f16998,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~p(s(bool,happ(s(fun('type.list.list'(X8),bool),happ(s(fun(X11,fun('type.list.list'(X8),bool)),'_dst_x0x1_2'(s(fun(X9,fun('type.list.list'(X8),bool)),X10),s(fun(X11,X9),X12))),s(X11,X13))),s('type.list.list'(X8),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X8),bool),happ(s(fun(X9,fun('type.list.list'(X8),bool)),X10),s(X9,happ(s(fun(X11,X9),X12),s(X11,X13))))),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK3(happ(s(fun(X9,fun('type.list.list'(X8),bool)),X10),s(X9,happ(s(fun(X11,X9),X12),s(X11,X13)))),X8)),s('type.list.list'(X8),sK2(happ(s(fun(X9,fun('type.list.list'(X8),bool)),X10),s(X9,happ(s(fun(X11,X9),X12),s(X11,X13)))),X8))))))) | p(s(bool,happ(s(fun('type.list.list'(X8),bool),happ(s(fun(X9,fun('type.list.list'(X8),bool)),X10),s(X9,happ(s(fun(X11,X9),X12),s(X11,X13))))),s('type.list.list'(X8),X14))))) )),
  inference(superposition,[],[f305,f365])).
fof(f17031,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.list.list'(X5),bool),X6),s('type.list.list'(X5),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'(X5),bool),X6),s('type.list.list'(X5),'const.list.CONS_2'(s(X5,sK3(happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6)),X5)),s('type.list.list'(X5),sK2(happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6)),X5))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X5),bool),X6),s('type.list.list'(X5),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17030,f303])).
fof(f17030,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun('type.list.list'(X5),bool),X6),s('type.list.list'(X5),'const.list.CONS_2'(s(X5,sK3(happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6)),X5)),s('type.list.list'(X5),sK2(happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6)),X5))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X5),bool),X6),s('type.list.list'(X5),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X5),bool),happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6))),s('type.list.list'(X5),X7))))) )),
  inference(forward_demodulation,[],[f16997,f303])).
fof(f16997,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun('type.list.list'(X5),bool),X6),s('type.list.list'(X5),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X5),bool),happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6))),s('type.list.list'(X5),'const.list.CONS_2'(s(X5,sK3(happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6)),X5)),s('type.list.list'(X5),sK2(happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6)),X5))))))) | p(s(bool,happ(s(fun('type.list.list'(X5),bool),happ(s(fun(fun('type.list.list'(X5),bool),fun('type.list.list'(X5),bool)),'_i_0_0'),s(fun('type.list.list'(X5),bool),X6))),s('type.list.list'(X5),X7))))) )),
  inference(superposition,[],[f305,f303])).
fof(f17029,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun('type.list.list'(X0),X1),X2))),s('type.list.list'(X0),X4)))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun('type.list.list'(X0),X1),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3)),X0)),s('type.list.list'(X0),sK2(happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3)),X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun('type.list.list'(X0),X1),X2))),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f17028,f364])).
fof(f17028,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun('type.list.list'(X0),X1),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3)),X0)),s('type.list.list'(X0),sK2(happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3)),X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun('type.list.list'(X0),X1),X2))),s('type.list.list'(X0),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3))),s('type.list.list'(X0),X4))))) )),
  inference(forward_demodulation,[],[f16996,f364])).
fof(f16996,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun('type.list.list'(X0),X1),X2))),s('type.list.list'(X0),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3)),X0)),s('type.list.list'(X0),sK2(happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3)),X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),happ(s(fun(fun(X1,bool),fun('type.list.list'(X0),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X0),X1),X2))),s(fun(X1,bool),X3))),s('type.list.list'(X0),X4))))) )),
  inference(superposition,[],[f305,f364])).
fof(f16924,plain,(
  ( ! [X161,X159,X160] : (s(bool,X159) != s(bool,'const.ind_type.ISO_2'(s(fun(X161,X161),'_i_0_0'),s(fun(X161,X161),'_i_0_0'))) | s(bool,'T_0') = s(bool,sK4(X159,X160,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X160)))) )),
  inference(superposition,[],[f790,f823])).
fof(f16923,plain,(
  ( ! [X158,X156,X157] : (s(bool,X157) != s(bool,'const.ind_type.ISO_2'(s(fun(X158,X158),'_i_0_0'),s(fun(X158,X158),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X156),'const.sum.INL_1'(s(bool,X157)))))) )),
  inference(superposition,[],[f790,f336])).
fof(f16922,plain,(
  ( ! [X154,X155,X153] : (s(bool,X154) != s(bool,'const.ind_type.ISO_2'(s(fun(X155,X155),'_i_0_0'),s(fun(X155,X155),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X153,bool),'const.sum.INR_1'(s(bool,X154)))))) )),
  inference(superposition,[],[f790,f337])).
fof(f16920,plain,(
  ( ! [X146,X147,X148] : (s(bool,X146) != s(bool,'const.ind_type.ISO_2'(s(fun(X148,X148),'_i_0_0'),s(fun(X148,X148),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X146),s(fun('type.num.num',bool),X147),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f790,f310])).
fof(f16919,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,X143) != s(bool,'const.ind_type.ISO_2'(s(fun(X145,X145),'_i_0_0'),s(fun(X145,X145),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X142),'const.pair.,_2'(s(bool,X143),s(X142,X144)))))) )),
  inference(superposition,[],[f790,f341])).
fof(f16918,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,X140) != s(bool,'const.ind_type.ISO_2'(s(fun(X141,X141),'_i_0_0'),s(fun(X141,X141),'_i_0_0'))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X138,bool),'const.pair.,_2'(s(X138,X139),s(bool,X140)))))) )),
  inference(superposition,[],[f790,f340])).
fof(f16916,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X133) != s(bool,'const.ind_type.ISO_2'(s(fun(X134,X134),'_i_0_0'),s(fun(X134,X134),'_i_0_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X131),bool),sK16(X132,X133,X131,bool)),s('type.list.list'(X131),'const.list.NIL_0')))) )),
  inference(superposition,[],[f790,f356])).
fof(f16913,plain,(
  ( ! [X118,X117] : (s(bool,X117) != s(bool,'const.ind_type.ISO_2'(s(fun(X118,X118),'_i_0_0'),s(fun(X118,X118),'_i_0_0'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X117)))) )),
  inference(superposition,[],[f790,f303])).
fof(f16873,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,'const.ind_type.ISO_2'(s(fun(X2,X2),'_i_0_0'),s(fun(X2,X2),'_i_0_0')),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f356,f790])).
fof(f16701,plain,(
  ( ! [X43,X44,X42] : (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X42) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X44) | s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X44))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4(X42,X43,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X43)))) )),
  inference(superposition,[],[f335,f823])).
fof(f16692,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X9,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X10),s(X9,happ(s(fun(X8,X9),X11),s(X8,X12))))) | s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X8,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_dst_x0x1_2'(s(fun(X9,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X10),s(fun(X8,X9),X11))),s(X8,X12)))))) )),
  inference(superposition,[],[f335,f365])).
fof(f16691,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X4,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_dst_x0x1_2'(s(fun(X2,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X3),s(fun(X4,X2),X5))),s(X4,X6))) | s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X2,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6)))))))) )),
  inference(superposition,[],[f335,f365])).
fof(f16687,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X0,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1),s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X2,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_dst_x0x1_2'(s(fun(X0,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X1),s(fun(X2,X0),X3))),s(X2,X4)))))) )),
  inference(unit_resulting_resolution,[],[f365,f335])).
fof(f16520,plain,(
  ( ! [X43,X44,X42] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X42))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X44))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X44) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4(X42,X43,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),bool),X43)))) )),
  inference(superposition,[],[f334,f823])).
fof(f16519,plain,(
  ( ! [X39,X41,X40] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X41))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X41) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.sum.OUTL_1'(s('type.sum.sum'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X39),'const.sum.INL_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40)))))) )),
  inference(superposition,[],[f334,f336])).
fof(f16518,plain,(
  ( ! [X37,X38,X36] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X37))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X38))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X38) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.sum.OUTR_1'(s('type.sum.sum'(X36,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'const.sum.INR_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X37)))))) )),
  inference(superposition,[],[f334,f337])).
fof(f16517,plain,(
  ( ! [X35,X33,X34,X32] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X35))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X33),s('type.num.num',X34))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X35) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X32),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',X34)))))) )),
  inference(superposition,[],[f334,f318])).
fof(f16516,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X31))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X31) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.ind_type.FCONS_3'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29),s(fun('type.num.num','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X30),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f334,f310])).
fof(f16515,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X28))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X28) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.pair.FST_1'(s('type.pair.prod'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25),'const.pair.,_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26),s(X25,X27)))))) )),
  inference(superposition,[],[f334,f341])).
fof(f16514,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.pair.SND_1'(s('type.pair.prod'(X21,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'const.pair.,_2'(s(X21,X22),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23)))))) )),
  inference(superposition,[],[f334,f340])).
fof(f16513,plain,(
  ( ! [X19,X20,X18] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.pair.FST_1'(s('type.pair.prod'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X18),X19))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.pair.prod'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X18),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'const.pair.FST_0'),s('type.pair.prod'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X18),X19)))) )),
  inference(superposition,[],[f334,f338])).
fof(f16512,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X16))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X17))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X17) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.list.list'(X14),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),sK16(X15,X16,X14,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))))),s('type.list.list'(X14),'const.list.NIL_0')))) )),
  inference(superposition,[],[f334,f356])).
fof(f16511,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X9,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X10),s(X9,happ(s(fun(X8,X9),X11),s(X8,X12))))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X13) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X8,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_dst_x0x1_2'(s(fun(X9,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X10),s(fun(X8,X9),X11))),s(X8,X12)))) )),
  inference(superposition,[],[f334,f365])).
fof(f16510,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X4,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_dst_x0x1_2'(s(fun(X2,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X3),s(fun(X4,X2),X5))),s(X4,X6))))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X2,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6)))))) )),
  inference(superposition,[],[f334,f365])).
fof(f16509,plain,(
  ( ! [X0,X1] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),'_i_0_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0)))) )),
  inference(superposition,[],[f334,f303])).
fof(f15925,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,X14)))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK11(X13,X11,X12,X10,X9))))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f15898,f256])).
fof(f15898,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,X14)))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK11(X13,X11,X12,X10,X9))))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f347,f432])).
fof(f15924,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X1,'_i_0_0','_i_0_0',X0,X0)))))) )),
  inference(forward_demodulation,[],[f15923,f303])).
fof(f15923,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X2)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X1,'_i_0_0','_i_0_0',X0,X0)))))) )),
  inference(subsumption_resolution,[],[f15896,f256])).
fof(f15896,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X2)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X1,'_i_0_0','_i_0_0',X0,X0)))))) )),
  inference(superposition,[],[f347,f427])).
fof(f15895,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X94),X98),s(fun(X94,X95),X96)))) | ~p(s(bool,happ(s(fun(X95,bool),X99),s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,X100)))))) | p(s(bool,happ(s(fun(X95,bool),X99),s(X95,sK11(X99,X98,sK4(X96,X97,fun(X94,X95)),X94,X95))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f347,f823])).
fof(f15922,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),X90),s(X87,X93)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | p(s(bool,happ(s(fun(X88,bool),X92),s(X88,sK11(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88)))))) )),
  inference(forward_demodulation,[],[f15894,f336])).
fof(f15894,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | ~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90))))),s(X87,X93)))))) | p(s(bool,happ(s(fun(X88,bool),X92),s(X88,sK11(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88)))))) )),
  inference(superposition,[],[f347,f336])).
fof(f15921,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),X83),s(X80,X86)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | p(s(bool,happ(s(fun(X81,bool),X85),s(X81,sK11(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81)))))) )),
  inference(forward_demodulation,[],[f15893,f337])).
fof(f15893,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | ~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83))))),s(X80,X86)))))) | p(s(bool,happ(s(fun(X81,bool),X85),s(X81,sK11(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81)))))) )),
  inference(superposition,[],[f347,f337])).
fof(f15920,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(X72,X79)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | p(s(bool,happ(s(fun(X73,bool),X78),s(X73,sK11(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73)))))) )),
  inference(forward_demodulation,[],[f15892,f318])).
fof(f15892,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))))),s(X72,X79)))))) | p(s(bool,happ(s(fun(X73,bool),X78),s(X73,sK11(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73)))))) )),
  inference(superposition,[],[f347,f318])).
fof(f15919,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),X67),s(X65,X71)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | p(s(bool,happ(s(fun(X66,bool),X70),s(X66,sK11(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66)))))) )),
  inference(forward_demodulation,[],[f15891,f310])).
fof(f15891,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | ~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0'))),s(X65,X71)))))) | p(s(bool,happ(s(fun(X66,bool),X70),s(X66,sK11(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66)))))) )),
  inference(superposition,[],[f347,f310])).
fof(f15918,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),X60),s(X57,X64)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | p(s(bool,happ(s(fun(X58,bool),X63),s(X58,sK11(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58)))))) )),
  inference(forward_demodulation,[],[f15890,f341])).
fof(f15890,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61))))),s(X57,X64)))))) | p(s(bool,happ(s(fun(X58,bool),X63),s(X58,sK11(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58)))))) )),
  inference(superposition,[],[f347,f341])).
fof(f15917,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),X53),s(X49,X56)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | p(s(bool,happ(s(fun(X50,bool),X55),s(X50,sK11(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50)))))) )),
  inference(forward_demodulation,[],[f15889,f340])).
fof(f15889,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | ~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53))))),s(X49,X56)))))) | p(s(bool,happ(s(fun(X50,bool),X55),s(X50,sK11(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50)))))) )),
  inference(superposition,[],[f347,f340])).
fof(f15916,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,X48)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | p(s(bool,happ(s(fun(X43,bool),X47),s(X43,sK11(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43)))))) )),
  inference(forward_demodulation,[],[f15888,f338])).
fof(f15888,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,X48)))))) | p(s(bool,happ(s(fun(X43,bool),X47),s(X43,sK11(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43)))))) )),
  inference(superposition,[],[f347,f338])).
fof(f15915,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),X38),s(X34,X41)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,sK11(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35)))))) )),
  inference(forward_demodulation,[],[f15887,f356])).
fof(f15887,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | ~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0'))),s(X34,X41)))))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,sK11(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35)))))) )),
  inference(superposition,[],[f347,f356])).
fof(f15886,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X25,X24),X31),s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30)))))))) | ~p(s(bool,happ(s(fun(X25,bool),X32),s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33)))))) | p(s(bool,happ(s(fun(X25,bool),X32),s(X25,sK11(X32,X31,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X24,X25)))))) )),
  inference(superposition,[],[f347,f365])).
fof(f15885,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20)))))) | ~p(s(bool,happ(s(fun(X15,bool),X22),s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23)))))) | p(s(bool,happ(s(fun(X15,bool),X22),s(X15,sK11(X22,X21,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X14,X15)))))) )),
  inference(superposition,[],[f347,f365])).
fof(f15914,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),X10),s(X8,X13)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,sK11(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9)))))) )),
  inference(forward_demodulation,[],[f15884,f303])).
fof(f15884,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10))),s(X8,X13)))))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,sK11(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9)))))) )),
  inference(superposition,[],[f347,f303])).
fof(f15913,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,X7)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | p(s(bool,happ(s(fun(X1,bool),X6),s(X1,sK11(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) )),
  inference(forward_demodulation,[],[f15883,f364])).
fof(f15883,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | ~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,X7)))))) | p(s(bool,happ(s(fun(X1,bool),X6),s(X1,sK11(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) )),
  inference(superposition,[],[f347,f364])).
fof(f15882,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X94,X95),X96),s(fun(X95,X94),X98)))) | ~p(s(bool,happ(s(fun(X94,bool),X99),s(X94,happ(s(fun(X95,X94),X98),s(X95,X100)))))) | p(s(bool,happ(s(fun(X94,bool),X99),s(X94,sK11(X99,sK4(X96,X97,fun(X94,X95)),X98,X95,X94))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f347,f823])).
fof(f15881,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X87,X88),X90),s(fun(X88,X87),X91)))) | ~p(s(bool,happ(s(fun(X87,bool),X92),s(X87,happ(s(fun(X88,X87),X91),s(X88,X93)))))) | p(s(bool,happ(s(fun(X87,bool),X92),s(X87,sK11(X92,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X91,X88,X87)))))) )),
  inference(superposition,[],[f347,f336])).
fof(f15880,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X81),X83),s(fun(X81,X80),X84)))) | ~p(s(bool,happ(s(fun(X80,bool),X85),s(X80,happ(s(fun(X81,X80),X84),s(X81,X86)))))) | p(s(bool,happ(s(fun(X80,bool),X85),s(X80,sK11(X85,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X84,X81,X80)))))) )),
  inference(superposition,[],[f347,f337])).
fof(f15879,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(fun(X73,X72),X77)))) | ~p(s(bool,happ(s(fun(X72,bool),X78),s(X72,happ(s(fun(X73,X72),X77),s(X73,X79)))))) | p(s(bool,happ(s(fun(X72,bool),X78),s(X72,sK11(X78,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X77,X73,X72)))))) )),
  inference(superposition,[],[f347,f318])).
fof(f15878,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X65,X66),X67),s(fun(X66,X65),X69)))) | ~p(s(bool,happ(s(fun(X65,bool),X70),s(X65,happ(s(fun(X66,X65),X69),s(X66,X71)))))) | p(s(bool,happ(s(fun(X65,bool),X70),s(X65,sK11(X70,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X69,X66,X65)))))) )),
  inference(superposition,[],[f347,f310])).
fof(f15877,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X58),X60),s(fun(X58,X57),X62)))) | ~p(s(bool,happ(s(fun(X57,bool),X63),s(X57,happ(s(fun(X58,X57),X62),s(X58,X64)))))) | p(s(bool,happ(s(fun(X57,bool),X63),s(X57,sK11(X63,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X62,X58,X57)))))) )),
  inference(superposition,[],[f347,f341])).
fof(f15876,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X49,X50),X53),s(fun(X50,X49),X54)))) | ~p(s(bool,happ(s(fun(X49,bool),X55),s(X49,happ(s(fun(X50,X49),X54),s(X50,X56)))))) | p(s(bool,happ(s(fun(X49,bool),X55),s(X49,sK11(X55,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X54,X50,X49)))))) )),
  inference(superposition,[],[f347,f340])).
fof(f15875,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(fun(X43,X42),X46)))) | ~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,happ(s(fun(X43,X42),X46),s(X43,X48)))))) | p(s(bool,happ(s(fun(X42,bool),X47),s(X42,sK11(X47,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X46,X43,X42)))))) )),
  inference(superposition,[],[f347,f338])).
fof(f15874,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X34,X35),X38),s(fun(X35,X34),X39)))) | ~p(s(bool,happ(s(fun(X34,bool),X40),s(X34,happ(s(fun(X35,X34),X39),s(X35,X41)))))) | p(s(bool,happ(s(fun(X34,bool),X40),s(X34,sK11(X40,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X39,X35,X34)))))) )),
  inference(superposition,[],[f347,f356])).
fof(f15873,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(fun(X25,X24),X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X32),s(X24,happ(s(fun(X25,X24),X31),s(X25,X33)))))) | p(s(bool,happ(s(fun(X24,bool),X32),s(X24,sK11(X32,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X31,X25,X24)))))) )),
  inference(superposition,[],[f347,f365])).
fof(f15872,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | ~p(s(bool,happ(s(fun(X14,bool),X22),s(X14,happ(s(fun(X15,X14),X21),s(X15,X23)))))) | p(s(bool,happ(s(fun(X14,bool),X22),s(X14,sK11(X22,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X21,X15,X14)))))) )),
  inference(superposition,[],[f347,f365])).
fof(f15871,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X8,X9),X10),s(fun(X9,X8),X11)))) | ~p(s(bool,happ(s(fun(X8,bool),X12),s(X8,happ(s(fun(X9,X8),X11),s(X9,X13)))))) | p(s(bool,happ(s(fun(X8,bool),X12),s(X8,sK11(X12,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X11,X9,X8)))))) )),
  inference(superposition,[],[f347,f303])).
fof(f15870,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X5),s(X1,X7)))))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,sK11(X6,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)))))) )),
  inference(superposition,[],[f347,f364])).
fof(f14890,plain,(
  ( ! [X158,X159,X157] : (s(bool,X157) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X159),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK4(X157,X158,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X158)))) )),
  inference(superposition,[],[f6385,f823])).
fof(f14889,plain,(
  ( ! [X156,X154,X155] : (s(bool,X155) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X156),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X154),'const.sum.INL_1'(s(bool,X155)))))) )),
  inference(superposition,[],[f6385,f336])).
fof(f14888,plain,(
  ( ! [X152,X151,X153] : (s(bool,X152) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X153),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X151,bool),'const.sum.INR_1'(s(bool,X152)))))) )),
  inference(superposition,[],[f6385,f337])).
fof(f14886,plain,(
  ( ! [X146,X144,X145] : (s(bool,X144) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X146),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X144),s(fun('type.num.num',bool),X145),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f6385,f310])).
fof(f14885,plain,(
  ( ! [X142,X140,X143,X141] : (s(bool,X141) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X143),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X140),'const.pair.,_2'(s(bool,X141),s(X140,X142)))))) )),
  inference(superposition,[],[f6385,f341])).
fof(f14884,plain,(
  ( ! [X138,X136,X139,X137] : (s(bool,X138) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X139),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X136,bool),'const.pair.,_2'(s(X136,X137),s(bool,X138)))))) )),
  inference(superposition,[],[f6385,f340])).
fof(f14882,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,X131) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X132),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X129),bool),sK16(X130,X131,X129,bool)),s('type.list.list'(X129),'const.list.NIL_0')))) )),
  inference(superposition,[],[f6385,f356])).
fof(f14879,plain,(
  ( ! [X116,X115] : (s(bool,X115) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X116),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X115)))) )),
  inference(superposition,[],[f6385,f303])).
fof(f258,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.closSem.v_|49||49||split|1',aHL_FALSITY)).
fof(f269,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X22] : (s(bool,'F_0') = s(bool,X22) <=> ~p(s(bool,X22)))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f270,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f204])).
fof(f459,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f303,f264])).
fof(f500,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X0),'const.sum.INL_1'(s(bool,X1))))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f336,f264])).
fof(f527,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X0,bool),'const.sum.INR_1'(s(bool,X1))))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f337,f264])).
fof(f620,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f310,f264])).
fof(f673,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,X2))))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f340,f264])).
fof(f730,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,X1),s(X0,X2))))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f341,f264])).
fof(f882,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,X2,X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f356,f264])).
fof(f1391,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X17),bool),sK16(X18,X19,X17,bool)),s('type.list.list'(X17),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f1351,f303])).
fof(f1351,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X19))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X17),bool),sK16(X18,X19,X17,bool)),s('type.list.list'(X17),'const.list.NIL_0')))) )),
  inference(superposition,[],[f459,f356])).
fof(f1392,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X20,bool),'const.pair.,_2'(s(X20,X21),s(bool,X22)))))) )),
  inference(forward_demodulation,[],[f1352,f303])).
fof(f1352,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X20,bool),'const.pair.,_2'(s(X20,X21),s(bool,X22)))))) )),
  inference(superposition,[],[f459,f340])).
fof(f1393,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X23),'const.pair.,_2'(s(bool,X24),s(X23,X25)))))) )),
  inference(forward_demodulation,[],[f1353,f303])).
fof(f1353,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X24))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X23),'const.pair.,_2'(s(bool,X24),s(X23,X25)))))) )),
  inference(superposition,[],[f459,f341])).
fof(f1394,plain,(
  ( ! [X26,X27] : (s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X26),s(fun('type.num.num',bool),X27),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f1354,f303])).
fof(f1354,plain,(
  ( ! [X26,X27] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X26))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X26),s(fun('type.num.num',bool),X27),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f459,f310])).
fof(f1395,plain,(
  ( ! [X28,X29] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X28,bool),'const.sum.INR_1'(s(bool,X29))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(forward_demodulation,[],[f1355,f303])).
fof(f1355,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X29))) | s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X28,bool),'const.sum.INR_1'(s(bool,X29)))))) )),
  inference(superposition,[],[f459,f337])).
fof(f1396,plain,(
  ( ! [X30,X31] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X30),'const.sum.INL_1'(s(bool,X31))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(forward_demodulation,[],[f1356,f303])).
fof(f1356,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X31))) | s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X30),'const.sum.INL_1'(s(bool,X31)))))) )),
  inference(superposition,[],[f459,f336])).
fof(f1398,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f1397,f303])).
fof(f1397,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X9))) | s(bool,'F_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1368,f256])).
fof(f1368,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X9))) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f331,f459])).
fof(f1400,plain,(
  ( ! [X12,X11] : (p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,'F_0') = s(bool,X11)) )),
  inference(forward_demodulation,[],[f1399,f303])).
fof(f1399,plain,(
  ( ! [X12,X11] : (s(bool,X12) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X11))) | p(s(bool,X12)) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f1369,f256])).
fof(f1369,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(bool,X12) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X11))) | p(s(bool,X12)) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f405,f459])).
fof(f1401,plain,(
  ( ! [X19,X20] : (s(bool,X20) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X19))) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f1372,f256])).
fof(f1372,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s(bool,X20) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X19))) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f434,f459])).
fof(f1547,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X12),X13))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X12),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X12),X13)))) )),
  inference(superposition,[],[f338,f264])).
fof(f1571,plain,(
  ( ! [X74,X75] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X74),X75))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X74),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X74),X75)))) )),
  inference(superposition,[],[f459,f338])).
fof(f1623,plain,(
  ( ! [X23,X22] : (s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22))) | s(bool,'F_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f1606,f256])).
fof(f1606,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22))) | s(bool,'F_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f1398,f459])).
fof(f1625,plain,(
  ( ! [X26,X25] : (s(bool,X26) = s(bool,'const.ind_type.ISO_2'(s(fun(X25,X25),'_i_0_0'),s(fun(X25,X25),'_i_0_0'))) | s(bool,'F_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f1608,f256])).
fof(f1608,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,'const.ind_type.ISO_2'(s(fun(X25,X25),'_i_0_0'),s(fun(X25,X25),'_i_0_0'))) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f1398,f427])).
fof(f2168,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',X25))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X23),s(fun('type.num.num',bool),X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) )),
  inference(superposition,[],[f318,f264])).
fof(f2192,plain,(
  ( ! [X101,X99,X100] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),X100),s('type.num.num',X101))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X99),s(fun('type.num.num',bool),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))))) )),
  inference(superposition,[],[f459,f318])).
fof(f2544,plain,(
  ( ! [X35,X34] : (s(bool,X34) != s(bool,X35) | s(bool,'F_0') = s(bool,X35) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X34)))) )),
  inference(superposition,[],[f1683,f303])).
fof(f2545,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X38) != s(bool,X39) | s(bool,'F_0') = s(bool,X39) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X36),bool),sK16(X37,X38,X36,bool)),s('type.list.list'(X36),'const.list.NIL_0')))) )),
  inference(superposition,[],[f1683,f356])).
fof(f2546,plain,(
  ( ! [X41,X42,X40] : (s(bool,X42) != s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X40),X41))) | s(bool,'F_0') = s(bool,X42) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X40),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X40),X41)))) )),
  inference(superposition,[],[f1683,f338])).
fof(f2547,plain,(
  ( ! [X45,X43,X46,X44] : (s(bool,X45) != s(bool,X46) | s(bool,'F_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X43,bool),'const.pair.,_2'(s(X43,X44),s(bool,X45)))))) )),
  inference(superposition,[],[f1683,f340])).
fof(f2548,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,X48) != s(bool,X50) | s(bool,'F_0') = s(bool,X50) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X47),'const.pair.,_2'(s(bool,X48),s(X47,X49)))))) )),
  inference(superposition,[],[f1683,f341])).
fof(f2549,plain,(
  ( ! [X52,X53,X51] : (s(bool,X51) != s(bool,X53) | s(bool,'F_0') = s(bool,X53) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X51),s(fun('type.num.num',bool),X52),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1683,f310])).
fof(f2550,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,X57) != s(bool,happ(s(fun('type.num.num',bool),X55),s('type.num.num',X56))) | s(bool,'F_0') = s(bool,X57) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X54),s(fun('type.num.num',bool),X55),s('type.num.num','const.num.SUC_1'(s('type.num.num',X56)))))) )),
  inference(superposition,[],[f1683,f318])).
fof(f2551,plain,(
  ( ! [X59,X60,X58] : (s(bool,X59) != s(bool,X60) | s(bool,'F_0') = s(bool,X60) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X58,bool),'const.sum.INR_1'(s(bool,X59)))))) )),
  inference(superposition,[],[f1683,f337])).
fof(f2552,plain,(
  ( ! [X61,X62,X63] : (s(bool,X62) != s(bool,X63) | s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X61),'const.sum.INL_1'(s(bool,X62)))))) )),
  inference(superposition,[],[f1683,f336])).
fof(f2569,plain,(
  ( ! [X37,X36] : (s(bool,X36) != s(bool,X37) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X36))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f1683,f303])).
fof(f2570,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X40) != s(bool,X41) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X38),bool),sK16(X39,X40,X38,bool)),s('type.list.list'(X38),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f1683,f356])).
fof(f2571,plain,(
  ( ! [X43,X44,X42] : (s(bool,X44) != s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X42),X43))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X42),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X42),X43))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f1683,f338])).
fof(f2572,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X47) != s(bool,X48) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X45,bool),'const.pair.,_2'(s(X45,X46),s(bool,X47))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f1683,f340])).
fof(f2573,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,X50) != s(bool,X52) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X49),'const.pair.,_2'(s(bool,X50),s(X49,X51))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f1683,f341])).
fof(f2574,plain,(
  ( ! [X54,X55,X53] : (s(bool,X53) != s(bool,X55) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X53),s(fun('type.num.num',bool),X54),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f1683,f310])).
fof(f2575,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,X59) != s(bool,happ(s(fun('type.num.num',bool),X57),s('type.num.num',X58))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X56),s(fun('type.num.num',bool),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f1683,f318])).
fof(f2576,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) != s(bool,X62) | s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X60,bool),'const.sum.INR_1'(s(bool,X61))))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f1683,f337])).
fof(f2577,plain,(
  ( ! [X64,X65,X63] : (s(bool,X64) != s(bool,X65) | s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X63),'const.sum.INL_1'(s(bool,X64))))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f1683,f336])).
fof(f3284,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK12(X0,X1,X2,bool))) )),
  inference(superposition,[],[f350,f264])).
fof(f3295,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK12(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK12(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f350,f264])).
fof(f3411,plain,(
  ( ! [X59,X57,X60,X58] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X60),'const.sum.INL_1'(s(bool,X59))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X57),bool),sK16(X58,X59,X57,bool)),s('type.list.list'(X57),'const.list.NIL_0')))) )),
  inference(superposition,[],[f500,f356])).
fof(f3412,plain,(
  ( ! [X61,X62,X63] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X63),'const.sum.INL_1'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X61),X62))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X61),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X61),X62)))) )),
  inference(superposition,[],[f500,f338])).
fof(f3413,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X67),'const.sum.INL_1'(s(bool,X66))))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X64,bool),'const.pair.,_2'(s(X64,X65),s(bool,X66)))))) )),
  inference(superposition,[],[f500,f340])).
fof(f3414,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X71),'const.sum.INL_1'(s(bool,X69))))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X68),'const.pair.,_2'(s(bool,X69),s(X68,X70)))))) )),
  inference(superposition,[],[f500,f341])).
fof(f3415,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X74),'const.sum.INL_1'(s(bool,X72))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X72),s(fun('type.num.num',bool),X73),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f500,f310])).
fof(f3416,plain,(
  ( ! [X78,X76,X77,X75] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X78),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),X76),s('type.num.num',X77))))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X75),s(fun('type.num.num',bool),X76),s('type.num.num','const.num.SUC_1'(s('type.num.num',X77)))))) )),
  inference(superposition,[],[f500,f318])).
fof(f3417,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X81),'const.sum.INL_1'(s(bool,X80))))) | s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X79,bool),'const.sum.INR_1'(s(bool,X80)))))) )),
  inference(superposition,[],[f500,f337])).
fof(f3418,plain,(
  ( ! [X83,X84,X82] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X84),'const.sum.INL_1'(s(bool,X83))))) | s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X82),'const.sum.INL_1'(s(bool,X83)))))) )),
  inference(superposition,[],[f500,f336])).
fof(f3493,plain,(
  ( ! [X33,X34,X32] : (s(bool,X34) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X32),'const.sum.INL_1'(s(bool,X33))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f3440,f256])).
fof(f3440,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X34) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X32),'const.sum.INL_1'(s(bool,X33))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) )),
  inference(superposition,[],[f434,f500])).
fof(f3577,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X63,bool),'const.sum.INR_1'(s(bool,X62))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X60),bool),sK16(X61,X62,X60,bool)),s('type.list.list'(X60),'const.list.NIL_0')))) )),
  inference(superposition,[],[f527,f356])).
fof(f3578,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X66,bool),'const.sum.INR_1'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X64),X65))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X64),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X64),X65)))) )),
  inference(superposition,[],[f527,f338])).
fof(f3579,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X70,bool),'const.sum.INR_1'(s(bool,X69))))) | s(bool,'F_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X67,bool),'const.pair.,_2'(s(X67,X68),s(bool,X69)))))) )),
  inference(superposition,[],[f527,f340])).
fof(f3580,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X74,bool),'const.sum.INR_1'(s(bool,X72))))) | s(bool,'F_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X71),'const.pair.,_2'(s(bool,X72),s(X71,X73)))))) )),
  inference(superposition,[],[f527,f341])).
fof(f3581,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X77,bool),'const.sum.INR_1'(s(bool,X75))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X75),s(fun('type.num.num',bool),X76),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f527,f310])).
fof(f3582,plain,(
  ( ! [X80,X78,X81,X79] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X81,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),X79),s('type.num.num',X80))))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X78),s(fun('type.num.num',bool),X79),s('type.num.num','const.num.SUC_1'(s('type.num.num',X80)))))) )),
  inference(superposition,[],[f527,f318])).
fof(f3583,plain,(
  ( ! [X83,X84,X82] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X84,bool),'const.sum.INR_1'(s(bool,X83))))) | s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X82,bool),'const.sum.INR_1'(s(bool,X83)))))) )),
  inference(superposition,[],[f527,f337])).
fof(f3584,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X87,bool),'const.sum.INR_1'(s(bool,X86))))) | s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X85),'const.sum.INL_1'(s(bool,X86)))))) )),
  inference(superposition,[],[f527,f336])).
fof(f3660,plain,(
  ( ! [X33,X34,X32] : (s(bool,X34) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X32,bool),'const.sum.INR_1'(s(bool,X33))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f3606,f256])).
fof(f3606,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X34) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X32,bool),'const.sum.INR_1'(s(bool,X33))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) )),
  inference(superposition,[],[f434,f527])).
fof(f3663,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X4))) | s(bool,'T_0') = s(bool,sK4(X3,X4,bool))) )),
  inference(superposition,[],[f823,f264])).
fof(f3708,plain,(
  ( ! [X54,X53] : (s(bool,'F_0') != s(bool,X53) | ~p(s(bool,sK4(X53,X54,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X54)))) )),
  inference(superposition,[],[f269,f823])).
fof(f3709,plain,(
  ( ! [X56,X55] : (p(s(bool,X55)) | s(bool,'F_0') = s(bool,sK4(X55,X56,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X56)))) )),
  inference(superposition,[],[f270,f823])).
fof(f3719,plain,(
  ( ! [X85,X84] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X84))) | s(bool,'F_0') = s(bool,sK4(X84,X85,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X85)))) )),
  inference(superposition,[],[f459,f823])).
fof(f3721,plain,(
  ( ! [X90,X91,X89] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X91),'const.sum.INL_1'(s(bool,X89))))) | s(bool,'F_0') = s(bool,sK4(X89,X90,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X90)))) )),
  inference(superposition,[],[f500,f823])).
fof(f3722,plain,(
  ( ! [X94,X92,X93] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X94,bool),'const.sum.INR_1'(s(bool,X92))))) | s(bool,'F_0') = s(bool,sK4(X92,X93,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X93)))) )),
  inference(superposition,[],[f527,f823])).
fof(f3723,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,X95)) | s(bool,X97) = s(bool,sK4(X95,X96,bool)) | s(bool,'F_0') = s(bool,X97) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X96)))) )),
  inference(superposition,[],[f1398,f823])).
fof(f3724,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,X98)) | s(bool,X100) != s(bool,sK4(X98,X99,bool)) | s(bool,'F_0') = s(bool,X100) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X99)))) )),
  inference(superposition,[],[f1400,f823])).
fof(f3727,plain,(
  ( ! [X107,X105,X106] : (s(bool,X105) != s(bool,X107) | s(bool,'F_0') = s(bool,X107) | s(bool,'T_0') = s(bool,sK4(X105,X106,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X106)))) )),
  inference(superposition,[],[f1683,f823])).
fof(f3728,plain,(
  ( ! [X109,X110,X108] : (s(bool,X108) != s(bool,X110) | s(bool,'F_0') = s(bool,sK4(X108,X109,bool)) | s(bool,'T_0') = s(bool,X110) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X109)))) )),
  inference(superposition,[],[f1683,f823])).
fof(f4974,plain,(
  ( ! [X61,X62,X60] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X61),bool),sK16(X62,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X60)),X61,bool)))) | s(bool,'F_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f4944,f256])).
fof(f4944,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X61),bool),sK16(X62,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X60)),X61,bool)))) | s(bool,'F_0') = s(bool,X60)) )),
  inference(superposition,[],[f3944,f459])).
fof(f4982,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X82),bool),sK16(X83,'const.sum.OUTR_1'(s('type.sum.sum'(X80,bool),'const.sum.INR_1'(s(bool,X81)))),X82,bool)))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f4950,f256])).
fof(f4950,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X82),bool),sK16(X83,'const.sum.OUTR_1'(s('type.sum.sum'(X80,bool),'const.sum.INR_1'(s(bool,X81)))),X82,bool)))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(superposition,[],[f3944,f527])).
fof(f4987,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X94),bool),sK16(X95,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X92),'const.sum.INL_1'(s(bool,X93)))),X94,bool)))) | s(bool,'F_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f4954,f256])).
fof(f4954,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X94),bool),sK16(X95,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X92),'const.sum.INL_1'(s(bool,X93)))),X94,bool)))) | s(bool,'F_0') = s(bool,X93)) )),
  inference(superposition,[],[f3944,f500])).
fof(f5410,plain,(
  ( ! [X80,X78,X81,X79] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X81,bool),'const.sum.INR_1'(s(bool,X80))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X78),bool),sK16(X79,X80,X78,bool)),s('type.list.list'(X78),'const.list.NIL_0')))) )),
  inference(superposition,[],[f1395,f356])).
fof(f5411,plain,(
  ( ! [X83,X84,X82] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X84,bool),'const.sum.INR_1'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X82),X83))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X82),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X82),X83)))) )),
  inference(superposition,[],[f1395,f338])).
fof(f5412,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X88,bool),'const.sum.INR_1'(s(bool,X87))))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X85,bool),'const.pair.,_2'(s(X85,X86),s(bool,X87)))))) )),
  inference(superposition,[],[f1395,f340])).
fof(f5413,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X92,bool),'const.sum.INR_1'(s(bool,X90))))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X89),'const.pair.,_2'(s(bool,X90),s(X89,X91)))))) )),
  inference(superposition,[],[f1395,f341])).
fof(f5414,plain,(
  ( ! [X94,X95,X93] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X95,bool),'const.sum.INR_1'(s(bool,X93))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X93),s(fun('type.num.num',bool),X94),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1395,f310])).
fof(f5415,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X99,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),X97),s('type.num.num',X98))))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X96),s(fun('type.num.num',bool),X97),s('type.num.num','const.num.SUC_1'(s('type.num.num',X98)))))) )),
  inference(superposition,[],[f1395,f318])).
fof(f5418,plain,(
  ( ! [X107,X108,X106] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X108,bool),'const.sum.INR_1'(s(bool,X106))))) | s(bool,'T_0') = s(bool,sK4(X106,X107,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X107)))) )),
  inference(superposition,[],[f1395,f823])).
fof(f5501,plain,(
  ( ! [X54,X55,X53] : (s(bool,X55) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X53,bool),'const.sum.INR_1'(s(bool,X54))))) | s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f5449,f258])).
fof(f5449,plain,(
  ( ! [X54,X55,X53] : (p(s(bool,'F_0')) | s(bool,X55) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X53,bool),'const.sum.INR_1'(s(bool,X54))))) | s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f1400,f1395])).
fof(f5598,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X84),'const.sum.INL_1'(s(bool,X83))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X81),bool),sK16(X82,X83,X81,bool)),s('type.list.list'(X81),'const.list.NIL_0')))) )),
  inference(superposition,[],[f1396,f356])).
fof(f5599,plain,(
  ( ! [X87,X85,X86] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X87),'const.sum.INL_1'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X85),X86))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X85),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X85),X86)))) )),
  inference(superposition,[],[f1396,f338])).
fof(f5600,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X91),'const.sum.INL_1'(s(bool,X90))))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X88,bool),'const.pair.,_2'(s(X88,X89),s(bool,X90)))))) )),
  inference(superposition,[],[f1396,f340])).
fof(f5601,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X95),'const.sum.INL_1'(s(bool,X93))))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X92),'const.pair.,_2'(s(bool,X93),s(X92,X94)))))) )),
  inference(superposition,[],[f1396,f341])).
fof(f5602,plain,(
  ( ! [X97,X98,X96] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X98),'const.sum.INL_1'(s(bool,X96))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X96),s(fun('type.num.num',bool),X97),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1396,f310])).
fof(f5603,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X102),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),X100),s('type.num.num',X101))))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X99),s(fun('type.num.num',bool),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))))) )),
  inference(superposition,[],[f1396,f318])).
fof(f5606,plain,(
  ( ! [X111,X109,X110] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X111),'const.sum.INL_1'(s(bool,X109))))) | s(bool,'T_0') = s(bool,sK4(X109,X110,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X110)))) )),
  inference(superposition,[],[f1396,f823])).
fof(f5690,plain,(
  ( ! [X57,X58,X56] : (s(bool,X58) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X56),'const.sum.INL_1'(s(bool,X57))))) | s(bool,'F_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f5638,f258])).
fof(f5638,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'F_0')) | s(bool,X58) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X56),'const.sum.INL_1'(s(bool,X57))))) | s(bool,'F_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f1400,f1396])).
fof(f5699,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X0,bool),'const.sum.INR_1'(s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f419,f5495])).
fof(f5855,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,'const.sum.OUTR_1'(s('type.sum.sum'(X2,bool),'const.sum.INR_1'(s(bool,'F_0')))),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f356,f5699,f1683])).
fof(f5902,plain,(
  ( ! [X4,X3] : (s(bool,X4) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X3,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(trivial_inequality_removal,[],[f5889])).
fof(f5889,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X4) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X3,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f5699,f432])).
fof(f6008,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X0),'const.sum.INL_1'(s(bool,'F_0')))))) )),
  inference(forward_demodulation,[],[f5941,f337])).
fof(f5941,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X0),'const.sum.INL_1'(s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X1,bool),'const.sum.INR_1'(s(bool,'F_0')))))))))) )),
  inference(unit_resulting_resolution,[],[f5699,f5684])).
fof(f6025,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'F_0') = s(bool,happ(s(fun(X28,bool),'_dst_x0x1_2'(s(fun(X26,bool),X27),s(fun(X28,X26),X29))),s(X28,X30))) | s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,happ(s(fun(X28,X26),X29),s(X28,X30)))))) )),
  inference(superposition,[],[f365,f264])).
fof(f6143,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,'F_0') != s(bool,happ(s(fun(X120,bool),'_dst_x0x1_2'(s(fun(X118,bool),X119),s(fun(X120,X118),X121))),s(X120,X122))) | ~p(s(bool,happ(s(fun(X118,bool),X119),s(X118,happ(s(fun(X120,X118),X121),s(X120,X122))))))) )),
  inference(superposition,[],[f269,f365])).
fof(f6144,plain,(
  ( ! [X127,X125,X123,X126,X124] : (p(s(bool,happ(s(fun(X125,bool),'_dst_x0x1_2'(s(fun(X123,bool),X124),s(fun(X125,X123),X126))),s(X125,X127)))) | s(bool,'F_0') = s(bool,happ(s(fun(X123,bool),X124),s(X123,happ(s(fun(X125,X123),X126),s(X125,X127)))))) )),
  inference(superposition,[],[f270,f365])).
fof(f6154,plain,(
  ( ! [X185,X182,X186,X184,X183] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X184,bool),'_dst_x0x1_2'(s(fun(X182,bool),X183),s(fun(X184,X182),X185))),s(X184,X186))))) | s(bool,'F_0') = s(bool,happ(s(fun(X182,bool),X183),s(X182,happ(s(fun(X184,X182),X185),s(X184,X186)))))) )),
  inference(superposition,[],[f459,f365])).
fof(f6156,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X198),'const.sum.INL_1'(s(bool,happ(s(fun(X195,bool),'_dst_x0x1_2'(s(fun(X193,bool),X194),s(fun(X195,X193),X196))),s(X195,X197))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X193,bool),X194),s(X193,happ(s(fun(X195,X193),X196),s(X195,X197)))))) )),
  inference(superposition,[],[f500,f365])).
fof(f6157,plain,(
  ( ! [X204,X202,X200,X199,X203,X201] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X204,bool),'const.sum.INR_1'(s(bool,happ(s(fun(X201,bool),'_dst_x0x1_2'(s(fun(X199,bool),X200),s(fun(X201,X199),X202))),s(X201,X203))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X199,bool),X200),s(X199,happ(s(fun(X201,X199),X202),s(X201,X203)))))) )),
  inference(superposition,[],[f527,f365])).
fof(f6158,plain,(
  ( ! [X210,X208,X206,X209,X207,X205] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X210,bool),'const.sum.INR_1'(s(bool,happ(s(fun(X207,bool),'_dst_x0x1_2'(s(fun(X205,bool),X206),s(fun(X207,X205),X208))),s(X207,X209))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X205,bool),X206),s(X205,happ(s(fun(X207,X205),X208),s(X207,X209)))))) )),
  inference(superposition,[],[f1395,f365])).
fof(f6159,plain,(
  ( ! [X212,X216,X215,X213,X211,X214] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X216),'const.sum.INL_1'(s(bool,happ(s(fun(X213,bool),'_dst_x0x1_2'(s(fun(X211,bool),X212),s(fun(X213,X211),X214))),s(X213,X215))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X211,bool),X212),s(X211,happ(s(fun(X213,X211),X214),s(X213,X215)))))) )),
  inference(superposition,[],[f1396,f365])).
fof(f6160,plain,(
  ( ! [X218,X222,X220,X219,X217,X221] : (~p(s(bool,happ(s(fun(X219,bool),'_dst_x0x1_2'(s(fun(X217,bool),X218),s(fun(X219,X217),X220))),s(X219,X221)))) | s(bool,X222) = s(bool,happ(s(fun(X217,bool),X218),s(X217,happ(s(fun(X219,X217),X220),s(X219,X221))))) | s(bool,'F_0') = s(bool,X222)) )),
  inference(superposition,[],[f1398,f365])).
fof(f6161,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (p(s(bool,happ(s(fun(X225,bool),'_dst_x0x1_2'(s(fun(X223,bool),X224),s(fun(X225,X223),X226))),s(X225,X227)))) | s(bool,X228) != s(bool,happ(s(fun(X223,bool),X224),s(X223,happ(s(fun(X225,X223),X226),s(X225,X227))))) | s(bool,'F_0') = s(bool,X228)) )),
  inference(superposition,[],[f1400,f365])).
fof(f6164,plain,(
  ( ! [X243,X241,X239,X244,X242,X240] : (s(bool,X244) != s(bool,happ(s(fun(X241,bool),'_dst_x0x1_2'(s(fun(X239,bool),X240),s(fun(X241,X239),X242))),s(X241,X243))) | s(bool,'F_0') = s(bool,X244) | s(bool,'T_0') = s(bool,happ(s(fun(X239,bool),X240),s(X239,happ(s(fun(X241,X239),X242),s(X241,X243)))))) )),
  inference(superposition,[],[f1683,f365])).
fof(f6165,plain,(
  ( ! [X249,X246,X250,X248,X247,X245] : (s(bool,X250) != s(bool,happ(s(fun(X247,bool),'_dst_x0x1_2'(s(fun(X245,bool),X246),s(fun(X247,X245),X248))),s(X247,X249))) | s(bool,'F_0') = s(bool,happ(s(fun(X245,bool),X246),s(X245,happ(s(fun(X247,X245),X248),s(X247,X249))))) | s(bool,'T_0') = s(bool,X250)) )),
  inference(superposition,[],[f1683,f365])).
fof(f6222,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'F_0') != s(bool,happ(s(fun(X111,bool),X112),s(X111,happ(s(fun(X110,X111),X113),s(X110,X114))))) | ~p(s(bool,happ(s(fun(X110,bool),'_dst_x0x1_2'(s(fun(X111,bool),X112),s(fun(X110,X111),X113))),s(X110,X114))))) )),
  inference(superposition,[],[f269,f365])).
fof(f6223,plain,(
  ( ! [X118,X116,X119,X117,X115] : (p(s(bool,happ(s(fun(X116,bool),X117),s(X116,happ(s(fun(X115,X116),X118),s(X115,X119)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X115,bool),'_dst_x0x1_2'(s(fun(X116,bool),X117),s(fun(X115,X116),X118))),s(X115,X119)))) )),
  inference(superposition,[],[f270,f365])).
fof(f6233,plain,(
  ( ! [X177,X175,X178,X176,X174] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X175,bool),X176),s(X175,happ(s(fun(X174,X175),X177),s(X174,X178))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X174,bool),'_dst_x0x1_2'(s(fun(X175,bool),X176),s(fun(X174,X175),X177))),s(X174,X178)))) )),
  inference(superposition,[],[f459,f365])).
fof(f6235,plain,(
  ( ! [X189,X187,X185,X190,X188,X186] : (s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X190),'const.sum.INL_1'(s(bool,happ(s(fun(X186,bool),X187),s(X186,happ(s(fun(X185,X186),X188),s(X185,X189))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),'_dst_x0x1_2'(s(fun(X186,bool),X187),s(fun(X185,X186),X188))),s(X185,X189)))) )),
  inference(superposition,[],[f500,f365])).
fof(f6236,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X196,bool),'const.sum.INR_1'(s(bool,happ(s(fun(X192,bool),X193),s(X192,happ(s(fun(X191,X192),X194),s(X191,X195))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X191,bool),'_dst_x0x1_2'(s(fun(X192,bool),X193),s(fun(X191,X192),X194))),s(X191,X195)))) )),
  inference(superposition,[],[f527,f365])).
fof(f6237,plain,(
  ( ! [X198,X202,X200,X199,X197,X201] : (s(bool,'F_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X202,bool),'const.sum.INR_1'(s(bool,happ(s(fun(X198,bool),X199),s(X198,happ(s(fun(X197,X198),X200),s(X197,X201))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X197,bool),'_dst_x0x1_2'(s(fun(X198,bool),X199),s(fun(X197,X198),X200))),s(X197,X201)))) )),
  inference(superposition,[],[f1395,f365])).
fof(f6238,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (s(bool,'F_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X208),'const.sum.INL_1'(s(bool,happ(s(fun(X204,bool),X205),s(X204,happ(s(fun(X203,X204),X206),s(X203,X207))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X203,bool),'_dst_x0x1_2'(s(fun(X204,bool),X205),s(fun(X203,X204),X206))),s(X203,X207)))) )),
  inference(superposition,[],[f1396,f365])).
fof(f6239,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (~p(s(bool,happ(s(fun(X210,bool),X211),s(X210,happ(s(fun(X209,X210),X212),s(X209,X213)))))) | s(bool,X214) = s(bool,happ(s(fun(X209,bool),'_dst_x0x1_2'(s(fun(X210,bool),X211),s(fun(X209,X210),X212))),s(X209,X213))) | s(bool,'F_0') = s(bool,X214)) )),
  inference(superposition,[],[f1398,f365])).
fof(f6240,plain,(
  ( ! [X218,X216,X220,X215,X219,X217] : (p(s(bool,happ(s(fun(X216,bool),X217),s(X216,happ(s(fun(X215,X216),X218),s(X215,X219)))))) | s(bool,X220) != s(bool,happ(s(fun(X215,bool),'_dst_x0x1_2'(s(fun(X216,bool),X217),s(fun(X215,X216),X218))),s(X215,X219))) | s(bool,'F_0') = s(bool,X220)) )),
  inference(superposition,[],[f1400,f365])).
fof(f6243,plain,(
  ( ! [X231,X235,X233,X236,X234,X232] : (s(bool,X236) != s(bool,happ(s(fun(X232,bool),X233),s(X232,happ(s(fun(X231,X232),X234),s(X231,X235))))) | s(bool,'F_0') = s(bool,X236) | s(bool,'T_0') = s(bool,happ(s(fun(X231,bool),'_dst_x0x1_2'(s(fun(X232,bool),X233),s(fun(X231,X232),X234))),s(X231,X235)))) )),
  inference(superposition,[],[f1683,f365])).
fof(f6244,plain,(
  ( ! [X241,X239,X237,X242,X240,X238] : (s(bool,X242) != s(bool,happ(s(fun(X238,bool),X239),s(X238,happ(s(fun(X237,X238),X240),s(X237,X241))))) | s(bool,'F_0') = s(bool,happ(s(fun(X237,bool),'_dst_x0x1_2'(s(fun(X238,bool),X239),s(fun(X237,X238),X240))),s(X237,X241))) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f1683,f365])).
fof(f6337,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X2),'const.sum.INL_1'(s(bool,'F_0')))),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f356,f6008,f1683])).
fof(f6385,plain,(
  ( ! [X4,X3] : (s(bool,X4) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X3),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(trivial_inequality_removal,[],[f6372])).
fof(f6372,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X4) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X3),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f6008,f432])).
fof(f7074,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK6(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK5(X0,X1,bool))) )),
  inference(superposition,[],[f315,f264])).
fof(f7116,plain,(
  ( ! [X0,X1] : (p(s(bool,sK6(X0,'_i_0_0',bool))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'F_0') = s(bool,sK5(X0,'_i_0_0',bool))) )),
  inference(forward_demodulation,[],[f7115,f303])).
fof(f7115,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6(X0,'_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK5(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f7086,f256])).
fof(f7086,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6(X0,'_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK5(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f315,f459])).
fof(f7306,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X11),s(bool,sK13(X11,'_i_0_0',bool,bool)))) | s(fun(bool,bool),'_i_0_0') = s(fun(bool,bool),X11) | s(bool,'F_0') = s(bool,sK13(X11,'_i_0_0',bool,bool))) )),
  inference(superposition,[],[f352,f459])).
fof(f7307,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,happ(s(fun(X12,bool),X14),s(X12,sK13(X14,X13,X12,bool)))) | s(fun(X12,bool),X13) = s(fun(X12,bool),X14) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK13(X14,X13,X12,bool))))) )),
  inference(superposition,[],[f352,f264])).
fof(f7337,plain,(
  ( ! [X2,X0,X1] : (s(X2,happ(s(fun(bool,X2),X0),s(bool,'F_0'))) != s(X2,happ(s(fun(bool,X2),X1),s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK13(X0,X1,bool,X2))) )),
  inference(superposition,[],[f352,f264])).
fof(f7352,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X11),s(bool,sK13('_i_0_0',X11,bool,bool)))) | s(fun(bool,bool),'_i_0_0') = s(fun(bool,bool),X11) | s(bool,'F_0') = s(bool,sK13('_i_0_0',X11,bool,bool))) )),
  inference(superposition,[],[f352,f459])).
fof(f7353,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,happ(s(fun(X12,bool),X14),s(X12,sK13(X13,X14,X12,bool)))) | s(fun(X12,bool),X13) = s(fun(X12,bool),X14) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK13(X13,X14,X12,bool))))) )),
  inference(superposition,[],[f352,f264])).
fof(f9364,plain,(
  ( ! [X109,X110] : (s(bool,X109) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X110,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X109)))) )),
  inference(superposition,[],[f5902,f303])).
fof(f9367,plain,(
  ( ! [X125,X123,X126,X124] : (s(bool,X125) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X126,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X123),bool),sK16(X124,X125,X123,bool)),s('type.list.list'(X123),'const.list.NIL_0')))) )),
  inference(superposition,[],[f5902,f356])).
fof(f9369,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,X132) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X133,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X130,bool),'const.pair.,_2'(s(X130,X131),s(bool,X132)))))) )),
  inference(superposition,[],[f5902,f340])).
fof(f9370,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,X135) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X137,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X134),'const.pair.,_2'(s(bool,X135),s(X134,X136)))))) )),
  inference(superposition,[],[f5902,f341])).
fof(f9371,plain,(
  ( ! [X140,X138,X139] : (s(bool,X138) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X140,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X138),s(fun('type.num.num',bool),X139),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5902,f310])).
fof(f9373,plain,(
  ( ! [X146,X147,X145] : (s(bool,X146) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X147,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X145,bool),'const.sum.INR_1'(s(bool,X146)))))) )),
  inference(superposition,[],[f5902,f337])).
fof(f9374,plain,(
  ( ! [X149,X150,X148] : (s(bool,X149) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X150,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X148),'const.sum.INL_1'(s(bool,X149)))))) )),
  inference(superposition,[],[f5902,f336])).
fof(f9375,plain,(
  ( ! [X152,X151,X153] : (s(bool,X151) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X153,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK4(X151,X152,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X152)))) )),
  inference(superposition,[],[f5902,f823])).
fof(f3297,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK12(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK12(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f350,f432])).
fof(f3296,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK12(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK12(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f350,f432])).
fof(f2164,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num',X9))) | s(bool,X10) = s(bool,'const.ind_type.FCONS_3'(s(bool,X7),s(fun('type.num.num',bool),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f318,f432])).
fof(f2166,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,X18) = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X15),s(fun('type.num.num',bool),X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f318,f432])).
fof(f4961,plain,(
  ( ! [X125,X123,X126,X124,X122] : (~p(s(bool,happ(s(fun('type.num.num',bool),X123),s('type.num.num',X124)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X125),bool),sK16(X126,'const.ind_type.FCONS_3'(s(bool,X122),s(fun('type.num.num',bool),X123),s('type.num.num','const.num.SUC_1'(s('type.num.num',X124)))),X125,bool))))) )),
  inference(superposition,[],[f3944,f318])).
fof(f5738,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X102,bool),'const.sum.INR_1'(s(bool,happ(s(fun('type.num.num',bool),X100),s('type.num.num',X101))))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X99),s(fun('type.num.num',bool),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))))) )),
  inference(superposition,[],[f5495,f318])).
fof(f5980,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X102),'const.sum.INL_1'(s(bool,happ(s(fun('type.num.num',bool),X100),s('type.num.num',X101))))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X99),s(fun('type.num.num',bool),X100),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101)))))) )),
  inference(superposition,[],[f5684,f318])).
fof(f7075,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK6(X3,X4,bool))))) | s(bool,X6) = s(bool,sK5(X3,X4,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f315,f432])).
fof(f7076,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,sK6(X7,X8,bool))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK5(X7,X8,bool))) )),
  inference(superposition,[],[f315,f432])).
fof(f7124,plain,(
  ( ! [X59,X60] : (~p(s(bool,sK5(X59,'_i_0_0',bool))) | p(s(bool,sK6(X59,'_i_0_0',bool))) | ~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,X60))))) )),
  inference(forward_demodulation,[],[f7099,f303])).
fof(f7099,plain,(
  ( ! [X59,X60] : (~p(s(bool,sK5(X59,'_i_0_0',bool))) | ~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,X60)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6(X59,'_i_0_0',bool)))))) )),
  inference(superposition,[],[f315,f303])).
fof(f311,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,'const.min.@_1'(s(fun(X0,bool),X1))))))) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,'const.min.@_1'(s(fun(X0,bool),X1)))))))),
  inference(ennf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,'const.min.@_1'(s(fun(X0,bool),X1)))))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,'const.min.@_1'(s(fun(X0,bool),X1)))))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X9] : ! [X21,X19] : (p(s(bool,happ(s(fun(X9,bool),X21),s(X9,X19)))) => p(s(bool,happ(s(fun(X9,bool),X21),s(X9,'const.min.@_1'(s(fun(X9,bool),X21)))))))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.SELECT_AX')).
fof(f314,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f233])).
fof(f233,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X2,X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0)))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f232])).
fof(f232,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))),
  inference(flattening,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(ennf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X9] : ! [X56,X21] : (! [X19] : (p(s(bool,happ(s(fun(X9,bool),X21),s(X9,X19)))) => p(s(bool,happ(s(fun(X9,bool),X56),s(X9,X19))))) => (? [X19] : p(s(bool,happ(s(fun(X9,bool),X21),s(X9,X19)))) => ? [X19] : p(s(bool,happ(s(fun(X9,bool),X56),s(X9,X19))))))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.MONO_EXISTS')).
fof(f315,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f233])).
fof(f345,plain,(
  ( ! [X2,X0,X12,X3,X1,X11] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X11),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK9(X11,X3,X2,X1,X0))))))) | p(s(bool,happ(s(fun(X0,bool),X11),s(X0,X12))))) )),
  inference(cnf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | (! [X11] : ((~p(s(bool,happ(s(fun(X0,bool),X11),s(X0,sK8(X11,X3,X2,X1,X0))))) | ! [X14] : p(s(bool,happ(s(fun(X0,bool),X11),s(X0,happ(s(fun(X1,X0),X2),s(X1,X14))))))) & (~p(s(bool,happ(s(fun(X0,bool),X11),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK9(X11,X3,X2,X1,X0))))))) | ! [X12] : p(s(bool,happ(s(fun(X0,bool),X11),s(X0,X12)))))) & ! [X6] : ((! [X10] : ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X10)))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK10(X6,X3,X2,X1,X0)))))))) & (! [X8] : ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8)))))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,sK11(X6,X3,X2,X1,X0))))))) & ! [X4,X5] : ((s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) | s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4)))) & (s(X1,X5) != s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))) | s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10,sK11])],[f239])).
fof(f239,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | (! [X11] : ((? [X15] : ~p(s(bool,happ(s(fun(X0,bool),X11),s(X0,X15)))) | ! [X14] : p(s(bool,happ(s(fun(X0,bool),X11),s(X0,happ(s(fun(X1,X0),X2),s(X1,X14))))))) & (? [X13] : ~p(s(bool,happ(s(fun(X0,bool),X11),s(X0,happ(s(fun(X1,X0),X2),s(X1,X13)))))) | ! [X12] : p(s(bool,happ(s(fun(X0,bool),X11),s(X0,X12)))))) & ! [X6] : ((! [X10] : ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X10)))) | ? [X9] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X9))))))) & (! [X8] : ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8)))))) | ? [X7] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))))) & ! [X4,X5] : ((s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) | s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4)))) & (s(X1,X5) != s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))) | s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))),
  inference(rectify,[],[f238])).
fof(f238,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | (! [X9] : ((? [X10] : ~p(s(bool,happ(s(fun(X0,bool),X9),s(X0,X10)))) | ! [X11] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,happ(s(fun(X1,X0),X2),s(X1,X11))))))) & (? [X11] : ~p(s(bool,happ(s(fun(X0,bool),X9),s(X0,happ(s(fun(X1,X0),X2),s(X1,X11)))))) | ! [X10] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,X10)))))) & ! [X6] : ((! [X7] : ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))) | ? [X8] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8))))))) & (! [X8] : ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8)))))) | ? [X7] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))))) & ! [X4,X5] : ((s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) | s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4)))) & (s(X1,X5) != s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))) | s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))),
  inference(nnf_transformation,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | (! [X9] : (! [X10] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,X10)))) <=> ! [X11] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,happ(s(fun(X1,X0),X2),s(X1,X11))))))) & ! [X6] : (? [X7] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))) <=> ? [X8] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8))))))) & ! [X4,X5] : (s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) <=> s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))))))),
  inference(ennf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) => (! [X9] : (! [X10] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,X10)))) <=> ! [X11] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,happ(s(fun(X1,X0),X2),s(X1,X11))))))) & ! [X6] : (? [X7] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))) <=> ? [X8] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8))))))) & ! [X4,X5] : (s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) <=> s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))))))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) => (! [X9] : (! [X10] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,X10)))) <=> ! [X11] : p(s(bool,happ(s(fun(X0,bool),X9),s(X0,happ(s(fun(X1,X0),X2),s(X1,X11))))))) & ! [X6] : (? [X7] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))) <=> ? [X8] : p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8))))))) & ! [X4,X5] : (s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) <=> s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X9,X18] : ! [X40,X10] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X18),X10),s(fun(X18,X9),X40)))) => (! [X21] : (! [X19] : p(s(bool,happ(s(fun(X9,bool),X21),s(X9,X19)))) <=> ! [X19] : p(s(bool,happ(s(fun(X9,bool),X21),s(X9,happ(s(fun(X18,X9),X40),s(X18,X19))))))) & ! [X21] : (? [X19] : p(s(bool,happ(s(fun(X9,bool),X21),s(X9,X19)))) <=> ? [X19] : p(s(bool,happ(s(fun(X9,bool),X21),s(X9,happ(s(fun(X18,X9),X40),s(X18,X19))))))) & ! [X6,X49] : (s(X9,X6) = s(X9,happ(s(fun(X18,X9),X40),s(X18,X49))) <=> s(X18,X49) = s(X18,happ(s(fun(X9,X18),X10),s(X9,X6))))))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.ISO_USAGE')).
fof(f346,plain,(
  ( ! [X6,X2,X0,X10,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X10)))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK10(X6,X3,X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f240])).
fof(f2001,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,'const.min.@_1'(s(fun(X4,bool),X5)))))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1974,f256])).
fof(f1974,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,'const.min.@_1'(s(fun(X4,bool),X5)))))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f311,f432])).
fof(f3738,plain,(
  ( ! [X142,X140,X141,X139] : (~p(s(bool,happ(s(fun(X139,bool),X140),s(X139,X142)))) | p(s(bool,happ(s(fun(X139,bool),sK4(X140,X141,fun(X139,bool))),s(X139,'const.min.@_1'(s(fun(X139,bool),sK4(X140,X141,fun(X139,bool)))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X139,bool),bool),X141)))) )),
  inference(superposition,[],[f311,f823])).
fof(f3805,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2))))) )),
  inference(subsumption_resolution,[],[f3694,f265])).
fof(f3694,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2)))) )),
  inference(superposition,[],[f313,f823])).
fof(f3850,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X42)))) | p(s(bool,'|dollar|exists_1'(s(fun(X39,bool),sK4(X40,X41,fun(X39,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X39,bool),bool),X41)))) )),
  inference(superposition,[],[f3805,f823])).
fof(f3925,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3893,f256])).
fof(f3893,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3805,f432])).
fof(f6838,plain,(
  ( ! [X70,X74,X72,X71,X73] : (~p(s(bool,happ(s(fun(X70,bool),X71),s(X70,X73)))) | p(s(bool,happ(s(fun(X70,bool),X74),s(X70,sK6(sK4(X71,X72,fun(X70,bool)),X74,X70))))) | p(s(bool,happ(s(fun(X70,bool),sK4(X71,X72,fun(X70,bool))),s(X70,sK5(sK4(X71,X72,fun(X70,bool)),X74,X70))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X70,bool),bool),X72)))) )),
  inference(superposition,[],[f314,f823])).
fof(f6916,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X9,X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8)))) | p(s(bool,happ(s(fun(X6,bool),X9),s(X6,sK6(happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X9,X6)))))) )),
  inference(forward_demodulation,[],[f6827,f303])).
fof(f6827,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8)))) | p(s(bool,happ(s(fun(X6,bool),X9),s(X6,sK6(happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X9,X6))))) | p(s(bool,happ(s(fun(X6,bool),happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7))),s(X6,sK5(happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X9,X6)))))) )),
  inference(superposition,[],[f314,f303])).
fof(f6917,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (p(s(bool,happ(s(fun(X26,bool),X29),s(X26,sK5(happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X31,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X29),s(X26,X30)))) | p(s(bool,happ(s(fun(X26,bool),X31),s(X26,sK6(happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X31,X26)))))) )),
  inference(forward_demodulation,[],[f6830,f356])).
fof(f6830,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (~p(s(bool,happ(s(fun(X26,bool),X29),s(X26,X30)))) | p(s(bool,happ(s(fun(X26,bool),X31),s(X26,sK6(happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X31,X26))))) | p(s(bool,happ(s(fun(X26,bool),happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0'))),s(X26,sK5(happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X31,X26)))))) )),
  inference(superposition,[],[f314,f356])).
fof(f6919,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (p(s(bool,happ(s(fun(X37,bool),X40),s(X37,sK5('const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X42,X37))))) | ~p(s(bool,happ(s(fun(X37,bool),X40),s(X37,X41)))) | p(s(bool,happ(s(fun(X37,bool),X42),s(X37,sK6('const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X42,X37)))))) )),
  inference(forward_demodulation,[],[f6832,f340])).
fof(f6832,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (~p(s(bool,happ(s(fun(X37,bool),X40),s(X37,X41)))) | p(s(bool,happ(s(fun(X37,bool),X42),s(X37,sK6('const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X42,X37))))) | p(s(bool,happ(s(fun(X37,bool),'const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40))))),s(X37,sK5('const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X42,X37)))))) )),
  inference(superposition,[],[f314,f340])).
fof(f6920,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (p(s(bool,happ(s(fun(X43,bool),X45),s(X43,sK5('const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X48,X43))))) | ~p(s(bool,happ(s(fun(X43,bool),X45),s(X43,X47)))) | p(s(bool,happ(s(fun(X43,bool),X48),s(X43,sK6('const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X48,X43)))))) )),
  inference(forward_demodulation,[],[f6833,f341])).
fof(f6833,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (~p(s(bool,happ(s(fun(X43,bool),X45),s(X43,X47)))) | p(s(bool,happ(s(fun(X43,bool),X48),s(X43,sK6('const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X48,X43))))) | p(s(bool,happ(s(fun(X43,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46))))),s(X43,sK5('const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X48,X43)))))) )),
  inference(superposition,[],[f314,f341])).
fof(f6921,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK5('const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X53,X49))))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,X52)))) | p(s(bool,happ(s(fun(X49,bool),X53),s(X49,sK6('const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X53,X49)))))) )),
  inference(forward_demodulation,[],[f6834,f310])).
fof(f6834,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,X52)))) | p(s(bool,happ(s(fun(X49,bool),X53),s(X49,sK6('const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X53,X49))))) | p(s(bool,happ(s(fun(X49,bool),'const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0'))),s(X49,sK5('const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X53,X49)))))) )),
  inference(superposition,[],[f314,f310])).
fof(f6923,plain,(
  ( ! [X61,X64,X62,X60,X63] : (p(s(bool,happ(s(fun(X60,bool),X62),s(X60,sK5('const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X64,X60))))) | ~p(s(bool,happ(s(fun(X60,bool),X62),s(X60,X63)))) | p(s(bool,happ(s(fun(X60,bool),X64),s(X60,sK6('const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X64,X60)))))) )),
  inference(forward_demodulation,[],[f6836,f337])).
fof(f6836,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,happ(s(fun(X60,bool),X62),s(X60,X63)))) | p(s(bool,happ(s(fun(X60,bool),X64),s(X60,sK6('const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X64,X60))))) | p(s(bool,happ(s(fun(X60,bool),'const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62))))),s(X60,sK5('const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X64,X60)))))) )),
  inference(superposition,[],[f314,f337])).
fof(f6924,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,happ(s(fun(X65,bool),X67),s(X65,sK5('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X69,X65))))) | ~p(s(bool,happ(s(fun(X65,bool),X67),s(X65,X68)))) | p(s(bool,happ(s(fun(X65,bool),X69),s(X65,sK6('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X69,X65)))))) )),
  inference(forward_demodulation,[],[f6837,f336])).
fof(f6837,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,happ(s(fun(X65,bool),X67),s(X65,X68)))) | p(s(bool,happ(s(fun(X65,bool),X69),s(X65,sK6('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X69,X65))))) | p(s(bool,happ(s(fun(X65,bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67))))),s(X65,sK5('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X69,X65)))))) )),
  inference(superposition,[],[f314,f336])).
fof(f6928,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X6,bool),X9),s(X6,sK6(X7,X9,X6))))) | p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X7,X9,X6))))) | s(bool,X10) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f6891,f256])).
fof(f6891,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X6,bool),X9),s(X6,sK6(X7,X9,X6))))) | p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X7,X9,X6))))) | s(bool,X10) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f314,f432])).
fof(f7063,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X13,fun(X10,bool)),'_dst_x0x1_2'(s(fun(X11,fun(X10,bool)),X12),s(fun(X13,X11),X14))),s(X13,X15))),s(X10,sK5(X16,happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X10))))) | ~p(s(bool,happ(s(fun(X10,bool),X16),s(X10,X17)))) | p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15))))),s(X10,sK6(X16,happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X10)))))) )),
  inference(superposition,[],[f315,f365])).
fof(f7064,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X20,fun(X18,bool)),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))),s(X18,sK5(X24,happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X18))))) | ~p(s(bool,happ(s(fun(X18,bool),X24),s(X18,X25)))) | p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23))),s(X18,sK6(X24,happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X18)))))) )),
  inference(superposition,[],[f315,f365])).
fof(f7073,plain,(
  ( ! [X70,X74,X72,X71,X73] : (~p(s(bool,happ(s(fun(X70,bool),X71),s(X70,sK5(X73,sK4(X71,X72,fun(X70,bool)),X70))))) | ~p(s(bool,happ(s(fun(X70,bool),X73),s(X70,X74)))) | p(s(bool,happ(s(fun(X70,bool),sK4(X71,X72,fun(X70,bool))),s(X70,sK6(X73,sK4(X71,X72,fun(X70,bool)),X70))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X70,bool),bool),X72)))) )),
  inference(superposition,[],[f315,f823])).
fof(f7100,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (~p(s(bool,happ(s(fun(X62,bool),X63),s(X62,happ(s(fun(X61,X62),X64),s(X61,sK5(X65,'_dst_x0x1_2'(s(fun(X62,bool),X63),s(fun(X61,X62),X64)),X61))))))) | ~p(s(bool,happ(s(fun(X61,bool),X65),s(X61,X66)))) | p(s(bool,happ(s(fun(X61,bool),'_dst_x0x1_2'(s(fun(X62,bool),X63),s(fun(X61,X62),X64))),s(X61,sK6(X65,'_dst_x0x1_2'(s(fun(X62,bool),X63),s(fun(X61,X62),X64)),X61)))))) )),
  inference(superposition,[],[f315,f365])).
fof(f7102,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun(X0,X1),X2))),s(X0,sK6(X4,happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun(X0,X1),X2))),s(X0,sK5(X4,happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X5))))) )),
  inference(forward_demodulation,[],[f7061,f364])).
fof(f7061,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun(X0,X1),X2))),s(X0,sK5(X4,happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X5)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3))),s(X0,sK6(X4,happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X0)))))) )),
  inference(superposition,[],[f315,f364])).
fof(f7103,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK6(X8,happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X8,happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9))))) )),
  inference(forward_demodulation,[],[f7062,f303])).
fof(f7062,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X8,happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9)))) | p(s(bool,happ(s(fun(X6,bool),happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7))),s(X6,sK6(X8,happ(s(fun(fun(X6,bool),fun(X6,bool)),'_i_0_0'),s(fun(X6,bool),X7)),X6)))))) )),
  inference(superposition,[],[f315,f303])).
fof(f7104,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (p(s(bool,happ(s(fun(X26,bool),X29),s(X26,sK6(X30,happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X29),s(X26,sK5(X30,happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X30),s(X26,X31))))) )),
  inference(forward_demodulation,[],[f7065,f356])).
fof(f7065,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (~p(s(bool,happ(s(fun(X26,bool),X29),s(X26,sK5(X30,happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X30),s(X26,X31)))) | p(s(bool,happ(s(fun(X26,bool),happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0'))),s(X26,sK6(X30,happ(s(fun('type.list.list'(X27),fun(X26,bool)),sK16(X28,X29,X27,fun(X26,bool))),s('type.list.list'(X27),'const.list.NIL_0')),X26)))))) )),
  inference(superposition,[],[f315,f356])).
fof(f7105,plain,(
  ( ! [X35,X33,X36,X34,X32] : (p(s(bool,happ(s(fun(X32,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,sK6(X35,happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X32))))) | ~p(s(bool,happ(s(fun(X32,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,sK5(X35,happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X32))))) | ~p(s(bool,happ(s(fun(X32,bool),X35),s(X32,X36))))) )),
  inference(forward_demodulation,[],[f7066,f338])).
fof(f7066,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,sK5(X35,happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X32))))) | ~p(s(bool,happ(s(fun(X32,bool),X35),s(X32,X36)))) | p(s(bool,happ(s(fun(X32,bool),happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,sK6(X35,happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X32)))))) )),
  inference(superposition,[],[f315,f338])).
fof(f7106,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (p(s(bool,happ(s(fun(X37,bool),X40),s(X37,sK6(X41,'const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X37))))) | ~p(s(bool,happ(s(fun(X37,bool),X40),s(X37,sK5(X41,'const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X37))))) | ~p(s(bool,happ(s(fun(X37,bool),X41),s(X37,X42))))) )),
  inference(forward_demodulation,[],[f7067,f340])).
fof(f7067,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (~p(s(bool,happ(s(fun(X37,bool),X40),s(X37,sK5(X41,'const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X37))))) | ~p(s(bool,happ(s(fun(X37,bool),X41),s(X37,X42)))) | p(s(bool,happ(s(fun(X37,bool),'const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40))))),s(X37,sK6(X41,'const.pair.SND_1'(s('type.pair.prod'(X38,fun(X37,bool)),'const.pair.,_2'(s(X38,X39),s(fun(X37,bool),X40)))),X37)))))) )),
  inference(superposition,[],[f315,f340])).
fof(f7107,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (p(s(bool,happ(s(fun(X43,bool),X45),s(X43,sK6(X47,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X43))))) | ~p(s(bool,happ(s(fun(X43,bool),X45),s(X43,sK5(X47,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X43))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,X48))))) )),
  inference(forward_demodulation,[],[f7068,f341])).
fof(f7068,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (~p(s(bool,happ(s(fun(X43,bool),X45),s(X43,sK5(X47,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X43))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,X48)))) | p(s(bool,happ(s(fun(X43,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46))))),s(X43,sK6(X47,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,bool),X44),'const.pair.,_2'(s(fun(X43,bool),X45),s(X44,X46)))),X43)))))) )),
  inference(superposition,[],[f315,f341])).
fof(f7108,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK6(X52,'const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X49))))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK5(X52,'const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X49))))) | ~p(s(bool,happ(s(fun(X49,bool),X52),s(X49,X53))))) )),
  inference(forward_demodulation,[],[f7069,f310])).
fof(f7069,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK5(X52,'const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X49))))) | ~p(s(bool,happ(s(fun(X49,bool),X52),s(X49,X53)))) | p(s(bool,happ(s(fun(X49,bool),'const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0'))),s(X49,sK6(X52,'const.ind_type.FCONS_3'(s(fun(X49,bool),X50),s(fun('type.num.num',fun(X49,bool)),X51),s('type.num.num','const.num.|48|_0')),X49)))))) )),
  inference(superposition,[],[f315,f310])).
fof(f7109,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (p(s(bool,happ(s(fun(X54,bool),happ(s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num',X57))),s(X54,sK6(X58,'const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X54))))) | ~p(s(bool,happ(s(fun(X54,bool),happ(s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num',X57))),s(X54,sK5(X58,'const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X54))))) | ~p(s(bool,happ(s(fun(X54,bool),X58),s(X54,X59))))) )),
  inference(forward_demodulation,[],[f7070,f318])).
fof(f7070,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (~p(s(bool,happ(s(fun(X54,bool),happ(s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num',X57))),s(X54,sK5(X58,'const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X54))))) | ~p(s(bool,happ(s(fun(X54,bool),X58),s(X54,X59)))) | p(s(bool,happ(s(fun(X54,bool),'const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))))),s(X54,sK6(X58,'const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X54)))))) )),
  inference(superposition,[],[f315,f318])).
fof(f7110,plain,(
  ( ! [X61,X64,X62,X60,X63] : (p(s(bool,happ(s(fun(X60,bool),X62),s(X60,sK6(X63,'const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X60))))) | ~p(s(bool,happ(s(fun(X60,bool),X62),s(X60,sK5(X63,'const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X60))))) | ~p(s(bool,happ(s(fun(X60,bool),X63),s(X60,X64))))) )),
  inference(forward_demodulation,[],[f7071,f337])).
fof(f7071,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,happ(s(fun(X60,bool),X62),s(X60,sK5(X63,'const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X60))))) | ~p(s(bool,happ(s(fun(X60,bool),X63),s(X60,X64)))) | p(s(bool,happ(s(fun(X60,bool),'const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62))))),s(X60,sK6(X63,'const.sum.OUTR_1'(s('type.sum.sum'(X61,fun(X60,bool)),'const.sum.INR_1'(s(fun(X60,bool),X62)))),X60)))))) )),
  inference(superposition,[],[f315,f337])).
fof(f7111,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,happ(s(fun(X65,bool),X67),s(X65,sK6(X68,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X65))))) | ~p(s(bool,happ(s(fun(X65,bool),X67),s(X65,sK5(X68,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X65))))) | ~p(s(bool,happ(s(fun(X65,bool),X68),s(X65,X69))))) )),
  inference(forward_demodulation,[],[f7072,f336])).
fof(f7072,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,happ(s(fun(X65,bool),X67),s(X65,sK5(X68,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X65))))) | ~p(s(bool,happ(s(fun(X65,bool),X68),s(X65,X69)))) | p(s(bool,happ(s(fun(X65,bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67))))),s(X65,sK6(X68,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,bool),X66),'const.sum.INL_1'(s(fun(X65,bool),X67)))),X65)))))) )),
  inference(superposition,[],[f315,f336])).
fof(f7117,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9)))) | p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK6(X8,X7,X6))))) | s(bool,X10) = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X8,X7,X6)))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f7088,f256])).
fof(f7088,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9)))) | p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK6(X8,X7,X6))))) | s(bool,X10) = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X8,X7,X6)))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f315,f432])).
fof(f8693,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X1,'_i_0_0','_i_0_0',X0,X0)))))) )),
  inference(forward_demodulation,[],[f8692,f303])).
fof(f8692,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X1,'_i_0_0','_i_0_0',X0,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X2))))))) )),
  inference(subsumption_resolution,[],[f8667,f256])).
fof(f8667,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X1,'_i_0_0','_i_0_0',X0,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X2))))))) )),
  inference(superposition,[],[f344,f427])).
fof(f8988,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK9(X6,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0))))))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7))))) )),
  inference(superposition,[],[f345,f364])).
fof(f8989,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X8,X9),X10),s(fun(X9,X8),X11)))) | ~p(s(bool,happ(s(fun(X8,bool),X12),s(X8,happ(s(fun(X9,X8),X11),s(X9,sK9(X12,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X11,X9,X8))))))) | p(s(bool,happ(s(fun(X8,bool),X12),s(X8,X13))))) )),
  inference(superposition,[],[f345,f303])).
fof(f8990,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | ~p(s(bool,happ(s(fun(X14,bool),X22),s(X14,happ(s(fun(X15,X14),X21),s(X15,sK9(X22,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X21,X15,X14))))))) | p(s(bool,happ(s(fun(X14,bool),X22),s(X14,X23))))) )),
  inference(superposition,[],[f345,f365])).
fof(f8991,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(fun(X25,X24),X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X32),s(X24,happ(s(fun(X25,X24),X31),s(X25,sK9(X32,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X31,X25,X24))))))) | p(s(bool,happ(s(fun(X24,bool),X32),s(X24,X33))))) )),
  inference(superposition,[],[f345,f365])).
fof(f8992,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X34,X35),X38),s(fun(X35,X34),X39)))) | ~p(s(bool,happ(s(fun(X34,bool),X40),s(X34,happ(s(fun(X35,X34),X39),s(X35,sK9(X40,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X39,X35,X34))))))) | p(s(bool,happ(s(fun(X34,bool),X40),s(X34,X41))))) )),
  inference(superposition,[],[f345,f356])).
fof(f8993,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(fun(X43,X42),X46)))) | ~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,happ(s(fun(X43,X42),X46),s(X43,sK9(X47,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X46,X43,X42))))))) | p(s(bool,happ(s(fun(X42,bool),X47),s(X42,X48))))) )),
  inference(superposition,[],[f345,f338])).
fof(f8994,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X49,X50),X53),s(fun(X50,X49),X54)))) | ~p(s(bool,happ(s(fun(X49,bool),X55),s(X49,happ(s(fun(X50,X49),X54),s(X50,sK9(X55,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X54,X50,X49))))))) | p(s(bool,happ(s(fun(X49,bool),X55),s(X49,X56))))) )),
  inference(superposition,[],[f345,f340])).
fof(f8995,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X58),X60),s(fun(X58,X57),X62)))) | ~p(s(bool,happ(s(fun(X57,bool),X63),s(X57,happ(s(fun(X58,X57),X62),s(X58,sK9(X63,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X62,X58,X57))))))) | p(s(bool,happ(s(fun(X57,bool),X63),s(X57,X64))))) )),
  inference(superposition,[],[f345,f341])).
fof(f8996,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X65,X66),X67),s(fun(X66,X65),X69)))) | ~p(s(bool,happ(s(fun(X65,bool),X70),s(X65,happ(s(fun(X66,X65),X69),s(X66,sK9(X70,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X69,X66,X65))))))) | p(s(bool,happ(s(fun(X65,bool),X70),s(X65,X71))))) )),
  inference(superposition,[],[f345,f310])).
fof(f8997,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(fun(X73,X72),X77)))) | ~p(s(bool,happ(s(fun(X72,bool),X78),s(X72,happ(s(fun(X73,X72),X77),s(X73,sK9(X78,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X77,X73,X72))))))) | p(s(bool,happ(s(fun(X72,bool),X78),s(X72,X79))))) )),
  inference(superposition,[],[f345,f318])).
fof(f8998,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X81),X83),s(fun(X81,X80),X84)))) | ~p(s(bool,happ(s(fun(X80,bool),X85),s(X80,happ(s(fun(X81,X80),X84),s(X81,sK9(X85,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X84,X81,X80))))))) | p(s(bool,happ(s(fun(X80,bool),X85),s(X80,X86))))) )),
  inference(superposition,[],[f345,f337])).
fof(f8999,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X87,X88),X90),s(fun(X88,X87),X91)))) | ~p(s(bool,happ(s(fun(X87,bool),X92),s(X87,happ(s(fun(X88,X87),X91),s(X88,sK9(X92,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X91,X88,X87))))))) | p(s(bool,happ(s(fun(X87,bool),X92),s(X87,X93))))) )),
  inference(superposition,[],[f345,f336])).
fof(f9000,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X94,X95),X96),s(fun(X95,X94),X98)))) | ~p(s(bool,happ(s(fun(X94,bool),X99),s(X94,happ(s(fun(X95,X94),X98),s(X95,sK9(X99,sK4(X96,X97,fun(X94,X95)),X98,X95,X94))))))) | p(s(bool,happ(s(fun(X94,bool),X99),s(X94,X100)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f345,f823])).
fof(f9003,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20)))))) | ~p(s(bool,happ(s(fun(X15,bool),X22),s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,sK9(X22,X21,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X14,X15))))))) | p(s(bool,happ(s(fun(X15,bool),X22),s(X15,X23))))) )),
  inference(superposition,[],[f345,f365])).
fof(f9004,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X25,X24),X31),s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30)))))))) | ~p(s(bool,happ(s(fun(X25,bool),X32),s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,sK9(X32,X31,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X24,X25))))))) | p(s(bool,happ(s(fun(X25,bool),X32),s(X25,X33))))) )),
  inference(superposition,[],[f345,f365])).
fof(f9013,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X94),X98),s(fun(X94,X95),X96)))) | ~p(s(bool,happ(s(fun(X95,bool),X99),s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,sK9(X99,X98,sK4(X96,X97,fun(X94,X95)),X94,X95))))))) | p(s(bool,happ(s(fun(X95,bool),X99),s(X95,X100)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f345,f823])).
fof(f9029,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK9(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | p(s(bool,happ(s(fun(X1,bool),X6),s(X1,X7))))) )),
  inference(forward_demodulation,[],[f9001,f364])).
fof(f9001,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | ~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,sK9(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))))) | p(s(bool,happ(s(fun(X1,bool),X6),s(X1,X7))))) )),
  inference(superposition,[],[f345,f364])).
fof(f9030,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),X10),s(X8,sK9(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X13))))) )),
  inference(forward_demodulation,[],[f9002,f303])).
fof(f9002,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10))),s(X8,sK9(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9))))))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X13))))) )),
  inference(superposition,[],[f345,f303])).
fof(f9031,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),X38),s(X34,sK9(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41))))) )),
  inference(forward_demodulation,[],[f9005,f356])).
fof(f9005,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | ~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0'))),s(X34,sK9(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35))))))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41))))) )),
  inference(superposition,[],[f345,f356])).
fof(f9032,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,sK9(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | p(s(bool,happ(s(fun(X43,bool),X47),s(X43,X48))))) )),
  inference(forward_demodulation,[],[f9006,f338])).
fof(f9006,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,sK9(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43))))))) | p(s(bool,happ(s(fun(X43,bool),X47),s(X43,X48))))) )),
  inference(superposition,[],[f345,f338])).
fof(f9033,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),X53),s(X49,sK9(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | p(s(bool,happ(s(fun(X50,bool),X55),s(X50,X56))))) )),
  inference(forward_demodulation,[],[f9007,f340])).
fof(f9007,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | ~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53))))),s(X49,sK9(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50))))))) | p(s(bool,happ(s(fun(X50,bool),X55),s(X50,X56))))) )),
  inference(superposition,[],[f345,f340])).
fof(f9034,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),X60),s(X57,sK9(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | p(s(bool,happ(s(fun(X58,bool),X63),s(X58,X64))))) )),
  inference(forward_demodulation,[],[f9008,f341])).
fof(f9008,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61))))),s(X57,sK9(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58))))))) | p(s(bool,happ(s(fun(X58,bool),X63),s(X58,X64))))) )),
  inference(superposition,[],[f345,f341])).
fof(f9035,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),X67),s(X65,sK9(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | p(s(bool,happ(s(fun(X66,bool),X70),s(X66,X71))))) )),
  inference(forward_demodulation,[],[f9009,f310])).
fof(f9009,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | ~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0'))),s(X65,sK9(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66))))))) | p(s(bool,happ(s(fun(X66,bool),X70),s(X66,X71))))) )),
  inference(superposition,[],[f345,f310])).
fof(f9036,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(X72,sK9(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | p(s(bool,happ(s(fun(X73,bool),X78),s(X73,X79))))) )),
  inference(forward_demodulation,[],[f9010,f318])).
fof(f9010,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))))),s(X72,sK9(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73))))))) | p(s(bool,happ(s(fun(X73,bool),X78),s(X73,X79))))) )),
  inference(superposition,[],[f345,f318])).
fof(f9037,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),X83),s(X80,sK9(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | p(s(bool,happ(s(fun(X81,bool),X85),s(X81,X86))))) )),
  inference(forward_demodulation,[],[f9011,f337])).
fof(f9011,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | ~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83))))),s(X80,sK9(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81))))))) | p(s(bool,happ(s(fun(X81,bool),X85),s(X81,X86))))) )),
  inference(superposition,[],[f345,f337])).
fof(f9038,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),X90),s(X87,sK9(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | p(s(bool,happ(s(fun(X88,bool),X92),s(X88,X93))))) )),
  inference(forward_demodulation,[],[f9012,f336])).
fof(f9012,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | ~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90))))),s(X87,sK9(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88))))))) | p(s(bool,happ(s(fun(X88,bool),X92),s(X88,X93))))) )),
  inference(superposition,[],[f345,f336])).
fof(f9040,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X1,'_i_0_0','_i_0_0',X0,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f9039,f303])).
fof(f9039,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,sK9(X1,'_i_0_0','_i_0_0',X0,X0))))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(subsumption_resolution,[],[f9014,f256])).
fof(f9014,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,sK9(X1,'_i_0_0','_i_0_0',X0,X0))))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(superposition,[],[f345,f427])).
fof(f9041,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,sK9(X13,X11,X12,X10,X9))))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X14)))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f9016,f256])).
fof(f9016,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,sK9(X13,X11,X12,X10,X9))))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X14)))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f345,f432])).
fof(f9266,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,X7)))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X5),s(X1,sK10(X6,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0)))))))) )),
  inference(superposition,[],[f346,f364])).
fof(f9267,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X8,X9),X10),s(fun(X9,X8),X11)))) | ~p(s(bool,happ(s(fun(X8,bool),X12),s(X8,X13)))) | p(s(bool,happ(s(fun(X8,bool),X12),s(X8,happ(s(fun(X9,X8),X11),s(X9,sK10(X12,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X11,X9,X8)))))))) )),
  inference(superposition,[],[f346,f303])).
fof(f9268,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | ~p(s(bool,happ(s(fun(X14,bool),X22),s(X14,X23)))) | p(s(bool,happ(s(fun(X14,bool),X22),s(X14,happ(s(fun(X15,X14),X21),s(X15,sK10(X22,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X21,X15,X14)))))))) )),
  inference(superposition,[],[f346,f365])).
fof(f9269,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(fun(X25,X24),X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X32),s(X24,X33)))) | p(s(bool,happ(s(fun(X24,bool),X32),s(X24,happ(s(fun(X25,X24),X31),s(X25,sK10(X32,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X31,X25,X24)))))))) )),
  inference(superposition,[],[f346,f365])).
fof(f9270,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X34,X35),X38),s(fun(X35,X34),X39)))) | ~p(s(bool,happ(s(fun(X34,bool),X40),s(X34,X41)))) | p(s(bool,happ(s(fun(X34,bool),X40),s(X34,happ(s(fun(X35,X34),X39),s(X35,sK10(X40,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X39,X35,X34)))))))) )),
  inference(superposition,[],[f346,f356])).
fof(f9271,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(fun(X43,X42),X46)))) | ~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,X48)))) | p(s(bool,happ(s(fun(X42,bool),X47),s(X42,happ(s(fun(X43,X42),X46),s(X43,sK10(X47,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X46,X43,X42)))))))) )),
  inference(superposition,[],[f346,f338])).
fof(f9272,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X49,X50),X53),s(fun(X50,X49),X54)))) | ~p(s(bool,happ(s(fun(X49,bool),X55),s(X49,X56)))) | p(s(bool,happ(s(fun(X49,bool),X55),s(X49,happ(s(fun(X50,X49),X54),s(X50,sK10(X55,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X54,X50,X49)))))))) )),
  inference(superposition,[],[f346,f340])).
fof(f9273,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X58),X60),s(fun(X58,X57),X62)))) | ~p(s(bool,happ(s(fun(X57,bool),X63),s(X57,X64)))) | p(s(bool,happ(s(fun(X57,bool),X63),s(X57,happ(s(fun(X58,X57),X62),s(X58,sK10(X63,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X62,X58,X57)))))))) )),
  inference(superposition,[],[f346,f341])).
fof(f9274,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X65,X66),X67),s(fun(X66,X65),X69)))) | ~p(s(bool,happ(s(fun(X65,bool),X70),s(X65,X71)))) | p(s(bool,happ(s(fun(X65,bool),X70),s(X65,happ(s(fun(X66,X65),X69),s(X66,sK10(X70,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X69,X66,X65)))))))) )),
  inference(superposition,[],[f346,f310])).
fof(f9275,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(fun(X73,X72),X77)))) | ~p(s(bool,happ(s(fun(X72,bool),X78),s(X72,X79)))) | p(s(bool,happ(s(fun(X72,bool),X78),s(X72,happ(s(fun(X73,X72),X77),s(X73,sK10(X78,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X77,X73,X72)))))))) )),
  inference(superposition,[],[f346,f318])).
fof(f9276,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X81),X83),s(fun(X81,X80),X84)))) | ~p(s(bool,happ(s(fun(X80,bool),X85),s(X80,X86)))) | p(s(bool,happ(s(fun(X80,bool),X85),s(X80,happ(s(fun(X81,X80),X84),s(X81,sK10(X85,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X84,X81,X80)))))))) )),
  inference(superposition,[],[f346,f337])).
fof(f9277,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X87,X88),X90),s(fun(X88,X87),X91)))) | ~p(s(bool,happ(s(fun(X87,bool),X92),s(X87,X93)))) | p(s(bool,happ(s(fun(X87,bool),X92),s(X87,happ(s(fun(X88,X87),X91),s(X88,sK10(X92,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X91,X88,X87)))))))) )),
  inference(superposition,[],[f346,f336])).
fof(f9278,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X94,X95),X96),s(fun(X95,X94),X98)))) | ~p(s(bool,happ(s(fun(X94,bool),X99),s(X94,X100)))) | p(s(bool,happ(s(fun(X94,bool),X99),s(X94,happ(s(fun(X95,X94),X98),s(X95,sK10(X99,sK4(X96,X97,fun(X94,X95)),X98,X95,X94))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f346,f823])).
fof(f9281,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20)))))) | ~p(s(bool,happ(s(fun(X15,bool),X22),s(X15,X23)))) | p(s(bool,happ(s(fun(X15,bool),X22),s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,sK10(X22,X21,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X14,X15)))))))) )),
  inference(superposition,[],[f346,f365])).
fof(f9282,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X25,X24),X31),s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30)))))))) | ~p(s(bool,happ(s(fun(X25,bool),X32),s(X25,X33)))) | p(s(bool,happ(s(fun(X25,bool),X32),s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,sK10(X32,X31,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X24,X25)))))))) )),
  inference(superposition,[],[f346,f365])).
fof(f9291,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X94),X98),s(fun(X94,X95),X96)))) | ~p(s(bool,happ(s(fun(X95,bool),X99),s(X95,X100)))) | p(s(bool,happ(s(fun(X95,bool),X99),s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,sK10(X99,X98,sK4(X96,X97,fun(X94,X95)),X94,X95))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f346,f823])).
fof(f9307,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK10(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | ~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,X7))))) )),
  inference(forward_demodulation,[],[f9279,f364])).
fof(f9279,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | ~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,X7)))) | p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,sK10(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))))) )),
  inference(superposition,[],[f346,f364])).
fof(f9308,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),X10),s(X8,sK10(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X13))))) )),
  inference(forward_demodulation,[],[f9280,f303])).
fof(f9280,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X13)))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10))),s(X8,sK10(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9)))))))) )),
  inference(superposition,[],[f346,f303])).
fof(f9309,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),X38),s(X34,sK10(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | ~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41))))) )),
  inference(forward_demodulation,[],[f9283,f356])).
fof(f9283,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | ~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41)))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0'))),s(X34,sK10(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35)))))))) )),
  inference(superposition,[],[f346,f356])).
fof(f9310,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,sK10(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,X48))))) )),
  inference(forward_demodulation,[],[f9284,f338])).
fof(f9284,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,X48)))) | p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,sK10(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43)))))))) )),
  inference(superposition,[],[f346,f338])).
fof(f9311,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),X53),s(X49,sK10(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | ~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,X56))))) )),
  inference(forward_demodulation,[],[f9285,f340])).
fof(f9285,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | ~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,X56)))) | p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53))))),s(X49,sK10(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50)))))))) )),
  inference(superposition,[],[f346,f340])).
fof(f9312,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),X60),s(X57,sK10(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,X64))))) )),
  inference(forward_demodulation,[],[f9286,f341])).
fof(f9286,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,X64)))) | p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61))))),s(X57,sK10(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58)))))))) )),
  inference(superposition,[],[f346,f341])).
fof(f9313,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),X67),s(X65,sK10(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | ~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,X71))))) )),
  inference(forward_demodulation,[],[f9287,f310])).
fof(f9287,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | ~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,X71)))) | p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0'))),s(X65,sK10(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66)))))))) )),
  inference(superposition,[],[f346,f310])).
fof(f9314,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(X72,sK10(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,X79))))) )),
  inference(forward_demodulation,[],[f9288,f318])).
fof(f9288,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,X79)))) | p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))))),s(X72,sK10(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73)))))))) )),
  inference(superposition,[],[f346,f318])).
fof(f9315,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),X83),s(X80,sK10(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | ~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,X86))))) )),
  inference(forward_demodulation,[],[f9289,f337])).
fof(f9289,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | ~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,X86)))) | p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83))))),s(X80,sK10(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81)))))))) )),
  inference(superposition,[],[f346,f337])).
fof(f9316,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),X90),s(X87,sK10(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88))))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | ~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,X93))))) )),
  inference(forward_demodulation,[],[f9290,f336])).
fof(f9290,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | ~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,X93)))) | p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90))))),s(X87,sK10(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88)))))))) )),
  inference(superposition,[],[f346,f336])).
fof(f9318,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK10(X1,'_i_0_0','_i_0_0',X0,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f9317,f303])).
fof(f9317,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,sK10(X1,'_i_0_0','_i_0_0',X0,X0)))))))) )),
  inference(subsumption_resolution,[],[f9292,f256])).
fof(f9292,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,sK10(X1,'_i_0_0','_i_0_0',X0,X0)))))))) )),
  inference(superposition,[],[f346,f427])).
fof(f9319,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X14)))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,sK10(X13,X11,X12,X10,X9))))))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f9294,f256])).
fof(f9294,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X14)))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,sK10(X13,X11,X12,X10,X9))))))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f346,f432])).
fof(f344,plain,(
  ( ! [X2,X0,X14,X3,X1,X11] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X11),s(X0,sK8(X11,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X11),s(X0,happ(s(fun(X1,X0),X2),s(X1,X14))))))) )),
  inference(cnf_transformation,[],[f240])).
fof(f347,plain,(
  ( ! [X6,X2,X0,X8,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X2),s(X1,X8)))))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,sK11(X6,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f240])).
fof(f6141,plain,(
  ( ! [X111,X109,X112,X110,X108] : (p(s(bool,happ(s(fun(X110,bool),'_dst_x0x1_2'(s(fun(X108,bool),X109),s(fun(X110,X108),X111))),s(X110,X112)))) | s(bool,'T_0') != s(bool,happ(s(fun(X108,bool),X109),s(X108,happ(s(fun(X110,X108),X111),s(X110,X112)))))) )),
  inference(superposition,[],[f265,f365])).
fof(f6142,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,happ(s(fun(X115,bool),'_dst_x0x1_2'(s(fun(X113,bool),X114),s(fun(X115,X113),X116))),s(X115,X117)))) | s(bool,'T_0') = s(bool,happ(s(fun(X113,bool),X114),s(X113,happ(s(fun(X115,X113),X116),s(X115,X117)))))) )),
  inference(superposition,[],[f266,f365])).
fof(f6145,plain,(
  ( ! [X132,X130,X128,X133,X131,X129] : (p(s(bool,happ(s(fun(X130,bool),'_dst_x0x1_2'(s(fun(X128,bool),X129),s(fun(X130,X128),X131))),s(X130,X132)))) | p(s(bool,X133)) | s(bool,X133) = s(bool,happ(s(fun(X128,bool),X129),s(X128,happ(s(fun(X130,X128),X131),s(X130,X132)))))) )),
  inference(superposition,[],[f328,f365])).
fof(f6147,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (~p(s(bool,happ(s(fun(X142,bool),'_dst_x0x1_2'(s(fun(X140,bool),X141),s(fun(X142,X140),X143))),s(X142,X144)))) | ~p(s(bool,X145)) | s(bool,X145) = s(bool,happ(s(fun(X140,bool),X141),s(X140,happ(s(fun(X142,X140),X143),s(X142,X144)))))) )),
  inference(superposition,[],[f331,f365])).
fof(f6148,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (~p(s(bool,happ(s(fun(X148,bool),'_dst_x0x1_2'(s(fun(X146,bool),X147),s(fun(X148,X146),X149))),s(X148,X150)))) | s(bool,X151) != s(bool,happ(s(fun(X146,bool),X147),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150))))) | p(s(bool,X151))) )),
  inference(superposition,[],[f405,f365])).
fof(f6153,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (~p(s(bool,happ(s(fun(X178,bool),'_dst_x0x1_2'(s(fun(X176,bool),X177),s(fun(X178,X176),X179))),s(X178,X180)))) | s(bool,X181) != s(bool,happ(s(fun(X176,bool),X177),s(X176,happ(s(fun(X178,X176),X179),s(X178,X180))))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(superposition,[],[f434,f365])).
fof(f6155,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (p(s(bool,happ(s(fun(X189,bool),'_dst_x0x1_2'(s(fun(X187,bool),X188),s(fun(X189,X187),X190))),s(X189,X191)))) | s(bool,X192) = s(bool,happ(s(fun(X187,bool),X188),s(X187,happ(s(fun(X189,X187),X190),s(X189,X191))))) | s(bool,'T_0') = s(bool,X192)) )),
  inference(superposition,[],[f481,f365])).
fof(f6216,plain,(
  ( ! [X85,X83,X81,X84,X82] : (~p(s(bool,happ(s(fun(X82,bool),X83),s(X82,happ(s(fun(X81,X82),X84),s(X81,X85)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X81,bool),'_dst_x0x1_2'(s(fun(X82,bool),X83),s(fun(X81,X82),X84))))))) )),
  inference(superposition,[],[f3805,f365])).
fof(f6217,plain,(
  ( ! [X90,X88,X87,X89,X86] : (~p(s(bool,happ(s(fun(X87,bool),X88),s(X87,happ(s(fun(X86,X87),X89),s(X86,X90)))))) | p(s(bool,happ(s(fun(X86,bool),'_dst_x0x1_2'(s(fun(X87,bool),X88),s(fun(X86,X87),X89))),s(X86,'const.min.@_1'(s(fun(X86,bool),'_dst_x0x1_2'(s(fun(X87,bool),X88),s(fun(X86,X87),X89))))))))) )),
  inference(superposition,[],[f311,f365])).
fof(f6220,plain,(
  ( ! [X103,X101,X102,X100,X104] : (p(s(bool,happ(s(fun(X101,bool),X102),s(X101,happ(s(fun(X100,X101),X103),s(X100,X104)))))) | s(bool,'T_0') != s(bool,happ(s(fun(X100,bool),'_dst_x0x1_2'(s(fun(X101,bool),X102),s(fun(X100,X101),X103))),s(X100,X104)))) )),
  inference(superposition,[],[f265,f365])).
fof(f6221,plain,(
  ( ! [X109,X107,X105,X108,X106] : (~p(s(bool,happ(s(fun(X106,bool),X107),s(X106,happ(s(fun(X105,X106),X108),s(X105,X109)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X105,bool),'_dst_x0x1_2'(s(fun(X106,bool),X107),s(fun(X105,X106),X108))),s(X105,X109)))) )),
  inference(superposition,[],[f266,f365])).
fof(f6224,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (p(s(bool,happ(s(fun(X121,bool),X122),s(X121,happ(s(fun(X120,X121),X123),s(X120,X124)))))) | p(s(bool,X125)) | s(bool,X125) = s(bool,happ(s(fun(X120,bool),'_dst_x0x1_2'(s(fun(X121,bool),X122),s(fun(X120,X121),X123))),s(X120,X124)))) )),
  inference(superposition,[],[f328,f365])).
fof(f6226,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (~p(s(bool,happ(s(fun(X133,bool),X134),s(X133,happ(s(fun(X132,X133),X135),s(X132,X136)))))) | ~p(s(bool,X137)) | s(bool,X137) = s(bool,happ(s(fun(X132,bool),'_dst_x0x1_2'(s(fun(X133,bool),X134),s(fun(X132,X133),X135))),s(X132,X136)))) )),
  inference(superposition,[],[f331,f365])).
fof(f6227,plain,(
  ( ! [X142,X140,X138,X143,X141,X139] : (~p(s(bool,happ(s(fun(X139,bool),X140),s(X139,happ(s(fun(X138,X139),X141),s(X138,X142)))))) | s(bool,X143) != s(bool,happ(s(fun(X138,bool),'_dst_x0x1_2'(s(fun(X139,bool),X140),s(fun(X138,X139),X141))),s(X138,X142))) | p(s(bool,X143))) )),
  inference(superposition,[],[f405,f365])).
fof(f6232,plain,(
  ( ! [X173,X171,X169,X172,X170,X168] : (~p(s(bool,happ(s(fun(X169,bool),X170),s(X169,happ(s(fun(X168,X169),X171),s(X168,X172)))))) | s(bool,X173) != s(bool,happ(s(fun(X168,bool),'_dst_x0x1_2'(s(fun(X169,bool),X170),s(fun(X168,X169),X171))),s(X168,X172))) | s(bool,'T_0') = s(bool,X173)) )),
  inference(superposition,[],[f434,f365])).
fof(f6234,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (p(s(bool,happ(s(fun(X180,bool),X181),s(X180,happ(s(fun(X179,X180),X182),s(X179,X183)))))) | s(bool,X184) = s(bool,happ(s(fun(X179,bool),'_dst_x0x1_2'(s(fun(X180,bool),X181),s(fun(X179,X180),X182))),s(X179,X183))) | s(bool,'T_0') = s(bool,X184)) )),
  inference(superposition,[],[f481,f365])).
fof(f6252,plain,(
  ( ! [X288,X285,X287,X283,X289,X284,X286] : (~p(s(bool,happ(s(fun(X284,bool),X285),s(X284,happ(s(fun(X283,X284),X286),s(X283,X287)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X288),bool),sK16(X289,happ(s(fun(X283,bool),'_dst_x0x1_2'(s(fun(X284,bool),X285),s(fun(X283,X284),X286))),s(X283,X287)),X288,bool))))) )),
  inference(superposition,[],[f3944,f365])).
fof(f6255,plain,(
  ( ! [X302,X304,X306,X303,X305,X307] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X307,bool),'const.sum.INR_1'(s(bool,happ(s(fun(X303,bool),X304),s(X303,happ(s(fun(X302,X303),X305),s(X302,X306))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X302,bool),'_dst_x0x1_2'(s(fun(X303,bool),X304),s(fun(X302,X303),X305))),s(X302,X306)))) )),
  inference(superposition,[],[f5495,f365])).
fof(f6256,plain,(
  ( ! [X313,X308,X310,X312,X309,X311] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X313),'const.sum.INL_1'(s(bool,happ(s(fun(X309,bool),X310),s(X309,happ(s(fun(X308,X309),X311),s(X308,X312))))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X308,bool),'_dst_x0x1_2'(s(fun(X309,bool),X310),s(fun(X308,X309),X311))),s(X308,X312)))) )),
  inference(superposition,[],[f5684,f365])).
fof(f6904,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (~p(s(bool,happ(s(fun(X68,bool),X69),s(X68,happ(s(fun(X67,X68),X70),s(X67,X71)))))) | p(s(bool,happ(s(fun(X67,bool),X72),s(X67,sK6('_dst_x0x1_2'(s(fun(X68,bool),X69),s(fun(X67,X68),X70)),X72,X67))))) | p(s(bool,happ(s(fun(X67,bool),'_dst_x0x1_2'(s(fun(X68,bool),X69),s(fun(X67,X68),X70))),s(X67,sK5('_dst_x0x1_2'(s(fun(X68,bool),X69),s(fun(X67,X68),X70)),X72,X67)))))) )),
  inference(superposition,[],[f314,f365])).
fof(f8641,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(fun(X1,X0),X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X6),s(X0,sK8(X6,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X6),s(X0,happ(s(fun(X1,X0),X5),s(X1,X7))))))) )),
  inference(superposition,[],[f344,f364])).
fof(f8642,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X8,X9),X10),s(fun(X9,X8),X11)))) | ~p(s(bool,happ(s(fun(X8,bool),X12),s(X8,sK8(X12,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X11,X9,X8))))) | p(s(bool,happ(s(fun(X8,bool),X12),s(X8,happ(s(fun(X9,X8),X11),s(X9,X13))))))) )),
  inference(superposition,[],[f344,f303])).
fof(f8643,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | ~p(s(bool,happ(s(fun(X14,bool),X22),s(X14,sK8(X22,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X21,X15,X14))))) | p(s(bool,happ(s(fun(X14,bool),X22),s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))))))) )),
  inference(superposition,[],[f344,f365])).
fof(f8644,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(fun(X25,X24),X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X32),s(X24,sK8(X32,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X31,X25,X24))))) | p(s(bool,happ(s(fun(X24,bool),X32),s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))))))) )),
  inference(superposition,[],[f344,f365])).
fof(f8645,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X34,X35),X38),s(fun(X35,X34),X39)))) | ~p(s(bool,happ(s(fun(X34,bool),X40),s(X34,sK8(X40,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X39,X35,X34))))) | p(s(bool,happ(s(fun(X34,bool),X40),s(X34,happ(s(fun(X35,X34),X39),s(X35,X41))))))) )),
  inference(superposition,[],[f344,f356])).
fof(f8646,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(fun(X43,X42),X46)))) | ~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,sK8(X47,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X46,X43,X42))))) | p(s(bool,happ(s(fun(X42,bool),X47),s(X42,happ(s(fun(X43,X42),X46),s(X43,X48))))))) )),
  inference(superposition,[],[f344,f338])).
fof(f8647,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X49,X50),X53),s(fun(X50,X49),X54)))) | ~p(s(bool,happ(s(fun(X49,bool),X55),s(X49,sK8(X55,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X54,X50,X49))))) | p(s(bool,happ(s(fun(X49,bool),X55),s(X49,happ(s(fun(X50,X49),X54),s(X50,X56))))))) )),
  inference(superposition,[],[f344,f340])).
fof(f8648,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X58),X60),s(fun(X58,X57),X62)))) | ~p(s(bool,happ(s(fun(X57,bool),X63),s(X57,sK8(X63,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X62,X58,X57))))) | p(s(bool,happ(s(fun(X57,bool),X63),s(X57,happ(s(fun(X58,X57),X62),s(X58,X64))))))) )),
  inference(superposition,[],[f344,f341])).
fof(f8649,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X65,X66),X67),s(fun(X66,X65),X69)))) | ~p(s(bool,happ(s(fun(X65,bool),X70),s(X65,sK8(X70,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X69,X66,X65))))) | p(s(bool,happ(s(fun(X65,bool),X70),s(X65,happ(s(fun(X66,X65),X69),s(X66,X71))))))) )),
  inference(superposition,[],[f344,f310])).
fof(f8650,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(fun(X73,X72),X77)))) | ~p(s(bool,happ(s(fun(X72,bool),X78),s(X72,sK8(X78,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X77,X73,X72))))) | p(s(bool,happ(s(fun(X72,bool),X78),s(X72,happ(s(fun(X73,X72),X77),s(X73,X79))))))) )),
  inference(superposition,[],[f344,f318])).
fof(f8651,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X80,X81),X83),s(fun(X81,X80),X84)))) | ~p(s(bool,happ(s(fun(X80,bool),X85),s(X80,sK8(X85,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X84,X81,X80))))) | p(s(bool,happ(s(fun(X80,bool),X85),s(X80,happ(s(fun(X81,X80),X84),s(X81,X86))))))) )),
  inference(superposition,[],[f344,f337])).
fof(f8652,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X87,X88),X90),s(fun(X88,X87),X91)))) | ~p(s(bool,happ(s(fun(X87,bool),X92),s(X87,sK8(X92,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X91,X88,X87))))) | p(s(bool,happ(s(fun(X87,bool),X92),s(X87,happ(s(fun(X88,X87),X91),s(X88,X93))))))) )),
  inference(superposition,[],[f344,f336])).
fof(f8653,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X94,X95),X96),s(fun(X95,X94),X98)))) | ~p(s(bool,happ(s(fun(X94,bool),X99),s(X94,sK8(X99,sK4(X96,X97,fun(X94,X95)),X98,X95,X94))))) | p(s(bool,happ(s(fun(X94,bool),X99),s(X94,happ(s(fun(X95,X94),X98),s(X95,X100)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f344,f823])).
fof(f8683,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),X10),s(X8,X13)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,sK8(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9)))))) )),
  inference(forward_demodulation,[],[f8655,f303])).
fof(f8655,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X8),X11),s(fun(X8,X9),X10)))) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,sK8(X12,X11,happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10)),X8,X9))))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,happ(s(fun(X8,X9),happ(s(fun(fun(X8,X9),fun(X8,X9)),'_i_0_0'),s(fun(X8,X9),X10))),s(X8,X13))))))) )),
  inference(superposition,[],[f344,f303])).
fof(f8684,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),X38),s(X34,X41)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | ~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,sK8(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35)))))) )),
  inference(forward_demodulation,[],[f8658,f356])).
fof(f8658,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X34,X40] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X35,X34),X39),s(fun(X34,X35),X38)))) | ~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,sK8(X40,X39,happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0')),X34,X35))))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,happ(s(fun(X34,X35),happ(s(fun('type.list.list'(X36),fun(X34,X35)),sK16(X37,X38,X36,fun(X34,X35))),s('type.list.list'(X36),'const.list.NIL_0'))),s(X34,X41))))))) )),
  inference(superposition,[],[f344,f356])).
fof(f8686,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),X53),s(X49,X56)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | ~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,sK8(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50)))))) )),
  inference(forward_demodulation,[],[f8660,f340])).
fof(f8660,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51,X49] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X50,X49),X54),s(fun(X49,X50),X53)))) | ~p(s(bool,happ(s(fun(X50,bool),X55),s(X50,sK8(X55,X54,'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53)))),X49,X50))))) | p(s(bool,happ(s(fun(X50,bool),X55),s(X50,happ(s(fun(X49,X50),'const.pair.SND_1'(s('type.pair.prod'(X51,fun(X49,X50)),'const.pair.,_2'(s(X51,X52),s(fun(X49,X50),X53))))),s(X49,X56))))))) )),
  inference(superposition,[],[f344,f340])).
fof(f8687,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),X60),s(X57,X64)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,sK8(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58)))))) )),
  inference(forward_demodulation,[],[f8661,f341])).
fof(f8661,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X62),s(fun(X57,X58),X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X63),s(X58,sK8(X63,X62,'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61)))),X57,X58))))) | p(s(bool,happ(s(fun(X58,bool),X63),s(X58,happ(s(fun(X57,X58),'const.pair.FST_1'(s('type.pair.prod'(fun(X57,X58),X59),'const.pair.,_2'(s(fun(X57,X58),X60),s(X59,X61))))),s(X57,X64))))))) )),
  inference(superposition,[],[f344,f341])).
fof(f8688,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),X67),s(X65,X71)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | ~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,sK8(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66)))))) )),
  inference(forward_demodulation,[],[f8662,f310])).
fof(f8662,plain,(
  ( ! [X70,X68,X66,X71,X69,X67,X65] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X66,X65),X69),s(fun(X65,X66),X67)))) | ~p(s(bool,happ(s(fun(X66,bool),X70),s(X66,sK8(X70,X69,'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0')),X65,X66))))) | p(s(bool,happ(s(fun(X66,bool),X70),s(X66,happ(s(fun(X65,X66),'const.ind_type.FCONS_3'(s(fun(X65,X66),X67),s(fun('type.num.num',fun(X65,X66)),X68),s('type.num.num','const.num.|48|_0'))),s(X65,X71))))))) )),
  inference(superposition,[],[f344,f310])).
fof(f8690,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),X83),s(X80,X86)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | ~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,sK8(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81)))))) )),
  inference(forward_demodulation,[],[f8664,f337])).
fof(f8664,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X81,X80),X84),s(fun(X80,X81),X83)))) | ~p(s(bool,happ(s(fun(X81,bool),X85),s(X81,sK8(X85,X84,'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83)))),X80,X81))))) | p(s(bool,happ(s(fun(X81,bool),X85),s(X81,happ(s(fun(X80,X81),'const.sum.OUTR_1'(s('type.sum.sum'(X82,fun(X80,X81)),'const.sum.INR_1'(s(fun(X80,X81),X83))))),s(X80,X86))))))) )),
  inference(superposition,[],[f344,f337])).
fof(f8691,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),X90),s(X87,X93)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | ~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,sK8(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88)))))) )),
  inference(forward_demodulation,[],[f8665,f336])).
fof(f8665,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X88,X87),X91),s(fun(X87,X88),X90)))) | ~p(s(bool,happ(s(fun(X88,bool),X92),s(X88,sK8(X92,X91,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90)))),X87,X88))))) | p(s(bool,happ(s(fun(X88,bool),X92),s(X88,happ(s(fun(X87,X88),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X87,X88),X89),'const.sum.INL_1'(s(fun(X87,X88),X90))))),s(X87,X93))))))) )),
  inference(superposition,[],[f344,f336])).
fof(f8694,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK8(X13,X11,X12,X10,X9))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,X14)))))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f8669,f256])).
fof(f8669,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK8(X13,X11,X12,X10,X9))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,happ(s(fun(X10,X9),X12),s(X10,X14)))))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f344,f432])).
fof(f6218,plain,(
  ( ! [X94,X92,X93,X91] : (p(s(bool,happ(s(fun(X92,bool),X93),s(X92,happ(s(fun('type.list.list'(X91),X92),X94),s('type.list.list'(X91),sK2('_dst_x0x1_2'(s(fun(X92,bool),X93),s(fun('type.list.list'(X91),X92),X94)),X91))))))) | ~p(s(bool,happ(s(fun('type.list.list'(X91),bool),'_dst_x0x1_2'(s(fun(X92,bool),X93),s(fun('type.list.list'(X91),X92),X94))),s('type.list.list'(X91),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f365])).
fof(f8689,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76))),s(X72,X79)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,sK8(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73)))))) )),
  inference(forward_demodulation,[],[f8663,f318])).
fof(f8663,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X73,X72),X77),s(fun(X72,X73),happ(s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun(X73,bool),X78),s(X73,sK8(X78,X77,'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))),X72,X73))))) | p(s(bool,happ(s(fun(X73,bool),X78),s(X73,happ(s(fun(X72,X73),'const.ind_type.FCONS_3'(s(fun(X72,X73),X74),s(fun('type.num.num',fun(X72,X73)),X75),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))))),s(X72,X79))))))) )),
  inference(superposition,[],[f344,f318])).
fof(f8656,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20)))))) | ~p(s(bool,happ(s(fun(X15,bool),X22),s(X15,sK8(X22,X21,happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20)))),X14,X15))))) | p(s(bool,happ(s(fun(X15,bool),X22),s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))))))) )),
  inference(superposition,[],[f344,f365])).
fof(f8657,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X25,X24),X31),s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30)))))))) | ~p(s(bool,happ(s(fun(X25,bool),X32),s(X25,sK8(X32,X31,happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30)),X24,X25))))) | p(s(bool,happ(s(fun(X25,bool),X32),s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))))))) )),
  inference(superposition,[],[f344,f365])).
fof(f8682,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,X7)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | ~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,sK8(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))))) )),
  inference(forward_demodulation,[],[f8654,f364])).
fof(f8654,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X5),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3)))))) | ~p(s(bool,happ(s(fun(X1,bool),X6),s(X1,sK8(X6,X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))) | p(s(bool,happ(s(fun(X1,bool),X6),s(X1,happ(s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4))),s(X0,X7))))))) )),
  inference(superposition,[],[f344,f364])).
fof(f8685,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,X48)))))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,sK8(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43)))))) )),
  inference(forward_demodulation,[],[f8659,f338])).
fof(f8659,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X43,X42),X46),s(fun(X42,X43),'const.pair.FST_1'(s('type.pair.prod'(fun(X42,X43),X44),X45)))))) | ~p(s(bool,happ(s(fun(X43,bool),X47),s(X43,sK8(X47,X46,happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45)),X42,X43))))) | p(s(bool,happ(s(fun(X43,bool),X47),s(X43,happ(s(fun(X42,X43),happ(s(fun('type.pair.prod'(fun(X42,X43),X44),fun(X42,X43)),'const.pair.FST_0'),s('type.pair.prod'(fun(X42,X43),X44),X45))),s(X42,X48))))))) )),
  inference(superposition,[],[f344,f338])).
fof(f8666,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X94),X98),s(fun(X94,X95),X96)))) | ~p(s(bool,happ(s(fun(X95,bool),X99),s(X95,sK8(X99,X98,sK4(X96,X97,fun(X94,X95)),X94,X95))))) | p(s(bool,happ(s(fun(X95,bool),X99),s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,X100)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f344,f823])).
fof(f6139,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,happ(s(fun(X100,bool),'_dst_x0x1_2'(s(fun(X98,bool),X99),s(fun(X100,X98),X101))),s(X100,X102)))) | p(s(bool,happ(s(fun(X98,bool),X99),s(X98,'const.min.@_1'(s(fun(X98,bool),X99))))))) )),
  inference(superposition,[],[f311,f365])).
fof(f6903,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (~p(s(bool,happ(s(fun(X63,bool),'_dst_x0x1_2'(s(fun(X61,bool),X62),s(fun(X63,X61),X64))),s(X63,X65)))) | p(s(bool,happ(s(fun(X61,bool),X66),s(X61,sK6(X62,X66,X61))))) | p(s(bool,happ(s(fun(X61,bool),X62),s(X61,sK5(X62,X66,X61)))))) )),
  inference(superposition,[],[f314,f365])).
fof(f6828,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X13,fun(X10,bool)),'_dst_x0x1_2'(s(fun(X11,fun(X10,bool)),X12),s(fun(X13,X11),X14))),s(X13,X15))),s(X10,X16)))) | p(s(bool,happ(s(fun(X10,bool),X17),s(X10,sK6(happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X17,X10))))) | p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15))))),s(X10,sK5(happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X17,X10)))))) )),
  inference(superposition,[],[f314,f365])).
fof(f6829,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X20,fun(X18,bool)),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))),s(X18,X24)))) | p(s(bool,happ(s(fun(X18,bool),X25),s(X18,sK6(happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X25,X18))))) | p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23))),s(X18,sK5(happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X25,X18)))))) )),
  inference(superposition,[],[f314,f365])).
fof(f6915,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun(X0,X1),X2))),s(X0,sK5(happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X5,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun(X0,X1),X2))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X5),s(X0,sK6(happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X5,X0)))))) )),
  inference(forward_demodulation,[],[f6826,f364])).
fof(f6826,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),X3),s(fun(X0,X1),X2))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X5),s(X0,sK6(happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X5,X0))))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3))),s(X0,sK5(happ(s(fun(fun(X1,bool),fun(X0,bool)),'_dstsel_0_x01_1'(s(fun(X0,X1),X2))),s(fun(X1,bool),X3)),X5,X0)))))) )),
  inference(superposition,[],[f314,f364])).
fof(f6918,plain,(
  ( ! [X35,X33,X36,X34,X32] : (p(s(bool,happ(s(fun(X32,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,sK5(happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X36,X32))))) | ~p(s(bool,happ(s(fun(X32,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,X35)))) | p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK6(happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X36,X32)))))) )),
  inference(forward_demodulation,[],[f6831,f338])).
fof(f6831,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,X35)))) | p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK6(happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X36,X32))))) | p(s(bool,happ(s(fun(X32,bool),happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34))),s(X32,sK5(happ(s(fun('type.pair.prod'(fun(X32,bool),X33),fun(X32,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,bool),X33),X34)),X36,X32)))))) )),
  inference(superposition,[],[f314,f338])).
fof(f6922,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (p(s(bool,happ(s(fun(X54,bool),happ(s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num',X57))),s(X54,sK5('const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X59,X54))))) | ~p(s(bool,happ(s(fun(X54,bool),happ(s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num',X57))),s(X54,X58)))) | p(s(bool,happ(s(fun(X54,bool),X59),s(X54,sK6('const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X59,X54)))))) )),
  inference(forward_demodulation,[],[f6835,f318])).
fof(f6835,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (~p(s(bool,happ(s(fun(X54,bool),happ(s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num',X57))),s(X54,X58)))) | p(s(bool,happ(s(fun(X54,bool),X59),s(X54,sK6('const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X59,X54))))) | p(s(bool,happ(s(fun(X54,bool),'const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))))),s(X54,sK5('const.ind_type.FCONS_3'(s(fun(X54,bool),X55),s(fun('type.num.num',fun(X54,bool)),X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))),X59,X54)))))) )),
  inference(superposition,[],[f314,f318])).
fof(f305,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(X1,X0)),s('type.list.list'(X0),sK2(X1,X0))))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2))))) )),
  inference(cnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(X1,X0)),s('type.list.list'(X0),sK2(X1,X0)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f226])).
fof(f226,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X3] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X3)))) & ? [X4] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))) | ! [X2] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f181])).
fof(f181,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))))) | ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f180])).
fof(f180,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) | ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(ennf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : ((p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) & ! [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) => ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1] : ((p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) & ! [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) => ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X9] : ! [X21] : ((p(s(bool,happ(s(fun('type.list.list'(X9),bool),X21),s('type.list.list'(X9),'const.list.NIL_0')))) & ! [X22] : (p(s(bool,happ(s(fun('type.list.list'(X9),bool),X21),s('type.list.list'(X9),X22)))) => ! [X38] : p(s(bool,happ(s(fun('type.list.list'(X9),bool),X21),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X38),s('type.list.list'(X9),X22)))))))) => ! [X39] : p(s(bool,happ(s(fun('type.list.list'(X9),bool),X21),s('type.list.list'(X9),X39)))))),
  file('thm.closSem.v_|49||49||split|1','thm.list.list_INDUCT')).
fof(f407,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(condensation,[],[f304])).
fof(f304,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f227])).
fof(f2496,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(happ(s(fun(fun('type.list.list'(X0),bool),fun('type.list.list'(X0),bool)),'_i_0_0'),s(fun('type.list.list'(X0),bool),X1)),X0)))))) )),
  inference(forward_demodulation,[],[f2480,f303])).
fof(f2480,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(happ(s(fun(fun('type.list.list'(X0),bool),fun('type.list.list'(X0),bool)),'_i_0_0'),s(fun('type.list.list'(X0),bool),X1)),X0))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),happ(s(fun(fun('type.list.list'(X0),bool),fun('type.list.list'(X0),bool)),'_i_0_0'),s(fun('type.list.list'(X0),bool),X1))),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f303])).
fof(f2497,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun('type.list.list'(X2),bool),X5),s('type.list.list'(X2),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X2),bool),X5),s('type.list.list'(X2),sK2(happ(s(fun('type.list.list'(X3),fun('type.list.list'(X2),bool)),sK16(X4,X5,X3,fun('type.list.list'(X2),bool))),s('type.list.list'(X3),'const.list.NIL_0')),X2)))))) )),
  inference(forward_demodulation,[],[f2481,f356])).
fof(f2481,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'(X2),bool),X5),s('type.list.list'(X2),sK2(happ(s(fun('type.list.list'(X3),fun('type.list.list'(X2),bool)),sK16(X4,X5,X3,fun('type.list.list'(X2),bool))),s('type.list.list'(X3),'const.list.NIL_0')),X2))))) | ~p(s(bool,happ(s(fun('type.list.list'(X2),bool),happ(s(fun('type.list.list'(X3),fun('type.list.list'(X2),bool)),sK16(X4,X5,X3,fun('type.list.list'(X2),bool))),s('type.list.list'(X3),'const.list.NIL_0'))),s('type.list.list'(X2),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f356])).
fof(f2499,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun('type.list.list'(X9),bool),X12),s('type.list.list'(X9),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X9),bool),X12),s('type.list.list'(X9),sK2('const.pair.SND_1'(s('type.pair.prod'(X10,fun('type.list.list'(X9),bool)),'const.pair.,_2'(s(X10,X11),s(fun('type.list.list'(X9),bool),X12)))),X9)))))) )),
  inference(forward_demodulation,[],[f2483,f340])).
fof(f2483,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,happ(s(fun('type.list.list'(X9),bool),X12),s('type.list.list'(X9),sK2('const.pair.SND_1'(s('type.pair.prod'(X10,fun('type.list.list'(X9),bool)),'const.pair.,_2'(s(X10,X11),s(fun('type.list.list'(X9),bool),X12)))),X9))))) | ~p(s(bool,happ(s(fun('type.list.list'(X9),bool),'const.pair.SND_1'(s('type.pair.prod'(X10,fun('type.list.list'(X9),bool)),'const.pair.,_2'(s(X10,X11),s(fun('type.list.list'(X9),bool),X12))))),s('type.list.list'(X9),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f340])).
fof(f2500,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,happ(s(fun('type.list.list'(X13),bool),X15),s('type.list.list'(X13),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X13),bool),X15),s('type.list.list'(X13),sK2('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X13),bool),X14),'const.pair.,_2'(s(fun('type.list.list'(X13),bool),X15),s(X14,X16)))),X13)))))) )),
  inference(forward_demodulation,[],[f2484,f341])).
fof(f2484,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,happ(s(fun('type.list.list'(X13),bool),X15),s('type.list.list'(X13),sK2('const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X13),bool),X14),'const.pair.,_2'(s(fun('type.list.list'(X13),bool),X15),s(X14,X16)))),X13))))) | ~p(s(bool,happ(s(fun('type.list.list'(X13),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X13),bool),X14),'const.pair.,_2'(s(fun('type.list.list'(X13),bool),X15),s(X14,X16))))),s('type.list.list'(X13),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f341])).
fof(f2501,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun('type.list.list'(X17),bool),X18),s('type.list.list'(X17),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X17),bool),X18),s('type.list.list'(X17),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X17),bool),X18),s(fun('type.num.num',fun('type.list.list'(X17),bool)),X19),s('type.num.num','const.num.|48|_0')),X17)))))) )),
  inference(forward_demodulation,[],[f2485,f310])).
fof(f2485,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'(X17),bool),X18),s('type.list.list'(X17),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X17),bool),X18),s(fun('type.num.num',fun('type.list.list'(X17),bool)),X19),s('type.num.num','const.num.|48|_0')),X17))))) | ~p(s(bool,happ(s(fun('type.list.list'(X17),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X17),bool),X18),s(fun('type.num.num',fun('type.list.list'(X17),bool)),X19),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(X17),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f310])).
fof(f2503,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun('type.list.list'(X24),bool),X26),s('type.list.list'(X24),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X24),bool),X26),s('type.list.list'(X24),sK2('const.sum.OUTR_1'(s('type.sum.sum'(X25,fun('type.list.list'(X24),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X24),bool),X26)))),X24)))))) )),
  inference(forward_demodulation,[],[f2487,f337])).
fof(f2487,plain,(
  ( ! [X26,X24,X25] : (p(s(bool,happ(s(fun('type.list.list'(X24),bool),X26),s('type.list.list'(X24),sK2('const.sum.OUTR_1'(s('type.sum.sum'(X25,fun('type.list.list'(X24),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X24),bool),X26)))),X24))))) | ~p(s(bool,happ(s(fun('type.list.list'(X24),bool),'const.sum.OUTR_1'(s('type.sum.sum'(X25,fun('type.list.list'(X24),bool)),'const.sum.INR_1'(s(fun('type.list.list'(X24),bool),X26))))),s('type.list.list'(X24),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f337])).
fof(f2504,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,happ(s(fun('type.list.list'(X27),bool),X29),s('type.list.list'(X27),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X27),bool),X29),s('type.list.list'(X27),sK2('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X27),bool),X28),'const.sum.INL_1'(s(fun('type.list.list'(X27),bool),X29)))),X27)))))) )),
  inference(forward_demodulation,[],[f2488,f336])).
fof(f2488,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,happ(s(fun('type.list.list'(X27),bool),X29),s('type.list.list'(X27),sK2('const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X27),bool),X28),'const.sum.INL_1'(s(fun('type.list.list'(X27),bool),X29)))),X27))))) | ~p(s(bool,happ(s(fun('type.list.list'(X27),bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun('type.list.list'(X27),bool),X28),'const.sum.INL_1'(s(fun('type.list.list'(X27),bool),X29))))),s('type.list.list'(X27),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f336])).
fof(f2505,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(X1,X0))))) )),
  inference(subsumption_resolution,[],[f2489,f258])).
fof(f2489,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK2(X1,X0))))) )),
  inference(superposition,[],[f407,f264])).
fof(f3741,plain,(
  ( ! [X152,X151,X153] : (p(s(bool,happ(s(fun('type.list.list'(X151),bool),X152),s('type.list.list'(X151),sK2(sK4(X152,X153,fun('type.list.list'(X151),bool)),X151))))) | ~p(s(bool,happ(s(fun('type.list.list'(X151),bool),sK4(X152,X153,fun('type.list.list'(X151),bool))),s('type.list.list'(X151),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun('type.list.list'(X151),bool),bool),X153)))) )),
  inference(superposition,[],[f407,f823])).
fof(f6905,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,X75)) | p(s(bool,happ(s(fun('type.list.list'(X73),bool),X76),s('type.list.list'(X73),sK6(sK16(X74,X75,X73,bool),X76,'type.list.list'(X73)))))) | p(s(bool,happ(s(fun('type.list.list'(X73),bool),sK16(X74,X75,X73,bool)),s('type.list.list'(X73),sK5(sK16(X74,X75,X73,bool),X76,'type.list.list'(X73))))))) )),
  inference(superposition,[],[f314,f356])).
fof(f6934,plain,(
  ( ! [X78,X79,X77] : (p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X77),sK5('const.pair.FST_0',X79,'type.pair.prod'(bool,X77)))))) | ~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X77),X78)))) | p(s(bool,happ(s(fun('type.pair.prod'(bool,X77),bool),X79),s('type.pair.prod'(bool,X77),sK6('const.pair.FST_0',X79,'type.pair.prod'(bool,X77))))))) )),
  inference(forward_demodulation,[],[f6906,f338])).
fof(f6906,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X77),X78)))) | p(s(bool,happ(s(fun('type.pair.prod'(bool,X77),bool),X79),s('type.pair.prod'(bool,X77),sK6('const.pair.FST_0',X79,'type.pair.prod'(bool,X77)))))) | p(s(bool,happ(s(fun('type.pair.prod'(bool,X77),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X77),sK5('const.pair.FST_0',X79,'type.pair.prod'(bool,X77))))))) )),
  inference(superposition,[],[f314,f338])).
fof(f7125,plain,(
  ( ! [X68,X69,X67] : (p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X67),sK6(X68,'const.pair.FST_0','type.pair.prod'(bool,X67)))))) | ~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X67),sK5(X68,'const.pair.FST_0','type.pair.prod'(bool,X67)))))) | ~p(s(bool,happ(s(fun('type.pair.prod'(bool,X67),bool),X68),s('type.pair.prod'(bool,X67),X69))))) )),
  inference(forward_demodulation,[],[f7101,f338])).
fof(f7101,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X67),sK5(X68,'const.pair.FST_0','type.pair.prod'(bool,X67)))))) | ~p(s(bool,happ(s(fun('type.pair.prod'(bool,X67),bool),X68),s('type.pair.prod'(bool,X67),X69)))) | p(s(bool,happ(s(fun('type.pair.prod'(bool,X67),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X67),sK6(X68,'const.pair.FST_0','type.pair.prod'(bool,X67))))))) )),
  inference(superposition,[],[f315,f338])).
fof(f2502,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,happ(s(fun('type.list.list'(X20),bool),happ(s(fun('type.num.num',fun('type.list.list'(X20),bool)),X22),s('type.num.num',X23))),s('type.list.list'(X20),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X20),bool),happ(s(fun('type.num.num',fun('type.list.list'(X20),bool)),X22),s('type.num.num',X23))),s('type.list.list'(X20),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X20),bool),X21),s(fun('type.num.num',fun('type.list.list'(X20),bool)),X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23)))),X20)))))) )),
  inference(forward_demodulation,[],[f2486,f318])).
fof(f2486,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,happ(s(fun('type.list.list'(X20),bool),happ(s(fun('type.num.num',fun('type.list.list'(X20),bool)),X22),s('type.num.num',X23))),s('type.list.list'(X20),sK2('const.ind_type.FCONS_3'(s(fun('type.list.list'(X20),bool),X21),s(fun('type.num.num',fun('type.list.list'(X20),bool)),X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23)))),X20))))) | ~p(s(bool,happ(s(fun('type.list.list'(X20),bool),'const.ind_type.FCONS_3'(s(fun('type.list.list'(X20),bool),X21),s(fun('type.num.num',fun('type.list.list'(X20),bool)),X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))))),s('type.list.list'(X20),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f318])).
fof(f6185,plain,(
  ( ! [X377,X379,X380,X376,X378,X375] : (p(s(bool,happ(s(fun('type.list.list'(X375),bool),happ(s(fun(X378,fun('type.list.list'(X375),bool)),'_dst_x0x1_2'(s(fun(X376,fun('type.list.list'(X375),bool)),X377),s(fun(X378,X376),X379))),s(X378,X380))),s('type.list.list'(X375),sK2(happ(s(fun(X376,fun('type.list.list'(X375),bool)),X377),s(X376,happ(s(fun(X378,X376),X379),s(X378,X380)))),X375))))) | ~p(s(bool,happ(s(fun('type.list.list'(X375),bool),happ(s(fun(X376,fun('type.list.list'(X375),bool)),X377),s(X376,happ(s(fun(X378,X376),X379),s(X378,X380))))),s('type.list.list'(X375),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f365])).
fof(f6263,plain,(
  ( ! [X358,X360,X362,X357,X359,X361] : (p(s(bool,happ(s(fun('type.list.list'(X357),bool),happ(s(fun(X359,fun('type.list.list'(X357),bool)),X360),s(X359,happ(s(fun(X358,X359),X361),s(X358,X362))))),s('type.list.list'(X357),sK2(happ(s(fun(X358,fun('type.list.list'(X357),bool)),'_dst_x0x1_2'(s(fun(X359,fun('type.list.list'(X357),bool)),X360),s(fun(X358,X359),X361))),s(X358,X362)),X357))))) | ~p(s(bool,happ(s(fun('type.list.list'(X357),bool),happ(s(fun(X358,fun('type.list.list'(X357),bool)),'_dst_x0x1_2'(s(fun(X359,fun('type.list.list'(X357),bool)),X360),s(fun(X358,X359),X361))),s(X358,X362))),s('type.list.list'(X357),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f365])).
fof(f6182,plain,(
  ( ! [X356,X358,X354,X360,X357,X359,X355] : (~p(s(bool,happ(s(fun(X354,bool),happ(s(fun(X357,fun(X354,bool)),'_dst_x0x1_2'(s(fun(X355,fun(X354,bool)),X356),s(fun(X357,X355),X358))),s(X357,X359))),s(X354,X360)))) | p(s(bool,happ(s(fun(X354,bool),happ(s(fun(X355,fun(X354,bool)),X356),s(X355,happ(s(fun(X357,X355),X358),s(X357,X359))))),s(X354,'const.min.@_1'(s(fun(X354,bool),happ(s(fun(X355,fun(X354,bool)),X356),s(X355,happ(s(fun(X357,X355),X358),s(X357,X359))))))))))) )),
  inference(superposition,[],[f311,f365])).
fof(f6181,plain,(
  ( ! [X350,X352,X349,X351,X347,X353,X348] : (~p(s(bool,happ(s(fun(X347,bool),happ(s(fun(X350,fun(X347,bool)),'_dst_x0x1_2'(s(fun(X348,fun(X347,bool)),X349),s(fun(X350,X348),X351))),s(X350,X352))),s(X347,X353)))) | p(s(bool,'|dollar|exists_1'(s(fun(X347,bool),happ(s(fun(X348,fun(X347,bool)),X349),s(X348,happ(s(fun(X350,X348),X351),s(X350,X352))))))))) )),
  inference(superposition,[],[f3805,f365])).
fof(f6260,plain,(
  ( ! [X341,X337,X339,X340,X342,X336,X338] : (~p(s(bool,happ(s(fun(X336,bool),happ(s(fun(X338,fun(X336,bool)),X339),s(X338,happ(s(fun(X337,X338),X340),s(X337,X341))))),s(X336,X342)))) | p(s(bool,happ(s(fun(X336,bool),happ(s(fun(X337,fun(X336,bool)),'_dst_x0x1_2'(s(fun(X338,fun(X336,bool)),X339),s(fun(X337,X338),X340))),s(X337,X341))),s(X336,'const.min.@_1'(s(fun(X336,bool),happ(s(fun(X337,fun(X336,bool)),'_dst_x0x1_2'(s(fun(X338,fun(X336,bool)),X339),s(fun(X337,X338),X340))),s(X337,X341))))))))) )),
  inference(superposition,[],[f311,f365])).
fof(f6259,plain,(
  ( ! [X333,X335,X329,X331,X332,X334,X330] : (~p(s(bool,happ(s(fun(X329,bool),happ(s(fun(X331,fun(X329,bool)),X332),s(X331,happ(s(fun(X330,X331),X333),s(X330,X334))))),s(X329,X335)))) | p(s(bool,'|dollar|exists_1'(s(fun(X329,bool),happ(s(fun(X330,fun(X329,bool)),'_dst_x0x1_2'(s(fun(X331,fun(X329,bool)),X332),s(fun(X330,X331),X333))),s(X330,X334))))))) )),
  inference(superposition,[],[f3805,f365])).
fof(f5822,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.list.list'(X31),bool),'_dst_x0x1_2'(s(fun(X32,bool),X34),s(fun('type.list.list'(X31),X32),X33))),s('type.list.list'(X31),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X31),bool),'_dst_x0x1_2'(s(fun(X32,bool),X34),s(fun('type.list.list'(X31),X32),X33))),s('type.list.list'(X31),sK2(happ(s(fun(fun(X32,bool),fun('type.list.list'(X31),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X31),X32),X33))),s(fun(X32,bool),X34)),X31)))))) )),
  inference(forward_demodulation,[],[f5802,f364])).
fof(f5802,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,happ(s(fun('type.list.list'(X31),bool),'_dst_x0x1_2'(s(fun(X32,bool),X34),s(fun('type.list.list'(X31),X32),X33))),s('type.list.list'(X31),sK2(happ(s(fun(fun(X32,bool),fun('type.list.list'(X31),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X31),X32),X33))),s(fun(X32,bool),X34)),X31))))) | ~p(s(bool,happ(s(fun('type.list.list'(X31),bool),happ(s(fun(fun(X32,bool),fun('type.list.list'(X31),bool)),'_dstsel_0_x01_1'(s(fun('type.list.list'(X31),X32),X33))),s(fun(X32,bool),X34))),s('type.list.list'(X31),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f364])).
fof(f6138,plain,(
  ( ! [X94,X97,X95,X93,X96] : (~p(s(bool,happ(s(fun(X95,bool),'_dst_x0x1_2'(s(fun(X93,bool),X94),s(fun(X95,X93),X96))),s(X95,X97)))) | p(s(bool,'|dollar|exists_1'(s(fun(X93,bool),X94))))) )),
  inference(superposition,[],[f3805,f365])).
fof(f6173,plain,(
  ( ! [X292,X294,X296,X293,X295,X291,X297] : (~p(s(bool,happ(s(fun(X293,bool),'_dst_x0x1_2'(s(fun(X291,bool),X292),s(fun(X293,X291),X294))),s(X293,X295)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X296),bool),sK16(X297,happ(s(fun(X291,bool),X292),s(X291,happ(s(fun(X293,X291),X294),s(X293,X295)))),X296,bool))))) )),
  inference(superposition,[],[f3944,f365])).
fof(f6176,plain,(
  ( ! [X313,X315,X310,X312,X314,X311] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X315,bool),'const.sum.INR_1'(s(bool,happ(s(fun(X312,bool),'_dst_x0x1_2'(s(fun(X310,bool),X311),s(fun(X312,X310),X313))),s(X312,X314))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X310,bool),X311),s(X310,happ(s(fun(X312,X310),X313),s(X312,X314)))))) )),
  inference(superposition,[],[f5495,f365])).
fof(f6177,plain,(
  ( ! [X321,X316,X318,X320,X317,X319] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X321),'const.sum.INL_1'(s(bool,happ(s(fun(X318,bool),'_dst_x0x1_2'(s(fun(X316,bool),X317),s(fun(X318,X316),X319))),s(X318,X320))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X316,bool),X317),s(X316,happ(s(fun(X318,X316),X319),s(X318,X320)))))) )),
  inference(superposition,[],[f5684,f365])).
fof(f2498,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun('type.list.list'(X6),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X6),bool),X7),X8))),s('type.list.list'(X6),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X6),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X6),bool),X7),X8))),s('type.list.list'(X6),sK2(happ(s(fun('type.pair.prod'(fun('type.list.list'(X6),bool),X7),fun('type.list.list'(X6),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X6),bool),X7),X8)),X6)))))) )),
  inference(forward_demodulation,[],[f2482,f338])).
fof(f2482,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun('type.list.list'(X6),bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.list.list'(X6),bool),X7),X8))),s('type.list.list'(X6),sK2(happ(s(fun('type.pair.prod'(fun('type.list.list'(X6),bool),X7),fun('type.list.list'(X6),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X6),bool),X7),X8)),X6))))) | ~p(s(bool,happ(s(fun('type.list.list'(X6),bool),happ(s(fun('type.pair.prod'(fun('type.list.list'(X6),bool),X7),fun('type.list.list'(X6),bool)),'const.pair.FST_0'),s('type.pair.prod'(fun('type.list.list'(X6),bool),X7),X8))),s('type.list.list'(X6),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f407,f338])).
fof(f1980,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,X26)) | p(s(bool,happ(s(fun('type.list.list'(X24),bool),sK16(X25,X26,X24,bool)),s('type.list.list'(X24),'const.min.@_1'(s(fun('type.list.list'(X24),bool),sK16(X25,X26,X24,bool)))))))) )),
  inference(superposition,[],[f311,f356])).
fof(f312,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK4(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : ((s(X0,X2) = s(X0,sK4(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,X1,X0)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(ennf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9] : ! [X21,X22] : (! [X19] : (s(X9,X19) = s(X9,X22) => p(s(bool,happ(s(fun(X9,bool),X21),s(X9,X19))))) => p(s(bool,'|dollar|exists_1'(s(fun(X9,bool),X21)))))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.JRH_INDUCT_UTIL')).
fof(f816,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) )),
  inference(superposition,[],[f312,f303])).
fof(f817,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),X6)))) | s(X3,X7) = s(X3,sK4(X7,'const.pair.SND_1'(s('type.pair.prod'(X4,fun(X3,bool)),'const.pair.,_2'(s(X4,X5),s(fun(X3,bool),X6)))),X3))) )),
  inference(superposition,[],[f312,f340])).
fof(f818,plain,(
  ( ! [X12,X10,X8,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),X10)))) | s(X8,X12) = s(X8,sK4(X12,'const.pair.FST_1'(s('type.pair.prod'(fun(X8,bool),X9),'const.pair.,_2'(s(fun(X8,bool),X10),s(X9,X11)))),X8))) )),
  inference(superposition,[],[f312,f341])).
fof(f819,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,'|dollar|exists_1'(s(fun(X13,bool),X14)))) | s(X13,X16) = s(X13,sK4(X16,'const.ind_type.FCONS_3'(s(fun(X13,bool),X14),s(fun('type.num.num',fun(X13,bool)),X15),s('type.num.num','const.num.|48|_0')),X13))) )),
  inference(superposition,[],[f312,f310])).
fof(f820,plain,(
  ( ! [X19,X17,X20,X18] : (p(s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19)))) | s(X17,X20) = s(X17,sK4(X20,'const.sum.OUTR_1'(s('type.sum.sum'(X18,fun(X17,bool)),'const.sum.INR_1'(s(fun(X17,bool),X19)))),X17))) )),
  inference(superposition,[],[f312,f337])).
fof(f821,plain,(
  ( ! [X24,X23,X21,X22] : (p(s(bool,'|dollar|exists_1'(s(fun(X21,bool),X23)))) | s(X21,X24) = s(X21,sK4(X24,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X21,bool),X22),'const.sum.INL_1'(s(fun(X21,bool),X23)))),X21))) )),
  inference(superposition,[],[f312,f336])).
fof(f903,plain,(
  ( ! [X90,X88,X87,X91,X89] : (p(s(bool,'|dollar|exists_1'(s(fun(X87,bool),X90)))) | s(X87,X91) = s(X87,sK4(X91,happ(s(fun('type.list.list'(X88),fun(X87,bool)),sK16(X89,X90,X88,fun(X87,bool))),s('type.list.list'(X88),'const.list.NIL_0')),X87))) )),
  inference(superposition,[],[f312,f356])).
fof(f3674,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))) | s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) )),
  inference(superposition,[],[f823,f303])).
fof(f3675,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X3,bool),X6))) | s(X3,X7) = s(X3,sK4(X7,happ(s(fun('type.list.list'(X4),fun(X3,bool)),sK16(X5,X6,X4,fun(X3,bool))),s('type.list.list'(X4),'const.list.NIL_0')),X3))) )),
  inference(superposition,[],[f823,f356])).
fof(f3677,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X12,bool),X15))) | s(X12,X16) = s(X12,sK4(X16,'const.pair.SND_1'(s('type.pair.prod'(X13,fun(X12,bool)),'const.pair.,_2'(s(X13,X14),s(fun(X12,bool),X15)))),X12))) )),
  inference(superposition,[],[f823,f340])).
fof(f3678,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X17,bool),X19))) | s(X17,X21) = s(X17,sK4(X21,'const.pair.FST_1'(s('type.pair.prod'(fun(X17,bool),X18),'const.pair.,_2'(s(fun(X17,bool),X19),s(X18,X20)))),X17))) )),
  inference(superposition,[],[f823,f341])).
fof(f3679,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X22,bool),X23))) | s(X22,X25) = s(X22,sK4(X25,'const.ind_type.FCONS_3'(s(fun(X22,bool),X23),s(fun('type.num.num',fun(X22,bool)),X24),s('type.num.num','const.num.|48|_0')),X22))) )),
  inference(superposition,[],[f823,f310])).
fof(f3681,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X31,bool),X33))) | s(X31,X34) = s(X31,sK4(X34,'const.sum.OUTR_1'(s('type.sum.sum'(X32,fun(X31,bool)),'const.sum.INR_1'(s(fun(X31,bool),X33)))),X31))) )),
  inference(superposition,[],[f823,f337])).
fof(f3682,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X35,bool),X37))) | s(X35,X38) = s(X35,sK4(X38,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X35,bool),X36),'const.sum.INL_1'(s(fun(X35,bool),X37)))),X35))) )),
  inference(superposition,[],[f823,f336])).
fof(f3683,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X39,bool),X40))) | s(X39,X42) = s(X39,sK4(X42,sK4(X40,X41,fun(X39,bool)),X39)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X39,bool),bool),X41)))) )),
  inference(superposition,[],[f823,f823])).
fof(f3740,plain,(
  ( ! [X149,X147,X150,X148] : (p(s(bool,'|dollar|exists_1'(s(fun(X147,bool),X148)))) | s(X147,X150) = s(X147,sK4(X150,sK4(X148,X149,fun(X147,bool)),X147)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X147,bool),bool),X149)))) )),
  inference(superposition,[],[f312,f823])).
fof(f3806,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X33)) | s(bool,X33) = s(bool,'|dollar|exists_1'(s(fun(X31,bool),X32))) | s(X31,X34) = s(X31,sK4(X34,X32,X31))) )),
  inference(subsumption_resolution,[],[f3763,f256])).
fof(f3763,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | s(bool,X33) = s(bool,'|dollar|exists_1'(s(fun(X31,bool),X32))) | s(X31,X34) = s(X31,sK4(X34,X32,X31))) )),
  inference(superposition,[],[f331,f823])).
fof(f3807,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X37) != s(bool,'|dollar|exists_1'(s(fun(X35,bool),X36))) | p(s(bool,X37)) | s(X35,X38) = s(X35,sK4(X38,X36,X35))) )),
  inference(subsumption_resolution,[],[f3764,f256])).
fof(f3764,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,'|dollar|exists_1'(s(fun(X35,bool),X36))) | p(s(bool,X37)) | s(X35,X38) = s(X35,sK4(X38,X36,X35))) )),
  inference(superposition,[],[f405,f823])).
fof(f2201,plain,(
  ( ! [X138,X136,X135,X139,X137] : (p(s(bool,'|dollar|exists_1'(s(fun(X135,bool),happ(s(fun('type.num.num',fun(X135,bool)),X137),s('type.num.num',X138)))))) | s(X135,X139) = s(X135,sK4(X139,'const.ind_type.FCONS_3'(s(fun(X135,bool),X136),s(fun('type.num.num',fun(X135,bool)),X137),s('type.num.num','const.num.SUC_1'(s('type.num.num',X138)))),X135))) )),
  inference(superposition,[],[f312,f318])).
fof(f3680,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X26,bool),happ(s(fun('type.num.num',fun(X26,bool)),X28),s('type.num.num',X29))))) | s(X26,X30) = s(X26,sK4(X30,'const.ind_type.FCONS_3'(s(fun(X26,bool),X27),s(fun('type.num.num',fun(X26,bool)),X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))),X26))) )),
  inference(superposition,[],[f823,f318])).
fof(f6261,plain,(
  ( ! [X344,X346,X343,X349,X345,X347,X348] : (p(s(bool,'|dollar|exists_1'(s(fun(X343,bool),happ(s(fun(X345,fun(X343,bool)),X346),s(X345,happ(s(fun(X344,X345),X347),s(X344,X348)))))))) | s(X343,X349) = s(X343,sK4(X349,happ(s(fun(X344,fun(X343,bool)),'_dst_x0x1_2'(s(fun(X345,fun(X343,bool)),X346),s(fun(X344,X345),X347))),s(X344,X348)),X343))) )),
  inference(superposition,[],[f312,f365])).
fof(f6183,plain,(
  ( ! [X364,X366,X362,X365,X367,X361,X363] : (p(s(bool,'|dollar|exists_1'(s(fun(X361,bool),happ(s(fun(X364,fun(X361,bool)),'_dst_x0x1_2'(s(fun(X362,fun(X361,bool)),X363),s(fun(X364,X362),X365))),s(X364,X366)))))) | s(X361,X367) = s(X361,sK4(X367,happ(s(fun(X362,fun(X361,bool)),X363),s(X362,happ(s(fun(X364,X362),X365),s(X364,X366)))),X361))) )),
  inference(superposition,[],[f312,f365])).
fof(f5801,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X26,bool),'_dst_x0x1_2'(s(fun(X27,bool),X29),s(fun(X26,X27),X28))))) | s(X26,X30) = s(X26,sK4(X30,happ(s(fun(fun(X27,bool),fun(X26,bool)),'_dstsel_0_x01_1'(s(fun(X26,X27),X28))),s(fun(X27,bool),X29)),X26))) )),
  inference(superposition,[],[f823,f364])).
fof(f5800,plain,(
  ( ! [X24,X23,X21,X25,X22] : (p(s(bool,'|dollar|exists_1'(s(fun(X21,bool),'_dst_x0x1_2'(s(fun(X22,bool),X24),s(fun(X21,X22),X23)))))) | s(X21,X25) = s(X21,sK4(X25,happ(s(fun(fun(X22,bool),fun(X21,bool)),'_dstsel_0_x01_1'(s(fun(X21,X22),X23))),s(fun(X22,bool),X24)),X21))) )),
  inference(superposition,[],[f312,f364])).
fof(f1575,plain,(
  ( ! [X90,X88,X87,X89] : (p(s(bool,'|dollar|exists_1'(s(fun(X87,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X87,bool),X88),X89)))))) | s(X87,X90) = s(X87,sK4(X90,happ(s(fun('type.pair.prod'(fun(X87,bool),X88),fun(X87,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X87,bool),X88),X89)),X87))) )),
  inference(superposition,[],[f312,f338])).
fof(f3676,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X8,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X8,bool),X9),X10))))) | s(X8,X11) = s(X8,sK4(X11,happ(s(fun('type.pair.prod'(fun(X8,bool),X9),fun(X8,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X8,bool),X9),X10)),X8))) )),
  inference(superposition,[],[f823,f338])).
fof(f3706,plain,(
  ( ! [X50,X49] : (p(s(bool,X49)) | s(bool,'T_0') != s(bool,sK4(X49,X50,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X50)))) )),
  inference(superposition,[],[f265,f823])).
fof(f3707,plain,(
  ( ! [X52,X51] : (~p(s(bool,X51)) | s(bool,'T_0') = s(bool,sK4(X51,X52,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X52)))) )),
  inference(superposition,[],[f266,f823])).
fof(f3710,plain,(
  ( ! [X59,X57,X58] : (p(s(bool,X57)) | p(s(bool,X59)) | s(bool,X59) = s(bool,sK4(X57,X58,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X58)))) )),
  inference(superposition,[],[f328,f823])).
fof(f3712,plain,(
  ( ! [X64,X65,X63] : (~p(s(bool,X63)) | ~p(s(bool,X65)) | s(bool,X65) = s(bool,sK4(X63,X64,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X64)))) )),
  inference(superposition,[],[f331,f823])).
fof(f3713,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,X66)) | s(bool,X68) != s(bool,sK4(X66,X67,bool)) | p(s(bool,X68)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X67)))) )),
  inference(superposition,[],[f405,f823])).
fof(f3718,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,X81)) | s(bool,X83) != s(bool,sK4(X81,X82,bool)) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X82)))) )),
  inference(superposition,[],[f434,f823])).
fof(f3720,plain,(
  ( ! [X88,X87,X86] : (p(s(bool,X86)) | s(bool,X88) = s(bool,sK4(X86,X87,bool)) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X87)))) )),
  inference(superposition,[],[f481,f823])).
fof(f4964,plain,(
  ( ! [X138,X136,X135,X137] : (~p(s(bool,X135)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X137),bool),sK16(X138,sK4(X135,X136,bool),X137,bool)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X136)))) )),
  inference(superposition,[],[f3944,f823])).
fof(f3742,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s(fun(X154,X155),X156) != s(fun(X154,X155),X158) | s(X155,happ(s(fun(X154,X155),X158),s(X154,X159))) = s(X155,happ(s(fun(X154,X155),sK4(X156,X157,fun(X154,X155))),s(X154,X159))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X154,X155),bool),X157)))) )),
  inference(superposition,[],[f351,f823])).
fof(f3959,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X58),X59),s(fun(X58,X57),X61)))) | s(X58,X62) = s(X58,happ(s(fun(X57,X58),sK4(X59,X60,fun(X57,X58))),s(X57,happ(s(fun(X58,X57),X61),s(X58,X62))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X57,X58),bool),X60)))) )),
  inference(superposition,[],[f353,f823])).
fof(f3969,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X61),s(fun(X57,X58),X59)))) | s(X57,X62) = s(X57,happ(s(fun(X58,X57),X61),s(X58,happ(s(fun(X57,X58),sK4(X59,X60,fun(X57,X58))),s(X57,X62))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X57,X58),bool),X60)))) )),
  inference(superposition,[],[f353,f823])).
fof(f4158,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X57,X58),X59),s(fun(X58,X57),X61)))) | s(X57,X62) = s(X57,happ(s(fun(X58,X57),X61),s(X58,happ(s(fun(X57,X58),sK4(X59,X60,fun(X57,X58))),s(X57,X62))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X57,X58),bool),X60)))) )),
  inference(superposition,[],[f354,f823])).
fof(f4168,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X58,X57),X61),s(fun(X57,X58),X59)))) | s(X58,X62) = s(X58,happ(s(fun(X57,X58),sK4(X59,X60,fun(X57,X58))),s(X57,happ(s(fun(X58,X57),X61),s(X58,X62))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X57,X58),bool),X60)))) )),
  inference(superposition,[],[f354,f823])).
fof(f7302,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(X71,happ(s(fun(X70,X71),X72),s(X70,sK13(X74,sK4(X72,X73,fun(X70,X71)),X70,X71)))) != s(X71,happ(s(fun(X70,X71),X74),s(X70,sK13(X74,sK4(X72,X73,fun(X70,X71)),X70,X71)))) | s(fun(X70,X71),X74) = s(fun(X70,X71),sK4(X72,X73,fun(X70,X71))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X70,X71),bool),X73)))) )),
  inference(superposition,[],[f352,f823])).
fof(f7336,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(X71,happ(s(fun(X70,X71),X72),s(X70,sK13(sK4(X72,X73,fun(X70,X71)),X74,X70,X71)))) != s(X71,happ(s(fun(X70,X71),X74),s(X70,sK13(sK4(X72,X73,fun(X70,X71)),X74,X70,X71)))) | s(fun(X70,X71),X74) = s(fun(X70,X71),sK4(X72,X73,fun(X70,X71))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X70,X71),bool),X73)))) )),
  inference(superposition,[],[f352,f823])).
fof(f7613,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X94,X95),X96),s(fun(X95,X94),X98)))) | s(X94,X99) != s(X94,happ(s(fun(X95,X94),X98),s(X95,X100))) | s(X95,X100) = s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,X99))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f348,f823])).
fof(f7626,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X94),X98),s(fun(X94,X95),X96)))) | s(X95,X99) != s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,X100))) | s(X94,X100) = s(X94,happ(s(fun(X95,X94),X98),s(X95,X99))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f348,f823])).
fof(f8362,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X94,X95),X96),s(fun(X95,X94),X98)))) | s(X95,X99) != s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,X100))) | s(X94,X100) = s(X94,happ(s(fun(X95,X94),X98),s(X95,X99))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f349,f823])).
fof(f8375,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X95,X94),X98),s(fun(X94,X95),X96)))) | s(X94,X99) != s(X94,happ(s(fun(X95,X94),X98),s(X95,X100))) | s(X95,X100) = s(X95,happ(s(fun(X94,X95),sK4(X96,X97,fun(X94,X95))),s(X94,X99))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X94,X95),bool),X97)))) )),
  inference(superposition,[],[f349,f823])).
fof(f3747,plain,(
  ( ! [X177,X175,X176] : (s('type.integer.int',X175) != s('type.integer.int',X177) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X177))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4(X175,X176,'type.integer.int')))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.integer.int',bool),X176)))) )),
  inference(superposition,[],[f333,f823])).
fof(f3944,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,X6)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X4),bool),sK16(X5,X6,X4,bool))))) )),
  inference(subsumption_resolution,[],[f3933,f258])).
fof(f3933,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | ~p(s(bool,X6)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X4),bool),sK16(X5,X6,X4,bool))))) )),
  inference(superposition,[],[f3904,f264])).
fof(f3904,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X43),bool),sK16(X44,X45,X43,bool))))) | ~p(s(bool,X45))) )),
  inference(superposition,[],[f3805,f356])).
fof(f4955,plain,(
  ( ! [X97,X98,X96] : (~p(s(bool,X96)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X97),bool),sK16(X98,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X96)),X97,bool))))) )),
  inference(superposition,[],[f3944,f303])).
fof(f4956,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,X101)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X102),bool),sK16(X103,happ(s(fun('type.list.list'(X99),bool),sK16(X100,X101,X99,bool)),s('type.list.list'(X99),'const.list.NIL_0')),X102,bool))))) )),
  inference(superposition,[],[f3944,f356])).
fof(f4957,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X104),X105)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X106),bool),sK16(X107,happ(s(fun('type.pair.prod'(bool,X104),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X104),X105)),X106,bool))))) )),
  inference(superposition,[],[f3944,f338])).
fof(f4958,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~p(s(bool,X110)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X111),bool),sK16(X112,'const.pair.SND_1'(s('type.pair.prod'(X108,bool),'const.pair.,_2'(s(X108,X109),s(bool,X110)))),X111,bool))))) )),
  inference(superposition,[],[f3944,f340])).
fof(f4959,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,X114)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X116),bool),sK16(X117,'const.pair.FST_1'(s('type.pair.prod'(bool,X113),'const.pair.,_2'(s(bool,X114),s(X113,X115)))),X116,bool))))) )),
  inference(superposition,[],[f3944,f341])).
fof(f4960,plain,(
  ( ! [X121,X118,X120,X119] : (~p(s(bool,X118)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X120),bool),sK16(X121,'const.ind_type.FCONS_3'(s(bool,X118),s(fun('type.num.num',bool),X119),s('type.num.num','const.num.|48|_0')),X120,bool))))) )),
  inference(superposition,[],[f3944,f310])).
fof(f4962,plain,(
  ( ! [X127,X130,X128,X129] : (~p(s(bool,X128)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X129),bool),sK16(X130,'const.sum.OUTR_1'(s('type.sum.sum'(X127,bool),'const.sum.INR_1'(s(bool,X128)))),X129,bool))))) )),
  inference(superposition,[],[f3944,f337])).
fof(f4963,plain,(
  ( ! [X134,X132,X133,X131] : (~p(s(bool,X132)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X133),bool),sK16(X134,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X131),'const.sum.INL_1'(s(bool,X132)))),X133,bool))))) )),
  inference(superposition,[],[f3944,f336])).
fof(f1543,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X0),X1))) | s(bool,X2) = s(bool,happ(s(fun('type.pair.prod'(bool,X0),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X0),X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f338,f432])).
fof(f1545,plain,(
  ( ! [X6,X8,X7] : (s(bool,X8) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X6),X7))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X6),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X6),X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f338,f432])).
fof(f2004,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X27),X28)))) | p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X27),'const.min.@_1'(s(fun('type.pair.prod'(bool,X27),bool),'const.pair.FST_0'))))))) )),
  inference(forward_demodulation,[],[f1981,f338])).
fof(f1981,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X27),X28)))) | p(s(bool,happ(s(fun('type.pair.prod'(bool,X27),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X27),'const.min.@_1'(s(fun('type.pair.prod'(bool,X27),bool),'const.pair.FST_0'))))))) )),
  inference(superposition,[],[f311,f338])).
fof(f5734,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X87,bool),'const.sum.INR_1'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X85),X86))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X85),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X85),X86)))) )),
  inference(superposition,[],[f5495,f338])).
fof(f5976,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X87),'const.sum.INL_1'(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X85),X86))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'(bool,X85),bool),'const.pair.FST_0'),s('type.pair.prod'(bool,X85),X86)))) )),
  inference(superposition,[],[f5684,f338])).
fof(f348,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) | s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4)))) )),
  inference(cnf_transformation,[],[f240])).
fof(f349,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X3),s(fun(X1,X0),X2)))) | s(X1,X5) != s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))) | s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f240])).
fof(f353,plain,(
  ( ! [X2,X0,X7,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | s(X0,X7) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X7)))))) )),
  inference(cnf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | (! [X7] : s(X0,X7) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X7))))) & ! [X6] : s(X1,X6) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6))))))) & (s(X0,sK14(X3,X2,X1,X0)) != s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,sK14(X3,X2,X1,X0)))))) | s(X1,sK15(X3,X2,X1,X0)) != s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK15(X3,X2,X1,X0)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15])],[f247])).
fof(f247,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | (! [X7] : s(X0,X7) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X7))))) & ! [X6] : s(X1,X6) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6))))))) & (? [X5] : s(X0,X5) != s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) | ? [X4] : s(X1,X4) != s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3))))))),
  inference(rectify,[],[f246])).
fof(f246,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | (! [X5] : s(X0,X5) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) & ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (? [X5] : s(X0,X5) != s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) | ? [X4] : s(X1,X4) != s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3))))))),
  inference(flattening,[],[f245])).
fof(f245,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | (! [X5] : s(X0,X5) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) & ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & ((? [X5] : s(X0,X5) != s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) | ? [X4] : s(X1,X4) != s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3))))))),
  inference(nnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) <=> (! [X5] : s(X0,X5) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) & ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) <=> (! [X5] : s(X0,X5) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X5))))) & ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X18,X9] : ! [X10,X40] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X18),X10),s(fun(X18,X9),X40)))) <=> (! [X19] : s(X18,X19) = s(X18,happ(s(fun(X9,X18),X10),s(X9,happ(s(fun(X18,X9),X40),s(X18,X19))))) & ! [X20] : s(X9,X20) = s(X9,happ(s(fun(X18,X9),X40),s(X18,happ(s(fun(X9,X18),X10),s(X9,X20)))))))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.ISO')).
fof(f354,plain,(
  ( ! [X6,X2,X0,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | s(X1,X6) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6)))))) )),
  inference(cnf_transformation,[],[f248])).
fof(f355,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X1,X0),X2),s(fun(X0,X1),X3)))) | s(X1,sK15(X3,X2,X1,X0)) != s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK15(X3,X2,X1,X0)))))) | s(X0,sK14(X3,X2,X1,X0)) != s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,sK14(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f248])).
fof(f391,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X7),s(fun(X3,X2),X6)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X5),s(fun(X1,X0),X4)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X2,X0),fun(X3,X1)),'_dst_x00x11_2'(s(fun(X0,X1),X5),s(fun(fun(X2,X0),fun(X3,X0)),'_dstsel_0_x01_1'(s(fun(X3,X2),X6))))),s(fun(fun(X3,X1),fun(X2,X0)),'_dst_x00x11_2'(s(fun(X1,X0),X4),s(fun(fun(X3,X1),fun(X2,X1)),'_dstsel_0_x01_1'(s(fun(X2,X3),X7))))))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X7),s(fun(X3,X2),X6)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X5),s(fun(X1,X0),X4)))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X2,X0),fun(X3,X1)),'_dst_x00x11_2'(s(fun(X0,X1),X5),s(fun(fun(X2,X0),fun(X3,X0)),'_dstsel_0_x01_1'(s(fun(X3,X2),X6))))),s(fun(fun(X3,X1),fun(X2,X0)),'_dst_x00x11_2'(s(fun(X1,X0),X4),s(fun(fun(X3,X1),fun(X2,X1)),'_dstsel_0_x01_1'(s(fun(X2,X3),X7)))))))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X7),s(fun(X3,X2),X6)))) | ~p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X5),s(fun(X1,X0),X4))))) | p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X2,X0),fun(X3,X1)),'_dst_x00x11_2'(s(fun(X0,X1),X5),s(fun(fun(X2,X0),fun(X3,X0)),'_dstsel_0_x01_1'(s(fun(X3,X2),X6))))),s(fun(fun(X3,X1),fun(X2,X0)),'_dst_x00x11_2'(s(fun(X1,X0),X4),s(fun(fun(X3,X1),fun(X2,X1)),'_dstsel_0_x01_1'(s(fun(X2,X3),X7)))))))))),
  inference(ennf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X7),s(fun(X3,X2),X6)))) & p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X5),s(fun(X1,X0),X4))))) => p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X2,X0),fun(X3,X1)),'_dst_x00x11_2'(s(fun(X0,X1),X5),s(fun(fun(X2,X0),fun(X3,X0)),'_dstsel_0_x01_1'(s(fun(X3,X2),X6))))),s(fun(fun(X3,X1),fun(X2,X0)),'_dst_x00x11_2'(s(fun(X1,X0),X4),s(fun(fun(X3,X1),fun(X2,X1)),'_dstsel_0_x01_1'(s(fun(X2,X3),X7)))))))))),
  inference(flattening,[],[f170])).
fof(f170,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : ((p(s(bool,'const.ind_type.ISO_2'(s(fun(X2,X3),X7),s(fun(X3,X2),X6)))) & p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X1),X5),s(fun(X1,X0),X4))))) => p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X2,X0),fun(X3,X1)),'_dst_x00x11_2'(s(fun(X0,X1),X5),s(fun(fun(X2,X0),fun(X3,X0)),'_dstsel_0_x01_1'(s(fun(X3,X2),X6))))),s(fun(fun(X3,X1),fun(X2,X0)),'_dst_x00x11_2'(s(fun(X1,X0),X4),s(fun(fun(X3,X1),fun(X2,X1)),'_dstsel_0_x01_1'(s(fun(X2,X3),X7)))))))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X18,X45,X9,X46] : ! [X47,X40,X48,X10] : ((p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X46),X10),s(fun(X46,X9),X48)))) & p(s(bool,'const.ind_type.ISO_2'(s(fun(X18,X45),X40),s(fun(X45,X18),X47))))) => p(s(bool,'const.ind_type.ISO_2'(s(fun(fun(X9,X18),fun(X46,X45)),'_dst_x00x11_2'(s(fun(X18,X45),X40),s(fun(fun(X9,X18),fun(X46,X18)),'_dstsel_0_x01_1'(s(fun(X46,X9),X48))))),s(fun(fun(X46,X45),fun(X9,X18)),'_dst_x00x11_2'(s(fun(X45,X18),X47),s(fun(fun(X46,X45),fun(X9,X45)),'_dstsel_0_x01_1'(s(fun(X9,X46),X10)))))))))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.ISO_FUN')).
fof(f4002,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s(X8,X11) = s(X8,happ(s(fun(X7,X8),X9),s(X7,happ(s(fun(X8,X7),X10),s(X8,X11))))) | s(bool,X12) = s(bool,'const.ind_type.ISO_2'(s(fun(X7,X8),X9),s(fun(X8,X7),X10))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f3972,f256])).
fof(f3972,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | s(X8,X11) = s(X8,happ(s(fun(X7,X8),X9),s(X7,happ(s(fun(X8,X7),X10),s(X8,X11))))) | s(bool,X12) = s(bool,'const.ind_type.ISO_2'(s(fun(X7,X8),X9),s(fun(X8,X7),X10))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f353,f432])).
fof(f4201,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s(X7,X11) = s(X7,happ(s(fun(X8,X7),X10),s(X8,happ(s(fun(X7,X8),X9),s(X7,X11))))) | s(bool,X12) = s(bool,'const.ind_type.ISO_2'(s(fun(X7,X8),X9),s(fun(X8,X7),X10))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f4171,f256])).
fof(f4171,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | s(X7,X11) = s(X7,happ(s(fun(X8,X7),X10),s(X8,happ(s(fun(X7,X8),X9),s(X7,X11))))) | s(bool,X12) = s(bool,'const.ind_type.ISO_2'(s(fun(X7,X8),X9),s(fun(X8,X7),X10))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f354,f432])).
fof(f6189,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X409,X408),X415),s(fun(X408,X409),happ(s(fun(X412,fun(X408,X409)),'_dst_x0x1_2'(s(fun(X410,fun(X408,X409)),X411),s(fun(X412,X410),X413))),s(X412,X414)))))) | s(X408,X416) = s(X408,happ(s(fun(X409,X408),X415),s(X409,happ(s(fun(X408,X409),happ(s(fun(X410,fun(X408,X409)),X411),s(X410,happ(s(fun(X412,X410),X413),s(X412,X414))))),s(X408,X416)))))) )),
  inference(superposition,[],[f353,f365])).
fof(f6191,plain,(
  ( ! [X428,X430,X426,X432,X434,X429,X431,X427,X433] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X427,X426),X433),s(fun(X426,X427),happ(s(fun(X430,fun(X426,X427)),'_dst_x0x1_2'(s(fun(X428,fun(X426,X427)),X429),s(fun(X430,X428),X431))),s(X430,X432)))))) | s(X427,X434) = s(X427,happ(s(fun(X426,X427),happ(s(fun(X428,fun(X426,X427)),X429),s(X428,happ(s(fun(X430,X428),X431),s(X430,X432))))),s(X426,happ(s(fun(X427,X426),X433),s(X427,X434)))))) )),
  inference(superposition,[],[f354,f365])).
fof(f7616,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20)))))) | s(X15,X22) != s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))) | s(X14,X23) = s(X14,happ(s(fun(X15,X14),X21),s(X15,X22)))) )),
  inference(superposition,[],[f348,f365])).
fof(f8365,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X15,X14),X21),s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20)))))) | s(X14,X22) != s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))) | s(X15,X23) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X22)))) )),
  inference(superposition,[],[f349,f365])).
fof(f6267,plain,(
  ( ! [X391,X397,X393,X395,X390,X396,X398,X392,X394] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X391,X390),X397),s(fun(X390,X391),happ(s(fun(X393,fun(X390,X391)),X394),s(X393,happ(s(fun(X392,X393),X395),s(X392,X396)))))))) | s(X390,X398) = s(X390,happ(s(fun(X391,X390),X397),s(X391,happ(s(fun(X390,X391),happ(s(fun(X392,fun(X390,X391)),'_dst_x0x1_2'(s(fun(X393,fun(X390,X391)),X394),s(fun(X392,X393),X395))),s(X392,X396))),s(X390,X398)))))) )),
  inference(superposition,[],[f353,f365])).
fof(f6269,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X409,X408),X415),s(fun(X408,X409),happ(s(fun(X411,fun(X408,X409)),X412),s(X411,happ(s(fun(X410,X411),X413),s(X410,X414)))))))) | s(X409,X416) = s(X409,happ(s(fun(X408,X409),happ(s(fun(X410,fun(X408,X409)),'_dst_x0x1_2'(s(fun(X411,fun(X408,X409)),X412),s(fun(X410,X411),X413))),s(X410,X414))),s(X408,happ(s(fun(X409,X408),X415),s(X409,X416)))))) )),
  inference(superposition,[],[f354,f365])).
fof(f7617,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X25,X24),X31),s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30)))))))) | s(X25,X32) != s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))) | s(X24,X33) = s(X24,happ(s(fun(X25,X24),X31),s(X25,X32)))) )),
  inference(superposition,[],[f348,f365])).
fof(f8366,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X25,X24),X31),s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30)))))))) | s(X24,X32) != s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))) | s(X25,X33) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X32)))) )),
  inference(superposition,[],[f349,f365])).
fof(f6188,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X399,X400),happ(s(fun(X403,fun(X399,X400)),'_dst_x0x1_2'(s(fun(X401,fun(X399,X400)),X402),s(fun(X403,X401),X404))),s(X403,X405))),s(fun(X400,X399),X406)))) | s(X400,X407) = s(X400,happ(s(fun(X399,X400),happ(s(fun(X401,fun(X399,X400)),X402),s(X401,happ(s(fun(X403,X401),X404),s(X403,X405))))),s(X399,happ(s(fun(X400,X399),X406),s(X400,X407)))))) )),
  inference(superposition,[],[f353,f365])).
fof(f6190,plain,(
  ( ! [X420,X422,X418,X424,X421,X423,X417,X419,X425] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X417,X418),happ(s(fun(X421,fun(X417,X418)),'_dst_x0x1_2'(s(fun(X419,fun(X417,X418)),X420),s(fun(X421,X419),X422))),s(X421,X423))),s(fun(X418,X417),X424)))) | s(X417,X425) = s(X417,happ(s(fun(X418,X417),X424),s(X418,happ(s(fun(X417,X418),happ(s(fun(X419,fun(X417,X418)),X420),s(X419,happ(s(fun(X421,X419),X422),s(X421,X423))))),s(X417,X425)))))) )),
  inference(superposition,[],[f354,f365])).
fof(f7603,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | s(X14,X22) != s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))) | s(X15,X23) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X22)))) )),
  inference(superposition,[],[f348,f365])).
fof(f8352,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X14,X15),happ(s(fun(X18,fun(X14,X15)),'_dst_x0x1_2'(s(fun(X16,fun(X14,X15)),X17),s(fun(X18,X16),X19))),s(X18,X20))),s(fun(X15,X14),X21)))) | s(X15,X22) != s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))) | s(X14,X23) = s(X14,happ(s(fun(X15,X14),X21),s(X15,X22)))) )),
  inference(superposition,[],[f349,f365])).
fof(f6266,plain,(
  ( ! [X383,X389,X385,X387,X382,X388,X384,X386,X381] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X381,X382),happ(s(fun(X384,fun(X381,X382)),X385),s(X384,happ(s(fun(X383,X384),X386),s(X383,X387))))),s(fun(X382,X381),X388)))) | s(X382,X389) = s(X382,happ(s(fun(X381,X382),happ(s(fun(X383,fun(X381,X382)),'_dst_x0x1_2'(s(fun(X384,fun(X381,X382)),X385),s(fun(X383,X384),X386))),s(X383,X387))),s(X381,happ(s(fun(X382,X381),X388),s(X382,X389)))))) )),
  inference(superposition,[],[f353,f365])).
fof(f6268,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X399,X400),happ(s(fun(X402,fun(X399,X400)),X403),s(X402,happ(s(fun(X401,X402),X404),s(X401,X405))))),s(fun(X400,X399),X406)))) | s(X399,X407) = s(X399,happ(s(fun(X400,X399),X406),s(X400,happ(s(fun(X399,X400),happ(s(fun(X401,fun(X399,X400)),'_dst_x0x1_2'(s(fun(X402,fun(X399,X400)),X403),s(fun(X401,X402),X404))),s(X401,X405))),s(X399,X407)))))) )),
  inference(superposition,[],[f354,f365])).
fof(f7604,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(fun(X25,X24),X31)))) | s(X24,X32) != s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))) | s(X25,X33) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X32)))) )),
  inference(superposition,[],[f348,f365])).
fof(f8353,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'const.ind_type.ISO_2'(s(fun(X24,X25),happ(s(fun(X27,fun(X24,X25)),X28),s(X27,happ(s(fun(X26,X27),X29),s(X26,X30))))),s(fun(X25,X24),X31)))) | s(X25,X32) != s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))) | s(X24,X33) = s(X24,happ(s(fun(X25,X24),X31),s(X25,X32)))) )),
  inference(superposition,[],[f349,f365])).
fof(f8808,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X104),bool),sK16(X105,'|dollar|exists_1'(s(fun('type.list.list'(X102),bool),sK16(X103,sK6('_i_0_0','_i_0_0',bool),X102,bool))),X104,bool))))) ) | $spl28),
  inference(subsumption_resolution,[],[f8758,f256])).
fof(f8758,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X104),bool),sK16(X105,'|dollar|exists_1'(s(fun('type.list.list'(X102),bool),sK16(X103,sK6('_i_0_0','_i_0_0',bool),X102,bool))),X104,bool))))) ) | $spl28),
  inference(superposition,[],[f3944,f7246])).
fof(f8803,plain,(
  ( ! [X39,X41,X40] : (s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X39),bool),sK16(X40,sK6('_i_0_0','_i_0_0',bool),X39,bool)))) | s(bool,'T_0') = s(bool,X41)) ) | $spl28),
  inference(subsumption_resolution,[],[f8735,f256])).
fof(f8735,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X39),bool),sK16(X40,sK6('_i_0_0','_i_0_0',bool),X39,bool)))) | s(bool,'T_0') = s(bool,X41)) ) | $spl28),
  inference(superposition,[],[f434,f7246])).
fof(f8640,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X104),bool),sK16(X105,'|dollar|exists_1'(s(fun('type.list.list'(X102),bool),sK16(X103,sK5('_i_0_0','_i_0_0',bool),X102,bool))),X104,bool))))) ) | $spl28),
  inference(subsumption_resolution,[],[f8590,f256])).
fof(f8590,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X104),bool),sK16(X105,'|dollar|exists_1'(s(fun('type.list.list'(X102),bool),sK16(X103,sK5('_i_0_0','_i_0_0',bool),X102,bool))),X104,bool))))) ) | $spl28),
  inference(superposition,[],[f3944,f7017])).
fof(f8635,plain,(
  ( ! [X39,X41,X40] : (s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X39),bool),sK16(X40,sK5('_i_0_0','_i_0_0',bool),X39,bool)))) | s(bool,'T_0') = s(bool,X41)) ) | $spl28),
  inference(subsumption_resolution,[],[f8567,f256])).
fof(f8567,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X39),bool),sK16(X40,sK5('_i_0_0','_i_0_0',bool),X39,bool)))) | s(bool,'T_0') = s(bool,X41)) ) | $spl28),
  inference(superposition,[],[f434,f7017])).
fof(f8411,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(X10,X13) != s(X10,happ(s(fun(X9,X10),X11),s(X9,X14))) | s(X9,X14) = s(X9,happ(s(fun(X10,X9),X12),s(X10,X13))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f8378,f256])).
fof(f8378,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | s(X10,X13) != s(X10,happ(s(fun(X9,X10),X11),s(X9,X14))) | s(X9,X14) = s(X9,happ(s(fun(X10,X9),X12),s(X10,X13))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f349,f432])).
fof(f7661,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(X9,X13) != s(X9,happ(s(fun(X10,X9),X12),s(X10,X14))) | s(X10,X14) = s(X10,happ(s(fun(X9,X10),X11),s(X9,X13))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f7629,f256])).
fof(f7629,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | s(X9,X13) != s(X9,happ(s(fun(X10,X9),X12),s(X10,X14))) | s(X10,X14) = s(X10,happ(s(fun(X9,X10),X11),s(X9,X13))) | s(bool,X15) = s(bool,'const.ind_type.ISO_2'(s(fun(X9,X10),X11),s(fun(X10,X9),X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f348,f432])).
fof(f7660,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X2))) | s(X0,X2) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(subsumption_resolution,[],[f7627,f256])).
fof(f7627,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) != s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X2))) | s(X0,X2) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(superposition,[],[f348,f427])).
fof(f7590,plain,(
  ( ! [X78,X77] : (s(bool,'T_0') != s(bool,X77) | s(bool,'T_0') = s(bool,sK4(X77,X78,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X78)))) ) | $spl28),
  inference(forward_demodulation,[],[f7541,f7015])).
fof(f7541,plain,(
  ( ! [X78,X77] : (s(bool,X77) != s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,sK4(X77,X78,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X78)))) ) | $spl28),
  inference(superposition,[],[f7212,f823])).
fof(f7486,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl28),
  inference(subsumption_resolution,[],[f7428,f256])).
fof(f7428,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl28),
  inference(superposition,[],[f434,f7244])).
fof(f7369,plain,(
  ( ! [X66,X65] : (s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X65),s('type.list.list'('type.closSem.v'),sK13(happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X65)),X66,'type.list.list'('type.closSem.v'),'type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),X66),s('type.list.list'('type.closSem.v'),sK13(happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X65)),X66,'type.list.list'('type.closSem.v'),'type.closSem.v')))) | s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),X66) = s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X65)))) )),
  inference(superposition,[],[f352,f327])).
fof(f7368,plain,(
  ( ! [X64] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK13('const.closSem.Word64_0',X64,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),X64),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK13('const.closSem.Word64_0',X64,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v')))) | s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0') = s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),X64)) )),
  inference(superposition,[],[f352,f263])).
fof(f7367,plain,(
  ( ! [X63] : (s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK13('const.closSem.RefPtr_0',X63,'type.num.num','type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),X63),s('type.num.num',sK13('const.closSem.RefPtr_0',X63,'type.num.num','type.closSem.v')))) | s(fun('type.num.num','type.closSem.v'),'const.closSem.RefPtr_0') = s(fun('type.num.num','type.closSem.v'),X63)) )),
  inference(superposition,[],[f352,f261])).
fof(f7366,plain,(
  ( ! [X62] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK13('const.closSem.Number_0',X62,'type.integer.int','type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.integer.int','type.closSem.v'),X62),s('type.integer.int',sK13('const.closSem.Number_0',X62,'type.integer.int','type.closSem.v')))) | s(fun('type.integer.int','type.closSem.v'),'const.closSem.Number_0') = s(fun('type.integer.int','type.closSem.v'),X62)) )),
  inference(superposition,[],[f352,f260])).
fof(f7365,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(fun(X57,X58),'_dst_x0x1_2'(s(fun(X59,X58),sK13('_dstsel_0_x01_1'(s(fun(X57,X59),X60)),X61,fun(X59,X58),fun(X57,X58))),s(fun(X57,X59),X60))) != s(fun(X57,X58),happ(s(fun(fun(X59,X58),fun(X57,X58)),X61),s(fun(X59,X58),sK13('_dstsel_0_x01_1'(s(fun(X57,X59),X60)),X61,fun(X59,X58),fun(X57,X58))))) | s(fun(fun(X59,X58),fun(X57,X58)),X61) = s(fun(fun(X59,X58),fun(X57,X58)),'_dstsel_0_x01_1'(s(fun(X57,X59),X60)))) )),
  inference(superposition,[],[f352,f364])).
fof(f7355,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,X22) != s(bool,happ(s(fun(X19,bool),X21),s(X19,sK13(X20,X21,X19,bool)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,happ(s(fun(X19,bool),X20),s(X19,sK13(X20,X21,X19,bool))))) )),
  inference(superposition,[],[f352,f432])).
fof(f7354,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X15,bool),X17),s(X15,sK13(X16,X17,X15,bool)))) | s(fun(X15,bool),X16) = s(fun(X15,bool),X17) | s(bool,X18) = s(bool,happ(s(fun(X15,bool),X16),s(X15,sK13(X16,X17,X15,bool)))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f352,f432])).
fof(f7351,plain,(
  ( ! [X10,X8,X9] : (s(X8,'const.pair.FST_1'(s('type.pair.prod'(X8,X9),sK13('const.pair.FST_0',X10,'type.pair.prod'(X8,X9),X8)))) != s(X8,happ(s(fun('type.pair.prod'(X8,X9),X8),X10),s('type.pair.prod'(X8,X9),sK13('const.pair.FST_0',X10,'type.pair.prod'(X8,X9),X8)))) | s(fun('type.pair.prod'(X8,X9),X8),'const.pair.FST_0') = s(fun('type.pair.prod'(X8,X9),X8),X10)) )),
  inference(superposition,[],[f352,f338])).
fof(f7350,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s(X2,happ(s(fun(X3,X2),X7),s(X3,sK13('_dst_x0x1_2'(s(fun(X4,X2),X5),s(fun(X3,X4),X6)),X7,X3,X2)))) != s(X2,happ(s(fun(X4,X2),X5),s(X4,happ(s(fun(X3,X4),X6),s(X3,sK13('_dst_x0x1_2'(s(fun(X4,X2),X5),s(fun(X3,X4),X6)),X7,X3,X2)))))) | s(fun(X3,X2),X7) = s(fun(X3,X2),'_dst_x0x1_2'(s(fun(X4,X2),X5),s(fun(X3,X4),X6)))) )),
  inference(superposition,[],[f352,f365])).
fof(f7349,plain,(
  ( ! [X0,X1] : (s(X0,sK13('_i_0_0',X1,X0,X0)) != s(X0,happ(s(fun(X0,X0),X1),s(X0,sK13('_i_0_0',X1,X0,X0)))) | s(fun(X0,X0),'_i_0_0') = s(fun(X0,X0),X1)) )),
  inference(superposition,[],[f352,f303])).
fof(f7339,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,happ(s(fun(bool,X9),X7),s(bool,X10))) != s(X9,happ(s(fun(bool,X9),X8),s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK13(X7,X8,bool,X9))) )),
  inference(superposition,[],[f352,f432])).
fof(f7338,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,happ(s(fun(bool,X5),X3),s(bool,'T_0'))) != s(X5,happ(s(fun(bool,X5),X4),s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK13(X3,X4,bool,X5)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f352,f432])).
fof(f7393,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(fun(X65,X66),X68) = s(fun(X65,X66),X69) | s(X66,happ(s(fun(X65,X66),X68),s(X65,sK13('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X69,X65,X66)))) != s(X66,happ(s(fun(X65,X66),X69),s(X65,sK13('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X69,X65,X66))))) )),
  inference(forward_demodulation,[],[f7335,f336])).
fof(f7335,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(X66,happ(s(fun(X65,X66),X68),s(X65,sK13('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X69,X65,X66)))) != s(X66,happ(s(fun(X65,X66),X69),s(X65,sK13('const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X69,X65,X66)))) | s(fun(X65,X66),X69) = s(fun(X65,X66),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))))) )),
  inference(superposition,[],[f352,f336])).
fof(f7392,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(fun(X60,X61),X63) = s(fun(X60,X61),X64) | s(X61,happ(s(fun(X60,X61),X63),s(X60,sK13('const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X64,X60,X61)))) != s(X61,happ(s(fun(X60,X61),X64),s(X60,sK13('const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X64,X60,X61))))) )),
  inference(forward_demodulation,[],[f7334,f337])).
fof(f7334,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(X61,happ(s(fun(X60,X61),X63),s(X60,sK13('const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X64,X60,X61)))) != s(X61,happ(s(fun(X60,X61),X64),s(X60,sK13('const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X64,X60,X61)))) | s(fun(X60,X61),X64) = s(fun(X60,X61),'const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))))) )),
  inference(superposition,[],[f352,f337])).
fof(f7391,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(fun(X54,X55),X59) = s(fun(X54,X55),happ(s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num',X58))) | s(X55,happ(s(fun(X54,X55),X59),s(X54,sK13('const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X59,X54,X55)))) != s(X55,happ(s(fun(X54,X55),happ(s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num',X58))),s(X54,sK13('const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X59,X54,X55))))) )),
  inference(forward_demodulation,[],[f7333,f318])).
fof(f7333,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(X55,happ(s(fun(X54,X55),X59),s(X54,sK13('const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X59,X54,X55)))) != s(X55,happ(s(fun(X54,X55),happ(s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num',X58))),s(X54,sK13('const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X59,X54,X55)))) | s(fun(X54,X55),X59) = s(fun(X54,X55),'const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))) )),
  inference(superposition,[],[f352,f318])).
fof(f7390,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(fun(X49,X50),X51) = s(fun(X49,X50),X53) | s(X50,happ(s(fun(X49,X50),X51),s(X49,sK13('const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X53,X49,X50)))) != s(X50,happ(s(fun(X49,X50),X53),s(X49,sK13('const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X53,X49,X50))))) )),
  inference(forward_demodulation,[],[f7332,f310])).
fof(f7332,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(X50,happ(s(fun(X49,X50),X51),s(X49,sK13('const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X53,X49,X50)))) != s(X50,happ(s(fun(X49,X50),X53),s(X49,sK13('const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X53,X49,X50)))) | s(fun(X49,X50),X53) = s(fun(X49,X50),'const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f352,f310])).
fof(f7389,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(fun(X43,X44),X46) = s(fun(X43,X44),X48) | s(X44,happ(s(fun(X43,X44),X46),s(X43,sK13('const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X48,X43,X44)))) != s(X44,happ(s(fun(X43,X44),X48),s(X43,sK13('const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X48,X43,X44))))) )),
  inference(forward_demodulation,[],[f7331,f341])).
fof(f7331,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(X44,happ(s(fun(X43,X44),X46),s(X43,sK13('const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X48,X43,X44)))) != s(X44,happ(s(fun(X43,X44),X48),s(X43,sK13('const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X48,X43,X44)))) | s(fun(X43,X44),X48) = s(fun(X43,X44),'const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))))) )),
  inference(superposition,[],[f352,f341])).
fof(f7388,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(fun(X37,X38),X41) = s(fun(X37,X38),X42) | s(X38,happ(s(fun(X37,X38),X41),s(X37,sK13('const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X42,X37,X38)))) != s(X38,happ(s(fun(X37,X38),X42),s(X37,sK13('const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X42,X37,X38))))) )),
  inference(forward_demodulation,[],[f7330,f340])).
fof(f7330,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(X38,happ(s(fun(X37,X38),X41),s(X37,sK13('const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X42,X37,X38)))) != s(X38,happ(s(fun(X37,X38),X42),s(X37,sK13('const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X42,X37,X38)))) | s(fun(X37,X38),X42) = s(fun(X37,X38),'const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))))) )),
  inference(superposition,[],[f352,f340])).
fof(f7387,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(fun(X32,X33),X36) = s(fun(X32,X33),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,X33),X34),X35))) | s(X33,happ(s(fun(X32,X33),X36),s(X32,sK13(happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X36,X32,X33)))) != s(X33,happ(s(fun(X32,X33),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,X33),X34),X35))),s(X32,sK13(happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X36,X32,X33))))) )),
  inference(forward_demodulation,[],[f7329,f338])).
fof(f7329,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(X33,happ(s(fun(X32,X33),X36),s(X32,sK13(happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X36,X32,X33)))) != s(X33,happ(s(fun(X32,X33),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,X33),X34),X35))),s(X32,sK13(happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X36,X32,X33)))) | s(fun(X32,X33),X36) = s(fun(X32,X33),happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)))) )),
  inference(superposition,[],[f352,f338])).
fof(f7386,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(fun(X26,X27),X30) = s(fun(X26,X27),X31) | s(X27,happ(s(fun(X26,X27),X30),s(X26,sK13(happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X31,X26,X27)))) != s(X27,happ(s(fun(X26,X27),X31),s(X26,sK13(happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X31,X26,X27))))) )),
  inference(forward_demodulation,[],[f7328,f356])).
fof(f7328,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X27,happ(s(fun(X26,X27),X30),s(X26,sK13(happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X31,X26,X27)))) != s(X27,happ(s(fun(X26,X27),X31),s(X26,sK13(happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X31,X26,X27)))) | s(fun(X26,X27),X31) = s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')))) )),
  inference(superposition,[],[f352,f356])).
fof(f7327,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(X19,happ(s(fun(X18,X19),X25),s(X18,sK13(happ(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X20,X24)),X25,X18,X19)))) != s(X19,happ(s(fun(X18,X19),happ(s(fun(X21,fun(X18,X19)),X22),s(X21,happ(s(fun(X20,X21),X23),s(X20,X24))))),s(X18,sK13(happ(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X20,X24)),X25,X18,X19)))) | s(fun(X18,X19),X25) = s(fun(X18,X19),happ(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X20,X24)))) )),
  inference(superposition,[],[f352,f365])).
fof(f7326,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X11,happ(s(fun(X10,X11),X17),s(X10,sK13(happ(s(fun(X12,fun(X10,X11)),X13),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16)))),X17,X10,X11)))) != s(X11,happ(s(fun(X10,X11),happ(s(fun(X14,fun(X10,X11)),'_dst_x0x1_2'(s(fun(X12,fun(X10,X11)),X13),s(fun(X14,X12),X15))),s(X14,X16))),s(X10,sK13(happ(s(fun(X12,fun(X10,X11)),X13),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16)))),X17,X10,X11)))) | s(fun(X10,X11),X17) = s(fun(X10,X11),happ(s(fun(X12,fun(X10,X11)),X13),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16)))))) )),
  inference(superposition,[],[f352,f365])).
fof(f7385,plain,(
  ( ! [X6,X8,X7,X9] : (s(fun(X6,X7),X8) = s(fun(X6,X7),X9) | s(X7,happ(s(fun(X6,X7),X8),s(X6,sK13(happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X9,X6,X7)))) != s(X7,happ(s(fun(X6,X7),X9),s(X6,sK13(happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X9,X6,X7))))) )),
  inference(forward_demodulation,[],[f7325,f303])).
fof(f7325,plain,(
  ( ! [X6,X8,X7,X9] : (s(X7,happ(s(fun(X6,X7),X8),s(X6,sK13(happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X9,X6,X7)))) != s(X7,happ(s(fun(X6,X7),X9),s(X6,sK13(happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X9,X6,X7)))) | s(fun(X6,X7),X9) = s(fun(X6,X7),happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)))) )),
  inference(superposition,[],[f352,f303])).
fof(f7384,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,X1),X5) = s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))) | s(X1,happ(s(fun(X0,X1),X5),s(X0,sK13(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X0,X1)))) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK13(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X0,X1))))) )),
  inference(forward_demodulation,[],[f7324,f364])).
fof(f7324,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun(X0,X1),X5),s(X0,sK13(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X0,X1)))) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK13(happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X5,X0,X1)))) | s(fun(X0,X1),X5) = s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)))) )),
  inference(superposition,[],[f352,f364])).
fof(f7323,plain,(
  ( ! [X66,X65] : (s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X65),s('type.list.list'('type.closSem.v'),sK13(X66,happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X65)),'type.list.list'('type.closSem.v'),'type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),X66),s('type.list.list'('type.closSem.v'),sK13(X66,happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X65)),'type.list.list'('type.closSem.v'),'type.closSem.v')))) | s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),X66) = s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X65)))) )),
  inference(superposition,[],[f352,f327])).
fof(f7322,plain,(
  ( ! [X64] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK13(X64,'const.closSem.Word64_0','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),X64),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK13(X64,'const.closSem.Word64_0','type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v')))) | s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0') = s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),X64)) )),
  inference(superposition,[],[f352,f263])).
fof(f7321,plain,(
  ( ! [X63] : (s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK13(X63,'const.closSem.RefPtr_0','type.num.num','type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),X63),s('type.num.num',sK13(X63,'const.closSem.RefPtr_0','type.num.num','type.closSem.v')))) | s(fun('type.num.num','type.closSem.v'),'const.closSem.RefPtr_0') = s(fun('type.num.num','type.closSem.v'),X63)) )),
  inference(superposition,[],[f352,f261])).
fof(f7320,plain,(
  ( ! [X62] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK13(X62,'const.closSem.Number_0','type.integer.int','type.closSem.v')))) != s('type.closSem.v',happ(s(fun('type.integer.int','type.closSem.v'),X62),s('type.integer.int',sK13(X62,'const.closSem.Number_0','type.integer.int','type.closSem.v')))) | s(fun('type.integer.int','type.closSem.v'),'const.closSem.Number_0') = s(fun('type.integer.int','type.closSem.v'),X62)) )),
  inference(superposition,[],[f352,f260])).
fof(f7319,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(fun(X57,X58),'_dst_x0x1_2'(s(fun(X59,X58),sK13(X61,'_dstsel_0_x01_1'(s(fun(X57,X59),X60)),fun(X59,X58),fun(X57,X58))),s(fun(X57,X59),X60))) != s(fun(X57,X58),happ(s(fun(fun(X59,X58),fun(X57,X58)),X61),s(fun(X59,X58),sK13(X61,'_dstsel_0_x01_1'(s(fun(X57,X59),X60)),fun(X59,X58),fun(X57,X58))))) | s(fun(fun(X59,X58),fun(X57,X58)),X61) = s(fun(fun(X59,X58),fun(X57,X58)),'_dstsel_0_x01_1'(s(fun(X57,X59),X60)))) )),
  inference(superposition,[],[f352,f364])).
fof(f7309,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,X22) != s(bool,happ(s(fun(X19,bool),X21),s(X19,sK13(X21,X20,X19,bool)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,happ(s(fun(X19,bool),X20),s(X19,sK13(X21,X20,X19,bool))))) )),
  inference(superposition,[],[f352,f432])).
fof(f7308,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X15,bool),X17),s(X15,sK13(X17,X16,X15,bool)))) | s(fun(X15,bool),X16) = s(fun(X15,bool),X17) | s(bool,X18) = s(bool,happ(s(fun(X15,bool),X16),s(X15,sK13(X17,X16,X15,bool)))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f352,f432])).
fof(f7305,plain,(
  ( ! [X10,X8,X9] : (s(X8,'const.pair.FST_1'(s('type.pair.prod'(X8,X9),sK13(X10,'const.pair.FST_0','type.pair.prod'(X8,X9),X8)))) != s(X8,happ(s(fun('type.pair.prod'(X8,X9),X8),X10),s('type.pair.prod'(X8,X9),sK13(X10,'const.pair.FST_0','type.pair.prod'(X8,X9),X8)))) | s(fun('type.pair.prod'(X8,X9),X8),'const.pair.FST_0') = s(fun('type.pair.prod'(X8,X9),X8),X10)) )),
  inference(superposition,[],[f352,f338])).
fof(f7304,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s(X2,happ(s(fun(X3,X2),X7),s(X3,sK13(X7,'_dst_x0x1_2'(s(fun(X4,X2),X5),s(fun(X3,X4),X6)),X3,X2)))) != s(X2,happ(s(fun(X4,X2),X5),s(X4,happ(s(fun(X3,X4),X6),s(X3,sK13(X7,'_dst_x0x1_2'(s(fun(X4,X2),X5),s(fun(X3,X4),X6)),X3,X2)))))) | s(fun(X3,X2),X7) = s(fun(X3,X2),'_dst_x0x1_2'(s(fun(X4,X2),X5),s(fun(X3,X4),X6)))) )),
  inference(superposition,[],[f352,f365])).
fof(f7303,plain,(
  ( ! [X0,X1] : (s(X0,sK13(X1,'_i_0_0',X0,X0)) != s(X0,happ(s(fun(X0,X0),X1),s(X0,sK13(X1,'_i_0_0',X0,X0)))) | s(fun(X0,X0),'_i_0_0') = s(fun(X0,X0),X1)) )),
  inference(superposition,[],[f352,f303])).
fof(f7380,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(fun(X65,X66),X68) = s(fun(X65,X66),X69) | s(X66,happ(s(fun(X65,X66),X68),s(X65,sK13(X69,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X65,X66)))) != s(X66,happ(s(fun(X65,X66),X69),s(X65,sK13(X69,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X65,X66))))) )),
  inference(forward_demodulation,[],[f7301,f336])).
fof(f7301,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(X66,happ(s(fun(X65,X66),X68),s(X65,sK13(X69,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X65,X66)))) != s(X66,happ(s(fun(X65,X66),X69),s(X65,sK13(X69,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))),X65,X66)))) | s(fun(X65,X66),X69) = s(fun(X65,X66),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X65,X66),X67),'const.sum.INL_1'(s(fun(X65,X66),X68)))))) )),
  inference(superposition,[],[f352,f336])).
fof(f7379,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(fun(X60,X61),X63) = s(fun(X60,X61),X64) | s(X61,happ(s(fun(X60,X61),X63),s(X60,sK13(X64,'const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X60,X61)))) != s(X61,happ(s(fun(X60,X61),X64),s(X60,sK13(X64,'const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X60,X61))))) )),
  inference(forward_demodulation,[],[f7300,f337])).
fof(f7300,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(X61,happ(s(fun(X60,X61),X63),s(X60,sK13(X64,'const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X60,X61)))) != s(X61,happ(s(fun(X60,X61),X64),s(X60,sK13(X64,'const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))),X60,X61)))) | s(fun(X60,X61),X64) = s(fun(X60,X61),'const.sum.OUTR_1'(s('type.sum.sum'(X62,fun(X60,X61)),'const.sum.INR_1'(s(fun(X60,X61),X63)))))) )),
  inference(superposition,[],[f352,f337])).
fof(f7378,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(fun(X54,X55),X59) = s(fun(X54,X55),happ(s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num',X58))) | s(X55,happ(s(fun(X54,X55),X59),s(X54,sK13(X59,'const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X54,X55)))) != s(X55,happ(s(fun(X54,X55),happ(s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num',X58))),s(X54,sK13(X59,'const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X54,X55))))) )),
  inference(forward_demodulation,[],[f7299,f318])).
fof(f7299,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(X55,happ(s(fun(X54,X55),X59),s(X54,sK13(X59,'const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X54,X55)))) != s(X55,happ(s(fun(X54,X55),happ(s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num',X58))),s(X54,sK13(X59,'const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))),X54,X55)))) | s(fun(X54,X55),X59) = s(fun(X54,X55),'const.ind_type.FCONS_3'(s(fun(X54,X55),X56),s(fun('type.num.num',fun(X54,X55)),X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))) )),
  inference(superposition,[],[f352,f318])).
fof(f7377,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(fun(X49,X50),X51) = s(fun(X49,X50),X53) | s(X50,happ(s(fun(X49,X50),X51),s(X49,sK13(X53,'const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X49,X50)))) != s(X50,happ(s(fun(X49,X50),X53),s(X49,sK13(X53,'const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X49,X50))))) )),
  inference(forward_demodulation,[],[f7298,f310])).
fof(f7298,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(X50,happ(s(fun(X49,X50),X51),s(X49,sK13(X53,'const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X49,X50)))) != s(X50,happ(s(fun(X49,X50),X53),s(X49,sK13(X53,'const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')),X49,X50)))) | s(fun(X49,X50),X53) = s(fun(X49,X50),'const.ind_type.FCONS_3'(s(fun(X49,X50),X51),s(fun('type.num.num',fun(X49,X50)),X52),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f352,f310])).
fof(f7376,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(fun(X43,X44),X46) = s(fun(X43,X44),X48) | s(X44,happ(s(fun(X43,X44),X46),s(X43,sK13(X48,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X43,X44)))) != s(X44,happ(s(fun(X43,X44),X48),s(X43,sK13(X48,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X43,X44))))) )),
  inference(forward_demodulation,[],[f7297,f341])).
fof(f7297,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(X44,happ(s(fun(X43,X44),X46),s(X43,sK13(X48,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X43,X44)))) != s(X44,happ(s(fun(X43,X44),X48),s(X43,sK13(X48,'const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))),X43,X44)))) | s(fun(X43,X44),X48) = s(fun(X43,X44),'const.pair.FST_1'(s('type.pair.prod'(fun(X43,X44),X45),'const.pair.,_2'(s(fun(X43,X44),X46),s(X45,X47)))))) )),
  inference(superposition,[],[f352,f341])).
fof(f7375,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(fun(X37,X38),X41) = s(fun(X37,X38),X42) | s(X38,happ(s(fun(X37,X38),X41),s(X37,sK13(X42,'const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X37,X38)))) != s(X38,happ(s(fun(X37,X38),X42),s(X37,sK13(X42,'const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X37,X38))))) )),
  inference(forward_demodulation,[],[f7296,f340])).
fof(f7296,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(X38,happ(s(fun(X37,X38),X41),s(X37,sK13(X42,'const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X37,X38)))) != s(X38,happ(s(fun(X37,X38),X42),s(X37,sK13(X42,'const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))),X37,X38)))) | s(fun(X37,X38),X42) = s(fun(X37,X38),'const.pair.SND_1'(s('type.pair.prod'(X39,fun(X37,X38)),'const.pair.,_2'(s(X39,X40),s(fun(X37,X38),X41)))))) )),
  inference(superposition,[],[f352,f340])).
fof(f7374,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(fun(X32,X33),X36) = s(fun(X32,X33),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,X33),X34),X35))) | s(X33,happ(s(fun(X32,X33),X36),s(X32,sK13(X36,happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X32,X33)))) != s(X33,happ(s(fun(X32,X33),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,X33),X34),X35))),s(X32,sK13(X36,happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X32,X33))))) )),
  inference(forward_demodulation,[],[f7295,f338])).
fof(f7295,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(X33,happ(s(fun(X32,X33),X36),s(X32,sK13(X36,happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X32,X33)))) != s(X33,happ(s(fun(X32,X33),'const.pair.FST_1'(s('type.pair.prod'(fun(X32,X33),X34),X35))),s(X32,sK13(X36,happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)),X32,X33)))) | s(fun(X32,X33),X36) = s(fun(X32,X33),happ(s(fun('type.pair.prod'(fun(X32,X33),X34),fun(X32,X33)),'const.pair.FST_0'),s('type.pair.prod'(fun(X32,X33),X34),X35)))) )),
  inference(superposition,[],[f352,f338])).
fof(f7373,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(fun(X26,X27),X30) = s(fun(X26,X27),X31) | s(X27,happ(s(fun(X26,X27),X30),s(X26,sK13(X31,happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X26,X27)))) != s(X27,happ(s(fun(X26,X27),X31),s(X26,sK13(X31,happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X26,X27))))) )),
  inference(forward_demodulation,[],[f7294,f356])).
fof(f7294,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X27,happ(s(fun(X26,X27),X30),s(X26,sK13(X31,happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X26,X27)))) != s(X27,happ(s(fun(X26,X27),X31),s(X26,sK13(X31,happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')),X26,X27)))) | s(fun(X26,X27),X31) = s(fun(X26,X27),happ(s(fun('type.list.list'(X28),fun(X26,X27)),sK16(X29,X30,X28,fun(X26,X27))),s('type.list.list'(X28),'const.list.NIL_0')))) )),
  inference(superposition,[],[f352,f356])).
fof(f7293,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(X19,happ(s(fun(X18,X19),X25),s(X18,sK13(X25,happ(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X20,X24)),X18,X19)))) != s(X19,happ(s(fun(X18,X19),happ(s(fun(X21,fun(X18,X19)),X22),s(X21,happ(s(fun(X20,X21),X23),s(X20,X24))))),s(X18,sK13(X25,happ(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X20,X24)),X18,X19)))) | s(fun(X18,X19),X25) = s(fun(X18,X19),happ(s(fun(X20,fun(X18,X19)),'_dst_x0x1_2'(s(fun(X21,fun(X18,X19)),X22),s(fun(X20,X21),X23))),s(X20,X24)))) )),
  inference(superposition,[],[f352,f365])).
fof(f7292,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X11,happ(s(fun(X10,X11),X17),s(X10,sK13(X17,happ(s(fun(X12,fun(X10,X11)),X13),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16)))),X10,X11)))) != s(X11,happ(s(fun(X10,X11),happ(s(fun(X14,fun(X10,X11)),'_dst_x0x1_2'(s(fun(X12,fun(X10,X11)),X13),s(fun(X14,X12),X15))),s(X14,X16))),s(X10,sK13(X17,happ(s(fun(X12,fun(X10,X11)),X13),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16)))),X10,X11)))) | s(fun(X10,X11),X17) = s(fun(X10,X11),happ(s(fun(X12,fun(X10,X11)),X13),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16)))))) )),
  inference(superposition,[],[f352,f365])).
fof(f7372,plain,(
  ( ! [X6,X8,X7,X9] : (s(fun(X6,X7),X8) = s(fun(X6,X7),X9) | s(X7,happ(s(fun(X6,X7),X8),s(X6,sK13(X9,happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X6,X7)))) != s(X7,happ(s(fun(X6,X7),X9),s(X6,sK13(X9,happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X6,X7))))) )),
  inference(forward_demodulation,[],[f7291,f303])).
fof(f7291,plain,(
  ( ! [X6,X8,X7,X9] : (s(X7,happ(s(fun(X6,X7),X8),s(X6,sK13(X9,happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X6,X7)))) != s(X7,happ(s(fun(X6,X7),X9),s(X6,sK13(X9,happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)),X6,X7)))) | s(fun(X6,X7),X9) = s(fun(X6,X7),happ(s(fun(fun(X6,X7),fun(X6,X7)),'_i_0_0'),s(fun(X6,X7),X8)))) )),
  inference(superposition,[],[f352,f303])).
fof(f7371,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,X1),X5) = s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))) | s(X1,happ(s(fun(X0,X1),X5),s(X0,sK13(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK13(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1))))) )),
  inference(forward_demodulation,[],[f7290,f364])).
fof(f7290,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun(X0,X1),X5),s(X0,sK13(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))) != s(X1,happ(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X4),s(fun(X0,X2),X3))),s(X0,sK13(X5,happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)),X0,X1)))) | s(fun(X0,X1),X5) = s(fun(X0,X1),happ(s(fun(fun(X2,X1),fun(X0,X1)),'_dstsel_0_x01_1'(s(fun(X0,X2),X3))),s(fun(X2,X1),X4)))) )),
  inference(superposition,[],[f352,f364])).
fof(f7238,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f356,f7219,f434])).
fof(f7244,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | $spl28),
  inference(unit_resulting_resolution,[],[f419,f7219,f1398])).
fof(f7246,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,sK6('_i_0_0','_i_0_0',bool),X0,bool))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f7219,f3944])).
fof(f7219,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | $spl28),
  inference(forward_demodulation,[],[f7218,f303])).
fof(f7218,plain,(
  p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | $spl28),
  inference(subsumption_resolution,[],[f7217,f256])).
fof(f7217,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | $spl28),
  inference(forward_demodulation,[],[f7189,f303])).
fof(f7189,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | $spl28),
  inference(condensation,[],[f7175])).
fof(f7175,plain,(
  ( ! [X29] : (~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X29)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool)))))) ) | $spl28),
  inference(superposition,[],[f315,f7015])).
fof(f7212,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl28),
  inference(subsumption_resolution,[],[f7153,f256])).
fof(f7153,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl28),
  inference(superposition,[],[f434,f7015])).
fof(f7009,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f356,f6988,f434])).
fof(f7015,plain,(
  s(bool,'T_0') = s(bool,sK5('_i_0_0','_i_0_0',bool)) | $spl28),
  inference(unit_resulting_resolution,[],[f419,f6988,f1398])).
fof(f7017,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,sK5('_i_0_0','_i_0_0',bool),X0,bool))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6988,f3944])).
fof(f6562,plain,(
  ( ! [X2,X3,X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),happ(s(fun(X1,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2),s(X1,X3))))) = s('type.closSem.v',happ(s(fun(X1,'type.closSem.v'),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0'),s(fun(X1,'type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))))),X2))),s(X1,X3)))) )),
  inference(superposition,[],[f263,f365])).
fof(f6278,plain,(
  ( ! [X476,X472,X474,X471,X475,X473] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X476))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun(X472,'type.integer.int'),X473),s(X472,happ(s(fun(X471,X472),X474),s(X471,X475))))))) | s('type.integer.int',X476) = s('type.integer.int',happ(s(fun(X471,'type.integer.int'),'_dst_x0x1_2'(s(fun(X472,'type.integer.int'),X473),s(fun(X471,X472),X474))),s(X471,X475)))) )),
  inference(superposition,[],[f332,f365])).
fof(f6276,plain,(
  ( ! [X461,X463,X459,X460,X462,X464] : (s('type.integer.int',X464) != s('type.integer.int',happ(s(fun(X460,'type.integer.int'),X461),s(X460,happ(s(fun(X459,X460),X462),s(X459,X463))))) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X464))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun(X459,'type.integer.int'),'_dst_x0x1_2'(s(fun(X460,'type.integer.int'),X461),s(fun(X459,X460),X462))),s(X459,X463)))))) )),
  inference(superposition,[],[f333,f365])).
fof(f6264,plain,(
  ( ! [X364,X366,X368,X370,X365,X367,X363,X369,X371] : (s(fun(X363,X364),X370) != s(fun(X363,X364),happ(s(fun(X366,fun(X363,X364)),X367),s(X366,happ(s(fun(X365,X366),X368),s(X365,X369))))) | s(X364,happ(s(fun(X363,X364),X370),s(X363,X371))) = s(X364,happ(s(fun(X363,X364),happ(s(fun(X365,fun(X363,X364)),'_dst_x0x1_2'(s(fun(X366,fun(X363,X364)),X367),s(fun(X365,X366),X368))),s(X365,X369))),s(X363,X371)))) )),
  inference(superposition,[],[f351,f365])).
fof(f6262,plain,(
  ( ! [X350,X356,X352,X354,X351,X353,X355] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X350,bool),happ(s(fun(X352,fun(X350,bool)),X353),s(X352,happ(s(fun(X351,X352),X354),s(X351,X355))))))) | s(X350,X356) = s(X350,sK4(X356,happ(s(fun(X351,fun(X350,bool)),'_dst_x0x1_2'(s(fun(X352,fun(X350,bool)),X353),s(fun(X351,X352),X354))),s(X351,X355)),X350))) )),
  inference(superposition,[],[f823,f365])).
fof(f6200,plain,(
  ( ! [X499,X500,X502,X504,X501,X503] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X504))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun(X501,'type.integer.int'),'_dst_x0x1_2'(s(fun(X499,'type.integer.int'),X500),s(fun(X501,X499),X502))),s(X501,X503))))) | s('type.integer.int',X504) = s('type.integer.int',happ(s(fun(X499,'type.integer.int'),X500),s(X499,happ(s(fun(X501,X499),X502),s(X501,X503)))))) )),
  inference(superposition,[],[f332,f365])).
fof(f6198,plain,(
  ( ! [X492,X488,X490,X487,X489,X491] : (s('type.integer.int',X492) != s('type.integer.int',happ(s(fun(X489,'type.integer.int'),'_dst_x0x1_2'(s(fun(X487,'type.integer.int'),X488),s(fun(X489,X487),X490))),s(X489,X491))) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X492))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun(X487,'type.integer.int'),X488),s(X487,happ(s(fun(X489,X487),X490),s(X489,X491)))))))) )),
  inference(superposition,[],[f333,f365])).
fof(f6186,plain,(
  ( ! [X383,X389,X385,X387,X382,X388,X384,X386,X381] : (s(fun(X381,X382),X388) != s(fun(X381,X382),happ(s(fun(X385,fun(X381,X382)),'_dst_x0x1_2'(s(fun(X383,fun(X381,X382)),X384),s(fun(X385,X383),X386))),s(X385,X387))) | s(X382,happ(s(fun(X381,X382),X388),s(X381,X389))) = s(X382,happ(s(fun(X381,X382),happ(s(fun(X383,fun(X381,X382)),X384),s(X383,happ(s(fun(X385,X383),X386),s(X385,X387))))),s(X381,X389)))) )),
  inference(superposition,[],[f351,f365])).
fof(f6184,plain,(
  ( ! [X372,X374,X368,X370,X373,X369,X371] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X368,bool),happ(s(fun(X371,fun(X368,bool)),'_dst_x0x1_2'(s(fun(X369,fun(X368,bool)),X370),s(fun(X371,X369),X372))),s(X371,X373))))) | s(X368,X374) = s(X368,sK4(X374,happ(s(fun(X369,fun(X368,bool)),X370),s(X369,happ(s(fun(X371,X369),X372),s(X371,X373)))),X368))) )),
  inference(superposition,[],[f823,f365])).
fof(f6037,plain,(
  ( ! [X101,X99,X97,X95,X100,X98,X96] : (s(fun(X95,X96),'_dst_x0x1_2'(s(fun(X97,X96),happ(s(fun(X99,fun(X97,X96)),X100),s(X99,X101))),s(fun(X95,X97),X98))) = s(fun(X95,X96),happ(s(fun(X99,fun(X95,X96)),'_dst_x0x1_2'(s(fun(fun(X97,X96),fun(X95,X96)),'_dstsel_0_x01_1'(s(fun(X95,X97),X98))),s(fun(X99,fun(X97,X96)),X100))),s(X99,X101)))) )),
  inference(superposition,[],[f365,f364])).
fof(f6027,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X42) = s(bool,happ(s(fun(X39,bool),'_dst_x0x1_2'(s(fun(X37,bool),X38),s(fun(X39,X37),X40))),s(X39,X41))) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,happ(s(fun(X37,bool),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))))) )),
  inference(superposition,[],[f365,f432])).
fof(f6026,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun(X33,bool),'_dst_x0x1_2'(s(fun(X31,bool),X32),s(fun(X33,X31),X34))),s(X33,X35))) | s(bool,X36) = s(bool,happ(s(fun(X31,bool),X32),s(X31,happ(s(fun(X33,X31),X34),s(X33,X35))))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f365,f432])).
fof(f6024,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s(X18,'const.pair.FST_1'(s('type.pair.prod'(X18,X19),happ(s(fun(X20,'type.pair.prod'(X18,X19)),X21),s(X20,X22))))) = s(X18,happ(s(fun(X20,X18),'_dst_x0x1_2'(s(fun('type.pair.prod'(X18,X19),X18),'const.pair.FST_0'),s(fun(X20,'type.pair.prod'(X18,X19)),X21))),s(X20,X22)))) )),
  inference(superposition,[],[f365,f338])).
fof(f6023,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X10,happ(s(fun(X12,X10),X13),s(X12,happ(s(fun(X11,X12),X14),s(X11,happ(s(fun(X15,X11),X16),s(X15,X17))))))) = s(X10,happ(s(fun(X15,X10),'_dst_x0x1_2'(s(fun(X11,X10),'_dst_x0x1_2'(s(fun(X12,X10),X13),s(fun(X11,X12),X14))),s(fun(X15,X11),X16))),s(X15,X17)))) )),
  inference(superposition,[],[f365,f365])).
fof(f6022,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X104] : (s(X104,happ(s(fun(fun(X99,X100),X104),X105),s(fun(X99,X100),'_dst_x0x1_2'(s(fun(X101,X100),X103),s(fun(X99,X101),X102))))) = s(X104,happ(s(fun(fun(X101,X100),X104),'_dst_x0x1_2'(s(fun(fun(X99,X100),X104),X105),s(fun(fun(X101,X100),fun(X99,X100)),'_dstsel_0_x01_1'(s(fun(X99,X101),X102))))),s(fun(X101,X100),X103)))) )),
  inference(superposition,[],[f365,f364])).
fof(f6021,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X24,happ(s(fun(X20,X24),X25),s(X20,X23))) = s(X24,happ(s(fun('type.list.list'(X21),X24),'_dst_x0x1_2'(s(fun(X20,X24),X25),s(fun('type.list.list'(X21),X20),sK16(X22,X23,X21,X20)))),s('type.list.list'(X21),'const.list.NIL_0')))) )),
  inference(superposition,[],[f365,f356])).
fof(f6020,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X18,X16] : (s(X18,happ(s(fun(X12,X18),X19),s(X12,happ(s(fun(X14,X12),X15),s(X14,happ(s(fun(X13,X14),X16),s(X13,X17))))))) = s(X18,happ(s(fun(X13,X18),'_dst_x0x1_2'(s(fun(X12,X18),X19),s(fun(X13,X12),'_dst_x0x1_2'(s(fun(X14,X12),X15),s(fun(X13,X14),X16))))),s(X13,X17)))) )),
  inference(superposition,[],[f365,f365])).
fof(f6019,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s(X10,happ(s(fun(X4,X10),X11),s(X4,happ(s(fun(X7,X4),'_dst_x0x1_2'(s(fun(X5,X4),X6),s(fun(X7,X5),X8))),s(X7,X9))))) = s(X10,happ(s(fun(X5,X10),'_dst_x0x1_2'(s(fun(X4,X10),X11),s(fun(X5,X4),X6))),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))))) )),
  inference(superposition,[],[f365,f365])).
fof(f6017,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6))))),s(X1,X7))) = s(X0,happ(s(fun(X1,X0),happ(s(fun(X4,fun(X1,X0)),'_dst_x0x1_2'(s(fun(X2,fun(X1,X0)),X3),s(fun(X4,X2),X5))),s(X4,X6))),s(X1,X7)))) )),
  inference(unit_resulting_resolution,[],[f365,f351])).
fof(f6018,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun(X0,'type.integer.int'),X1),s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun(X2,'type.integer.int'),'_dst_x0x1_2'(s(fun(X0,'type.integer.int'),X1),s(fun(X2,X0),X3))),s(X2,X4)))))) )),
  inference(unit_resulting_resolution,[],[f365,f333])).
fof(f5983,plain,(
  ( ! [X111,X109,X110] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X111),'const.sum.INL_1'(s(bool,X109))))) | s(bool,'T_0') = s(bool,sK4(X109,X110,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X110)))) )),
  inference(superposition,[],[f5684,f823])).
fof(f5982,plain,(
  ( ! [X107,X108,X106] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X108),'const.sum.INL_1'(s(bool,X107))))) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X106),'const.sum.INL_1'(s(bool,X107)))))) )),
  inference(superposition,[],[f5684,f336])).
fof(f5981,plain,(
  ( ! [X103,X105,X104] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X105),'const.sum.INL_1'(s(bool,X104))))) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X103,bool),'const.sum.INR_1'(s(bool,X104)))))) )),
  inference(superposition,[],[f5684,f337])).
fof(f5979,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X98),'const.sum.INL_1'(s(bool,X96))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X96),s(fun('type.num.num',bool),X97),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5684,f310])).
fof(f5978,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X95),'const.sum.INL_1'(s(bool,X93))))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X92),'const.pair.,_2'(s(bool,X93),s(X92,X94)))))) )),
  inference(superposition,[],[f5684,f341])).
fof(f5977,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X91),'const.sum.INL_1'(s(bool,X90))))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X88,bool),'const.pair.,_2'(s(X88,X89),s(bool,X90)))))) )),
  inference(superposition,[],[f5684,f340])).
fof(f5975,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X84),'const.sum.INL_1'(s(bool,X83))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X81),bool),sK16(X82,X83,X81,bool)),s('type.list.list'(X81),'const.list.NIL_0')))) )),
  inference(superposition,[],[f5684,f356])).
fof(f5741,plain,(
  ( ! [X111,X109,X110] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X111,bool),'const.sum.INR_1'(s(bool,X109))))) | s(bool,'T_0') = s(bool,sK4(X109,X110,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X110)))) )),
  inference(superposition,[],[f5495,f823])).
fof(f5740,plain,(
  ( ! [X107,X108,X106] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X108,bool),'const.sum.INR_1'(s(bool,X107))))) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X106),'const.sum.INL_1'(s(bool,X107)))))) )),
  inference(superposition,[],[f5495,f336])).
fof(f5739,plain,(
  ( ! [X103,X105,X104] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X105,bool),'const.sum.INR_1'(s(bool,X104))))) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X103,bool),'const.sum.INR_1'(s(bool,X104)))))) )),
  inference(superposition,[],[f5495,f337])).
fof(f5737,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X98,bool),'const.sum.INR_1'(s(bool,X96))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X96),s(fun('type.num.num',bool),X97),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5495,f310])).
fof(f5736,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X95,bool),'const.sum.INR_1'(s(bool,X93))))) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X92),'const.pair.,_2'(s(bool,X93),s(X92,X94)))))) )),
  inference(superposition,[],[f5495,f341])).
fof(f5735,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X91,bool),'const.sum.INR_1'(s(bool,X90))))) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X88,bool),'const.pair.,_2'(s(X88,X89),s(bool,X90)))))) )),
  inference(superposition,[],[f5495,f340])).
fof(f5733,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X84,bool),'const.sum.INR_1'(s(bool,X83))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X81),bool),sK16(X82,X83,X81,bool)),s('type.list.list'(X81),'const.list.NIL_0')))) )),
  inference(superposition,[],[f5495,f356])).
fof(f5684,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X4),'const.sum.INL_1'(s(bool,X5))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5619,f258])).
fof(f5619,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X4),'const.sum.INL_1'(s(bool,X5))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f265,f1396])).
fof(f5495,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X4,bool),'const.sum.INR_1'(s(bool,X5))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5431,f258])).
fof(f5431,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X4,bool),'const.sum.INR_1'(s(bool,X5))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f265,f1395])).
fof(f4983,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X85),bool),sK16(X86,'const.ind_type.ISO_2'(s(fun(X84,X84),'_i_0_0'),s(fun(X84,X84),'_i_0_0')),X85,bool))))) )),
  inference(subsumption_resolution,[],[f4951,f256])).
fof(f4951,plain,(
  ( ! [X85,X86,X84] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X85),bool),sK16(X86,'const.ind_type.ISO_2'(s(fun(X84,X84),'_i_0_0'),s(fun(X84,X84),'_i_0_0')),X85,bool))))) )),
  inference(superposition,[],[f3944,f427])).
fof(f4979,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X75),bool),sK16(X76,'|dollar|exists_1'(s(fun('type.list.list'(X73),bool),sK16(X74,'T_0',X73,bool))),X75,bool))))) )),
  inference(subsumption_resolution,[],[f4948,f256])).
fof(f4948,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X75),bool),sK16(X76,'|dollar|exists_1'(s(fun('type.list.list'(X73),bool),sK16(X74,'T_0',X73,bool))),X75,bool))))) )),
  inference(superposition,[],[f3944,f4029])).
fof(f4975,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X65),bool),sK16(X66,'|dollar|exists_1'(s(fun(X63,bool),X64)),X65,bool)))) | s(X63,X67) = s(X63,sK4(X67,X64,X63))) )),
  inference(subsumption_resolution,[],[f4945,f256])).
fof(f4945,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X65),bool),sK16(X66,'|dollar|exists_1'(s(fun(X63,bool),X64)),X65,bool)))) | s(X63,X67) = s(X63,sK4(X67,X64,X63))) )),
  inference(superposition,[],[f3944,f823])).
fof(f4965,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X4),bool),sK16(X5,X3,X4,bool)))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f4929,f256])).
fof(f4929,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X4),bool),sK16(X5,X3,X4,bool)))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3944,f432])).
fof(f3905,plain,(
  ( ! [X47,X46] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X46),X47)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X46),bool),'const.pair.FST_0'))))) )),
  inference(superposition,[],[f3805,f338])).
fof(f4520,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X2),bool),'const.pair.FST_0')))) | s(bool,X4) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X2),X3)))) )),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f312,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f816,f817,f818,f819,f820,f821,f823,f824,f825,f826,f827,f828,f829,f882,f903,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1543,f1545,f1547,f1556,f1571,f1592,f1575,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2004,f2164,f2166,f2168,f2192,f2230,f2201,f2206,f2544,f2545,f2546,f2547,f2548,f2549,f2550,f2551,f2552,f2569,f2570,f2571,f2572,f2573,f2574,f2575,f2576,f2577,f3284,f3285,f3286,f3411,f3412,f3413,f3414,f3415,f3416,f3417,f3418,f3493,f3577,f3578,f3579,f3580,f3581,f3582,f3583,f3584,f3660,f3663,f3664,f3665,f3706,f3707,f3708,f3709,f3710,f3712,f3713,f3718,f3719,f3720,f3721,f3722,f3723,f3724,f3727,f3728,f3738,f3739,f3740,f3741,f3742,f3747,f3749,f3806,f3807,f3808,f3850,f3905,f3931,f3959,f3969,f4029,f4023,f4147,f4158,f4168,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228])).
fof(f4228,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X2),bool),'const.pair.FST_0')))) | s(bool,X4) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X2),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4217,f256])).
fof(f4217,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X2),bool),'const.pair.FST_0')))) | s(bool,X4) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X2),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f3905,f432])).
fof(f4030,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,'|dollar|exists_1'(s(fun('type.list.list'(X2),bool),sK16(X3,'T_0',X2,bool))),X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f3931,f3904])).
fof(f4147,plain,(
  ( ! [X39,X41,X40] : (s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X39),bool),sK16(X40,'T_0',X39,bool)))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f4102,f256])).
fof(f4102,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X39),bool),sK16(X40,'T_0',X39,bool)))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f434,f4029])).
fof(f4023,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X0),bool),sK16(X1,'|dollar|exists_1'(s(fun('type.list.list'(X2),bool),sK16(X3,'T_0',X2,bool))),X0,bool)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f356,f3931,f434])).
fof(f4029,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,'T_0',X0,bool))))) )),
  inference(unit_resulting_resolution,[],[f419,f3931,f1398])).
fof(f3931,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,'T_0',X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f256,f3904])).
fof(f3808,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X53) != s(bool,'|dollar|exists_1'(s(fun(X51,bool),X52))) | s(bool,'T_0') = s(bool,X53) | s(X51,X54) = s(X51,sK4(X54,X52,X51))) )),
  inference(subsumption_resolution,[],[f3767,f256])).
fof(f3767,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | s(bool,X53) != s(bool,'|dollar|exists_1'(s(fun(X51,bool),X52))) | s(bool,'T_0') = s(bool,X53) | s(X51,X54) = s(X51,sK4(X54,X52,X51))) )),
  inference(superposition,[],[f434,f823])).
fof(f3749,plain,(
  ( ! [X182,X183,X181] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X181))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X183))) | s('type.integer.int',X183) = s('type.integer.int',sK4(X181,X182,'type.integer.int')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.integer.int',bool),X182)))) )),
  inference(superposition,[],[f332,f823])).
fof(f3739,plain,(
  ( ! [X146,X144,X145,X143] : (~p(s(bool,happ(s(fun(X143,bool),X144),s(X143,sK4(X146,sK4(X144,X145,fun(X143,bool)),X143))))) | p(s(bool,'|dollar|exists_1'(s(fun(X143,bool),sK4(X144,X145,fun(X143,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X143,bool),bool),X145)))) )),
  inference(superposition,[],[f313,f823])).
fof(f3665,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X9))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK4(X8,X9,bool))) )),
  inference(superposition,[],[f823,f432])).
fof(f3664,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X6))) | s(bool,X7) = s(bool,sK4(X5,X6,bool)) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f823,f432])).
fof(f3286,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK12(X7,X8,X9,bool))) )),
  inference(superposition,[],[f350,f432])).
fof(f3285,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK12(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f350,f432])).
fof(f2206,plain,(
  ( ! [X156,X154,X157,X155] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X157))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',happ(s(fun('type.num.num','type.integer.int'),X155),s('type.num.num',X156))))) | s('type.integer.int',X157) = s('type.integer.int','const.ind_type.FCONS_3'(s('type.integer.int',X154),s(fun('type.num.num','type.integer.int'),X155),s('type.num.num','const.num.SUC_1'(s('type.num.num',X156)))))) )),
  inference(superposition,[],[f332,f318])).
fof(f2230,plain,(
  ( ! [X134,X132,X130,X133,X131] : (p(s(bool,'|dollar|exists_1'(s(fun(X130,bool),happ(s(fun('type.num.num',fun(X130,bool)),X132),s('type.num.num',X133)))))) | ~p(s(bool,happ(s(fun(X130,bool),happ(s(fun('type.num.num',fun(X130,bool)),X132),s('type.num.num',X133))),s(X130,sK4(X134,'const.ind_type.FCONS_3'(s(fun(X130,bool),X131),s(fun('type.num.num',fun(X130,bool)),X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133)))),X130)))))) )),
  inference(forward_demodulation,[],[f2200,f318])).
fof(f2200,plain,(
  ( ! [X134,X132,X130,X133,X131] : (~p(s(bool,happ(s(fun(X130,bool),happ(s(fun('type.num.num',fun(X130,bool)),X132),s('type.num.num',X133))),s(X130,sK4(X134,'const.ind_type.FCONS_3'(s(fun(X130,bool),X131),s(fun('type.num.num',fun(X130,bool)),X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133)))),X130))))) | p(s(bool,'|dollar|exists_1'(s(fun(X130,bool),'const.ind_type.FCONS_3'(s(fun(X130,bool),X131),s(fun('type.num.num',fun(X130,bool)),X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133))))))))) )),
  inference(superposition,[],[f313,f318])).
fof(f1683,plain,(
  ( ! [X12,X13] : (s(bool,X12) != s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f1655,f258])).
fof(f1655,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X12) != s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1400,f264])).
fof(f1618,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1598,f256])).
fof(f1598,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1398,f432])).
fof(f1579,plain,(
  ( ! [X101,X99,X100] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X101))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int','const.pair.FST_1'(s('type.pair.prod'('type.integer.int',X99),X100))))) | s('type.integer.int',X101) = s('type.integer.int',happ(s(fun('type.pair.prod'('type.integer.int',X99),'type.integer.int'),'const.pair.FST_0'),s('type.pair.prod'('type.integer.int',X99),X100)))) )),
  inference(superposition,[],[f332,f338])).
fof(f1592,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,'|dollar|exists_1'(s(fun(X83,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X83,bool),X84),X85)))))) | ~p(s(bool,happ(s(fun(X83,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X83,bool),X84),X85))),s(X83,sK4(X86,happ(s(fun('type.pair.prod'(fun(X83,bool),X84),fun(X83,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X83,bool),X84),X85)),X83)))))) )),
  inference(forward_demodulation,[],[f1574,f338])).
fof(f1574,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,happ(s(fun(X83,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X83,bool),X84),X85))),s(X83,sK4(X86,happ(s(fun('type.pair.prod'(fun(X83,bool),X84),fun(X83,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X83,bool),X84),X85)),X83))))) | p(s(bool,'|dollar|exists_1'(s(fun(X83,bool),happ(s(fun('type.pair.prod'(fun(X83,bool),X84),fun(X83,bool)),'const.pair.FST_0'),s('type.pair.prod'(fun(X83,bool),X84),X85))))))) )),
  inference(superposition,[],[f313,f338])).
fof(f1556,plain,(
  ( ! [X35,X36] : (~p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X35),sK4(X36,'const.pair.FST_0','type.pair.prod'(bool,X35)))))) | p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X35),bool),'const.pair.FST_0'))))) )),
  inference(superposition,[],[f313,f338])).
fof(f1432,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X1,bool),X2)))) | s(bool,X4) = s(bool,happ(s(fun(X1,bool),X2),s(X1,sK4(X3,X2,X1)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1415,f256])).
fof(f1415,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X1,bool),X2)))) | s(bool,X4) = s(bool,happ(s(fun(X1,bool),X2),s(X1,sK4(X3,X2,X1)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f313,f432])).
fof(f1413,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'F_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X13)))) | s(bool,'T_0') = s(bool,sK4(X12,X13,bool))) )),
  inference(superposition,[],[f313,f264])).
fof(f1411,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X8)))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X7)))) | s(bool,'T_0') = s(bool,sK4(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f313,f432])).
fof(f1409,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X1)))) | s(bool,X2) = s(bool,sK4(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f313,f432])).
fof(f1427,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,'|dollar|exists_1'(s(fun(X26,bool),X28)))) | ~p(s(bool,happ(s(fun(X26,bool),X28),s(X26,sK4(X29,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X26,bool),X27),'const.sum.INL_1'(s(fun(X26,bool),X28)))),X26)))))) )),
  inference(forward_demodulation,[],[f1408,f336])).
fof(f1408,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,happ(s(fun(X26,bool),X28),s(X26,sK4(X29,'const.sum.OUTL_1'(s('type.sum.sum'(fun(X26,bool),X27),'const.sum.INL_1'(s(fun(X26,bool),X28)))),X26))))) | p(s(bool,'|dollar|exists_1'(s(fun(X26,bool),'const.sum.OUTL_1'(s('type.sum.sum'(fun(X26,bool),X27),'const.sum.INL_1'(s(fun(X26,bool),X28))))))))) )),
  inference(superposition,[],[f313,f336])).
fof(f1426,plain,(
  ( ! [X24,X23,X25,X22] : (p(s(bool,'|dollar|exists_1'(s(fun(X22,bool),X24)))) | ~p(s(bool,happ(s(fun(X22,bool),X24),s(X22,sK4(X25,'const.sum.OUTR_1'(s('type.sum.sum'(X23,fun(X22,bool)),'const.sum.INR_1'(s(fun(X22,bool),X24)))),X22)))))) )),
  inference(forward_demodulation,[],[f1407,f337])).
fof(f1407,plain,(
  ( ! [X24,X23,X25,X22] : (~p(s(bool,happ(s(fun(X22,bool),X24),s(X22,sK4(X25,'const.sum.OUTR_1'(s('type.sum.sum'(X23,fun(X22,bool)),'const.sum.INR_1'(s(fun(X22,bool),X24)))),X22))))) | p(s(bool,'|dollar|exists_1'(s(fun(X22,bool),'const.sum.OUTR_1'(s('type.sum.sum'(X23,fun(X22,bool)),'const.sum.INR_1'(s(fun(X22,bool),X24))))))))) )),
  inference(superposition,[],[f313,f337])).
fof(f1425,plain,(
  ( ! [X21,X19,X20,X18] : (p(s(bool,'|dollar|exists_1'(s(fun(X18,bool),X19)))) | ~p(s(bool,happ(s(fun(X18,bool),X19),s(X18,sK4(X21,'const.ind_type.FCONS_3'(s(fun(X18,bool),X19),s(fun('type.num.num',fun(X18,bool)),X20),s('type.num.num','const.num.|48|_0')),X18)))))) )),
  inference(forward_demodulation,[],[f1406,f310])).
fof(f1406,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,happ(s(fun(X18,bool),X19),s(X18,sK4(X21,'const.ind_type.FCONS_3'(s(fun(X18,bool),X19),s(fun('type.num.num',fun(X18,bool)),X20),s('type.num.num','const.num.|48|_0')),X18))))) | p(s(bool,'|dollar|exists_1'(s(fun(X18,bool),'const.ind_type.FCONS_3'(s(fun(X18,bool),X19),s(fun('type.num.num',fun(X18,bool)),X20),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f313,f310])).
fof(f1424,plain,(
  ( ! [X14,X17,X15,X13,X16] : (p(s(bool,'|dollar|exists_1'(s(fun(X13,bool),X15)))) | ~p(s(bool,happ(s(fun(X13,bool),X15),s(X13,sK4(X17,'const.pair.FST_1'(s('type.pair.prod'(fun(X13,bool),X14),'const.pair.,_2'(s(fun(X13,bool),X15),s(X14,X16)))),X13)))))) )),
  inference(forward_demodulation,[],[f1405,f341])).
fof(f1405,plain,(
  ( ! [X14,X17,X15,X13,X16] : (~p(s(bool,happ(s(fun(X13,bool),X15),s(X13,sK4(X17,'const.pair.FST_1'(s('type.pair.prod'(fun(X13,bool),X14),'const.pair.,_2'(s(fun(X13,bool),X15),s(X14,X16)))),X13))))) | p(s(bool,'|dollar|exists_1'(s(fun(X13,bool),'const.pair.FST_1'(s('type.pair.prod'(fun(X13,bool),X14),'const.pair.,_2'(s(fun(X13,bool),X15),s(X14,X16))))))))) )),
  inference(superposition,[],[f313,f341])).
fof(f1423,plain,(
  ( ! [X12,X10,X8,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),X11)))) | ~p(s(bool,happ(s(fun(X8,bool),X11),s(X8,sK4(X12,'const.pair.SND_1'(s('type.pair.prod'(X9,fun(X8,bool)),'const.pair.,_2'(s(X9,X10),s(fun(X8,bool),X11)))),X8)))))) )),
  inference(forward_demodulation,[],[f1404,f340])).
fof(f1404,plain,(
  ( ! [X12,X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),X11),s(X8,sK4(X12,'const.pair.SND_1'(s('type.pair.prod'(X9,fun(X8,bool)),'const.pair.,_2'(s(X9,X10),s(fun(X8,bool),X11)))),X8))))) | p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),'const.pair.SND_1'(s('type.pair.prod'(X9,fun(X8,bool)),'const.pair.,_2'(s(X9,X10),s(fun(X8,bool),X11))))))))) )),
  inference(superposition,[],[f313,f340])).
fof(f1422,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),X6)))) | ~p(s(bool,happ(s(fun(X3,bool),X6),s(X3,sK4(X7,happ(s(fun('type.list.list'(X4),fun(X3,bool)),sK16(X5,X6,X4,fun(X3,bool))),s('type.list.list'(X4),'const.list.NIL_0')),X3)))))) )),
  inference(forward_demodulation,[],[f1403,f356])).
fof(f1403,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X6),s(X3,sK4(X7,happ(s(fun('type.list.list'(X4),fun(X3,bool)),sK16(X5,X6,X4,fun(X3,bool))),s('type.list.list'(X4),'const.list.NIL_0')),X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),happ(s(fun('type.list.list'(X4),fun(X3,bool)),sK16(X5,X6,X4,fun(X3,bool))),s('type.list.list'(X4),'const.list.NIL_0'))))))) )),
  inference(superposition,[],[f313,f356])).
fof(f1421,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(forward_demodulation,[],[f1402,f303])).
fof(f1402,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))))))) )),
  inference(superposition,[],[f313,f303])).
fof(f1332,plain,(
  ( ! [X24,X23,X22] : (s(bool,X22) != s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1089,f256])).
fof(f1089,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s(bool,X22) != s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f434,f432])).
fof(f1331,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,X20) | p(s(bool,X20)) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f1088,f256])).
fof(f1088,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,X20) | p(s(bool,X20)) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f405,f432])).
fof(f1330,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f1087,f256])).
fof(f1087,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f331,f432])).
fof(f978,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X35),'const.sum.INL_1'(s(bool,X36))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f432,f336])).
fof(f977,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X32,bool),'const.sum.INR_1'(s(bool,X33))))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f432,f337])).
fof(f976,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') = s(bool,X29) | s(bool,X31) = s(bool,'const.ind_type.FCONS_3'(s(bool,X29),s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f432,f310])).
fof(f975,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'T_0') = s(bool,X26) | s(bool,X28) = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X25),'const.pair.,_2'(s(bool,X26),s(X25,X27))))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f432,f341])).
fof(f974,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X21,bool),'const.pair.,_2'(s(X21,X22),s(bool,X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f432,f340])).
fof(f973,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,happ(s(fun('type.list.list'(X17),bool),sK16(X18,X19,X17,bool)),s('type.list.list'(X17),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f432,f356])).
fof(f972,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f432,f303])).
fof(f962,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f432,f432])).
fof(f945,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X42),'const.sum.INL_1'(s(bool,X43)))))) )),
  inference(superposition,[],[f432,f336])).
fof(f944,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X39,bool),'const.sum.INR_1'(s(bool,X40)))))) )),
  inference(superposition,[],[f432,f337])).
fof(f943,plain,(
  ( ! [X37,X38,X36] : (s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X36),s(fun('type.num.num',bool),X37),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f432,f310])).
fof(f942,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,X33) = s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X32),'const.pair.,_2'(s(bool,X33),s(X32,X34)))))) )),
  inference(superposition,[],[f432,f341])).
fof(f941,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.pair.SND_1'(s('type.pair.prod'(X28,bool),'const.pair.,_2'(s(X28,X29),s(bool,X30)))))) )),
  inference(superposition,[],[f432,f340])).
fof(f940,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X24),bool),sK16(X25,X26,X24,bool)),s('type.list.list'(X24),'const.list.NIL_0')))) )),
  inference(superposition,[],[f432,f356])).
fof(f939,plain,(
  ( ! [X23,X22] : (s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22)))) )),
  inference(superposition,[],[f432,f303])).
fof(f907,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X105))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X106))) | s('type.integer.int',X106) = s('type.integer.int',happ(s(fun('type.list.list'(X103),'type.integer.int'),sK16(X104,X105,X103,'type.integer.int')),s('type.list.list'(X103),'const.list.NIL_0')))) )),
  inference(superposition,[],[f332,f356])).
fof(f829,plain,(
  ( ! [X17,X18,X16] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X17))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X18))) | s('type.integer.int',X18) = s('type.integer.int','const.sum.OUTL_1'(s('type.sum.sum'('type.integer.int',X16),'const.sum.INL_1'(s('type.integer.int',X17)))))) )),
  inference(superposition,[],[f332,f336])).
fof(f828,plain,(
  ( ! [X14,X15,X13] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X14))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X15))) | s('type.integer.int',X15) = s('type.integer.int','const.sum.OUTR_1'(s('type.sum.sum'(X13,'type.integer.int'),'const.sum.INR_1'(s('type.integer.int',X14)))))) )),
  inference(superposition,[],[f332,f337])).
fof(f827,plain,(
  ( ! [X12,X10,X11] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X10))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X12))) | s('type.integer.int',X12) = s('type.integer.int','const.ind_type.FCONS_3'(s('type.integer.int',X10),s(fun('type.num.num','type.integer.int'),X11),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f332,f310])).
fof(f826,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X9))) | s('type.integer.int',X9) = s('type.integer.int','const.pair.FST_1'(s('type.pair.prod'('type.integer.int',X6),'const.pair.,_2'(s('type.integer.int',X7),s(X6,X8)))))) )),
  inference(superposition,[],[f332,f341])).
fof(f825,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X4))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5))) | s('type.integer.int',X5) = s('type.integer.int','const.pair.SND_1'(s('type.pair.prod'(X2,'type.integer.int'),'const.pair.,_2'(s(X2,X3),s('type.integer.int',X4)))))) )),
  inference(superposition,[],[f332,f340])).
fof(f824,plain,(
  ( ! [X0,X1] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int',happ(s(fun('type.integer.int','type.integer.int'),'_i_0_0'),s('type.integer.int',X0)))) )),
  inference(superposition,[],[f332,f303])).
fof(f823,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK4(X2,X1,X0)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) )),
  inference(subsumption_resolution,[],[f822,f258])).
fof(f822,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK4(X2,X1,X0)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) )),
  inference(superposition,[],[f312,f264])).
fof(f790,plain,(
  ( ! [X4,X5] : (s(bool,X5) != s(bool,'const.ind_type.ISO_2'(s(fun(X4,X4),'_i_0_0'),s(fun(X4,X4),'_i_0_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f777,f256])).
fof(f777,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) != s(bool,'const.ind_type.ISO_2'(s(fun(X4,X4),'_i_0_0'),s(fun(X4,X4),'_i_0_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f434,f427])).
fof(f481,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f476,f258])).
fof(f476,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f328,f264])).
fof(f434,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f269,f264])).
fof(f432,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f264,f264])).
fof(f427,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.ind_type.ISO_2'(s(fun(X0,X0),'_i_0_0'),s(fun(X0,X0),'_i_0_0')))) )),
  inference(unit_resulting_resolution,[],[f259,f266])).
fof(f419,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f258,f265])).
fof(f393,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X0),s('type.list.list'('type.closSem.v'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.num.num',X4))) = s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X0))),s('type.list.list'('type.closSem.v'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3))),s('type.num.num',X4)))) )),
  inference(cnf_transformation,[],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X0),s('type.list.list'('type.closSem.v'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.num.num',X4))) = s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X0))),s('type.list.list'('type.closSem.v'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3))),s('type.num.num',X4)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X8,X34,X35,X36,X37] : s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X8),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X36),s('type.num.num',X37))) = s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num','type.closSem.v'))))),'const.closSem.Recclosure_0'),s('type.option.option'('type.num.num'),X8))),s('type.list.list'('type.closSem.v'),X34))),s('type.list.list'('type.closSem.v'),X35))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X36))),s('type.num.num',X37)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_5_const.closSem.Recclosure')).
fof(f392,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X0),s('type.list.list'('type.closSem.v'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.num.num',X3),s('type.closLang.exp',X4))) = s('type.closSem.v',happ(s(fun('type.closLang.exp','type.closSem.v'),happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X0))),s('type.list.list'('type.closSem.v'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.num.num',X3))),s('type.closLang.exp',X4)))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X0),s('type.list.list'('type.closSem.v'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.num.num',X3),s('type.closLang.exp',X4))) = s('type.closSem.v',happ(s(fun('type.closLang.exp','type.closSem.v'),happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X0))),s('type.list.list'('type.closSem.v'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.num.num',X3))),s('type.closLang.exp',X4)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X8,X34,X35,X36,X37] : s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X8),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35),s('type.num.num',X36),s('type.closLang.exp',X37))) = s('type.closSem.v',happ(s(fun('type.closLang.exp','type.closSem.v'),happ(s(fun('type.num.num',fun('type.closLang.exp','type.closSem.v')),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v')))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp','type.closSem.v'))))),'const.closSem.Closure_0'),s('type.option.option'('type.num.num'),X8))),s('type.list.list'('type.closSem.v'),X34))),s('type.list.list'('type.closSem.v'),X35))),s('type.num.num',X36))),s('type.closLang.exp',X37)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_5_const.closSem.Closure')).
fof(f390,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),happ(s(fun(X3,fun(X1,X2)),X5),s(X3,X6))))) = s(fun(X1,X0),happ(s(fun(X3,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X4),s(fun(X3,fun(X1,X2)),X5))),s(X3,X6)))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),happ(s(fun(X3,fun(X1,X2)),X5),s(X3,X6))))) = s(fun(X1,X0),happ(s(fun(X3,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X4),s(fun(X3,fun(X1,X2)),X5))),s(X3,X6)))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),happ(s(fun(X3,fun(X1,X2)),X5),s(X3,X6))))) = s(fun(X1,X0),happ(s(fun(X3,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X4),s(fun(X3,fun(X1,X2)),X5))),s(X3,X6)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X23,X24,X50,X25] : ! [X26,X27,X28] : s(fun(X24,X23),'_dst_x0x1_2'(s(fun(X50,X23),X26),s(fun(X24,X50),happ(s(fun(X25,fun(X24,X50)),X27),s(X25,X28))))) = s(fun(X24,X23),happ(s(fun(X25,fun(X24,X23)),'_dst_x00x11_2'(s(fun(X50,X23),X26),s(fun(X25,fun(X24,X50)),X27))),s(X25,X28)))),
  file('thm.closSem.v_|49||49||split|1','_dst_x00x11_ax')).
fof(f405,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1))) )),
  inference(condensation,[],[f404])).
fof(f404,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,X0) != s(bool,X2)) )),
  inference(condensation,[],[f373])).
fof(f373,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f253])).
fof(f253,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f252])).
fof(f252,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X19,X53,X20,X54] : ((s(bool,X19) = s(bool,X53) & (p(s(bool,X53)) => s(bool,X20) = s(bool,X54))) => ((p(s(bool,X19)) => p(s(bool,X20))) <=> (p(s(bool,X53)) => p(s(bool,X54)))))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.IMP_CONG')).
fof(f365,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(flattening,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X23,X24,X25] : ! [X26,X27,X28] : s(X23,happ(s(fun(X24,X23),X26),s(X24,happ(s(fun(X25,X24),X27),s(X25,X28))))) = s(X23,happ(s(fun(X25,X23),'_dst_x0x1_2'(s(fun(X24,X23),X26),s(fun(X25,X24),X27))),s(X25,X28)))),
  file('thm.closSem.v_|49||49||split|1','_dst_x0x1_ax')).
fof(f364,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),X3))) = s(fun(X1,X0),happ(s(fun(fun(X2,X0),fun(X1,X0)),'_dstsel_0_x01_1'(s(fun(X1,X2),X3))),s(fun(X2,X0),X4)))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),X3))) = s(fun(X1,X0),happ(s(fun(fun(X2,X0),fun(X1,X0)),'_dstsel_0_x01_1'(s(fun(X1,X2),X3))),s(fun(X2,X0),X4)))),
  inference(flattening,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),X3))) = s(fun(X1,X0),happ(s(fun(fun(X2,X0),fun(X1,X0)),'_dstsel_0_x01_1'(s(fun(X1,X2),X3))),s(fun(X2,X0),X4)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X23,X24,X25] : ! [X27,X28] : s(fun(X24,X23),'_dst_x0x1_2'(s(fun(X25,X23),X28),s(fun(X24,X25),X27))) = s(fun(X24,X23),happ(s(fun(fun(X25,X23),fun(X24,X23)),'_dstsel_0_x01_1'(s(fun(X24,X25),X27))),s(fun(X25,X23),X28)))),
  file('thm.closSem.v_|49||49||split|1','_dstsel_0_x01_ax')).
fof(f356,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X1),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f249])).
fof(f249,plain,(
  ! [X0,X1,X2,X3] : (s(X0,X2) = s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X1),'const.list.NIL_0'))) & ! [X5,X6] : s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),X6))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.list.list'(X1),fun(X0,X0)),happ(s(fun(X1,fun('type.list.list'(X1),fun(X0,X0))),X3),s(X1,X5))),s('type.list.list'(X1),X6))),s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X1),X6))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16])],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : (s(X0,X2) = s(X0,happ(s(fun('type.list.list'(X1),X0),X4),s('type.list.list'(X1),'const.list.NIL_0'))) & ! [X5,X6] : s(X0,happ(s(fun('type.list.list'(X1),X0),X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),X6))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.list.list'(X1),fun(X0,X0)),happ(s(fun(X1,fun('type.list.list'(X1),fun(X0,X0))),X3),s(X1,X5))),s('type.list.list'(X1),X6))),s(X0,happ(s(fun('type.list.list'(X1),X0),X4),s('type.list.list'(X1),X6))))))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0,X1] : ! [X2,X3] : ? [X4] : (s(X0,X2) = s(X0,happ(s(fun('type.list.list'(X1),X0),X4),s('type.list.list'(X1),'const.list.NIL_0'))) & ! [X5,X6] : s(X0,happ(s(fun('type.list.list'(X1),X0),X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),X6))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.list.list'(X1),fun(X0,X0)),happ(s(fun(X1,fun('type.list.list'(X1),fun(X0,X0))),X3),s(X1,X5))),s('type.list.list'(X1),X6))),s(X0,happ(s(fun('type.list.list'(X1),X0),X4),s('type.list.list'(X1),X6))))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X18,X9] : ! [X41,X11] : ? [X42] : (s(X18,X41) = s(X18,happ(s(fun('type.list.list'(X9),X18),X42),s('type.list.list'(X9),'const.list.NIL_0'))) & ! [X43,X44] : s(X18,happ(s(fun('type.list.list'(X9),X18),X42),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X43),s('type.list.list'(X9),X44))))) = s(X18,happ(s(fun(X18,X18),happ(s(fun('type.list.list'(X9),fun(X18,X18)),happ(s(fun(X9,fun('type.list.list'(X9),fun(X18,X18))),X11),s(X9,X43))),s('type.list.list'(X9),X44))),s(X18,happ(s(fun('type.list.list'(X9),X18),X42),s('type.list.list'(X9),X44))))))),
  file('thm.closSem.v_|49||49||split|1','thm.list.list_Axiom')).
fof(f357,plain,(
  ( ! [X6,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),X6))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.list.list'(X1),fun(X0,X0)),happ(s(fun(X1,fun('type.list.list'(X1),fun(X0,X0))),X3),s(X1,X5))),s('type.list.list'(X1),X6))),s(X0,happ(s(fun('type.list.list'(X1),X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X1),X6)))))) )),
  inference(cnf_transformation,[],[f249])).
fof(f351,plain,(
  ( ! [X2,X0,X5,X3,X1] : (s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f244])).
fof(f244,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) & (s(X0,happ(s(fun(X1,X0),X2),s(X1,sK13(X3,X2,X1,X0)))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,sK13(X3,X2,X1,X0)))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13])],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) & (? [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(rectify,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4)))) & (? [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(nnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2,X3] : (s(fun(X1,X0),X2) = s(fun(X1,X0),X3) <=> ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ! [X2,X3] : (s(fun(X1,X0),X2) = s(fun(X1,X0),X3) <=> ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X18,X9] : ! [X10,X40] : (s(fun(X9,X18),X10) = s(fun(X9,X18),X40) <=> ! [X19] : s(X18,happ(s(fun(X9,X18),X10),s(X9,X19))) = s(X18,happ(s(fun(X9,X18),X40),s(X9,X19))))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.FUN_EQ_THM')).
fof(f352,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X2),s(X1,sK13(X3,X2,X1,X0)))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,sK13(X3,X2,X1,X0)))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)) )),
  inference(cnf_transformation,[],[f244])).
fof(f350,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK12(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK12(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK12(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK12(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.closSem.v_|49||49||split|1',aHL_EXT)).
fof(f341,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X18,X9] : ! [X19,X20] : s(X9,X19) = s(X9,'const.pair.FST_1'(s('type.pair.prod'(X9,X18),'const.pair.,_2'(s(X9,X19),s(X18,X20)))))),
  file('thm.closSem.v_|49||49||split|1','thm.pair.FST')).
fof(f340,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X9,X18] : ! [X19,X20] : s(X18,X20) = s(X18,'const.pair.SND_1'(s('type.pair.prod'(X9,X18),'const.pair.,_2'(s(X9,X19),s(X18,X20)))))),
  file('thm.closSem.v_|49||49||split|1','thm.pair.SND')).
fof(f339,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))) )),
  inference(cnf_transformation,[],[f237])).
fof(f237,plain,(
  ! [X0,X1,X2] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK7(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : ? [X3] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),X3),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),X3),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : ! [X2] : ? [X3] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),X3),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),X3),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X18,X9] : ! [X29] : ? [X10] : ! [X30,X31,X32] : s(X18,happ(s(fun('type.ind_type.recspace'(X9),X18),X10),s('type.ind_type.recspace'(X9),'const.ind_type.CONSTR_3'(s('type.num.num',X30),s(X9,X31),s(fun('type.num.num','type.ind_type.recspace'(X9)),X32))))) = s(X18,happ(s(fun(fun('type.num.num',X18),X18),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X9)),fun(fun('type.num.num',X18),X18)),happ(s(fun(X9,fun(fun('type.num.num','type.ind_type.recspace'(X9)),fun(fun('type.num.num',X18),X18))),happ(s(fun('type.num.num',fun(X9,fun(fun('type.num.num','type.ind_type.recspace'(X9)),fun(fun('type.num.num',X18),X18)))),X29),s('type.num.num',X30))),s(X9,X31))),s(fun('type.num.num','type.ind_type.recspace'(X9)),X32))),s(fun('type.num.num',X18),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X9),X18),X10),s(fun('type.num.num','type.ind_type.recspace'(X9)),X32)))))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.CONSTR_REC')).
fof(f338,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))) = s(X0,happ(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.pair.prod'(X0,X1),X2)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))) = s(X0,happ(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.pair.prod'(X0,X1),X2)))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : ! [X2] : s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))) = s(X0,happ(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.pair.prod'(X0,X1),X2)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X9,X18] : ! [X8] : s(X9,'const.pair.FST_1'(s('type.pair.prod'(X9,X18),X8))) = s(X9,happ(s(fun('type.pair.prod'(X9,X18),X9),'const.pair.FST_0'),s('type.pair.prod'(X9,X18),X8)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_1_const.pair.FST')).
fof(f337,plain,(
  ( ! [X2,X0,X1] : (s(X1,X2) = s(X1,'const.sum.OUTR_1'(s('type.sum.sum'(X0,X1),'const.sum.INR_1'(s(X1,X2)))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : s(X1,X2) = s(X1,'const.sum.OUTR_1'(s('type.sum.sum'(X0,X1),'const.sum.INR_1'(s(X1,X2)))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : ! [X2] : s(X1,X2) = s(X1,'const.sum.OUTR_1'(s('type.sum.sum'(X0,X1),'const.sum.INR_1'(s(X1,X2)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X9,X18] : ! [X19] : s(X18,X19) = s(X18,'const.sum.OUTR_1'(s('type.sum.sum'(X9,X18),'const.sum.INR_1'(s(X18,X19)))))),
  file('thm.closSem.v_|49||49||split|1','thm.sum.OUTR')).
fof(f336,plain,(
  ( ! [X2,X0,X1] : (s(X1,X2) = s(X1,'const.sum.OUTL_1'(s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2)))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2] : s(X1,X2) = s(X1,'const.sum.OUTL_1'(s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : ! [X2] : s(X1,X2) = s(X1,'const.sum.OUTL_1'(s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2)))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X18,X9] : ! [X19] : s(X9,X19) = s(X9,'const.sum.OUTL_1'(s('type.sum.sum'(X9,X18),'const.sum.INL_1'(s(X9,X19)))))),
  file('thm.closSem.v_|49||49||split|1','thm.sum.OUTL')).
fof(f334,plain,(
  ( ! [X0,X1] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)) )),
  inference(cnf_transformation,[],[f236])).
fof(f236,plain,(
  ! [X0,X1] : ((s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) != s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)) & (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1) | s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))),
  inference(nnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) <=> s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : (s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) <=> s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))),
  file('thm.closSem.v_|49||49||split|1','thm.ast.lit_|49||49||split|4')).
fof(f335,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1) | s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))) )),
  inference(cnf_transformation,[],[f236])).
fof(f332,plain,(
  ( ! [X0,X1] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int',X1)) )),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1] : ((s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int',X1)) & (s('type.integer.int',X0) != s('type.integer.int',X1) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1)))))),
  inference(nnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) <=> s('type.integer.int',X0) = s('type.integer.int',X1))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6,X7] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) <=> s('type.integer.int',X6) = s('type.integer.int',X7))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_|49||49||split|0')).
fof(f333,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X0) != s('type.integer.int',X1) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1)))) )),
  inference(cnf_transformation,[],[f235])).
fof(f328,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f186])).
fof(f186,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X16,X17] : ((p(s(bool,X16)) => p(s(bool,X17))) => ((p(s(bool,X17)) => p(s(bool,X16))) => s(bool,X16) = s(bool,X17)))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.IMP_ANTISYM_AX')).
fof(f331,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f187])).
fof(f327,plain,(
  ( ! [X0,X1] : (s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X0),s('type.list.list'('type.closSem.v'),X1))) = s('type.closSem.v',happ(s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),X1)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X0),s('type.list.list'('type.closSem.v'),X1))) = s('type.closSem.v',happ(s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),X1)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X8,X34] : s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.closSem.v'),X34))) = s('type.closSem.v',happ(s(fun('type.list.list'('type.closSem.v'),'type.closSem.v'),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),'type.closSem.v')),'const.closSem.Block_0'),s('type.num.num',X8))),s('type.list.list'('type.closSem.v'),X34)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_2_const.closSem.Block')).
fof(f326,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(X0,happ(s(fun('type.num.num',X0),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11),s('type.option.option'('type.num.num'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))),s('type.num.num',X5))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5))),s(fun('type.integer.int',X0),X6),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X7),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X8),s(fun('type.num.num',X0),X9),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11)))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s(X0,happ(s(fun('type.num.num',X0),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11),s('type.option.option'('type.num.num'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))),s('type.num.num',X5))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5))),s(fun('type.integer.int',X0),X6),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X7),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X8),s(fun('type.num.num',X0),X9),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11)))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s(X0,happ(s(fun('type.num.num',X0),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11),s('type.option.option'('type.num.num'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))),s('type.num.num',X5))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5))),s(fun('type.integer.int',X0),X6),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X7),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X8),s(fun('type.num.num',X0),X9),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11)))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X9] : ! [X43,X44,X57,X58,X59,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.num.num',X9),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15),s('type.option.option'('type.num.num'),X43))),s('type.list.list'('type.closSem.v'),X44))),s('type.list.list'('type.closSem.v'),X57))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X58))),s('type.num.num',X59))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X43),s('type.list.list'('type.closSem.v'),X44),s('type.list.list'('type.closSem.v'),X57),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X58),s('type.num.num',X59))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_case_def|split|5')).
fof(f325,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(X0,happ(s(fun('type.closLang.exp',X0),happ(s(fun('type.num.num',fun('type.closLang.exp',X0)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s('type.option.option'('type.num.num'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.num.num',X4))),s('type.closLang.exp',X5))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.num.num',X4),s('type.closLang.exp',X5))),s(fun('type.integer.int',X0),X6),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X7),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X8),s(fun('type.num.num',X0),X9),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11)))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s(X0,happ(s(fun('type.closLang.exp',X0),happ(s(fun('type.num.num',fun('type.closLang.exp',X0)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s('type.option.option'('type.num.num'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.num.num',X4))),s('type.closLang.exp',X5))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.num.num',X4),s('type.closLang.exp',X5))),s(fun('type.integer.int',X0),X6),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X7),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X8),s(fun('type.num.num',X0),X9),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11)))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s(X0,happ(s(fun('type.closLang.exp',X0),happ(s(fun('type.num.num',fun('type.closLang.exp',X0)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s('type.option.option'('type.num.num'),X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.num.num',X4))),s('type.closLang.exp',X5))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.num.num',X4),s('type.closLang.exp',X5))),s(fun('type.integer.int',X0),X6),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X7),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X8),s(fun('type.num.num',X0),X9),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X10),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X11)))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X9] : ! [X43,X44,X57,X58,X59,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.closLang.exp',X9),happ(s(fun('type.num.num',fun('type.closLang.exp',X9)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9)))),happ(s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s('type.option.option'('type.num.num'),X43))),s('type.list.list'('type.closSem.v'),X44))),s('type.list.list'('type.closSem.v'),X57))),s('type.num.num',X58))),s('type.closLang.exp',X59))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X43),s('type.list.list'('type.closSem.v'),X44),s('type.list.list'('type.closSem.v'),X57),s('type.num.num',X58),s('type.closLang.exp',X59))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_case_def|split|4')).
fof(f324,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X5),s('type.num.num',X1))),s('type.list.list'('type.closSem.v'),X2))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.closSem.v'),X2))),s(fun('type.integer.int',X0),X3),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X4),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X5),s(fun('type.num.num',X0),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X7),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X8)))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X5),s('type.num.num',X1))),s('type.list.list'('type.closSem.v'),X2))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.closSem.v'),X2))),s(fun('type.integer.int',X0),X3),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X4),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X5),s(fun('type.num.num',X0),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X7),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X8)))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8] : s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X5),s('type.num.num',X1))),s('type.list.list'('type.closSem.v'),X2))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.closSem.v'),X2))),s(fun('type.integer.int',X0),X3),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X4),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X5),s(fun('type.num.num',X0),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X7),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X8)))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X9] : ! [X43,X44,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.list.list'('type.closSem.v'),X9),happ(s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s('type.num.num',X43))),s('type.list.list'('type.closSem.v'),X44))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X43),s('type.list.list'('type.closSem.v'),X44))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_case_def|split|2')).
fof(f322,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X9] : ! [X6,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.num.num',X9),X13),s('type.num.num',X6))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X6))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_case_def|split|3')).
fof(f321,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.integer.int',X0),X2),s('type.integer.int',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.integer.int',X0),X2),s('type.integer.int',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.integer.int',X0),X2),s('type.integer.int',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X9] : ! [X6,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.integer.int',X9),X10),s('type.integer.int',X6))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_case_def|split|0')).
fof(f320,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X9] : ! [X8,X34,X35] : s(X9,'const.ind_type.FCONS_3'(s(X9,X8),s(fun('type.num.num',X9),X34),s('type.num.num',X35))) = s(X9,happ(s(fun('type.num.num',X9),happ(s(fun(fun('type.num.num',X9),fun('type.num.num',X9)),happ(s(fun(X9,fun(fun('type.num.num',X9),fun('type.num.num',X9))),'const.ind_type.FCONS_0'),s(X9,X8))),s(fun('type.num.num',X9),X34))),s('type.num.num',X35)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_3_const.ind_type.FCONS')).
fof(f319,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3] : s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X9] : ! [X8,X34,X35] : s('type.ind_type.recspace'(X9),'const.ind_type.CONSTR_3'(s('type.num.num',X8),s(X9,X34),s(fun('type.num.num','type.ind_type.recspace'(X9)),X35))) = s('type.ind_type.recspace'(X9),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X9)),'type.ind_type.recspace'(X9)),happ(s(fun(X9,fun(fun('type.num.num','type.ind_type.recspace'(X9)),'type.ind_type.recspace'(X9))),'const.ind_type.CONSTR_1'(s('type.num.num',X8))),s(X9,X34))),s(fun('type.num.num','type.ind_type.recspace'(X9)),X35)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_1_3_const.ind_type.CONSTR')).
fof(f318,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X9] : ! [X6,X10,X33] : s(X9,happ(s(fun('type.num.num',X9),X10),s('type.num.num',X33))) = s(X9,'const.ind_type.FCONS_3'(s(X9,X6),s(fun('type.num.num',X9),X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.FCONS|split|1')).
fof(f313,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,X1,X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f231])).
fof(f310,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X9] : ! [X6,X10] : s(X9,X6) = s(X9,'const.ind_type.FCONS_3'(s(X9,X6),s(fun('type.num.num',X9),X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.FCONS|split|0')).
fof(f265,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X22] : (s(bool,'T_0') = s(bool,X22) <=> p(s(bool,X22)))),
  file('thm.closSem.v_|49||49||split|1','thm.bool.EQ_CLAUSES|split|0')).
fof(f266,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f202])).
fof(f264,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.closSem.v_|49||49||split|1',aHL_BOOL_CASES)).
fof(f263,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.closSem.v',happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.closSem.v',happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) = s('type.closSem.v',happ(s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.closSem.v'),'const.closSem.Word64_0'),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_1_const.closSem.Word64')).
fof(f262,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.closSem.v_size_1'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.closSem.v_size_1'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.closSem.v_size_1'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6)))))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_size_def|split|1')).
fof(f261,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X0))) = s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.RefPtr_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X0))) = s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.RefPtr_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X8] : s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X8))) = s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.RefPtr_0'),s('type.num.num',X8)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_1_const.closSem.RefPtr')).
fof(f260,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v',happ(s(fun('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v',happ(s(fun('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('type.integer.int',X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X8] : s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X8))) = s('type.closSem.v',happ(s(fun('type.integer.int','type.closSem.v'),'const.closSem.Number_0'),s('type.integer.int',X8)))),
  file('thm.closSem.v_|49||49||split|1','ARITY_0_1_const.closSem.Number')).
fof(f259,plain,(
  ( ! [X0] : (p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X0),'_i_0_0'),s(fun(X0,X0),'_i_0_0'))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : p(s(bool,'const.ind_type.ISO_2'(s(fun(X0,X0),'_i_0_0'),s(fun(X0,X0),'_i_0_0'))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X9] : p(s(bool,'const.ind_type.ISO_2'(s(fun(X9,X9),'_i_0_0'),s(fun(X9,X9),'_i_0_0'))))),
  file('thm.closSem.v_|49||49||split|1','thm.ind_type.ISO_REFL')).
fof(f256,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.closSem.v_|49||49||split|1',aHL_TRUTH)).
fof(f6989,plain,(
  ~p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | $spl31),
  inference(cnf_transformation,[],[f6989_D])).
fof(f6989_D,plain,(
  ~p(s(bool,sK6('_i_0_0','_i_0_0',bool))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f9659,plain,(
  ( ! [X64] : (s(bool,'T_0') = s(bool,X64)) ) | $spl32),
  inference(cnf_transformation,[],[f9659_D])).
fof(f9659_D,plain,(
  ( ! [X64] : (s(bool,'T_0') = s(bool,X64)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f34731,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | s(bool,X86) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X87)) ) | $spl50),
  inference(cnf_transformation,[],[f34731_D])).
fof(f34731_D,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | s(bool,X86) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X87)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f33805,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) != s(bool,X87) | s(bool,'F_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X85) | s(bool,X86) = s(bool,sK6('_i_0_0','_i_0_0',bool))) ) | $spl30),
  inference(duplicate_literal_removal,[],[f33255])).
fof(f33255,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) != s(bool,X87) | s(bool,'F_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X85) | s(bool,X86) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X85)) ) | $spl30),
  inference(superposition,[],[f1683,f24991])).
fof(f24991,plain,(
  ( ! [X17,X16] : (s(bool,X16) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl30),
  inference(subsumption_resolution,[],[f24926,f256])).
fof(f24926,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(bool,X16) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl30),
  inference(superposition,[],[f1330,f24630])).
fof(f24630,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | $spl30),
  inference(unit_resulting_resolution,[],[f419,f6990,f1398])).
fof(f34111,plain,(
  ( ! [X75,X73] : (s(bool,X73) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,sK6('_i_0_0','_i_0_0',bool))) ) | $spl48),
  inference(cnf_transformation,[],[f34111_D])).
fof(f34111_D,plain,(
  ( ! [X75,X73] : (s(bool,X73) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,sK6('_i_0_0','_i_0_0',bool))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f33914,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X64) = s(bool,X66) | s(bool,X64) = s(bool,sK6('_i_0_0','_i_0_0',bool))) ) | $spl30),
  inference(duplicate_literal_removal,[],[f32705])).
fof(f32705,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X64) = s(bool,X66) | s(bool,X64) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X65)) ) | $spl30),
  inference(superposition,[],[f24991,f24991])).
fof(f33924,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,sK6('_i_0_0','_i_0_0',bool))) ) | $spl30),
  inference(duplicate_literal_removal,[],[f32598])).
fof(f32598,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X67)) ) | $spl30),
  inference(superposition,[],[f24991,f24991])).
fof(f33967,plain,(
  ( ! [X74,X75,X73] : (s(bool,'T_0') = s(bool,X74) | s(bool,X73) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X75) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X73) = s(bool,X75)) ) | $spl30),
  inference(duplicate_literal_removal,[],[f32507])).
fof(f32507,plain,(
  ( ! [X74,X75,X73] : (s(bool,'T_0') = s(bool,X74) | s(bool,X73) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X74) | s(bool,X75) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,X73) = s(bool,X75)) ) | $spl30),
  inference(superposition,[],[f24991,f24991])).
fof(f24425,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | $spl46),
  inference(cnf_transformation,[],[f24425_D])).
fof(f24425_D,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f6988,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | $spl28),
  inference(cnf_transformation,[],[f6988_D])).
fof(f6988_D,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f24426,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | ($spl6 | $spl26)),
  inference(subsumption_resolution,[],[f8878,f258])).
fof(f8878,plain,(
  p(s(bool,'F_0')) | p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | ($spl6 | $spl26)),
  inference(superposition,[],[f6927,f1882])).
fof(f1882,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) | $spl6),
  inference(forward_demodulation,[],[f1782,f1455])).
fof(f1455,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | $spl6),
  inference(unit_resulting_resolution,[],[f1431,f266])).
fof(f1782,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X16)))) ) | $spl6),
  inference(superposition,[],[f1624,f303])).
fof(f1624,plain,(
  ( ! [X24] : (s(bool,X24) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X24)) ) | $spl6),
  inference(subsumption_resolution,[],[f1607,f256])).
fof(f1607,plain,(
  ( ! [X24] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X24)) ) | $spl6),
  inference(superposition,[],[f1398,f1455])).
fof(f6990,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | $spl30),
  inference(cnf_transformation,[],[f6990_D])).
fof(f6990_D,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f14180,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | $spl26),
  inference(superposition,[],[f6927,f303])).
fof(f24423,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | ($spl6 | $spl26)),
  inference(subsumption_resolution,[],[f14274,f258])).
fof(f14274,plain,(
  p(s(bool,'F_0')) | p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | ($spl6 | $spl26)),
  inference(superposition,[],[f6927,f1882])).
fof(f24148,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | s(bool,X86) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X87)) ) | $spl44),
  inference(cnf_transformation,[],[f24148_D])).
fof(f24148_D,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | s(bool,X86) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X87)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f23334,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) != s(bool,X87) | s(bool,'F_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X85) | s(bool,X86) = s(bool,sK5('_i_0_0','_i_0_0',bool))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f22829])).
fof(f22829,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) != s(bool,X87) | s(bool,'F_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X85) | s(bool,X86) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X85)) ) | $spl28),
  inference(superposition,[],[f1683,f22017])).
fof(f23586,plain,(
  ( ! [X57,X55] : (s(bool,X55) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X55) = s(bool,X57) | s(bool,X57) = s(bool,sK5('_i_0_0','_i_0_0',bool))) ) | $spl42),
  inference(cnf_transformation,[],[f23586_D])).
fof(f23586_D,plain,(
  ( ! [X57,X55] : (s(bool,X55) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X55) = s(bool,X57) | s(bool,X57) = s(bool,sK5('_i_0_0','_i_0_0',bool))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f23430,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X52) = s(bool,X54) | s(bool,X52) = s(bool,sK5('_i_0_0','_i_0_0',bool))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f22320])).
fof(f22320,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X52) = s(bool,X54) | s(bool,X52) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X53)) ) | $spl28),
  inference(superposition,[],[f22017,f22017])).
fof(f23439,plain,(
  ( ! [X61,X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,X63) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,sK5('_i_0_0','_i_0_0',bool))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f22230])).
fof(f22230,plain,(
  ( ! [X61,X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,X63) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X61)) ) | $spl28),
  inference(superposition,[],[f22017,f22017])).
fof(f23479,plain,(
  ( ! [X57,X56,X55] : (s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X57) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X55) = s(bool,X57)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f22146])).
fof(f22146,plain,(
  ( ! [X57,X56,X55] : (s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'T_0') = s(bool,X56) | s(bool,X57) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,X55) = s(bool,X57)) ) | $spl28),
  inference(superposition,[],[f22017,f22017])).
fof(f20821,plain,(
  ( ! [X0] : (p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X0),'const.min.@_1'(s(fun('type.pair.prod'(bool,X0),bool),'const.pair.FST_0'))))))) ) | $spl40),
  inference(cnf_transformation,[],[f20821_D])).
fof(f20821_D,plain,(
  ( ! [X0] : (p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X0),'const.min.@_1'(s(fun('type.pair.prod'(bool,X0),bool),'const.pair.FST_0'))))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2003,plain,(
  ( ! [X23] : (~p(s(bool,X23))) ) | $spl18),
  inference(cnf_transformation,[],[f2003_D])).
fof(f2003_D,plain,(
  ( ! [X23] : (~p(s(bool,X23))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f20819,plain,(
  ( ! [X56,X55] : (~p(s(bool,X56)) | p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X55),'const.min.@_1'(s(fun('type.pair.prod'(bool,X55),bool),'const.pair.FST_0'))))))) )),
  inference(superposition,[],[f2004,f341])).
fof(f1996,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f1996_D])).
fof(f1996_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f20820,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X0),'const.min.@_1'(s(fun('type.pair.prod'(bool,X0),bool),'const.pair.FST_0')))))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f20799,f256])).
fof(f20799,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.pair.FST_1'(s('type.pair.prod'(bool,X0),'const.min.@_1'(s(fun('type.pair.prod'(bool,X0),bool),'const.pair.FST_0')))))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f2004,f730])).
fof(f16292,plain,(
  ( ! [X41] : (s(bool,X41) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X41)) ) | $spl38),
  inference(cnf_transformation,[],[f16292_D])).
fof(f16292_D,plain,(
  ( ! [X41] : (s(bool,X41) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X41)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f16227,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X40)) ) | $spl6),
  inference(duplicate_literal_removal,[],[f16042])).
fof(f16042,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl6),
  inference(superposition,[],[f1683,f15498])).
fof(f15498,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(trivial_inequality_removal,[],[f15483])).
fof(f15483,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f15396,f432])).
fof(f15396,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | $spl6),
  inference(forward_demodulation,[],[f15306,f336])).
fof(f15306,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X0),'const.sum.INL_1'(s(bool,'F_0')))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f6008,f8969])).
fof(f8969,plain,(
  ( ! [X8] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X8))) | s(bool,'T_0') = s(bool,X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f8883,f258])).
fof(f8883,plain,(
  ( ! [X8] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X8))) | s(bool,'T_0') = s(bool,X8)) ) | $spl6),
  inference(superposition,[],[f265,f1882])).
fof(f15179,plain,(
  ( ! [X66,X65] : (s(bool,X66) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X65),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66)) ) | $spl36),
  inference(cnf_transformation,[],[f15179_D])).
fof(f15179_D,plain,(
  ( ! [X66,X65] : (s(bool,X66) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X65),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f15115,plain,(
  ( ! [X66,X64,X65] : (s(bool,X66) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X65),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X64)) )),
  inference(duplicate_literal_removal,[],[f14947])).
fof(f14947,plain,(
  ( ! [X66,X64,X65] : (s(bool,X66) != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X65),'const.sum.INL_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f1683,f6385])).
fof(f10503,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490,f10492,f10494,f10496,f10498,f10500,f10502])).
fof(f10502,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (s(X25,X32) != s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))) | s(X24,X33) = s(X24,happ(s(fun(X25,X24),X31),s(X25,X32)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10226,f256])).
fof(f10226,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'T_0')) | s(X25,X32) != s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))) | s(X24,X33) = s(X24,happ(s(fun(X25,X24),X31),s(X25,X32)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f8353])).
fof(f10500,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (s(X24,X32) != s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))) | s(X25,X33) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X32)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10225,f256])).
fof(f10225,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'T_0')) | s(X24,X32) != s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))) | s(X25,X33) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X32)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f7604])).
fof(f10498,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (s(X399,X407) = s(X399,happ(s(fun(X400,X399),X406),s(X400,happ(s(fun(X399,X400),happ(s(fun(X401,fun(X399,X400)),'_dst_x0x1_2'(s(fun(X402,fun(X399,X400)),X403),s(fun(X401,X402),X404))),s(X401,X405))),s(X399,X407)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10224,f256])).
fof(f10224,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (~p(s(bool,'T_0')) | s(X399,X407) = s(X399,happ(s(fun(X400,X399),X406),s(X400,happ(s(fun(X399,X400),happ(s(fun(X401,fun(X399,X400)),'_dst_x0x1_2'(s(fun(X402,fun(X399,X400)),X403),s(fun(X401,X402),X404))),s(X401,X405))),s(X399,X407)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6268])).
fof(f10496,plain,(
  ( ! [X383,X389,X385,X387,X382,X388,X384,X386,X381] : (s(X382,X389) = s(X382,happ(s(fun(X381,X382),happ(s(fun(X383,fun(X381,X382)),'_dst_x0x1_2'(s(fun(X384,fun(X381,X382)),X385),s(fun(X383,X384),X386))),s(X383,X387))),s(X381,happ(s(fun(X382,X381),X388),s(X382,X389)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10223,f256])).
fof(f10223,plain,(
  ( ! [X383,X389,X385,X387,X382,X388,X384,X386,X381] : (~p(s(bool,'T_0')) | s(X382,X389) = s(X382,happ(s(fun(X381,X382),happ(s(fun(X383,fun(X381,X382)),'_dst_x0x1_2'(s(fun(X384,fun(X381,X382)),X385),s(fun(X383,X384),X386))),s(X383,X387))),s(X381,happ(s(fun(X382,X381),X388),s(X382,X389)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6266])).
fof(f10494,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,X22) != s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))) | s(X14,X23) = s(X14,happ(s(fun(X15,X14),X21),s(X15,X22)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10222,f256])).
fof(f10222,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,X22) != s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))) | s(X14,X23) = s(X14,happ(s(fun(X15,X14),X21),s(X15,X22)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f8352])).
fof(f10492,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (s(X14,X22) != s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))) | s(X15,X23) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X22)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10221,f256])).
fof(f10221,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X14,X22) != s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))) | s(X15,X23) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X22)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f7603])).
fof(f10490,plain,(
  ( ! [X420,X422,X418,X424,X421,X423,X417,X419,X425] : (s(X417,X425) = s(X417,happ(s(fun(X418,X417),X424),s(X418,happ(s(fun(X417,X418),happ(s(fun(X419,fun(X417,X418)),X420),s(X419,happ(s(fun(X421,X419),X422),s(X421,X423))))),s(X417,X425)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10220,f256])).
fof(f10220,plain,(
  ( ! [X420,X422,X418,X424,X421,X423,X417,X419,X425] : (~p(s(bool,'T_0')) | s(X417,X425) = s(X417,happ(s(fun(X418,X417),X424),s(X418,happ(s(fun(X417,X418),happ(s(fun(X419,fun(X417,X418)),X420),s(X419,happ(s(fun(X421,X419),X422),s(X421,X423))))),s(X417,X425)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6190])).
fof(f10488,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (s(X400,X407) = s(X400,happ(s(fun(X399,X400),happ(s(fun(X401,fun(X399,X400)),X402),s(X401,happ(s(fun(X403,X401),X404),s(X403,X405))))),s(X399,happ(s(fun(X400,X399),X406),s(X400,X407)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10219,f256])).
fof(f10219,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (~p(s(bool,'T_0')) | s(X400,X407) = s(X400,happ(s(fun(X399,X400),happ(s(fun(X401,fun(X399,X400)),X402),s(X401,happ(s(fun(X403,X401),X404),s(X403,X405))))),s(X399,happ(s(fun(X400,X399),X406),s(X400,X407)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6188])).
fof(f10486,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (s(X24,X32) != s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))) | s(X25,X33) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X32)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10218,f256])).
fof(f10218,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'T_0')) | s(X24,X32) != s(X24,happ(s(fun(X25,X24),X31),s(X25,X33))) | s(X25,X33) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X32)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f8366])).
fof(f10484,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (s(X25,X32) != s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))) | s(X24,X33) = s(X24,happ(s(fun(X25,X24),X31),s(X25,X32)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10217,f256])).
fof(f10217,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (~p(s(bool,'T_0')) | s(X25,X32) != s(X25,happ(s(fun(X24,X25),happ(s(fun(X26,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X27,fun(X24,X25)),X28),s(fun(X26,X27),X29))),s(X26,X30))),s(X24,X33))) | s(X24,X33) = s(X24,happ(s(fun(X25,X24),X31),s(X25,X32)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f7617])).
fof(f10482,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (s(X409,X416) = s(X409,happ(s(fun(X408,X409),happ(s(fun(X410,fun(X408,X409)),'_dst_x0x1_2'(s(fun(X411,fun(X408,X409)),X412),s(fun(X410,X411),X413))),s(X410,X414))),s(X408,happ(s(fun(X409,X408),X415),s(X409,X416)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10216,f256])).
fof(f10216,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (~p(s(bool,'T_0')) | s(X409,X416) = s(X409,happ(s(fun(X408,X409),happ(s(fun(X410,fun(X408,X409)),'_dst_x0x1_2'(s(fun(X411,fun(X408,X409)),X412),s(fun(X410,X411),X413))),s(X410,X414))),s(X408,happ(s(fun(X409,X408),X415),s(X409,X416)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6269])).
fof(f10480,plain,(
  ( ! [X391,X397,X393,X395,X390,X396,X398,X392,X394] : (s(X390,X398) = s(X390,happ(s(fun(X391,X390),X397),s(X391,happ(s(fun(X390,X391),happ(s(fun(X392,fun(X390,X391)),'_dst_x0x1_2'(s(fun(X393,fun(X390,X391)),X394),s(fun(X392,X393),X395))),s(X392,X396))),s(X390,X398)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10215,f256])).
fof(f10215,plain,(
  ( ! [X391,X397,X393,X395,X390,X396,X398,X392,X394] : (~p(s(bool,'T_0')) | s(X390,X398) = s(X390,happ(s(fun(X391,X390),X397),s(X391,happ(s(fun(X390,X391),happ(s(fun(X392,fun(X390,X391)),'_dst_x0x1_2'(s(fun(X393,fun(X390,X391)),X394),s(fun(X392,X393),X395))),s(X392,X396))),s(X390,X398)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6267])).
fof(f10478,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (s(X14,X22) != s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))) | s(X15,X23) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X22)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10214,f256])).
fof(f10214,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X14,X22) != s(X14,happ(s(fun(X15,X14),X21),s(X15,X23))) | s(X15,X23) = s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X22)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f8365])).
fof(f10476,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,X22) != s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))) | s(X14,X23) = s(X14,happ(s(fun(X15,X14),X21),s(X15,X22)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10213,f256])).
fof(f10213,plain,(
  ( ! [X14,X23,X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,X22) != s(X15,happ(s(fun(X14,X15),happ(s(fun(X16,fun(X14,X15)),X17),s(X16,happ(s(fun(X18,X16),X19),s(X18,X20))))),s(X14,X23))) | s(X14,X23) = s(X14,happ(s(fun(X15,X14),X21),s(X15,X22)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f7616])).
fof(f10474,plain,(
  ( ! [X428,X430,X426,X432,X434,X429,X431,X427,X433] : (s(X427,X434) = s(X427,happ(s(fun(X426,X427),happ(s(fun(X428,fun(X426,X427)),X429),s(X428,happ(s(fun(X430,X428),X431),s(X430,X432))))),s(X426,happ(s(fun(X427,X426),X433),s(X427,X434)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10212,f256])).
fof(f10212,plain,(
  ( ! [X428,X430,X426,X432,X434,X429,X431,X427,X433] : (~p(s(bool,'T_0')) | s(X427,X434) = s(X427,happ(s(fun(X426,X427),happ(s(fun(X428,fun(X426,X427)),X429),s(X428,happ(s(fun(X430,X428),X431),s(X430,X432))))),s(X426,happ(s(fun(X427,X426),X433),s(X427,X434)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6191])).
fof(f10472,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (s(X408,X416) = s(X408,happ(s(fun(X409,X408),X415),s(X409,happ(s(fun(X408,X409),happ(s(fun(X410,fun(X408,X409)),X411),s(X410,happ(s(fun(X412,X410),X413),s(X412,X414))))),s(X408,X416)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10211,f256])).
fof(f10211,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (~p(s(bool,'T_0')) | s(X408,X416) = s(X408,happ(s(fun(X409,X408),X415),s(X409,happ(s(fun(X408,X409),happ(s(fun(X410,fun(X408,X409)),X411),s(X410,happ(s(fun(X412,X410),X413),s(X412,X414))))),s(X408,X416)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6189])).
fof(f10468,plain,(
  ( ! [X6,X2,X0,X3,X1] : (s(X1,X6) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10206,f256])).
fof(f10206,plain,(
  ( ! [X6,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X1,X6) = s(X1,happ(s(fun(X0,X1),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f354])).
fof(f10466,plain,(
  ( ! [X2,X0,X7,X3,X1] : (s(X0,X7) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X7)))))) ) | $spl32),
  inference(subsumption_resolution,[],[f10205,f256])).
fof(f10205,plain,(
  ( ! [X2,X0,X7,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X7) = s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X0,X1),X3),s(X0,X7)))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f353])).
fof(f10464,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,X5) != s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))) | s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10204,f256])).
fof(f10204,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s(X1,X5) != s(X1,happ(s(fun(X0,X1),X3),s(X0,X4))) | s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f349])).
fof(f10462,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) | s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4)))) ) | $spl32),
  inference(subsumption_resolution,[],[f10203,f256])).
fof(f10203,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) | s(X1,X5) = s(X1,happ(s(fun(X0,X1),X3),s(X0,X4)))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f348])).
fof(f10246,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(subsumption_resolution,[],[f9726,f9659])).
fof(f9726,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f269])).
fof(f10501,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490,f10492,f10494,f10496,f10498,f10500])).
fof(f10499,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490,f10492,f10494,f10496,f10498])).
fof(f10497,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490,f10492,f10494,f10496])).
fof(f10495,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490,f10492,f10494])).
fof(f10493,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490,f10492])).
fof(f10491,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488,f10490])).
fof(f10489,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486,f10488])).
fof(f10487,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484,f10486])).
fof(f10485,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482,f10484])).
fof(f10483,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480,f10482])).
fof(f10481,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478,f10480])).
fof(f10479,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476,f10478])).
fof(f10477,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474,f10476])).
fof(f10475,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472,f10474])).
fof(f10473,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468,f10472])).
fof(f10469,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466,f10468])).
fof(f10467,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464,f10466])).
fof(f10465,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462,f10464])).
fof(f10463,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246,f10462])).
fof(f10261,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f10260,f256])).
fof(f10260,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(forward_demodulation,[],[f10259,f9659])).
fof(f10259,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,happ(s(fun(X110,bool),'_dst_x0x1_2'(s(fun(X111,bool),X112),s(fun(X110,X111),X113))),s(X110,X114))))) ) | $spl32),
  inference(subsumption_resolution,[],[f9900,f9659])).
fof(f9900,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'T_0') != s(bool,happ(s(fun(X111,bool),X112),s(X111,happ(s(fun(X110,X111),X113),s(X110,X114))))) | ~p(s(bool,happ(s(fun(X110,bool),'_dst_x0x1_2'(s(fun(X111,bool),X112),s(fun(X110,X111),X113))),s(X110,X114))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6222])).
fof(f10258,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f10257,f256])).
fof(f10257,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(forward_demodulation,[],[f10256,f9659])).
fof(f10256,plain,(
  ( ! [X121,X118,X122,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),X119),s(X118,happ(s(fun(X120,X118),X121),s(X120,X122))))))) ) | $spl32),
  inference(subsumption_resolution,[],[f9888,f9659])).
fof(f9888,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,'T_0') != s(bool,happ(s(fun(X120,bool),'_dst_x0x1_2'(s(fun(X118,bool),X119),s(fun(X120,X118),X121))),s(X120,X122))) | ~p(s(bool,happ(s(fun(X118,bool),X119),s(X118,happ(s(fun(X120,X118),X121),s(X120,X122))))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6143])).
fof(f10255,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f9883,f9659])).
fof(f9883,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.sum.OUTL_1'(s('type.sum.sum'(bool,X0),'const.sum.INL_1'(s(bool,'T_0')))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f6008])).
fof(f10254,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f9879,f9659])).
fof(f9879,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X0,bool),'const.sum.INR_1'(s(bool,'T_0')))))) ) | $spl32),
  inference(backward_demodulation,[],[f9659,f5699])).
fof(f10247,plain,(
  $false | $spl32),
  inference(global_subsumption,[],[f255,f254,f256,f258,f259,f260,f261,f262,f263,f264,f266,f265,f270,f269,f303,f310,f313,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f331,f328,f333,f332,f335,f334,f336,f337,f338,f339,f340,f341,f350,f352,f351,f357,f356,f364,f365,f405,f390,f392,f393,f419,f427,f432,f434,f459,f481,f500,f527,f620,f673,f730,f790,f823,f824,f825,f826,f827,f828,f829,f882,f907,f939,f940,f941,f942,f943,f944,f945,f962,f972,f973,f974,f975,f976,f977,f978,f1330,f1331,f1332,f1391,f1392,f1393,f1394,f1395,f1396,f1398,f1400,f1401,f1421,f1422,f1423,f1424,f1425,f1426,f1427,f1409,f1411,f1413,f1428,f1432,f1420,f1556,f1592,f1579,f1618,f1623,f1625,f1679,f1682,f1683,f1995,f2002,f2230,f2206,f2544,f2545,f2547,f2548,f2549,f2551,f2552,f2569,f2570,f2572,f2573,f2574,f2576,f2577,f3284,f3285,f3286,f3411,f3413,f3414,f3415,f3417,f3418,f3493,f3577,f3579,f3580,f3581,f3583,f3584,f3660,f3663,f3664,f3665,f3719,f3721,f3722,f3727,f3728,f3739,f3749,f3808,f3931,f4029,f4023,f4147,f4227,f4201,f4002,f391,f355,f354,f353,f349,f348,f4030,f3904,f3944,f3676,f3680,f3683,f3682,f3681,f3679,f3678,f3677,f3675,f3674,f1980,f2498,f2502,f347,f344,f3925,f3805,f2001,f346,f345,f315,f314,f311,f2505,f2504,f2503,f2501,f2500,f2499,f2497,f2496,f407,f305,f3295,f3296,f3297,f4228,f4520,f3905,f3578,f3412,f2571,f2546,f2004,f1571,f1547,f1545,f1543,f3582,f3416,f2575,f2550,f2192,f2168,f2166,f2164,f3747,f3742,f3959,f3969,f4158,f4168,f3741,f3738,f3850,f3724,f3723,f3720,f3718,f3713,f3712,f3710,f3709,f3708,f3707,f3706,f3740,f821,f820,f2201,f819,f818,f817,f1575,f903,f816,f3807,f3806,f312,f4965,f4974,f4975,f4979,f4982,f4983,f4987,f4955,f4956,f4957,f4958,f4959,f4960,f4961,f4962,f4963,f4964,f5410,f5411,f5412,f5413,f5414,f5415,f5418,f5495,f5501,f5598,f5599,f5600,f5601,f5602,f5603,f5606,f5684,f5690,f5699,f5733,f5734,f5735,f5736,f5737,f5738,f5739,f5740,f5741,f5800,f5801,f5822,f5855,f5902,f6008,f5975,f5976,f5977,f5978,f5979,f5980,f5981,f5982,f5983,f6018,f6017,f6019,f6020,f6021,f6022,f6023,f6024,f6025,f6026,f6027,f6037,f6138,f6139,f6141,f6142,f6143,f6144,f6145,f6147,f6148,f6153,f6154,f6155,f6156,f6157,f6158,f6159,f6160,f6161,f6164,f6165,f6173,f6176,f6177,f6181,f6182,f6183,f6184,f6185,f6186,f6188,f6189,f6190,f6191,f6198,f6200,f6216,f6217,f6218,f6220,f6221,f6222,f6223,f6224,f6226,f6227,f6232,f6233,f6234,f6235,f6236,f6237,f6238,f6239,f6240,f6243,f6244,f6252,f6255,f6256,f6259,f6260,f6261,f6262,f6263,f6264,f6266,f6267,f6268,f6269,f6276,f6278,f6337,f6385,f6562,f6915,f6916,f6828,f6829,f6917,f6918,f6919,f6920,f6921,f6922,f6923,f6924,f6838,f6926,f6928,f6933,f6903,f6904,f6905,f6934,f7102,f7103,f7063,f7064,f7104,f7105,f7106,f7107,f7108,f7109,f7110,f7111,f7073,f7074,f7075,f7076,f7116,f7117,f7124,f7100,f7125,f7371,f7372,f7292,f7293,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7302,f7303,f7304,f7305,f7306,f7307,f7308,f7309,f7319,f7320,f7321,f7322,f7323,f7384,f7385,f7326,f7327,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7336,f7337,f7338,f7339,f7349,f7350,f7351,f7352,f7353,f7354,f7355,f7365,f7366,f7367,f7368,f7369,f7603,f7604,f7613,f7616,f7617,f7626,f7660,f7661,f8352,f8353,f8362,f8365,f8366,f8375,f8411,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8682,f8683,f8656,f8657,f8684,f8685,f8686,f8687,f8688,f8689,f8690,f8691,f8666,f8693,f8694,f8988,f8989,f8990,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9029,f9030,f9003,f9004,f9031,f9032,f9033,f9034,f9035,f9036,f9037,f9038,f9013,f9040,f9041,f9266,f9267,f9268,f9269,f9270,f9271,f9272,f9273,f9274,f9275,f9276,f9277,f9278,f9307,f9308,f9281,f9282,f9309,f9310,f9311,f9312,f9313,f9314,f9315,f9316,f9291,f9318,f9319,f9364,f9367,f9369,f9370,f9371,f9373,f9374,f9375,f9597,f9659,f10246])).
fof(f10245,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f9725,f256])).
fof(f9725,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(backward_demodulation,[],[f9659,f258])).
fof(f9660,plain,(
  ( ! [X66,X65] : (s(bool,X66) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X65,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66)) ) | $spl34),
  inference(cnf_transformation,[],[f9660_D])).
fof(f9660_D,plain,(
  ( ! [X66,X65] : (s(bool,X66) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X65,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f9597,plain,(
  ( ! [X66,X64,X65] : (s(bool,X66) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X65,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X64)) )),
  inference(duplicate_literal_removal,[],[f9431])).
fof(f9431,plain,(
  ( ! [X66,X64,X65] : (s(bool,X66) != s(bool,'const.sum.OUTR_1'(s('type.sum.sum'(X65,bool),'const.sum.INR_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f1683,f5902])).
fof(f6973,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | $spl26),
  inference(superposition,[],[f6927,f303])).
fof(f6927,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK6('_i_0_0',X1,bool))))) | p(s(bool,sK5('_i_0_0',X1,bool)))) ) | $spl26),
  inference(cnf_transformation,[],[f6927_D])).
fof(f6927_D,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK6('_i_0_0',X1,bool))))) | p(s(bool,sK5('_i_0_0',X1,bool)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f6933,plain,(
  ( ! [X59,X60] : (p(s(bool,sK5('_i_0_0',X60,bool))) | ~p(s(bool,X59)) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,sK6('_i_0_0',X60,bool)))))) )),
  inference(forward_demodulation,[],[f6902,f303])).
fof(f6902,plain,(
  ( ! [X59,X60] : (~p(s(bool,X59)) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,sK6('_i_0_0',X60,bool))))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK5('_i_0_0',X60,bool)))))) )),
  inference(superposition,[],[f314,f303])).
fof(f6926,plain,(
  ( ! [X0,X1] : (p(s(bool,sK5('_i_0_0',X1,bool))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK6('_i_0_0',X1,bool))))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f6925,f303])).
fof(f6925,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK6('_i_0_0',X1,bool))))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK5('_i_0_0',X1,bool))))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f6889,f256])).
fof(f6889,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK6('_i_0_0',X1,bool))))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK5('_i_0_0',X1,bool))))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f314,f459])).
fof(f4985,plain,(
  ( ! [X88,X89] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X88),bool),sK16(X89,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')),X88,bool))))) ) | $spl24),
  inference(cnf_transformation,[],[f4985_D])).
fof(f4985_D,plain,(
  ( ! [X88,X89] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X88),bool),sK16(X89,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')),X88,bool))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f4984,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X88),bool),sK16(X89,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')),X88,bool))))) ) | $spl16),
  inference(subsumption_resolution,[],[f4952,f269])).
fof(f4952,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X88),bool),sK16(X89,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')),X88,bool)))) | s(bool,'F_0') = s(bool,X87)) ) | $spl16),
  inference(superposition,[],[f3944,f2114])).
fof(f2114,plain,(
  ( ! [X8] : (s(bool,X8) = s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X8)) ) | $spl16),
  inference(subsumption_resolution,[],[f2085,f256])).
fof(f2085,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s(bool,X8) = s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X8)) ) | $spl16),
  inference(superposition,[],[f1398,f2027])).
fof(f2027,plain,(
  s(bool,'T_0') = s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0'))) | $spl16),
  inference(unit_resulting_resolution,[],[f419,f1998,f1398])).
fof(f4977,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X69),bool),sK16(X70,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')),X69,bool))))) ) | $spl22),
  inference(cnf_transformation,[],[f4977_D])).
fof(f4977_D,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X69),bool),sK16(X70,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')),X69,bool))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f4976,plain,(
  ( ! [X70,X68,X69] : (~p(s(bool,X68)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X69),bool),sK16(X70,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')),X69,bool))))) ) | $spl6),
  inference(subsumption_resolution,[],[f4946,f269])).
fof(f4946,plain,(
  ( ! [X70,X68,X69] : (~p(s(bool,X68)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X69),bool),sK16(X70,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')),X69,bool)))) | s(bool,'F_0') = s(bool,X68)) ) | $spl6),
  inference(superposition,[],[f3944,f1624])).
fof(f4519,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f4243,f258])).
fof(f4243,plain,(
  p(s(bool,'F_0')) | $spl18),
  inference(unit_resulting_resolution,[],[f419,f2003,f328])).
fof(f4518,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f4249,f258])).
fof(f4249,plain,(
  p(s(bool,'F_0')) | $spl18),
  inference(unit_resulting_resolution,[],[f419,f2003,f328])).
fof(f4516,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f4501,f258])).
fof(f4501,plain,(
  p(s(bool,'F_0')) | $spl18),
  inference(backward_demodulation,[],[f4303,f4030])).
fof(f4303,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(unit_resulting_resolution,[],[f336,f2003,f1400])).
fof(f4424,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f4423,f419])).
fof(f4423,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl18),
  inference(forward_demodulation,[],[f4306,f427])).
fof(f4306,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.ind_type.ISO_2'(s(fun(X0,X0),'_i_0_0'),s(fun(X0,X0),'_i_0_0')))) ) | $spl18),
  inference(unit_resulting_resolution,[],[f427,f2003,f1400])).
fof(f4422,plain,(
  $false | ($spl6 | $spl18)),
  inference(subsumption_resolution,[],[f4421,f419])).
fof(f4421,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl6 | $spl18)),
  inference(forward_demodulation,[],[f4307,f1455])).
fof(f4307,plain,(
  s(bool,'F_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | ($spl6 | $spl18)),
  inference(unit_resulting_resolution,[],[f1455,f2003,f1400])).
fof(f4420,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f4419,f419])).
fof(f4419,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl18),
  inference(forward_demodulation,[],[f4308,f4029])).
fof(f4308,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'|dollar|exists_1'(s(fun('type.list.list'(X0),bool),sK16(X1,'T_0',X0,bool))))) ) | $spl18),
  inference(unit_resulting_resolution,[],[f4029,f2003,f1400])).
fof(f4418,plain,(
  $false | ($spl16 | $spl18)),
  inference(subsumption_resolution,[],[f4417,f419])).
fof(f4417,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl16 | $spl18)),
  inference(forward_demodulation,[],[f4309,f2027])).
fof(f4309,plain,(
  s(bool,'F_0') = s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0'))) | ($spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f2027,f2003,f1400])).
fof(f4325,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f2003,f3904])).
fof(f4320,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f427,f419,f2003,f1400])).
fof(f4292,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f419,f419,f2003,f481])).
fof(f4273,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f336,f2003,f405])).
fof(f4271,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f337,f2003,f405])).
fof(f4269,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f310,f2003,f405])).
fof(f4267,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f341,f2003,f405])).
fof(f4265,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f340,f2003,f405])).
fof(f4263,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f356,f2003,f405])).
fof(f4261,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f303,f2003,f405])).
fof(f4259,plain,(
  $false | ($spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f256,f2027,f2003,f405])).
fof(f4257,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f4029,f2003,f405])).
fof(f4255,plain,(
  $false | ($spl6 | $spl18)),
  inference(unit_resulting_resolution,[],[f256,f1455,f2003,f405])).
fof(f4253,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f427,f2003,f405])).
fof(f4250,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f258,f419,f2003,f328])).
fof(f4248,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f2003,f419,f2003,f328])).
fof(f4244,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f258,f419,f2003,f328])).
fof(f4242,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f2003,f419,f2003,f328])).
fof(f4238,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f419,f2003,f270])).
fof(f4236,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f427,f2003,f265])).
fof(f4234,plain,(
  $false | $spl18),
  inference(unit_resulting_resolution,[],[f256,f2003])).
fof(f4233,plain,(
  ( ! [X30] : (p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X30),bool),'const.pair.FST_0'))))) ) | $spl20),
  inference(cnf_transformation,[],[f4233_D])).
fof(f4233_D,plain,(
  ( ! [X30] : (p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X30),bool),'const.pair.FST_0'))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f4227,plain,(
  ( ! [X30,X31] : (~p(s(bool,X31)) | p(s(bool,'|dollar|exists_1'(s(fun('type.pair.prod'(bool,X30),bool),'const.pair.FST_0'))))) )),
  inference(superposition,[],[f3905,f341])).
fof(f1998,plain,(
  p(s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')))) | $spl16),
  inference(cnf_transformation,[],[f1998_D])).
fof(f1998_D,plain,(
  p(s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2002,plain,(
  ( ! [X23] : (p(s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')))) | ~p(s(bool,X23))) )),
  inference(forward_demodulation,[],[f1979,f303])).
fof(f1979,plain,(
  ( ! [X23] : (~p(s(bool,X23)) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0'))))))) )),
  inference(superposition,[],[f311,f303])).
fof(f1995,plain,(
  ( ! [X0] : (p(s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f1994,f303])).
fof(f1994,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')))))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f1972,f256])).
fof(f1972,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.min.@_1'(s(fun(bool,bool),'_i_0_0')))))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f311,f459])).
fof(f1680,plain,(
  ( ! [X6,X8] : (s(bool,X6) != s(bool,X8) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X8)) ) | $spl10),
  inference(cnf_transformation,[],[f1680_D])).
fof(f1680_D,plain,(
  ( ! [X6,X8] : (s(bool,X6) != s(bool,X8) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X8)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1681,plain,(
  ( ! [X7] : (p(s(bool,X7))) ) | $spl12),
  inference(cnf_transformation,[],[f1681_D])).
fof(f1681_D,plain,(
  ( ! [X7] : (p(s(bool,X7))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1682,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1654,f265])).
fof(f1654,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f1400,f432])).
fof(f1679,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f1653,f265])).
fof(f1653,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f1400,f432])).
fof(f1431,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | $spl6),
  inference(cnf_transformation,[],[f1431_D])).
fof(f1431_D,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1433,plain,(
  ( ! [X20] : (~p(s(bool,sK4(X20,'_i_0_0',bool)))) ) | $spl8),
  inference(cnf_transformation,[],[f1433_D])).
fof(f1433_D,plain,(
  ( ! [X20] : (~p(s(bool,sK4(X20,'_i_0_0',bool)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1420,plain,(
  ( ! [X20] : (~p(s(bool,sK4(X20,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f313,f303])).
fof(f1429,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) ) | $spl4),
  inference(cnf_transformation,[],[f1429_D])).
fof(f1429_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1428,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f1414,f256])).
fof(f1414,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f313,f459])).
fof(f418,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f417])).
fof(f417,plain,(
  s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f414,f415])).
fof(f413,plain,(
  s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) | $spl0),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f415,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) | $spl2),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f254,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) | s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1)))),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1)) & (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f200])).
fof(f200,plain,(
  ? [X0,X1] : ((s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)) & (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))),
  inference(nnf_transformation,[],[f174])).
fof(f174,plain,(
  ? [X0,X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) <~> s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) <=> s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) <=> s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) <=> s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))),
  file('thm.closSem.v_|49||49||split|1','thm.closSem.v_|49||49||split|1')).
fof(f414,plain,(
  s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) | $spl1),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f416,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) | $spl3),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f255,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1) | s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK0))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK1)))),
  inference(cnf_transformation,[],[f201])).
% SZS output end Proof for thm.closSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 212
% Passive clauses: 2483
% Generated clauses: 35870
% Final active clauses: 138
% Final passive clauses: 1545
% Input formulas: 69
% Initial clauses: 140
% 
% Duplicate literals: 1397
% Trivial inequalities: 351
% Fw subsumption resolutions: 2202
% Fw demodulations: 5682
% Bw demodulations: 636
% Condensations: 2417
% Global subsumptions: 27
% 
% Simple tautologies: 391
% Equational tautologies: 173
% Forward subsumptions: 20563
% Fw demodulations to eq. taut.: 117
% Bw demodulations to eq. taut.: 69
% 
% Unit resulting resolution: 1444
% Factoring: 1
% Forward superposition: 9814
% Backward superposition: 10607
% Self superposition: 277
% Equality factoring: 146
% Equality resolution: 29
% 
% Split clauses: 30
% Split components: 60
% SAT solver clauses: 2630
% SAT solver unit clauses: 181
% SAT solver binary clauses: 892
% 
% Sat splits: 30
% Sat splitting refutations: 58
% 
% Memory used [KB]: 48613
% Time elapsed: 1.796 s
% ------------------------------
% ------------------------------
% Success in time 3.12 s
