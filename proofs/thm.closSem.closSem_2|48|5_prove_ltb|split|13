Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closSem
% (115875)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 103
% Passive clauses: 4217
% Generated clauses: 15224
% Final active clauses: 89
% Final passive clauses: 3937
% Input formulas: 21
% Initial clauses: 30
% 
% Duplicate literals: 650
% Trivial inequalities: 67
% Fw subsumption resolutions: 1860
% Fw demodulations: 683
% Bw demodulations: 10
% 
% Simple tautologies: 177
% Equational tautologies: 79
% Forward subsumptions: 6465
% 
% Binary resolution: 635
% Factoring: 4
% Forward superposition: 6141
% Backward superposition: 5038
% Self superposition: 283
% Equality factoring: 178
% Equality resolution: 7
% 
% Split clauses: 494
% Split components: 990
% SAT solver clauses: 1163
% SAT solver unit clauses: 16
% SAT solver binary clauses: 200
% 
% Sat splits: 494
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1162
% TWLsolver calls for satisfiability: 156
% 
% Memory used [KB]: 9850
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closSem
% SZS output start Proof for thm.closSem
fof(f124,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f123,f66,f97,f78,f107])).
fof(f107,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X3),s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X2)))) ) | $spl14),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X3),s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f78,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X3),s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X3),s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X2)))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X3),s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X1),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X10] : ! [X11,X7,X12] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X10)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X12),s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X10),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X10),X7)))),
  file('thm.closSem.closSem_2|48|5_prove_ltb|split|13','thm.closSem.evaluate_app_NIL')).
fof(f97,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK2),s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(sK0),sK1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(sK0),sK1))) | $spl1),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK2),s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(sK0),sK1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(sK0),sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f66,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK2),s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(sK0),sK1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(sK0),sK1)))),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK2),s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(sK0),sK1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f52])).
fof(f52,plain,(
  ? [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X2),s('type.closSem.v',X3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X1)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X2),s('type.closSem.v',X3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X1)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X2),s('type.closSem.v',X3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X3),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X8),s('type.closSem.v',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X6),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X8),s('type.closSem.v',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.closSem.state'(X6),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))),s('type.closSem.state'(X6),X7)))),
  file('thm.closSem.closSem_2|48|5_prove_ltb|split|13','thm.closSem.closSem_2|48|5_prove_ltb|split|13')).
fof(f123,plain,(
  $false | ($spl1 | $spl14)),
  inference(subsumption_resolution,[],[f97,f107])).
% SZS output end Proof for thm.closSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 22
% Generated clauses: 55
% Final passive clauses: 22
% Input formulas: 21
% Initial clauses: 30
% 
% Fw subsumption resolutions: 1
% Global subsumptions: 1
% 
% Simple tautologies: 5
% 
% SAT solver clauses: 57
% SAT solver unit clauses: 40
% SAT solver binary clauses: 10
% SAT solver learnt clauses: 3
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 52
% TWLsolver calls for satisfiability: 110
% 
% Memory used [KB]: 767
% Time elapsed: 0.003 s
% ------------------------------
% ------------------------------
% Success in time 0.615 s
