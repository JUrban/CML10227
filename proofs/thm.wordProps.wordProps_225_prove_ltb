Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f4052,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4051,f224,f413,f411,f409,f407,f405,f403,f4049,f4048,f3622,f227,f402,f4050])).
fof(f4050,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f409,f226])).
fof(f226,plain,(
  ( ! [X14,X12,X13,X11] : (s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.num.num',X14)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.asm.inst'(sK12),'const.asm.Skip_0') = s('type.asm.inst'(sK12),sK13) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK14),s('type.fcp.cart'(bool,sK12),sK15))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK16),s('type.num.num',sK17),s('type.num.num',sK18),s('type.asm.reg_imm'(sK12),sK19))))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK20),s('type.num.num',sK21),s('type.num.num',sK22),s('type.num.num',sK23))))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.num.num',sK27))))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK28),s('type.num.num',sK29),s('type.asm.addr'(sK12),sK30)))) & ! [X15,X16,X17,X18] : s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X15),s('type.num.num',X16),s('type.num.num',X17),s('type.asm.reg_imm'(sK12),X18))))) & ! [X11,X12,X13,X14] : s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.num.num',X14))))) & s('type.asm.inst'(sK12),'const.asm.Skip_0') != s('type.asm.inst'(sK12),sK13) & ! [X9,X10] : s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,sK12),X10))) & ! [X5,X6,X7,X8] : s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))))) & ! [X2,X3,X4] : s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(sK12),X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X34,X35] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X34),s('type.fcp.cart'(bool,X0),X35))) | ? [X30,X31,X32,X33] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X30),s('type.num.num',X31),s('type.num.num',X32),s('type.asm.reg_imm'(X0),X33))))) | ? [X26,X27,X28,X29] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X26),s('type.num.num',X27),s('type.num.num',X28),s('type.num.num',X29))))) | ? [X22,X23,X24,X25] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))) | ? [X19,X20,X21] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X19),s('type.num.num',X20),s('type.asm.addr'(X0),X21)))) & ! [X15,X16,X17,X18] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X15),s('type.num.num',X16),s('type.num.num',X17),s('type.asm.reg_imm'(X0),X18))))) & ! [X11,X12,X13,X14] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.num.num',X14))))) & s('type.asm.inst'(X0),'const.asm.Skip_0') != s('type.asm.inst'(X0),X1) & ! [X9,X10] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X0),X10))) & ! [X5,X6,X7,X8] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))))) & ! [X2,X3,X4] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),X4))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X17,X18] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X17),s('type.fcp.cart'(bool,X0),X18))) | ? [X13,X14,X15,X16] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16))))) | ? [X9,X10,X11,X12] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12))))) | ? [X5,X6,X7,X8] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))))) | ? [X2,X3,X4] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),X4)))) & ! [X32,X33,X34,X35] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))) & ! [X28,X29,X30,X31] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.num.num',X31))))) & s('type.asm.inst'(X0),'const.asm.Skip_0') != s('type.asm.inst'(X0),X1) & ! [X26,X27] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X26),s('type.fcp.cart'(bool,X0),X27))) & ! [X22,X23,X24,X25] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))) & ! [X19,X20,X21] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X19),s('type.num.num',X20),s('type.asm.addr'(X0),X21))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X17,X18] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X17),s('type.fcp.cart'(bool,X0),X18))) | ? [X13,X14,X15,X16] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16))))) | ? [X9,X10,X11,X12] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12))))) | ? [X5,X6,X7,X8] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))))) | ? [X2,X3,X4] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),X4)))) & (! [X32,X33,X34,X35] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))) & ! [X28,X29,X30,X31] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.num.num',X31))))) & s('type.asm.inst'(X0),'const.asm.Skip_0') != s('type.asm.inst'(X0),X1) & ! [X26,X27] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X26),s('type.fcp.cart'(bool,X0),X27))) & ! [X22,X23,X24,X25] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))) & ! [X19,X20,X21] : s('type.asm.inst'(X0),X1) != s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X19),s('type.num.num',X20),s('type.asm.addr'(X0),X21)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X17,X18] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X17),s('type.fcp.cart'(bool,X0),X18))) | ? [X13,X14,X15,X16] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16))))) | ? [X9,X10,X11,X12] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12))))) | ? [X5,X6,X7,X8] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))))) | ? [X2,X3,X4] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),X4)))) => (? [X32,X33,X34,X35] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))) | ? [X28,X29,X30,X31] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.num.num',X31))))) | s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X26,X27] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X26),s('type.fcp.cart'(bool,X0),X27))) | ? [X22,X23,X24,X25] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))) | ? [X19,X20,X21] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X19),s('type.num.num',X20),s('type.asm.addr'(X0),X21)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X17,X18] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X17),s('type.fcp.cart'(bool,X0),X18))) | ? [X13,X14,X15,X16] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16))))) | ? [X9,X10,X11,X12] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12))))) | ? [X5,X6,X7,X8] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))))) | ? [X2,X3,X4] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),X4)))) => (? [X32,X33,X34,X35] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))) | ? [X28,X29,X30,X31] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.num.num',X31))))) | s('type.asm.inst'(X0),'const.asm.Skip_0') = s('type.asm.inst'(X0),X1) | ? [X26,X27] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X26),s('type.fcp.cart'(bool,X0),X27))) | ? [X22,X23,X24,X25] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))) | ? [X19,X20,X21] : s('type.asm.inst'(X0),X1) = s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X19),s('type.num.num',X20),s('type.asm.addr'(X0),X21)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.asm.inst'(X6),'const.asm.Skip_0') = s('type.asm.inst'(X6),X7) | ? [X8,X9] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),X9))) | ? [X10,X11,X12,X13] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.asm.reg_imm'(X6),X13))))) | ? [X14,X11,X12,X15] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X14),s('type.num.num',X11),s('type.num.num',X12),s('type.num.num',X15))))) | ? [X16,X17,X18,X19] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))))) | ? [X20,X21,X22] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X20),s('type.num.num',X21),s('type.asm.addr'(X6),X22)))) => (? [X10,X11,X12,X13] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.asm.reg_imm'(X6),X13))))) | ? [X14,X11,X12,X15] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X14),s('type.num.num',X11),s('type.num.num',X12),s('type.num.num',X15))))) | s('type.asm.inst'(X6),'const.asm.Skip_0') = s('type.asm.inst'(X6),X7) | ? [X8,X9] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),X9))) | ? [X16,X17,X18,X19] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))))) | ? [X20,X21,X22] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X20),s('type.num.num',X21),s('type.asm.addr'(X6),X22)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.asm.inst'(X6),'const.asm.Skip_0') = s('type.asm.inst'(X6),X7) | ? [X8,X9] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),X9))) | ? [X10,X11,X12,X13] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.asm.reg_imm'(X6),X13))))) | ? [X14,X11,X12,X15] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X14),s('type.num.num',X11),s('type.num.num',X12),s('type.num.num',X15))))) | ? [X16,X17,X18,X19] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))))) | ? [X20,X21,X22] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X20),s('type.num.num',X21),s('type.asm.addr'(X6),X22)))) => (? [X10,X11,X12,X13] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.asm.reg_imm'(X6),X13))))) | ? [X14,X11,X12,X15] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X14),s('type.num.num',X11),s('type.num.num',X12),s('type.num.num',X15))))) | s('type.asm.inst'(X6),'const.asm.Skip_0') = s('type.asm.inst'(X6),X7) | ? [X8,X9] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),X9))) | ? [X16,X17,X18,X19] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))))) | ? [X20,X21,X22] : s('type.asm.inst'(X6),X7) = s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X20),s('type.num.num',X21),s('type.asm.addr'(X6),X22)))))),
  file('thm.wordProps.wordProps_225_prove_ltb','thm.wordProps.wordProps_225_prove_ltb')).
fof(f402,plain,(
  s('type.asm.inst'(sK12),'const.asm.Skip_0') != s('type.asm.inst'(sK12),sK13) | $spl1),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.asm.inst'(sK12),'const.asm.Skip_0') != s('type.asm.inst'(sK12),sK13) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f227,plain,(
  s('type.asm.inst'(sK12),'const.asm.Skip_0') != s('type.asm.inst'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f3622,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f405,f228])).
fof(f228,plain,(
  ( ! [X10,X9] : (s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,sK12),X10)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4048,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f407,f225])).
fof(f225,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X15),s('type.num.num',X16),s('type.num.num',X17),s('type.asm.reg_imm'(sK12),X18)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4049,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f413,f230])).
fof(f230,plain,(
  ( ! [X4,X2,X3] : (s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(sK12),X4)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f403,plain,(
  s('type.asm.inst'(sK12),'const.asm.Skip_0') = s('type.asm.inst'(sK12),sK13) | $spl0),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.asm.inst'(sK12),'const.asm.Skip_0') = s('type.asm.inst'(sK12),sK13) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f405,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK14),s('type.fcp.cart'(bool,sK12),sK15))) | $spl2),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK14),s('type.fcp.cart'(bool,sK12),sK15))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f407,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK16),s('type.num.num',sK17),s('type.num.num',sK18),s('type.asm.reg_imm'(sK12),sK19))))) | $spl4),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK16),s('type.num.num',sK17),s('type.num.num',sK18),s('type.asm.reg_imm'(sK12),sK19))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f409,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK20),s('type.num.num',sK21),s('type.num.num',sK22),s('type.num.num',sK23))))) | $spl6),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK20),s('type.num.num',sK21),s('type.num.num',sK22),s('type.num.num',sK23))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f411,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.num.num',sK27))))) | $spl8),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.num.num',sK27))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f413,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK28),s('type.num.num',sK29),s('type.asm.addr'(sK12),sK30))) | $spl10),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK28),s('type.num.num',sK29),s('type.asm.addr'(sK12),sK30))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f224,plain,(
  s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK28),s('type.num.num',sK29),s('type.asm.addr'(sK12),sK30))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.num.num',sK27))))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK20),s('type.num.num',sK21),s('type.num.num',sK22),s('type.num.num',sK23))))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK16),s('type.num.num',sK17),s('type.num.num',sK18),s('type.asm.reg_imm'(sK12),sK19))))) | s('type.asm.inst'(sK12),sK13) = s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK14),s('type.fcp.cart'(bool,sK12),sK15))) | s('type.asm.inst'(sK12),'const.asm.Skip_0') = s('type.asm.inst'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f4051,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f411,f229])).
fof(f229,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.asm.inst'(sK12),sK13) != s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',X5),s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8)))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 316
% Passive clauses: 1176
% Generated clauses: 3820
% Final active clauses: 316
% Final passive clauses: 710
% Input formulas: 37
% Initial clauses: 174
% 
% Duplicate literals: 149
% Trivial inequalities: 13
% Fw subsumption resolutions: 263
% 
% Simple tautologies: 145
% Equational tautologies: 22
% Forward subsumptions: 2054
% 
% Binary resolution: 2303
% Factoring: 710
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 161
% SAT solver clauses: 158
% SAT solver unit clauses: 12
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 157
% TWLsolver calls for satisfiability: 137
% 
% Memory used [KB]: 1918
% Time elapsed: 0.152 s
% ------------------------------
% ------------------------------
% Success in time 0.15 s
