Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f4631,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4630,f217,f393,f391,f389,f4628,f4629])).
fof(f4629,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f391,f218])).
fof(f218,plain,(
  ( ! [X12,X10,X11] : (s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) != s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X10),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X11),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X12),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  (s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))) | s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) | s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK20),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK21),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK22),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK23),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK24)))))))))) & ! [X10,X11,X12] : s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) != s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X10),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X11),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X12),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) & ! [X5,X6,X7,X8,X9] : s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) != s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X5),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X6),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X7),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X8),s('type.list.list'('type.BinomialHeap.tree'(sK13)),X9))))))))) & ! [X3,X4] : s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) != s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X3),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24])],[f135])).
fof(f135,plain,(
  ? [X0,X1,X2] : ((? [X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X21),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X22),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))) | ? [X18,X19,X20] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X18),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X19),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X20),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X13,X14,X15,X16,X17] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X15),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X16),s('type.list.list'('type.BinomialHeap.tree'(X1)),X17)))))))))) & ! [X10,X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X10),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X11),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X12),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) & ! [X5,X6,X7,X8,X9] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X5),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X7),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X8),s('type.list.list'('type.BinomialHeap.tree'(X1)),X9))))))))) & ! [X3,X4] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))),
  inference(rectify,[],[f95])).
fof(f95,plain,(
  ? [X0,X1,X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X5),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) & ! [X20,X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X20),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X22),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) & ! [X15,X16,X17,X18,X19] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X15),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X16),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X18),s('type.list.list'('type.BinomialHeap.tree'(X1)),X19))))))))) & ! [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ? [X0,X1,X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X5),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) & (! [X20,X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X20),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X22),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) & ! [X15,X16,X17,X18,X19] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X15),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X16),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X18),s('type.list.list'('type.BinomialHeap.tree'(X1)),X19))))))))) & ! [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0')))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X5),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) => (? [X20,X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X20),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X22),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X15,X16,X17,X18,X19] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X15),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X16),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X18),s('type.list.list'('type.BinomialHeap.tree'(X1)),X19))))))))) | ? [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0')))))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1] : ! [X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X5),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) => (? [X20,X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X20),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X22),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X15,X16,X17,X18,X19] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X15),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X16),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X18),s('type.list.list'('type.BinomialHeap.tree'(X1)),X19))))))))) | ? [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))) | ? [X11,X12,X13] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X11,X12,X13,X14,X15] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15)))))))))) => (? [X11,X12,X13] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X11,X12,X13,X14,X15] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15))))))))) | ? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))) | ? [X11,X12,X13] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X11,X12,X13,X14,X15] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15)))))))))) => (? [X11,X12,X13] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X11,X12,X13,X14,X15] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X11),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X13),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15))))))))) | ? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0')))))))),
  file('thm.BinomialHeap.BinomialHeap_92_prove_ltb','thm.BinomialHeap.BinomialHeap_92_prove_ltb')).
fof(f4628,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f393,f219])).
fof(f219,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) != s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X5),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X6),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X7),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X8),s('type.list.list'('type.BinomialHeap.tree'(sK13)),X9)))))))))) )),
  inference(cnf_transformation,[],[f136])).
fof(f389,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))) | $spl0),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f391,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) | $spl2),
  inference(cnf_transformation,[],[f391_D])).
fof(f391_D,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f393,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK20),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK21),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK22),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK23),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK24))))))))) | $spl4),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK20),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK21),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK22),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK23),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK24))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f217,plain,(
  s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK20),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK21),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK22),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK23),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK24))))))))) | s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) | s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) = s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f136])).
fof(f4630,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f389,f220])).
fof(f220,plain,(
  ( ! [X4,X3] : (s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),sK14) != s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X3),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X4),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f136])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 363
% Passive clauses: 1494
% Generated clauses: 4407
% Final active clauses: 363
% Final passive clauses: 964
% Input formulas: 36
% Initial clauses: 167
% 
% Duplicate literals: 153
% Trivial inequalities: 19
% Fw subsumption resolutions: 293
% 
% Simple tautologies: 143
% Equational tautologies: 30
% Forward subsumptions: 2272
% 
% Binary resolution: 2744
% Factoring: 768
% Forward superposition: 148
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 97
% Split components: 196
% SAT solver clauses: 180
% SAT solver unit clauses: 9
% SAT solver binary clauses: 35
% SAT solver learnt clauses: 1
% 
% Sat splits: 97
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 179
% TWLsolver calls for satisfiability: 151
% 
% Memory used [KB]: 2430
% Time elapsed: 0.105 s
% ------------------------------
% ------------------------------
% Success in time 0.105 s
