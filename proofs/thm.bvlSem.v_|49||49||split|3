Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlSem
% (140550)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 174
% Passive clauses: 3545
% Generated clauses: 19640
% Final active clauses: 166
% Final passive clauses: 3204
% Input formulas: 69
% Initial clauses: 142
% 
% Duplicate literals: 675
% Trivial inequalities: 510
% Fw subsumption resolutions: 2093
% Fw demodulations: 2908
% Bw demodulations: 6
% 
% Simple tautologies: 449
% Equational tautologies: 53
% Forward subsumptions: 9040
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 410
% Factoring: 1
% Forward superposition: 6717
% Backward superposition: 5807
% Self superposition: 151
% Equality factoring: 88
% Equality resolution: 41
% 
% Split clauses: 225
% Split components: 464
% SAT solver clauses: 519
% SAT solver unit clauses: 14
% SAT solver binary clauses: 107
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 225
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 518
% TWLsolver calls for satisfiability: 157
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvlSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlSem
% SZS output start Proof for thm.bvlSem
fof(f15330,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f15227,f495,f252,f415,f413,f304,f442,f14901,f14902,f251,f414,f412,f322,f454])).
fof(f454,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.num.num',X0),X6)))) ) | $spl60),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.num.num',X0),X6)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f322,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.num.num',X0),X6)))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.num.num',X0),X6)))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s(X0,happ(s(fun('type.num.num',X0),X5),s('type.num.num',X1))) = s(X0,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.num.num',X0),X6)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9] : ! [X6,X10,X11,X12,X13,X14] : s(X9,happ(s(fun('type.num.num',X9),X13),s('type.num.num',X6))) = s(X9,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.num.num',X9),X14)))),
  file('thm.bvlSem.v_|49||49||split|3','thm.bvlSem.v_case_def|split|3')).
fof(f412,plain,(
  s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f414,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl2),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f251,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1))) | s('type.num.num',sK0) = s('type.num.num',sK1)) & (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1))) | s('type.num.num',sK0) != s('type.num.num',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f195])).
fof(f195,plain,(
  ? [X0,X1] : ((s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X0))) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f169])).
fof(f169,plain,(
  ? [X0,X1] : (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))) <~> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X0))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.bvlSem.v_|49||49||split|3','thm.bvlSem.v_|49||49||split|3')).
fof(f14902,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK0))) = s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK1)))) ) | $spl2592),
  inference(cnf_transformation,[],[f14902_D])).
fof(f14902_D,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK0))) = s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK1)))) ) <=> ~$spl2592),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2592])])).
fof(f14901,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK0))) = s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK1)))) ) | ($spl0 | $spl60)),
  inference(forward_demodulation,[],[f14654,f454])).
fof(f14654,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK1))) = s(X0,'const.bvlSem.v_CASE_6'(s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),X0)),X4),s(fun('type.num.num',X0),X1),s(fun('type.num.num',X0),X5)))) ) | ($spl0 | $spl60)),
  inference(superposition,[],[f454,f412])).
fof(f442,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) ) | $spl36),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f304,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X22] : ! [X24] : s(X22,X24) = s(X22,happ(s(fun(X22,X22),'_i_0_0'),s(X22,X24)))),
  file('thm.bvlSem.v_|49||49||split|3','_i0_ax')).
fof(f413,plain,(
  s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f415,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | $spl3),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f252,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f196])).
fof(f495,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f494])).
fof(f494,plain,(
  s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f413,f414])).
fof(f15227,plain,(
  $false | ($spl3 | $spl36 | $spl2592)),
  inference(subsumption_resolution,[],[f15226,f415])).
fof(f15226,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | ($spl36 | $spl2592)),
  inference(forward_demodulation,[],[f15039,f442])).
fof(f15039,plain,(
  s('type.num.num',sK1) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num',sK0))) | ($spl36 | $spl2592)),
  inference(superposition,[],[f14902,f442])).
% SZS output end Proof for thm.bvlSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 147
% Passive clauses: 1370
% Generated clauses: 15015
% Final active clauses: 139
% Final passive clauses: 1183
% Input formulas: 69
% Initial clauses: 142
% 
% Duplicate literals: 436
% Trivial inequalities: 406
% Fw subsumption resolutions: 941
% Fw demodulations: 1939
% Bw demodulations: 40
% Condensations: 722
% Global subsumptions: 8
% 
% Simple tautologies: 283
% Equational tautologies: 44
% Forward subsumptions: 6741
% 
% Binary resolution: 173
% Factoring: 1
% Forward superposition: 4632
% Backward superposition: 3969
% Self superposition: 127
% Equality factoring: 60
% Equality resolution: 33
% 
% Split clauses: 46
% Split components: 92
% SAT solver clauses: 2183
% SAT solver unit clauses: 152
% SAT solver binary clauses: 59
% SAT solver learnt clauses: 19
% SAT solver learnt literals: 2
% 
% Sat splits: 46
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 2147
% TWLsolver calls for satisfiability: 594
% 
% Memory used [KB]: 18038
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% Success in time 1.32 s
