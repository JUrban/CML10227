Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% (130437)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 113
% Passive clauses: 3636
% Generated clauses: 16954
% Final active clauses: 79
% Final passive clauses: 2978
% Input formulas: 21
% Initial clauses: 52
% 
% Duplicate literals: 918
% Trivial inequalities: 136
% Fw subsumption resolutions: 2379
% Fw demodulations: 851
% Bw demodulations: 16
% 
% Simple tautologies: 290
% Equational tautologies: 82
% Forward subsumptions: 7132
% 
% Binary resolution: 293
% Factoring: 4
% Forward superposition: 6261
% Backward superposition: 4939
% Self superposition: 306
% Equality factoring: 201
% Equality resolution: 13
% 
% Split clauses: 669
% Split components: 1349
% SAT solver clauses: 1606
% SAT solver unit clauses: 3
% SAT solver binary clauses: 193
% 
% Sat splits: 669
% Sat splitting refutations: 14
% 
% TWLsolver clauses: 1603
% TWLsolver calls for satisfiability: 167
% 
% Memory used [KB]: 9978
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f2770,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2766,f92,f149,f147,f252,f261,f134,f176,f268,f278,f95,f157,f2567,f2533,f2534,f133,f171,f190,f192,f89,f153,f96,f158,f1854,f1856,f127,f170,f1821,f1822,f90,f151,f129,f168,f128,f169,f1877,f1895,f193,f194,f91,f150,f1874,f1876,f141,f172,f93,f155,f2330,f2350,f181,f189,f2326,f2327,f131,f173])).
fof(f173,plain,(
  ( ! [X4,X2,X0,X1] : (sP0(X0,X2,X1) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X4)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) ) | $spl28),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  ( ! [X4,X2,X0,X1] : (sP0(X0,X2,X1) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X4)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f131,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X4)))) | sP0(X0,X2,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | sP0(X0,X2,X1) | (! [X4] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X4)))) & ! [X3] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10])],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) & ? [X6,X7] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X7),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | sP0(X0,X2,X1) | (! [X4] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X4)))) & ! [X3] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))),
  inference(rectify,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) & ? [X6,X7] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X7),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | sP0(X0,X2,X1) | (! [X9] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8))))))),
  inference(definition_folding,[],[f55,f59])).
fof(f59,plain,(
  ! [X0,X2,X1] : (~sP0(X0,X2,X1) | ? [X3,X4] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f55,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) & ? [X6,X7] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X7),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ? [X3,X4] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) | (! [X9] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8))))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0,X1,X2] : ((? [X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) & ? [X6,X7] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X7),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ? [X3,X4] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))))))) | (! [X9] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : ((! [X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) => ! [X6,X7] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X7),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X3,X4] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))))))) => (! [X9] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8))))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1,X2] : ((! [X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) => ! [X6,X7] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X7),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X3,X4] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))))))) => (! [X9] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : ((! [X14] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X8),s('type.list.list'('type.BinomialHeap.tree'(X6)),X14)))) => ! [X15,X16] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X7),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X6,X15),s('type.list.list'('type.BinomialHeap.tree'(X6)),X14))))))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X8),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0')))) & ! [X9,X14] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X7),s('type.BinomialHeap.tree'(X6),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X8),s('type.list.list'('type.BinomialHeap.tree'(X6)),X14))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X8),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X14)))))))) => (! [X9] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X7),s('type.BinomialHeap.tree'(X6),X9)))) & ! [X14] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X8),s('type.list.list'('type.BinomialHeap.tree'(X6)),X14))))))),
  file('thm.BinomialHeap.heap_size_ind','thm.BinomialHeap.tree_induction')).
fof(f2327,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0))))) ) | $spl386),
  inference(cnf_transformation,[],[f2327_D])).
fof(f2327_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0))))) ) <=> ~$spl386),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl386])])).
fof(f2326,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0))))) ) | ($spl10 | $spl28 | $spl42 | $spl255 | $spl266)),
  inference(subsumption_resolution,[],[f2325,f155])).
fof(f2325,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0))))) ) | ($spl10 | $spl28 | $spl42 | $spl255 | $spl266)),
  inference(forward_demodulation,[],[f2324,f1895])).
fof(f2324,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(sK2,sK3,sK1)),s(sK1,sK9(sK2,sK3,sK1)),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1)))))))) ) | ($spl10 | $spl28 | $spl42 | $spl255)),
  inference(subsumption_resolution,[],[f2323,f155])).
fof(f2323,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(sK2,sK3,sK1)),s(sK1,sK9(sK2,sK3,sK1)),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1)))))))) ) | ($spl28 | $spl42 | $spl255)),
  inference(forward_demodulation,[],[f2322,f192])).
fof(f2322,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(sK2,sK3,sK1)),s(sK1,sK9(sK2,sK3,sK1)),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1)))))))) ) | ($spl28 | $spl255)),
  inference(resolution,[],[f173,f1856])).
fof(f189,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl40),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f181,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | ($spl13 | $spl14)),
  inference(superposition,[],[f157,f158])).
fof(f2350,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X3)))) ) | $spl390),
  inference(cnf_transformation,[],[f2350_D])).
fof(f2350_D,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X3)))) ) <=> ~$spl390),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl390])])).
fof(f2330,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X3)))) ) | ($spl40 | $spl386)),
  inference(resolution,[],[f2327,f189])).
fof(f155,plain,(
  p(s(bool,'T_0')) | $spl10),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f93,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.BinomialHeap.heap_size_ind',aHL_TRUTH)).
fof(f172,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X1,X2,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))))) ) | $spl26),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X1,X2,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f141,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X1,X2,X0))))) | sP0(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0'))))) )),
  inference(condensation,[],[f132])).
fof(f132,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) | sP0(X0,X2,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f1876,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))) | $spl264),
  inference(cnf_transformation,[],[f1876_D])).
fof(f1876_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f1874,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))) | ($spl10 | $spl26 | $spl42 | $spl255)),
  inference(subsumption_resolution,[],[f1873,f155])).
fof(f1873,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))) | ($spl26 | $spl42 | $spl255)),
  inference(forward_demodulation,[],[f1872,f192])).
fof(f1872,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0')))) | ($spl26 | $spl255)),
  inference(resolution,[],[f172,f1856])).
fof(f150,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK1,X6),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7))))) ) | $spl4),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK1,X6),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f91,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK1,X6),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0')))) & ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK1),X8),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9))))))) & ! [X5,X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK1,X6),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X7))))))) & (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X8),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9))))))) & ! [X5,X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7))))))) & (? [X4] : ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) | ? [X3] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3))))))),
  inference(rectify,[],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7))))))) & ! [X3,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X3),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5))))))) & (? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))) | ? [X8] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X8))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X6,X7] : ((~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X6))))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7))))))) & ! [X3,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X3),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))))) & (? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))) | ? [X8] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X8))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X6,X7] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7)))) & p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X6))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7))))))) & ! [X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) => p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X3),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))))) => (! [X9] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X8))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) & ! [X6,X7] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7)))) & p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X6))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X6),s('type.list.list'('type.BinomialHeap.tree'(X0)),X7))))))) & ! [X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))) => p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X3),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X5)))))))) => (! [X9] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))) & ! [X8] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X8))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0')))) & ! [X9,X10] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10)))) & p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X9))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))))) & ! [X11,X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X13)))) => p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X6,X12),s('type.list.list'('type.BinomialHeap.tree'(X6)),X13)))))))) => (! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X11)))) & ! [X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X11))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.NIL_0')))) & ! [X9,X10] : ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10)))) & p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X9))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))))) & ! [X11,X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X13)))) => p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X6,X12),s('type.list.list'('type.BinomialHeap.tree'(X6)),X13)))))))) => (! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X11)))) & ! [X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X11))))))),
  file('thm.BinomialHeap.heap_size_ind','thm.BinomialHeap.heap_size_ind')).
fof(f194,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))))) ) | $spl44),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f193,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))))) ) | ($spl4 | $spl13 | $spl14)),
  inference(subsumption_resolution,[],[f185,f157])).
fof(f185,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X2)))))) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f150,f158])).
fof(f1895,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))))) ) | $spl266),
  inference(cnf_transformation,[],[f1895_D])).
fof(f1895_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))))) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f1877,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',X0),s(sK1,X1),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1))))))) ) | ($spl44 | $spl264)),
  inference(resolution,[],[f1876,f194])).
fof(f169,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))) | ~sP0(X0,X1,X2)) ) | $spl20),
  inference(cnf_transformation,[],[f169_D])).
fof(f169_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))) | ~sP0(X0,X1,X2)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f128,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2] : (~sP0(X0,X1,X2) | (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : (~sP0(X0,X1,X2) | ? [X3,X4] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))))),
  inference(rectify,[],[f83])).
fof(f83,plain,(
  ! [X0,X2,X1] : (~sP0(X0,X2,X1) | ? [X3,X4] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))))),
  inference(nnf_transformation,[],[f59])).
fof(f168,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))))) | ~sP0(X0,X1,X2)) ) | $spl18),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))))) | ~sP0(X0,X1,X2)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f129,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK7(X2,X1,X0))))))) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f85])).
fof(f151,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK1),X8),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9)))))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9))))) ) | $spl6),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK1),X8),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9)))))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f90,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK1),X8),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9)))))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X9))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f1822,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK6(X0,sK2,sK1))))) | ~sP0(sK1,sK2,X0)) ) | $spl244),
  inference(cnf_transformation,[],[f1822_D])).
fof(f1822_D,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK6(X0,sK2,sK1))))) | ~sP0(sK1,sK2,X0)) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f1821,plain,(
  ( ! [X0] : (~sP0(sK1,sK2,X0) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK6(X0,sK2,sK1)))))) ) | ($spl6 | $spl18 | $spl20)),
  inference(subsumption_resolution,[],[f1805,f169])).
fof(f1805,plain,(
  ( ! [X0] : (~sP0(sK1,sK2,X0) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK6(X0,sK2,sK1))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK7(X0,sK2,sK1)))))) ) | ($spl6 | $spl18)),
  inference(resolution,[],[f168,f151])).
fof(f170,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0))))) | ~sP0(X0,X1,X2)) ) | $spl22),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0))))) | ~sP0(X0,X1,X2)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f127,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),sK6(X2,X1,X0))))) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f85])).
fof(f1856,plain,(
  ~sP0(sK1,sK2,sK3) | $spl255),
  inference(cnf_transformation,[],[f1856_D])).
fof(f1856_D,plain,(
  ~sP0(sK1,sK2,sK3) <=> ~$spl255),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl255])])).
fof(f1854,plain,(
  ~sP0(sK1,sK2,sK3) | ($spl22 | $spl244)),
  inference(duplicate_literal_removal,[],[f1838])).
fof(f1838,plain,(
  ~sP0(sK1,sK2,sK3) | ~sP0(sK1,sK2,sK3) | ($spl22 | $spl244)),
  inference(resolution,[],[f1822,f170])).
fof(f158,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.BinomialHeap.heap_size_ind',aHL_BOOL_CASES)).
fof(f153,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0')))) | $spl8),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f89,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f62])).
fof(f192,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0'))) | $spl42),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0'))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f190,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0'))) | ($spl8 | $spl13 | $spl14)),
  inference(subsumption_resolution,[],[f184,f157])).
fof(f184,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0'))) | ($spl8 | $spl14)),
  inference(superposition,[],[f153,f158])).
fof(f171,plain,(
  ( ! [X2,X0,X3,X1] : (sP0(X0,X2,X1) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) ) | $spl24),
  inference(cnf_transformation,[],[f171_D])).
fof(f171_D,plain,(
  ( ! [X2,X0,X3,X1] : (sP0(X0,X2,X1) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f133,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) | sP0(X0,X2,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X2),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X1),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(X2,X1,X0)),s(X0,sK9(X2,X1,X0)),s('type.list.list'('type.BinomialHeap.tree'(X0)),sK8(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f2534,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0))))) ) | $spl426),
  inference(cnf_transformation,[],[f2534_D])).
fof(f2534_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0))))) ) <=> ~$spl426),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl426])])).
fof(f2533,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0))))) ) | ($spl10 | $spl24 | $spl42 | $spl255 | $spl266)),
  inference(subsumption_resolution,[],[f2532,f155])).
fof(f2532,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0))))) ) | ($spl10 | $spl24 | $spl42 | $spl255 | $spl266)),
  inference(forward_demodulation,[],[f2531,f1895])).
fof(f2531,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(sK2,sK3,sK1)),s(sK1,sK9(sK2,sK3,sK1)),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1)))))))) ) | ($spl10 | $spl24 | $spl42 | $spl255)),
  inference(subsumption_resolution,[],[f2530,f155])).
fof(f2530,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(sK2,sK3,sK1)),s(sK1,sK9(sK2,sK3,sK1)),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1)))))))) ) | ($spl24 | $spl42 | $spl255)),
  inference(forward_demodulation,[],[f2528,f192])).
fof(f2528,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),'const.BinomialHeap.Node_3'(s('type.num.num',sK10(sK2,sK3,sK1)),s(sK1,sK9(sK2,sK3,sK1)),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK8(sK2,sK3,sK1)))))))) ) | ($spl24 | $spl255)),
  inference(resolution,[],[f171,f1856])).
fof(f2567,plain,(
  $false | ($spl13 | $spl68 | $spl426)),
  inference(subsumption_resolution,[],[f2548,f157])).
fof(f2548,plain,(
  p(s(bool,'F_0')) | ($spl68 | $spl426)),
  inference(superposition,[],[f2534,f278])).
fof(f157,plain,(
  ~p(s(bool,'F_0')) | $spl13),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f95,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.BinomialHeap.heap_size_ind',aHL_FALSITY)).
fof(f278,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4))) | $spl68),
  inference(cnf_transformation,[],[f278_D])).
fof(f278_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f268,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4))) | ($spl13 | $spl58)),
  inference(resolution,[],[f261,f157])).
fof(f176,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl32),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f134,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X27,X28] : ((p(s(bool,X27)) => p(s(bool,X28))) => ((p(s(bool,X28)) => p(s(bool,X27))) => s(bool,X27) = s(bool,X28)))),
  file('thm.BinomialHeap.heap_size_ind','thm.bool.IMP_ANTISYM_AX')).
fof(f261,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4)))) ) | $spl58),
  inference(cnf_transformation,[],[f261_D])).
fof(f261_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4)))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f252,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4)))) ) | ($spl1 | $spl32)),
  inference(resolution,[],[f176,f147])).
fof(f147,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4)))) | $spl1),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f149,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK5)))) | $spl3),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK5)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f92,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK1),bool),sK3),s('type.BinomialHeap.tree'(sK1),sK5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK1)),bool),sK2),s('type.list.list'('type.BinomialHeap.tree'(sK1)),sK4))))),
  inference(cnf_transformation,[],[f62])).
fof(f2766,plain,(
  $false | ($spl3 | $spl10 | $spl390)),
  inference(subsumption_resolution,[],[f2765,f155])).
fof(f2765,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl390)),
  inference(forward_demodulation,[],[f149,f2350])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 48
% Passive clauses: 224
% Generated clauses: 2678
% Final active clauses: 21
% Final passive clauses: 30
% Input formulas: 21
% Initial clauses: 52
% 
% Duplicate literals: 232
% Trivial inequalities: 23
% Fw subsumption resolutions: 264
% Fw demodulations: 81
% Bw demodulations: 161
% Condensations: 339
% Global subsumptions: 9
% 
% Simple tautologies: 65
% Equational tautologies: 29
% Forward subsumptions: 980
% Bw demodulations to eq. taut.: 9
% 
% Binary resolution: 87
% Factoring: 1
% Forward superposition: 481
% Backward superposition: 513
% Self superposition: 88
% Equality factoring: 74
% Equality resolution: 3
% 
% Split clauses: 53
% Split components: 106
% SAT solver clauses: 502
% SAT solver unit clauses: 64
% SAT solver binary clauses: 31
% SAT solver learnt clauses: 19
% SAT solver learnt literals: 4
% 
% Sat splits: 53
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 465
% TWLsolver calls for satisfiability: 267
% 
% Memory used [KB]: 3070
% Time elapsed: 0.177 s
% ------------------------------
% ------------------------------
% Success in time 0.79 s
