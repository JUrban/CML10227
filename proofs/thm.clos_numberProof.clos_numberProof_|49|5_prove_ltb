Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_numberProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_numberProof
% SZS output start Proof for thm.clos_numberProof
fof(f844,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f839,f89,f144])).
fof(f144,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f89,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_numberProof.clos_numberProof_|49|5_prove_ltb',aHL_TRUTH)).
fof(f839,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f838,f144])).
fof(f838,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f829,f162])).
fof(f162,plain,(
  s(bool,'T_0') = s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(sK0),sK2),s('type.closSem.state'(sK0),sK1)))),
  inference(resolution,[],[f87,f94])).
fof(f94,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7] : (s(bool,'T_0') = s(bool,X7) <=> p(s(bool,X7)))),
  file('thm.clos_numberProof.clos_numberProof_|49|5_prove_ltb','thm.bool.EQ_CLAUSES|split|0')).
fof(f87,plain,(
  p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(sK0),sK2),s('type.closSem.state'(sK0),sK1))))),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(sK0),sK2),s('type.closSem.state'(sK0),sK1)))) & ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK0),sK1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X2),s('type.closSem.state'(X0),X1)))) & ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X2),s('type.closSem.state'(X0),X1)))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X2),s('type.closSem.state'(X0),X1)))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X6),X8),s('type.closSem.state'(X6),X7)))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X6),X8),s('type.closSem.state'(X6),X7)))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7)))))))),
  file('thm.clos_numberProof.clos_numberProof_|49|5_prove_ltb','thm.clos_numberProof.clos_numberProof_|49|5_prove_ltb')).
fof(f829,plain,(
  ~p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(sK0),sK2),s('type.closSem.state'(sK0),sK1))))),
  inference(resolution,[],[f122,f88])).
fof(f88,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK0),sK1))))))),
  inference(cnf_transformation,[],[f64])).
fof(f122,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) | ~p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2)))) | (s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X1))) = s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X2)))))))) & (s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X1))) != s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))) | ~p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X2)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) | ~p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X2)))))) | p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2))))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2)))) | (s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X1))) = s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X2)))))))) & ((s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X1))) != s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))) | ~p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X2)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) | ~p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X2))))))) | p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2))))))),
  inference(nnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2)))) <=> (s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X1))) = s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X2))))))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X0),X1),s('type.closSem.state'(X0),X2)))) <=> (s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X1))) = s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X2))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X16] : ! [X8,X7] : (p(s(bool,'const.clos_numberProof.state_rel_2'(s('type.closSem.state'(X16),X8),s('type.closSem.state'(X16),X7)))) <=> (s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X16),X7))) = s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X16),X8))) & s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),X7))) = s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),X8))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.closSem.ref'('type.closSem.v'),fun('type.closSem.ref'('type.closSem.v'),bool)),'const.closProps.ref_rel_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X16),X8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X16),X7)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.closSem.v'),fun('type.option.option'('type.closSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_numberProof.v_rel_0'))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X8))),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X7)))))) & p(s(bool,'const.finite_map.fmap_rel_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.clos_numberProof.code_rel_0'),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),X8))),s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),X7))))))))),
  file('thm.clos_numberProof.clos_numberProof_|49|5_prove_ltb','thm.clos_numberProof.state_rel_def')).
% SZS output end Proof for thm.clos_numberProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 161
% Generated clauses: 730
% Final active clauses: 35
% Final passive clauses: 86
% Input formulas: 22
% Initial clauses: 55
% 
% Duplicate literals: 62
% Trivial inequalities: 24
% Fw subsumption resolutions: 89
% Fw demodulations: 18
% Bw demodulations: 1
% 
% Simple tautologies: 70
% Equational tautologies: 15
% Forward subsumptions: 251
% 
% Binary resolution: 54
% Forward superposition: 201
% Backward superposition: 149
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 11
% 
% Split clauses: 32
% Split components: 66
% SAT solver clauses: 76
% SAT solver unit clauses: 11
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 1
% 
% Sat splits: 32
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 72
% TWLsolver calls for satisfiability: 35
% 
% Memory used [KB]: 1151
% Time elapsed: 0.053 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
