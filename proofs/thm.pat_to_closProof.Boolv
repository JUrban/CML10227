Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.pat_to_closProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pat_to_closProof
% SZS output start Proof for thm.pat_to_closProof
fof(f1765,plain,(
  $false),
  inference(subsumption_resolution,[],[f76,f1523])).
fof(f1523,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X0))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0)))))) )),
  inference(forward_demodulation,[],[f1513,f90])).
fof(f90,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X0))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X0))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X6))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num','const.bool.COND_3'(s(bool,X6),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))),
  file('thm.pat_to_closProof.Boolv','thm.closSem.Boolv_def')).
fof(f1513,plain,(
  ( ! [X0] : (s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))) )),
  inference(superposition,[],[f1465,f91])).
fof(f91,plain,(
  ( ! [X0] : (s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X6))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num','const.bool.COND_3'(s(bool,X6),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))),
  file('thm.pat_to_closProof.Boolv','thm.patSem.Boolv_def')).
fof(f1465,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X0),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X0),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f1454,f104])).
fof(f104,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X9,X8] : ! [X13] : s('type.list.list'(X8),'const.list.NIL_0') = s('type.list.list'(X8),'const.list.MAP_2'(s(fun(X9,X8),X13),s('type.list.list'(X9),'const.list.NIL_0')))),
  file('thm.pat_to_closProof.Boolv','thm.list.MAP|split|0')).
fof(f1454,plain,(
  ( ! [X0,X1] : (s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X1),s('type.list.list'('type.patSem.v'),X0))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X0)))))) )),
  inference(forward_demodulation,[],[f102,f84])).
fof(f84,plain,(
  ( ! [X0] : (s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',X0))) = s('type.closSem.v',happ(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v',X0)))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',X0))) = s('type.closSem.v',happ(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v',X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X25] : s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v',X25))) = s('type.closSem.v',happ(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v',X25)))),
  file('thm.pat_to_closProof.Boolv','ARITY_0_1_const.pat_to_closProof.compile_v')).
fof(f102,plain,(
  ( ! [X0,X1] : (s('type.closSem.v',happ(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X1),s('type.list.list'('type.patSem.v'),X0))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X0)))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : s('type.closSem.v',happ(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X1),s('type.list.list'('type.patSem.v'),X0))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X0)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X20,X21] : s('type.closSem.v',happ(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X21),s('type.list.list'('type.patSem.v'),X20))))) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X21),s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X20)))))),
  file('thm.pat_to_closProof.Boolv','thm.pat_to_closProof.compile_v_def|split|6')).
fof(f76,plain,(
  s('type.closSem.v','const.closSem.Boolv_1'(s(bool,sK0))) != s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,sK0)))))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  s('type.closSem.v','const.closSem.Boolv_1'(s(bool,sK0))) != s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f71])).
fof(f71,plain,(
  ? [X0] : s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X0))) != s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0)))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0] : s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X0))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X6))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s('type.closSem.v','const.closSem.Boolv_1'(s(bool,X6))) = s('type.closSem.v','const.pat_to_closProof.compile_v_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X6)))))),
  file('thm.pat_to_closProof.Boolv','thm.pat_to_closProof.Boolv')).
% SZS output end Proof for thm.pat_to_closProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 63
% Passive clauses: 272
% Generated clauses: 1621
% Final active clauses: 50
% Final passive clauses: 149
% Input formulas: 33
% Initial clauses: 34
% 
% Duplicate literals: 178
% Trivial inequalities: 6
% Fw subsumption resolutions: 36
% Fw demodulations: 46
% Bw demodulations: 6
% 
% Simple tautologies: 20
% Equational tautologies: 17
% Forward subsumptions: 1059
% 
% Binary resolution: 7
% Forward superposition: 625
% Backward superposition: 571
% Self superposition: 57
% Equality factoring: 28
% 
% Split clauses: 23
% Split components: 46
% SAT solver clauses: 28
% SAT solver unit clauses: 2
% SAT solver binary clauses: 6
% 
% Sat splits: 23
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 28
% TWLsolver calls for satisfiability: 8
% 
% Memory used [KB]: 1535
% Time elapsed: 0.027 s
% ------------------------------
% ------------------------------
% Success in time 0.03 s
