Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f11543,plain,(
  $false),
  inference(equality_resolution,[],[f1794])).
fof(f1794,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X5),s('type.wordSem.state'(sK2,sK3),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),sK65(sK6,sK5,sK4,sK3,sK2)),s('type.wordSem.state'(sK2,sK3),sK66(sK6,sK5,sK4,sK3,sK2))))) )),
  inference(superposition,[],[f85,f125])).
fof(f125,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK65(X4,X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK66(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK65(X4,X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK66(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK65,sK66])],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X8,X20,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X11),s('type.wordSem.state'(X6,X7),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X20),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X6,X7),X8)))))))))),
  file('thm.wordProps.wordProps_2|49||49|_prove_ltb','thm.wordProps.wordProps_|49|88_prove_ltb')).
fof(f85,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X5),s('type.wordSem.state'(sK2,sK3),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK5),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK6))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK2,sK3),sK4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(sK2,sK3),sK4)))))))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X5),s('type.wordSem.state'(sK2,sK3),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK5),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK6))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK2,sK3),sK4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(sK2,sK3),sK4)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X11),s('type.wordSem.state'(X6,X7),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X9),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X6,X7),X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X11),s('type.wordSem.state'(X6,X7),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X9),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X6,X7),X8)))))))))),
  file('thm.wordProps.wordProps_2|49||49|_prove_ltb','thm.wordProps.wordProps_2|49||49|_prove_ltb')).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 139
% Passive clauses: 940
% Generated clauses: 11249
% Final active clauses: 137
% Final passive clauses: 690
% Input formulas: 21
% Initial clauses: 43
% 
% Duplicate literals: 520
% Trivial inequalities: 631
% Fw subsumption resolutions: 1423
% Fw demodulations: 1376
% Bw demodulations: 2
% 
% Simple tautologies: 304
% Equational tautologies: 23
% Forward subsumptions: 5505
% 
% Binary resolution: 61
% Forward superposition: 4042
% Backward superposition: 2914
% Self superposition: 77
% Equality factoring: 56
% Equality resolution: 31
% 
% Split clauses: 257
% Split components: 527
% SAT solver clauses: 639
% SAT solver unit clauses: 17
% SAT solver binary clauses: 127
% 
% Sat splits: 257
% 
% TWLsolver clauses: 637
% TWLsolver calls for satisfiability: 91
% 
% Memory used [KB]: 6012
% Time elapsed: 0.246 s
% ------------------------------
% ------------------------------
% Success in time 0.23 s
