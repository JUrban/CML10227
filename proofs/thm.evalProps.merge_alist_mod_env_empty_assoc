Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% (98178)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 168
% Passive clauses: 2290
% Generated clauses: 22264
% Final active clauses: 160
% Final passive clauses: 1913
% Input formulas: 23
% Initial clauses: 41
% 
% Duplicate literals: 1182
% Trivial inequalities: 274
% Fw subsumption resolutions: 2318
% Fw demodulations: 2272
% Bw demodulations: 7
% 
% Simple tautologies: 452
% Equational tautologies: 35
% Forward subsumptions: 12242
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 101
% Forward superposition: 9705
% Backward superposition: 6103
% Self superposition: 174
% Equality factoring: 66
% Equality resolution: 59
% 
% Split clauses: 845
% Split components: 1709
% SAT solver clauses: 1397
% SAT solver unit clauses: 42
% SAT solver binary clauses: 264
% 
% Sat splits: 845
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1395
% TWLsolver calls for satisfiability: 175
% 
% Memory used [KB]: 14967
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.evalProps
% (98215)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 146
% Passive clauses: 845
% Generated clauses: 14930
% Final active clauses: 140
% Final passive clauses: 666
% Input formulas: 23
% Initial clauses: 41
% 
% Duplicate literals: 836
% Trivial inequalities: 137
% Fw subsumption resolutions: 638
% Fw demodulations: 1608
% Bw demodulations: 34
% Condensations: 1563
% Global subsumptions: 4
% 
% Simple tautologies: 226
% Equational tautologies: 50
% Forward subsumptions: 7526
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 35
% Forward superposition: 5647
% Backward superposition: 5818
% Self superposition: 172
% Equality factoring: 116
% Equality resolution: 54
% 
% Split clauses: 87
% Split components: 185
% SAT solver clauses: 1306
% SAT solver unit clauses: 51
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 8
% 
% Sat splits: 87
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1290
% TWLsolver calls for satisfiability: 250
% 
% Memory used [KB]: 15479
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.evalProps
% (98251)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 516
% Passive clauses: 8857
% Generated clauses: 194921
% Final active clauses: 212
% Final passive clauses: 1135
% Input formulas: 23
% Initial clauses: 41
% Discarded non-redundant clauses: 16395
% 
% Duplicate literals: 6074
% Trivial inequalities: 1062
% Fw subsumption resolutions: 7532
% Fw demodulations: 48400
% Bw demodulations: 4077
% Condensations: 14433
% Global subsumptions: 863
% 
% Simple tautologies: 1281
% Equational tautologies: 622
% Forward subsumptions: 83850
% Fw demodulations to eq. taut.: 19892
% Bw demodulations to eq. taut.: 242
% 
% Unit resulting resolution: 33340
% Forward superposition: 35110
% Backward superposition: 34366
% Self superposition: 640
% Equality factoring: 332
% Equality resolution: 179
% 
% Split clauses: 253
% Split components: 511
% SAT solver clauses: 11007
% SAT solver unit clauses: 202
% SAT solver binary clauses: 2158
% 
% Sat splits: 253
% Sat splitting refutations: 779
% 
% Memory used [KB]: 81619
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f3974,plain,(
  $false),
  inference(equality_resolution,[],[f3848])).
fof(f3848,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X15),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X15,X16))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X15),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X14),s(X15,X17)))) )),
  inference(superposition,[],[f3767,f78])).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X7,X6] : ! [X17] : ? [X21,X22] : s('type.pair.prod'(X7,X6),X17) = s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X21),s(X6,X22)))),
  file('thm.evalProps.merge_alist_mod_env_empty_assoc','thm.pair.ABS_PAIR_THM')).
fof(f3767,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(trivial_inequality_removal,[],[f3766])).
fof(f3766,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f3765,f94])).
fof(f94,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X7] : ! [X12] : s('type.list.list'(X7),X12) = s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),'const.list.NIL_0'),s('type.list.list'(X7),X12)))),
  file('thm.evalProps.merge_alist_mod_env_empty_assoc','thm.list.APPEND|split|0')).
fof(f3765,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f3753,f83])).
fof(f83,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7] : ! [X13,X14,X16] : s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X13),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X14),s('type.list.list'(X7),X16))))) = s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X13),s('type.list.list'(X7),X14))),s('type.list.list'(X7),X16)))),
  file('thm.evalProps.merge_alist_mod_env_empty_assoc','thm.list.APPEND_ASSOC')).
fof(f3753,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK1),X1))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(superposition,[],[f2347,f93])).
fof(f93,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X5))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X4),s('type.list.list'(X1),X5)))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X5))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X4),s('type.list.list'(X1),X5)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X5))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X4),s('type.list.list'(X1),X5)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X7,X6] : ! [X23,X8,X24,X9] : s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X23),s('type.list.list'(X7),X24))),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X8),s('type.list.list'(X6),X9))))) = s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X23),s('type.list.list'(X6),X8))),s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X24),s('type.list.list'(X6),X9)))))),
  file('thm.evalProps.merge_alist_mod_env_empty_assoc','thm.semanticPrimitives.merge_alist_mod_env_def')).
fof(f2347,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f2346,f94])).
fof(f2346,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f2345,f93])).
fof(f2345,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK2))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f2320,f94])).
fof(f2320,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK2))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),X1))))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(superposition,[],[f150,f93])).
fof(f150,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X0))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK2))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK3))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X0))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X0),s(X1,X2)))) )),
  inference(superposition,[],[f74,f75])).
fof(f75,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,X2) = s(X0,X4) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & (s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & ((s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5)) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X7,X6] : ! [X17,X18,X19,X20] : (s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X17),s(X6,X18))) = s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X19),s(X6,X20))) <=> (s(X7,X17) = s(X7,X19) & s(X6,X18) = s(X6,X20)))),
  file('thm.evalProps.merge_alist_mod_env_empty_assoc','thm.pair.CLOSED_PAIR_EQ')).
fof(f74,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK2))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK3))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4)))))),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK2))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),sK3))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),X3))))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))) != s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),X3))))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),X3))))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X8),s('type.list.list'(X7),X9))))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X8))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X9))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X8),s('type.list.list'(X7),X9))))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X8))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X9))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10)))))),
  file('thm.evalProps.merge_alist_mod_env_empty_assoc','thm.evalProps.merge_alist_mod_env_empty_assoc')).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 108
% Passive clauses: 2697
% Generated clauses: 3777
% Final active clauses: 108
% Final passive clauses: 2519
% Input formulas: 23
% Initial clauses: 39
% 
% Selected by SInE selection: 21
% SInE iterations: 1
% 
% Duplicate literals: 1
% Trivial inequalities: 6
% Fw subsumption resolutions: 4
% Fw demodulations: 426
% 
% Simple tautologies: 11
% Forward subsumptions: 740
% 
% Forward superposition: 3370
% Equality resolution: 55
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 4477
% Time elapsed: 0.260 s
% ------------------------------
% ------------------------------
% Success in time 12.001 s
