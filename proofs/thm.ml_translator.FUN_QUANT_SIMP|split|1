Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f5314,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5299])).
fof(f5299,plain,(
  s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3))))) != s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3)))))),
  inference(superposition,[],[f4849,f5141])).
fof(f5141,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) = s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))) )),
  inference(forward_demodulation,[],[f49,f46])).
fof(f46,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))) = s(fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3] : s(fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))) = s(fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))) = s(fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X1),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X8] : ! [X11,X12] : s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X11),s(fun(X8,fun('type.semanticPrimitives.v',bool)),X12))) = s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X11))),s(fun(X8,fun('type.semanticPrimitives.v',bool)),X12)))),
  file('thm.ml_translator.FUN_QUANT_SIMP|split|1','ARITY_1_2_const.ml_translator.Arrow')).
fof(f49,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) = s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) = s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) = s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8] : ! [X9,X10] : s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X8,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X7,fun(X8,fun('type.semanticPrimitives.v',bool))),X9))))) = s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X7,fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X7,fun(X8,fun('type.semanticPrimitives.v',bool))),X9)))))),
  file('thm.ml_translator.FUN_QUANT_SIMP|split|1','thm.ml_translator.ml_translator_96_prove_ltb')).
fof(f4849,plain,(
  s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.Arrow_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3))))) != s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(sK2,fun('type.semanticPrimitives.v',bool)),fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3)))))),
  inference(forward_demodulation,[],[f40,f46])).
fof(f40,plain,(
  s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK2,fun('type.semanticPrimitives.v',bool)),fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3))))) != s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(sK2,fun('type.semanticPrimitives.v',bool)),fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3)))))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK2,fun('type.semanticPrimitives.v',bool)),fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3))))) != s(fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(sK1,fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(sK2,fun('type.semanticPrimitives.v',bool)),fun(fun(sK0,sK2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK1,fun(sK2,fun('type.semanticPrimitives.v',bool))),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f36])).
fof(f36,plain,(
  ? [X0,X1,X2,X3,X4] : s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) != s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1,X2,X3,X4] : s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) = s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : ! [X3,X4] : s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X2,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3))))) = s(fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X1,fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.semanticPrimitives.v',bool)),fun(fun(X0,X2),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun(X2,fun('type.semanticPrimitives.v',bool))),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10] : s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X8,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X7,fun(X8,fun('type.semanticPrimitives.v',bool))),X9))))) = s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X7,fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X7,fun(X8,fun('type.semanticPrimitives.v',bool))),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10] : s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X8,fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X7,fun(X8,fun('type.semanticPrimitives.v',bool))),X9))))) = s(fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.FUN_FORALL_1'(s(fun(X7,fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'_dst_x0x1_2'(s(fun(fun(X8,fun('type.semanticPrimitives.v',bool)),fun(fun(X6,X8),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.Arrow_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X7,fun(X8,fun('type.semanticPrimitives.v',bool))),X9)))))),
  file('thm.ml_translator.FUN_QUANT_SIMP|split|1','thm.ml_translator.FUN_QUANT_SIMP|split|1')).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 37
% Passive clauses: 1030
% Generated clauses: 5081
% Final active clauses: 35
% Final passive clauses: 945
% Input formulas: 13
% Initial clauses: 13
% 
% Duplicate literals: 447
% Trivial inequalities: 61
% Fw subsumption resolutions: 504
% Fw demodulations: 2
% 
% Simple tautologies: 143
% Equational tautologies: 89
% Forward subsumptions: 2111
% 
% Binary resolution: 25
% Forward superposition: 2010
% Backward superposition: 1451
% Self superposition: 304
% Equality factoring: 246
% Equality resolution: 7
% 
% Split clauses: 199
% Split components: 400
% SAT solver clauses: 726
% SAT solver unit clauses: 232
% SAT solver binary clauses: 247
% 
% Sat splits: 199
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 724
% TWLsolver calls for satisfiability: 30
% 
% Memory used [KB]: 4221
% Time elapsed: 0.185 s
% ------------------------------
% ------------------------------
% Success in time 0.19 s
