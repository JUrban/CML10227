Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_removeProof
% (110820)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 99
% Passive clauses: 2437
% Generated clauses: 16483
% Final active clauses: 89
% Final passive clauses: 2206
% Input formulas: 27
% Initial clauses: 56
% 
% Duplicate literals: 1061
% Trivial inequalities: 273
% Fw subsumption resolutions: 2158
% Fw demodulations: 1258
% Bw demodulations: 7
% 
% Simple tautologies: 362
% Equational tautologies: 110
% Forward subsumptions: 6712
% 
% Binary resolution: 122
% Forward superposition: 6410
% Backward superposition: 4294
% Self superposition: 361
% Equality factoring: 316
% Equality resolution: 22
% 
% Split clauses: 768
% Split components: 1552
% SAT solver clauses: 2246
% SAT solver unit clauses: 250
% SAT solver binary clauses: 615
% 
% Sat splits: 768
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 2238
% TWLsolver calls for satisfiability: 123
% 
% Memory used [KB]: 7931
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_removeProof
% (110845)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 179
% Passive clauses: 1014
% Generated clauses: 24166
% Final active clauses: 45
% Final passive clauses: 302
% Input formulas: 27
% Initial clauses: 56
% 
% Duplicate literals: 1780
% Trivial inequalities: 57
% Fw subsumption resolutions: 2394
% Fw demodulations: 3577
% Bw demodulations: 592
% Condensations: 1891
% Global subsumptions: 4
% 
% Simple tautologies: 198
% Equational tautologies: 51
% Forward subsumptions: 10911
% Bw demodulations to eq. taut.: 42
% 
% Binary resolution: 137
% Forward superposition: 6432
% Backward superposition: 4835
% Self superposition: 164
% Equality factoring: 58
% 
% Split clauses: 378
% Split components: 759
% SAT solver clauses: 1664
% SAT solver unit clauses: 64
% SAT solver binary clauses: 47
% SAT solver learnt clauses: 10
% SAT solver learnt literals: 4
% 
% Sat splits: 378
% Sat splitting refutations: 41
% 
% TWLsolver clauses: 1646
% TWLsolver calls for satisfiability: 413
% 
% Memory used [KB]: 13432
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_removeProof
% (110878)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 654
% Passive clauses: 7202
% Generated clauses: 116964
% Final active clauses: 52
% Final passive clauses: 207
% Input formulas: 27
% Initial clauses: 56
% 
% Duplicate literals: 3710
% Trivial inequalities: 1078
% Fw subsumption resolutions: 8491
% Fw demodulations: 16982
% Bw demodulations: 5343
% Condensations: 5556
% Global subsumptions: 3141
% 
% Simple tautologies: 1330
% Equational tautologies: 432
% Forward subsumptions: 65656
% Fw demodulations to eq. taut.: 17
% Bw demodulations to eq. taut.: 357
% 
% Unit resulting resolution: 2250
% Forward superposition: 27326
% Backward superposition: 19189
% Self superposition: 568
% Equality factoring: 222
% Equality resolution: 85
% 
% Split clauses: 224
% Split components: 450
% SAT solver clauses: 13970
% SAT solver unit clauses: 137
% SAT solver binary clauses: 1216
% 
% Sat splits: 224
% Sat splitting refutations: 3177
% 
% Memory used [KB]: 52067
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_removeProof
% SZS output start Proof for thm.clos_removeProof
fof(f406,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f61,f94,f90,f60,f93,f59,f89,f102,f92,f116,f127,f144,f158,f148,f146,f168,f187,f183,f91,f105,f207,f143,f141,f245,f268,f272,f271,f280,f291,f289,f295,f312,f313,f318,f322,f319,f321,f323,f325,f320,f324,f326,f328,f333,f317,f315,f367,f311,f310,f369,f314,f372,f375,f401,f404])).
fof(f404,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl10)),
  inference(subsumption_resolution,[],[f403,f93])).
fof(f403,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | ($spl1 | $spl2 | $spl10)),
  inference(forward_demodulation,[],[f402,f143])).
fof(f402,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ($spl1 | $spl2 | $spl10)),
  inference(subsumption_resolution,[],[f393,f90])).
fof(f393,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ($spl2 | $spl10)),
  inference(superposition,[],[f255,f143])).
fof(f255,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) ) | $spl2),
  inference(resolution,[],[f91,f64])).
fof(f64,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) | (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) & (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) | (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) & ((~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) <=> (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X11,X12,X10] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X10),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),X12)))))))) <=> (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X10),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),X12))))))))),
  file('thm.clos_removeProof.every_Fn_vs_NONE_CONS','thm.closProps.every_Fn_vs_NONE_def|split|1')).
fof(f401,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f400,f93])).
fof(f400,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | ($spl1 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f399,f105])).
fof(f399,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ($spl1 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f392,f90])).
fof(f392,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f255,f105])).
fof(f375,plain,(
  $false | ($spl9 | $spl29)),
  inference(subsumption_resolution,[],[f374,f140])).
fof(f140,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) != s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) | $spl9),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) != s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f374,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) | $spl29),
  inference(trivial_inequality_removal,[],[f373])).
fof(f373,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') != s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') | s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) | $spl29),
  inference(superposition,[],[f314,f65])).
fof(f65,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK2(X1,X0)),s('type.list.list'(X0),sK3(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK2(X1,X0)),s('type.list.list'(X0),sK3(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f32])).
fof(f32,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X9] : ! [X24] : (s('type.list.list'(X9),'const.list.NIL_0') = s('type.list.list'(X9),X24) | ? [X25,X8] : s('type.list.list'(X9),X24) = s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X25),s('type.list.list'(X9),X8))))),
  file('thm.clos_removeProof.every_Fn_vs_NONE_CONS','thm.list.list_CASES')).
fof(f372,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | $spl40),
  inference(cnf_transformation,[],[f372_D])).
fof(f372_D,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f314,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') != s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | $spl29),
  inference(cnf_transformation,[],[f314_D])).
fof(f314_D,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') != s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f369,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') != s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | $spl9),
  inference(superposition,[],[f140,f65])).
fof(f310,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')))) | $spl24),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f311,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) != s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | $spl27),
  inference(cnf_transformation,[],[f311_D])).
fof(f311_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) != s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f367,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) != s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')))) | $spl9),
  inference(superposition,[],[f140,f65])).
fof(f315,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | $spl28),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f317,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | $spl30),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f333,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | $spl8),
  inference(forward_demodulation,[],[f308,f141])).
fof(f308,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | $spl8),
  inference(superposition,[],[f65,f141])).
fof(f328,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | $spl38),
  inference(cnf_transformation,[],[f328_D])).
fof(f328_D,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f326,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ($spl2 | $spl8)),
  inference(forward_demodulation,[],[f302,f141])).
fof(f302,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | ($spl2 | $spl8)),
  inference(superposition,[],[f259,f141])).
fof(f259,plain,(
  ( ! [X0] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),X0)))))) | s('type.list.list'('type.closLang.exp'),X0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(X0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(X0,'type.closLang.exp'))))) ) | $spl2),
  inference(superposition,[],[f91,f65])).
fof(f324,plain,(
  ( ! [X3] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl36),
  inference(cnf_transformation,[],[f324_D])).
fof(f324_D,plain,(
  ( ! [X3] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f320,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | $spl35),
  inference(cnf_transformation,[],[f320_D])).
fof(f320_D,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f325,plain,(
  ( ! [X4] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl8),
  inference(forward_demodulation,[],[f301,f141])).
fof(f301,plain,(
  ( ! [X4] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl8),
  inference(superposition,[],[f64,f141])).
fof(f323,plain,(
  ( ! [X3] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl8),
  inference(forward_demodulation,[],[f300,f141])).
fof(f300,plain,(
  ( ! [X3] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X3),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl8),
  inference(superposition,[],[f64,f141])).
fof(f321,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | $spl34),
  inference(cnf_transformation,[],[f321_D])).
fof(f321_D,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f319,plain,(
  ( ! [X1] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))))))) ) | $spl32),
  inference(cnf_transformation,[],[f319_D])).
fof(f319_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f322,plain,(
  ( ! [X2] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))))) ) | $spl8),
  inference(forward_demodulation,[],[f299,f141])).
fof(f299,plain,(
  ( ! [X2] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))))))))) ) | $spl8),
  inference(superposition,[],[f63,f141])).
fof(f63,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f318,plain,(
  ( ! [X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))))))) ) | $spl8),
  inference(forward_demodulation,[],[f298,f141])).
fof(f298,plain,(
  ( ! [X1] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))))))) ) | $spl8),
  inference(superposition,[],[f63,f141])).
fof(f313,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | $spl8),
  inference(forward_demodulation,[],[f296,f141])).
fof(f296,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'))),'type.closLang.exp')))) | $spl8),
  inference(superposition,[],[f141,f65])).
fof(f312,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | $spl26),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f295,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp'),'type.closLang.exp')))) | $spl8),
  inference(superposition,[],[f141,f65])).
fof(f289,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7)))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))))))) ) | $spl20),
  inference(cnf_transformation,[],[f289_D])).
fof(f289_D,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7)))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f291,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.NIL_0','type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.NIL_0','type.closLang.exp')))) | $spl22),
  inference(cnf_transformation,[],[f291_D])).
fof(f291_D,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.NIL_0','type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.NIL_0','type.closLang.exp')))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f280,plain,(
  ( ! [X6,X7] : (s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.NIL_0','type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.NIL_0','type.closLang.exp')))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7)))))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))))))) ) | $spl2),
  inference(resolution,[],[f259,f64])).
fof(f271,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)),'type.closLang.exp')))) | $spl16),
  inference(cnf_transformation,[],[f271_D])).
fof(f271_D,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)),'type.closLang.exp')))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f272,plain,(
  ( ! [X0] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl18),
  inference(cnf_transformation,[],[f272_D])).
fof(f272_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f268,plain,(
  ( ! [X0] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)),'type.closLang.exp'))))) ) | $spl1),
  inference(superposition,[],[f248,f65])).
fof(f248,plain,(
  ( ! [X0] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))))))) ) | $spl1),
  inference(resolution,[],[f90,f63])).
fof(f245,plain,(
  $false | ($spl0 | $spl3 | $spl6)),
  inference(subsumption_resolution,[],[f241,f89])).
fof(f241,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | ($spl3 | $spl6)),
  inference(superposition,[],[f198,f105])).
fof(f198,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))) ) | $spl3),
  inference(resolution,[],[f92,f62])).
fof(f62,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f141,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) | $spl8),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f143,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | $spl10),
  inference(cnf_transformation,[],[f143_D])).
fof(f143_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f207,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) | $spl6),
  inference(superposition,[],[f105,f65])).
fof(f105,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl6),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f91,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | $spl2),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f183,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl0),
  inference(superposition,[],[f89,f65])).
fof(f187,plain,(
  $false | ($spl0 | $spl5)),
  inference(resolution,[],[f150,f89])).
fof(f150,plain,(
  ( ! [X1] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK0))))))) ) | $spl5),
  inference(subsumption_resolution,[],[f149,f94])).
fof(f149,plain,(
  ( ! [X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK0))))))) ) | $spl5),
  inference(forward_demodulation,[],[f130,f112])).
fof(f112,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl5),
  inference(subsumption_resolution,[],[f111,f87])).
fof(f87,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f67])).
fof(f67,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9] : ! [X10] : (s(X9,X10) = s(X9,X10) <=> p(s(bool,'T_0')))),
  file('thm.clos_removeProof.every_Fn_vs_NONE_CONS','thm.bool.REFL_CLAUSE')).
fof(f111,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl5),
  inference(forward_demodulation,[],[f110,f66])).
fof(f66,plain,(
  s(bool,'T_0') = s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f14])).
fof(f14,axiom,(
  s(bool,'T_0') = s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))),
  file('thm.clos_removeProof.every_Fn_vs_NONE_CONS','thm.closProps.every_Fn_vs_NONE_def|split|0')).
fof(f110,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl5),
  inference(superposition,[],[f94,f65])).
fof(f130,plain,(
  ( ! [X1] : (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),sK0)))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))))))) ) | $spl5),
  inference(superposition,[],[f63,f112])).
fof(f168,plain,(
  $false | ($spl5 | $spl12)),
  inference(subsumption_resolution,[],[f167,f86])).
fof(f86,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_removeProof.every_Fn_vs_NONE_CONS',aHL_TRUTH)).
fof(f167,plain,(
  ~p(s(bool,'T_0')) | ($spl5 | $spl12)),
  inference(forward_demodulation,[],[f161,f66])).
fof(f161,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | ($spl5 | $spl12)),
  inference(backward_demodulation,[],[f146,f94])).
fof(f146,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK0) | $spl12),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK0) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f148,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')))) | $spl14),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f158,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')))) | s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK0) | $spl5),
  inference(forward_demodulation,[],[f139,f112])).
fof(f139,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK0) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')))) | $spl5),
  inference(superposition,[],[f65,f112])).
fof(f144,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')))) | s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK0) | $spl5),
  inference(forward_demodulation,[],[f128,f112])).
fof(f128,plain,(
  s('type.list.list'('type.closLang.exp'),'const.list.NIL_0') = s('type.list.list'('type.closLang.exp'),sK0) | s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3('const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp'))),'type.closLang.exp')))) | $spl5),
  inference(superposition,[],[f112,f65])).
fof(f127,plain,(
  s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) | s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK3(sK0,'type.closLang.exp'),'type.closLang.exp')))) | $spl5),
  inference(superposition,[],[f112,f65])).
fof(f116,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl0),
  inference(superposition,[],[f89,f65])).
fof(f92,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | $spl3),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f102,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | s('type.list.list'('type.closLang.exp'),sK0) = s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2(sK0,'type.closLang.exp')),s('type.list.list'('type.closLang.exp'),sK3(sK0,'type.closLang.exp')))) | $spl1),
  inference(superposition,[],[f90,f65])).
fof(f89,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | $spl0),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f59,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))))),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))))) & (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f43])).
fof(f43,plain,(
  ? [X0,X1] : ((p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0)))))) | (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X0)))))) & (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0)))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X0))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ? [X0,X1] : ((p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0)))))) | (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X0)))))) & (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0)))))) | (~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X0)))))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ? [X0,X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0)))))) <~> (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X0))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0)))))) <=> (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6)))))) <=> (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6)))))) <=> (p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),X6))))))),
  file('thm.clos_removeProof.every_Fn_vs_NONE_CONS','thm.clos_removeProof.every_Fn_vs_NONE_CONS')).
fof(f93,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | $spl4),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f60,plain,(
  p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))))),
  inference(cnf_transformation,[],[f44])).
fof(f90,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) | $spl1),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f94,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | $spl5),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f61,plain,(
  ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),sK0)))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.closProps.every_Fn_vs_NONE_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))))),
  inference(cnf_transformation,[],[f44])).
% SZS output end Proof for thm.clos_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 80
% Generated clauses: 312
% Final active clauses: 24
% Final passive clauses: 36
% Input formulas: 27
% Initial clauses: 28
% 
% Selected by SInE selection: 13
% SInE iterations: 1
% 
% Duplicate literals: 2
% Trivial inequalities: 4
% Fw subsumption resolutions: 29
% Fw demodulations: 66
% Bw demodulations: 3
% 
% Simple tautologies: 12
% Equational tautologies: 1
% Forward subsumptions: 99
% 
% Binary resolution: 60
% Forward superposition: 64
% Backward superposition: 53
% 
% Split clauses: 22
% Split components: 45
% SAT solver clauses: 29
% SAT solver binary clauses: 5
% 
% Sat splits: 22
% Sat splitting refutations: 6
% 
% Memory used [KB]: 1151
% Time elapsed: 0.011 s
% ------------------------------
% ------------------------------
% Success in time 11.734 s
