Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (84106)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 851
% Passive clauses: 4950
% Generated clauses: 25219
% Final active clauses: 785
% Final passive clauses: 3727
% Input formulas: 260
% Initial clauses: 509
% 
% Duplicate literals: 189
% Trivial inequalities: 52
% Fw subsumption resolutions: 1758
% Fw demodulations: 1919
% Bw demodulations: 16
% 
% Simple tautologies: 230
% Equational tautologies: 28
% Forward subsumptions: 15892
% 
% Binary resolution: 4779
% Factoring: 848
% Forward superposition: 6076
% Backward superposition: 8884
% Self superposition: 46
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 213
% Split components: 428
% SAT solver clauses: 358
% SAT solver unit clauses: 17
% SAT solver binary clauses: 70
% 
% Sat splits: 213
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 358
% TWLsolver calls for satisfiability: 307
% 
% Memory used [KB]: 14711
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f14160,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f14159,f14113,f14139,f930,f1465,f1259,f1703])).
fof(f1703,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK102(X2,X1,X0)),s(X1,sK103(X2,X1,X0))))) ) | $spl416),
  inference(cnf_transformation,[],[f1703_D])).
fof(f1703_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK102(X2,X1,X0)),s(X1,sK103(X2,X1,X0))))) ) <=> ~$spl416),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl416])])).
fof(f1259,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK102(X2,X1,X0)),s(X1,sK103(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f876])).
fof(f876,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK102(X2,X1,X0)),s(X1,sK103(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK102,sK103])],[f527])).
fof(f527,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f526])).
fof(f526,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f143])).
fof(f143,axiom,(
  ! [X36,X35] : ! [X38] : ? [X49,X51] : s('type.pair.prod'(X36,X35),X38) = s('type.pair.prod'(X36,X35),'const.pair.,_2'(s(X36,X49),s(X35,X51)))),
  file('thm.mod_to_conProof.mod_to_conProof_88_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f1465,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))) ) | $spl0),
  inference(cnf_transformation,[],[f1465_D])).
fof(f1465_D,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f930,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))) )),
  inference(cnf_transformation,[],[f749])).
fof(f749,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19,sK20,sK21])],[f673])).
fof(f673,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),X2)))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),X2)))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X11))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',X9),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X11))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',X9),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),X8)))))),
  file('thm.mod_to_conProof.mod_to_conProof_88_prove_ltb','thm.mod_to_conProof.mod_to_conProof_88_prove_ltb')).
fof(f14139,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),X0) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))) ) | $spl4130),
  inference(cnf_transformation,[],[f14139_D])).
fof(f14139_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),X0) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))) ) <=> ~$spl4130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4130])])).
fof(f14113,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),X0) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment',sK21),s('type.modSem.state'(sK18),sK19),s('type.list.list'('type.modLang.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.modLang.exp'),sK20)))))) ) | ($spl0 | $spl416)),
  inference(superposition,[],[f1465,f1703])).
fof(f14159,plain,(
  $false | $spl4130),
  inference(equality_resolution,[],[f14139])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 408
% Passive clauses: 2194
% Generated clauses: 13439
% Final active clauses: 384
% Final passive clauses: 1482
% Input formulas: 260
% Initial clauses: 509
% 
% Duplicate literals: 81
% Trivial inequalities: 35
% Fw subsumption resolutions: 562
% Fw demodulations: 1170
% Bw demodulations: 319
% Condensations: 76
% Global subsumptions: 24
% 
% Simple tautologies: 218
% Equational tautologies: 14
% Forward subsumptions: 6319
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 1445
% Factoring: 174
% Forward superposition: 3616
% Backward superposition: 3027
% Self superposition: 62
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 3144
% SAT solver unit clauses: 658
% SAT solver binary clauses: 169
% SAT solver learnt clauses: 50
% SAT solver learnt literals: 13
% 
% Sat splits: 3
% Sat splitting refutations: 25
% 
% TWLsolver clauses: 3046
% TWLsolver calls for satisfiability: 7520
% 
% Memory used [KB]: 20340
% Time elapsed: 0.574 s
% ------------------------------
% ------------------------------
% Success in time 1.224 s
