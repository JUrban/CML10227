Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (80105)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 113
% Passive clauses: 2858
% Generated clauses: 20266
% Final active clauses: 111
% Final passive clauses: 2649
% Input formulas: 21
% Initial clauses: 53
% 
% Duplicate literals: 1681
% Trivial inequalities: 208
% Fw subsumption resolutions: 1386
% Fw demodulations: 849
% 
% Simple tautologies: 533
% Equational tautologies: 29
% Forward subsumptions: 11564
% 
% Binary resolution: 27
% Forward superposition: 9077
% Backward superposition: 6305
% Self superposition: 267
% Equality factoring: 96
% Equality resolution: 17
% 
% Split clauses: 806
% Split components: 1622
% SAT solver clauses: 1292
% SAT solver unit clauses: 58
% SAT solver binary clauses: 362
% 
% Sat splits: 806
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1282
% TWLsolver calls for satisfiability: 116
% 
% Memory used [KB]: 14200
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (80112)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 74
% Passive clauses: 773
% Generated clauses: 11106
% Final active clauses: 70
% Final passive clauses: 674
% Input formulas: 21
% Initial clauses: 53
% 
% Duplicate literals: 819
% Trivial inequalities: 103
% Fw subsumption resolutions: 429
% Fw demodulations: 393
% Bw demodulations: 24
% Condensations: 1572
% 
% Simple tautologies: 168
% Equational tautologies: 26
% Forward subsumptions: 5498
% 
% Binary resolution: 27
% Forward superposition: 3455
% Backward superposition: 3055
% Self superposition: 229
% Equality factoring: 90
% Equality resolution: 6
% 
% Split clauses: 89
% Split components: 178
% SAT solver clauses: 1368
% SAT solver unit clauses: 62
% SAT solver binary clauses: 82
% 
% Sat splits: 89
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 1368
% TWLsolver calls for satisfiability: 744
% 
% Memory used [KB]: 13304
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (80120)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 423
% Passive clauses: 13618
% Generated clauses: 128917
% Final active clauses: 111
% Final passive clauses: 900
% Input formulas: 21
% Initial clauses: 53
% Discarded non-redundant clauses: 2295
% 
% Duplicate literals: 6011
% Trivial inequalities: 943
% Fw subsumption resolutions: 3392
% Fw demodulations: 12379
% Bw demodulations: 10120
% Condensations: 12475
% Global subsumptions: 893
% 
% Simple tautologies: 1715
% Equational tautologies: 1630
% Forward subsumptions: 73928
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 421
% 
% Unit resulting resolution: 11784
% Forward superposition: 28796
% Backward superposition: 26458
% Self superposition: 602
% Equality factoring: 196
% Equality resolution: 26
% 
% Split clauses: 268
% Split components: 553
% SAT solver clauses: 16068
% SAT solver unit clauses: 79
% SAT solver binary clauses: 2405
% 
% Sat splits: 268
% Sat splitting refutations: 1018
% 
% Memory used [KB]: 78420
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f156,plain,(
  $false),
  inference(equality_resolution,[],[f151])).
fof(f151,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),X2) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),sK4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),sK5)))) )),
  inference(superposition,[],[f142,f71])).
fof(f71,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK8(X2,X1,X0)),s(X1,sK9(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK8(X2,X1,X0)),s(X1,sK9(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X14,X15] : ! [X19] : ? [X48,X31] : s('type.pair.prod'(X14,X15),X19) = s('type.pair.prod'(X14,X15),'const.pair.,_2'(s(X14,X48),s(X15,X31)))),
  file('thm.mod_to_conProof.mod_to_conProof_262_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f142,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.conLang.dec'),X1))) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),sK4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),sK5)))) )),
  inference(superposition,[],[f130,f71])).
fof(f130,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),sK4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),sK5))) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X1))),s('type.list.list'('type.conLang.dec'),X2)))) )),
  inference(superposition,[],[f119,f71])).
fof(f119,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),sK4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),sK5))) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X1),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X2))),s('type.list.list'('type.conLang.dec'),X3)))) )),
  inference(superposition,[],[f67,f71])).
fof(f67,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),sK4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),sK5))) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X2),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X4))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5))),s('type.list.list'('type.conLang.dec'),X6)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),sK4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),sK5))) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X2),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X4))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5))),s('type.list.list'('type.conLang.dec'),X6)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f38])).
fof(f38,plain,(
  ? [X0,X1] : ! [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),X1))) != s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X2),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X4))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5))),s('type.list.list'('type.conLang.dec'),X6)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),X1))) = s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X2),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X4))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5))),s('type.list.list'('type.conLang.dec'),X6)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ? [X8,X9,X10,X11,X12] : s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),X7))) = s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X8),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X10))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11))),s('type.list.list'('type.conLang.dec'),X12)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ? [X8,X9,X10,X11,X12] : s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.mod_to_con.compile_decs_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.finite_map.FEMPTY_0'))),s('type.list.list'('type.modLang.dec'),X7))) = s('type.pair.prod'('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.conLang.dec')),'const.pair.,_2'(s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X8),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X10))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11))),s('type.list.list'('type.conLang.dec'),X12)))),
  file('thm.mod_to_conProof.mod_to_conProof_262_prove_ltb','thm.mod_to_conProof.mod_to_conProof_262_prove_ltb')).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 6
% Generated clauses: 44
% Final active clauses: 41
% Final passive clauses: 1
% Input formulas: 21
% Initial clauses: 43
% 
% Selected by SInE selection: 11
% SInE iterations: 1
% 
% Simple tautologies: 6
% Forward subsumptions: 37
% 
% Forward superposition: 46
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 2430
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 11.749 s
