Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f990,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f486,f40,f72,f42,f44,f65,f983,f505,f503,f43,f67,f41,f71,f69])).
fof(f69,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2)))) | $spl4),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f71,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4)))) | $spl6),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f41,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4)))) | p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2))))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  (! [X8] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),X8)))) | ! [X9] : p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8))))))) | ! [X6] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),X6)))) | ! [X7] : p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X7),s('type.list.list'('type.ast.pat'),X6)))))))) & ((p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2)))) & ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK3),s('type.list.list'('type.ast.pat'),sK2))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4)))) & ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK5),s('type.list.list'('type.ast.pat'),sK4))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f31])).
fof(f31,plain,(
  ? [X0,X1] : ((! [X8] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X8)))) | ! [X9] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8))))))) | ! [X6] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X6)))) | ! [X7] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X7),s('type.list.list'('type.ast.pat'),X6)))))))) & (? [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X4)))) & ? [X5] : ~p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X5),s('type.list.list'('type.ast.pat'),X4))))))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X3),s('type.list.list'('type.ast.pat'),X2)))))))))),
  inference(rectify,[],[f30])).
fof(f30,plain,(
  ? [X0,X1] : ((! [X2] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X2)))) | ! [X3] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X3),s('type.list.list'('type.ast.pat'),X2))))))) | ! [X4] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X4)))) | ! [X5] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X5),s('type.list.list'('type.ast.pat'),X4)))))))) & (? [X2] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X3),s('type.list.list'('type.ast.pat'),X2))))))) | ? [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X4)))) & ? [X5] : ~p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X5),s('type.list.list'('type.ast.pat'),X4)))))))))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ? [X0,X1] : (! [X2] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X2)))) | ! [X3] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X3),s('type.list.list'('type.ast.pat'),X2))))))) <~> ! [X4] : (~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X4)))) | ! [X5] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X5),s('type.list.list'('type.ast.pat'),X4))))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : (! [X2] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X3),s('type.list.list'('type.ast.pat'),X2))))))) <=> ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X0),s('type.list.list'('type.ast.pat'),X4)))) => ! [X5] : p(s(bool,happ(s(fun('type.ast.pat',bool),X1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X5),s('type.list.list'('type.ast.pat'),X4))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (! [X8] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X6),s('type.list.list'('type.ast.pat'),X8)))) => ! [X9] : p(s(bool,happ(s(fun('type.ast.pat',bool),X7),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8))))))) <=> ! [X8] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X6),s('type.list.list'('type.ast.pat'),X8)))) => ! [X9] : p(s(bool,happ(s(fun('type.ast.pat',bool),X7),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (! [X8] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X6),s('type.list.list'('type.ast.pat'),X8)))) => ! [X9] : p(s(bool,happ(s(fun('type.ast.pat',bool),X7),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8))))))) <=> ! [X8] : (p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),X6),s('type.list.list'('type.ast.pat'),X8)))) => ! [X9] : p(s(bool,happ(s(fun('type.ast.pat',bool),X7),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8))))))))),
  file('thm.evalProps.evalProps_27_prove_ltb','thm.evalProps.evalProps_27_prove_ltb')).
fof(f67,plain,(
  ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK5),s('type.list.list'('type.ast.pat'),sK4)))))) | $spl3),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK5),s('type.list.list'('type.ast.pat'),sK4)))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f43,plain,(
  ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK5),s('type.list.list'('type.ast.pat'),sK4)))))) | p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2))))),
  inference(cnf_transformation,[],[f32])).
fof(f503,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4))) | $spl14),
  inference(cnf_transformation,[],[f503_D])).
fof(f503_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f505,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4))) | $spl6),
  inference(subsumption_resolution,[],[f500,f47])).
fof(f47,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.evalProps.evalProps_27_prove_ltb',aHL_FALSITY)).
fof(f500,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4))) | $spl6),
  inference(superposition,[],[f71,f48])).
fof(f48,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.evalProps.evalProps_27_prove_ltb',aHL_BOOL_CASES)).
fof(f983,plain,(
  $false | ($spl3 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f982,f45])).
fof(f45,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.evalProps.evalProps_27_prove_ltb',aHL_TRUTH)).
fof(f982,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f967,f503])).
fof(f967,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4)))) | ($spl3 | $spl8)),
  inference(resolution,[],[f67,f72])).
fof(f65,plain,(
  ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK3),s('type.list.list'('type.ast.pat'),sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK3),s('type.list.list'('type.ast.pat'),sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f44,plain,(
  ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK5),s('type.list.list'('type.ast.pat'),sK4)))))) | ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK3),s('type.list.list'('type.ast.pat'),sK2))))))),
  inference(cnf_transformation,[],[f32])).
fof(f42,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK4)))) | ~p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK3),s('type.list.list'('type.ast.pat'),sK2))))))),
  inference(cnf_transformation,[],[f32])).
fof(f72,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),X8))))) ) | $spl8),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),X8))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f40,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X7),s('type.list.list'('type.ast.pat'),X6)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),X6)))) | p(s(bool,happ(s(fun('type.ast.pat',bool),sK1),s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X9),s('type.list.list'('type.ast.pat'),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),X8))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f486,plain,(
  $false | ($spl1 | $spl4 | $spl8)),
  inference(subsumption_resolution,[],[f485,f45])).
fof(f485,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl4 | $spl8)),
  inference(forward_demodulation,[],[f475,f79])).
fof(f79,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2))) | $spl4),
  inference(resolution,[],[f69,f50])).
fof(f50,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.evalProps.evalProps_27_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f475,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.ast.pat'),bool),sK0),s('type.list.list'('type.ast.pat'),sK2)))) | ($spl1 | $spl8)),
  inference(resolution,[],[f72,f65])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 28
% Passive clauses: 191
% Generated clauses: 896
% Final active clauses: 25
% Final passive clauses: 139
% Input formulas: 12
% Initial clauses: 24
% 
% Duplicate literals: 98
% Trivial inequalities: 26
% Fw subsumption resolutions: 125
% Fw demodulations: 8
% Bw demodulations: 2
% 
% Simple tautologies: 60
% Equational tautologies: 28
% Forward subsumptions: 350
% 
% Binary resolution: 55
% Factoring: 1
% Forward superposition: 155
% Backward superposition: 295
% Self superposition: 42
% Equality factoring: 50
% Equality resolution: 5
% 
% Split clauses: 17
% Split components: 34
% SAT solver clauses: 30
% SAT solver unit clauses: 7
% SAT solver binary clauses: 12
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 17
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 27
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 895
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 0.03 s
