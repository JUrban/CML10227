Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlSem
% (64153)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 134
% Passive clauses: 1221
% Generated clauses: 21988
% Final active clauses: 125
% Final passive clauses: 878
% Input formulas: 33
% Initial clauses: 43
% 
% Duplicate literals: 939
% Trivial inequalities: 205
% Fw subsumption resolutions: 2840
% Fw demodulations: 2052
% Bw demodulations: 3
% 
% Simple tautologies: 280
% Equational tautologies: 32
% Forward subsumptions: 13488
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 6
% Forward superposition: 8235
% Backward superposition: 7202
% Self superposition: 270
% Equality factoring: 81
% Equality resolution: 26
% 
% Split clauses: 514
% Split components: 1046
% SAT solver clauses: 1129
% SAT solver unit clauses: 46
% SAT solver binary clauses: 189
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 5
% 
% Sat splits: 514
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1126
% TWLsolver calls for satisfiability: 157
% 
% Memory used [KB]: 16630
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvlSem
% (64175)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 91
% Passive clauses: 303
% Generated clauses: 16332
% Final active clauses: 88
% Final passive clauses: 208
% Input formulas: 33
% Initial clauses: 43
% 
% Duplicate literals: 811
% Trivial inequalities: 191
% Fw subsumption resolutions: 1213
% Fw demodulations: 961
% Bw demodulations: 2
% Condensations: 2951
% 
% Simple tautologies: 175
% Equational tautologies: 30
% Forward subsumptions: 8760
% 
% Binary resolution: 4
% Forward superposition: 5255
% Backward superposition: 4248
% Self superposition: 239
% Equality factoring: 78
% Equality resolution: 21
% 
% Split clauses: 38
% Split components: 80
% SAT solver clauses: 555
% SAT solver unit clauses: 67
% SAT solver binary clauses: 49
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 38
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 554
% TWLsolver calls for satisfiability: 264
% 
% Memory used [KB]: 14967
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvlSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlSem
% SZS output start Proof for thm.bvlSem
fof(f24720,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f109,f158,f156,f154,f152,f150,f148,f108,f157,f107,f155,f106,f153,f105,f151,f104,f149,f147,f165,f191,f194,f192,f634,f635,f782,f636,f783,f781,f2274,f2276,f10005,f10024,f10025,f10027,f10032,f2275,f9899,f10033,f10034,f10006,f10035,f21554,f21597,f21609,f22464,f22516,f22529,f23026,f23085,f23098,f24047,f24107,f24120,f24183,f24534,f24601,f24631,f24716,f24717,f24718,f24719])).
fof(f24719,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f152,f24550])).
fof(f24550,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) | $spl0),
  inference(forward_demodulation,[],[f24549,f18244])).
fof(f18244,plain,(
  ( ! [X4,X5,X3] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f132,f159])).
fof(f159,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f140,f139])).
fof(f139,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X22,X23] : ! [X24,X25] : s(X23,X24) = s(X23,'const.combin.K_2'(s(X23,X24),s(X22,X25)))),
  file('thm.bvlSem.state_literal_|49||49|','thm.combin.K_THM')).
fof(f140,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X23,X22] : ! [X26,X27] : s(X23,'const.combin.K_2'(s(X23,X26),s(X22,X27))) = s(X23,happ(s(fun(X22,X23),'const.combin.K_1'(s(X23,X26))),s(X22,X27)))),
  file('thm.bvlSem.state_literal_|49||49|','ARITY_1_2_const.combin.K')).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X18,X19] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X19),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_67_prove_ltb')).
fof(f24549,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24548,f18244])).
fof(f24548,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24547,f132])).
fof(f24547,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24546,f132])).
fof(f24546,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24545,f18239])).
fof(f18239,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X3))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X4),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.bvlSem.state'(X1),X3)))))))) )),
  inference(superposition,[],[f132,f144])).
fof(f144,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X6] : ! [X18,X19] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X18))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_53_prove_ltb')).
fof(f24545,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24544,f18239])).
fof(f24544,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24543,f132])).
fof(f24543,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24542,f132])).
fof(f24542,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24541,f18240])).
fof(f18240,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X5),X7))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X5),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X8),s('type.bvlSem.state'(X5),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X6),s('type.bvlSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f132,f129])).
fof(f129,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X18,X19] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X18))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_52_prove_ltb')).
fof(f24541,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24540,f18240])).
fof(f24540,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24539,f132])).
fof(f24539,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24538,f132])).
fof(f24538,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24537,f18241])).
fof(f18241,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X12),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X9),X11))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X9),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X12),s('type.bvlSem.state'(X9),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f132,f119])).
fof(f119,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X18,X19] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X18))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_5|49|_prove_ltb')).
fof(f24537,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24536,f18241])).
fof(f24536,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24535,f125])).
fof(f125,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X18,X19] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X18))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_5|48|_prove_ltb')).
fof(f24535,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24393,f125])).
fof(f24393,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f134])).
fof(f134,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2] : ((s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))))) & (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : ((s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))))) & ((s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X20,X21] : (s('type.bvlSem.state'(X6),X20) = s('type.bvlSem.state'(X6),X21) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X20))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X21))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X20))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X21))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X20))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X21))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X20))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X21))) & s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X20))) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X21)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.state_component_equality')).
fof(f24718,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f109,f108,f107,f106,f105,f104,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f123,f124,f125,f126,f127,f128,f129,f130,f131,f132,f138,f137,f136,f135,f134,f133,f139,f159,f141,f142,f143,f144,f145,f146,f180,f182,f183,f191,f215,f232,f233,f279,f280,f292,f302,f303,f346,f349,f556,f557,f565,f634,f635,f636,f653,f670,f694,f1329,f939,f940,f941,f959,f979,f990,f991,f1099,f1100,f1101,f1175,f1163,f1455,f1384,f1385,f1386,f1591,f1592,f1981,f1735,f1978,f1757,f2006,f2256,f2047,f2193,f2451,f2464,f2465,f2685,f2686,f3461,f3457,f3343,f3344,f3370,f3371,f3637,f3550,f3551,f3611,f3680,f3711,f3712,f3857,f4128,f4162,f4155,f4642,f4304,f4305,f5027,f5028,f5544,f5545,f5911,f5985,f5986,f6581,f6582,f6770,f6771,f6772,f6775,f6776,f6777,f6796,f6797,f6782,f6783,f6784,f6787,f6788,f6789,f6790,f6799,f6800,f6919,f6920,f6921,f6995,f7013,f7014,f7015,f7197,f7200,f7328,f7331,f7336,f7338,f7339,f7726,f7378,f7379,f7380,f7383,f7384,f7386,f7394,f7395,f7398,f7402,f7522,f7525,f7623,f7611,f8371,f8369,f8244,f8245,f8246,f8516,f8517,f8518,f9295,f9293,f9288,f9213,f9361,f9206,f9011,f9971,f9969,f9904,f10025,f10027,f10032,f10034,f10471,f10472,f10681,f10682,f10683,f12147,f12143,f12142,f12141,f11958,f11959,f12005,f12006,f12435,f12433,f12299,f12300,f12620,f12621,f12622,f12623,f12624,f12625,f12729,f12828,f12829,f13012,f13013,f13014,f13015,f13016,f13017,f13123,f13373,f13374,f13375,f14198,f14199,f14200,f14201,f14202,f14203,f16000,f16001,f16002,f16704,f16707,f18239,f18240,f18241,f18242,f18243,f18244,f19268,f21940,f21938,f21937,f21936,f21935,f21695,f21696,f21898,f22204,f22203,f22194,f22195,f23578,f23579,f147,f24503,f24504,f24514,f24515,f24550,f24551,f24563,f24564,f24674,f24630,f24600,f24533])).
fof(f24533,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | $spl0),
  inference(forward_demodulation,[],[f24532,f13017])).
fof(f24532,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24531,f13017])).
fof(f24531,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24530,f130])).
fof(f24530,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24529,f130])).
fof(f24529,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24528,f13012])).
fof(f24528,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24527,f13012])).
fof(f24527,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24526,f130])).
fof(f24526,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24525,f130])).
fof(f24525,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24524,f13013])).
fof(f24524,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24523,f13013])).
fof(f24523,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24522,f130])).
fof(f24522,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24521,f130])).
fof(f24521,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24520,f13014])).
fof(f24520,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24519,f13014])).
fof(f24519,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24518,f130])).
fof(f24518,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24517,f130])).
fof(f24517,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24516,f13015])).
fof(f24516,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24394,f13015])).
fof(f24394,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f133])).
fof(f24600,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | $spl0),
  inference(forward_demodulation,[],[f24599,f13017])).
fof(f24599,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24598,f13017])).
fof(f24598,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24597,f130])).
fof(f24597,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24596,f130])).
fof(f24596,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24595,f13012])).
fof(f24595,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24594,f13012])).
fof(f24594,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24593,f130])).
fof(f24593,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24592,f130])).
fof(f24592,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24591,f13013])).
fof(f24591,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24590,f13013])).
fof(f24590,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24589,f130])).
fof(f24589,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24588,f130])).
fof(f24588,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24587,f13014])).
fof(f24587,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24586,f13014])).
fof(f24586,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24585,f130])).
fof(f24585,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24584,f130])).
fof(f24584,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24583,f13015])).
fof(f24583,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24389,f13015])).
fof(f24389,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f133])).
fof(f24630,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | $spl0),
  inference(forward_demodulation,[],[f24397,f13017])).
fof(f24397,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(superposition,[],[f13017,f147])).
fof(f24674,plain,(
  ( ! [X20] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),X20))) | s('type.bvlSem.state'(sK1),X20) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f24422,f13017])).
fof(f24422,plain,(
  ( ! [X20] : (s('type.bvlSem.state'(sK1),X20) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),X20))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))))) ) | $spl0),
  inference(superposition,[],[f133,f147])).
fof(f24564,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(backward_demodulation,[],[f24563,f24551])).
fof(f24563,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | $spl0),
  inference(forward_demodulation,[],[f24562,f14203])).
fof(f24562,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24561,f14203])).
fof(f24561,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24560,f131])).
fof(f24560,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24559,f131])).
fof(f24559,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24558,f14198])).
fof(f24558,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24557,f14198])).
fof(f24557,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24556,f116])).
fof(f24556,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24555,f116])).
fof(f24555,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24554,f128])).
fof(f24554,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24553,f128])).
fof(f24553,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24552,f127])).
fof(f24552,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24392,f127])).
fof(f24392,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f136])).
fof(f24551,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(backward_demodulation,[],[f24550,f24515])).
fof(f24515,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(backward_demodulation,[],[f24514,f24504])).
fof(f24514,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) = s('type.ffi.ffi_state'(sK1),sK11) | $spl0),
  inference(forward_demodulation,[],[f24513,f12625])).
fof(f24513,plain,(
  s('type.ffi.ffi_state'(sK1),sK11) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24512,f12625])).
fof(f24512,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f24511,f122])).
fof(f24511,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24510,f122])).
fof(f24510,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f24509,f113])).
fof(f24509,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24508,f113])).
fof(f24508,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24507,f123])).
fof(f24507,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24506,f123])).
fof(f24506,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24505,f120])).
fof(f24505,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24395,f120])).
fof(f24395,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f137])).
fof(f24504,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(backward_demodulation,[],[f24503,f147])).
fof(f24503,plain,(
  s('type.num.num',sK4) = s('type.num.num',sK9) | $spl0),
  inference(forward_demodulation,[],[f24502,f159])).
fof(f24502,plain,(
  s('type.num.num',sK9) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24501,f159])).
fof(f24501,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24500,f121])).
fof(f24500,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24499,f121])).
fof(f24499,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f24498,f117])).
fof(f24498,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24497,f117])).
fof(f24497,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24496,f115])).
fof(f24496,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f24396,f115])).
fof(f24396,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f135])).
fof(f23579,plain,(
  ( ! [X557,X559,X553,X555,X556,X558,X552,X554] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X553),s(X555,X556))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X557),s(X558,X559))) | s(bool,X557) = s(bool,happ(s(fun(X552,bool),'const.combin.K_1'(s(bool,X553))),s(X552,X554)))) )),
  inference(superposition,[],[f3637,f159])).
fof(f23578,plain,(
  ( ! [X546,X549,X551,X545,X547,X548,X550,X544] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X544),s(X547,X548))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X549),s(X550,X551))) | s(bool,X549) = s(bool,'const.combin.K_2'(s(bool,X544),s(X545,X546)))) )),
  inference(superposition,[],[f3637,f139])).
fof(f22195,plain,(
  ( ! [X428,X424,X426,X429,X425,X427] : (s(bool,X425) != s(bool,X427) | s(bool,'const.combin.K_2'(s(bool,X427),s(X428,X429))) = s(bool,happ(s(fun(X424,bool),'const.combin.K_1'(s(bool,X425))),s(X424,X426))) | s(bool,'T_0') = s(bool,happ(s(fun(X424,bool),'const.combin.K_1'(s(bool,X425))),s(X424,X426)))) )),
  inference(superposition,[],[f21898,f159])).
fof(f22194,plain,(
  ( ! [X420,X422,X418,X421,X423,X419] : (s(bool,X418) != s(bool,X421) | s(bool,'const.combin.K_2'(s(bool,X418),s(X419,X420))) = s(bool,'const.combin.K_2'(s(bool,X421),s(X422,X423))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X418),s(X419,X420)))) )),
  inference(superposition,[],[f21898,f139])).
fof(f22203,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,X77) != s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) | s(bool,X73) = s(bool,'const.combin.K_2'(s(bool,X77),s(X78,X79))) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75)) )),
  inference(duplicate_literal_removal,[],[f22147])).
fof(f22147,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,X77) != s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) | s(bool,X73) = s(bool,'const.combin.K_2'(s(bool,X77),s(X78,X79))) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f21898,f303])).
fof(f22204,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,X70) != s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) | s(bool,X66) = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67)) )),
  inference(duplicate_literal_removal,[],[f22146])).
fof(f22146,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,X70) != s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) | s(bool,X66) = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f21898,f302])).
fof(f21898,plain,(
  ( ! [X383,X382,X378,X381] : (s(bool,X378) != s(bool,X381) | s(bool,X381) = s(bool,'const.combin.K_2'(s(bool,X378),s(X382,X383))) | s(bool,'T_0') = s(bool,X381)) )),
  inference(superposition,[],[f3370,f139])).
fof(f21696,plain,(
  ( ! [X540,X536,X538,X534,X541,X537,X539,X535] : (s(bool,X535) != s(bool,'const.combin.K_2'(s(bool,X537),s(X538,X539))) | s(bool,'const.combin.K_2'(s(bool,X537),s(X540,X541))) = s(bool,happ(s(fun(X534,bool),'const.combin.K_1'(s(bool,X535))),s(X534,X536))) | s(bool,'T_0') = s(bool,happ(s(fun(X534,bool),'const.combin.K_1'(s(bool,X535))),s(X534,X536)))) )),
  inference(superposition,[],[f3370,f159])).
fof(f21695,plain,(
  ( ! [X532,X528,X530,X526,X533,X529,X531,X527] : (s(bool,X526) != s(bool,'const.combin.K_2'(s(bool,X529),s(X530,X531))) | s(bool,'const.combin.K_2'(s(bool,X526),s(X527,X528))) = s(bool,'const.combin.K_2'(s(bool,X529),s(X532,X533))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X526),s(X527,X528)))) )),
  inference(superposition,[],[f3370,f139])).
fof(f21935,plain,(
  ( ! [X103,X101,X99,X97,X105,X102,X100,X98,X104] : (s(bool,'const.combin.K_2'(s(bool,X101),s(X102,X103))) != s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X99))),s(X98,X100))) | s(bool,X97) = s(bool,'const.combin.K_2'(s(bool,X101),s(X104,X105))) | s(bool,'T_0') = s(bool,X97) | s(bool,'T_0') = s(bool,X99)) )),
  inference(duplicate_literal_removal,[],[f21653])).
fof(f21653,plain,(
  ( ! [X103,X101,X99,X97,X105,X102,X100,X98,X104] : (s(bool,'const.combin.K_2'(s(bool,X101),s(X102,X103))) != s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X99))),s(X98,X100))) | s(bool,X97) = s(bool,'const.combin.K_2'(s(bool,X101),s(X104,X105))) | s(bool,'T_0') = s(bool,X97) | s(bool,'T_0') = s(bool,X99) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f3370,f303])).
fof(f21936,plain,(
  ( ! [X94,X92,X90,X88,X95,X93,X91,X89,X96] : (s(bool,'const.combin.K_2'(s(bool,X89),s(X90,X91))) != s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94))) | s(bool,X88) = s(bool,'const.combin.K_2'(s(bool,X92),s(X95,X96))) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,X89)) )),
  inference(duplicate_literal_removal,[],[f21652])).
fof(f21652,plain,(
  ( ! [X94,X92,X90,X88,X95,X93,X91,X89,X96] : (s(bool,'const.combin.K_2'(s(bool,X89),s(X90,X91))) != s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94))) | s(bool,X88) = s(bool,'const.combin.K_2'(s(bool,X92),s(X95,X96))) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,X89) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f3370,f302])).
fof(f21937,plain,(
  ( ! [X70,X78,X76,X74,X72,X71,X77,X75,X73] : (s(bool,X71) != s(bool,'const.combin.K_2'(s(bool,X72),s(X73,X74))) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,X72),s(X75,X76))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X71))),s(X77,X78)))) )),
  inference(duplicate_literal_removal,[],[f21650])).
fof(f21650,plain,(
  ( ! [X70,X78,X76,X74,X72,X71,X77,X75,X73] : (s(bool,X71) != s(bool,'const.combin.K_2'(s(bool,X72),s(X73,X74))) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,X72),s(X75,X76))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X71))),s(X77,X78)))) )),
  inference(superposition,[],[f3370,f280])).
fof(f21938,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X51,X49] : (s(bool,X44) != s(bool,'const.combin.K_2'(s(bool,X45),s(X46,X47))) | s(bool,X43) = s(bool,'const.combin.K_2'(s(bool,X45),s(X48,X49))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X44),s(X50,X51)))) )),
  inference(duplicate_literal_removal,[],[f21647])).
fof(f21647,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X51,X49] : (s(bool,X44) != s(bool,'const.combin.K_2'(s(bool,X45),s(X46,X47))) | s(bool,X43) = s(bool,'const.combin.K_2'(s(bool,X45),s(X48,X49))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X44),s(X50,X51)))) )),
  inference(superposition,[],[f3370,f279])).
fof(f21940,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s(bool,X14) != s(bool,'const.combin.K_2'(s(bool,X15),s(X16,X17))) | s(bool,X13) = s(bool,'const.combin.K_2'(s(bool,X15),s(X18,X19))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X14)) )),
  inference(duplicate_literal_removal,[],[f21643])).
fof(f21643,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s(bool,X14) != s(bool,'const.combin.K_2'(s(bool,X15),s(X16,X17))) | s(bool,X13) = s(bool,'const.combin.K_2'(s(bool,X15),s(X18,X19))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3370,f180])).
fof(f19268,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,X0),s(X4,X5))) = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),'const.combin.K_1'(s(bool,X1))),s(X6,X7)))) )),
  inference(condensation,[],[f19267])).
fof(f19267,plain,(
  ( ! [X70,X78,X76,X74,X72,X71,X77,X75,X73] : (s(bool,'const.combin.K_2'(s(bool,X71),s(X72,X73))) = s(bool,'const.combin.K_2'(s(bool,X74),s(X75,X76))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X74) | s(bool,'T_0') = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X71))),s(X77,X78)))) )),
  inference(duplicate_literal_removal,[],[f18364])).
fof(f18364,plain,(
  ( ! [X70,X78,X76,X74,X72,X71,X77,X75,X73] : (s(bool,'const.combin.K_2'(s(bool,X71),s(X72,X73))) = s(bool,'const.combin.K_2'(s(bool,X74),s(X75,X76))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X71))),s(X77,X78)))) )),
  inference(superposition,[],[f1981,f280])).
fof(f18243,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X20),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X17),X19))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X17),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X20),s('type.bvlSem.state'(X17),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X18),s('type.bvlSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f132,f125])).
fof(f18242,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X13),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.bvlSem.state'(X13),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X14),s('type.bvlSem.state'(X13),X15))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X14),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f132,f132])).
fof(f16707,plain,(
  ( ! [X1725,X1727,X1720,X1722,X1724,X1726,X1721,X1723] : (s(X1722,f(s(bool,X1723))) != s(X1722,g(s(bool,X1723))) | s(fun(bool,X1722),X1720) = s(fun(bool,X1722),X1721) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK12(X1720,X1721,X1722,bool)),s(X1724,X1725))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1723),s(X1726,X1727)))) )),
  inference(superposition,[],[f146,f1329])).
fof(f16704,plain,(
  ( ! [X1697,X1699,X1701,X1703,X1696,X1698,X1700,X1702] : (s(bool,X1699) != s(bool,f(s(X1696,sK12(X1697,X1698,bool,X1696)))) | s(fun(X1696,bool),X1697) = s(fun(X1696,bool),X1698) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X1696,sK12(X1697,X1698,bool,X1696)))),s(X1700,X1701))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1699),s(X1702,X1703)))) )),
  inference(superposition,[],[f146,f1329])).
fof(f16002,plain,(
  ( ! [X198,X196,X200,X199,X197,X201] : (s(bool,X196) = s(bool,'const.combin.K_2'(s(bool,X197),s(bool,X196))) | s(bool,X197) = s(bool,X198) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X198),s(X199,X200))) | s(bool,X196) = s(bool,X201) | s(bool,'T_0') = s(bool,X201)) )),
  inference(superposition,[],[f1329,f180])).
fof(f16001,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X195,X193] : (s(bool,X188) = s(bool,'const.combin.K_2'(s(bool,X189),s(bool,X188))) | s(bool,X189) = s(bool,X190) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X190),s(X191,X192))) | s(bool,X188) = s(bool,X193) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X193),s(X194,X195)))) )),
  inference(superposition,[],[f1329,f279])).
fof(f16000,plain,(
  ( ! [X187,X185,X182,X180,X186,X184,X183,X181] : (s(bool,X180) = s(bool,'const.combin.K_2'(s(bool,X181),s(bool,X180))) | s(bool,X181) = s(bool,X182) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X182),s(X183,X184))) | s(bool,X180) = s(bool,X185) | s(bool,'T_0') = s(bool,happ(s(fun(X186,bool),'const.combin.K_1'(s(bool,X185))),s(X186,X187)))) )),
  inference(superposition,[],[f1329,f280])).
fof(f14203,plain,(
  ( ! [X4,X5,X3] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X3) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X3))),s('type.bvlSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f131,f159])).
fof(f14202,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X20),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X17),X19))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X17),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X20),s('type.bvlSem.state'(X17),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X18),s('type.bvlSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f131,f127])).
fof(f14201,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X16),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X13),X15))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X13),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X16),s('type.bvlSem.state'(X13),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X14),s('type.bvlSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f131,f128])).
fof(f14200,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X9),X11))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X9),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X12),s('type.bvlSem.state'(X9),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f131,f116])).
fof(f14199,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X5),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X8),s('type.bvlSem.state'(X5),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X6),s('type.bvlSem.state'(X5),X7))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X8),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f131,f131])).
fof(f14198,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X4),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X1),X3))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X4),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.bvlSem.state'(X1),X3)))))))) )),
  inference(superposition,[],[f131,f143])).
fof(f13375,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,X122) = s(bool,'const.combin.K_2'(s(bool,X123),s(bool,X122))) | s(bool,X124) = s(bool,'const.combin.K_2'(s(bool,X123),s(bool,X124))) | s(bool,'T_0') = s(bool,X124) | s(bool,X122) = s(bool,X125) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f694,f180])).
fof(f13374,plain,(
  ( ! [X121,X118,X116,X120,X119,X117] : (s(bool,X116) = s(bool,'const.combin.K_2'(s(bool,X117),s(bool,X116))) | s(bool,X118) = s(bool,'const.combin.K_2'(s(bool,X117),s(bool,X118))) | s(bool,'T_0') = s(bool,X118) | s(bool,X116) = s(bool,X119) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X119),s(X120,X121)))) )),
  inference(superposition,[],[f694,f279])).
fof(f13373,plain,(
  ( ! [X111,X114,X112,X110,X115,X113] : (s(bool,X110) = s(bool,'const.combin.K_2'(s(bool,X111),s(bool,X110))) | s(bool,X112) = s(bool,'const.combin.K_2'(s(bool,X111),s(bool,X112))) | s(bool,'T_0') = s(bool,X112) | s(bool,X110) = s(bool,X113) | s(bool,'T_0') = s(bool,happ(s(fun(X114,bool),'const.combin.K_1'(s(bool,X113))),s(X114,X115)))) )),
  inference(superposition,[],[f694,f280])).
fof(f13123,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X6),s('type.list.list'('type.option.option'('type.bvlSem.v')),X4))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X3),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X6),s('type.bvlSem.state'(X3),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X4))),s('type.bvlSem.state'(X3),X5)))))))) )),
  inference(superposition,[],[f130,f13017])).
fof(f13017,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),X3) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f130,f159])).
fof(f13016,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X17),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X20),s('type.bvlSem.state'(X17),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X18),s('type.bvlSem.state'(X17),X19))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X20),s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X18),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f130,f130])).
fof(f13015,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X16),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X13),X15))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X13),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X16),s('type.bvlSem.state'(X13),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X14),s('type.bvlSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f130,f124])).
fof(f13014,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X12),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X9),X11))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X9),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X12),s('type.bvlSem.state'(X9),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f130,f114])).
fof(f13013,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X8),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X5),X7))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X5),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X8),s('type.bvlSem.state'(X5),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X6),s('type.bvlSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f130,f126])).
fof(f13012,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X4),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X1),X3))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X4),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.bvlSem.state'(X1),X3)))))))) )),
  inference(superposition,[],[f130,f142])).
fof(f12829,plain,(
  ( ! [X300,X302,X298,X301,X303,X299] : (s(bool,X299) != s(bool,happ(s(fun(X301,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X301,X302))) | s(bool,'T_0') = s(bool,X303) | s(bool,X303) = s(bool,happ(s(fun(X298,bool),'const.combin.K_1'(s(bool,X299))),s(X298,X300)))) )),
  inference(superposition,[],[f9904,f159])).
fof(f12828,plain,(
  ( ! [X292,X294,X296,X293,X295,X297] : (s(bool,X292) != s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) | s(bool,'T_0') = s(bool,X297) | s(bool,X297) = s(bool,'const.combin.K_2'(s(bool,X292),s(X293,X294)))) )),
  inference(superposition,[],[f9904,f139])).
fof(f12729,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.ffi.ffi_state'(X8),happ(s(fun('type.ffi.ffi_state'(X4),'type.ffi.ffi_state'(X8)),X9),s('type.ffi.ffi_state'(X4),X6))) = s('type.ffi.ffi_state'(X8),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X8),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X4),'type.ffi.ffi_state'(X8)),X9),s('type.bvlSem.state'(X4),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X6))),s('type.bvlSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f145,f12625])).
fof(f12625,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ffi.ffi_state'(X4),X6) = s('type.ffi.ffi_state'(X4),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X6))),s('type.bvlSem.state'(X5),X7)))))) )),
  inference(superposition,[],[f145,f159])).
fof(f12624,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.ffi.ffi_state'(X24),happ(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X24)),X25),s('type.ffi.ffi_state'(X21),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X21),X23))))) = s('type.ffi.ffi_state'(X24),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X24),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X24)),X25),s('type.bvlSem.state'(X21),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X22),s('type.bvlSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f145,f120])).
fof(f12623,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.ffi.ffi_state'(X19),happ(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X19)),X20),s('type.ffi.ffi_state'(X16),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X16),X18))))) = s('type.ffi.ffi_state'(X19),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X19),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X19)),X20),s('type.bvlSem.state'(X16),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X17),s('type.bvlSem.state'(X16),X18)))))))) )),
  inference(superposition,[],[f145,f123])).
fof(f12622,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.ffi.ffi_state'(X14),happ(s(fun('type.ffi.ffi_state'(X11),'type.ffi.ffi_state'(X14)),X15),s('type.ffi.ffi_state'(X11),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X11),X13))))) = s('type.ffi.ffi_state'(X14),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X14),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X11),'type.ffi.ffi_state'(X14)),X15),s('type.bvlSem.state'(X11),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.state'(X11),X13)))))))) )),
  inference(superposition,[],[f145,f113])).
fof(f12621,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.ffi.ffi_state'(X9),happ(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X9)),X10),s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X8))))) = s('type.ffi.ffi_state'(X9),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X9),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X9)),X10),s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X7),s('type.bvlSem.state'(X6),X8)))))))) )),
  inference(superposition,[],[f145,f122])).
fof(f12620,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ffi.ffi_state'(X4),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X4),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X4)),X5),s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.bvlSem.state'(X1),X3))))))) = s('type.ffi.ffi_state'(X4),happ(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X4)),X5),s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X3)))))))) )),
  inference(superposition,[],[f145,f145])).
fof(f12300,plain,(
  ( ! [X313,X315,X310,X312,X314,X311] : (s(bool,'F_0') != s(bool,happ(s(fun(X313,bool),'const.combin.K_1'(s(bool,X311))),s(X313,X314))) | s(bool,X315) = s(bool,happ(s(fun(X310,bool),'const.combin.K_1'(s(bool,X311))),s(X310,X312))) | s(bool,'T_0') = s(bool,X315)) )),
  inference(superposition,[],[f12147,f159])).
fof(f12299,plain,(
  ( ! [X308,X304,X306,X309,X305,X307] : (s(bool,'F_0') != s(bool,happ(s(fun(X307,bool),'const.combin.K_1'(s(bool,X304))),s(X307,X308))) | s(bool,X309) = s(bool,'const.combin.K_2'(s(bool,X304),s(X305,X306))) | s(bool,'T_0') = s(bool,X309)) )),
  inference(superposition,[],[f12147,f139])).
fof(f12433,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'F_0') != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X4))),s(X3,X5))) | s(bool,X0) = s(bool,X4)) )),
  inference(condensation,[],[f12432])).
fof(f12432,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s(bool,'F_0') != s(bool,happ(s(fun(X124,bool),'const.combin.K_1'(s(bool,X123))),s(X124,X125))) | s(bool,'T_0') = s(bool,X126) | s(bool,X123) = s(bool,X127) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X127),s(X128,X129)))) )),
  inference(duplicate_literal_removal,[],[f12273])).
fof(f12273,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s(bool,'F_0') != s(bool,happ(s(fun(X124,bool),'const.combin.K_1'(s(bool,X123))),s(X124,X125))) | s(bool,'T_0') = s(bool,X126) | s(bool,'T_0') = s(bool,X126) | s(bool,X123) = s(bool,X127) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X127),s(X128,X129)))) )),
  inference(superposition,[],[f12147,f279])).
fof(f12435,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'F_0') != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X4))),s(X3,X5))) | s(bool,X1) = s(bool,X4)) )),
  inference(condensation,[],[f12434])).
fof(f12434,plain,(
  ( ! [X121,X118,X116,X122,X120,X119,X117] : (s(bool,'F_0') != s(bool,happ(s(fun(X117,bool),'const.combin.K_1'(s(bool,X116))),s(X117,X118))) | s(bool,'T_0') = s(bool,X119) | s(bool,X116) = s(bool,X120) | s(bool,'T_0') = s(bool,happ(s(fun(X121,bool),'const.combin.K_1'(s(bool,X120))),s(X121,X122)))) )),
  inference(duplicate_literal_removal,[],[f12272])).
fof(f12272,plain,(
  ( ! [X121,X118,X116,X122,X120,X119,X117] : (s(bool,'F_0') != s(bool,happ(s(fun(X117,bool),'const.combin.K_1'(s(bool,X116))),s(X117,X118))) | s(bool,'T_0') = s(bool,X119) | s(bool,'T_0') = s(bool,X119) | s(bool,X116) = s(bool,X120) | s(bool,'T_0') = s(bool,happ(s(fun(X121,bool),'const.combin.K_1'(s(bool,X120))),s(X121,X122)))) )),
  inference(superposition,[],[f12147,f280])).
fof(f12006,plain,(
  ( ! [X313,X315,X310,X312,X314,X311] : (s(bool,X313) != s(bool,happ(s(fun(X314,bool),'const.combin.K_1'(s(bool,X311))),s(X314,X315))) | s(bool,X313) = s(bool,happ(s(fun(X310,bool),'const.combin.K_1'(s(bool,X311))),s(X310,X312))) | s(bool,'T_0') = s(bool,X313)) )),
  inference(superposition,[],[f7611,f159])).
fof(f12005,plain,(
  ( ! [X308,X304,X306,X309,X305,X307] : (s(bool,X307) != s(bool,happ(s(fun(X308,bool),'const.combin.K_1'(s(bool,X304))),s(X308,X309))) | s(bool,X307) = s(bool,'const.combin.K_2'(s(bool,X304),s(X305,X306))) | s(bool,'T_0') = s(bool,X307)) )),
  inference(superposition,[],[f7611,f139])).
fof(f11959,plain,(
  ( ! [X302,X304,X306,X303,X305,X307] : (s(bool,X303) != s(bool,happ(s(fun(X305,bool),'const.combin.K_1'(s(bool,X306))),s(X305,X307))) | s(bool,X306) = s(bool,happ(s(fun(X302,bool),'const.combin.K_1'(s(bool,X303))),s(X302,X304))) | s(bool,'T_0') = s(bool,happ(s(fun(X302,bool),'const.combin.K_1'(s(bool,X303))),s(X302,X304)))) )),
  inference(superposition,[],[f7611,f159])).
fof(f11958,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (s(bool,X296) != s(bool,happ(s(fun(X299,bool),'const.combin.K_1'(s(bool,X300))),s(X299,X301))) | s(bool,X300) = s(bool,'const.combin.K_2'(s(bool,X296),s(X297,X298))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X296),s(X297,X298)))) )),
  inference(superposition,[],[f7611,f139])).
fof(f12141,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) != s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X78))),s(X77,X79))) | s(bool,X73) = s(bool,X78) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75)) )),
  inference(duplicate_literal_removal,[],[f11930])).
fof(f11930,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) != s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X78))),s(X77,X79))) | s(bool,X73) = s(bool,X78) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f7611,f303])).
fof(f12142,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) != s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,X66) = s(bool,X71) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67)) )),
  inference(duplicate_literal_removal,[],[f11929])).
fof(f11929,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) != s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,X66) = s(bool,X71) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f7611,f302])).
fof(f12143,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,X53) != s(bool,happ(s(fun(X54,bool),'const.combin.K_1'(s(bool,X55))),s(X54,X56))) | s(bool,X52) = s(bool,X55) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X57,bool),'const.combin.K_1'(s(bool,X53))),s(X57,X58)))) )),
  inference(duplicate_literal_removal,[],[f11927])).
fof(f11927,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,X53) != s(bool,happ(s(fun(X54,bool),'const.combin.K_1'(s(bool,X55))),s(X54,X56))) | s(bool,X52) = s(bool,X55) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X57,bool),'const.combin.K_1'(s(bool,X53))),s(X57,X58)))) )),
  inference(superposition,[],[f7611,f280])).
fof(f12147,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X2))),s(X1,X3))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f11918])).
fof(f11918,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X2))),s(X1,X3))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f7611,f112])).
fof(f10683,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s(bool,X144) = s(bool,'const.combin.K_2'(s(bool,X145),s(bool,X144))) | s(bool,X145) = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X146,X147))) | s(bool,X144) = s(bool,X148) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f9971,f180])).
fof(f10682,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (s(bool,X137) = s(bool,'const.combin.K_2'(s(bool,X138),s(bool,X137))) | s(bool,X138) = s(bool,happ(s(fun(X139,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X139,X140))) | s(bool,X137) = s(bool,X141) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143)))) )),
  inference(superposition,[],[f9971,f279])).
fof(f10681,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131] : (s(bool,X130) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X130))) | s(bool,X131) = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X132,X133))) | s(bool,X130) = s(bool,X134) | s(bool,'T_0') = s(bool,happ(s(fun(X135,bool),'const.combin.K_1'(s(bool,X134))),s(X135,X136)))) )),
  inference(superposition,[],[f9971,f280])).
fof(f10472,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X89) != s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X90))),s(bool,X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X89) = s(bool,X91) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X91),s(X92,X93)))) )),
  inference(superposition,[],[f9361,f279])).
fof(f10471,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X84) != s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X85))),s(bool,X84))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,'T_0') = s(bool,happ(s(fun(X87,bool),'const.combin.K_1'(s(bool,X86))),s(X87,X88)))) )),
  inference(superposition,[],[f9361,f280])).
fof(f9904,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f9903])).
fof(f9903,plain,(
  ( ! [X261,X257,X259,X260,X258] : (s(bool,X260) != s(bool,happ(s(fun(X258,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X258,X259))) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,'T_0') = s(bool,X257)) )),
  inference(duplicate_literal_removal,[],[f9676])).
fof(f9676,plain,(
  ( ! [X261,X257,X259,X260,X258] : (s(bool,X260) != s(bool,happ(s(fun(X258,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X258,X259))) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,'T_0') = s(bool,X257) | s(bool,'T_0') = s(bool,X257)) )),
  inference(superposition,[],[f3680,f9288])).
fof(f9969,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X1) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X3,X4)))) )),
  inference(condensation,[],[f9968])).
fof(f9968,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(duplicate_literal_removal,[],[f9496])).
fof(f9496,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(superposition,[],[f9288,f280])).
fof(f9971,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X3,X4)))) )),
  inference(condensation,[],[f9970])).
fof(f9970,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) = s(bool,happ(s(fun(X27,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(duplicate_literal_removal,[],[f9493])).
fof(f9493,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) = s(bool,happ(s(fun(X27,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(superposition,[],[f9288,f279])).
fof(f9011,plain,(
  ( ! [X883,X881,X882,X880,X884,X879] : (s(bool,f(s(X879,sK12(X880,X881,bool,X879)))) != s(bool,happ(s(fun(X882,bool),'const.combin.K_1'(s(bool,X883))),s(X882,X884))) | s(fun(X879,bool),X880) = s(fun(X879,bool),X881) | s(bool,'T_0') = s(bool,X883) | s(bool,'T_0') = s(bool,g(s(X879,sK12(X880,X881,bool,X879))))) )),
  inference(superposition,[],[f146,f303])).
fof(f9206,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X3))),s(X2,X4))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f9205])).
fof(f9205,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (s(bool,X292) != s(bool,happ(s(fun(X289,bool),'const.combin.K_1'(s(bool,X290))),s(X289,X291))) | s(bool,X292) = s(bool,X293) | s(bool,'T_0') = s(bool,X293) | s(bool,'T_0') = s(bool,X288) | s(bool,'T_0') = s(bool,X290)) )),
  inference(duplicate_literal_removal,[],[f8936])).
fof(f8936,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (s(bool,X292) != s(bool,happ(s(fun(X289,bool),'const.combin.K_1'(s(bool,X290))),s(X289,X291))) | s(bool,X292) = s(bool,X293) | s(bool,'T_0') = s(bool,X293) | s(bool,'T_0') = s(bool,X288) | s(bool,'T_0') = s(bool,X290) | s(bool,'T_0') = s(bool,X288)) )),
  inference(superposition,[],[f3680,f303])).
fof(f9361,plain,(
  ( ! [X4,X0,X3] : (s(bool,'T_0') != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f9212,f139])).
fof(f9212,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4)))) )),
  inference(condensation,[],[f9211])).
fof(f9211,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X187,X188))) != s(bool,happ(s(fun(X184,bool),'const.combin.K_1'(s(bool,X185))),s(X184,X186))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X185)) )),
  inference(duplicate_literal_removal,[],[f8921])).
fof(f8921,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X187,X188))) != s(bool,happ(s(fun(X184,bool),'const.combin.K_1'(s(bool,X185))),s(X184,X186))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X185) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f1175,f303])).
fof(f9213,plain,(
  ( ! [X175,X173,X171,X169,X174,X172,X170] : (s(bool,'const.combin.K_2'(s(bool,X173),s(X174,X175))) != s(bool,happ(s(fun(X170,bool),'const.combin.K_1'(s(bool,X171))),s(X170,X172))) | s(bool,X169) = s(bool,X173) | s(bool,'T_0') = s(bool,X169) | s(bool,'T_0') = s(bool,X171)) )),
  inference(duplicate_literal_removal,[],[f8919])).
fof(f8919,plain,(
  ( ! [X175,X173,X171,X169,X174,X172,X170] : (s(bool,'const.combin.K_2'(s(bool,X173),s(X174,X175))) != s(bool,happ(s(fun(X170,bool),'const.combin.K_1'(s(bool,X171))),s(X170,X172))) | s(bool,X169) = s(bool,X173) | s(bool,'T_0') = s(bool,X169) | s(bool,'T_0') = s(bool,X171) | s(bool,'T_0') = s(bool,X169)) )),
  inference(superposition,[],[f1163,f303])).
fof(f9288,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f9287])).
fof(f9287,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f8764])).
fof(f8764,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f303,f112])).
fof(f9293,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X2))),s(X1,X3))) = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X0))),s(X4,X5))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(condensation,[],[f9292])).
fof(f9292,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X78))),s(X77,X79))) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75)) )),
  inference(duplicate_literal_removal,[],[f8739])).
fof(f8739,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X78))),s(X77,X79))) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f303,f303])).
fof(f9295,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X0))),s(X4,X5))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f9294])).
fof(f9294,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67)) )),
  inference(duplicate_literal_removal,[],[f8738])).
fof(f8738,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f303,f302])).
fof(f8518,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X19) != s(bool,happ(s(fun(X20,bool),'const.combin.K_1'(s(bool,X18))),s(X20,X21))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X19),s(X22,X23))) | s(bool,X18) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f8371,f180])).
fof(f8517,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (s(bool,X10) != s(bool,happ(s(fun(X11,bool),'const.combin.K_1'(s(bool,X9))),s(X11,X12))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X15),s(X16,X17)))) )),
  inference(superposition,[],[f8371,f279])).
fof(f8516,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X0))),s(X2,X3))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,happ(s(fun(X7,bool),'const.combin.K_1'(s(bool,X6))),s(X7,X8)))) )),
  inference(superposition,[],[f8371,f280])).
fof(f8246,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,X15) != s(bool,happ(s(fun(X16,bool),'const.combin.K_1'(s(bool,X14))),s(X16,X17))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f7623,f180])).
fof(f8245,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X8) != s(bool,happ(s(fun(X9,bool),'const.combin.K_1'(s(bool,X7))),s(X9,X10))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f7623,f279])).
fof(f8244,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X0))),s(X2,X3))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.combin.K_1'(s(bool,X4))),s(X5,X6)))) )),
  inference(superposition,[],[f7623,f280])).
fof(f8369,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X1) != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X3,X4)))) )),
  inference(condensation,[],[f8368])).
fof(f8368,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) != s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(duplicate_literal_removal,[],[f8214])).
fof(f8214,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) != s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(superposition,[],[f7623,f280])).
fof(f8371,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X3,X4))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f8370])).
fof(f8370,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) != s(bool,happ(s(fun(X27,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(duplicate_literal_removal,[],[f8211])).
fof(f8211,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) != s(bool,happ(s(fun(X27,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(superposition,[],[f7623,f279])).
fof(f7611,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X2))),s(X1,X3))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f280])).
fof(f7623,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f7605])).
fof(f7605,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f280])).
fof(f7525,plain,(
  ( ! [X810,X808,X812,X811,X809,X813] : (s(X810,f(s(bool,'T_0'))) != s(X810,g(s(bool,'T_0'))) | s(fun(bool,X810),X808) = s(fun(bool,X810),X809) | s(bool,X811) = s(bool,sK12(X808,X809,X810,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X812,bool),'const.combin.K_1'(s(bool,X811))),s(X812,X813)))) )),
  inference(superposition,[],[f146,f280])).
fof(f7522,plain,(
  ( ! [X790,X795,X793,X791,X794,X792] : (s(bool,'T_0') != s(bool,f(s(X790,sK12(X791,X792,bool,X790)))) | s(fun(X790,bool),X791) = s(fun(X790,bool),X792) | s(bool,X793) = s(bool,g(s(X790,sK12(X791,X792,bool,X790)))) | s(bool,'T_0') = s(bool,happ(s(fun(X794,bool),'const.combin.K_1'(s(bool,X793))),s(X794,X795)))) )),
  inference(superposition,[],[f146,f280])).
fof(f7402,plain,(
  ( ! [X476,X472,X474,X471,X475,X473,X470] : (s(bool,X470) != s(bool,'const.combin.K_2'(s(bool,X471),s(bool,X470))) | s(bool,'T_0') = s(bool,happ(s(fun(X472,bool),'const.combin.K_1'(s(bool,X471))),s(X472,X473))) | s(bool,X470) = s(bool,X474) | s(bool,'T_0') = s(bool,happ(s(fun(X475,bool),'const.combin.K_1'(s(bool,X474))),s(X475,X476)))) )),
  inference(superposition,[],[f2451,f280])).
fof(f7398,plain,(
  ( ! [X445,X447,X449,X451,X446,X448,X450] : (s(bool,X445) = s(bool,'const.combin.K_2'(s(bool,X446),s(bool,X445))) | s(bool,X446) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X447,X448))) | s(bool,X445) = s(bool,X449) | s(bool,'T_0') = s(bool,happ(s(fun(X450,bool),'const.combin.K_1'(s(bool,X449))),s(X450,X451)))) )),
  inference(superposition,[],[f2256,f280])).
fof(f7395,plain,(
  ( ! [X428,X430,X426,X432,X429,X431,X427] : (s(bool,X426) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X427))),s(bool,X426))) | s(bool,X427) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X428,X429))) | s(bool,X426) = s(bool,X430) | s(bool,'T_0') = s(bool,happ(s(fun(X431,bool),'const.combin.K_1'(s(bool,X430))),s(X431,X432)))) )),
  inference(superposition,[],[f2047,f280])).
fof(f7394,plain,(
  ( ! [X422,X424,X421,X423,X425] : (s(bool,X421) != s(bool,'const.combin.K_2'(s(bool,X422),s(bool,X421))) | s(bool,'T_0') = s(bool,X422) | s(bool,X421) = s(bool,X423) | s(bool,'T_0') = s(bool,happ(s(fun(X424,bool),'const.combin.K_1'(s(bool,X423))),s(X424,X425)))) )),
  inference(superposition,[],[f2006,f280])).
fof(f7386,plain,(
  ( ! [X377,X372,X374,X376,X378,X373,X375] : (s(bool,X372) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X373))),s(bool,X372))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X373),s(X374,X375))) | s(bool,X372) = s(bool,X376) | s(bool,'T_0') = s(bool,happ(s(fun(X377,bool),'const.combin.K_1'(s(bool,X376))),s(X377,X378)))) )),
  inference(superposition,[],[f556,f280])).
fof(f7384,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s(bool,X360) = s(bool,'const.combin.K_2'(s(bool,X361),s(bool,X360))) | s(bool,X361) = s(bool,X362) | s(bool,'T_0') = s(bool,X362) | s(bool,X360) = s(bool,X363) | s(bool,'T_0') = s(bool,happ(s(fun(X364,bool),'const.combin.K_1'(s(bool,X363))),s(X364,X365)))) )),
  inference(superposition,[],[f279,f280])).
fof(f7383,plain,(
  ( ! [X356,X358,X354,X357,X359,X353,X355] : (s(bool,X353) = s(bool,'const.combin.K_2'(s(bool,X354),s(bool,X353))) | s(bool,'F_0') = s(bool,happ(s(fun(X355,bool),'const.combin.K_1'(s(bool,X354))),s(X355,X356))) | s(bool,X353) = s(bool,X357) | s(bool,'T_0') = s(bool,happ(s(fun(X358,bool),'const.combin.K_1'(s(bool,X357))),s(X358,X359)))) )),
  inference(superposition,[],[f233,f280])).
fof(f7380,plain,(
  ( ! [X333,X335,X337,X332,X334,X336,X338] : (s(bool,X332) = s(bool,'const.combin.K_2'(s(bool,X333),s(bool,X332))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X333),s(X334,X335))) | s(bool,X332) = s(bool,X336) | s(bool,'T_0') = s(bool,happ(s(fun(X337,bool),'const.combin.K_1'(s(bool,X336))),s(X337,X338)))) )),
  inference(superposition,[],[f232,f280])).
fof(f7379,plain,(
  ( ! [X327,X329,X331,X328,X330] : (s(bool,X327) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X328))),s(bool,X327))) | s(bool,'F_0') = s(bool,X328) | s(bool,X327) = s(bool,X329) | s(bool,'T_0') = s(bool,happ(s(fun(X330,bool),'const.combin.K_1'(s(bool,X329))),s(X330,X331)))) )),
  inference(superposition,[],[f215,f280])).
fof(f7378,plain,(
  ( ! [X325,X323,X324,X326,X322] : (s(bool,X322) = s(bool,'const.combin.K_2'(s(bool,X323),s(bool,X322))) | s(bool,'F_0') = s(bool,X323) | s(bool,X322) = s(bool,X324) | s(bool,'T_0') = s(bool,happ(s(fun(X325,bool),'const.combin.K_1'(s(bool,X324))),s(X325,X326)))) )),
  inference(superposition,[],[f182,f280])).
fof(f7726,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) )),
  inference(condensation,[],[f7725])).
fof(f7725,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (s(bool,X279) != s(bool,X280) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X280) | s(bool,X279) = s(bool,X282) | s(bool,'T_0') = s(bool,happ(s(fun(X283,bool),'const.combin.K_1'(s(bool,X282))),s(X283,X284)))) )),
  inference(duplicate_literal_removal,[],[f7371])).
fof(f7371,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (s(bool,X279) != s(bool,X280) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X280) | s(bool,X279) = s(bool,X282) | s(bool,'T_0') = s(bool,happ(s(fun(X283,bool),'const.combin.K_1'(s(bool,X282))),s(X283,X284)))) )),
  inference(superposition,[],[f3680,f280])).
fof(f7339,plain,(
  ( ! [X54,X52,X50,X48,X56,X55,X53,X51,X49] : (s(bool,X49) != s(bool,'const.combin.K_2'(s(bool,X48),s(X50,X51))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X49),s(X52,X53))) | s(bool,X48) = s(bool,X54) | s(bool,'T_0') = s(bool,happ(s(fun(X55,bool),'const.combin.K_1'(s(bool,X54))),s(X55,X56)))) )),
  inference(superposition,[],[f1455,f280])).
fof(f7338,plain,(
  ( ! [X39,X47,X45,X43,X41,X46,X44,X42,X40] : (s(bool,X40) != s(bool,'const.combin.K_2'(s(bool,X39),s(X41,X42))) | s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44))) | s(bool,X39) = s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(X46,bool),'const.combin.K_1'(s(bool,X45))),s(X46,X47)))) )),
  inference(superposition,[],[f1384,f280])).
fof(f7336,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s(bool,X26) != s(bool,'const.combin.K_2'(s(bool,X25),s(X27,X28))) | s(bool,'T_0') = s(bool,X26) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),'const.combin.K_1'(s(bool,X29))),s(X30,X31)))) )),
  inference(superposition,[],[f1175,f280])).
fof(f7331,plain,(
  ( ! [X850,X848,X852,X847,X851,X849] : (s(X849,f(s(bool,X850))) != s(X849,g(s(bool,X850))) | s(fun(bool,X849),X847) = s(fun(bool,X849),X848) | s(bool,'T_0') = s(bool,sK12(X847,X848,X849,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X851,bool),'const.combin.K_1'(s(bool,X850))),s(X851,X852)))) )),
  inference(superposition,[],[f146,f280])).
fof(f7328,plain,(
  ( ! [X831,X829,X833,X830,X834,X832] : (s(bool,X832) != s(bool,f(s(X829,sK12(X830,X831,bool,X829)))) | s(fun(X829,bool),X830) = s(fun(X829,bool),X831) | s(bool,'T_0') = s(bool,g(s(X829,sK12(X830,X831,bool,X829)))) | s(bool,'T_0') = s(bool,happ(s(fun(X833,bool),'const.combin.K_1'(s(bool,X832))),s(X833,X834)))) )),
  inference(superposition,[],[f146,f280])).
fof(f7200,plain,(
  ( ! [X866,X870,X868,X867,X865,X869] : (s(X867,f(s(bool,X868))) != s(X867,g(s(bool,X868))) | s(fun(bool,X867),X865) = s(fun(bool,X867),X866) | s(bool,'T_0') = s(bool,X868) | s(bool,'T_0') = s(bool,happ(s(fun(X869,bool),'const.combin.K_1'(s(bool,sK12(X865,X866,X867,bool)))),s(X869,X870)))) )),
  inference(superposition,[],[f146,f280])).
fof(f7197,plain,(
  ( ! [X850,X848,X852,X847,X851,X849] : (s(bool,X850) != s(bool,f(s(X847,sK12(X848,X849,bool,X847)))) | s(fun(X847,bool),X848) = s(fun(X847,bool),X849) | s(bool,'T_0') = s(bool,X850) | s(bool,'T_0') = s(bool,happ(s(fun(X851,bool),'const.combin.K_1'(s(bool,g(s(X847,sK12(X848,X849,bool,X847)))))),s(X851,X852)))) )),
  inference(superposition,[],[f146,f280])).
fof(f7015,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,X104) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X105))),s(bool,X104))) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X106) | s(bool,X104) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f280,f180])).
fof(f7014,plain,(
  ( ! [X103,X101,X99,X102,X100,X98] : (s(bool,X98) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X99))),s(bool,X98))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X101),s(X102,X103)))) )),
  inference(superposition,[],[f280,f279])).
fof(f7013,plain,(
  ( ! [X94,X92,X97,X95,X93,X96] : (s(bool,X92) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X93))),s(bool,X92))) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94) | s(bool,X92) = s(bool,X95) | s(bool,'T_0') = s(bool,happ(s(fun(X96,bool),'const.combin.K_1'(s(bool,X95))),s(X96,X97)))) )),
  inference(superposition,[],[f280,f280])).
fof(f6995,plain,(
  ( ! [X261,X263,X265,X260,X262,X264] : (s(bool,'T_0') = s(bool,happ(s(fun(X263,bool),'const.combin.K_1'(s(bool,X261))),s(X263,X264))) | s(bool,X265) = s(bool,happ(s(fun(X260,bool),'const.combin.K_1'(s(bool,X261))),s(X260,X262))) | s(bool,'T_0') = s(bool,X265)) )),
  inference(superposition,[],[f280,f159])).
fof(f6921,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,happ(s(fun(X19,bool),'const.combin.K_1'(s(bool,X18))),s(X19,X20))) | s(bool,X16) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f280,f180])).
fof(f6920,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),'const.combin.K_1'(s(bool,X10))),s(X11,X12))) | s(bool,X8) = s(bool,X13) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15)))) )),
  inference(superposition,[],[f280,f279])).
fof(f6919,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),'const.combin.K_1'(s(bool,X5))),s(X6,X7)))) )),
  inference(superposition,[],[f280,f280])).
fof(f6800,plain,(
  ( ! [X61,X57,X60,X56,X55] : (s(bool,'F_0') != s(bool,f(s(X55,sK12(X56,X57,bool,X55)))) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X55,sK12(X56,X57,bool,X55)))),s(X60,X61)))) )),
  inference(forward_demodulation,[],[f6793,f139])).
fof(f6793,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))) != s(bool,f(s(X55,sK12(X56,X57,bool,X55)))) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X55,sK12(X56,X57,bool,X55)))),s(X60,X61)))) )),
  inference(superposition,[],[f146,f2256])).
fof(f6799,plain,(
  ( ! [X54,X50,X48,X53,X49] : (s(bool,'F_0') != s(bool,f(s(X48,sK12(X49,X50,bool,X48)))) | s(fun(X48,bool),X49) = s(fun(X48,bool),X50) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,g(s(X48,sK12(X49,X50,bool,X48)))))),s(X53,X54)))) )),
  inference(forward_demodulation,[],[f6792,f139])).
fof(f6792,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))) != s(bool,f(s(X48,sK12(X49,X50,bool,X48)))) | s(fun(X48,bool),X49) = s(fun(X48,bool),X50) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,g(s(X48,sK12(X49,X50,bool,X48)))))),s(X53,X54)))) )),
  inference(superposition,[],[f146,f2047])).
fof(f6790,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'const.combin.K_2'(s(bool,X40),s(X41,X42))) != s(bool,f(s(X37,sK12(X38,X39,bool,X37)))) | s(fun(X37,bool),X38) = s(fun(X37,bool),X39) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,g(s(X37,sK12(X38,X39,bool,X37))))) )),
  inference(superposition,[],[f146,f302])).
fof(f6789,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(bool,'T_0') != s(bool,f(s(X31,sK12(X32,X33,bool,X31)))) | s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,X34) = s(bool,g(s(X31,sK12(X32,X33,bool,X31)))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X34),s(X35,X36)))) )),
  inference(superposition,[],[f146,f279])).
fof(f6788,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X28) != s(bool,f(s(X25,sK12(X26,X27,bool,X25)))) | s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,g(s(X25,sK12(X26,X27,bool,X25)))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X28),s(X29,X30)))) )),
  inference(superposition,[],[f146,f279])).
fof(f6787,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,f(s(X19,sK12(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X19,sK12(X20,X21,bool,X19)))),s(X23,X24)))) )),
  inference(superposition,[],[f146,f279])).
fof(f6784,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK12(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK12(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f146,f180])).
fof(f6783,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK12(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK12(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f146,f180])).
fof(f6782,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK12(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK12(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f146,f112])).
fof(f6797,plain,(
  ( ! [X61,X57,X60,X56,X55] : (s(X57,f(s(bool,'F_0'))) != s(X57,g(s(bool,'F_0'))) | s(fun(bool,X57),X55) = s(fun(bool,X57),X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK12(X55,X56,X57,bool)),s(X60,X61)))) )),
  inference(forward_demodulation,[],[f6781,f139])).
fof(f6781,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(X57,f(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))))) != s(X57,g(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))))) | s(fun(bool,X57),X55) = s(fun(bool,X57),X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK12(X55,X56,X57,bool)),s(X60,X61)))) )),
  inference(superposition,[],[f146,f2256])).
fof(f6796,plain,(
  ( ! [X54,X50,X48,X53,X49] : (s(X50,f(s(bool,'F_0'))) != s(X50,g(s(bool,'F_0'))) | s(fun(bool,X50),X48) = s(fun(bool,X50),X49) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,sK12(X48,X49,X50,bool)))),s(X53,X54)))) )),
  inference(forward_demodulation,[],[f6780,f139])).
fof(f6780,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(X50,f(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))))) != s(X50,g(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))))) | s(fun(bool,X50),X48) = s(fun(bool,X50),X49) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,sK12(X48,X49,X50,bool)))),s(X53,X54)))) )),
  inference(superposition,[],[f146,f2047])).
fof(f6777,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(X33,f(s(bool,'T_0'))) != s(X33,g(s(bool,'T_0'))) | s(fun(bool,X33),X31) = s(fun(bool,X33),X32) | s(bool,X34) = s(bool,sK12(X31,X32,X33,bool)) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X34),s(X35,X36)))) )),
  inference(superposition,[],[f146,f279])).
fof(f6776,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(X27,f(s(bool,X28))) != s(X27,g(s(bool,X28))) | s(fun(bool,X27),X25) = s(fun(bool,X27),X26) | s(bool,'T_0') = s(bool,sK12(X25,X26,X27,bool)) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X28),s(X29,X30)))) )),
  inference(superposition,[],[f146,f279])).
fof(f6775,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(X21,f(s(bool,X22))) != s(X21,g(s(bool,X22))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK12(X19,X20,X21,bool)),s(X23,X24)))) )),
  inference(superposition,[],[f146,f279])).
fof(f6772,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK12(X7,X8,X9,bool))) )),
  inference(superposition,[],[f146,f180])).
fof(f6771,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK12(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f146,f180])).
fof(f6770,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK12(X0,X1,X2,bool))) )),
  inference(superposition,[],[f146,f112])).
fof(f6582,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,X96),s(bool,X95))) | s(bool,'T_0') = s(bool,happ(s(fun(X97,bool),'const.combin.K_1'(s(bool,X96))),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f2451,f180])).
fof(f6581,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s(bool,X88) != s(bool,'const.combin.K_2'(s(bool,X89),s(bool,X88))) | s(bool,'T_0') = s(bool,happ(s(fun(X90,bool),'const.combin.K_1'(s(bool,X89))),s(X90,X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f2451,f279])).
fof(f5986,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X96))),s(bool,X95))) | s(bool,X96) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f2047,f180])).
fof(f5985,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s(bool,X88) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X89))),s(bool,X88))) | s(bool,X89) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X90,X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f2047,f279])).
fof(f5911,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X3))),s(X4,X5))) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),'const.combin.K_1'(s(bool,X2))),s(X6,X7)))) )),
  inference(superposition,[],[f2047,f2047])).
fof(f5545,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,X10) != s(bool,'const.combin.K_2'(s(bool,X9),s(X11,X12))) | s(bool,'T_0') = s(bool,happ(s(fun(X13,bool),'const.combin.K_1'(s(bool,X10))),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f1384,f180])).
fof(f5544,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X1))),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X6),s(X7,X8)))) )),
  inference(superposition,[],[f1384,f279])).
fof(f5028,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X88))),s(bool,X87))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X88),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f556,f180])).
fof(f5027,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X81))),s(bool,X80))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X81),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f556,f279])).
fof(f4305,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,'F_0') = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X88))),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f233,f180])).
fof(f4304,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X81),s(bool,X80))) | s(bool,'F_0') = s(bool,happ(s(fun(X82,bool),'const.combin.K_1'(s(bool,X81))),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f233,f279])).
fof(f4642,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X0))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f4641])).
fof(f4641,plain,(
  ( ! [X12,X15,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),'const.combin.K_1'(s(bool,X11))),s(X15,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f4264,f2006])).
fof(f4264,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X13,X14))) | s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),'const.combin.K_1'(s(bool,X11))),s(X15,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f233,f180])).
fof(f4155,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,X138) != s(bool,X140) | s(bool,X141) = s(bool,happ(s(fun(X137,bool),'const.combin.K_1'(s(bool,X138))),s(X137,X139))) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f3680,f159])).
fof(f4162,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4)))) )),
  inference(condensation,[],[f4161])).
fof(f4161,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X58),s(X59,X60)))) )),
  inference(duplicate_literal_removal,[],[f4140])).
fof(f4140,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X58),s(X59,X60)))) )),
  inference(superposition,[],[f3680,f279])).
fof(f4128,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,X133) != s(bool,X135) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,X133))),s(X132,X134)))) )),
  inference(superposition,[],[f3680,f159])).
fof(f3857,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X1),s(X3,X4))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3711,f112])).
fof(f3712,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'F_0') != s(bool,X104) | s(bool,X106) = s(bool,happ(s(fun(X103,bool),'const.combin.K_1'(s(bool,X104))),s(X103,X105))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f3611,f159])).
fof(f3711,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'F_0') != s(bool,X99) | s(bool,X102) = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f3611,f139])).
fof(f3680,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3611,f112])).
fof(f3611,plain,(
  ( ! [X112,X115] : (s(bool,'F_0') != s(bool,X112) | s(bool,X112) = s(bool,X115) | s(bool,'T_0') = s(bool,X115)) )),
  inference(superposition,[],[f3461,f139])).
fof(f3551,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X164),s(X166,X167))) | s(bool,X168) = s(bool,happ(s(fun(X163,bool),'const.combin.K_1'(s(bool,X164))),s(X163,X165))) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f3461,f159])).
fof(f3550,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X157),s(X160,X161))) | s(bool,X162) = s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f3461,f139])).
fof(f3637,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f3636])).
fof(f3636,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X66),s(X67,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X66) = s(bool,X70) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72)))) )),
  inference(duplicate_literal_removal,[],[f3536])).
fof(f3536,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X66),s(X67,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,X66) = s(bool,X70) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72)))) )),
  inference(superposition,[],[f3461,f279])).
fof(f3371,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,X166) != s(bool,'const.combin.K_2'(s(bool,X164),s(X167,X168))) | s(bool,X166) = s(bool,happ(s(fun(X163,bool),'const.combin.K_1'(s(bool,X164))),s(X163,X165))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f1163,f159])).
fof(f3370,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,X160) != s(bool,'const.combin.K_2'(s(bool,X157),s(X161,X162))) | s(bool,X160) = s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f1163,f139])).
fof(f3344,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (s(bool,X159) != s(bool,'const.combin.K_2'(s(bool,X161),s(X162,X163))) | s(bool,X161) = s(bool,happ(s(fun(X158,bool),'const.combin.K_1'(s(bool,X159))),s(X158,X160))) | s(bool,'T_0') = s(bool,happ(s(fun(X158,bool),'const.combin.K_1'(s(bool,X159))),s(X158,X160)))) )),
  inference(superposition,[],[f1163,f159])).
fof(f3343,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(bool,X152) != s(bool,'const.combin.K_2'(s(bool,X155),s(X156,X157))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,X152),s(X153,X154))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X152),s(X153,X154)))) )),
  inference(superposition,[],[f1163,f139])).
fof(f3457,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) != s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,X45) = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) )),
  inference(duplicate_literal_removal,[],[f3330])).
fof(f3330,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) != s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,X45) = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f1163,f302])).
fof(f3461,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f3322])).
fof(f3322,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1163,f112])).
fof(f2686,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f2256,f180])).
fof(f2685,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X81),s(bool,X80))) | s(bool,X81) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f2256,f279])).
fof(f2465,plain,(
  ( ! [X54,X55,X53] : (s(bool,X53) != s(bool,'const.combin.K_2'(s(bool,X54),s(bool,X53))) | s(bool,'T_0') = s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f2006,f180])).
fof(f2464,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X48) != s(bool,'const.combin.K_2'(s(bool,X49),s(bool,X48))) | s(bool,'T_0') = s(bool,X49) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X51,X52)))) )),
  inference(superposition,[],[f2006,f279])).
fof(f2451,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X112),s(X114,X115))) | s(bool,'T_0') = s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113)))) )),
  inference(superposition,[],[f2006,f159])).
fof(f2193,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2)))) )),
  inference(equality_factoring,[],[f1978])).
fof(f2047,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,X112) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X114,X115))) | s(bool,'T_0') = s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113)))) )),
  inference(superposition,[],[f1978,f159])).
fof(f2256,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f2255])).
fof(f2255,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(duplicate_literal_removal,[],[f2033])).
fof(f2033,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(superposition,[],[f1978,f279])).
fof(f2006,plain,(
  ( ! [X4,X0,X3] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f1926,f139])).
fof(f1926,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f1925])).
fof(f1925,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X99,X100))) != s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96)) )),
  inference(duplicate_literal_removal,[],[f1820])).
fof(f1820,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X99,X100))) != s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f1175,f302])).
fof(f1757,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X125) = s(bool,'const.combin.K_2'(s(bool,X123),s(X126,X127))) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X123))),s(X122,X124))) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f302,f159])).
fof(f1978,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f1977])).
fof(f1977,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f1736])).
fof(f1736,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f302,f112])).
fof(f1735,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X123) = s(bool,'const.combin.K_2'(s(bool,X125),s(X126,X127))) | s(bool,'T_0') = s(bool,X125) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X123))),s(X122,X124)))) )),
  inference(superposition,[],[f302,f159])).
fof(f1981,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'const.combin.K_2'(s(bool,X0),s(X4,X5))) = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f1980])).
fof(f1980,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) )),
  inference(duplicate_literal_removal,[],[f1726])).
fof(f1726,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f302,f302])).
fof(f1592,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,X10) != s(bool,'const.combin.K_2'(s(bool,X9),s(X11,X12))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f1455,f180])).
fof(f1591,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X6),s(X7,X8)))) )),
  inference(superposition,[],[f1455,f279])).
fof(f1386,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,X8) != s(bool,'const.combin.K_2'(s(bool,X7),s(X9,X10))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1175,f180])).
fof(f1385,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X4),s(X5,X6)))) )),
  inference(superposition,[],[f1175,f279])).
fof(f1384,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X90) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X92,X93))) | s(bool,'T_0') = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X90))),s(X89,X91)))) )),
  inference(superposition,[],[f1175,f159])).
fof(f1455,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X3,X4))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f1454])).
fof(f1454,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(duplicate_literal_removal,[],[f1372])).
fof(f1372,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(superposition,[],[f1175,f279])).
fof(f1163,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f279])).
fof(f1175,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f1157])).
fof(f1157,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f279])).
fof(f1101,plain,(
  ( ! [X101,X99,X97,X95,X100,X98,X96] : (s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X96),s(bool,X95))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101)))) )),
  inference(superposition,[],[f232,f279])).
fof(f1100,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(bool,X90) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X91))),s(bool,X90))) | s(bool,'F_0') = s(bool,X91) | s(bool,X90) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f215,f279])).
fof(f1099,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X86),s(bool,X85))) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,X87) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X87),s(X88,X89)))) )),
  inference(superposition,[],[f182,f279])).
fof(f991,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,X55) = s(bool,'const.combin.K_2'(s(bool,X56),s(bool,X55))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f279,f180])).
fof(f990,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X49) = s(bool,'const.combin.K_2'(s(bool,X50),s(bool,X49))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X52),s(X53,X54)))) )),
  inference(superposition,[],[f279,f279])).
fof(f979,plain,(
  ( ! [X118,X116,X114,X117,X115,X113] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X114),s(X116,X117))) | s(bool,X118) = s(bool,happ(s(fun(X113,bool),'const.combin.K_1'(s(bool,X114))),s(X113,X115))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f279,f159])).
fof(f959,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,'T_0') = s(bool,X71) | s(bool,X73) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X73),s(X74,X75)))) )),
  inference(superposition,[],[f279,f159])).
fof(f941,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12))) | s(bool,X8) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f279,f180])).
fof(f940,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X5),s(X6,X7)))) )),
  inference(superposition,[],[f279,f279])).
fof(f939,plain,(
  ( ! [X103,X107,X105,X102,X106,X104] : (s(bool,X103) = s(bool,X105) | s(bool,'T_0') = s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X103))),s(X102,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X105),s(X106,X107)))) )),
  inference(superposition,[],[f279,f159])).
fof(f1329,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5)))) )),
  inference(condensation,[],[f1328])).
fof(f1328,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X38),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X43,X44)))) )),
  inference(duplicate_literal_removal,[],[f907])).
fof(f907,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X38),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X43,X44)))) )),
  inference(superposition,[],[f279,f279])).
fof(f694,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X48) = s(bool,'const.combin.K_2'(s(bool,X49),s(bool,X48))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f232,f112])).
fof(f670,plain,(
  ( ! [X39,X36,X40] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X36),s(X39,X40))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f232,f139])).
fof(f653,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(bool,X38) = s(bool,'const.combin.K_2'(s(bool,X39),s(bool,X38))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X39),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f232,f180])).
fof(f565,plain,(
  ( ! [X26,X24,X25] : (s(bool,X24) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X25))),s(bool,X24))) | s(bool,'F_0') = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f215,f180])).
fof(f557,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(X48,bool),'const.combin.K_1'(s(bool,X46))),s(X48,X49))) | s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,X46))),s(X45,X47)))) )),
  inference(superposition,[],[f215,f159])).
fof(f556,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X40),s(X41,X42)))) )),
  inference(superposition,[],[f215,f139])).
fof(f349,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) = s(bool,'const.combin.K_2'(s(bool,X10),s(bool,X9))) | s(bool,'F_0') = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f182,f180])).
fof(f346,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f110,f180])).
fof(f303,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X24) = s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,X22))),s(X21,X23))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f180,f159])).
fof(f302,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,X17),s(X18,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f180,f139])).
fof(f292,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f180,f180])).
fof(f280,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,happ(s(fun(X28,bool),'const.combin.K_1'(s(bool,X29))),s(X28,X30)))) )),
  inference(superposition,[],[f180,f159])).
fof(f279,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X24),s(X25,X26)))) )),
  inference(superposition,[],[f180,f139])).
fof(f233,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X19,X20))) | s(bool,'F_0') = s(bool,happ(s(fun(X16,bool),'const.combin.K_1'(s(bool,X17))),s(X16,X18)))) )),
  inference(superposition,[],[f182,f159])).
fof(f232,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X14,X15))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f182,f139])).
fof(f215,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X5))),s(X4,X6))) | s(bool,'F_0') = s(bool,X5)) )),
  inference(superposition,[],[f159,f112])).
fof(f183,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f111,f112])).
fof(f182,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f112,f139])).
fof(f180,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f112,f112])).
fof(f146,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK12(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK12(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK12(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK12(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.bvlSem.state_literal_|49||49|',aHL_EXT)).
fof(f145,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X7,X6] : ! [X18,X19] : s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X19),s('type.bvlSem.state'(X6),X18))))) = s('type.ffi.ffi_state'(X7),happ(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X19),s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_7|48|_prove_ltb')).
fof(f143,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2,X3] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X7,X6] : ! [X18,X19] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X18))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_6|49|_prove_ltb')).
fof(f142,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7,X6] : ! [X18,X19] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X18))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_49_prove_ltb')).
fof(f141,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X1),X2))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X1),X2))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X1),X2))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvlSem.state'(X1),X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X7,X6] : ! [X18,X19] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X18))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_57_prove_ltb')).
fof(f133,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f135,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f136,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f137,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f138,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f131,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X18,X19] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X19),s('type.bvlSem.state'(X6),X18))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X19),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_69_prove_ltb')).
fof(f130,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X18,X19] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X19),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_66_prove_ltb')).
fof(f128,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X18,X19] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X18))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_59_prove_ltb')).
fof(f127,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X18,X19] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X18))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_58_prove_ltb')).
fof(f126,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X18,X19] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X18))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_48_prove_ltb')).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X18,X19] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X18))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_46_prove_ltb')).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X18,X19] : s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X18))) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_63_prove_ltb')).
fof(f122,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X18,X19] : s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X18))) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_65_prove_ltb')).
fof(f121,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X18,X19] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X19),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X18))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_68_prove_ltb')).
fof(f120,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X18,X19] : s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X18))) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_62_prove_ltb')).
fof(f118,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X18,X19] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X18))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_56_prove_ltb')).
fof(f117,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X18,X19] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X18))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_55_prove_ltb')).
fof(f116,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X18,X19] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),X18))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_6|48|_prove_ltb')).
fof(f115,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X18,X19] : s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X18))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_54_prove_ltb')).
fof(f114,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X18,X19] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X18))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_47_prove_ltb')).
fof(f113,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X18,X19] : s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),X18))) = s('type.ffi.ffi_state'(X6),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.state'(X6),X18)))))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.bvlSem_64_prove_ltb')).
fof(f112,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvlSem.state_literal_|49||49|',aHL_BOOL_CASES)).
fof(f111,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvlSem.state_literal_|49||49|',aHL_FALSITY)).
fof(f110,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvlSem.state_literal_|49||49|',aHL_TRUTH)).
fof(f24717,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f109,f108,f107,f106,f105,f104,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f123,f124,f125,f126,f127,f128,f129,f130,f131,f132,f138,f137,f136,f135,f134,f133,f139,f159,f141,f142,f143,f144,f145,f146,f180,f182,f183,f191,f215,f232,f233,f279,f280,f292,f302,f303,f346,f349,f556,f557,f565,f634,f635,f636,f653,f670,f694,f1329,f939,f940,f941,f959,f979,f990,f991,f1099,f1100,f1101,f1175,f1163,f1455,f1384,f1385,f1386,f1591,f1592,f1981,f1735,f1978,f1757,f2006,f2256,f2047,f2193,f2451,f2464,f2465,f2685,f2686,f3461,f3457,f3343,f3344,f3370,f3371,f3637,f3550,f3551,f3611,f3680,f3711,f3712,f3857,f4128,f4162,f4155,f4642,f4304,f4305,f5027,f5028,f5544,f5545,f5911,f5985,f5986,f6581,f6582,f6770,f6771,f6772,f6775,f6776,f6777,f6796,f6797,f6782,f6783,f6784,f6787,f6788,f6789,f6790,f6799,f6800,f6919,f6920,f6921,f6995,f7013,f7014,f7015,f7197,f7200,f7328,f7331,f7336,f7338,f7339,f7726,f7378,f7379,f7380,f7383,f7384,f7386,f7394,f7395,f7398,f7402,f7522,f7525,f7623,f7611,f8371,f8369,f8244,f8245,f8246,f8516,f8517,f8518,f9295,f9293,f9288,f9213,f9361,f9206,f9011,f9971,f9969,f9904,f10025,f10027,f10032,f10034,f10471,f10472,f10681,f10682,f10683,f12147,f12143,f12142,f12141,f11958,f11959,f12005,f12006,f12435,f12433,f12299,f12300,f12620,f12621,f12622,f12623,f12624,f12625,f12729,f12828,f12829,f13012,f13013,f13014,f13015,f13016,f13017,f13123,f13373,f13374,f13375,f14198,f14199,f14200,f14201,f14202,f14203,f16000,f16001,f16002,f16704,f16707,f18239,f18240,f18241,f18242,f18243,f18244,f19268,f21940,f21938,f21937,f21936,f21935,f21695,f21696,f21898,f22204,f22203,f22194,f22195,f23578,f23579,f147,f24503,f24504,f24514,f24515,f24550,f24551,f24563,f24564,f24674,f24630,f24600])).
fof(f24716,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f109,f108,f107,f106,f105,f104,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f123,f124,f125,f126,f127,f128,f129,f130,f131,f132,f138,f137,f136,f135,f134,f133,f139,f159,f141,f142,f143,f144,f145,f146,f180,f182,f183,f191,f215,f232,f233,f279,f280,f292,f302,f303,f346,f349,f556,f557,f565,f634,f635,f636,f653,f670,f694,f1329,f939,f940,f941,f959,f979,f990,f991,f1099,f1100,f1101,f1175,f1163,f1455,f1384,f1385,f1386,f1591,f1592,f1981,f1735,f1978,f1757,f2006,f2256,f2047,f2193,f2451,f2464,f2465,f2685,f2686,f3461,f3457,f3343,f3344,f3370,f3371,f3637,f3550,f3551,f3611,f3680,f3711,f3712,f3857,f4128,f4162,f4155,f4642,f4304,f4305,f5027,f5028,f5544,f5545,f5911,f5985,f5986,f6581,f6582,f6770,f6771,f6772,f6775,f6776,f6777,f6796,f6797,f6782,f6783,f6784,f6787,f6788,f6789,f6790,f6799,f6800,f6919,f6920,f6921,f6995,f7013,f7014,f7015,f7197,f7200,f7328,f7331,f7336,f7338,f7339,f7726,f7378,f7379,f7380,f7383,f7384,f7386,f7394,f7395,f7398,f7402,f7522,f7525,f7623,f7611,f8371,f8369,f8244,f8245,f8246,f8516,f8517,f8518,f9295,f9293,f9288,f9213,f9361,f9206,f9011,f9971,f9969,f9904,f10025,f10027,f10032,f10034,f10471,f10472,f10681,f10682,f10683,f12147,f12143,f12142,f12141,f11958,f11959,f12005,f12006,f12435,f12433,f12299,f12300,f12620,f12621,f12622,f12623,f12624,f12625,f12729,f12828,f12829,f13012,f13013,f13014,f13015,f13016,f13017,f13123,f13373,f13374,f13375,f14198,f14199,f14200,f14201,f14202,f14203,f16000,f16001,f16002,f16704,f16707,f18239,f18240,f18241,f18242,f18243,f18244,f19268,f21940,f21938,f21937,f21936,f21935,f21695,f21696,f21898,f22204,f22203,f22194,f22195,f23578,f23579,f147,f24503,f24504,f24514,f24515,f24550,f24551,f24563,f24564,f24674,f24630])).
fof(f24631,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f24630,f150])).
fof(f24601,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f24600,f150])).
fof(f24534,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f24533,f150])).
fof(f24183,plain,(
  $false | ($spl0 | $spl3 | $spl4)),
  inference(subsumption_resolution,[],[f150,f24022])).
fof(f24022,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24021,f13017])).
fof(f24021,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24020,f13017])).
fof(f24020,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24019,f130])).
fof(f24019,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24018,f130])).
fof(f24018,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24017,f13012])).
fof(f24017,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24016,f13012])).
fof(f24016,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24015,f130])).
fof(f24015,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24014,f130])).
fof(f24014,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24013,f13013])).
fof(f24013,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24012,f13013])).
fof(f24012,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24011,f130])).
fof(f24011,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24010,f130])).
fof(f24010,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24009,f13014])).
fof(f24009,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24008,f13014])).
fof(f24008,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24007,f130])).
fof(f24007,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24006,f130])).
fof(f24006,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24005,f13015])).
fof(f24005,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f23883,f13015])).
fof(f23883,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(unit_resulting_resolution,[],[f23152,f133])).
fof(f23152,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f147,f151])).
fof(f24120,plain,(
  $false | ($spl0 | $spl4 | $spl9)),
  inference(subsumption_resolution,[],[f24119,f156])).
fof(f24119,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24118,f14203])).
fof(f24118,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24117,f14203])).
fof(f24117,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24116,f131])).
fof(f24116,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24115,f131])).
fof(f24115,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24114,f14198])).
fof(f24114,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24113,f14198])).
fof(f24113,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24112,f116])).
fof(f24112,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24111,f116])).
fof(f24111,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24110,f128])).
fof(f24110,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24109,f128])).
fof(f24109,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f23887,f127])).
fof(f23887,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f127,f23152])).
fof(f24107,plain,(
  $false | ($spl0 | $spl4 | $spl9)),
  inference(subsumption_resolution,[],[f24106,f156])).
fof(f24106,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24105,f14203])).
fof(f24105,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24104,f14203])).
fof(f24104,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24103,f131])).
fof(f24103,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24102,f131])).
fof(f24102,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24101,f14198])).
fof(f24101,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24100,f14198])).
fof(f24100,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24099,f116])).
fof(f24099,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24098,f116])).
fof(f24098,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24097,f128])).
fof(f24097,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24096,f128])).
fof(f24096,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24095,f127])).
fof(f24095,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f23876,f127])).
fof(f23876,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(unit_resulting_resolution,[],[f23152,f136])).
fof(f24047,plain,(
  $false | ($spl0 | $spl4 | $spl9)),
  inference(subsumption_resolution,[],[f24046,f156])).
fof(f24046,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24045,f14203])).
fof(f24045,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24044,f14203])).
fof(f24044,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24043,f131])).
fof(f24043,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24042,f131])).
fof(f24042,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24041,f14198])).
fof(f24041,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24040,f14198])).
fof(f24040,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24039,f116])).
fof(f24039,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24038,f116])).
fof(f24038,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24037,f128])).
fof(f24037,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24036,f128])).
fof(f24036,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f24035,f127])).
fof(f24035,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f23881,f127])).
fof(f23881,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4)),
  inference(unit_resulting_resolution,[],[f23152,f136])).
fof(f23098,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f23097,f156])).
fof(f23097,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23096,f14203])).
fof(f23096,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23095,f14203])).
fof(f23095,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23094,f131])).
fof(f23094,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23093,f131])).
fof(f23093,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23092,f14198])).
fof(f23092,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23091,f14198])).
fof(f23091,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23090,f116])).
fof(f23090,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23089,f116])).
fof(f23089,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23088,f128])).
fof(f23088,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23087,f128])).
fof(f23087,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f22870,f127])).
fof(f22870,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(superposition,[],[f127,f22569])).
fof(f22569,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f22568,f151])).
fof(f22568,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f147,f153])).
fof(f23085,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f23084,f156])).
fof(f23084,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23083,f14203])).
fof(f23083,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23082,f14203])).
fof(f23082,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23081,f131])).
fof(f23081,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23080,f131])).
fof(f23080,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23079,f14198])).
fof(f23079,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23078,f14198])).
fof(f23078,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23077,f116])).
fof(f23077,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23076,f116])).
fof(f23076,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23075,f128])).
fof(f23075,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23074,f128])).
fof(f23074,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23073,f127])).
fof(f23073,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f22859,f127])).
fof(f22859,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f22569,f136])).
fof(f23026,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f23025,f156])).
fof(f23025,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23024,f14203])).
fof(f23024,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23023,f14203])).
fof(f23023,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23022,f131])).
fof(f23022,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23021,f131])).
fof(f23021,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23020,f14198])).
fof(f23020,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23019,f14198])).
fof(f23019,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23018,f116])).
fof(f23018,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23017,f116])).
fof(f23017,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23016,f128])).
fof(f23016,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23015,f128])).
fof(f23015,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23014,f127])).
fof(f23014,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f22864,f127])).
fof(f22864,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f22569,f136])).
fof(f22529,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f22528,f156])).
fof(f22528,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22527,f14203])).
fof(f22527,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22526,f14203])).
fof(f22526,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22525,f131])).
fof(f22525,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22524,f131])).
fof(f22524,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22523,f14198])).
fof(f22523,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22522,f14198])).
fof(f22522,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22521,f116])).
fof(f22521,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22520,f116])).
fof(f22520,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22519,f128])).
fof(f22519,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22518,f128])).
fof(f22518,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22316,f127])).
fof(f22316,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(superposition,[],[f127,f168])).
fof(f168,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f167,f151])).
fof(f167,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f166,f153])).
fof(f166,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl10)),
  inference(forward_demodulation,[],[f147,f157])).
fof(f22516,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f22515,f156])).
fof(f22515,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22514,f14203])).
fof(f22514,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22513,f14203])).
fof(f22513,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22512,f131])).
fof(f22512,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22511,f131])).
fof(f22511,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22510,f14198])).
fof(f22510,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22509,f14198])).
fof(f22509,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22508,f116])).
fof(f22508,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22507,f116])).
fof(f22507,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22506,f128])).
fof(f22506,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22505,f128])).
fof(f22505,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22504,f127])).
fof(f22504,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22305,f127])).
fof(f22305,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f168,f136])).
fof(f22464,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f22463,f156])).
fof(f22463,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22462,f14203])).
fof(f22462,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22461,f14203])).
fof(f22461,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22460,f131])).
fof(f22460,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22459,f131])).
fof(f22459,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22458,f14198])).
fof(f22458,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22457,f14198])).
fof(f22457,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22456,f116])).
fof(f22456,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22455,f116])).
fof(f22455,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22454,f128])).
fof(f22454,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22453,f128])).
fof(f22453,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22452,f127])).
fof(f22452,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f22310,f127])).
fof(f22310,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f168,f136])).
fof(f21609,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f21608,f156])).
fof(f21608,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21607,f14203])).
fof(f21607,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21606,f14203])).
fof(f21606,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21605,f131])).
fof(f21605,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21604,f131])).
fof(f21604,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21603,f14198])).
fof(f21603,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21602,f14198])).
fof(f21602,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21601,f116])).
fof(f21601,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21600,f116])).
fof(f21600,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21599,f128])).
fof(f21599,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21598,f128])).
fof(f21598,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21417,f127])).
fof(f21417,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(superposition,[],[f127,f169])).
fof(f169,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f168,f149])).
fof(f21597,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f21596,f156])).
fof(f21596,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21595,f14203])).
fof(f21595,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21594,f14203])).
fof(f21594,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21593,f131])).
fof(f21593,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21592,f131])).
fof(f21592,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21591,f14198])).
fof(f21591,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21590,f14198])).
fof(f21590,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21589,f116])).
fof(f21589,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21588,f116])).
fof(f21588,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21587,f128])).
fof(f21587,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21586,f128])).
fof(f21586,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21585,f127])).
fof(f21585,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21406,f127])).
fof(f21406,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f169,f136])).
fof(f21554,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f21553,f156])).
fof(f21553,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21552,f14203])).
fof(f21552,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21551,f14203])).
fof(f21551,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21550,f131])).
fof(f21550,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21549,f131])).
fof(f21549,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21548,f14198])).
fof(f21548,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21547,f14198])).
fof(f21547,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21546,f116])).
fof(f21546,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21545,f116])).
fof(f21545,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21544,f128])).
fof(f21544,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21543,f128])).
fof(f21543,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21542,f127])).
fof(f21542,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f21411,f127])).
fof(f21411,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f169,f136])).
fof(f10035,plain,(
  ( ! [X499,X498,X493] : (s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499)))) ) | $spl30),
  inference(cnf_transformation,[],[f10035_D])).
fof(f10035_D,plain,(
  ( ! [X499,X498,X493] : (s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f10006,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174)))) ) | $spl26),
  inference(cnf_transformation,[],[f10006_D])).
fof(f10006_D,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f10034,plain,(
  ( ! [X499,X496,X498,X493,X497] : (s(bool,'T_0') != s(bool,happ(s(fun(X496,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X496,X497))) | s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499)))) )),
  inference(subsumption_resolution,[],[f9705,f2451])).
fof(f9705,plain,(
  ( ! [X499,X494,X496,X498,X493,X495,X497] : (s(bool,'T_0') != s(bool,happ(s(fun(X496,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X496,X497))) | s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X493),s(X494,X495)))) )),
  inference(superposition,[],[f2451,f9288])).
fof(f10033,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) | $spl28),
  inference(cnf_transformation,[],[f10033_D])).
fof(f10033_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f9899,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'T_0') != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X3,X4)))) ) | ($spl15 | $spl24)),
  inference(condensation,[],[f9704])).
fof(f9704,plain,(
  ( ! [X486,X492,X488,X490,X487,X489,X491] : (s(bool,'T_0') != s(bool,happ(s(fun(X489,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X489,X490))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X486),s(X491,X492))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X486),s(X487,X488)))) ) | ($spl15 | $spl24)),
  inference(superposition,[],[f2424,f9288])).
fof(f2424,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X22),s(X23,X24))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X22),s(X25,X26)))) ) | ($spl15 | $spl24)),
  inference(subsumption_resolution,[],[f2344,f194])).
fof(f2344,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X22),s(X23,X24))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X22),s(X25,X26)))) ) | $spl24),
  inference(superposition,[],[f2276,f279])).
fof(f2275,plain,(
  ( ! [X96] : (s(bool,'T_0') = s(bool,X96)) ) | $spl22),
  inference(cnf_transformation,[],[f2275_D])).
fof(f2275_D,plain,(
  ( ! [X96] : (s(bool,'T_0') = s(bool,X96)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f10032,plain,(
  ( ! [X478,X474,X477] : (s(bool,'T_0') != s(bool,happ(s(fun(X477,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X477,X478))) | s(bool,'T_0') = s(bool,X474)) )),
  inference(subsumption_resolution,[],[f9702,f2006])).
fof(f9702,plain,(
  ( ! [X476,X478,X474,X475,X477] : (s(bool,'T_0') != s(bool,happ(s(fun(X477,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X477,X478))) | s(bool,'T_0') = s(bool,X474) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X474),s(X475,X476)))) )),
  inference(superposition,[],[f2006,f9288])).
fof(f10027,plain,(
  ( ! [X294,X296,X295] : (s(bool,'T_0') != s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) | s(bool,'T_0') = s(bool,X294)) )),
  inference(forward_demodulation,[],[f10026,f159])).
fof(f10026,plain,(
  ( ! [X294,X296,X298,X295,X297] : (s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) != s(bool,happ(s(fun(X297,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X297,X298))) | s(bool,'T_0') = s(bool,X294)) )),
  inference(subsumption_resolution,[],[f9683,f2006])).
fof(f9683,plain,(
  ( ! [X294,X300,X296,X298,X295,X297,X299] : (s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) != s(bool,happ(s(fun(X297,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X297,X298))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X294),s(X299,X300))) | s(bool,'T_0') = s(bool,X294)) )),
  inference(superposition,[],[f8371,f9288])).
fof(f10025,plain,(
  ( ! [X290,X289,X291] : (s(bool,'T_0') != s(bool,happ(s(fun(X290,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X290,X291))) | s(bool,'T_0') = s(bool,X289)) )),
  inference(forward_demodulation,[],[f9901,f159])).
fof(f9901,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s(bool,happ(s(fun(X290,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X290,X291))) != s(bool,happ(s(fun(X292,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X292,X293))) | s(bool,'T_0') = s(bool,X289)) )),
  inference(duplicate_literal_removal,[],[f9682])).
fof(f9682,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s(bool,happ(s(fun(X290,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X290,X291))) != s(bool,happ(s(fun(X292,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X292,X293))) | s(bool,'T_0') = s(bool,X289) | s(bool,'T_0') = s(bool,X289)) )),
  inference(superposition,[],[f7623,f9288])).
fof(f10024,plain,(
  ( ! [X285,X284,X286] : (s(bool,'T_0') != s(bool,happ(s(fun(X285,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X285,X286))) | s(bool,'T_0') = s(bool,X284)) ) | $spl15),
  inference(subsumption_resolution,[],[f9681,f9361])).
fof(f9681,plain,(
  ( ! [X288,X285,X287,X284,X286] : (s(bool,'T_0') != s(bool,happ(s(fun(X285,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X285,X286))) | s(bool,'T_0') = s(bool,happ(s(fun(X287,bool),'const.combin.K_1'(s(bool,X284))),s(X287,X288))) | s(bool,'T_0') = s(bool,X284)) ) | $spl15),
  inference(superposition,[],[f5680,f9288])).
fof(f5680,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) ) | $spl15),
  inference(subsumption_resolution,[],[f5602,f194])).
fof(f5602,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f1384,f182])).
fof(f10005,plain,(
  ( ! [X173,X174,X172] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174))) | s(bool,'T_0') = s(bool,X172)) ) | $spl15),
  inference(subsumption_resolution,[],[f9662,f2006])).
fof(f9662,plain,(
  ( ! [X175,X173,X176,X174,X172] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X172),s(X175,X176))) | s(bool,'T_0') = s(bool,X172)) ) | $spl15),
  inference(superposition,[],[f1354,f9288])).
fof(f1354,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,X75) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X75),s(X76,X77)))) ) | $spl15),
  inference(subsumption_resolution,[],[f1064,f194])).
fof(f1064,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,X75) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X75),s(X76,X77)))) ) | $spl15),
  inference(superposition,[],[f194,f279])).
fof(f2276,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98)))) ) | $spl24),
  inference(cnf_transformation,[],[f2276_D])).
fof(f2276_D,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2274,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,X96)) ) | $spl15),
  inference(subsumption_resolution,[],[f2126,f2006])).
fof(f2126,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X99,X100))) | s(bool,'T_0') = s(bool,X96)) ) | $spl15),
  inference(superposition,[],[f1354,f1978])).
fof(f781,plain,(
  ( ! [X12,X17,X16] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12)) ) | $spl16),
  inference(cnf_transformation,[],[f781_D])).
fof(f781_D,plain,(
  ( ! [X12,X17,X16] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f783,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26)))) ) | $spl20),
  inference(cnf_transformation,[],[f783_D])).
fof(f783_D,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f636,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X24),s(X27,X28))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f232,f112])).
fof(f782,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) | $spl18),
  inference(cnf_transformation,[],[f782_D])).
fof(f782_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f635,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X19),s(X20,X21))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X18),s(X22,X23))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f232,f180])).
fof(f634,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f232,f180])).
fof(f192,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f194,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl15),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f191,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f112])).
fof(f165,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10)),
  inference(trivial_inequality_removal,[],[f164])).
fof(f164,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f163,f149])).
fof(f163,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f162,f151])).
fof(f162,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl1 | $spl6 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f161,f153])).
fof(f161,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl1 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f160,f155])).
fof(f160,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f148,f157])).
fof(f147,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f149,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | $spl2),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f104,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  (s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) & s('type.num.num',sK4) = s('type.num.num',sK9) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) & s('type.ffi.ffi_state'(sK1),sK6) = s('type.ffi.ffi_state'(sK1),sK11))) & (s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) != s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) | s('type.num.num',sK4) != s('type.num.num',sK9) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | s('type.ffi.ffi_state'(sK1),sK6) != s('type.ffi.ffi_state'(sK1),sK11))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11])],[f99])).
fof(f99,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : ((s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) & s('type.num.num',X4) = s('type.num.num',X9) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) & s('type.ffi.ffi_state'(X1),X6) = s('type.ffi.ffi_state'(X1),X11))) & (s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) | s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) != s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) | s('type.num.num',X4) != s('type.num.num',X9) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) | s('type.ffi.ffi_state'(X1),X6) != s('type.ffi.ffi_state'(X1),X11)))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : ((s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) & s('type.num.num',X4) = s('type.num.num',X9) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) & s('type.ffi.ffi_state'(X1),X6) = s('type.ffi.ffi_state'(X1),X11))) & (s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) != s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) | s('type.num.num',X4) != s('type.num.num',X9) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) | s('type.ffi.ffi_state'(X1),X6) != s('type.ffi.ffi_state'(X1),X11))))),
  inference(nnf_transformation,[],[f96])).
fof(f96,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) <~> (s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) & s('type.num.num',X4) = s('type.num.num',X9) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) & s('type.ffi.ffi_state'(X1),X6) = s('type.ffi.ffi_state'(X1),X11)))),
  inference(ennf_transformation,[],[f36])).
fof(f36,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) & s('type.num.num',X4) = s('type.num.num',X9) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) & s('type.ffi.ffi_state'(X1),X6) = s('type.ffi.ffi_state'(X1),X11)))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X2))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X6))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X7))),s('type.bvlSem.state'(X1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.bvlSem.state'(X1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10))),s('type.bvlSem.state'(X1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X11))),s('type.bvlSem.state'(X0),'const.bool.ARB_0'))))))))))) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),X2) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X7) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X8) & s('type.num.num',X4) = s('type.num.num',X9) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X10) & s('type.ffi.ffi_state'(X1),X6) = s('type.ffi.ffi_state'(X1),X11)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (s('type.bvlSem.state'(X7),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X7),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X9))),s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvlSem.state'(X7),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X11))),s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X12))),s('type.bvlSem.state'(X6),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X7),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X13))),s('type.bvlSem.state'(X7),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X14))),s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.bvlSem.state'(X7),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X16))),s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X17))),s('type.bvlSem.state'(X6),'const.bool.ARB_0'))))))))))) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),X8) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X13) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X9) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X14) & s('type.num.num',X10) = s('type.num.num',X15) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X11) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X16) & s('type.ffi.ffi_state'(X7),X12) = s('type.ffi.ffi_state'(X7),X17)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (s('type.bvlSem.state'(X7),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X8))),s('type.bvlSem.state'(X7),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X9))),s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvlSem.state'(X7),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X11))),s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X12))),s('type.bvlSem.state'(X6),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(X7),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),X13))),s('type.bvlSem.state'(X7),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X14))),s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.bvlSem.state'(X7),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X16))),s('type.bvlSem.state'(X7),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X17))),s('type.bvlSem.state'(X6),'const.bool.ARB_0'))))))))))) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),X8) = s('type.list.list'('type.option.option'('type.bvlSem.v')),X13) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X9) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X14) & s('type.num.num',X10) = s('type.num.num',X15) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X11) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),X16) & s('type.ffi.ffi_state'(X7),X12) = s('type.ffi.ffi_state'(X7),X17)))),
  file('thm.bvlSem.state_literal_|49||49|','thm.bvlSem.state_literal_|49||49|')).
fof(f151,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) | $spl4),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f105,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) | s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))),
  inference(cnf_transformation,[],[f100])).
fof(f153,plain,(
  s('type.num.num',sK4) = s('type.num.num',sK9) | $spl6),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  s('type.num.num',sK4) = s('type.num.num',sK9) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f106,plain,(
  s('type.num.num',sK4) = s('type.num.num',sK9) | s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))),
  inference(cnf_transformation,[],[f100])).
fof(f155,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | $spl8),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f107,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))),
  inference(cnf_transformation,[],[f100])).
fof(f157,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) = s('type.ffi.ffi_state'(sK1),sK11) | $spl10),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) = s('type.ffi.ffi_state'(sK1),sK11) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f108,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) = s('type.ffi.ffi_state'(sK1),sK11) | s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))),
  inference(cnf_transformation,[],[f100])).
fof(f148,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl1),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f150,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) != s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | $spl3),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) != s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f152,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) | $spl5),
  inference(cnf_transformation,[],[f152_D])).
fof(f152_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f154,plain,(
  s('type.num.num',sK4) != s('type.num.num',sK9) | $spl7),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  s('type.num.num',sK4) != s('type.num.num',sK9) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f156,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | $spl9),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f158,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) != s('type.ffi.ffi_state'(sK1),sK11) | $spl11),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) != s('type.ffi.ffi_state'(sK1),sK11) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f109,plain,(
  s('type.ffi.ffi_state'(sK1),sK6) != s('type.ffi.ffi_state'(sK1),sK11) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10) | s('type.num.num',sK4) != s('type.num.num',sK9) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8) | s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2) != s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7) | s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK2))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK3))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK5))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK6))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0'))))))))))) != s('type.bvlSem.state'(sK1),'const.bvlSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.option.option'('type.bvlSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),sK7))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK8))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),sK10))),s('type.bvlSem.state'(sK1),'const.bvlSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK11))),s('type.bvlSem.state'(sK0),'const.bool.ARB_0')))))))))))),
  inference(cnf_transformation,[],[f100])).
% SZS output end Proof for thm.bvlSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 107
% Passive clauses: 365
% Generated clauses: 24455
% Final active clauses: 96
% Final passive clauses: 237
% Input formulas: 33
% Initial clauses: 43
% 
% Duplicate literals: 1023
% Trivial inequalities: 204
% Fw subsumption resolutions: 1987
% Fw demodulations: 2583
% Bw demodulations: 10
% Condensations: 4224
% Global subsumptions: 3
% 
% Simple tautologies: 216
% Equational tautologies: 90
% Forward subsumptions: 13705
% Fw demodulations to eq. taut.: 20
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 415
% Forward superposition: 7446
% Backward superposition: 6106
% Self superposition: 283
% Equality factoring: 84
% Equality resolution: 23
% 
% Split clauses: 18
% Split components: 40
% SAT solver clauses: 427
% SAT solver unit clauses: 58
% SAT solver binary clauses: 81
% 
% Sat splits: 18
% Sat splitting refutations: 21
% 
% Memory used [KB]: 15735
% Time elapsed: 1.135 s
% ------------------------------
% ------------------------------
% Success in time 2.48 s
