Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.cmlPtreeConversionProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.cmlPtreeConversionProps
% SZS output start Proof for thm.cmlPtreeConversionProps
fof(f1751,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1750,f84,f138,f136,f701,f85,f139,f137])).
fof(f137,plain,(
  s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1))) | $spl1),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f139,plain,(
  s('type.list.list'('type.tokens.token'),sK0) != s('type.list.list'('type.tokens.token'),sK1) | $spl3),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  s('type.list.list'('type.tokens.token'),sK0) != s('type.list.list'('type.tokens.token'),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f85,plain,(
  s('type.list.list'('type.tokens.token'),sK0) != s('type.list.list'('type.tokens.token'),sK1) | s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1)))),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1))) | s('type.list.list'('type.tokens.token'),sK0) = s('type.list.list'('type.tokens.token'),sK1)) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1))) | s('type.list.list'('type.tokens.token'),sK0) != s('type.list.list'('type.tokens.token'),sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f55])).
fof(f55,plain,(
  ? [X0,X1] : ((s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) | s('type.list.list'('type.tokens.token'),X0) = s('type.list.list'('type.tokens.token'),X1)) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) | s('type.list.list'('type.tokens.token'),X0) != s('type.list.list'('type.tokens.token'),X1)))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ? [X0,X1] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) <~> s('type.list.list'('type.tokens.token'),X0) = s('type.list.list'('type.tokens.token'),X1))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) <=> s('type.list.list'('type.tokens.token'),X0) = s('type.list.list'('type.tokens.token'),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X6))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X7))) <=> s('type.list.list'('type.tokens.token'),X6) = s('type.list.list'('type.tokens.token'),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X6))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X7))) <=> s('type.list.list'('type.tokens.token'),X6) = s('type.list.list'('type.tokens.token'),X7))),
  file('thm.cmlPtreeConversionProps.cmlPtreeConversionProps_|49|4_prove_ltb','thm.cmlPtreeConversionProps.cmlPtreeConversionProps_|49|4_prove_ltb')).
fof(f701,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f700])).
fof(f700,plain,(
  s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f137,f138])).
fof(f136,plain,(
  s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1))) | $spl0),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f138,plain,(
  s('type.list.list'('type.tokens.token'),sK0) = s('type.list.list'('type.tokens.token'),sK1) | $spl2),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  s('type.list.list'('type.tokens.token'),sK0) = s('type.list.list'('type.tokens.token'),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f84,plain,(
  s('type.list.list'('type.tokens.token'),sK0) = s('type.list.list'('type.tokens.token'),sK1) | s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK1)))),
  inference(cnf_transformation,[],[f56])).
fof(f1750,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f1749,f139])).
fof(f1749,plain,(
  s('type.list.list'('type.tokens.token'),sK0) = s('type.list.list'('type.tokens.token'),sK1) | $spl0),
  inference(equality_resolution,[],[f818])).
fof(f818,plain,(
  ( ! [X0] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) | s('type.list.list'('type.tokens.token'),sK1) = s('type.list.list'('type.tokens.token'),X0)) ) | $spl0),
  inference(superposition,[],[f131,f136])).
fof(f131,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) | s('type.list.list'('type.tokens.token'),X0) = s('type.list.list'('type.tokens.token'),X1)) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ((s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) | s('type.list.list'('type.tokens.token'),X0) = s('type.list.list'('type.tokens.token'),X1)) & (s('type.list.list'('type.tokens.token'),X0) != s('type.list.list'('type.tokens.token'),X1) | s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1)))))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X1))) <=> s('type.list.list'('type.tokens.token'),X0) = s('type.list.list'('type.tokens.token'),X1))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X9] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X8))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X9))) <=> s('type.list.list'('type.tokens.token'),X8) = s('type.list.list'('type.tokens.token'),X9))),
  file('thm.cmlPtreeConversionProps.cmlPtreeConversionProps_|49|4_prove_ltb','thm.pegSound.MAP_TK_|49||49|')).
% SZS output end Proof for thm.cmlPtreeConversionProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 287
% Generated clauses: 1589
% Final active clauses: 37
% Final passive clauses: 185
% Input formulas: 21
% Initial clauses: 50
% 
% Duplicate literals: 155
% Trivial inequalities: 26
% Fw subsumption resolutions: 258
% Fw demodulations: 52
% 
% Simple tautologies: 92
% Equational tautologies: 33
% Forward subsumptions: 620
% 
% Binary resolution: 62
% Factoring: 1
% Forward superposition: 421
% Backward superposition: 433
% Self superposition: 48
% Equality factoring: 54
% Equality resolution: 6
% 
% Split clauses: 59
% Split components: 129
% SAT solver clauses: 106
% SAT solver unit clauses: 4
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 59
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 101
% TWLsolver calls for satisfiability: 36
% 
% Memory used [KB]: 1279
% Time elapsed: 0.065 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
