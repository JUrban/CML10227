Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.benchmark
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.benchmark
% SZS output start Proof for thm.benchmark
fof(f4008,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4007,f224,f407,f405,f403,f401,f4005,f225,f400,f4006])).
fof(f4006,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f403,f226])).
fof(f226,plain,(
  ( ! [X7] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),X7)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),sK17),s('type.benchmark.queue'(sK12),sK18),s('type.benchmark.digit'(sK12),sK19)))) & s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) & ! [X7] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),X7))))) & ! [X5,X6] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),X5),s('type.benchmark.times'(sK12),X6))))) & ! [X2,X3,X4] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),X2),s('type.benchmark.queue'(sK12),X3),s('type.benchmark.digit'(sK12),X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X8,X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X8),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10)))) & s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) & ! [X7] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X7))))) & ! [X5,X6] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X5),s('type.benchmark.times'(X0),X6))))) & ! [X2,X3,X4] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X2),s('type.benchmark.queue'(X0),X3),s('type.benchmark.digit'(X0),X4))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X7] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X7))))) | ? [X5,X6] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X5),s('type.benchmark.times'(X0),X6))))) | ? [X2,X3,X4] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X2),s('type.benchmark.queue'(X0),X3),s('type.benchmark.digit'(X0),X4)))) & s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) & ! [X13] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) & ! [X11,X12] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) & ! [X8,X9,X10] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X8),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X7] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X7))))) | ? [X5,X6] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X5),s('type.benchmark.times'(X0),X6))))) | ? [X2,X3,X4] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X2),s('type.benchmark.queue'(X0),X3),s('type.benchmark.digit'(X0),X4)))) & (s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) & ! [X13] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) & ! [X11,X12] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) & ! [X8,X9,X10] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X8),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X7] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X7))))) | ? [X5,X6] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X5),s('type.benchmark.times'(X0),X6))))) | ? [X2,X3,X4] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X2),s('type.benchmark.queue'(X0),X3),s('type.benchmark.digit'(X0),X4)))) => (s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X8,X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X8),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X7] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X7))))) | ? [X5,X6] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X5),s('type.benchmark.times'(X0),X6))))) | ? [X2,X3,X4] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X2),s('type.benchmark.queue'(X0),X3),s('type.benchmark.digit'(X0),X4)))) => (s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X8,X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),X8),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12,X13] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),X11),s('type.benchmark.queue'(X6),X12),s('type.benchmark.digit'(X6),X13)))) => (s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12,X13] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),X11),s('type.benchmark.queue'(X6),X12),s('type.benchmark.digit'(X6),X13)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12,X13] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),X11),s('type.benchmark.queue'(X6),X12),s('type.benchmark.digit'(X6),X13)))) => (s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12,X13] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),X11),s('type.benchmark.queue'(X6),X12),s('type.benchmark.digit'(X6),X13)))))),
  file('thm.benchmark.benchmark_6|48|_prove_ltb','thm.benchmark.benchmark_6|48|_prove_ltb')).
fof(f400,plain,(
  s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) | $spl1),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f225,plain,(
  s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0')))),
  inference(cnf_transformation,[],[f139])).
fof(f4005,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f407,f228])).
fof(f228,plain,(
  ( ! [X4,X2,X3] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),X2),s('type.benchmark.queue'(sK12),X3),s('type.benchmark.digit'(sK12),X4)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f401,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) | $spl0),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f403,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) | $spl2),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f405,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) | $spl4),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f407,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),sK17),s('type.benchmark.queue'(sK12),sK18),s('type.benchmark.digit'(sK12),sK19))) | $spl6),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),sK17),s('type.benchmark.queue'(sK12),sK18),s('type.benchmark.digit'(sK12),sK19))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f224,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),sK17),s('type.benchmark.queue'(sK12),sK18),s('type.benchmark.digit'(sK12),sK19))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0')))),
  inference(cnf_transformation,[],[f139])).
fof(f4007,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f405,f227])).
fof(f227,plain,(
  ( ! [X6,X5] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),X5),s('type.benchmark.times'(sK12),X6)))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.benchmark
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 310
% Passive clauses: 1169
% Generated clauses: 3776
% Final active clauses: 310
% Final passive clauses: 711
% Input formulas: 37
% Initial clauses: 172
% 
% Duplicate literals: 143
% Trivial inequalities: 13
% Fw subsumption resolutions: 255
% 
% Simple tautologies: 141
% Equational tautologies: 20
% Forward subsumptions: 2035
% 
% Binary resolution: 2281
% Factoring: 706
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 159
% SAT solver clauses: 156
% SAT solver unit clauses: 10
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 155
% TWLsolver calls for satisfiability: 135
% 
% Memory used [KB]: 1918
% Time elapsed: 0.170 s
% ------------------------------
% ------------------------------
% Success in time 0.2 s
