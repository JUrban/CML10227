Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_namesProof
% (33117)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 825
% Passive clauses: 4931
% Generated clauses: 25821
% Final active clauses: 684
% Final passive clauses: 3661
% Input formulas: 516
% Initial clauses: 850
% 
% Duplicate literals: 203
% Trivial inequalities: 44
% Fw subsumption resolutions: 1403
% Fw demodulations: 2063
% Bw demodulations: 128
% 
% Simple tautologies: 269
% Equational tautologies: 25
% Forward subsumptions: 16844
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 4652
% Factoring: 898
% Forward superposition: 8015
% Backward superposition: 7383
% Self superposition: 40
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 291
% Split components: 584
% SAT solver clauses: 460
% SAT solver unit clauses: 15
% SAT solver binary clauses: 68
% 
% Sat splits: 291
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 459
% TWLsolver calls for satisfiability: 339
% 
% Memory used [KB]: 13432
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stack_namesProof
% (33130)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 556
% Passive clauses: 2756
% Generated clauses: 18263
% Final active clauses: 472
% Final passive clauses: 2039
% Input formulas: 516
% Initial clauses: 850
% 
% Duplicate literals: 109
% Trivial inequalities: 32
% Fw subsumption resolutions: 766
% Fw demodulations: 1929
% Bw demodulations: 217
% Condensations: 112
% Global subsumptions: 26
% 
% Simple tautologies: 259
% Equational tautologies: 9
% Forward subsumptions: 9121
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 2291
% Factoring: 268
% Forward superposition: 4787
% Backward superposition: 3959
% Self superposition: 47
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 4026
% SAT solver unit clauses: 1246
% SAT solver binary clauses: 193
% SAT solver learnt clauses: 52
% SAT solver learnt literals: 22
% 
% Sat splits: 12
% Sat splitting refutations: 29
% 
% TWLsolver clauses: 3922
% TWLsolver calls for satisfiability: 10182
% 
% Memory used [KB]: 20084
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stack_namesProof
% (33156)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 2036
% Passive clauses: 16037
% Generated clauses: 208876
% Final active clauses: 1743
% Final passive clauses: 6213
% Input formulas: 516
% Initial clauses: 850
% Discarded non-redundant clauses: 28309
% 
% Duplicate literals: 10
% Trivial inequalities: 100
% Fw subsumption resolutions: 2112
% Fw demodulations: 64528
% Bw demodulations: 2580
% Condensations: 40
% Global subsumptions: 2
% 
% Simple tautologies: 151
% Equational tautologies: 69
% Forward subsumptions: 105829
% Fw demodulations to eq. taut.: 1305
% Bw demodulations to eq. taut.: 31
% 
% Unit resulting resolution: 56429
% Factoring: 3
% Forward superposition: 29264
% Backward superposition: 50818
% Self superposition: 147
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 30
% Split components: 60
% SAT solver clauses: 17629
% SAT solver unit clauses: 7307
% SAT solver binary clauses: 6402
% 
% Sat splits: 30
% Sat splitting refutations: 1528
% 
% Memory used [KB]: 190359
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.stack_namesProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_namesProof
% SZS output start Proof for thm.stack_namesProof
fof(f13396,plain,(
  $false),
  inference(subsumption_resolution,[],[f1597,f1571])).
fof(f1571,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.stackSem.get_var_2'(s('type.num.num',X8),s('type.stackSem.state'(X7,X9),X10))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.stackSem.get_var_2'(s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.num.num',X8))),s('type.stackSem.state'(X7,X9),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(X7,X9),X10)))))) )),
  inference(forward_demodulation,[],[f1403,f1360])).
fof(f1360,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),X0),s('type.num.num',X1))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f742])).
fof(f742,plain,(
  ! [X0,X1] : s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),X0),s('type.num.num',X1))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X13,X14] : s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),X13),s('type.num.num',X14))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X13))),s('type.num.num',X14)))),
  file('thm.stack_namesProof.FLOOKUP_rename_state_find_name','ARITY_1_2_const.stack_names.find_name')).
fof(f1403,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.stackSem.get_var_2'(s('type.num.num',X8),s('type.stackSem.state'(X7,X9),X10))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.stackSem.get_var_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK18))),s('type.num.num',X8))),s('type.stackSem.state'(X7,X9),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(X7,X9),X10)))))) )),
  inference(resolution,[],[f1018,f1101])).
fof(f1101,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X2))),s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X3))))) | ~p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))) )),
  inference(cnf_transformation,[],[f806])).
fof(f806,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X2))),s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X3))))))),
  inference(ennf_transformation,[],[f553])).
fof(f553,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X2))),s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X3))))))),
  inference(flattening,[],[f552])).
fof(f552,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X2))),s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X3))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X11,X8,X10] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X10))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X11),s('type.stackSem.state'(X6,X7),X8))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X10))),s('type.num.num',X11))),s('type.stackSem.state'(X6,X7),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X10),s('type.stackSem.state'(X6,X7),X8))))))),
  file('thm.stack_namesProof.FLOOKUP_rename_state_find_name','thm.stack_namesProof.get_var_find_name')).
fof(f1018,plain,(
  p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK18))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),
  inference(cnf_transformation,[],[f867])).
fof(f867,plain,(
  p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK18))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) & s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),sK16))),s('type.num.num',sK17))) != s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(sK14,sK15),sK16))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK18))),s('type.num.num',sK17)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15,sK16,sK17,sK18])],[f799])).
fof(f799,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X2))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X3))))))),
  inference(ennf_transformation,[],[f519])).
fof(f519,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X2))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X3))))))),
  inference(flattening,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X4),s('type.stackSem.state'(X0,X1),X2))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X4))),s('type.num.num',X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X10))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X8))),s('type.num.num',X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X10),s('type.stackSem.state'(X6,X7),X8))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X10))),s('type.num.num',X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X10))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X8))),s('type.num.num',X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),X10),s('type.stackSem.state'(X6,X7),X8))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X10))),s('type.num.num',X9))))))),
  file('thm.stack_namesProof.FLOOKUP_rename_state_find_name','thm.stack_namesProof.FLOOKUP_rename_state_find_name')).
fof(f1597,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.stackSem.get_var_2'(s('type.num.num',sK17),s('type.stackSem.state'(sK14,sK15),sK16))) != s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.stackSem.get_var_2'(s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.num.num',sK17))),s('type.stackSem.state'(sK14,sK15),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(sK14,sK15),sK16)))))),
  inference(superposition,[],[f1400,f1105])).
fof(f1105,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f561])).
fof(f561,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))),
  inference(flattening,[],[f560])).
fof(f560,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))),
  inference(rectify,[],[f326])).
fof(f326,axiom,(
  ! [X6,X16] : ! [X11,X8] : s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X11),s('type.stackSem.state'(X6,X16),X8))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X16),X8))),s('type.num.num',X11)))),
  file('thm.stack_namesProof.FLOOKUP_rename_state_find_name','thm.stackSem.get_var_def')).
fof(f1400,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.stackSem.get_var_2'(s('type.num.num',sK17),s('type.stackSem.state'(sK14,sK15),sK16))) != s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(sK14,sK15),sK16))))),s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.num.num',sK17)))))),
  inference(forward_demodulation,[],[f1399,f1105])).
fof(f1399,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),sK16))),s('type.num.num',sK17))) != s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(sK14,sK15),sK16))))),s('type.num.num','const.stack_names.find_name_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.num.num',sK17)))))),
  inference(forward_demodulation,[],[f1019,f1360])).
fof(f1019,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),sK16))),s('type.num.num',sK17))) != s('type.option.option'('type.wordSem.word_loc'(sK14)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK14)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK14,sK15),'const.stack_namesProof.rename_state_2'(s('type.sptree.spt'('type.num.num'),sK18),s('type.stackSem.state'(sK14,sK15),sK16))))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK18))),s('type.num.num',sK17)))))),
  inference(cnf_transformation,[],[f867])).
% SZS output end Proof for thm.stack_namesProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 553
% Passive clauses: 3359
% Generated clauses: 11997
% Final active clauses: 540
% Final passive clauses: 2828
% Input formulas: 516
% Initial clauses: 371
% 
% Selected by SInE selection: 157
% SInE iterations: 1
% 
% Duplicate literals: 524
% Trivial inequalities: 141
% Fw subsumption resolutions: 1376
% Fw demodulations: 1281
% Bw demodulations: 6
% 
% Simple tautologies: 1233
% Equational tautologies: 5
% Forward subsumptions: 4001
% 
% Binary resolution: 3419
% Forward superposition: 4027
% Backward superposition: 1163
% Self superposition: 1
% Equality resolution: 29
% 
% Split clauses: 152
% Split components: 343
% SAT solver clauses: 208
% SAT solver unit clauses: 25
% SAT solver binary clauses: 28
% 
% Sat splits: 152
% Sat splitting refutations: 25
% 
% Memory used [KB]: 6652
% Time elapsed: 0.329 s
% ------------------------------
% ------------------------------
% Success in time 12.104 s
