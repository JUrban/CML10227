Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.word_instProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.word_instProof
% SZS output start Proof for thm.word_instProof
fof(f3977,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3976,f224,f425,f423,f421,f419,f417,f415,f413,f411,f409,f407,f3974,f3973,f3972,f3971,f3970,f3969,f3968,f773,f3975])).
fof(f3975,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f413,f230])).
fof(f230,plain,(
  ( ! [X8] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),X8)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK15))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK16))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK17))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK18))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK19))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK20))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK21))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK22))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK23),s('type.wordLang.exp'(sK12),sK24),s('type.wordLang.num_exp'(sK12),sK25)))) & ! [X13] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X13))) & ! [X12] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X12))) & ! [X11] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X11))) & ! [X10] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X10))) & ! [X9] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X9))) & ! [X8] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),X8))) & ! [X5,X6,X7] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',X5),s('type.wordLang.exp'(sK12),X6),s('type.wordLang.num_exp'(sK12),X7))) & ! [X4] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),X4))) & ! [X3] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',X3))) & ! [X2] : s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X25] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X25))) | ? [X24] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X24))) | ? [X23] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X23))) | ? [X22] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X22))) | ? [X21] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X21))) | ? [X20] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X20))) | ? [X19] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X19))) | ? [X18] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X18))) | ? [X17] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X17))) | ? [X14,X15,X16] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X14),s('type.wordLang.exp'(X0),X15),s('type.wordLang.num_exp'(X0),X16)))) & ! [X13] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X13))) & ! [X12] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X12))) & ! [X11] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X11))) & ! [X10] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X10))) & ! [X9] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X9))) & ! [X8] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X8))) & ! [X5,X6,X7] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X5),s('type.wordLang.exp'(X0),X6),s('type.wordLang.num_exp'(X0),X7))) & ! [X4] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X4))) & ! [X3] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X3))) & ! [X2] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X2))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X13] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X13))) | ? [X12] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X12))) | ? [X11] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))) | ? [X10] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X10))) | ? [X9] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X9))) | ? [X8] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X8))) | ? [X7] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X7))) | ? [X6] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X6))) | ? [X5] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X5))) | ? [X2,X3,X4] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4)))) & ! [X25] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X25))) & ! [X24] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X24))) & ! [X23] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X23))) & ! [X22] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X22))) & ! [X21] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X21))) & ! [X20] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X20))) & ! [X17,X18,X19] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X0),X18),s('type.wordLang.num_exp'(X0),X19))) & ! [X16] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X16))) & ! [X15] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X15))) & ! [X14] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X14))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X13] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X13))) | ? [X12] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X12))) | ? [X11] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))) | ? [X10] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X10))) | ? [X9] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X9))) | ? [X8] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X8))) | ? [X7] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X7))) | ? [X6] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X6))) | ? [X5] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X5))) | ? [X2,X3,X4] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4)))) & (! [X25] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X25))) & ! [X24] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X24))) & ! [X23] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X23))) & ! [X22] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X22))) & ! [X21] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X21))) & ! [X20] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X20))) & ! [X17,X18,X19] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X0),X18),s('type.wordLang.num_exp'(X0),X19))) & ! [X16] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X16))) & ! [X15] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X15))) & ! [X14] : s('type.wordLang.exp'(X0),X1) != s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X14)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X13] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X13))) | ? [X12] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X12))) | ? [X11] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))) | ? [X10] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X10))) | ? [X9] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X9))) | ? [X8] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X8))) | ? [X7] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X7))) | ? [X6] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X6))) | ? [X5] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X5))) | ? [X2,X3,X4] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4)))) => (? [X25] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X25))) | ? [X24] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X24))) | ? [X23] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X23))) | ? [X22] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X22))) | ? [X21] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X21))) | ? [X20] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X20))) | ? [X17,X18,X19] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X0),X18),s('type.wordLang.num_exp'(X0),X19))) | ? [X16] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X16))) | ? [X15] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X15))) | ? [X14] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X14)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X13] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X13))) | ? [X12] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X12))) | ? [X11] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))) | ? [X10] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X10))) | ? [X9] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X9))) | ? [X8] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X8))) | ? [X7] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X7))) | ? [X6] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X6))) | ? [X5] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X5))) | ? [X2,X3,X4] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4)))) => (? [X25] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X0)),X25))) | ? [X24] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X0)),X24))) | ? [X23] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X0)),X23))) | ? [X22] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X0)),X22))) | ? [X21] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X0)),X21))) | ? [X20] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X20))) | ? [X17,X18,X19] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X0),X18),s('type.wordLang.num_exp'(X0),X19))) | ? [X16] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X16))) | ? [X15] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X15))) | ? [X14] : s('type.wordLang.exp'(X0),X1) = s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X14)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))) | ? [X9] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X9))) | ? [X10] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X10))) | ? [X11] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X11))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X13] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X6)),X13))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X14,X11,X15] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X14),s('type.wordLang.exp'(X6),X11),s('type.wordLang.num_exp'(X6),X15)))) => (? [X13] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X6)),X13))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X11] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X11))) | ? [X14,X11,X15] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X14),s('type.wordLang.exp'(X6),X11),s('type.wordLang.num_exp'(X6),X15))) | ? [X8] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))) | ? [X9] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X9))) | ? [X10] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))) | ? [X9] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X9))) | ? [X10] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X10))) | ? [X11] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X11))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X13] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X6)),X13))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X14,X11,X15] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X14),s('type.wordLang.exp'(X6),X11),s('type.wordLang.num_exp'(X6),X15)))) => (? [X13] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(X6)),X13))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X12] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(X6)),X12))) | ? [X11] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X11))) | ? [X14,X11,X15] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X14),s('type.wordLang.exp'(X6),X11),s('type.wordLang.num_exp'(X6),X15))) | ? [X8] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))) | ? [X9] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X9))) | ? [X10] : s('type.wordLang.exp'(X6),X7) = s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X10)))))),
  file('thm.word_instProof.word_instProof_23_prove_ltb','thm.word_instProof.word_instProof_23_prove_ltb')).
fof(f773,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f411,f234])).
fof(f234,plain,(
  ( ! [X2] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X2)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3968,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f415,f226])).
fof(f226,plain,(
  ( ! [X12] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X12)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3969,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f423,f229])).
fof(f229,plain,(
  ( ! [X9] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X9)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3970,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f409,f233])).
fof(f233,plain,(
  ( ! [X3] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3971,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f425,f231])).
fof(f231,plain,(
  ( ! [X6,X7,X5] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',X5),s('type.wordLang.exp'(sK12),X6),s('type.wordLang.num_exp'(sK12),X7)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3972,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f419,f227])).
fof(f227,plain,(
  ( ! [X11] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X11)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3973,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f407,f232])).
fof(f232,plain,(
  ( ! [X4] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),X4)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3974,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f417,f225])).
fof(f225,plain,(
  ( ! [X13] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X13)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f407,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))) | $spl0),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f409,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK15))) | $spl2),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK15))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f411,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK16))) | $spl4),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK16))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f413,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK17))) | $spl6),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK17))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f415,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK18))) | $spl8),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK18))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f417,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK19))) | $spl10),
  inference(cnf_transformation,[],[f417_D])).
fof(f417_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK19))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f419,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK20))) | $spl12),
  inference(cnf_transformation,[],[f419_D])).
fof(f419_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK20))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f421,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK21))) | $spl14),
  inference(cnf_transformation,[],[f421_D])).
fof(f421_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK21))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f423,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK22))) | $spl16),
  inference(cnf_transformation,[],[f423_D])).
fof(f423_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK22))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f425,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK23),s('type.wordLang.exp'(sK12),sK24),s('type.wordLang.num_exp'(sK12),sK25))) | $spl18),
  inference(cnf_transformation,[],[f425_D])).
fof(f425_D,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK23),s('type.wordLang.exp'(sK12),sK24),s('type.wordLang.num_exp'(sK12),sK25))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f224,plain,(
  s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK23),s('type.wordLang.exp'(sK12),sK24),s('type.wordLang.num_exp'(sK12),sK25))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Xor_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK22))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK21))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.And_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK20))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Sub_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK19))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Add_0'),s('type.list.list'('type.wordLang.exp'(sK12)),sK18))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK17))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK16))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK15))) | s('type.wordLang.exp'(sK12),sK13) = s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14)))),
  inference(cnf_transformation,[],[f139])).
fof(f3976,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f421,f228])).
fof(f228,plain,(
  ( ! [X10] : (s('type.wordLang.exp'(sK12),sK13) != s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop','const.asm.Or_0'),s('type.list.list'('type.wordLang.exp'(sK12)),X10)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.word_instProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 306
% Passive clauses: 1160
% Generated clauses: 3746
% Final active clauses: 306
% Final passive clauses: 718
% Input formulas: 37
% Initial clauses: 178
% 
% Duplicate literals: 139
% Trivial inequalities: 13
% Fw subsumption resolutions: 253
% 
% Simple tautologies: 124
% Equational tautologies: 20
% Forward subsumptions: 2018
% 
% Binary resolution: 2237
% Factoring: 706
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 165
% SAT solver clauses: 162
% SAT solver unit clauses: 16
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 161
% TWLsolver calls for satisfiability: 141
% 
% Memory used [KB]: 1918
% Time elapsed: 0.153 s
% ------------------------------
% ------------------------------
% Success in time 0.18 s
