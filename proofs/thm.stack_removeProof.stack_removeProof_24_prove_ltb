Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_removeProof
% SZS output start Proof for thm.stack_removeProof
fof(f4649,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4648,f224,f413,f411,f409,f407,f405,f403,f4646,f4645,f4610,f4026,f4647])).
fof(f4647,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f403,f229])).
fof(f229,plain,(
  ( ! [X7] : (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Skip_0'),s('type.num.num',X7)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Skip_0'),s('type.num.num',sK14))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK15),s('type.fcp.cart'(bool,sK12),sK16))),s('type.num.num',sK17))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK18),s('type.num.num',sK19),s('type.num.num',sK20),s('type.asm.reg_imm'(sK12),sK21))))),s('type.num.num',sK22))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK23),s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26))))),s('type.num.num',sK27))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK28),s('type.num.num',sK29),s('type.num.num',sK30),s('type.num.num',sK31))))),s('type.num.num',sK32))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK33),s('type.num.num',sK34),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK35),s('type.fcp.cart'(bool,sK12),sK36))))),s('type.num.num',sK37)))) & ! [X21,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X22),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',X23),s('type.fcp.cart'(bool,sK12),X24))))),s('type.num.num',X25))) & ! [X18,X19,X20] : s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',X18),s('type.fcp.cart'(bool,sK12),X19))),s('type.num.num',X20))) & ! [X13,X14,X15,X16,X17] : s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))),s('type.num.num',X17))) & ! [X8,X9,X10,X11,X12] : s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.asm.reg_imm'(sK12),X11))))),s('type.num.num',X12))) & ! [X7] : s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Skip_0'),s('type.num.num',X7))) & ! [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X6)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X49] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X49))) | ? [X46,X47,X48] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X46),s('type.fcp.cart'(bool,X0),X47))),s('type.num.num',X48))) | ? [X41,X42,X43,X44,X45] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X41),s('type.num.num',X42),s('type.num.num',X43),s('type.asm.reg_imm'(X0),X44))))),s('type.num.num',X45))) | ? [X36,X37,X38,X39,X40] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X36),s('type.num.num',X37),s('type.num.num',X38),s('type.num.num',X39))))),s('type.num.num',X40))) | ? [X31,X32,X33,X34,X35] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X31),s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',X35))) | ? [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X26),s('type.num.num',X27),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X0),X29))))),s('type.num.num',X30)))) & ! [X21,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X22),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X23),s('type.fcp.cart'(bool,X0),X24))))),s('type.num.num',X25))) & ! [X18,X19,X20] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X18),s('type.fcp.cart'(bool,X0),X19))),s('type.num.num',X20))) & ! [X13,X14,X15,X16,X17] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))),s('type.num.num',X17))) & ! [X8,X9,X10,X11,X12] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.asm.reg_imm'(X0),X11))))),s('type.num.num',X12))) & ! [X7] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X7))) & ! [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X6))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X25] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X0),X23))),s('type.num.num',X24))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X0),X20))))),s('type.num.num',X21))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X12),s('type.num.num',X13),s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',X16))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X7),s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num',X11))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X4),s('type.fcp.cart'(bool,X0),X5))))),s('type.num.num',X6)))) & ! [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X45),s('type.num.num',X46),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X47),s('type.fcp.cart'(bool,X0),X48))))),s('type.num.num',X49))) & ! [X42,X43,X44] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))),s('type.num.num',X44))) & ! [X37,X38,X39,X40,X41] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40))))),s('type.num.num',X41))) & ! [X32,X33,X34,X35,X36] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))),s('type.num.num',X36))) & ! [X31] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X31))) & ! [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X26),s('type.num.num',X27),s('type.num.num',X28),s('type.num.num',X29))))),s('type.num.num',X30))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X25] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X0),X23))),s('type.num.num',X24))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X0),X20))))),s('type.num.num',X21))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X12),s('type.num.num',X13),s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',X16))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X7),s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num',X11))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X4),s('type.fcp.cart'(bool,X0),X5))))),s('type.num.num',X6)))) & (! [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X45),s('type.num.num',X46),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X47),s('type.fcp.cart'(bool,X0),X48))))),s('type.num.num',X49))) & ! [X42,X43,X44] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))),s('type.num.num',X44))) & ! [X37,X38,X39,X40,X41] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40))))),s('type.num.num',X41))) & ! [X32,X33,X34,X35,X36] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))),s('type.num.num',X36))) & ! [X31] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X31))) & ! [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X26),s('type.num.num',X27),s('type.num.num',X28),s('type.num.num',X29))))),s('type.num.num',X30)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X25] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X0),X23))),s('type.num.num',X24))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X0),X20))))),s('type.num.num',X21))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X12),s('type.num.num',X13),s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',X16))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X7),s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num',X11))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X4),s('type.fcp.cart'(bool,X0),X5))))),s('type.num.num',X6)))) => (? [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X45),s('type.num.num',X46),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X47),s('type.fcp.cart'(bool,X0),X48))))),s('type.num.num',X49))) | ? [X42,X43,X44] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))),s('type.num.num',X44))) | ? [X37,X38,X39,X40,X41] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40))))),s('type.num.num',X41))) | ? [X32,X33,X34,X35,X36] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))),s('type.num.num',X36))) | ? [X31] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X31))) | ? [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X26),s('type.num.num',X27),s('type.num.num',X28),s('type.num.num',X29))))),s('type.num.num',X30)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X25] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X25))) | ? [X22,X23,X24] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X0),X23))),s('type.num.num',X24))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X0),X20))))),s('type.num.num',X21))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X12),s('type.num.num',X13),s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',X16))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X7),s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num',X11))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X2),s('type.num.num',X3),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X4),s('type.fcp.cart'(bool,X0),X5))))),s('type.num.num',X6)))) => (? [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X45),s('type.num.num',X46),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X47),s('type.fcp.cart'(bool,X0),X48))))),s('type.num.num',X49))) | ? [X42,X43,X44] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))),s('type.num.num',X44))) | ? [X37,X38,X39,X40,X41] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40))))),s('type.num.num',X41))) | ? [X32,X33,X34,X35,X36] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.asm.reg_imm'(X0),X35))))),s('type.num.num',X36))) | ? [X31] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Skip_0'),s('type.num.num',X31))) | ? [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.asm.inst'(X0),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X26),s('type.num.num',X27),s('type.num.num',X28),s('type.num.num',X29))))),s('type.num.num',X30)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Skip_0'),s('type.num.num',X8))) | ? [X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))),s('type.num.num',X11))) | ? [X12,X9,X13,X14,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X12),s('type.num.num',X9),s('type.num.num',X13),s('type.asm.reg_imm'(X6),X14))))),s('type.num.num',X11))) | ? [X15,X9,X13,X16,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X15),s('type.num.num',X9),s('type.num.num',X13),s('type.num.num',X16))))),s('type.num.num',X11))) | ? [X17,X18,X19,X20,X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.num.num',X20))))),s('type.num.num',X8))) | ? [X21,X9,X22,X23,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X9),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X6),X23))))),s('type.num.num',X11)))) => (? [X21,X9,X22,X23,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X9),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X6),X23))))),s('type.num.num',X11))) | ? [X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))),s('type.num.num',X11))) | ? [X15,X9,X13,X16,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X15),s('type.num.num',X9),s('type.num.num',X13),s('type.num.num',X16))))),s('type.num.num',X11))) | ? [X12,X9,X13,X14,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X12),s('type.num.num',X9),s('type.num.num',X13),s('type.asm.reg_imm'(X6),X14))))),s('type.num.num',X11))) | ? [X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Skip_0'),s('type.num.num',X8))) | ? [X17,X18,X19,X20,X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.num.num',X20))))),s('type.num.num',X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Skip_0'),s('type.num.num',X8))) | ? [X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))),s('type.num.num',X11))) | ? [X12,X9,X13,X14,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X12),s('type.num.num',X9),s('type.num.num',X13),s('type.asm.reg_imm'(X6),X14))))),s('type.num.num',X11))) | ? [X15,X9,X13,X16,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X15),s('type.num.num',X9),s('type.num.num',X13),s('type.num.num',X16))))),s('type.num.num',X11))) | ? [X17,X18,X19,X20,X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.num.num',X20))))),s('type.num.num',X8))) | ? [X21,X9,X22,X23,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X9),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X6),X23))))),s('type.num.num',X11)))) => (? [X21,X9,X22,X23,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X9),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X22),s('type.fcp.cart'(bool,X6),X23))))),s('type.num.num',X11))) | ? [X9,X10,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))),s('type.num.num',X11))) | ? [X15,X9,X13,X16,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X15),s('type.num.num',X9),s('type.num.num',X13),s('type.num.num',X16))))),s('type.num.num',X11))) | ? [X12,X9,X13,X14,X11] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X12),s('type.num.num',X9),s('type.num.num',X13),s('type.asm.reg_imm'(X6),X14))))),s('type.num.num',X11))) | ? [X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Skip_0'),s('type.num.num',X8))) | ? [X17,X18,X19,X20,X8] : s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.asm.inst'(X6),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19),s('type.num.num',X20))))),s('type.num.num',X8)))))),
  file('thm.stack_removeProof.stack_removeProof_24_prove_ltb','thm.stack_removeProof.stack_removeProof_24_prove_ltb')).
fof(f4026,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f405,f226])).
fof(f226,plain,(
  ( ! [X19,X20,X18] : (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',X18),s('type.fcp.cart'(bool,sK12),X19))),s('type.num.num',X20)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4610,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f407,f228])).
fof(f228,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.asm.reg_imm'(sK12),X11))))),s('type.num.num',X12)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4645,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f413,f225])).
fof(f225,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',X21),s('type.num.num',X22),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',X23),s('type.fcp.cart'(bool,sK12),X24))))),s('type.num.num',X25)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4646,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f411,f230])).
fof(f230,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f403,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Skip_0'),s('type.num.num',sK14))) | $spl0),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Skip_0'),s('type.num.num',sK14))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f405,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK15),s('type.fcp.cart'(bool,sK12),sK16))),s('type.num.num',sK17))) | $spl2),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK15),s('type.fcp.cart'(bool,sK12),sK16))),s('type.num.num',sK17))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f407,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK18),s('type.num.num',sK19),s('type.num.num',sK20),s('type.asm.reg_imm'(sK12),sK21))))),s('type.num.num',sK22))) | $spl4),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK18),s('type.num.num',sK19),s('type.num.num',sK20),s('type.asm.reg_imm'(sK12),sK21))))),s('type.num.num',sK22))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f409,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK23),s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26))))),s('type.num.num',sK27))) | $spl6),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK23),s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26))))),s('type.num.num',sK27))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f411,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK28),s('type.num.num',sK29),s('type.num.num',sK30),s('type.num.num',sK31))))),s('type.num.num',sK32))) | $spl8),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK28),s('type.num.num',sK29),s('type.num.num',sK30),s('type.num.num',sK31))))),s('type.num.num',sK32))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f413,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK33),s('type.num.num',sK34),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK35),s('type.fcp.cart'(bool,sK12),sK36))))),s('type.num.num',sK37))) | $spl10),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK33),s('type.num.num',sK34),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK35),s('type.fcp.cart'(bool,sK12),sK36))))),s('type.num.num',sK37))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f224,plain,(
  s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK33),s('type.num.num',sK34),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK35),s('type.fcp.cart'(bool,sK12),sK36))))),s('type.num.num',sK37))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK28),s('type.num.num',sK29),s('type.num.num',sK30),s('type.num.num',sK31))))),s('type.num.num',sK32))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK23),s('type.num.num',sK24),s('type.num.num',sK25),s('type.num.num',sK26))))),s('type.num.num',sK27))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK18),s('type.num.num',sK19),s('type.num.num',sK20),s('type.asm.reg_imm'(sK12),sK21))))),s('type.num.num',sK22))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK15),s('type.fcp.cart'(bool,sK12),sK16))),s('type.num.num',sK17))) | s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Skip_0'),s('type.num.num',sK14)))),
  inference(cnf_transformation,[],[f139])).
fof(f4648,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f409,f227])).
fof(f227,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.asm.inst'(sK12),'type.num.num'),'const.pair.,_2'(s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))),s('type.num.num',X17)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.stack_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 371
% Passive clauses: 1460
% Generated clauses: 4418
% Final active clauses: 371
% Final passive clauses: 906
% Input formulas: 37
% Initial clauses: 174
% 
% Duplicate literals: 153
% Trivial inequalities: 25
% Fw subsumption resolutions: 296
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2309
% 
% Binary resolution: 2718
% Factoring: 772
% Forward superposition: 154
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 101
% Split components: 207
% SAT solver clauses: 193
% SAT solver unit clauses: 12
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 1
% 
% Sat splits: 101
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 192
% TWLsolver calls for satisfiability: 164
% 
% Memory used [KB]: 2558
% Time elapsed: 0.076 s
% ------------------------------
% ------------------------------
% Success in time 0.08 s
