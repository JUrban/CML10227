Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.patSem
% (8115)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 168
% Passive clauses: 3102
% Generated clauses: 21972
% Final active clauses: 128
% Final passive clauses: 2686
% Input formulas: 68
% Initial clauses: 77
% 
% Duplicate literals: 890
% Trivial inequalities: 157
% Fw subsumption resolutions: 1678
% Fw demodulations: 3409
% Bw demodulations: 33
% 
% Simple tautologies: 168
% Equational tautologies: 51
% Forward subsumptions: 11995
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 427
% Factoring: 3
% Forward superposition: 8406
% Backward superposition: 6462
% Self superposition: 208
% Equality factoring: 104
% Equality resolution: 14
% 
% Split clauses: 232
% Split components: 464
% SAT solver clauses: 657
% SAT solver unit clauses: 41
% SAT solver binary clauses: 111
% 
% Sat splits: 232
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 657
% TWLsolver calls for satisfiability: 137
% 
% Memory used [KB]: 14839
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.patSem
% (8133)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 130
% Passive clauses: 1212
% Generated clauses: 15900
% Final active clauses: 103
% Final passive clauses: 918
% Input formulas: 68
% Initial clauses: 77
% 
% Duplicate literals: 436
% Trivial inequalities: 21
% Fw subsumption resolutions: 613
% Fw demodulations: 1639
% Bw demodulations: 184
% Condensations: 957
% 
% Simple tautologies: 48
% Equational tautologies: 36
% Forward subsumptions: 8989
% 
% Binary resolution: 262
% Factoring: 1
% Forward superposition: 5629
% Backward superposition: 5206
% Self superposition: 198
% Equality factoring: 60
% Equality resolution: 1
% 
% Split clauses: 33
% Split components: 66
% SAT solver clauses: 1917
% SAT solver unit clauses: 130
% SAT solver binary clauses: 38
% 
% Sat splits: 33
% Sat splitting refutations: 28
% 
% TWLsolver clauses: 1917
% TWLsolver calls for satisfiability: 250
% 
% Memory used [KB]: 24178
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.patSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.patSem
% SZS output start Proof for thm.patSem
fof(f27131,plain,(
  $false),
  inference(subsumption_resolution,[],[f27130,f214])).
fof(f214,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.patSem.state_fupdfupds_comp|split|7',aHL_TRUTH)).
fof(f27130,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f27128,f2818])).
fof(f2818,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1)))) )),
  inference(unit_resulting_resolution,[],[f2488,f296])).
fof(f296,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f216,f217])).
fof(f217,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.patSem.state_fupdfupds_comp|split|7',aHL_BOOL_CASES)).
fof(f216,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.patSem.state_fupdfupds_comp|split|7',aHL_FALSITY)).
fof(f2488,plain,(
  ( ! [X2,X0] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X2))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f2404,f258])).
fof(f258,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X14,X6] : ! [X16,X19] : s(X6,X16) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X14),'const.pair.,_2'(s(X6,X16),s(X14,X19)))))),
  file('thm.patSem.state_fupdfupds_comp|split|7','thm.pair.FST')).
fof(f2404,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))))))),s(X0,X2))))) )),
  inference(unit_resulting_resolution,[],[f258,f267])).
fof(f267,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X48,X49,X50] : (p(s(bool,happ(s(fun(X48,bool),happ(s(fun(X48,fun(X48,bool)),'=_0'),s(X48,X49))),s(X48,X50)))) <=> s(X48,X49) = s(X48,X50))),
  file('thm.patSem.state_fupdfupds_comp|split|7',arity_0_HL_EQ)).
fof(f27128,plain,(
  ~p(s(bool,happ(s(fun(fun(sK0,'type.patSem.state'(sK1)),bool),happ(s(fun(fun(sK0,'type.patSem.state'(sK1)),fun(fun(sK0,'type.patSem.state'(sK1)),bool)),'=_0'),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))))),s(fun(sK0,'type.patSem.state'(sK1)),sK2))))),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))))),s(fun(sK0,'type.patSem.state'(sK1)),sK2))))))),
  inference(backward_demodulation,[],[f27064,f7600])).
fof(f7600,plain,(
  ~p(s(bool,happ(s(fun(fun(sK0,'type.patSem.state'(sK1)),bool),happ(s(fun(fun(sK0,'type.patSem.state'(sK1)),fun(fun(sK0,'type.patSem.state'(sK1)),bool)),'=_0'),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4))),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))),s(fun(sK0,'type.patSem.state'(sK1)),sK2))))))),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))))),s(fun(sK0,'type.patSem.state'(sK1)),sK2))))))),
  inference(unit_resulting_resolution,[],[f213,f266])).
fof(f266,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f212])).
fof(f213,plain,(
  s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))))),s(fun(sK0,'type.patSem.state'(sK1)),sK2))) != s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4))),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))),s(fun(sK0,'type.patSem.state'(sK1)),sK2)))))),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))))),s(fun(sK0,'type.patSem.state'(sK1)),sK2))) != s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK4))),s(fun(sK0,'type.patSem.state'(sK1)),'const.combin.o_2'(s(fun('type.patSem.state'(sK1),'type.patSem.state'(sK1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),sK3))),s(fun(sK0,'type.patSem.state'(sK1)),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f194])).
fof(f194,plain,(
  ? [X0,X1,X2,X3,X4] : s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X3))))),s(fun(X0,'type.patSem.state'(X1)),X2))) != s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X4))),s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X3))),s(fun(X0,'type.patSem.state'(X1)),X2)))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3,X4] : s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X3))))),s(fun(X0,'type.patSem.state'(X1)),X2))) = s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X4))),s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X3))),s(fun(X0,'type.patSem.state'(X1)),X2)))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X4),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X3))))),s(fun(X0,'type.patSem.state'(X1)),X2))) = s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X4))),s(fun(X0,'type.patSem.state'(X1)),'const.combin.o_2'(s(fun('type.patSem.state'(X1),'type.patSem.state'(X1)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X3))),s(fun(X0,'type.patSem.state'(X1)),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s(fun(X6,'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X10),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X9))))),s(fun(X6,'type.patSem.state'(X7)),X8))) = s(fun(X6,'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X10))),s(fun(X6,'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X9))),s(fun(X6,'type.patSem.state'(X7)),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s(fun(X6,'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X10),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X9))))),s(fun(X6,'type.patSem.state'(X7)),X8))) = s(fun(X6,'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X10))),s(fun(X6,'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X9))),s(fun(X6,'type.patSem.state'(X7)),X8)))))),
  file('thm.patSem.state_fupdfupds_comp|split|7','thm.patSem.state_fupdfupds_comp|split|7')).
fof(f27064,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X3,'type.patSem.state'(X0)),'const.combin.o_2'(s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2))))),s(fun(X3,'type.patSem.state'(X0)),X4))) = s(fun(X3,'type.patSem.state'(X0)),'const.combin.o_2'(s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1))),s(fun(X3,'type.patSem.state'(X0)),'const.combin.o_2'(s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2))),s(fun(X3,'type.patSem.state'(X0)),X4)))))) )),
  inference(superposition,[],[f273,f228])).
fof(f228,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1))))) = s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.combin.o_2'(s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2))),s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1))))) = s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.combin.o_2'(s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2))),s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1)))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1))))) = s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.combin.o_2'(s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X2))),s(fun('type.patSem.state'(X0),'type.patSem.state'(X0)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : ! [X9,X10] : s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X10),s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X9))))) = s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.combin.o_2'(s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X10))),s(fun('type.patSem.state'(X7),'type.patSem.state'(X7)),'const.patSem.state_globals_fupd_1'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),X9)))))),
  file('thm.patSem.state_fupdfupds_comp|split|7','thm.patSem.state_fupdfupds_comp|split|6')).
fof(f273,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X14,X6,X22,X15] : ! [X10,X9,X8] : s(fun(X22,X14),'const.combin.o_2'(s(fun(X6,X14),X10),s(fun(X22,X6),'const.combin.o_2'(s(fun(X15,X6),X9),s(fun(X22,X15),X8))))) = s(fun(X22,X14),'const.combin.o_2'(s(fun(X15,X14),'const.combin.o_2'(s(fun(X6,X14),X10),s(fun(X15,X6),X9))),s(fun(X22,X15),X8)))),
  file('thm.patSem.state_fupdfupds_comp|split|7','thm.combin.o_ASSOC')).
% SZS output end Proof for thm.patSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 182
% Passive clauses: 2390
% Generated clauses: 27665
% Final active clauses: 110
% Final passive clauses: 1215
% Input formulas: 68
% Initial clauses: 77
% 
% Duplicate literals: 826
% Trivial inequalities: 52
% Fw subsumption resolutions: 663
% Fw demodulations: 4102
% Bw demodulations: 887
% Condensations: 1087
% Global subsumptions: 2
% 
% Simple tautologies: 67
% Equational tautologies: 129
% Forward subsumptions: 18222
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 45
% 
% Unit resulting resolution: 773
% Factoring: 1
% Forward superposition: 8978
% Backward superposition: 8909
% Self superposition: 286
% Equality factoring: 114
% Equality resolution: 2
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 2482
% SAT solver unit clauses: 538
% SAT solver binary clauses: 1174
% 
% Sat splits: 26
% Sat splitting refutations: 36
% 
% Memory used [KB]: 37355
% Time elapsed: 1.322 s
% ------------------------------
% ------------------------------
% Success in time 2.66 s
